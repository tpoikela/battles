{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./client/src/rg.ts","webpack:///./client/src/random.ts","webpack:///./client/src/component/index.ts","webpack:///./client/src/geometry.ts","webpack:///./client/src/system/system.base.ts","webpack:///./client/src/element.ts","webpack:///./client/src/objectshellparser.ts","webpack:///./client/src/eventpool.ts","webpack:///./node_modules/debug/src/browser.js","webpack:///./client/data/elem-constants.ts","webpack:///./client/src/brain/index.ts","webpack:///./client/src/level.ts","webpack:///./lib/rot.js","webpack:///./client/src/component/component.ts","webpack:///./client/src/map.generator.ts","webpack:///./client/src/path.ts","webpack:///./client/src/dice.ts","webpack:///./client/src/factory.level.ts","webpack:///./client/src/component/component.base.ts","webpack:///./client/src/item.ts","webpack:///./client/src/verify.ts","webpack:///./client/src/world.ts","webpack:///./client/src/menu.ts","webpack:///./client/src/entity.ts","webpack:///./client/src/placer.ts","webpack:///./client/src/factory.items.ts","webpack:///./client/src/evaluators.ts","webpack:///./client/src/map.ts","webpack:///./client/src/dungeon-populate.ts","webpack:///./client/src/utils.ts","webpack:///./client/src/brain/brain.ts","webpack:///./client/src/actor.ts","webpack:///./client/src/time.ts","webpack:///./client/src/brain/brain.virtual.ts","webpack:///./client/data/actors.ts","webpack:///./client/src/builder.ts","webpack:///./client/src/template.ts","webpack:///./client/src/level-generator.ts","webpack:///./client/src/factory.ts","webpack:///./client/src/factory.world.ts","webpack:///./client/src/system/system.quest.ts","webpack:///./client/src/keymap.ts","webpack:///./client/src/brain/brain.base.ts","webpack:///./client/src/goals.ts","webpack:///./client/src/spell.ts","webpack:///./client/data/tiles.castle.ts","webpack:///./client/data/name-gen.ts","webpack:///./client/src/ow-constants.ts","webpack:///./client/src/mixin.ts","webpack:///./client/src/game-object.ts","webpack:///./client/src/brain/brain.memory.ts","webpack:///./client/src/brain/brain.player.ts","webpack:///./client/src/equipment.ts","webpack:///./client/src/brain/brain.weather.ts","webpack:///./client/src/constraints.ts","webpack:///./client/data/shell-utils.ts","webpack:///./client/src/goals-top.ts","webpack:///./client/src/abilities.ts","webpack:///./client/src/actor-class.ts","webpack:///./client/src/game.battle.ts","webpack:///./client/src/city-generator.ts","webpack:///./client/src/quest/index.ts","webpack:///./client/src/castle-generator.ts","webpack:///./client/src/world.creator.ts","webpack:///./client/src/overworld.map.ts","webpack:///./client/src/overworld.ts","webpack:///./client/src/system/system.effects.ts","webpack:///./client/src/chat.ts","webpack:///./client/src/component/component.mindcontrol.ts","webpack:///./client/src/goals-battle.ts","webpack:///./client/data/spells.ts","webpack:///./client/src/brain/brain.goaloriented.ts","webpack:///./client/src/evaluators-battle.ts","webpack:///./client/src/component/component.abilities.ts","webpack:///./client/src/map.cell.ts","webpack:///./lib/bsp.ts","webpack:///./client/src/template.level.ts","webpack:///./client/data/tiles.crypt.ts","webpack:///./client/data/tiles.vault.ts","webpack:///./client/src/factory.actors.ts","webpack:///./client/src/quest/quest-task.ts","webpack:///./client/src/quest/quest-data.ts","webpack:///./client/src/quest/quest-gen.ts","webpack:///./client/src/factory.zone.ts","webpack:///./client/src/conf-stack.ts","webpack:///./client/src/game.fromjson.ts","webpack:///./client/data/territory-map.ts","webpack:///./client/src/territory.ts","webpack:///./client/src/world.simulation.ts","webpack:///./client/src/system/system.animation.ts","webpack:///./client/src/system/system.area-effects.ts","webpack:///./client/src/system/system.attack.ts","webpack:///./client/src/system/system.base-action.ts","webpack:///./client/src/system/system.battle.ts","webpack:///./client/src/system/system.chat.ts","webpack:///./client/src/system/system.communication.ts","webpack:///./client/src/system/system.damage.ts","webpack:///./client/src/system/system.disability.ts","webpack:///./client/src/system/system.equip.ts","webpack:///./client/src/system/system.events.ts","webpack:///./client/src/system/system.exp-points.ts","webpack:///./client/src/system/system.hunger.ts","webpack:///./client/src/system/system.missile.ts","webpack:///./client/src/system/system.movement.ts","webpack:///./client/src/system/system.shop.ts","webpack:///./client/src/system/system.skills.ts","webpack:///./client/src/system/system.spell-cast.ts","webpack:///./client/src/system/system.spell-effect.ts","webpack:///./client/src/system/system.spirit-bind.ts","webpack:///./client/src/system/system.time-effects.ts","webpack:///./client/src/system/system.weather.ts","webpack:///./client/util/create-game-worker.ts","webpack:///./client/src/factory.game.ts","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/debug/src/debug.js","webpack:///./node_modules/ms/index.js","webpack:///./client/src/goal.thief.ts","webpack:///./client/src/inv.ts","webpack:///./client/src/cmd-player.ts","webpack:///./client/data/battles_objects.ts","webpack:///./client/data/items.ts","webpack:///./client/data/colors.ts","webpack:///./client/data/elements.ts","webpack:///./client/data/effects.ts","webpack:///./client/data/actor-gen.ts","webpack:///./client/src/houses.ts","webpack:///./client/data/tiles.houses.ts","webpack:///./lib/map.forest.ts","webpack:///./lib/map.miner.ts","webpack:///./lib/map.mountain.ts","webpack:///./lib/map.wall.ts","webpack:///./client/data/actor-mods.ts","webpack:///./client/data/debug-game.ts","webpack:///./client/data/texts.ts","webpack:///./client/src/actor.virtual.ts","webpack:///./node_modules/prettybnf/prettybnf.js","webpack:///./client/data/quest-grammar.ts","webpack:///./client/src/quest/quest-populate.ts","webpack:///./client/src/random-cyclic.ts","webpack:///./client/data/level-factory.ts","webpack:///./client/data/abandoned-fort.ts","webpack:///./client/data/black-tower.ts","webpack:///./client/src/level-surroundings.ts","webpack:///./client/src/mountain-generator.ts","webpack:///./client/data/capital.ts","webpack:///./client/data/dwarven-city.ts","webpack:///./client/src/level-utils.ts","webpack:///./client/src/dungeon-generator.ts","webpack:///./client/src/cave-generator.ts","webpack:///./client/src/crypt-generator.ts","webpack:///./client/src/dungeon-features.ts","webpack:///./client/src/win-condition.ts","webpack:///./client/src/disposition.ts","webpack:///./client/data/level-gen.ts","webpack:///./client/src/world.fromjson.ts","webpack:///./client/src/season-manager.ts","webpack:///./client/src/day-manager.ts","webpack:///./client/src/game.ts","webpack:///./client/src/chunk-manager.ts","webpack:///./client/src/engine.ts","webpack:///./client/src/system/system.manager.ts","webpack:///./client/src/system/index.ts","webpack:///./client/src/animation.ts","webpack:///./client/src/message-handler.ts","webpack:///./client/src/game.master.ts","webpack:///./client/src/factory.battle.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RG","gameTitle","suppressErrorMessages","suppressLogs","suppressWarningMessages","suppressDiagnosticMessages","cellRenderVisible","cellRenderAlways","getCssClassForCell","cell","isVisible","this","cellRenderArray","className","getStyleClassForCell","getCssClassFullMap","hasProps","baseType","getBaseElem","getType","cellStyles","elements","propType","hasProp","props","getProp","styles","getPropClassOrChar","getCharForCell","cellChar","getCellChar","getCharFullMap","charStyles","isExplored","length","propObj","lookupKey","getName","res","default","addCellStyle","prop","type","cName","err","removeCellStyle","addCharStyle","charName","removeCharStyle","getChar","state","getCssClass","exit","exploration","lever","leverdoor","isClosed","marker","passage","placeholder","shop","stairsDown","stairsUp","wall","wallcave","wallcrypt","wallice","wallwooden","wallmount","door","actors","items","corpse","getClassName","player","spirit","potion","spiritgem","debug","obj","msg","fun","formattedMsg","console","error","Error","warn","diag","split","stack","linfo","trim","info","log","args","assertType","typeStr","extend2","Child","Parent","isNullOrUndef","ubers","uber","push","nullOrUndefError","val","list","addStackedItems","item1","item2","equals","countToAdd","getCount","incrCount","removeStackedItems","itemStack","rmvItem","decrCount","clone","setCount","getItemDamage","item","rollDamage","weight","getWeight","Math","ceil","getMeleeAttack","att","attack","getAttack","missile","getInvEq","getMissile","missWeapon","getMissileWeapon","getMeleeAttackRange","attackRange","getAttackRange","weapon","getWeapon","weaponRange","getMeleeDamageAdded","dmg","getCombatBonus","strengthToDamage","getStrength","getMeleeAttackInfo","result","getDamageDie","toString","getMissileAgilityDmg","agi","round","getMissileDamageAdded","miss","getAgility","has","getMissileDamage","getMissileAttack","getEquipment","getAccuracy","getMissileAttackInfo","getMissileRange","range","getLevel","str","accuracyToAttack","acc","floor","agilityToDefense","findEnemyCellForActor","actor","seenCells","filter","hasActors","forEach","getActors","found","j","isEnemy","PLAYER_FOV_RANGE","NPC_FOV_RANGE","ACTION_DUR","BASE_SPEED","DEFAULT_HP","MAX_ACTIVE_LEVELS","EVT_ACTOR_CREATED","EVT_ACTOR_KILLED","EVT_DESTROY_ITEM","EVT_MSG","EVT_LEVEL_CHANGED","EVT_LEVEL_ENTERED","EVT_TILE_CHANGED","EVT_EXPLORED_ZONE_LEFT","EVT_LEVEL_PROP_ADDED","EVT_LEVEL_PROP_REMOVED","EVT_ACT_COMP_ADDED","EVT_ACT_COMP_REMOVED","EVT_ACT_COMP_ENABLED","EVT_ACT_COMP_DISABLED","EVT_WIN_COND_TRUE","EVT_ANIMATION","EVT_CREATE_BATTLE","EVT_BATTLE_OVER","EVT_ARMY_EVENT","EVT_ITEM_PICKED_UP","EVT_ACTOR_DAMAGED","EVT_ACTOR_ATTACKED","EVT_ACTOR_USED_STAIRS","EVT_WEATHER_CHANGED","EVT_DAY_PHASE_CHANGED","EVT_DAY_CHANGED","EVT_MONTH_CHANGED","EVT_SEASON_CHANGED","EVT_YEAR_CHANGED","TYPE_ACTOR","TYPE_ELEM","TYPE_ITEM","ITEM","BASE","FOOD","BOOK","CORPSE","WEAPON","ARMOUR","SPIRITGEM","GOLD","MINERAL","MISSILE","MISSILE_WEAPON","AMMUNITION","POTION","RUNE","GOLD_COIN","SHOP_TYPES","USE","DRINK","DIG","LEVER","LEVEL_ID_ADD","ENTITY_ID_ADD","WATCHDOG","NO_TARGET","LEVEL_EMPTY","LEVEL_FOREST","LEVEL_MOUNTAIN","energy","ATTACK","DEFAULT","JUMP","MOVE","PICKUP","REST","RUN","SPELL","BIAS","ALWAYS","NOT_POSSIBLE","Explore","Flee","Guard","Order","Patrol","FMODE_NORMAL","FMODE_FAST","FMODE_SLOW","PROT_BYPASS_CHANCE","MISSILE_CRITICAL_SHOT","DANGER_ADJ_FACTOR","DAMAGE_ADJ_FACTOR","PLAYER_HP_REGEN_PERIOD","PLAYER_PP_REGEN_PERIOD","MIN_VALUE","TRAINER_PROB","EPIC_PROB","GOLD_COIN_WEIGHT","GOLD_COIN_NAME","HUNGER_PROB","HUNGER_DMG","ALIGN_GOOD","ALIGN_EVIL","ALIGN_NEUTRAL","EVIL_RACES","NEUTRAL_RACES","ACTOR_RACES","sort","ALL_RACES","concat","CARDINAL_DIR","freeze","CARDINAL_DIR_ABBR","DIR","N","S","E","W","NE","SE","NW","SW","DIR_NSEW","DIR_DIAG","SEASON","AUTUMN","AUTUMN_WINTER","WINTER","WINTER_SPRING","SPRING","SPRING_SUMMER","SUMMER","SUMMER_AUTUMN","DAY","DAWN","MORNING","NOON","AFTERNOON","EVENING","DUSK","NIGHT","dirTodXdY","dir","Array","isArray","ucDir","toUpperCase","dXdYToDir","dXdY","dX","dY","dirToChar","DMG","ACID","BLUNT","COLD","ENERGY","FIRE","HUNGER","ICE","LIGHTNING","MAGIC","MELEE","NECRO","PIERCE","POISON","SLASH","SLIME","VOID","WATER","classNameDMG","STATS","STATS_LC","map","stat","toLowerCase","LEVEL_NOT_LOADED","TILE_NOT_LOADED","STATS_ABBR","substr","GET_STATS","SET_STATS","getDmgClassName","dmgType","key2Num","x","y","parseInt","isEmpty","getParent","getObjRefArray","arr","targetObj","getObjRef","$objRefArray","isItem","$objRef","id","getID","$objID","getForestConf","cols","rows","mult","LEVEL_MEDIUM_X","LEVEL_MEDIUM_Y","ratio","nForests","forestSize","PROP_TYPES","FMODES","ALIGNMENTS","getDangerProb","min","max","level","maxArr","highPoint","absDiff","abs","prob","getMaxDanger","xDiff","yDiff","maxDanger","getMaxValue","maxValue","getFoodWeightDistr","0.1","0.2","0.3","0.4","0.5","getGoldCoinCountDistr","nLevel","maxVal","dist","getRuneChargeDistr","0","1","2","3","4","5","valueToGoldWeight","currVal","slope","scaleItemValue","bonus","currValue","getValue","newValue","setValue","hasEnoughGold","goldWeight","ncoins","getGoldInCoins","getInventory","getItems","removeNCoins","ncoinsRemoved","coinsFound","removeItem","getItemStat","getFuncName","sComp","gem","getGem","getExpRequired","newLevel","reqExp","newXYFromDir","src","xSrc","ySrc","getX","getXY","dest","xDest","yDest","getY","dXdYAbs","dXdYUnit","withinRange","levelUpActor","currLevel","getExpLevel","nextLevel","setExpLevel","getClass","advanceLevel","levelUpStats","levelUpCombatStats","hComp","incr","isPlayer","setMaxHP","getMaxHP","setHP","getHP","randStat","random_1","Random","getRNG","arrayGetRand","incrStat","combatComp","incrAtt","setAttack","incrDef","setDefense","getDefense","prot","getProtection","setProtection","dmgDie","setDice","getDice","setMod","getMod","printObj","funcs","printVal","func","json","JSON","stringify","printObjList","filterFunc","numObjs","index","getUseCmd","target","cmd","getDropCmd","count","getEquipCmd","getUnequipCmd","slotNumber","slot","ONE_SHOT_ITEMS","isOneShotItem","itemType","indexOf","isActor","getPropType","isElement","isEntity","comps","compsByType","add","isActorActive","getItemUseType","targetOrObj","BLOCK_X","BLOCK_Y","LEVEL_SMALL_X","LEVEL_SMALL_Y","LEVEL_LARGE_X","LEVEL_LARGE_Y","LEVEL_HUGE_X","LEVEL_HUGE_Y","LOOT_SPARSE_SQR","LOOT_MEDIUM_SQR","LOOT_ABUNDANT_SQR","ACTOR_SPARSE_SQR","ACTOR_MEDIUM_SQR","ACTOR_ABUNDANT_SQR","WEAKNESS","MINOR","MEDIUM","SEVERE","FATAL","RESISTANCE","STRONG","IMMUNITY","ABSORB","SYS","ANIMATION","AREA_EFFECTS","BATTLE","BASE_ACTION","CHAT","COMMUNICATION","DAMAGE","DISABILITY","EQUIP","EVENTS","EXP_POINTS","MOVEMENT","QUEST","SHOP","SKILLS","SPELL_CAST","SPELL_EFFECT","SPIRIT","TIME_EFFECTS","WEATHER","NO_DAMAGE_SRC","getCardinalDirection","getMap","getTextualDir","tol","dXNew","dYNew","printMap","rowByRow","colsToRows","_map","sizeY","join","forEach2D","map2D","copy2D","copy","sizeX","flattenTo2D","row","flat","data","e","uniquifyCoord","seen","setAllExplored","setExplored","inSameLevel","ent1","ent2","getImpassableMsg","formatLocationName","feat","parent","subName","zoneName","isSuccess","getUniform","ent","whatever","window","PLAYER","Number","isInteger","find","a","comp","compID","entID","entity","getComponents","toJSON","while","testFunc","loopBody","timeout","numTries","POOL","EventPool","getPool","gameMsg","emitMsgEvent","gameInfo","gameDescr","gameSuccess","gameWarn","gameDanger","style","newMsg","msgObj","msgObject","substring","emitEvent","destroyItemIfNeeded","rg_1","__importDefault","rot_1","DIRS","DIRS_NO_ZERO","[object Object]","rng","instance","seed","RNG","setSeed","setState","keys","randIndex","slice","getUniformInt","mean","stddev","getNormal","getWeightedValue","weights","getState","bbox","ulx","uly","lrx","lry","array","temporaryValue","currentIndex","randomIndex","component_base_1","__export","component_mindcontrol_1","component_abilities_1","Component","MindControl","Abilities","verifyInt","Geometry","x0","y0","incSelf","maxX","maxY","convertBbox","llx","ury","urx","lly","getBox","getHollowBox","coord","getCoordBbox","xy","colsDiv","rowsDiv","cBbox","c0","c1","x1","y1","size","RightX","midX","highY","lowY","diamond","isCorner","modified","toBeRemoved","nFound","findIndex","xyPair","splice","l1","levels","conf","currX","currY","alignLeft","mergeLevels","centerX","centerY","midY","l2","startX","startY","m1","m2","numExpActors","getElements","getNewXY","hasXY","removeActor","addActor","addItem","elem","removeElement","addElement","mergeMapBaseElems","numActorsNew1","got","endX","endY","getCell","setBaseElem","moveCellUnsafe","mergeCb","c2","cell2","cell1","cb","parser","insertActors","insertItems","insertElements","elemType","iterateMapWithBBox","FACT","createElement","match","setProp","actorName","isFree","createActualObj","itemName","freeCoord","xDim","yDim","left","lookupXY","areaOk","isLine","xy0","xy1","incEnds","x2","y2","dx","dy","incx","incy","inc1","inc2","bresLine","getStraightLine","dXAbs","dYAbs","dirX","dirY","xLeft","yLeft","floodfill","currCell","cellsLeft","colored","getKeyXY","tryToAddCell","addedCell","xWest","xEast","yNorth","ySouth","shift","floodfill2D","lut","currXY","xyTodo","tryToAddXY","sx","sy","xx","yy","getMassCenter","squareFill","failed","cX","cY","nX","nY","newDiag","cellX","cellY","histArrayVals","hist","tesselateLine","thr","minX","minY","getBresenham","getCaveConnLine","brushFunc","getCrossCaveConn","brush","w","__importStar","eventpool_1","dbg","SystemBase","skill","pts","SkillsExp","setSkill","setPoints","compClone","compDur","rollDuration","expiration","Expiration","addEffect","getSource","compSrc","setSource","compTypes","pool","entities","compTypesAny","hasNotify","listenEvent","debugEnabled","enabled","evtName","hasCompTypes","addEntity","removeEntity","hasAll","hasAny","updateEntity","nEnt","descr","entity_1","Mixin","Element","wallRegexp","obstacleRegexp","canJumpOver","test","ElementBase","Typed","Entity","elemName","super","elementsCreated","_name","canFlyOver","spellPasses","msgType","components","compsToJSON","Base","ElementWall","Opaque","impassable","Impassable","setAllImpassable","Wall","ElementStairs","Locatable","srcLevel","targetLevel","_srcLevel","_targetLevel","_targetStairs","stairs","getSrcLevel","setTargetLevel","ss","setTargetStairs","newX","newY","connObj","targetStairs","getTargetStairs","getTargetLevel","Stairs","ElementDoor","closed","_closed","_opaque","_impassable","closeDoor","remove","Door","ElementLeverDoor","setType","isOpen","openDoor","LeverDoor","ElementLever","_targets","onUse","addTarget","Lever","ElementShop","_shopkeeper","_costFactorShopSells","_costFactorShopBuys","_isAbandoned","keeper","buy","sell","shopkeeperID","isAbandoned","costFactorSell","costFactorBuy","shopkeeper","Shop","ElementExploration","exp","setExp","getExp","hasData","Exploration","ElementTrap","getSentientActors","Entrapped","ElementWeb","entrapComp","Entrapping","setDestroyOnMove","setDifficulty","diff","Web","ElementSlime","Slime","ElementHole","Hole","ElementPlaceholder","PlaceHolder","ElementMarker","char","tag","Marker","capitalize","battles_objects_1","actors_1","Actor","Item","effects_1","brain_1","element_1","dice_1","spells_1","actor_gen_1","ObjectShell","Creator","db","dbNoRandom","_db","_dbNoRandom","_propToCall","defense","damage","speed","strength","accuracy","agility","willpower","perception","magic","fovrange","pp","maxPP","hp","danger","brain","factory","createBrain","damageType","armour","protection","armourType","weaponType","food","missileweapon","fireRate","ammo","ammoType","categ","createComponent","Combat","Experience","Health","Stats","shell","propCalls","newObj","createNewObject","addComponents","funcName","addCompToObj","createdObj","f","fName","propTypeCalls","funcName2","f2","fName2","addUseEffects","addEquippedItems","addInventoryItems","addLootComponents","addPoison","addEnemies","addSpellbookAndSpells","addOnHitProperties","addOnAttackHitProperties","addOnEquipProperties","poison","poisonComp","Poison","setProb","setDamageDie","Dice","dieDuration","duration","setDurationDie","addOnHit","AddOnHit","setComp","onHit","processAddComp","onAttackHit","addOnHitComp","setOnDamage","setOnAttackHit","onEquip","isEquip","addComp","setter","addedComp","AddOnEquip","durDie","durComponent","Duration","enemies","enemyType","getBrain","addEnemyType","setBook","Spell","SpellBook","spells","spell","usedSpell","getUsedObject","getBook","addSpell","strOrObj","random","actorType","BaseActor","SentientActor","subtype","Armour","Book","Food","Gold","GoldCoin","Mineral","Missile","MissileWeapon","Ammo","Potion","Rune","SpiritGem","Weapon","ItemBase","usedType","compData","fname","compName","noFuncError","newCompData","newVal","_addCompFromString","usedComp","_addCompFromObj","message","compObj","inv","itemObj","loot","lootItem","lootComp","Loot","equip","needShuffle","restoreEquipped","shuffle","useFuncs","useItem","effects","use","_addUseEffectToItem","useName","useFuncName","useEffectShell","useFuncVar","useArgs","reqs","requires","_verifyAndAddReq","optional","option","reqName","createFromShell","brainName","Brain","ProcGen","dbDanger","dbByName","_dbDanger","_dbByName","_cache","actorWeights","dbGet","query","entries","filterCategWithFunc","objects","dbGetRand","getRandFromObj","getRandomActor","randShell","getRandomItem","getRandomActorWeighted","getWeighted","Parser","_base","_creator","_procgen","getCreator","getProcGen","parseShellData","parseShellCateg","objsArray","parseObjShell","validShellGiven","base","bName","baseExists","extendObj","getBase","addTypeIfUntyped","storeIntoDb","storeForUsingAsBase","newArr","storeRenderingInfo","color","fg","bg","colorfg","colorbg","dontCreate","baseName","baseObj","createEntity","hasObj","createItem","createActor","hasItem","dbExists","filterItems","dbGetNoRandom","values","createRandomActor","createRandomActorWeighted","actorShell","createRandomItem","nameOrShell","getParser","creator","parserInstance","Effects","jsonStr","Objects","objectsNew","parse","adjustActorValues","randActors","ActorGen","genActors","_listeners","_nListeners","_listenerID","_lastEmitted","_lastRemoved","pendingRemoves","notifyStackSize","poolInstance","cannotRemove","called","len","notify","removeListener","listenerID","forEachEvent","foundObj","evt","sought","nRemoved","allListeners","listener","String","process","load","storage","env","DEBUG","Function","apply","arguments","formatArgs","useColors","namespace","humanize","lastC","replace","save","namespaces","document","documentElement","WebkitAppearance","firebug","exception","table","navigator","userAgent","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","v","enable","objectshellparser_1","ELEM","frz","BED","BRIDGE","CHASM","GRASS","GRASS_SNOW","HIGH_ROCK","LAVA","PATH","ROAD","SKY","SNOW","SNOW_TRACKS","SNOW_DEEP","SNOW_DEEP_TRACKS","SNOW_LIGHT","SNOW_LIGHT_TRACKS","STONE","TREE","TREE_SNOW","WINDOW","FLOOR","FLOOR_CASTLE","FLOOR_CAVE","FLOOR_CRYPT","FLOOR_HOUSE","FLOOR_WOODEN","WALL","WALL_CASTLE","WALL_CAVE","WALL_CRYPT","WALL_ICE","WALL_WOODEN","WALL_MOUNT","WATER_FROZEN","FORT","ELEM_MAP","elemTypeToObj","elemTypeToIndex","elemIndexToType","elemIndexToElemObj","elemIndex","brain_weather_1","brain_virtual_1","BG","Animal","BrainAnimal","Commander","BrainCommander","Explorer","BrainExplorer","GoalOriented","BrainGoalOriented","SpellCaster","BrainSpellCaster","Spirit","BrainSpirit","Thief","BrainThief","Flame","BrainFlame","Cloud","BrainCloud","Virtual","BrainVirtual","Weather","BrainWeather","component_1","elem_constants_1","LevelCallback","cbType","getCbType","Level","createEntityID","_parent","_p","_levelNo","_callbacks","_cbState","onFirstEnterDone","onFirstExitDone","Lore","no","subZoneParent","_isStairs","elemStairs","conn","allStairs","getStairs","setSrcLevel","setBaseElemXY","_addPropToLevelXY","hasConnection","getConnection","useStairs","addStairs","xCell","yCell","_getFreeCellXY","debugPrintInASCII","_removePropFromLevelXY","pickup","Pickup","oX","oY","freeCells","getFree","isOwnable","setXY","setLevel","getOwner","unsetLevel","removeProp","visibleCells","getVisibleCells","getExploredCells","extras","_extras","OnEnter","OnFirstEnter","OnExit","OnFirstExit","emptyCells","getEmptyCells","eX","eY","isJSON","levelNumber","getLevelNumber","cbState","__webpack_exports__","ROT","isSupported","getContext","DEFAULT_WIDTH","DEFAULT_HEIGHT","8","6","VK_CANCEL","VK_HELP","VK_BACK_SPACE","VK_TAB","VK_CLEAR","VK_RETURN","VK_ENTER","VK_SHIFT","VK_CONTROL","VK_ALT","VK_PAUSE","VK_CAPS_LOCK","VK_ESCAPE","VK_SPACE","VK_PAGE_UP","VK_PAGE_DOWN","VK_END","VK_HOME","VK_LEFT","VK_UP","VK_RIGHT","VK_DOWN","VK_PRINTSCREEN","VK_INSERT","VK_DELETE","VK_0","VK_1","VK_2","VK_3","VK_4","VK_5","VK_6","VK_7","VK_8","VK_9","VK_COLON","VK_SEMICOLON","VK_LESS_THAN","VK_EQUALS","VK_GREATER_THAN","VK_QUESTION_MARK","VK_AT","VK_A","VK_B","VK_C","VK_D","VK_E","VK_F","VK_G","VK_H","VK_I","VK_J","VK_K","VK_L","VK_M","VK_N","VK_O","VK_P","VK_Q","VK_R","VK_S","VK_T","VK_U","VK_V","VK_W","VK_X","VK_Y","VK_Z","VK_CONTEXT_MENU","VK_NUMPAD0","VK_NUMPAD1","VK_NUMPAD2","VK_NUMPAD3","VK_NUMPAD4","VK_NUMPAD5","VK_NUMPAD6","VK_NUMPAD7","VK_NUMPAD8","VK_NUMPAD9","VK_MULTIPLY","VK_ADD","VK_SEPARATOR","VK_SUBTRACT","VK_DECIMAL","VK_DIVIDE","VK_F1","VK_F2","VK_F3","VK_F4","VK_F5","VK_F6","VK_F7","VK_F8","VK_F9","VK_F10","VK_F11","VK_F12","VK_F13","VK_F14","VK_F15","VK_F16","VK_F17","VK_F18","VK_F19","VK_F20","VK_F21","VK_F22","VK_F23","VK_F24","VK_NUM_LOCK","VK_SCROLL_LOCK","VK_CIRCUMFLEX","VK_EXCLAMATION","VK_DOUBLE_QUOTE","VK_HASH","VK_DOLLAR","VK_PERCENT","VK_AMPERSAND","VK_UNDERSCORE","VK_OPEN_PAREN","VK_CLOSE_PAREN","VK_ASTERISK","VK_PLUS","VK_PIPE","VK_HYPHEN_MINUS","VK_OPEN_CURLY_BRACKET","VK_CLOSE_CURLY_BRACKET","VK_TILDE","VK_COMMA","VK_PERIOD","VK_SLASH","VK_BACK_QUOTE","VK_OPEN_BRACKET","VK_BACK_SLASH","VK_CLOSE_BRACKET","VK_QUOTE","VK_META","VK_ALTGR","VK_WIN","VK_KANA","VK_HANGUL","VK_EISU","VK_JUNJA","VK_FINAL","VK_HANJA","VK_KANJI","VK_CONVERT","VK_NONCONVERT","VK_ACCEPT","VK_MODECHANGE","VK_SELECT","VK_PRINT","VK_EXECUTE","VK_SLEEP","Text","RE_COLORS","TYPE_TEXT","TYPE_NEWLINE","TYPE_FG","TYPE_BG","measure","maxWidth","width","height","tokens","tokenize","lineWidth","token","offset","part","_breakLines","Infinity","lineLength","lastTokenWithSpace","charAt","_breakInsideToken","pop","nextIndex","breakIndex","lastIndexOf","lastTextToken","tokenIndex","removeBreakChar","newBreakToken","newTextToken","randomize","mod","lpad","character","ch","cnt","rpad","format","template","group1","group2","parts","method","replaced","first","unshift","tmp","extend","constructor","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","Display","options","canvas","_context","_data","_dirty","_options","_backend","defaultOptions","transpose","layout","fontSize","spacing","border","forceSquareRatio","fontFamily","fontStyle","tileWidth","tileHeight","tileMap","tileSet","tileColorize","termColor","setOptions","_tick","what","draw","clear","font","compute","textAlign","textBaseline","getOptions","getContainer","computeSize","availWidth","availHeight","computeFontSize","eventToPosition","touches","clientX","clientY","rect","getBoundingClientRect","top","clientWidth","clientHeight","drawText","text","cx","cy","lines","isSpace","isPrevSpace","isFullWidth","isPrevFullWidth","cc","charCodeAt","fillStyle","fillRect","_draw","clearBefore","Backend","context","Rect","_spacingX","_spacingY","_canvasCache","cache","charWidth","measureText","_drawWithCache","_drawNoCache","hash","b","ctx","chars","fillText","drawImage","boxWidth","boxHeight","oldFont","widthFraction","Hex","_hexSize","xprop","yprop","sqrt","px","reverse","_fill","hexSizeWidth","hexSizeHeight","hexSize","nodeSize","beginPath","moveTo","lineTo","fill","Tile","_colorCanvas","clearRect","tile","globalCompositeOperation","getSeed","_seed","_s0","_frac","_s1","_s2","_c","lowerBound","upperBound","u","getPercentage","total","StringGenerator","words","order","prior","_boundary","fromCharCode","_suffix","_prefix","_priorValues","generate","_sample","_join","observe","string","_split","event","subcontext","_observeEvent","getStats","priorCount","dataCount","eventCount","_backoff","available","EventQueue","_time","_events","_eventTimes","getTime","insertOne","time","_remove","spliceOne","Scheduler","_queue","_repeat","_current","repeat","next","Simple","Speed","getSpeed","Action","_defaultDuration","_duration","setDuration","Engine","scheduler","_scheduler","_lock","start","unlock","lock","act","then","Map","_width","_height","callback","_fillMap","getCols","getRows","getCenterXY","Arena","h","DividedMaze","_stack","_process","room","_partitionRoom","availX","availY","bottom","right","walls","solid","hole","IceyMaze","regularity","_regularity","nx","ny","done","blocked","dirs","_randomize","_isFree","EllerMaze","L","R","lastJ","_addToList","_removeFromList","Cellular","born","survive","topology","_dirs","probability","set","newMap","widthStep","widthStart","cur","ncount","_getNeighbors","serviceCallback","connect","connectionCallback","allFreeSpace","notConnected","_freeSpace","_pointKey","connected","_findConnected","from","_getFromTo","to","k","_tunnelToConnected","connectedKeys","notConnectedKeys","_getClosest","point","space","minPoint","minDist","keepNotConnected","tests","pkey","Dungeon","_rooms","_corridors","getRooms","getCorridors","Digger","roomWidth","roomHeight","corridorLength","dugPercentage","timeLimit","_features","Room","Corridor","_featureAttempts","_walls","_digCallback","_canBeDugCallback","_isWallCallback","_priorityWallCallback","_dug","area","_firstRoom","t1","Date","now","_findWall","_getDiggingDirection","featureAttempts","_tryFeature","_removeSurroundingWalls","priorityWalls","_addDoors","_startRoom","Feature","createRandomCenter","_extraRooms","extraRoom","startRoom","addRoom","prio1","prio2","feature","createRandomAt","isValid","createPriorityWalls","deltas","delta","isWallCallback","clearDoors","addDoors","Uniform","roomDugPercentage","_roomAttempts","_corridorAttempts","_connected","_unconnected","_generateRooms","_generateCorridors","_generateRoom","createRandom","room1","_closestRoom","room2","_connectRooms","rooms","center","getCenter","center1","center2","diffX","diffY","dirIndex2","dirIndex1","getLeft","getRight","getTop","getBottom","_placeInWall","end","_digLine","rotation","mid","index2","mid1","mid2","addDoor","dirIndex","avail","lastBadIndex","points","corridor","Rogue","cellWidth","cellHeight","_calculateRoomSize","connectedCells","_initRooms","_connectUnconnectedRooms","_createRandomRoomConnections","_createRooms","_createCorridors","connections","cellx","celly","idx","ncgx","ncgy","otherRoom","cgx","cgy","dirToCheck","cw","directions","validRoom","dirIdx","newI","newJ","roomw","roomh","cwp","chp","sxOffset","syOffset","ii","jj","_getWallPosition","aRoom","aDirection","rx","ry","_drawCorridore","startPosition","endPosition","tempDist","xDir","yDir","move","xOffset","yOffset","xpos","ypos","moves","xAbs","yAbs","percent","firstHalf","secondHalf","connection","otherWall","canBeDugCallback","digCallback","doorX","doorY","_x1","_y1","_x2","_y2","_doors","_feats","_stairs","createCenter","isDown","hasStairs","hasStairsUp","vals","getDoors","getWidth","getHeight","getCorners","nw","ne","sw","se","isTerm","_roomID","setID","getBbox","getOuterBbox","getInnerBbox","halo","getAreaSize","_startX","_startY","_endX","_endY","_endsWithAWall","ok","firstCornerBad","secondCornerBad","priorityWallCallback","Noise","Simplex","gradients","_F2","_G2","_gradients","permutations","_perms","_indexes","xin","yin","gi","i1","j1","perms","indexes","G2","n0","n1","n2","t0","grad","t2","FOV","lightPassesCallback","_lightPasses","_getCircle","countFactor","startOffset","DiscreteShadowcasting","_coords","A","B","blocks","DATA","neighbors","angle","_visibleCoords","v1","callee","v2","PreciseShadowcasting","A1","A2","visibility","SHADOWS","neighborCount","_checkVisibility","index1","edge1","old","edge2","visibleLength","visible","P","P1","P2","RecursiveShadowcasting","OCTANTS","_renderOctant","compute180","previousOctant","nextPreviousOctant","nextOctant","compute90","octant","_castVisibility","visSlopeStart","visSlopeEnd","radius","yx","newStart","mapX","mapY","slopeStart","slopeEnd","Color","fromString","cached","color1","color2","add_","multiply","multiply_","interpolate","factor","interpolateHSL","hsl1","rgb2hsl","hsl2","hsl2rgb","g","hue2rgb","q","toRGB","_clamp","toHex","num","black","navy","darkblue","mediumblue","blue","darkgreen","green","teal","darkcyan","deepskyblue","darkturquoise","mediumspringgreen","lime","springgreen","aqua","cyan","midnightblue","dodgerblue","forestgreen","seagreen","darkslategray","darkslategrey","limegreen","mediumseagreen","turquoise","royalblue","steelblue","darkslateblue","mediumturquoise","indigo","darkolivegreen","cadetblue","cornflowerblue","mediumaquamarine","dimgray","dimgrey","slateblue","olivedrab","slategray","slategrey","lightslategray","lightslategrey","mediumslateblue","lawngreen","chartreuse","aquamarine","maroon","purple","olive","gray","grey","skyblue","lightskyblue","blueviolet","darkred","darkmagenta","saddlebrown","darkseagreen","lightgreen","mediumpurple","darkviolet","palegreen","darkorchid","yellowgreen","sienna","brown","darkgray","darkgrey","lightblue","greenyellow","paleturquoise","lightsteelblue","powderblue","firebrick","darkgoldenrod","mediumorchid","rosybrown","darkkhaki","silver","mediumvioletred","indianred","peru","chocolate","tan","lightgray","lightgrey","palevioletred","thistle","orchid","goldenrod","crimson","gainsboro","plum","burlywood","lightcyan","lavender","darksalmon","violet","palegoldenrod","lightcoral","khaki","aliceblue","honeydew","azure","sandybrown","wheat","beige","whitesmoke","mintcream","ghostwhite","salmon","antiquewhite","linen","lightgoldenrodyellow","oldlace","red","fuchsia","magenta","deeppink","orangered","tomato","hotpink","coral","darkorange","lightsalmon","orange","lightpink","pink","gold","peachpuff","navajowhite","moccasin","bisque","mistyrose","blanchedalmond","papayawhip","lavenderblush","seashell","cornsilk","lemonchiffon","floralwhite","snow","yellow","lightyellow","ivory","white","Lighting","reflectivityCallback","_reflectivityCallback","passes","emissionThreshold","_fov","_lights","_reflectivityCache","_fovCache","reset","setFOV","fov","setLight","clearLights","lightingCallback","doneCells","emittingCells","litCells","light","_emitLight","_computeEmitters","litKey","_emitLightFromCell","reflectivity","emission","intensity","_updateFOV","fovKey","formFactor","key1","vis","Path","toX","toY","passableCallback","_toX","_toY","_fromX","_fromY","_passableCallback","fromX","fromY","Dijkstra","_computed","_todo","_add","_compute","prev","nlen","AStar","_done","neighbor","_distance","itemF","chat_1","geometry_1","DataComponent","UniqueDataComponent","UniqueTransientDataComponent","TransientDataComponent","TransientTagComponent","TagComponent","UniqueTagComponent","BaseProto","ComponentBase","NO_TYPE","active","addEnergy","resetEnergy","getEntity","disable","Location","isLocated","setX","setY","objType","_init","Hunger","maxEnergy","minEnergy","decrEnergy","isStarving","isFull","HP","maxHP","addHP","decrHP","isAlive","isDead","hpLost","Dead","Corporeal","Damage","damageCateg","source","sourceActor","DirectDamage","Damaged","damageLevel","Broken","expLevel","ExpPoints","expPoints","skillPoints","skills","addSkillPoints","addExpPoints","damageDie","roll","strOrDie","rhs","CombatMods","clearValues","setAccuracy","setAgility","setStrength","setWillpower","setPerception","setSpeed","setMagic","statName","addValue","getWillpower","getPerception","getMagic","StatsMods","Perception","FOVRange","Attack","Movement","Chat","Trainer","chatObj","setChatObj","ChatTrainer","addCallback","setTrainer","flying","targetX","targetY","path","pathIter","hasRange","isFlying","stopMissile","setTargetXY","inTarget","iteratorValid","setValuesFromIterator","lootEntity","_lootEntity","dropLoot","setElemToCell","entLevel","setLootEntity","lootJSON","createFunc","Communication","addMsg","Damaging","OneShot","Physical","Ethereal","description","Stun","Paralysis","Created","setCreator","Named","uniqueName","prepend","getBaseName","getFullName","DurationRoll","DamageRoll","_src","_prob","getProb","Coldness","Heat","BodyTemp","temp","maxTemp","minTemp","decr","isFreezing","isFrozen","Owned","owner","Stolen","Unpaid","Breakable","Indestructible","Flying","Undead","Summoned","Sharpener","Sharpened","Possessed","Weakness","effect","Resistance","Magical","NonSentient","ActorClass","_class","_className","setClassName","setActorClass","actorClass","actorRef","Defender","Attacker","BiDirStrike","CounterAttack","desciption","Ambidexterity","LongReach","FirstStrike","MasterEquipper","BypassProtection","chance","Charm","targetActor","Climber","Jumper","jumpRange","Camouflage","SnowWalk","Amphibious","EagleEye","StrongShot","ThroughShot","MixedShot","LongRangeShot","RangedEvasion","CriticalShot","DoubleShot","SpellPower","PP","addPP","decrPP","hasPower","canCast","spellPP","PowerDrain","drainDist","SpellBase","_spell","_args","getSpell","setSpell","getArgs","setArgs","SpellCast","SpellRay","SpellMissile","SpellCell","SpellArea","SpellSelf","SpellStop","NourishedOne","SpiritBind","binder","GemBound","setGem","SpiritItemCrafter","Skills","_isUnique","_skills","hasSkill","addSkill","getPoints","resetPoints","addPoints","getSkills","setSkills","Shopkeeper","levelID","cells","doorXY","Transaction","InBattle","setData","getData","updateData","assign","BattleExp","BattleOver","BattleBadge","isWon","status","isLost","BattleOrder","Reputation","addToFame","nFame","fame","Event","effectType","PlayerControlled","Player","onDamage","jsonComp","createComp","Equip","isRemove","addedToActor","setAddedToActor","RegenEffect","waitPP","waitHP","maxWaitPP","maxWaitHP","Telepathy","setTarget","Animation","addToExpirationComp","dur","expComp","Give","giveTarget","Jump","OpenDoor","Read","readTarget","Rest","UseElement","element","useType","UseItem","targetType","UseStairs","GameInfo","zones","oldData","addZone","hasZone","addZoneType","Fading","decrDuration","expireMsg","removeEffect","compIDStr","hasEffects","hasEffect","cleanup","_comp","_source","_addedOnActor","_addCb","removeCallbacks","getComp","newComp","added","setAddedOnActor","QuestGiver","hasGivenQuest","questID","reward","hasGivenReward","questTargets","ChatQuest","setQuestGiver","hasReward","giveQuest","questGivenTo","targetData","subQuestID","qTarget","getSubQuestID","getChatObj","QuestTarget","isCompleted","targetID","isKill","setTargetType","QuestEscortTarget","escortTo","question","setEscortTo","Quest","giver","isInThisQuest","targetComp","getQuestID","getTargetsByType","reduce","isTargetInQuest","getTarget","QuestInfo","givenBy","QuestReport","expectInfoFrom","QuestCompleted","GiveQuest","QuestTargetEvent","eventType","setTargetComp","weatherType","WeatherEffect","Indoor","Snowy","difficulty","destroyOnMove","topics","addTopic","map_1","path_1","bsp_1","builder_1","template_level_1","tiles_crypt_1","tiles_castle_1","houses_1","map_forest_1","map_miner_1","map_mountain_1","map_wall_1","inRange","inAllowedArea","exclude","MapGenerator","isOutdoors","getAndSetRNG","addSnow","snowElem","snowElemMap","asciiMap","asciiToElem","CellMap","setTag","setElemXY","wallType","floorType","FLOOR_ICE","MapForest","_mapGen","_mapType","_wall","defaultMapElem","wallElem","getWallElem","floorElem","getFloorElem","corridors","ruinsConf","maxHouseX","maxHouseY","bspGen","BSP","BSPGen","bspCols","bspRows","mainContainer","Container","leaves","splitContainer","getLeafs","leaf","haloAroundX","haloAroundY","freeLeaves","houses","houseGen","HouseGenerator","colsHouse","rowsHouse","houseConf","addWindows","house","createHouse","placeHouse","unused","elemChar","adjustCoord","addForestToMap","freeOnly","createTree","addLakesToMap","setGen","lakeMap","createLakes","isInBbox","baseElem","getBaseElemXY","skipTypes","MapWall","MapMountain","highRockThr","stoneThr","chasmThr","snowRatio","paths","nRoadTurns","createMountainPath","nTurns","yPerTurn","xPoints","inBounds","prevX","prevY","passableFuncs","getMinWeightOrShortest","chosenCoord","Builder","addPathToMap","lastPath","lastXY","totalCells","placedCoord","placedCells","watchdog","getRandDir","MapMiner","mapGen","tilesX","tilesY","TemplateLevel","Crypt","genParams","roomCount","setGenParams","setRoomCount","#",".","mapObj","fromAsciiMap","tiles","getPlacedData","tileSizeX","tileSizeY","Castle","models","templates","setTemplates","Models","full","nGates","setStartRoomFunc","startFuncTwoGates","startRoomFunc","constraintFunc","setConstraintFunc","callbacks","createCastleMapObj","outerWall","setFiller","fillerFloor","castleMapObj","&","preserveMarkers","|",":","createCastleWall","levelType","colsTown","rowsTown","townMapObj","createTownBSP","finalMap","moveHouse","addRandomSnow","createCellular","createRuins","createRooms","mountain","noiseMult","noiseDivider","light snow","light snow with tracks","snow with tracks","tree","snow-covered tree","water","frozen water","grass","snowy grass","deep snow","deep snow with tracks","snowMeltMap","NO_PATH","isSourceBlocked","passableCb","removeSourceAndTarget","coords","getShortestPath","getShortestSeenPath","getSeenCells","isPassable","getShortestPassablePath","getActorToActorPath","getShortestActorPath","removeSource","getShortestPassablePathWithDoors","hasDoor","shortestDist","getPathWeight","getMinWeightPath","pathFunc","coordPassable","coordShortest","passableWeight","shortestWeight","minPath","minWeight","pathWeight","getWeightPathSegmented","nSeg","segX","getPathSeg","segY","finalPath","segmentPath","remain","segSize","dice","_num","_dice","_mod","strOrArray","numDiceMod","parseDieSpec","strOrNumOrDie","DIE_RE","exec","DIE_NUMBER","modStr","getNum","map_generator_1","level_1","Verify","dungeon_populate_1","FactoryLevel","createLevel","_verif","Conf","mapgen","createEmptyMap","setMap","createHouseElements","createShops","createTrainers","createTownWithWall","createForest","createMountain","createSummit","createCryptNew","createCave","createCastle","createWall","createArctic","setLevelExtras","extra","setExtras","verifyConf","dungPopul","DungeonPopulate","addExtras","createdCompDecls","NO_SERIALISATION","staticAttr","Set","handleCompAttrib","CompDecl","compAttrib","attr","addNewCompDecl","errorIfCompDeclExists","setIDCount","idCount","members","argsList","propName","formatSetterName","formatGetterName","objRefs","thisComps","compJson","getIDCount","_type","_entity","_id","_onAddCallbacks","_onRemoveCallbacks","setEntity","changeEntity","newEntity","isUnique","entityAddCallback","entityRemoveCallback","compType","attrVal","defineComponent","undefineComponent","_owner","isUsable","setWeight","getObjType","setObjType","setPropType","setDamageType","getDamageType","txt","toFixed","setName","newItem","_energy","totalEnergy","getConsumedEnergy","setEnergy","getEnergy","newFood","Corpse","_weaponType","getWeaponType","setWeaponType","_fireRate","rate","setFireRate","getFireRate","_ammoType","setAmmoType","getAmmoType","Defense","_armourType","setArmourType","getArmourType","pt","useItemComp","setItem","setUseType","newPotion","_charges","charges","rune","setCharges","getCharges","setOwner","_items","_iter","_removedItem","matchFound","sum","_addItem","hasItemRef","_getMatchingItemIndex","_removeItem","_purity","purity","setPurity","_spirit","_hasSpirit","bindComp","setBinder","hasSpirit","setSpirit","getSpirit","stats","metaData","getTopOwner","compRead","setReadTarget","textLine","book","getText","setText","setMetaData","verifyStairsConnections","game","getLevels","lv","sList","isConnected","errMsg","objName","required","errorMsg","req","verifyReq","allReqs","hasNull","givenReq","reqHasNullValue","confJSON","verifySaveData","failFast","traverseObj","maxStack","allErrors","verifyLevelCache","getCells","cellItems","hasItems","levelItems","nCellItems","nLevelItems","inCellsButNotLevel","inLevelButNotCells","factory_level_1","World","oppositeEdge","east","north","south","west","removeExistingConnection","findLevel","zone","z","getFreeCellWithoutConnection","stairCell","getFreeRandCell","connectLevelsLinear","nLevels","arrStairsDown","arrStairsUp","nl","extrasSrc","hasExtras","getExtras","targetDown","sX","sY","endPoint","targetUp","startPoint","getSubZoneArgs","subZones","sz1Arg","sz2Arg","sz1","sz2","sz","getEntrance","entrance","addExitsToEdge","exitType","edge","overwrite","exitsAdded","exitWest","exitEast","col","exitNorth","exitSouth","edgeHasConnections","WorldBase","hierName","ZoneBase","_subZones","s1Arg","s2Arg","tileX","tileY","subZone","setParent","subFeat","s2IsDown","b2Stairs","sz2Levels","connectLevelToStairs","connectSubZones","findSubZone","entrances","szEntr","removeListeners","SubZoneBase","_levelFeatures","_levels","_levelCount","_entrance","otherQuartLevel","down","newStairs","levelStair","levelParent","getStairsOther","hasLevels","hasLevel","setLevelNumber","Branch","entrStairs","setEntrance","_entranceNames","branch","hasSubZone","branchName","hasBranch","nSubFeats","entr","br","entranceNames","nBranches","AreaTile","_tileX","_tileY","_area","_level","Mountain","City","BattleZone","getSizeY","getSizeX","isNorthEdge","isSouthEdge","isWestEdge","isEastEdge","eastTile","southTile","lastX","lastY","levelEast","mapEast","cellEast","stairsEast","levelSouth","mapSouth","cellSouth","connSouth","tt","getPlaceEntities","getZones","nDungeons","dungeon","dg","nMountains","mt","nCities","city","nBattleZones","battlezone","bz","zoneList","Area","_sizeX","_sizeY","_cols","_rows","_tiles","_conf","zonesCreated","tilesLoaded","tileColumn","newTile","forestConf","connectTiles","currId","printLevelIDs","hasTileWithId","tilesJSON","tileCol","tileColJSON","getConf","forEachTileLoaded","allIDs","forEachTile","loadedTiles","tilesOther","faces","getFaces","summits","getSummits","summit","addSubZone","face","conf1","conf2","level1","level2","map1","l1Stairs","l2Stairs","connectLevelsConstrained","getLevelN","connectFaceAndSummit","nFaces","nSummits","MountainFace","MountainSummit","quarter","q1","q2","sz1Level","sz2Level","newExits1","newExits2","conn1","conn2","conn1Len","conn2Len","maxLen","connectSubZoneEdges","nQuarters","CityQuarter","_shops","shops","WorldTop","_areas","currAreaIndex","stair","ar","createAllZones","nAreas","createAreaConfig","areaConf","id2Place","getID2Place","WorldShop","_coord","setShopAbandoned","getShop","abandonShop","setShopkeeper","reclaim","newItems","nItem","isZone","keymap_1","KeyMap","Keys","Menu","EXIT_MENU","NO_ACTION","NEXT_STATE","createMenuTable","menuIndices","codeToIndex","menu","funcToCall","isSelectionDone","selection","isMenuItem","MenuBase","pre","post","_showMenu","code","selectIndex","MenuInfoOnly","InfoOnly","MenuWithQuit","quitIndex","KEY","QUIT_MENU","onQuit","WithQuit","MenuSelectRequired","SelectRequired","MenuSelectCell","_enableSelectAll","inMoveCodeMap","isSelect","keyIndex","retVal","isSelectAll","SelectCell","MenuSelectTarget","targetCallback","select","isNextTarget","isPrevTarget","TARGET","MenuSelectDir","getDir","SelectDir","PlayerMissileMenu","selectCell","cellCb","setCallback","startTargeting","hasTargetSelected","NEXT","nextTarget","PREV","prevTarget","MenuWithState","keyToState","stateToTable","stateToPost","stateToPre","menuState","menuTable","menuArgs","quitObj","getMenu","addPre","addPost","WithState","game_object_1","GameObject","createObjectID","ID","nameOrCompOrId","typeName","getList","removeAll","nameOrId","compNames","nameOrComp","setPool","Placer","addPropsToFreeCells","addPropsToCells","addPropsToRoom","addActorsToBbox","addItemsToBbox","nActors","getFreeInBbox","addEntityToCellType","randCell","placer_1","ItemRandomizer","adjustItem","_adjustFunctions","_foodWeights","_adjustMissile","_adjustWeapon","randVal","_isCombatMod","_isStatsMod","_getRandStat","_runeWeights","goldcoin","goldWeights","FactoryItem","_itemRandomizer","_doItemSpecificAdjustments","addNRandItems","generateItems","nItems","itemsPerLevel","generateGold","nGold","goldPerLevel","goldItems","addRandomGold","getShopItem","shopFunc","shopType","addItemsToCells","addItemsToActor","createdItem","equipFullGearType","nameRegexp","equipItemsToActor","equipWeaponOfType","oneWeapon","itemCount","equipNItems","goals_1","goal_thief_1","Goal","GoalThief","Evaluator","EvaluatorBase","actorBias","topGoal","getGoal","goal","addGoal","bias","EvaluatorAttackActor","enemyCell","findEnemyCell","enemyActor","setActorGoal","AttackActor","EvaluatorExplore","EvaluatorFlee","getSeenEnemies","health","propHP","div","pow","FleeFromActor","EvaluatorPatrol","EvaluatorGuard","EvaluatorOrders","srcActor","getCategory","Types","Kill","acceptsOrdersFromSource","evaluator","subEval","Orders","EvaluatorCastSpell","_castingProb","getRandomSpell","canCastSpell","shouldCastSpell","CastSpell","spellArgs","getSpells","getPP","getCastingPower","actorCellsAround","getActorCellsAround","enemy","aiShouldCastSpell","newArgs","EvaluatorShopkeeper","EvaluatorGoHome","timeToHomeSick","timeToStay","maxDistHome","GoHome","EvaluatorThief","EvaluatorCommunicate","willCommunicate","communicateOrAttack","friendCell","findFriendCell","memory","getMemory","friendActor","hasCommunicatedWith","Communicate","map_cell_1","Cell","lightPasses","passableCallbackFlying","fromXY","toXY","_x","_y","hasObstacle","isPassableByAir","xA","yA","getFOVRange","_explored","mapInASCII","getFirstActor","hasElements","_isRowOptimized","_optimizeForRowAccess","_rowMap","findObj","explored","baseTypes","ex","defaultType","highestCount","cellsXY","encoded","passCb","pathFinder","fromJSON","elemObj","xCol","xNum","yAndIndex","evaluators_1","factory_items_1","factory_actors_1","world_1","MIN_ACTORS_ROOM","popOptions","theme","_itemFact","_actorFact","FactoryActor","mainLootAdded","roomsDone","bigRooms","bigRoom","areaSize","actorConf","addMainLoot","terms","itemConf","addPointGuardian","actorFunc","eXY","guardian","getEndPointGuardian","guardEval","addEvaluator","currDanger","scaleLoot","maxPrizeValue","minPrizeValue","lootPrize","addLootToPoint","addElementToPoint","addCorpseToPoint","addGoldToPoint","addTipToPoint","true","lootTypes","ITEM_POTION","ITEM_SPIRITGEM","ITEM_AMMUNITION","ITEM_RUNE","generatedType","numCoins","shopHouses","usedHouses","watchDog","nShops","shopObj","doorCell","createShopkeeper","shopCoord","keeperAdded","shopElem","shopKeep","setCells","setLevelID","setDoorXY","randXY","evalShop","setCoord","keeperLevel","trainer","trainerConf","trainComp","evalHome","numFloor","numActors","floorXY","aa","generateNActors","brain_base_1","brain_memory_1","ACTION_ALREADY_DONE","NO_ACTION_TAKEN","getCellsAroundActor","getBoxOfFreeCellsAround","coordAround","getBoxAround","findCellsWithActors","iMax","getActorsInCells","foundActor","getSeenHostiles","findCellsWithFriends","actorFound","getActorsAround","cellsAround","getEnemyCellsAround","getFriendCellsAround","isFriend","distToActor","actor1","actor2","aX","aY","getDist","getTelepathyCells","actorLevelID","tepathyComps","teleComp","newCells","BrainNonSentient","BrainBase","BrainSentient","_memory","Memory","addEnemy","addFriend","_actor","otherSeen","canSee","enemyCells","addEnemySeenCell","wasLastAttacked","topItem","canCarryItem","playX","playY","canMeleeAttack","attackComp","tryToMoveTowardsCell","movComp","pathCells","getShortestPathTo","friends","ll","ci","canToggle","setDoor","thisX","thisY","newCell","exploreLevel","getFreeCellsAround","Sentient","brain_player_1","inv_1","Time","ACTOR_NO_ACTION","SPEED_COEFF","named","_brain","setActor","decideNextAction","action","bp","new","_invEq","Inventory","_maxWeight","setFOVRange","getItem","def","shield","getEquipped","classObj","_actorClass","_spellbook","BrainPlayer","addPlayerBrainComps","_actualBrain","playerBrainComps","getTag","fovRange","inventory","equipment","spellbook","getEquipAttack","_addFromCompList","getEquipDefense","getEquipProtection","wpnDamage","compList","wil","per","mag","hasTag","statsMods","getFormattedStats","dungeonLevel","location","getMaxPP","Att","Def","Pro","Str","getStatBonus","Agi","Acc","Wil","Per","Mag","XP","XL","DL","Loc","isSentient","_cb","en","GameEvent","_offset","isEvent","nextAction","getRepeat","setRepeat","getOffset","setOffset","RegenEvent","_dur","RegenPPEvent","OneShotEvent","_actors","actOrEvent","setAction","getDuration","removeEvent","constraints_1","spawnProb","BrainSpawner","constraint","_constraintFunc","Constraints","getConstraints","getActor","freeCell","newActor","shell_utils_1","defaultBrain","resistance","setEffect","BypassComp","setChance","ActorsData","meleeHitDamage","noRandom","power","unique","Actors","scaleValue","actorsData","valName","addedVal","scale","modToFunc","modOrder","splitLevel","nLevelsX","nLevelsY","levelCol","subLevel","subMap","createWithoutCells","getSubLevel","subIndexX","subIndexY","getSubX","getSubY","subX","subY","Template","$DEBUG","genRegex","paramSplitRegex","propSplitRegex","getWidthsAndGenPos","currLineArr","lineLen","xGenPos","xWidths","prevChar","currChar","genXLen","genPos","widths","createTemplate","nLine","currLine","elemMap","elemPropMap","keyAndVal","asciiLines","firstCol","xTarget","yGenPos","yWidths","ElemTemplate","setProps","nMaps","elemArr","hasGenRow","ElemGenX","getChars","incrIndex","xGenResult","substituteXMaps","splitRes","splitMultiElements","yGenResult","xGenY","yPos","expandYGen","flattened","substituteYMaps","newElem","mapRe","realX","nChars","writeIndex","newTempl","xPos","genX","r90ExitMap","EXIT_MAPS","rotate90","rotate180","rotate270","rotateR90","templ","exitMap","remapExits","genVars","nGenVars","ascii","rotated","rotSizeX","newYPos","rotateR180","rotateR270","flipVerExitMap","dirStr","setTransformName","flipVer","flipped","flippedSizeX","newXPos","transformList","transforms","all","created","names","rot","getRotations","rotTempl","LevelGenerator","shouldRemoveMarkers","startPointElem","goalPoint","markersPreserved","removeElements","ItemConf","Factory","cityConfBase","userConf","FactoryBase","_levelFact","createDie","createPlayer","createSpell","createFloorCell","createWallCell","addNRandActors","actorsPerLevel","setParser","_parser","createHumanArmy","human","warlord","createDemonArmy","demon","createBeastArmy","beast","xAct","yAct","level_factory_1","conf_stack_1","factory_1","factory_zone_1","dungeon_generator_1","cave_generator_1","castle_generator_1","crypt_generator_1","quest_1","dungeon_features_1","ZONE_TYPES","levelSizes","Small","Medium","Large","Huge","debugPrintConfAndTile","tileLevel","mConns","getConnections","FactoryWorld","factZone","FactoryZone","worldElemByID","presetLevels","ConfStack","id2level","id2levelSet","id2entity","setRNG","setPresetLevels","setId2Level","pushScope","popScope","setGlobalConf","levelSize","sqrPerActor","globalConf","dungeonX","dungeonY","sqrPerItem","getGlobalConf","setOverWorld","overworld","getHierName","getScope","createWorld","world","setConf","createArea","restoreCreatedZones","addArea","addWorldID","areaLevels","getAreaLevels","getPresetLevels","setHierName","_createAllZones","markAllZonesCreated","keyXY","xStr","yStr","createZonesForTile","tileHasZonesCreated","worldConf","populateAreaLevel","markTileZonesCreated","createQuests","playerX","playerY","getTileXY","fact","levelConf","setAreaLevelConstraints","tx","ty","createZonesFromArea","areaTileConf","createZonesFromTile","typeLc","nZones","zoneConf","setTileXY","createAreaZoneConnection","createDungeon","branchConf","createBranch","addBranch","connectLevels","dungeonType","setLevelConstraints","getFromPresetLevels","createPresetLevels","addFixedFeatures","CryptGenerator","addItemsAndActors","addExtraDungeonFeatures","CaveGenerator","CastleGenerator","DungeonGenerator","dungFeat","DungeonFeatures","addLastLevelFeatures","addLevel","setEntranceLocation","addEntrance","entranceLevel","foundLevel","levelObj","_errorOnFunc","constrFact","con","disposition","groupType","cityType","quarterType","alignment","isFriendly","friendly","_verifyConstraintKeys","constraints","addActorToLevel","sConf","subZoneConf","keyFound","foundKey","LevelFactory","faceConf","mountainFace","createMountainFace","summitConf","mountainSummit","faceName","mLevelConf","createMountainLevel","_addEntranceToSubZone","summitLevelConf","addMaxDangerIfMissing","createSummitLevel","createCity","qConf","createCityQuarter","abutQuarters","cityLevelConf","stub","createCityLevel","addShop","createBattleZone","battleZone","getConnectionName","zoneType","getTileStairsXY","tsX","tsY","levelX","levelY","freeAreaCell","getEmptyRandCell","getEntryStairs","entryLevel","entryStairs","zoneStairs","processConnObject","zoneLevel","stairsIndex","createNewZoneConnects","connName","tileStairs","createDungeonZoneConnect","createCityZoneConnect","connectEdges","allEdgeExits","exits","zoneX","zoneY","debugPrintCityConns","conns","worldElem","QuestPopulate","getEntrances","tileSX","tileSY","connectToAreaXY","scope","system_base_1","questMsg","SystemQuest","qEvent","setEventType","_eventTable","battle","onBattleEvent","onDamageEvent","escort","onEscortEvent","onGetEvent","give","onGiveEvent","goto","onGotoEvent","kill","onKillEvent","listen","onListenEvent","read","onReadEvent","report","onReportEvent","giveComp","processGiveQuestComp","complComp","processComplComp","processQuestEvent","getGiver","giverComp","getHasGivenQuest","getQuestTargets","questComp","setQuestID","questTarget","setGiver","setDescr","getDescr","checkQuestMsgEmits","firstLevel","setTargetCompleted","quest","numSteps","getDanger","giveQuestReward","getHasGivenReward","setHasGivenReward","getReward","rewardName","getEventType","quests","getTargetComp","isEventValidForThisQuest","getTargetType","getMatchObj","targetEnt","getDamage","placeName","pZone","getParentZone","moveQuestTargetComp","getInfo","listenID","readEntity","placeData","getMetaData","placeObj","targetLoc","reportTarget","tName","reportOK","reportComp","questInfo","getExpectInfoFrom","getGivenBy","targetReportObj","srcEnt","destEnt","setIsCompleted","checkSubQuestCompletion","sqObj","VK_a","VK_b","VK_c","VK_d","VK_e","VK_f","VK_g","VK_h","VK_i","VK_j","VK_k","VK_l","VK_m","VK_n","VK_o","VK_p","VK_q","VK_r","VK_s","VK_t","VK_u","VK_v","VK_w","VK_x","VK_y","VK_z","VK_LT","VK_GT","moveKeyMap","MOVE_N","MOVE_NE","MOVE_E","MOVE_SE","MOVE_S","MOVE_SW","MOVE_W","MOVE_NW","isRest","isPickup","isUseStairs","USE_STAIRS_DOWN","USE_STAIRS_UP","isChat","isConfirmYes","YES","isFightMode","FIGHT","isGive","GIVE","isGoto","GOTO","isJump","isIssueOrder","ORDER","isLook","LOOK","isMark","MARK","isNextItem","NEXT_ITEM","isRead","READ","isRunMode","SELECT","SELECT_ALL","isTargetMode","isToggleDoor","DOOR","isUsePower","POWER","isUseAbility","ABILITY","isMultiPurpose","MULTI","dXArg","dYArg","EXIT_INDEX","codeToMenuChar","reCharLC","reCharUC","selectIndexToCode","indexChar","arrayIndex","addToCode","isNumeric","keyCode","DELETE","USE_ABILITY","initMap","GUI","CharInfo","Goto","Help","Inv","Look","OwMap","Use","isValidKey","NO_MEMORY","GoalType","ACTOR_FILTER","StatusStrings","NO_SUB_GOALS","GoalStatus","IND","GoalBase","subGoals","GOAL_INACTIVE","category","NORMAL","planBGoal","nameMatch","ind","StatusString","statusToString","typeAndStat","isInactive","activate","hasFailed","GOAL_COMPLETED","handleMsg","GOAL_FAILED","removeFinishedOrFailed","subGoal","GOAL_ACTIVE","hasPlanB","getPlanB","terminate","subStr","goalType","GoalFollowPath","activateIfInactive","followPath","nextX","nextY","FollowPath","GoalMoveUntilEnemy","getNextCoord","MoveUntilEnemy","GoalGotoActor","getPath","tX","tY","GotoActor","GoalGotoSeenActor","GotoSeenActor","GoalGuard","checkDistToGuardPoint","processSubGoals","addSubGoal","GoalPatrol","currIndex","currTarget","patrolDist","recomputePatrolPath","firstGoal","nextPatrolPoint","patrolX","patrolY","GoalAttackActor","selectSubGoal","print","newName","setLastAttacked","checkTargetStatus","removeAllSubGoals","hitGoal","GoalHitActor","canMissileAttack","GoalShootActor","canSeeActor","healthComp","attacker","shotItem","unequipAndGetItem","mComp","setDamage","setRange","GoalExplore","setNewPassableDir","exploreCb","maxTries","isDirPassable","isDangerous","checkChangeDir","shouldMoveTo","canOpenDoorAt","changeDir","newDx","newDy","GoalFleeFromActor","actorCells","foundCell","fleeOptions","GoalCastSpell","getCastFunc","castFunc","GoalFollow","dxU","dyU","Follow","GoalGetItem","targetItem","itemId","iX","iY","hasSubGoals","GetItem","GoalOrders","GoalShopkeeper","hasShouted","hasShop","moveToRandomDir","comm","shout","GoalGoHome","maxDist","timeToFindPath","tries","moveActorTo","GoalMonitor","Monitor","GoalCommunicate","communicateEnemies","getEnemyActors","comComp","addCommunicationWith","menu_1","addPoisonEffect","poisonActor","addFadingActorToCell","caster","getCaster","fadingComp","aiSpellCellDone","aiSpellCellEnemy","strongest","otherActor","compFunc","aiSpellCellFriend","suitable","h1","aiSpellCellSelf","shouldCast","getSelectionObjectSelf","spellCast","getSelectionObjectDir","showMenu","getDirSpellArgs","_spells","setCaster","rhsSpells","powerSorted","getSelectionObject","indices","aiEnemyWithinDist","getRange","_power","_caster","_range","nameSplit","capNames","sName","_new","getPower","castPower","castLevel","halfPower","perLevel","setPower","getCasterExpBonus","getCasterStatBonus","statValue","hasDice","removeDice","rollDice","AddComponent","_compName","die","setCompName","getCompName","cast","compToAdd","spellComp","RemoveComponent","_compNames","setCompNames","getCompNames","removeComp","Ranged","BoltBase","stopOnHit","rayComp","lineXY","SummonBase","summonType","summonFunc","setSummonType","_createAndAddActor","nPlaced","summonCell","getRandAdjacentFreeCell","minion","copyMemoryFrom","postSummonCallback","ammoName","getAmmoName","missComp","menuOpts","cancelTargeting","AreaBase","srcName","RingBase","_createdActor","castCallback","fire","MultiSpell","removeSpells","defineSpell","superclass","SpellDecl","undefineSpell","template_1","tiles_vault_1","corridorDoorThr","corner","term","entranceWall","corridorWithExit","storerooms","residential","fillerWall","findTemplate","startRoomFuncNorth","startRoomFuncSouth","startRoomFuncWest","startRoomFuncEast","gateN","gateS","startFuncFourGates","gateE","gateW","exitReqd","ew","sew","corrNew","corrNs","corrNse","corrNsw","Vault","vault","transformed","livingOnly","Names","place","generic","forest","lake","second","steal","adjective","substantive","ring","amulet","plate","vase","goblet","gather","getItemToStealName","getItemToGather","getVillageType","alreadyUsed","getUniqueName","fullName","getGenericPlaceName","actorCount","getActorName","bookNameGen","getBookName","prefix","OW","LL_WE","LL_NS","CC_NW","CC_NE","CC_SW","CC_SE","XX","EMPTY","TT_W","TT_E","TT_N","TT_S","TERM","WCAPITAL","BCAPITAL","BTOWER","WTOWER","WDUNGEON","MOUNTAIN","BVILLAGE","WVILLAGE","VTUNNEL","HTUNNEL","MFORT","PROB_BVILLAGE","biomeTypeMap","arctic","alpine","tundra","taiga","grassland","elemStyles","classNames","highrock","BIOME","ALPINE","ARCTIC","TUNDRA","TAIGA","ILLEGAL_POS","CELL_ANY","E_HAS_CONN","W_HAS_CONN","N_HAS_CONN","S_HAS_CONN","N_BORDER","S_BORDER","E_BORDER","W_BORDER","ALL_WALLS","ALL_WALLS_LUT","LINE_WE_WEIGHT","LINE_NS_WEIGHT","CAN_CONNECT","_propType","getDurationDie","_attack","_defense","_protection","_damageDie","dStr","setAttackRange","NULL_OBJECT","input","seenObjs","$proto","isPrimitive","deserialize","objRef","getPrototypeOf","serialize","refObj","MEM_NO_ACTORS","NOT_ATTACKED","_enemyTypes","_communications","_lastAttackedID","removeEnemy","removeFriend","getFriendActors","enemyTypes","lastAttackedID","GoalsBattle","Cmd","ACTION_ZERO_ENERGY","selectTargetMsg","lookCellMsg","chatSelObject","chatComp","MemoryPlayer","_player","S_IDLE","S_TARGETING","S_LOOKING","FSM_NO_MATCH","NO_SELECTED_CELLS","TargetingFSM","_targetList","targetIndex","_state","hasTargets","setSelectedCells","selectedCells","getTargetList","getCellIndexToTarget","mapXY","isTargeting","ax","ay","isLooking","lastID","getLastAttacked","getDiff","tcell","getPropNames","handleCommand","noAction","missRange","MarkList","_marks","markObj","markExists","markList","selectMenuArgs","mark","boundFunc","_guiCallbacks","getMarkListMsg","deleteMenuArgs","markID","deleteMark","addState","addTransition","selectCode","listMsg","CACHE_INVALID","_confirmCallback","_wantConfirm","_confirmEnergy","_wantSelection","_selectionObject","_runModeEnabled","_fightMode","_fsm","_markList","_statBoosts","_restoreBaseSpeed","baseSpeed","speedBoost","nCoins","getItemPriceForBuying","trans","buyer","seller","getShopkeeper","combat","attackBoost","damageBoost","CmdAttack","execute","CmdMissile","CmdUseItem","CmdDropItem","CmdEquipItem","CmdUnequipItem","CmdUseElement","setters","setFunc","baseStatVal","doorCells","openDoorFromCell","cmdNotPossible","exploreCells","targetCells","resetBoosts","processConfirm","processMenuSelection","fsmValue","processKey","addMark","setSelectionObject","toggleRunMode","toggleFightMode","issueOrderCmd","lookCmd","jumpCmd","useAbility","giveCmd","currMap","firstItem","getNextItemOnTop","cmdType","diffXY","_createBuyConfirmCallback","stairsComp","tryToToggleDoor","hasPowers","readComp","moveCmd","showMsg","selectionDone","selObj","hasPassage","setWantConfirm","moveToCell","hasClosedDoor","targets","getAttackTarget","attackCallback","_setAttackStats","orderMenuArgs","giveOrder","orderMenuSelectOrder","cellMenuArgs","orderMenuSelectCell","enableSelectAll","showSelectedCellInfo","startLooking","giveCallback","itemMenuItems","giveItemToActor","itemMenu","setGiveTarget","jumpCallback","jumpCmp","orderType","giveFollowOrder","forgetOrders","giveOrderAttack","giveOrderPickup","giveClearOrders","enemyName","getOrderBias","giveAttackOrder","getItemInSight","givePickupOrder","createMenu","itemCells","getSelectedCells","isTargetInRange","stopLooking","EquipSlot","stacked","_item","_hasItem","_unequipped","_stacked","canEquip","_equipMods","Equipment","_slots","chest","feet","hand","head","neck","getFunc","propertySum","slotType","slotObj","_hasSlot","slotArr","equipped","getEquippedItems","getFactor","getUnequipped","itemSlot","_equipToSlotType","equipItem","subSlot","unequipItem","funcname","slotName","slots","updateFreq","wType","getWeatherType","wEffect","setEffectType","objOrArray","constr","op","aggrFunc","alwaysMergeProps","alwaysIncrProps","addShellProp","newShell","incrShellProp","mixNewShell","shells","evaluators_battle_1","GoalsTop","GoalTop","evaluators","arbitrate","bestRated","chosenEval","desirability","calculateDesirability","biases","setBias","evals","ev","Top","ThinkBasic","lowRange","hiRange","getUniformRange","explore","flee","patrol","updateEvaluators","removeEvaluators","isOrder","isActive","isGoalPresent","removeSubGoalsOfType","ThinkSpellcaster","castSpell","ThinkCommander","winBattle","retreat","winBattleEval","EvaluatorsBattle","WinBattle","retreatEval","Retreat","Ability","AbilityBase","Self","Direction","dmgBonus","abilities","abil","getMenuItem","ability","abilities_1","equipment_1","getLevelUpObject","levelMsg","getLevelUpMsg","addAbility","abilName","startingItems","Alpinist","Adventurer","Cryomancer","Marksman","Blademaster","Spiritcrafter","Spellsinger","substituteConstraints","getStartingItems","ActorClassBase","_messages","_lastStateIncr","_advances","incrStats","ppIncr","ppComp","setMaxPP","12","16","20","24","28","32","ACTOR_CLASSES_NO_ADV","grasp","GraspOfWinter","IceShield","FrostBolt","IcyPrison","SummonIceMinion","IceArrow","Blizzard","MagicArmor","SummonAnimal","Heal","LightningArrow","airSpell","SummonAirElemental","CrossBolt","RockStorm","addSlot","EnergyArrow","ForceField","SpiritForm","EnergyStorm","RingOfEnergy","ACTOR_CLASSES","ac","Army","_battle","_casualties","_defeatThreshold","hasActor","getBattle","armyObj","army","defeatThreshold","Battle","_armies","finished","_stats","casualties","survivors","armies","setBattle","horizontal","numRows","actorsPerRow","numArmies","isDefeated","armyInThisBattle","isOver","level_generator_1","CityGenerator","populateCityLevel","hasWall","fillUnusedAreas","areas","elems","trainerHouses","createTownsfolk","populateHouse","village","itemsPerLevels","capital","stronghold","fort","level_surroundings_1","addItems","surroundX","surroundY","nItemsAdded","castleLevel","removeMarkers","addItemsToCastle","createCastleSurroundings","gateFunc","cellBlocked","getGateDirFunction","addMarkersFromTiles","createDoorsAndLevers","nAdded","storeroom","factItem","itemsPlaced","GOLD_VAULT_CHANCE","goldRoom","wealth","normalRooms","re","addToExtras","markers","doorPos","levers","hasMarker","removeProps","setActorFunc","cPoint","LevelSurroundings","surround","name_gen_1","defaultConf","monsters","worldSize","climate","elevation","mountainSize","excavation","dungeonSize","forestation","population","citySize","worldSizeToNum","featureScaleCoeff","High","areaSizeToXY","WorldConf","featCoeff","getBaseConf","createSingleBranchConf","createSingleQuarterConf","createSingleFaceConf","createQuarterConnections","feats","q0","l0","getWeightedLinear","createFaceConnections","f0","f1","createBranchConnections","br0","br1","setDistFromStart","featConf","distX","distY","distSqr","getPlayerStart","firstArea","getXYInArea","getNumBranches","dungeonConf","getNumQuarters","cityConf","getNumFaces","mountConf","getNumLevels","scaleNumFeatures","getNumFeatures","nFeatures","createDungeonsConf","dungeons","createSingleDungeonConf","branches","createBranchesConf","WorldCreator","nCreated","rand","createAreasConf","playerStart","createSingleAreaConf","areaNum","cities","createCitiesConf","mountains","createMountainsConf","createSingleCityConf","quarters","createQuartersConf","createSingleMountainConf","createFacesConf","ow_constants_1","territory_map_1","territory_1","OWMap","_baseMap","_subLevels","_hWalls","_vWalls","_featureData","_featuresByXY","_biomeMap","_terrMap","numFound","getSizeXY","numWalls","isWallTile","terrMap","biomeType","getFeaturesByType","baseMap","biomeMap","features","featuresByXY","vWalls","hWalls","coordMap","useExplored","getOWMap","cellList","line","name2Num","legend","rowStr","addHorizontalWallWestToEast","ow","stopOnWall","didStopToWall","addHWall","addVerticalWallNorthToSouth","addVWall","connectEmptyCell","validNeighbours","getValidNeighbours","addOverWorldFeatures","numFlatTiles","numTiles","numWallTiles","nDungeonsSouth","nDungeonsCenter","nDungeonsNorth","nMountainsNorth","nMountainsMiddle","nMountainsSouth","loc","shrink","getRandLoc","addFeature","addFeatureToAreaByDir","numHorWalls","numHWalls","addFeatureToWall","numVerWalls","numVWalls","cmdBetweenHWalls","cmdAboveNorthWall","cmdSouthernArea","addBiomeToOverWorld","addDungeonsToOverWorld","nCitySouth","nCityCenter","nCityNorth","addMountainsToOverWorld","createTerritory","playerRace","terr","TerritoryMap","setTerrMap","createOverWorldTerritories","terrObj","getTerrMap","getRival","hasRival","placeCityFeature","featName","addFeatureData","box","placed","bXY","addCitiesBasedOnTerritories","addVillagesToOverWorld","findCellRandXYInBox","bBox","getBoundingBox","addBiome","nVillages","cellMatches","listOrStr","isBox","xStart","xEnd","yStart","yEnd","getVWalls","getHWalls","createOverWorld","yFirst","topToBottom","printResult","owTilesX","owTilesY","owMap","randomizeBorders","nHWalls","nVWalls","pos","stop","addWallsIfAny","innerWallRatio","nTiles","addRandomInnerWalls","connectUnconnectedTopBottom","connectUnconnectedBottomTop","mapToString","Territory","level_gen_1","overworld_map_1","OverWorld","cityTypesRe","twoEntranceCityRe","MOUNTAIN_TYPE","WATCHDOG_MAX","playerTileX","playerTileY","debugBlackTower","addMainRoads","TILE_SIZE_X","TILE_SIZE_Y","OWWall","last","getWallStart","getWallEnd","OWSubFeature","OWSubLevel","_subX","_subY","hLen","vLen","CoordMap","worldCols","worldRows","nTilesX","nTilesY","xMap","yMap","subTileXY","subLevelXY","areaXY","areaLevelXY","getOWTileBboxFromAreaTileXY","owX","owY","createSubLevel","getBiome","addLakes","lakeConf","addBiomeFeaturesSubLevel","owSubLevel","addSubLevel","canConnectNorth","canConnectSouth","canConnectEast","canConnectWest","getWidthMovingAvg","addWallCoord","addWall","addSubLevelWalls","getFeaturesByXY","numSkipped","addMountainFortToSubLevel","isMountainFort","freeXY","getFreeArea","setBaseElems","tower","getAlignment","addTowerToSubLevel","getAccessibleMountainCoord","addDungeonToSubLevel","getFreeNotOnEdge","addVillageToSubLevel","addMountainToSubLevel","tunnelX","addVertTunnelToSubLevel","getCellsWithCoord","cellMap","addFortToSubLevel","addSubLevelFeatures","getWallWidth","subSize","nElem","filterW","unfiltered","filtered","filtVal","getFiltered","getWall","randPos","getCoordAt","edges","xyRand","xyBox","addMaxDangerAndValue","pX","pY","isEpic","slX","subSizeX","slY","subSizeY","addCapitalConfToArea","coordObj","Blashyrkh.Capital cave","addLocationToZoneConf","mainConn","addDwarvenCityConfToArea","dwarvenCity","Dwarven City.Fort main level","addAbandonedFortToArea","fortLevel","Abandoned fort.Fort ground level","addCityConfToArea","LevelGen","getCityConf","vert","lastCoord","featX","featY","connX","connY","nLast","addBlackTowerConfToArea","getDungeonConf","getPlayerPosition","addToPlayerPosition","nLastLevel","nSubLevelsX","nSubLevelsY","getSubBoxForAreaTile","lx","legalizeXY","createOverWorldLevel","worldX","worldY","owLevel","createWorldConf","playerStartX","playerStartY","getPlayerStartPos","capSubTileXY","capFeat","getLastCoord","capX","capY","toOwLevelXY","capExitXY","owLevelCapExitXY","wTowerSubTileXY","wTowerSubLevelXY","wTowerLevelXY","pathCapWTower","addGlobalFeatures","buildMapLevel","biome","getFeatures","coordD","dName","coordM","mName","getMountainConf","owSizeX","owSizeY","addBiomeLocations","handlerTable","AddComp","ModifyCompValue","AddEntity","AddElement","RemoveElement","ChangeElement","RemoveComp","handlerNames","SystemEffects","effName","handlerName","objTarget","getTargetFromObj","targetTypes","EFFECTS","_dtable","effComp","effType","getEffectType","_checkStartMsgEmits","_checkEndMsgEmits","startMsg","endMsg","successMsg","failureMsg","getEffectTarget","valueToSet","numValue","convertValueIfNeeded","expirMsg","getTargetCellOrFail","elementName","existingElems","numAllowed","onSystemAdd","foundElems","foundElem","onSystemRemove","entityName","createdComp","fromType","toType","intStrOrDie","float","parseFloat","isNaN","OPTION_GOODBYE","tradeGoldWeightFromTo","gw","actorFrom","actorTo","coins","nCoinsRemoved","ChatBase","menuObj","opt","acceptOpt","questCallback","refuseOpt","questGiver","chatter","clearOptions","rewardOpt","rewardCallback","giveQuestComp","questCompl","selectionObject","costs","statSel","cost","trainCallback","taName","targetStats","trainerStats","targetVal","trainerVal","trName","newTargetVal","ChatWizard","ppLeft","wizard","wizardCallback","restorePP","setRuneSelectionObject","numPP","Wizard","_brainTarget","setPlayerCtrl","setBrain","BrainMindControl","actor_1","orderWithGoal","orderEval","orderComp","clearOrders","giveOrders","injectOrderEval","GoalWinBattle","GoalEngageEnemy","GoalFindEnemyArmy","GoalFollowArmy","FollowArmy","LevelGrid","gridCols","gridRows","grid","xMapHalf","yMapHalf","gridXY","gridX","gridY","levelXY","getGridXY","gridSeen","setDataLevelXY","adjustRate","selectDirToMove","cmdDir","getSeenFriends","moveGoal","FindEnemyArmy","orderGoal","EngageEnemy","GoalHoldPosition","HoldPosition","GoalRetreat","spell_1","DispelMagic","charmCallback","charmLevel","charmComp","setTargetActor","AnimateDead","animateCallback","corpseCells","telepCompTarget","telepCompSrc","postCallback","StunningTouch","LightningBolt","ScorpionsTail","ShadowRay","chosenDir","PoisonBreath","cloud","WaterBolt","SlimeBolt","slime","combatMods","effArgs","paralysis","SummonUndeadUnicorns","casterLevel","minDanger","SummonDead","SummonSpiders","totalDanger","SummonKin","casterType","SummonFlyingEyes","teleCompTarget","teleCompSrc","drainComp","compFuncArgs","aiCompFunc","PoisonArrow","ArrowOfWebs","destroyItem","mindControl","healing","RingOfFire","RingOfFrost","PoisonCloud","getThreeCells","forcefield","IcyTouch","addAllSpells","getEvaluator","setCastingProbability","setGoal","damaging","flameComp","chanceToMove","goals_battle_1","EvaluatorWinBattle","EvaluatorRetreat","cooldown","setAbilities","abils","_baseElem","_isPassable","hasPropType","hasConnectionType","isObstacle","isSpellPassable","getDoor","getLeverDoor","arrProps","OPTS","discardByRatio","hRatio","wRatio","vertSplit","minSplitW","minSplitH","discardBySize","minRoomW","minRoomH","Tree","lchild","rchild","queue","Point","container","opts","_opts","iter","root","isLargeEnough","sr","randomSplit","cont","r1","r2","isVRatioTooSmall","isHRatioTooSmall","r1Wratio","r2Wratio","r1Hratio","r2Hratio","containerTree","leafs","generated","createPaths","createPath","fillerTempl","filler","DEFAULT_CALLBACK","debugVerbosity","afterInit","tryToMatchAllExits","missingExitIsError","_ind","_unusedExits","_freeExits","_possibleDirections","_sortedByExit","_sortedWithAllExits","asciiTiles","asciiTile","_sortDataIntoListsByLocation","_initMapWithFillerCells","levelInvalid","maxLevelTries","_placeStartRoom","goalCount","hasExits","_getRoomWithUnusedExits","_getFreeExits","chosen","getMatchingExit","_getNewX","_getNewY","templMatch","_getNextTemplate","_isRoomLegal","_placeRoom","_cleanupAndTryAgain","expandTemplates","dirRegex","direction","dirSorted","genParamsX","genParamsY","paramsX","paramsY","mapExpanded","params","templMap","placedTileData","numCols","finalCol","tileColLen","_addRoomData","_removeExitsOfAbuttingRooms","_removeBorderExits","exitsReqd","getAllRequiredExits","listMatching","_getMatchWithExits","_getRandTemplate","nameToIndex","chosenName","unusedIndex","getRandomTemplate","_removeChosenExit","dirProp","matchMap","remapped","dir2NSEWRemap","_hasExit","nsew2DirRemap","_removeExitsRemapped","_isFiller","_removeExitByXY","any","excluded","remapMatch","wX","validKeys","keysSplit","_arrayContainsArray","superSet","subSet","every","verb","omni","misc","createMediumVault","templLevel","connTile","vaultN","vaultS","createLargeVault","vaultNW","vaultNE","vaultSW","vaultSE","createHugeVault","centerName","vaultCenter","vaultWallN","vaultWallE","vaultWallW","vaultWallS","actor_mods_1","initCombatant","comb","ActorRandomizer","adjustActor","ActorMods","_randomizer","setIsPlayer","newBrain","spellName","defaultFunc","actShell","objShell","Task","taskType","stepType","tasks","steps","motive","isQuest","addStep","isTask","task","step","numSubquests","numQuests","QuestData","_stacks","_ptr","createTarget","mapStepToType","oldTarget","newTarget","objList","newTargetObj","pair","ptrVal","getCurrent","refType","pathData","capture","exchange","experiment","defend","finishbattle","repair","reportListen","rescue","spy","take","subquest","winbattle","prettybnf","quest_task_1","questGrammar","QuestGrammar","grammar","QuestGen","ast","rules","productions","prod","lhs","currQuest","ruleHist","startRule","questRules","nameRule","chooseRandomRule","questType","newConf","genQuestWithConf","setMotive","generateQuest","_questMeetsReqs","taskGoto","taskKill","minLength","maxLength","minQuests","maxQuests","rule","questName","randRule","generateTerm","_checkIfQuestOver","addTerm","subQuest","arrOfRules","defaultConfig","mountain_generator_1","city_generator_1","getRandLevelType","numFree","getItemConstraintFunc","minValue","goldConf","createDungeonLevel","MountainGenerator","getFaceOptions","mountainLevel","createFace","summitLevel","cityLevel","createVillageLevel","createCapitalLevel","createStrongholdLevel","createFortLevel","removeEnemyType","addItemsToCityLevel","castleGen","populateWithActors","populateWithHumans","populateWithEvil","populateWithNeutral","floorCells","allOK","raceType","confStack","poppedName","currConf","game_battle_1","goals_top_1","world_fromjson_1","actor_class_1","item_1","factory_world_1","overworld_1","world_simulation_1","Spawner","OBJ_REF_REMOVED","FromJSON","_dungeonLevel","id2EntityJson","id2Object","actorsKilled","id2Component","id2CompJSON","compsWithMissingRefs","stairsInfo","setChunkMode","chunkMode","getDungeonLevel","addObjRef","getObjByRef","requestObj","createGame","gameJSON","setGlobalConfAndObjects","chunkManager","lastComponentID","allLevels","getLevelsToRestore","levelJson","restoreLevel","places","restorePlace","addPlace","restoreOverWorld","worldSim","setWorldSim","restoreWorldSim","connectGameLevels","restorePlayer","addRestoredPlayerToGame","restoreEntityData","restoreComponentData","gameMaster","restoreGameMaster","setGameMaster","restoreChunkManager","checkNumOfLevels","gameObjectID","diceRng","restorePlayerBrain","brainJSON","memJSON","_addRegenEvents","addPlayer","restoreEntity","_addEntityFeatures","restoreElementEntity","restoreLevelEntity","addCompsToEntity","createInventoryItems","createEquippedItems","createSpells","entRef","doorEntity","compJSON","newCompObj","getCompValue","newArray","objToSet","createActorClass","createQuestData","questData","brainObj","setConstraint","memObj","enemyID","friendID","friend","createTopGoal","spellObj","restoreSpell","subJSON","subSpell","typeCapitalized","getItemObjectType","spiritJSON","spiritObj","addEntityInfo","itemObjs","equipObjs","itemJSON","createCellMap","actorObj","isVirtual","addVirtualProp","addLevels","actorJSON","elemJSON","createdElem","createUnconnectedStairs","setCostFactor","expElem","setMsg","stairsId","sObj","createBaseElem","explXY","setConnObj","targetStairsXY","getGameMaster","battles","battleJSON","restoreBattle","setBattles","battlesDone","battleLevel","getLevelOrFatal","setStats","armyJSON","restoreArmy","setArmies","setDefeatThreshold","WorldFromJSON","createPlace","WorldSimulation","restoreComponent","reportMissingLevel","regenPlayer","addEvent","regenPlayerPP","indStr","numLevels","createTiles","jsonTiles","levelsJson","restoredLevels","getCurrentWorld","getCurrentArea","jsonCopy","setTile","restoreSerializedBattles","tileId","master","jsonArr","levelJSON","connectTileLevels","connectConnections","setEnableChunkUnload","playerXY","capXY","dwarves","btower","bcapital","startSize","maxNumPos","useMap","addRival","undeads","numPos","getCenterX","winterConf","pData","getRivalData","playerOwX","playerOwY","FULL","FILL_ALL","rivals","currRivals","empty","occupied","occupiedBy","numEmpty","numCells","terrData","doPostProcess","maxFillRatio","_markEmpty","cellInfo","_initRival","maxTurns","numTurnsTaken","_hasTurnsLeftToProcess","contData","open","currPos","_getStartPosition","_addStartPosition","getRandOpenXY","emptyXY","getEmptyAdjacentXY","_addOccupied","_closeCell","postProcessData","rival","numTurns","hasEmpty","getFillRatio","getRandEmptyXY","_key","dSize","startCoord","xyStart","nextDir","numOccupied","coordXY","season_manager_1","day_manager_1","dayMan","DayManager","seasonMan","SeasonManager","setOwPos","update","phaseChanged","changeWeather","dayChanged","monthChanged","seasonChanged","yearChanged","changed","weather","getWeather","weatherComp","setWeatherType","getSeason","setUpdateRate","weatherChanged","setBiomeMap","getBiomeMap","dayManager","seasonManager","ws","animation_1","SystemAnimation","_enabled","currAnim","xCurr","yCurr","missEnt","cssClass","animation","_createAnimation","frame","addFrame","_setCurrAnim","rangeLeft","lineChar","ray","frameCopy","slowDown","maxRange","animComp","lineAnimation","missileAnimation","cellAnimation","areaAnimation","hasEntities","combine","SystemAreaEffects","radRange","flameComps","isFire","isIce","dmgComp","flameSrc","setSourceActor","_createRadiationComps","SystemAttack","attComp","processAttackComp","aName","performAttack","biDirTarget","getBiDirTarget","defName","cMsg","attIsCharmed","totalAtt","addAttackerBonus","totalDef","getEntityDefense","hitChance","hitThreshold","totalDamage","doDamage","addSkillsExp","_applyAddOnHitComp","checkForShieldSkill","evtComp","cause","addDefenderBonus","attX","attY","defX","defY","biDirX","biDirY","getShieldDefense","charmList","charmTarget","getTargetActor","attWillpower","charmSuccess","getOnAttackHit","addCompToEntAfterHit","system_effects_1","system_quest_1","handledComps","SystemBaseAction","_handleGive","_handleJump","_handleOpenDoor","_handlePickup","_handleRead","_handleUseElement","_handleUseItem","_handleUseStairs","_handleRest","getGiveTarget","giveItem","removedItem","getRemovedItem","giveArgs","addQuestEvent","itemStr","_checkForAutoEquip","evtArgs","_createEventComp","iName","getNameWithCount","actorsAround","nextActor","nextCell","entName","_checkUseItemMsgEmit","getEffect","useComp","getElement","_checkUseElementMsgEmit","jump","getJumpRange","getReadTarget","bookMenu","bookName","getUseType","getUseTarget","SystemBattle","overComp","badge","_getBadgeForBattle","rep","_emitMsg","NO_ACTORS_FOUND","getTopicQuestion","topicName","people","SystemChat","getActorsInDirection","getChatObject","getGenericChatObject","addQuestTargetItems","addQuestSpecificItems","addLoreItems","entBrain","qEscort","getEscortTo","getQuestion","addQuestTargetToChat","qInfoList","createQuestEvent","resp","hasSeen","getLastSeen","getTextualDxDy","getTopics","SystemCommunication","_msgFunc","Enemies","processEnemies","Shout","processShout","messages","getMsg","processMessage","shoutMsg","SystemDamage","totalDmg","_getDamageModified","hpMax","damageSrc","_getUltimateDmgSource","entCell","_dropInvAndEq","_killActor","checkForDamagedQuestEvent","getSourceActor","_getDmgAfterWeaknessAndResistance","isProtectionBypassed","getDamageCateg","weakComp","effectMatches","resistComp","dmgCateg","bypassChance","getChance","invEq","actorLevel","removeNItems","nameKilled","_giveExpToSource","killVerb","killMsg","setActorName","_cloneComponentsToCorpse","_cleanUpComponents","defLevel","defDanger","_giveBattleExpToSource","maybeTypes","processDamageComp","_msg","SystemDisability","_dispatchTable","_handleEntrapped","Fear","_handleFear","_compOrder","_actComp","actCompName","actionComp","traps","getDifficulty","freeProb","getDestroyOnMove","fearComps","enemiesSeen","worstFearLevel","worstFearEnemy","fearComp","targetId","fearLevel","getFearLevel","fearedEnemy","fearSuccess","fleedXdY","SystemEquip","eqComp","getIsRemove","handleAddOnEquip","compToRemove","SystemEvents","eventRadiusPerID","eventRadius","_handleActorKilled","_handleItemPickedUp","_handleActorDamaged","_handleActorAttacked","_handleActorUsedStairs","srcCell","_getEventRadius","cellCoords","victim","_addActorAsEnemy","aggressor","perceiver","aggr","perc","aggrName","fullMsg","SystemExpPoints","levelingUp","getExpPoints","nextExpLevel","SystemHunger","hungerComp","SystemMissile","criticalShot","getTargetX","getTargetY","targetCell","firedMsg","_formatFiredMsg","shownMsg","targetWasHit","finishMissileFlight","hitVerb","_addDamageToActor","actorFirst","prevCell","damageComp","dmgSrc","nDamage","alwaysDestroy","_isItemDestroyed","addedToStack","isThrown","hitProp","snowTracksMap","elemTypeMap","SystemMovement","somethingSpecial","climbRe","_bonuses","dontApplyTo","mods","speedPenalty","defensePenalty","srcComp","srcFunc","targetFunc","bridge","stone","getPassage","topItemName","newBaseElem","hasMsg","canMoveThere","_checkSpecialMovement","xyOld","moveProp","checkForStatsMods","checkMessageEmits","_processExploreElem","_checkEntrapment","_moveError","prevType","newType","bonuses","applyBonus","dontApplyComp","statsList","combatList","givenExp","expData","avoidProb","xOld","yOld","_diagnoseRemovePropError","xTry","yTry","xFound","yFound","SystemShop","_checkTransArgsOK","buyItem","sellItem","buyerCell","getCostFactorSell","willingToBuyItem","sellerCell","getCostFactorBuy","dropNItems","bottomItem","SystemSkills","entSkills","skillName","getSkill","currPoints","expPts","SystemSpellCast","spellcast","drainers","_checkPowerDrain","_drainerName","isDrained","srcX","srcY","drainX","drainY","spellEffects","addSingleCellAnim","animArgs","SystemSpellEffect","processSpellRay","processSpellCell","processSpellMissile","processSpellArea","processSpellSelf","rangeCrossed","onCellCallback","stopSpell","rayHitsActor","evasion","preCallback","spellArrow","setDamageCateg","setWeapon","SystemSpiritBind","_doSpiritBind","getBinder","gemBindComp","boundGem","removeAndGetItem","spirits","SystemTimeEffects","_expiredEffects","_applyPoison","_applyFading","_applyHeat","_applyColdness","_applyDirectDamage","_applyRegenEffect","_decreaseDuration","tEff","te","poisonDmg","ddComp","ddCompDmg","tempComp","shouldRemove","getWaitHP","setWaitHP","getMaxWaitHP","getWaitPP","setWaitPP","getMaxWaitPP","SystemWeather","_effTable","snowStorm","handleSnowStorm","warm","handleMeltSnow","eff","factory_game_1","verify_1","self","progress","postMessage","addEventListener","gameConf","gameFactory","FactoryGame","createNewGame","ready","debug_game_1","disposition_1","game_fromjson_1","game_1","world_creator_1","confPlayerStats","Weak","Strong","Inhuman","restoreGame","GameMain","createPlayerUnlessLoaded","createPlayerRegenEvents","playMode","createArenaDebugGame","createDebugBattle","createWorldWithCreator","createFullWorld","createOverWorldGame","createQuestsDebugGame","createEmptyGame","loadedPlayer","playerLevel","pConf","playerName","addActorClass","hunger","playerClass","actorClassComp","eqs","setStartingStats","owConf","getOwConf","startTime","createTerritoryMap","worldAndConf","worldLevel","mapZonesToTerritoryMap","splitLevels","factWorld","Realm","createPlayerHome","createAreaLevelConstraints","clearSubLevels","placePlayer","totalDur","timeNow","durSec","timePrev","prevMsg","freeLUT","minFreeCells","addActorToFreeCell","uniqueActors","uniqueCreated","uniquesAdded","getDisposition","terrMapXY","constrActor","uniquesThisType","randUnique","actorCreate","createConf","getAreaXYFromOWTileXY","getConstrWeightsForAreaXY","types","owStr","dispos","Disposition","getTable","homeConf","getCellsInBbox","typeChar","actualType","processPresetLevels","presetItem","createLevelID","DebugGame","createArena","createQuestsDebug","createOneDungeonAndBoss","xMult","yMult","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","runClearTimeout","noop","nextTick","title","browser","argv","version","versions","on","addListener","once","off","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","prevTime","createDebug","curr","ms","coerce","formatter","selectColor","init","skips","plural","long","fmtShort","GoalSearchHouse","searchTime","nextGoal","ifItemFoundCreateGoal","actorCell","chosenCell","shopCooldown","doorCooldown","visitedDoors","chooseThiefTask","itemToSell","knownShopCells","shopCell","isInActiveShop","tryToSellItem","tryToGoToShopCell","elemsCache","thiefSeesHouse","exploreCallback","cacheAcceptFunc","_inv","_eq","getMaxWeight","droppedItem","eqItem","_getItemToEquip","rmvItems","CmdBase","setElement","dropCount","hasActiveShop","confirmCb","getItemPriceForSelling","DropItem","setIsRemove","EquipItem","UnequipItem","items_1","elements_1","colors_1","scaleAll","Items","material","Colors","race","dwarven","heal","stun","modifyCompValue","cure","modifyStat","uses","dmgTypes","sword","spear","dagger","axe","dart","shuriken","bow","crossbow","rifle","animal","avianfolk","bearfolk","catfolk","dark","dogfolk","goblin","hyrkhian","hyrm","undead","wildling","wolfclan","role","archer","berserker","commander","elite","fighter","king","mage","slinger","onEnter","createUseItemComp","effectName","stunDur","durStr","stunComp","itemOwner","shellProps","races","ranks","roles","roleBases","baseShell","arborean","elf","fae","gnome","ogre","orc","colorg","ratling","vachefolk","valkyr","raceNames","commoner","adventurer","sergeant","steward","lord","captain","prince","princess","queen","emperor","empress","overlord","rankNames","melee","ranged","stealth","axeman","brave","duelist","footman","knight","phalanx","scourger","judicator","skirmisher","hunter","warrior","adept","archmage","bard","cleric","healer","telepath","necromancer","runemage","shaman","summoner","arbalist","bolter","rifleman","darter","thrower","catapulter","sharpshooter","assassin","acrobat","rogue","scout","thief","roleTypes","genRandShell","numRoles","raceName","raceShell","rankName","rankShell","rTypes","getUniqueItems","roleBaseShells","fullRoleName","roleNames","usedRoleShells","roleShells","roleName","allShells","tiles_houses_1","House","trimEmpty","totalX","totalY","nWindows","windows","wallLut","nXY","windowPosOk","sXY","baseSizeX","baseSizeY","fullHouse","getGenParams","Houses5x5","createdHouse","currSizeX","watchdogX","currSizeY","watchdogY","start1x1","start1xN","start2xN","corners","body","blocker","usableTempl","tpl","rotatePropsR90","flipPropsVer","drawForest","divisor","maxMinersCreated","addMiners","dontDig","minerSpawnProb","smooth","nSmooth","dirWeights","smaller","maxMinersOp","minersCreated","_hist","minerDir","_verifyRngFunctions","maxMiners","activeMiners","minerID","miner","minerCopy","_markAsDug","minersAdded","minersSpawned","minersRemoved","minersRemove","minersToAdd","_getXYToDig","newMiner","_tryToAddNew","rmMiner","smoothWalls","dugCallback","undugXY","undugDirs","minerWeights","dirsLeft","cellsByFill","cellsByFillLUT","nCells","cellsDug","_regions","connectFilledRegions","cellLUT","centers","nLargest","largestKey","_paths","_getPath","pXY","connWidth","brushXY","bX","bY","getMapData","startPoints","nRegions","regions","nRounds","getCrossAround","_minX","_maxX","_minY","_maxY","noiseGradients","noise","alignVertical","alignHorizontal","meanWx","meanWy","stdDev","MEAN_WX","MEAN_WY","STDDEV_W","_wallNS","_wallEW","dwarf","texts_1","actor_virtual_1","win_condition_1","_fact","createLastBattle","cityQuarter","addQuarter","pickaxe","curePoison","boss","cryomancer","spiritPot","potStr","WinCondition","addActorKilled","gem1","gem2","exploreElem","createTrainer","setPP","vActor","VirtualActor","spawnBrain","thunderbird","firekit","itemRand","runeProt","runeDig","runeForce","leverDoor","camouflage","sharpener","addGoblinWithLoot","runeOfCtrl","runeOfVenom","runeOfPoisonClouds","voidDagger","shovel","machete","webRune","regen","setMaxWaitPP","uniqShell","uniqueActor","questPopul","newBook","addText","reportQuest","mapQuestToResources","addQuestComponents","setReward","weatherActor","WeatherActor","loreComp","necrowurm","army1","army2","addActorsToArmy","addArmy","addBattle","levelCount","allStairsDown","itemConstraint","lastLevel","bossCell","townLevel","finalStairs","stairsLoot","lastStairsDown","townStairsUp","rStairCell","loadedLevel","loadLevel","_listener","ActorKillListener","setOnFirstEnter","demonEvent","setOnEnter","_savedPlayerFOV","getPlayer","setOnExit","_game","_maxBeasts","_maxDemons","_beastsKilled","_demonsKilled","actorCreated","allDemonsKilled","allBeastsKilled","lev","windsEvent","stormEvent","Texts","eyeOfStorm","beastEvent","beastsSlain","msgEvent","enemiesDead","msgEvent2","intro","chapter1","chapter2","linePos","node","escape","EOF","SyntaxError","peek","eat","expected","undefined","ret","escaped","isChar","terminal_text","terminal","nonterminal","expression","expressions","production","actorMotivationsGrammar","motiveRe","motiveWeights","Knowledge","Comfort","Serenity","Protection","Conquest","Wealth","Strategy","actorMotivations","matches","getMotivations","clearOthers","mot","getRandMotive","random_cyclic_1","quest_data_1","quest_gen_1","resetData","questList","numQuestsPerZone","maxTriesPerZone","questTargetCallback","handleEscort","handleRepair","handleListen","handleReport","handleSubQuest","checkImplemented","_cleanup","flags","alreadyKnowIt","listOfAllTasks","_questCrossRefs","questGivers","return","populData","initQuestPopulDataForQuest","searchParen","qData","parentQuest","getParentQuestData","qDataParent","areaTile","numCreated","createQuestsForZone","currTile","newQuest","numTasks","returnLocation","getCurrentLocation","addQuestPopulData","getSteps","currLoc","newZone","currZone","mapTask","_checkQuestFlags","cleanUpFailedQuest","currTaskType","delete","getTaskType","tasksImplemented","actorToCapture","getActorToCapture","entToDamage","getEntityToDamage","entToDefend","getEntityToDefend","actorToEscort","getActorToEscort","getQuestPopulData","getAlreadyOwnedItem","getItemToExchange","actorToGive","getActorForQuests","newLocation","getNewExploreLocation","exploreTarget","getExploreTarget","pushQuestCrossRef","escortData","getNewLocation","actorToKill","getActorToKill","actorToListen","getActorToListen","repairTarget","getRepairTarget","getActorForReport","listenTarget","getActorToSpy","getItemToSteal","getItemToUse","createNew","isOkForQuest","hasNone","hasHouse","useItems","itemToPlace","elemsToRepair","doors","unpaidItems","zz","allZones","randCycle","RandomCyclic","resetIter","supportedKeys","setAsQuestTarget","replaceTarget","addTargetsToGiver","addUniqueName","getPathTargets","_checkTargetValidity","setTargetID","escortLocation","popQuestCrossRef","dumpInternalData","errorQuestHandle","setQuestion","setInfo","setGivenBy","questReport","setExpectInfoFrom","setSubQuestID","namedComp","setUniqueName","battleZones","eventArgs","response","bookText","addMetaData","crossRefs","allAreFalse","flagName","numCleaned","cleanupObj","questObj","itemList","QUEST_GEN","indicesLeft","_prevValue","_currValue","abandoned_fort_1","black_tower_1","capital_1","dwarven_city_1","Capital","DwarvenCity","AbandonedFort","BlackTower","TILE_SIZE","abandonedFortConf","outerColsRatio","outerRowsRatio","outerStartXRatio","mountainWallRatio","castleRowsRatio","castleColsRatio","mainWallOpts","mainLevel","mainMap","outerWallConf","outerCols","outerRows","outerX","outerY","wallCols","mountWall","wallX","castle","getCastleLevel","castleX","castleY","stairsWest","castleRows","castleCols","eastCell","getFirstFreeFromRight","castleBbox","itemFact","castleFreeCells","fortActors","Mighty raven","Winter demon","Ice djinn","Stormrider","Snow leopard","createPathToFort","castleOpts","createVariedPath","confObj","segCoord","tileSize","castleConf","midXTile","midYTile","addTemplate","generateYard","addProps","populConf","populateStoreRooms","levelGap","level0","getColsRows","yardRows","yardCols","yardLevel","surroundWithCellsAround","xSize","ySize","colsArea","rowsArea","wallConf","mountLevel","dirToBbox","mapOpts","createCrux","wallRows","wallMap","xTop","xBottom","carvedXY","carvePath","wallStartY","mergeMaps","baseElem2","pathConf","xyCoord","guardPoint","wallOpts","subLevelPos","subLevels","levelRows","levelCols","nHouses","tileConf","tileLevels","stairsNorth","stairsSouth","level_utils_1","dwarvenCityConf","factLevel","adjustToTileSize","entrFortLevel","createEntryFortLevel","mainCols","mainRows","mainFortLevel","createMainFortLevel","fortEndY","fortStartX","fortEndX","tiledLevels","addStairsToLevel","number","fortConf","mainFort","innerCastle","mainFortWest","mainFortEast","mainFortWestLevel","mainFortEastLevel","mainFortLevels","wrapConf","LevelUtils","wrapAsLevel","outerFortConf","outerFort","smallFortWest","smallFortEast","entryFortLevel","fortWestLevel","fortEastLevel","maxCallback","rowsMax","colsTotal","rowsTotal","colsMax","shortestPath","maxUnreachable","SPLASH_THEMES","chasm","DUG_MAX","PROB","BIG_VAULT","BIG_ROOM","bigRoomWeights","cross","bigRoomType2Feature","special","small vault","large vault","large corridor","BigRoom","levelOpts","nBigRooms","bigRoomX","bigRoomY","bigRoomWidth","bigRoomHeight","minNumRooms","mapOptions","_createLevel","addSpecialFeatures","addStairsLocations","addCriticalPath","populateLevel","rerunOnFailure","errorOnFailure","verifyLevel","createCb","getMapGen","getRandMapType","addBigRooms","bigRoomsCreated","addCustomBigRooms","bigRoomType","getBigRoomType","addBigCenterRoom","addLargeCorridorRoom","addLargeCross","addVault","xConf","yConf","yDiv","xDiv","cardinalDir","getCardinalDirLetter","roomName","horOpts","verOpts","roomHor","roomVer","dug","big","getRandCorner","randSpecial","addBigRoomSpecialFeat","fireRoom","addFireToRoom","numDoors","getBorderForBbox","addDoorsForRoom","addElemSplashes","themeName","fCols","fRows","createSplashes","chosenRoom1","chosenRoom2","largestDist","minRoomDistance","getRoomDist","cx1","cy1","cx2","cy2","addStartAndEndPoint","criticalPath","newPathFunc","pathBrokenFunc","prevPath","_breakPath","restorePath","_addWallsToBrokenPath","critPathElem","isAtXY","fillFilter","floorCellsFilled","numTotal","numFilled","digger","uniform","getMiners","C","getOptsWithMiners","miners","firstMiner","isCollapsed","_addSpecialFeatures","_addEncounters","_createMapOptions","Miners","getRandOpts","edgeMiners","getMinersAndExclude","lairMiners","getEndPointFromMap","pointMarker","_createCollapsedLevel","freeCellMap","getMapOfNonWallCells","getRandomEndPoint","nonWallCells","isWall","pathPoints","newPoint","otherPoint","numPoints","getRandomPoint","wallCb","currDist","currPath","endCell","_addLairBoss","populatePoints","populate","populatePoint","minerValues","nMiners","randMiners","randMiner","getMinersCorners","getMinersNSEW","_zoneType","addData","bossActor","generateBoss","addMinions","bossDanger","prizeValue","prizeItem","bossType","isSwarm","numMinions","dangerMinion","minionFunc","_condIncomplete","_condFilled","_isTrue","_notifyCallbacks","actorKilledCallback","isListener","onTrue","_addEvent","ally","neutral","setWeights","addWeight","dispTable","_initTable","rival1","rival2","pairDone","getWeights","dungeonName","getDungeonType","getConstraint","mediumSize","getDungeonSizeXY","mountainName","getRandomShopType","RAND","addShopConstraints","shopTypeConf","qName","shopConstr","cityName","getQuarterConf","_IND","placeJSON","createRestoredWorld","worldJSON","createWorldFromJSON","getAreas","verify","areaJSON","printKeys","restoreAreaFromJSON","setTileJSONForUnloadedTiles","restoreZonesForTile","getTiles","defaultWeather","specialThr","sameWeatherProb","daysInMonth","seasonConfig","biomePossibleSeasons","getSeasonDist","s1","s2","i2","_currSeason","_monthLeft","_seasonLeft","_currWeather","_seasonChanged","_weatherChanged","_monthChanged","_yearChanged","_owPos","nextSeason","_checkMsgEmits","seasons","prevSeason","seasonModified","getSeasonModified","specialWeathers","prevWeather","nextWeather","currBiome","possibleSeason","currSeason","currWeather","monthLeft","seasonLeft","owPos","phasesOfDay","_currPhase","_currPhaseLeft","_updateRate","_dayChanged","_phaseChanged","nextPhase","phases","prevPhase","currPhase","currPhaseLeft","updateRate","currPhaseLef","chunk_manager_1","engine_1","game_master_1","Game","_players","_places","_shownLevel","_gameOver","_enableChunkUnload","_chunkManager","_eventPool","currPlaceIndex","_rng","_engine","_master","GameMaster","_worldSim","addRegularUpdate","shownLevel","setShownLevel","setGUICallbacks","isGUICmd","doGUICmd","isGUICommand","doGUICommand","addGUICallback","playerCommandCallback","setVisibleArea","isGameOver","getPlaces","getArea","ChunkManager","levelOK","setPlayer","_addPlayerToFirstLevel","_addPlayerToPlace","addActiveLevel","onFirstEnter","useAsPlayer","actorOrID","CLICKED_ACTOR","movePlayer","isLoaded","setPlayerTile","checkIfTileChanged","hasTiles","isTileLevel","checkIfExploredZoneLeft","srcParent","getMessages","clearMessages","hasNewMessages","gameEvent","errorDuplicateLevel","addLevelUnlessExists","removeLevels","hasPlaces","getVisibleMap","simulate","simulateGame","_overworld","getPlayerOwPos","findTileXYById","oldX","oldY","_addBattleZoneToArea","parentID","getChunkManager","setWorld","setGame","getOverWorld","engine","enableChunkUnload","isMenuShown","setAnimationCallback","animationCallback","hasAnimation","finishAnimation","getAnimationFrame","nextFrame","enableAnimations","disableAnimations","tryToGetTileXY","coordX","coordY","setOverWorldExplored","levelId","entityPrint","LOAD","LOADED","ON_DISK","LOADED2JSON","CREATE","CREATED","POPULATED","chunkState","loadState","loadDistX","loadDistY","onDiskDistX","onDiskDistY","py","moveDir","getMoveDir","debugPrint","inLoadRange","unloadTile","loadTiles","setLoadStateAll","loadedTilesXY","areaTiles","areaTileToLoadNow","setLoaded","removeAdjacentConnections","removeConnections","setUnloaded","unloadBattles","lStr","tileToConnect","oppositeDir","getOpposite","addedConns","getReplacedConnections","newConns","targetConn","replacedConns","stateToChar","getNumInState","Chunk","printTileConnections","system_manager_1","message_handler_1","eventPool","_levelMap","_activeLevels","MessageHandler","visibleCoord","visibleValid","sysMan","SystemManager","hasNew","currPlayer","hasFrames","visibleLevelID","hasCoord","updateEvent","interval","getEntities","ids","playerCommand","getNextActor","updateLoopSystems","doAction","updateSystems","removedLevel","rmvActors","removedLevelID","levelIDs","actActors","isActiveLevel","onExit","onFirstExit","canPlayerSeeAnimation","updateGameLoop","index_1","system","before","systemOrder","insertSystemAt","after","systems","allSys","System","loopSystemOrder","loopSystems","timeSystems","TimeEffects","addTimeSystem","sysName","Disability","BaseAction","Events","AreaEffects","SpellEffect","system_base_2","system_animation_1","system_animation_2","system_area_effects_1","system_area_effects_2","system_attack_1","system_attack_2","system_base_action_1","system_base_action_2","system_battle_1","system_battle_2","system_chat_1","system_chat_2","system_communication_1","system_communication_2","system_damage_1","system_damage_2","system_disability_1","system_disability_2","system_effects_2","system_equip_1","system_equip_2","system_events_1","system_events_2","system_exp_points_1","system_exp_points_2","system_hunger_1","system_hunger_2","system_missile_1","system_missile_2","system_movement_1","system_movement_2","system_quest_2","system_shop_1","system_shop_2","system_skills_1","system_skills_2","system_spell_cast_1","system_spell_cast_2","system_spell_effect_1","system_spell_effect_2","system_spirit_bind_1","system_spirit_bind_2","system_time_effects_1","system_time_effects_2","system_weather_1","system_weather_2","defineSystem","nameCaps","SystemDecl","undefineSystem","numFrames","currFrame","frames","frameIndex","frameKeys","nFrames","_lastMsg","_prevMessages","_hasNew","factory_battle_1","FactoryBattle","removePlayerFromBattle","tryToAddPlayerToBattle","parentLevel","createBattleIntoAreaTileLevel","addBadgesForActors","moveActorsOutOfBattle","tileXY","areaX","areaY","oneOwTileInCols","oneOwTileInRows","localOwX","localOwY","srcID","battleObj","actorCanEnter","getSelArmyObject","parentId","actorDesertedBattle","areaID","battleLevID","battleData","getArmies","allies","isInLevel","getSelLeaveBattle","selArmyFunc","armyActors","replacedActor","enemyArmy","choices","getBattles","battlesPerID","armySize","battleConf","biomeToLevelType","getLevelBbox","createBattle","FACTIONS","minCommDanger","createBattleLevel","fact1","fact2","getFactions","facts","armySizeX","createArmy","armyX","armyY","makeArmiesAsEnemies","stairsArea","getRandInBbox","battleExits","factions","faction","addCommanderAbilities","a1","a2"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,UAIAlC,IAAAmC,EAAA,qFCjFA,MAGMC,EAAU,CAehBC,UAAe,8BAGfC,uBAA2B,EAC3BC,cAAkB,EAClBC,yBAA6B,EAC7BC,4BAAgC,EAEhCC,kBAAuB,CAAC,SAAU,QAAS,YAC3CC,iBAAsB,CAAC,QAAS,YAGhCC,mBAAwB,SAASC,EAAYC,GACzBC,KAAKC,gBAAjBF,EAAmCC,KAAKL,kBACfK,KAAKJ,iBAClC,MAAMM,EAAYF,KAAKG,qBAAqBL,GAE5C,OADAE,KAAKC,gBAAkBD,KAAKL,kBACrBO,GAIXE,mBAAwB,SAASN,GAG7B,GAFAE,KAAKC,gBAAkBD,KAAKL,mBAEvBG,EAAKO,WAAY,CAClB,MAAMC,EAAWR,EAAKS,cAAcC,UACpC,OAAOR,KAAKS,WAAWC,SAASJ,GAGpC,IAAK,IAAIjD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMsD,EAAWX,KAAKL,kBAAkBtC,GACxC,GAAIyC,EAAKc,QAAQD,GAAW,CACxB,MAAME,EAAQf,EAAKgB,QAAQH,GACrBI,EAASf,KAAKS,WAAWE,GAC/B,OAAOX,KAAKgB,mBAAmBD,EAAQF,EAAM,KAGrD,OAAO,MAIXI,eAAoB,SAASnB,EAAYC,GACrBC,KAAKC,gBAAjBF,EAAmCC,KAAKL,kBACfK,KAAKJ,iBAClC,MAAMsB,EAAWlB,KAAKmB,YAAYrB,GAElC,OADAE,KAAKC,gBAAkBD,KAAKL,kBACrBuB,GAIXE,eAAoB,SAAStB,GAGzB,GAFAE,KAAKC,gBAAkBD,KAAKL,mBAEvBG,EAAKO,WAAY,CAClB,MAAMC,EAAWR,EAAKS,cAAcC,UACpC,OAAOR,KAAKqB,WAAWX,SAASJ,GAGpC,IAAK,IAAIjD,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIyC,EAAKc,QAAQZ,KAAKL,kBAAkBtC,IAAK,CACzC,MAAMwD,EAAQf,EAAKgB,QAAQd,KAAKL,kBAAkBtC,IAC5C0D,EAASf,KAAKqB,WAAWrB,KAAKL,kBAAkBtC,IACtD,OAAO2C,KAAKgB,mBAAmBD,EAAQF,EAAM,IAGrD,OAAO,MAKXV,qBAA0B,SAASL,GAC/B,IAAKA,EAAKwB,aAAgB,MAAO,oBAEjC,IAAK,IAAIjE,EAAI,EAAGA,EAAI2C,KAAKC,gBAAgBsB,OAAQlE,IAAK,CAClD,MAAMsD,EAAWX,KAAKC,gBAAgB5C,GACtC,GAAIyC,EAAKc,QAAQD,GAAW,CACxB,MAAME,EAAQf,EAAKgB,QAAQH,GACrBI,EAASf,KAAKS,WAAWE,GACzBa,EAAUX,EAAM,GACtB,OAAOb,KAAKgB,mBAAmBD,EAAQS,IAI/C,MAAMlB,EAAWR,EAAKS,cAAcC,UACpC,OAAOR,KAAKS,WAAWC,SAASJ,IAIpCU,mBAAwB,SAASD,EAAQS,GAGrC,IAAIC,EAAY,KAYhB,GAXID,EAAQE,SACRD,EAAYD,EAAQE,UACfX,EAAO7B,eAAeuC,KACvBA,EAAYD,EAAQhB,YAIxBiB,EAAYD,EAAQhB,UAIpBO,EAAO7B,eAAeuC,GAAY,CAClC,GAAiC,iBAAtBV,EAAOU,GAAyB,CAEvC,IAAK,MAAMtC,KAAK4B,EAAOU,GACnB,GAAU,YAANtC,EAAiB,CACjB,MACMwC,EAAMH,EADOrC,KAKnB,IAAY,IAARwC,EACA,OAAOZ,EAAOU,GAAWtC,GAIxB,IAAY,IAARwC,EACL,OAAOA,EAInB,OAAOZ,EAAOU,GAAWG,QAG7B,OAAOb,EAAOU,GAGd,OAAOV,EAAOa,SAKtBT,YAAiB,SAASrB,GACtB,IAAKA,EAAKwB,aAAe,MAAO,IAEhC,IAAK,IAAIjE,EAAI,EAAGA,EAAI2C,KAAKC,gBAAgBsB,OAAQlE,IAE7C,GAAIyC,EAAKc,QAAQZ,KAAKC,gBAAgB5C,IAAK,CACvC,MAAMwD,EAAQf,EAAKgB,QAAQd,KAAKC,gBAAgB5C,IAC1C0D,EAASf,KAAKqB,WAAWrB,KAAKC,gBAAgB5C,IAC9CmE,EAAUX,EAAM,GACtB,OAAOb,KAAKgB,mBAAmBD,EAAQS,GAI/C,MAAMlB,EAAWR,EAAKS,cAAcC,UACpC,OAAOR,KAAKqB,WAAWX,SAASJ,IAOpCuB,aAAkB,SAASC,EAAcC,EAAcC,GAC/ChC,KAAKS,WAAWvB,eAAe4C,GAC/B9B,KAAKS,WAAWqB,GAAMC,GAAQC,EAG9BhC,KAAKiC,IAAI,KAAM,eAAgB,sBAAwBH,IAI/DI,gBAAqB,SAASJ,EAAcC,GACpC/B,KAAKS,WAAWvB,eAAe4C,WACxB9B,KAAKS,WAAWqB,GAAMC,IAMrCI,aAAkB,SAASL,EAAcC,EAAcK,GAC/CpC,KAAKqB,WAAWnC,eAAe4C,GAC/B9B,KAAKqB,WAAWS,GAAMC,GAAQK,EAG9BpC,KAAKiC,IAAI,KAAM,eAAgB,sBAAwBH,IAI/DO,gBAAqB,SAASP,EAAcC,GACpC/B,KAAKqB,WAAWnC,eAAe4C,WACxB9B,KAAKqB,WAAWS,GAAMC,IAIrCO,QAAa,SAASR,EAAclE,EAAc2E,EAAQ,MACtD,OAAIvC,KAAKqB,WAAWnC,eAAe4C,GAC3BS,EACOvC,KAAKqB,WAAWS,GAAMlE,GAAM2E,GAEhCvC,KAAKqB,WAAWS,GAAMlE,GAE1B,KAGX4E,YAAiB,SAASV,EAAMlE,EAAM2E,EAAQ,MAC1C,GAAIvC,KAAKS,WAAWvB,eAAe4C,GAAO,CACtC,GAAIS,EACA,OAAOvC,KAAKS,WAAWqB,GAAMlE,GAAM2E,GAEvC,GAAIvC,KAAKS,WAAWqB,GAAM5C,eAAetB,GACrC,OAAOoC,KAAKS,WAAWqB,GAAMlE,GAGrC,MAAO,IAIXyD,WAAgB,CACZX,SAAU,CACNkB,QAAS,IACTa,KAAM,IACNC,YAAa,IACbC,MAAO,IACPC,UAAW,CACPC,SAAU,IACVjB,QAAS,KAEbkB,OAAQ,CACJR,QAAS,GACTV,QAAS,KAEbmB,QAAS,IACTC,YAAa,IACbC,KAAM,IACNC,WAAY,IACZC,SAAU,IACVC,KAAM,IACNC,SAAU,IACVC,UAAW,IACXC,QAAS,IACTC,WAAY,IACZC,UAAW,IACXC,KAAM,CACFb,SAAU,IACVjB,QAAS,MAGjB+B,OAAQ,CACJ/B,QAAS,KAEbgC,MAAO,CACHhC,QAAS,IACTiC,OAAQ,MAKhBpD,WAAgB,CACZC,SAAU,CACNkB,QAAS,uBACT8B,KAAM,oBACNjB,KAAM,oBACNC,YAAa,2BACbI,OAAQ,CACJgB,aAAc,GACdlC,QAAS,uBAEbe,MAAO,oBACPC,UAAW,oBACXG,QAAS,uBACTC,YAAa,2BACbC,KAAM,oBACNC,WAAY,sBACZC,SAAU,sBACVC,KAAM,oBACNC,SAAU,yBACVC,UAAW,0BACXC,QAAS,wBACTC,WAAY,2BACZC,UAAW,2BAEfE,OAAQ,CACJ/B,QAAS,qBACTmC,OAAQ,oBACRC,OAAQ,qBAEZJ,MAAO,CACHK,OAAQ,mBACRC,UAAW,sBACXtC,QAAS,sBAIjBuC,MAAW,SAASC,EAAUC,GAhTf,GAwTfpC,IAAS,SAASmC,EAAaE,EAAaD,GACxC,IAAKhF,EAAGE,sBAAuB,CAC3B,MAAMgF,cAA2BH,KAAOE,SAAWD,KAEnD,MADAG,QAAQC,MAAMF,GACR,IAAIG,MAAMH,KAIxBI,KAAU,SAASP,EAAaE,EAAaD,GACzC,IAAKhF,EAAGI,wBAAyB,CAC7B,MAAM8E,aAA0BH,KAAOE,SAAWD,KAClDG,QAAQC,MAAMF,KAItBK,KAAU,SAASR,GACf,IAAK/E,EAAGK,2BAA4B,CAGhC,MAAMmF,GAAQ,IAAIH,OAAQI,MAAMD,MAAM,OACtC,GAAIA,EAAMtD,OAAS,EAAG,CAClB,MAAMwD,EAAQF,EAAM,GAAGG,OACvBR,QAAQS,KAAKF,GAEjBP,QAAQS,KAAKb,KAIrBc,IAAS,YAAYC,GACZ9F,EAAGG,cACJgF,QAAQU,IAAI,aAAcC,IAMlCC,WAAgB,SAAShB,EAAUiB,GAC3BjB,EAAI5D,QACA4D,EAAI5D,YAAc6E,GAClBhG,EAAG4C,IAAI,KAAM,qBACDoD,WAAiBjB,EAAI5D,aAIrCnB,EAAG4C,IAAI,KAAM,uBAAwBmC,uBAM7CkB,QAAa,SAASC,EAAYC,GAC1BnG,EAAGoG,cAAc,CAACF,KAClBlG,EAAG4C,IAAI,KAAM,wCACqBuD,KAElCnG,EAAGoG,cAAc,CAACD,KAClBnG,EAAG4C,IAAI,KAAM,wCACqBsD,KAGtC,MAAMpG,EAAIqG,EAAOvG,UACXvB,EAAI6H,EAAMtG,UAChB,IAAK,MAAM5B,KAAK8B,EACPzB,EAAEwB,eAAe7B,KAClBK,EAAEL,GAAK8B,EAAE9B,IAGjB,GAAIK,EAAEwB,eAAe,QAAS,CAC1B,MAAMwG,EAAQ,CAAChI,EAAEiI,MACjBD,EAAME,KAAKzG,GACXzB,EAAEiI,KAAOD,OAGThI,EAAEiI,KAAO,GACTjI,EAAEiI,KAAKC,KAAKzG,IAKpB0G,iBAAsB,SAASjI,EAAcyG,EAAayB,GACtD,GAAI9F,KAAKyF,cAAc,CAACK,IAAO,CAC3B,MAAMvB,iBAA8B3G,KAAQyG,IAE5C,MADAG,QAAQC,MAAMF,GACR,IAAIG,MAAMH,KAKxBkB,cAAmB,SAASM,GACxB,IAAK,IAAI1I,EAAI,EAAGA,EAAI0I,EAAKxE,OAAQlE,IAC7B,GAAgB,OAAZ0I,EAAK1I,SAAkC,IAAZ0I,EAAK1I,SAChB,IAAT0I,EACP,OAAO,EAGf,OAAO,GAIXC,gBAAqB,SAASC,EAAiBC,GAC3C,GAAID,EAAME,OAAOD,GAAQ,CACrB,MAAME,EAAaF,EAAMG,WAEzB,OADAJ,EAAMK,UAAUF,IACT,EAEX,OAAO,GAKXG,mBAAwB,SAASC,EAAqB1H,GAClD,GAAIA,EAAI,EAAG,CACX,IAAI2H,EAAU,KACd,OAAU,IAAN3H,GAAoC,IAAzB0H,EAAUH,WACVG,EAEF1H,EAAI0H,EAAUH,YACnBG,EAAUE,UAAU5H,IACpB2H,EAAUD,EAAUG,SACZC,SAAS9H,GACV2H,GAGAD,EAGf,OAAO,MAOXK,cAAmB,SAASC,GACxB,GAAKA,EAAaC,WACd,OAAQD,EAAaC,aAEpB,CACD,MAAMC,EAASF,EAAKG,YACpB,OAAOC,KAAKC,KAAKH,EAAS,OAIlCI,eAAoB,SAASC,GACzB,IAAIC,EAASD,EAAIE,YACjB,MAAMC,EAAUH,EAAII,WAAWC,aACzBC,EAAaN,EAAII,WAAWG,mBAGlC,OAFIJ,IAAUF,GAAUE,EAAQD,aAC5BI,IAAaL,GAAUK,EAAWJ,aAC/BD,GAGXO,oBAAyB,SAASR,GAC9B,MAAMS,EAAcT,EAAInJ,IAAI,UAAU6J,iBAChCC,EAAkBX,EAAIY,YAC5B,GAAID,GAAWA,EAAkBD,eAAgB,CAC7C,MAAMG,EAAeF,EAAkBD,iBACvC,OAAOG,EAAcJ,EAAcI,EAAcJ,EAErD,OAAOA,GAGXK,oBAAyB,SAASd,GAC9B,IAAIe,EAAMf,EAAIgB,eAAe,aAE7B,OADAD,GAAO/I,EAAGiJ,iBAAiBjB,EAAIkB,gBAInCC,mBAAwB,SAASnB,GAC7B,IAAIoB,EAAS,QAAUpJ,EAAG+H,eAAeC,GACzC,MAAMW,EAAkBX,EAAIY,YAQ5B,OAPID,GAAWA,EAAkBU,aAC7BD,GAAU,OAAUT,EAAkBU,eAAeC,WAGrDF,GAAU,OAASpB,EAAInJ,IAAI,UAAUwK,eAAeC,WAExDF,GAAU,MAAQpJ,EAAG8I,oBAAoBd,IAI7CuB,qBAA0B,SAASC,GAC/B,OAAO3B,KAAK4B,MAAMD,EAAM,IAK5BE,sBAA2B,SAAS1B,EAAoB2B,GACpD,IAAIZ,EAAM/I,EAAGuJ,qBAAqBvB,EAAInJ,IAAI,SAAS+K,cAOnD,OANID,EAAKE,IAAI,UACTd,GAAOf,EAAIO,mBAAmBb,cAE9BM,EAAI6B,IAAI,gBACRd,GAAOpI,KAAKsI,iBAAiBjB,EAAIkB,gBAE9BH,GAGXe,iBAAsB,SAAS9B,EAAoB2B,GAC/C,IAAIZ,EAAMY,EAAKjC,aAEf,OADAqB,GAAO/I,EAAG0J,sBAAsB1B,EAAK2B,IAIzCI,iBAAsB,SAAS/B,GAC3B,IAAIC,EAASD,EAAInJ,IAAI,UAAUqJ,YAC/BD,GAAUD,EAAII,WAAW4B,eAAe9B,YACxCD,GAAUD,EAAInJ,IAAI,SAASoL,cAAgB,EAC3ChC,GAAUD,EAAII,WAAW4B,eAAeC,cAAgB,EAGxD,MAAMtB,EAAkBX,EAAIY,YAI5B,OAHID,GAAWA,EAAkBT,YAC7BD,GAAWU,EAAkBT,aAE1BD,GAIXiC,qBAA0B,SAASlC,GAC/B,MAAMM,EAAaN,EAAIO,mBACjBoB,EAAO3B,EAAII,WAAWC,aAC5B,IAAKsB,EACD,MAAO,sBAGX,IAAIP,EAAS,QAAUpJ,EAAG+J,iBAAiB/B,GAE3C,GADAoB,GAAU,OAASO,EAAKN,eAAeC,WACnChB,EAAY,CAEZc,GAAU,MADKd,EAAWe,eACDC,WAAa,SAM1C,OAFAF,GAAU,MADEpJ,EAAG0J,sBAAsB1B,EAAK2B,GAE1CP,GAAU,OAASpJ,EAAGmK,gBAAgBnC,EAAK2B,IAI/CQ,gBAAqB,SAASnC,EAAoB2B,GAC9C,IAAIS,EAAQT,EAAKjB,iBACjB,GAAIiB,EAAKE,IAAI,QAAS,CAClB,MAAMvB,EAAaN,EAAIO,mBACvB,IAAID,EAKA,OAAO,EAHP8B,GADoB9B,EAAWI,iBAiBvC,OAVIV,EAAI6B,IAAI,mBAAmBO,GAAS,GACpCpC,EAAI6B,IAAI,cAAcO,GAAS,GAC/BpC,EAAI6B,IAAI,YACJF,EAAKE,IAAI,QACTO,GAASpC,EAAInJ,IAAI,UAAUwL,SAAS,WAGpCD,GAASpC,EAAInJ,IAAI,UAAUwL,SAAS,aAGrCD,GAGXnB,iBAAsB,SAASqB,GAC3B,OAAOzC,KAAK4B,MAAMa,EAAM,IAG5BC,iBAAsB,SAASC,GAC3B,OAAO3C,KAAK4C,MAAMD,EAAM,IAG5BE,iBAAsB,SAASlB,GAC3B,OAAO3B,KAAK4C,MAAMjB,EAAM,IAK5BmB,sBAA2B,SAASC,EAAOC,GACvC,MAAMvI,EAAM,GAgBZ,OAfmBuI,EAAUC,OAAOzM,GAAKA,EAAE0M,aAChCC,QAAQvK,IACf,MAAM6D,EAAS7D,EAAKwK,YACpB,IAAIC,GAAQ,EACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI7G,EAAOpC,OAAQiJ,IAC3BP,IAAUtG,EAAO6G,IACgB,mBAAtB7G,EAAO6G,GAAGC,SACb9G,EAAO6G,GAAGC,QAAQR,KAClBM,GAAQ,GAKpBA,GAAQ5I,EAAIiE,KAAK9F,KAElB6B,GAOX+I,iBAAsB,GACtBC,cAAmB,EAEnBC,WAAgB,IAChBC,WAAgB,IAChBC,WAAgB,GAIhBC,kBAAuB,EAKvBC,kBAAuB,oBACvBC,iBAAsB,mBACtBC,iBAAsB,mBACtBC,QAAa,UAEbC,kBAAuB,oBACvBC,kBAAuB,oBACvBC,iBAAsB,mBACtBC,uBAA4B,yBAE5BC,qBAA0B,uBAC1BC,uBAA4B,yBAE5BC,mBAAwB,qBACxBC,qBAA0B,uBAC1BC,qBAA0B,uBAC1BC,sBAA2B,wBAE3BC,kBAAuB,oBAEvBC,cAAmB,gBAEnBC,kBAAuB,oBACvBC,gBAAqB,kBACrBC,eAAoB,iBAGpBC,mBAAwB,qBACxBC,kBAAuB,oBACvBC,mBAAwB,qBACxBC,sBAA2B,wBAG3BC,oBAAyB,sBACzBC,sBAA2B,wBAC3BC,gBAAqB,kBACrBC,kBAAuB,oBACvBC,mBAAwB,qBACxBC,iBAAsB,mBAKtBC,WAAgB,SAChBC,UAAe,WACfC,UAAe,QAGfC,KAAU,IACV3N,EAAG2N,KAAKC,KAAO,OACf5N,EAAG2N,KAAKE,KAAO,OACf7N,EAAG2N,KAAKG,KAAO,OACf9N,EAAG2N,KAAKI,OAAS,SACjB/N,EAAG2N,KAAKK,OAAS,SACjBhO,EAAG2N,KAAKM,OAAS,SACjBjO,EAAG2N,KAAKO,UAAY,YACpBlO,EAAG2N,KAAKQ,KAAO,OACfnO,EAAG2N,KAAKS,QAAU,UAClBpO,EAAG2N,KAAKU,QAAU,UAClBrO,EAAG2N,KAAKW,eAAiB,gBACzBtO,EAAG2N,KAAKY,WAAa,OACrBvO,EAAG2N,KAAKa,OAAS,SACjBxO,EAAG2N,KAAKc,KAAO,OACfzO,EAAG2N,KAAKe,UAAY,WAGpB1O,EAAG2O,WAAa,CAAC,OAAQ,SAAU,OAAQ,UACvC,UAAW,gBAAiB,SAAU,OAAQ,YAAa,UAG/D3O,EAAG4O,IAAM,CACLC,MAAO,QACPC,IAAK,MACLC,MAAO,SAGX/O,EAAGgP,aAAe,IAClBhP,EAAGiP,cAAgB,IAEnBjP,EAAGkP,SAAW,IACdlP,EAAGmP,WAAa,EAMhBnP,EAAGoP,YAAc,QACjBpP,EAAGqP,aAAe,SAClBrP,EAAGsP,eAAiB,WAGpBtP,EAAGuP,OAAS,CACRC,OAAQ,GACRC,QAAS,EACTC,KAAM,GACNrB,QAAS,GACTsB,KAAM,GACNC,OAAQ,EACRC,KAAM,EACNC,IAAK,GACLlB,IAAK,EACLmB,MAAO,IAIX/P,EAAGgQ,KAAO,CACNC,OAAQ,GACRC,cAAe,GACfC,QAAS,GACTC,KAAM,GACNC,MAAO,IACPC,MAAO,GACPC,OAAQ,GAIZvQ,EAAGwQ,aAAe,EAClBxQ,EAAGyQ,WAAa,EAChBzQ,EAAG0Q,WAAa,EAEhB1Q,EAAG2Q,mBAAqB,IACxB3Q,EAAG4Q,sBAAwB,GAG3B5Q,EAAG6Q,kBAAoB,IACvB7Q,EAAG8Q,kBAAoB,EACvB9Q,EAAG+Q,uBAAyB,GAC5B/Q,EAAGgR,uBAAyB,GAC5BhR,EAAGiR,UAAY,GAEfjR,EAAGkR,aAAe,GAClBlR,EAAGmR,UAAY,IAEfnR,EAAGoR,iBAAmB,IACtBpR,EAAGqR,eAAiB,YAEpBrR,EAAGsR,YAAc,GACjBtR,EAAGuR,WAAa,EAIhBvR,EAAGwR,WAAa,aAChBxR,EAAGyR,WAAa,aAChBzR,EAAG0R,cAAgB,gBAEnB1R,EAAG2R,WAAa,CAAC,UAAW,UAAW,WAAY,WAAY,SAC3D,UACJ3R,EAAG4R,cAAgB,CAAC,QAAS,WAAY,UAEzC5R,EAAG6R,YAAc,CAAC,UAAW,UAAW,WAAY,WAAY,SAC5D,WAAY,QAAS,QAAS,YAClC7R,EAAG6R,YAAc7R,EAAG6R,YAAYC,OAEhC9R,EAAG+R,UAAY,CAAC,aAAaC,OAAOhS,EAAG6R,aAGvC7R,EAAGiS,aAAevT,OAAOwT,OAAO,CAAC,QAAS,QAAS,OAAQ,SAC3DlS,EAAGmS,kBAAoBzT,OAAOwT,OAAO,CAAC,IAAK,IAAK,IAAK,MAErDlS,EAAGoS,IAAM,CACLC,EAAG,CAAC,GAAI,GACRC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,EAAG,EAAE,EAAG,GACRC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,EAAG,GACRC,GAAI,EAAE,GAAI,GACVC,GAAI,EAAE,EAAG,IAGb5S,EAAG6S,SAAW,CAAC7S,EAAGoS,IAAIC,EAAGrS,EAAGoS,IAAIE,EAAGtS,EAAGoS,IAAIG,EAAGvS,EAAGoS,IAAII,GACpDxS,EAAG8S,SAAW,CAAC9S,EAAGoS,IAAIK,GAAIzS,EAAGoS,IAAIM,GAAI1S,EAAGoS,IAAIO,GAAI3S,EAAGoS,IAAIQ,IAEvD5S,EAAG+S,OAAS,CACRC,OAAQ,SACRC,cAAe,gBACfC,OAAQ,SACRC,cAAe,gBACfC,OAAQ,SACRC,cAAe,gBACfC,OAAQ,SACRC,cAAe,iBAGnBvT,EAAGwT,IAAM,CACLC,KAAM,OACNC,QAAS,UACTC,KAAM,OACNC,UAAW,YACXC,QAAS,UACTC,KAAM,OACNC,MAAO,SAKX/T,EAAGgU,UAAY,SAASC,GACpB,GAAIC,MAAMC,QAAQF,GACd,OAAOA,EAEN,GAAIjU,EAAGoS,IAAIvS,eAAeoU,GAAM,CACjC,MAAMG,EAAQH,EAAII,cAClB,OAAOrU,EAAGoS,IAAIgC,GAIlB,OAFApU,EAAG4C,IAAI,KAAM,0DACqCqR,KAC3C,MAGXjU,EAAGsU,UAAY,SAASC,GACpB,MAAOC,EAAIC,GAAMF,EACjB,IAAInL,EAAS,GAKb,OAJW,IAAPqL,EAAWrL,GAAU,KACR,IAARqL,IAAYrL,GAAU,KACpB,IAAPoL,EAAWpL,GAAU,KACR,IAARoL,IAAYpL,GAAU,KACxBA,GAIXpJ,EAAG0U,UAAY,SAAST,GACpB,MAAOO,EAAIC,GAAMR,EACjB,OAAW,IAAPO,EACW,IAAPC,EAAkB,IACN,IAAPD,GAAmB,IAAPC,EACV,MAEM,IAARD,GAAoB,IAAPC,EACX,KAEM,IAARD,IAAqB,IAARC,EACX,KAGA,IAIJ,KAKfzU,EAAG2U,IAAM,CACLC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,IAAK,MACLC,UAAW,YACXC,MAAO,QACPC,MAAO,QACPhH,QAAS,UACTiH,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,MAAO,SAGX5V,EAAG6V,aAAe,CACdjB,KAAM,mBACNC,MAAO,oBACPC,KAAM,mBACNC,OAAQ,qBACRC,KAAM,mBACNC,OAAQ,qBACRC,IAAK,kBACLC,UAAW,wBACXC,MAAO,oBACPC,MAAO,oBACPhH,QAAS,sBACTiH,MAAO,oBACPC,OAAQ,qBACRC,OAAQ,qBACRC,MAAO,oBACPG,MAAO,oBACPD,KAAM,oBAGV3V,EAAG8V,MAAQ,CACP,WAAY,UAAW,QAAS,aAAc,WAAY,aAG9D9V,EAAG+V,SAAW/V,EAAG8V,MAAME,IAAIC,GAAQA,EAAKC,eAGxClW,EAAGmW,iBAAmB,mBACtBnW,EAAGoW,gBAAkB,kBAErBpW,EAAGqW,WAAarW,EAAG8V,MAAME,IAAIC,GAAQA,EAAKK,OAAO,EAAG,IACpDtW,EAAGuW,UAAYvW,EAAG8V,MAAME,IAAIC,GAAQ,MAAQA,GAC5CjW,EAAGwW,UAAYxW,EAAG8V,MAAME,IAAIC,GAAQ,MAAQA,GAE5CjW,EAAGyW,gBAAkB,SAASC,GAC1B,OAAO1W,EAAG6V,aAAaa,IAI3B1W,EAAG2W,QAAU,SAASpX,GAClB,MAAOqX,EAAGC,GAAKtX,EAAIiG,MAAM,KACzB,MAAO,CAACsR,SAASF,EAAG,IAAKE,SAASD,EAAG,MAGzC7W,EAAG+W,QAAU,CAAC9X,KACNe,EAAGoG,cAAc,CAACnH,MAGI,iBAAVA,EACK,KAAVA,IAEFiV,MAAMC,QAAQlV,IACK,IAAjBA,EAAMiD,SAMrBlC,EAAGqC,QAAU,CAAC0C,IACV,GAAIA,EAAI1C,QACJ,OAAO0C,EAAI1C,UAEV,GAAI0C,EAAIiS,UAAW,CAEpB,OADejS,EAAIiS,YACL3U,UAElB,MAAO,KAGXrC,EAAGiX,eAAiB,EAACvU,EAAMwU,KACvB,MAAM9N,EAAS8N,EAAIlB,IAAImB,GACnBnX,EAAGoX,UAAU1U,EAAMyU,IAGvB,OADA/N,EAAOiO,cAAe,EACfjO,IAGXpJ,EAAGoX,UAAY,EAAC1U,EAAMqC,KAClB,GAAa,WAATrC,EAAmB,CAGnB,GAAI1C,EAAGsX,OAAOvS,GAAM,CAChB,MAAMC,EAAM,UAAYD,EAAI1C,UAAY,IACxCrC,EAAG4C,IAAI,KAAM,YAAa,kCAAoCoC,GAElE,MAAO,CAACuS,QAAS,CAAC7U,OAAM8U,GAAIzS,EAAI0S,UAE/B,GAAa,WAAT/U,EAAmB,CACxB,GAAIqC,EAAI2S,OACJ,OAAO3S,EAAIqS,YAEV,GAAIrS,EAAIwS,QACT,MAAO,CAACA,QAAS,CAAC7U,KAAM,SAAU8U,GAAIzS,EAAIwS,cAG7C,IAAa,cAAT7U,EACL,MAAO,CAAC6U,QAAS,CAAC7U,KAAM,YAAa8U,GAAIzS,EAAI0S,UAE5C,GAAa,UAAT/U,EACL,MAAO,CAAC6U,QAAS,CAAC7U,KAAM,QAAS8U,GAAIzS,EAAI0S,UAExC,GAAa,SAAT/U,EACL,MAAO,CAAC6U,QAAS,CAAC7U,KAAM,OAAQ8U,GAAIzS,EAAI0S,UAEvC,GAAa,YAAT/U,EACL,MAAO,CAAC6U,QAAS,CAAC7U,KAAM,UAAW8U,GAAIzS,EAAI0S,UAI/C,OAFAzX,EAAG4C,IAAI,KAAM,oBACDF,yBAA4BqC,KACjC,OAIX/E,EAAG2X,cAAgB,SAASC,EAAMC,GAC9B,MAEMC,EAFQF,EAAO5X,EAAG+X,gBACVF,EAAO7X,EAAGgY,gBAQxB,MALkB,CACdC,MAAO,GACPC,SAAUrQ,KAAK4C,MAAa,GAAPqN,GACrBK,WAAY,MAKpBnY,EAAGY,gBAAkBZ,EAAGM,kBAExBN,EAAGoY,WAAa,CAACpY,EAAGwN,WAAYxN,EAAGyN,UAAWzN,EAAG0N,WAEjD1N,EAAGqY,OAAS,CAACrY,EAAGwQ,aAAcxQ,EAAGyQ,WAAYzQ,EAAG0Q,YAEhD1Q,EAAGsY,WAAa,CAACtY,EAAGwR,WAAYxR,EAAG0R,cAAe1R,EAAGyR,YAErDzR,EAAGY,gBAAkBZ,EAAGM,kBAKxBN,EAAGuY,cAAgB,EAACC,EAAaC,KAC7B,GAAID,EAAMC,EAGN,OAFAtT,QAAQC,MAAM,6CACdD,QAAQC,oBAAoBoT,WAAaC,KAClC,GAEX,MAAMC,EAAQD,EAAM,EACdvB,EAAM,GACZ,IAAK,IAAI/L,EAAIqN,EAAKrN,GAAKuN,EAAOvN,IAC1B+L,EAAI3Q,KAAK4E,GAGb,MACMwN,EAASzB,EADFA,EAAIhV,OAAS,GAGpB0W,EAAaD,EAAS,GAAM,EAAKA,EAAS,GAAKA,EAAS,GAAK,EAC7D5T,EAAM,GAUZ,OARAmS,EAAIlM,QAASvE,IACT,MAAMoS,EAAUhR,KAAKiR,IAAIrS,EAAMmS,GAC/B,IAAIG,EAAOJ,EAAS9Q,KAAK4C,MAAMzK,EAAG6Q,kBAAoBgI,GACtDE,EAAiB,IAATA,EAAcA,EAAO,EAAIA,EACjChU,EAAI0B,GAAOsS,IAIRhU,IAGX/E,EAAGgZ,aAAe,EAACC,EAAOC,KACtB,IAAIC,EAAY,EAAID,EAAQD,EAE5B,OADIE,EAAY,IAAIA,EAAY,GACzBA,IAGXnZ,EAAGoZ,YAAc,EAACH,EAAOC,KACrB,IAAIG,EAAW,GAAKH,EAAQ,GAAKD,EAIjC,OAHII,GAAYrZ,EAAGiR,YACfoI,EAAWrZ,EAAGiR,WAEXoI,IAKXrZ,EAAGsZ,mBAAqB,MAAgB,CACpCC,GAAK,GACLC,GAAK,GACLC,GAAK,EACLC,GAAK,EACLC,GAAK,KAIT3Z,EAAG4Z,sBAAwB,CAACC,IACxB,MAAMC,EAASD,EAAS,EAClBE,EAAO,GACb,IAAK,IAAI/b,EAAI,EAAGA,GAAK8b,EAAQ9b,IACzB+b,EAAK/b,GAAK6b,EAEd,OAAOE,IAGX/Z,EAAGga,mBAAqB,MAAgB,CACpCC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,EACHC,EAAG,KAQPta,EAAGua,kBAAoB,CAACtb,IACpB,IAAIub,EAAUvb,EACVwb,EAAQ,EACZ,KAAOD,GAAW,KACdA,GAAW,MACTC,EAGN,OADiBA,EAAQxb,EAAQ,IACf,MAKtBe,EAAG0a,eAAiB,EAAChY,EAAciY,EAAelT,KAC9C,MAAMmT,EAAYnT,EAAKoT,WACvB,IAAI/C,EAAO,EACX,OAAQpV,GACJ,IAAK,SAAUoV,GAAS,EAAM,GAAM6C,EAAQ,MAC5C,IAAK,QAAS7C,GAAS,EAAM,GAAM6C,EAAQ,MAC3C,QAAS7C,EAAO,EAEpB,MAAMgD,EAAWjT,KAAK4C,MAAMmQ,EAAY9C,GACxCrQ,EAAKsT,SAASD,KAIlB9a,EAAGgb,cAAgB,EAACpQ,EAAOqQ,KACvB,MAAMC,EAASlb,EAAGmb,eAAeF,GAC3B1W,EAAQqG,EAAMxC,WAAWgT,eAAeC,WAC9C,IAAK,IAAIrd,EAAI,EAAGA,EAAIuG,EAAMrC,OAAQlE,IAC9B,GAA2B,aAAvBuG,EAAMvG,GAAGmD,WACLoD,EAAMvG,GAAGgJ,YAAckU,EACvB,OAAO,EAInB,OAAO,IAKXlb,EAAGsb,aAAe,EAAC1Q,EAAsBsQ,KACrC,IAAIK,EAAgB,EACpB,MAAMhX,EAAQqG,EAAMxC,WAAWgT,eAAeC,WAC9C,IAAIG,EAAa,KACjB,IAAK,IAAIxd,EAAI,EAAGA,EAAIuG,EAAMrC,OAAQlE,IACH,aAAvBuG,EAAMvG,GAAGmD,YACLoD,EAAMvG,GAAGgJ,WAAakU,GACtBK,EAAgBL,EAChB3W,EAAMvG,GAAGqJ,UAAU6T,KAInBK,GADAC,EAAajX,EAAMvG,IACQgJ,WAC3BwU,EAAWjU,SAAS,KAQhC,OAHmB,OAAfiU,GACA5Q,EAAMxC,WAAWqT,WAAWD,GAEzBD,IAKXvb,EAAG0b,YAAc,EAACC,EAAqBlU,KACnC,IAAKA,EAAO,OAAO,EAEnB,IAAI2B,EAAS,EAIb,GAHiC,mBAAtB3B,EAAKkU,KACZvS,GAAU3B,EAAKkU,MAEflU,EAAKoC,IAAI,SAAU,CACnB,MAAM+R,EAAQnU,EAAK5I,IAAI,SACW,mBAAvB+c,EAAMD,KACbvS,GAAUwS,EAAMD,MAGxB,GAAIlU,EAAKoC,IAAI,YAAa,CACtB,MAAMgS,EAAMpU,EAAK5I,IAAI,YAAYid,SACD,mBAArBD,EAAIF,KACXvS,GAAUyS,EAAIF,MAGtB,OAAOvS,IAIXpJ,EAAG+b,eAAiB,CAACC,IACjB,IAAIC,EAAS,EACb,IAAK,IAAIje,EAAI,EAAGA,GAAKge,EAAUhe,IAC3Bie,GAAoB,IAATje,EAAI,GAEnB,OAAOie,IAIXjc,EAAGkc,aAAe,EAACjI,EAAakI,KAC5B,IAAKC,EAAMC,GAAQ,CAAC,EAAG,GAOvB,OANInI,MAAMC,QAAQgI,IACbC,EAAMC,GAAQF,EAEVA,EAAIG,QACRF,EAAMC,GAAQF,EAAII,SAEhB,CAACH,EAAOnI,EAAI,GAAIoI,EAAOpI,EAAI,MAItCjU,EAAGuU,KAAO,EAACiI,EAAiBL,KACxB,IAAKM,EAAOC,EAAON,EAAMC,GAAQ,CAAC,EAAG,EAAG,EAAG,GAmB3C,OAlBInI,MAAMC,QAAQqI,IACdC,EAAQD,EAAK,GACbE,EAAQF,EAAK,IAERA,EAAKF,OACVG,EAAQD,EAAKF,OACbI,EAAQF,EAAKG,QAGbzI,MAAMC,QAAQgI,IACdC,EAAOD,EAAI,GACXE,EAAOF,EAAI,IAENA,EAAIG,OACTF,EAAOD,EAAIG,OACXD,EAAOF,EAAIQ,QAGR,CAACF,EAAQL,EAAMM,EAAQL,KAGlCrc,EAAG4c,QAAU,EAACJ,EAAiBL,KAC3B,MAAO3H,EAAIC,GAAMzU,EAAGuU,KAAKiI,EAAML,GAC/B,MAAO,CAACtU,KAAKiR,IAAItE,GAAK3M,KAAKiR,IAAIrE,MAUnCzU,EAAG6c,SAAW,EAACL,EAAiBL,KAC5B,MAAO3H,EAAIC,GAAMzU,EAAGuU,KAAKiI,EAAML,GAG/B,MAAO,CAFe,IAAP3H,EAAW,EAAIA,EAAK3M,KAAKiR,IAAItE,GACtB,IAAPC,EAAW,EAAIA,EAAK5M,KAAKiR,IAAIrE,MAIhDzU,EAAG8c,YAAc,EAAChe,EAAW0d,EAAiBL,KAC1C,MAAO3H,EAAIC,GAAMzU,EAAG4c,QAAQJ,EAAML,GAClC,OAAO3H,GAAM1V,GAAK2V,GAAM3V,IAK5BkB,EAAG+c,aAAe,EAACnS,EAAsBoR,KACrC,GAAIpR,EAAMf,IAAI,cAAe,CACzB,IAAImT,EAAYpS,EAAM/L,IAAI,cAAcoe,cACxC,GAAID,EAAYhB,EACZ,KAAOgB,EAAYhB,GAAU,CACzB,MAAMkB,EAAYF,EAAY,EAI9B,KAHEA,EACFpS,EAAM/L,IAAI,cAAcse,YAAYD,GAEhCtS,EAAMf,IAAI,cACVe,EAAM/L,IAAI,cAAcue,WAAWC,oBAUvC,GANArd,EAAGsd,aAAa1S,EAAOsS,GAGvBld,EAAGud,mBAAmB3S,EAAOsS,GAGzBtS,EAAMf,IAAI,UAAW,CACrB,MAAM2T,EAAQ5S,EAAM/L,IAAI,UACxB,IAAI4e,EAAO,EACP7S,EAAM8S,aAAaD,EAAO,GAC9BD,EAAMG,SAASH,EAAMI,WAAaH,GAClCD,EAAMK,MAAML,EAAMM,QAAUL,QAKnC,CACD,IAAIzY,WAAegY,WAAmBhB,IACtChX,GAAO,sCACPhF,EAAG4C,IAAI,KAAM,eAAgBoC,SAIjChF,EAAG4C,IAAI,KAAM,eAAgB,8BAKrC5C,EAAGsd,aAAe,SAAS1S,EAAsBsS,GAC7C,MACMa,EADMC,EAAAC,OAAOC,SACEC,aAAane,EAAG+V,UACvBnL,EAAM/L,IAAI,SAClBuf,SAASL,EAAU,IAG7B/d,EAAGud,mBAAqB,SAAS3S,EAAsBsS,GACnD,GAAItS,EAAMf,IAAI,UAAW,CACrB,MAAMwU,EAAazT,EAAM/L,IAAI,UAEvByf,EAAU,EAChBD,EAAWE,UAAUF,EAAWnW,YAAcoW,GAE9C,MAAME,EAAU,EAGhB,GAFAH,EAAWI,WAAWJ,EAAWK,aAAeF,GAE5CtB,EAAY,GAAM,EAAG,CACrB,MAAMyB,EAAON,EAAWO,gBACxBP,EAAWQ,cAAcF,EAAO,GAIpC,MAAMG,EAAST,EAAWhV,eAC1ByV,EAAOC,QAASD,EAAOE,UAAY,GAC/B9B,EAAY,GAAM,GAClB4B,EAAOG,OAAQH,EAAOI,SAAW,KAQ7Clf,EAAGmf,SAAW,SAASpa,EAAUqa,EAA0B1Z,GAEvD,MAAM2Z,EAAW,CAACpgB,EAAOqgB,KACA,iBAAVrgB,GACPe,EAAGuF,KAAK,QAAU+Z,EAAM5Z,GACxB1F,EAAGuF,KAAKtG,EAAOyG,IAGf1F,EAAGuF,KAAK,QAAU+Z,EAAO,OAASrgB,EAAOyG,IAIjD,GAAI0Z,GACA,GAAIlL,MAAMC,QAAQiL,GACdA,EAAMpU,QAAQsU,IACV,GAAyB,mBAAdva,EAAIua,GAAsB,CACjC,MAAMrgB,EAAQ8F,EAAIua,KAClBD,EAASpgB,EAAOqgB,OAEf,CACD,MAAMC,EAAOC,KAAKC,UAAU1a,GAC5B/E,EAAG4C,IAAI,KAAM,sBACEwc,eAAmBG,aAKzC,GAAqB,iBAAVH,EACZ,GAA0B,mBAAfra,EAAIqa,GAAuB,CAClC,MAAMngB,EAAQ8F,EAAIqa,KAClBC,EAASpgB,EAAOmgB,QAGhBpf,EAAG4C,IAAI,KAAM,sBACEwc,eAAmBI,KAAKC,UAAU1a,WAKzD/E,EAAGuF,KAAKR,EAAKW,IAQrB1F,EAAG0f,aAAe,SAAShZ,EAAa0Y,EAA0BO,GAC9D,MAAMC,EAAUlZ,EAAKxE,OACrBiD,QAAQU,gBAAgB+Z,aAExBlZ,EAAKsE,QAAQ,CAACjG,EAAK8a,KACW,mBAAfF,EACHA,EAAW5a,KACXI,QAAQU,eAAega,QACvB7f,EAAGmf,SAASpa,EAAKqa,KAIrBja,QAAQU,eAAega,QACvB7f,EAAGmf,SAASpa,EAAKqa,OAM7Bpf,EAAG8f,UAAY,SAASrY,EAAMsY,GAC1B,MAAO,CAACC,IAAK,MAAOvY,OAAMsY,WAG9B/f,EAAGigB,WAAa,SAASxY,EAAMyY,GAC3B,MAAO,CAACF,IAAK,OAAQvY,OAAMyY,UAG/BlgB,EAAGmgB,YAAc,SAAS1Y,EAAMyY,GAC5B,MAAO,CAACF,IAAK,QAASvY,OAAMyY,UAGhClgB,EAAGogB,cAAgB,SAAS7hB,EAAM8hB,EAAYH,GAC1C,MAAO,CAACF,IAAK,UAAWM,KAAM/hB,EAAM8hB,aAAYH,UAGpDlgB,EAAGugB,eAAiB,CAAC,UAGrBvgB,EAAGwgB,cAAgB,CAAC/Y,IAChB,MAAMgZ,EAAWhZ,EAAKtG,UAEtB,OADcnB,EAAGugB,eAAeG,QAAQD,IACxB,IAIpBzgB,EAAG2gB,QAAU,CAAC5b,MACNA,IAAOA,EAAI6b,cACJ7b,EAAI6b,gBAAkB5gB,EAAGwN,YAKxCxN,EAAG6gB,UAAY,CAAC9b,MACRA,IAAOA,EAAI6b,cACJ7b,EAAI6b,gBAAkB5gB,EAAGyN,WAKxCzN,EAAGsX,OAAS,CAACvS,MACLA,IAAOA,EAAI6b,cACJ7b,EAAI6b,gBAAkB5gB,EAAG0N,WAOxC1N,EAAG8gB,SAAW,CAAC/b,MACPA,EAAIgc,OAAShc,EAAIic,aAAejc,EAAIkc,KAAOlc,EAAIlG,MAQvDmB,EAAGkhB,cAAgB,CAACnB,GACTA,IAAWA,EAAOlW,IAAI,SAIjC7J,EAAGmhB,eAAiB,EAAC1Z,EAAgB2Z,KACjC,IAAIrB,EAASqB,EAUb,OATIA,EAAYrB,SACZA,EAASqB,EAAYrB,QACV9U,WACH8U,EAAOhV,cACPgV,EAASA,EAAO9U,YAAY,IAIvBxD,EAAKtG,WAElB,IAAK,SACD,GAAInB,EAAG2gB,QAAQZ,GACX,OAAO/f,EAAG4O,IAAIC,MAElB,MAEJ,QAAS,MAAO,GAEpB,MAAO,KAIX7O,EAAGmb,eAAiBxT,IAAUE,KAAK4B,MAAM9B,EAAS3H,EAAGoR,mBAKrDpR,EAAGqhB,QAAU,GACbrhB,EAAGshB,QAAU,EAIbthB,EAAGuhB,cAAgB,EAAIvhB,EAAGqhB,QAC1BrhB,EAAGwhB,cAAgB,EAAIxhB,EAAGshB,QAC1BthB,EAAG+X,eAAiB,EAAI/X,EAAGqhB,QAC3BrhB,EAAGgY,eAAiB,EAAIhY,EAAGshB,QAC3BthB,EAAGyhB,cAAgB,EAAIzhB,EAAGqhB,QAC1BrhB,EAAG0hB,cAAgB,EAAI1hB,EAAGshB,QAC1BthB,EAAG2hB,aAAe,EAAI3hB,EAAGqhB,QACzBrhB,EAAG4hB,aAAe,EAAI5hB,EAAGshB,QAGzBthB,EAAG6hB,gBAAkB,IACrB7hB,EAAG8hB,gBAAkB,IACrB9hB,EAAG+hB,kBAAoB,GAGvB/hB,EAAGgiB,iBAAmB,IACtBhiB,EAAGiiB,iBAAmB,IACtBjiB,EAAGkiB,mBAAqB,GAGxBliB,EAAGmiB,SAAW,GACdniB,EAAGmiB,SAASC,MAAQ,EACpBpiB,EAAGmiB,SAASE,OAAS,EACrBriB,EAAGmiB,SAASG,OAAS,EACrBtiB,EAAGmiB,SAASI,MAAQ,GAGpBviB,EAAGwiB,WAAa,GAChBxiB,EAAGwiB,WAAWJ,MAAQ,EACtBpiB,EAAGwiB,WAAWH,OAAS,EACvBriB,EAAGwiB,WAAWC,OAAS,EACvBziB,EAAGwiB,WAAWE,SAAW,GACzB1iB,EAAGwiB,WAAWG,OAAS,GAKvB3iB,EAAG4iB,IAAM,GACT5iB,EAAG4iB,IAAIC,UAAY9jB,OAAO,aAC1BiB,EAAG4iB,IAAIE,aAAe/jB,OAAO,gBAC7BiB,EAAG4iB,IAAIpT,OAASzQ,OAAO,UACvBiB,EAAG4iB,IAAIG,OAAShkB,OAAO,UACvBiB,EAAG4iB,IAAII,YAAcjkB,OAAO,eAC5BiB,EAAG4iB,IAAIK,KAAOlkB,OAAO,QACrBiB,EAAG4iB,IAAIM,cAAgBnkB,OAAO,iBAC9BiB,EAAG4iB,IAAIO,OAASpkB,OAAO,UACvBiB,EAAG4iB,IAAIQ,WAAarkB,OAAO,cAC3BiB,EAAG4iB,IAAIS,MAAQtkB,OAAO,SACtBiB,EAAG4iB,IAAIU,OAASvkB,OAAO,UACvBiB,EAAG4iB,IAAIW,WAAaxkB,OAAO,cAC3BiB,EAAG4iB,IAAI3N,OAASlW,OAAO,UACvBiB,EAAG4iB,IAAIvU,QAAUtP,OAAO,WACxBiB,EAAG4iB,IAAIY,SAAWzkB,OAAO,YACzBiB,EAAG4iB,IAAIa,MAAQ1kB,OAAO,SACtBiB,EAAG4iB,IAAIc,KAAO3kB,OAAO,QACrBiB,EAAG4iB,IAAIe,OAAS5kB,OAAO,UACvBiB,EAAG4iB,IAAIgB,WAAa7kB,OAAO,cAC3BiB,EAAG4iB,IAAIiB,aAAe9kB,OAAO,gBAC7BiB,EAAG4iB,IAAIkB,OAAS/kB,OAAO,UACvBiB,EAAG4iB,IAAImB,aAAehlB,OAAO,gBAC7BiB,EAAG4iB,IAAIoB,QAAUjlB,OAAO,WAExBiB,EAAGikB,cAAgB,KAGnBjkB,EAAGkkB,qBAAuB,EAACxL,EAAcjY,KACrC,MAAMmX,EAAOc,EAAMyL,SAASvM,KACtBC,EAAOa,EAAMyL,SAAStM,KACtBjB,EAAInW,EAAK6b,OACTzF,EAAIpW,EAAKkc,OACf,OAAU,IAAN9F,EAAiB,QACjBA,IAAMgB,EAAO,EAAW,QACxBjB,IAAMgB,EAAO,EAAW,OAClB,IAANhB,EAAiB,OACd,cAKX5W,EAAGokB,cAAgB,EAAC5H,EAAiBL,EAAgBkI,EAAM,MACvD,IAAI/hB,EAAM,GACV,MAAOkS,EAAIC,GAAMzU,EAAGuU,KAAKiI,EAAML,GACzBmI,EAAQ9P,EAAK,GACb+P,EAAQ9P,EAAK,GAOnB,OANI8P,EAAQ,EAAIjiB,GAAO,QACdiiB,EAAQ,IAAIjiB,GAAO,SACxBgiB,EAAQ,EAAIhiB,GAAO,QACdgiB,EAAQ,IAAIhiB,GAAO,QAEhB,KAARA,IAAaA,EAAM,oBAChBA,IAUXtC,EAAGwkB,SAAW,CAACxO,IACX,IAAIyO,EAAW,KAOf,GANIvQ,MAAMC,QAAQ6B,GACdyO,EAAWzkB,EAAG0kB,WAAW1O,GAEpB9B,MAAMC,QAAS6B,EAAgB2O,QACpCF,EAAWzkB,EAAG0kB,WAAY1O,EAAgB2O,OAE1CF,EAAU,CACV,MAAMG,EAAQH,EAASviB,OACvB,IAAK,IAAI2U,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB1R,QAAQU,IAAI4e,EAAS5N,GAAGgO,KAAK,QASzC7kB,EAAG8kB,UAAY,EAAI5N,EAAYoI,KAC3B,IAAK,IAAIthB,EAAI,EAAGA,EAAIkZ,EAAIhV,OAAQlE,IAC5B,IAAK,IAAImN,EAAI,EAAGA,EAAI+L,EAAIlZ,GAAGkE,OAAQiJ,IAC/BmU,EAAKthB,EAAGmN,EAAG+L,EAAIlZ,GAAGmN,MAO9BnL,EAAG+kB,MAAQ,EAAI7N,EAAYoI,KACvB,MAAMhd,EAAM,GAIZ,OAHAtC,EAAG8kB,UAAU5N,EAAK,CAAClZ,EAAGmN,EAAG1E,KACrBnE,EAAIiE,KAAK+Y,EAAKthB,EAAGmN,EAAG1E,MAEjBnE,IAGXtC,EAAGglB,OAAS,CAAI9N,IACZ,MAAM+N,EAAO,IAAI/Q,MAAMgD,EAAIhV,QAC3B,IAAK,IAAIlE,EAAI,EAAGA,EAAIkZ,EAAIhV,OAAQlE,IAAK,CACjCinB,EAAKjnB,GAAK,IAAIkW,MAAMgD,EAAIlZ,GAAGkE,QAC3B,IAAK,IAAIiJ,EAAI,EAAGA,EAAI+L,EAAIlZ,GAAGkE,OAAQiJ,IAC/B8Z,EAAKjnB,GAAGmN,GAAK+L,EAAIlZ,GAAGmN,GAG5B,OAAO8Z,IAGXjlB,EAAG0kB,WAAaxN,KACZ,MAAM5U,EAAM,GACNsiB,EAAQ1N,EAAI,GAAGhV,OACfgjB,EAAQhO,EAAIhV,OAClB,IAAK,IAAI2U,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5BvU,EAAIuU,GAAK,GACT,IAAK,IAAID,EAAI,EAAGA,EAAIsO,EAAOtO,IACvBtU,EAAIuU,GAAGD,GAAKM,EAAIN,GAAGC,GAG3B,OAAOvU,IAKXtC,EAAGmlB,YAAcjO,KACb,MAAM0N,EAAQ1N,EAAIhV,OACZI,EAAM,GACZ,IAAK,IAAIuU,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,IAAIuO,EAAMlO,EAAIL,GACduO,EAAMC,EAAKD,GACX9iB,EAAIiE,KAAK6e,GAEb,SAASC,EAAKC,GACV,IAAIxmB,EAAI,GASR,OARAwmB,EAAKta,QAAQua,IACLrR,MAAMC,QAAQoR,GACdzmB,EAAIA,EAAEkT,OAAOqT,EAAKE,IAGlBzmB,EAAEyH,KAAKgf,KAGRzmB,EAEX,OAAOwD,IAGXtC,EAAGwlB,cAAgB,CAACtO,IAChB,MAAMuO,EAAO,GACPnjB,EAAM,GACZ,IAAK,IAAItE,EAAI,EAAGA,EAAIkZ,EAAIhV,OAAQlE,IAAK,CACjC,MAAO4Y,EAAGC,GAAKK,EAAIlZ,GACbuB,EAAMqX,EAAI,IAAMC,EACjB4O,EAAKlmB,KACNkmB,EAAKlmB,IAAO,EACZ+C,EAAIiE,KAAK2Q,EAAIlZ,KAGrB,OAAOsE,IAKXtC,EAAG0lB,eAAiB,EAAChN,EAAOzW,KACxB,MAAM+T,EAAM0C,EAAMyL,SAClB,IAAK,IAAIvN,EAAI,EAAGA,EAAIZ,EAAI4B,KAAMhB,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAI6B,KAAMhB,IAAK,CAClBb,EAAI2O,KAAK/N,GAAGC,GACpB8O,YAAY1jB,MAK7BjC,EAAG4lB,YAAc,EAACC,EAAMC,IACbD,EAAKxb,WAAWoN,UAAYqO,EAAKzb,WAAWoN,SAIvDzX,EAAG+lB,iBAAmB,EAACnb,EAAOnK,EAAM6J,KAGhC,SAAUA,8BAFG7J,EAAKS,cAAcC,gBAKpCnB,EAAGgmB,mBAAqB,CAACtN,IACrB,MAAMuN,EAAOvN,EAAM1B,YACnB,IAAKiP,EAAO,MAAO,GACnB,OAAQA,EAAK9kB,WACT,IAAK,SACL,IAAK,OACL,IAAK,UAAW,CACZ,MAAM+kB,EAASD,EAAKjP,YACdmP,EAAUF,EAAK5jB,UACf+jB,EAAWF,EAAO7jB,UACxB,OAAI8jB,IAAYC,EACLD,KAGDC,IAEd,QAAS,OAAOH,EAAK5jB,aAI7B,MAAA2b,EAAApgB,EAAA,GAGAoC,EAAGqmB,UAAY,SAAStN,GAEpB,OADYiF,EAAAC,OAAOC,SACRoI,cAAgBvN,GAK/B/Y,EAAGumB,IAAM,SAASC,GACd,GAAKC,OAAeC,OAAQ,CACxB,MAAMhO,EAAS+N,OAAeC,OAAOrc,WACrC,GAAIsc,OAAOC,UAAUJ,GAAW,CAC5B,MAAM5b,EAAQ8N,EAAMzN,YAAY4b,KAAKC,GAAKA,EAAErP,UAAY+O,GACxD,GAAI5b,EAAO,CACP,MAAMrM,EAAOqM,EAAMvI,UAGnB,OAFArC,EAAGuF,sBAAsBhH,aAAgBioB,KACzCxmB,EAAGuF,KAAKia,KAAKC,UAAU7U,IAChBA,EAEX,MAAMnD,EAAOiR,EAAM2C,WAAWwL,KAAK7oB,GAAKA,EAAEyZ,UAAY+O,GACtD,GAAI/e,EAAM,CACN,MAAMlJ,EAAOkJ,EAAKpF,UAGlB,OAFArC,EAAGuF,2BAA2BhH,aAAgBioB,KAC9CxmB,EAAGuF,KAAKia,KAAKC,UAAUhY,IAChBA,IAInB,OAAO,MAGXzH,EAAG+mB,KAAO,SAASC,EAAQC,GAAQ,GAC/B,IAAIC,EAAS,KAIb,GAHID,GAAS,IACTC,EAASlnB,EAAGumB,IAAIU,IAEhBC,EAAQ,CACR,MAAMnG,EAAQmG,EAAOC,gBACrB,GAAIpG,EAAMiG,GAAS,CACf,MAAMD,EAAOhG,EAAMiG,GACbtkB,EAAOqkB,EAAK5lB,UAClBgE,QAAQU,sBAAsBnD,aAAgBskB,KAC9C,MAAMzH,EAAOwH,EAAKK,SAQlB,OAPI7H,EACAvf,EAAGuF,KAAKia,KAAKC,UAAUF,KAGvBvf,EAAGuF,KAAK,oBACRvF,EAAGuF,KAAKwhB,IAELA,GAGf,OAAO,MAGX/mB,EAAGqnB,MAAQ,SAASC,EAAUC,EAAUC,GAAU,GAC9C,IAAIC,EAAWD,EACf,KAAOF,KAEH,GADAC,IACmB,KAAbE,EACF,OAAO,EAGf,OAAO,GAcX,MACMC,EADN9pB,EAAA,GACwB+pB,UAAUC,UAMlC5nB,EAAG6nB,QAAU,SAAS7iB,GAClBrE,KAAKmnB,aAAa,OAAQ9iB,IAG9BhF,EAAG+nB,SAAW,SAAS/iB,GACnBrE,KAAKmnB,aAAa,OAAQ9iB,IAG9BhF,EAAGgoB,UAAY,SAAShjB,GACpBrE,KAAKmnB,aAAa,QAAS9iB,IAG/BhF,EAAGioB,YAAc,SAASjjB,GACtBrE,KAAKmnB,aAAa,UAAW9iB,IAGjChF,EAAGkoB,SAAW,SAASljB,GACnBrE,KAAKmnB,aAAa,OAAQ9iB,IAG9BhF,EAAGmoB,WAAa,SAASnjB,GACrBrE,KAAKmnB,aAAa,SAAU9iB,IAIhChF,EAAG8nB,aAAe,SAASM,EAAepjB,GACtC,IAAIqjB,EAAS,GACb,GAAmB,iBAARrjB,EAAkB,CACzB,MAAMsjB,EAAStjB,EAKTujB,EAAY,CAAC9nB,KAJN6nB,EAAO7nB,KAIKuE,IAFzBqjB,GADAA,EAASC,EAAOtjB,KACA,GAAGqP,cAAgBgU,EAAOG,UAAU,GAEdJ,SACtCV,EAAKe,UAAU9nB,KAAKmL,QAASyc,QAG7BF,EAASrjB,EAAI,GAAGqP,cAAgBrP,EAAIwjB,UAAU,GAC9Cd,EAAKe,UAAU9nB,KAAKmL,QAAS,CAAC9G,IAAKqjB,EAAQD,WAMnDpoB,EAAG0oB,oBAAsBjhB,KACrB,GAAIzH,EAAGwgB,cAAc/Y,GACjB,GAAwB,IAApBA,EAAKT,WAAkB,CACvB,MAAMhC,EAAM,CAACyC,QACbigB,EAAKe,UAAUzoB,EAAG6L,iBAAkB7G,QAGpCyC,EAAKJ,UAAU,KAM3BvJ,EAAAyE,QAAevC,qKCv2Df,MAAA2oB,EAAAC,EAAAhrB,EAAA,IACAirB,EAAAD,EAAAhrB,EAAA,KAGMkrB,EAAO,EAAE,EAAG,EAAG,GACfC,EAAe,EAAE,EAAG,GAO1B,MAAa9K,EAIF+K,cAAcC,GACjBhL,EAAOiL,SAAWD,EAGfD,gBAIH,OAHK/K,EAAOiL,WACRjL,EAAOiL,SAAW,IAAIjL,EAAO,MAE1BA,EAAOiL,SAGXF,cAAcG,GACjBN,EAAAtmB,QAAI6mB,IAAIC,QAAQF,GACJlL,EAAOC,SACfmL,QAAQF,GAMhBH,YAAYG,EAAO,GACfxoB,KAAKwoB,KAAOA,EACZxoB,KAAKsoB,IAAMJ,EAAAtmB,QAAI6mB,IAAI9hB,QACnB3G,KAAKsoB,IAAII,QAAQ1oB,KAAKwoB,MAGnBH,QAAQG,GACXhkB,QAAQU,IAAI,uBAAyBsjB,GACrCxoB,KAAKwoB,KAAOA,EACZxoB,KAAKsoB,IAAII,QAAQF,GAGdH,SAAS9lB,GACZvC,KAAKsoB,IAAIK,SAASpmB,GAIf8lB,SAASjkB,GACZ,MAAMwkB,EAAO7qB,OAAO6qB,KAAKxkB,GAEzB,OAAOA,EAAIwkB,EADM5oB,KAAK6oB,UAAUD,KAK7BP,aAAgB9R,GAEnB,OAAOA,EADWvW,KAAK6oB,UAAUtS,IAM9B8R,eAAkB9R,EAAUzX,EAAY,GAC3C,GAAIyX,EAAIhV,QAAUzC,EACd,OAAOyX,EAAIuS,QAEf,MAAMhE,EAAiC,GACjClhB,EAAa,GACnB,KAAOA,EAAMrC,OAASzC,GAAG,CACrB,MAAMogB,EAAQlf,KAAK6oB,UAAUtS,GACxBuO,EAAK5F,KACN4F,EAAK5F,IAAS,EACdtb,EAAMgC,KAAK2Q,EAAI2I,KAGvB,OAAOtb,EAGJykB,cAAcxQ,EAAaC,GAC9B,OAAO9X,KAAKsoB,IAAIS,cAAclR,EAAKC,GAIhCuQ,UAAU9R,GACb,OAAOrP,KAAK4C,MAAM9J,KAAKsoB,IAAI3C,aAAepP,EAAIhV,QAG3C8mB,aACH,OAAOroB,KAAKsoB,IAAI3C,aAGb0C,gBAAgBxQ,EAAaC,GAGhC,OAAOD,GAFMC,EAAMD,GACH7X,KAAK2lB,aAIlB0C,UAAUW,EAAcC,GAC3B,OAAOjpB,KAAKsoB,IAAIY,UAAUF,EAAMC,GAG7BZ,YAAYjkB,GACf,OAAOpE,KAAKsoB,IAAIa,iBAAiB/kB,GAM9BikB,kBAAkB3W,GACrB,MAAM0X,EAAuB,GAC7B,IAAK,IAAI/rB,EAAI,EAAGA,EAAIqU,EAAGrU,IACnB+rB,EAAQ/rB,GAAKA,EAAI,EAErB,OAAO2C,KAAKsoB,IAAIa,iBAAiBC,GAG9Bf,SACH,MAAO,CACHG,KAAMxoB,KAAKwoB,KACXjmB,MAAOvC,KAAKsoB,IAAIe,YAKjBhB,aACH,MAAMxU,EAAK7T,KAAKwd,aAAa2K,GAC7B,IAAIrU,EAAK9T,KAAKwd,aAAa2K,GAI3B,OAHW,IAAPtU,IACAC,EAAK9T,KAAKwd,aAAa4K,IAEpB,CAACvU,EAAIC,GAITuU,iBACH,OAAOroB,KAAKwd,aAAawK,EAAApmB,QAAG0P,cAGzB+W,uBACH,OAAOroB,KAAKwd,aAAawK,EAAApmB,QAAG4P,mBAIzB6W,cAAciB,GACjB,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAE7B,MAAO,CACHtpB,KAAK+oB,cAAcQ,EAAKE,GACxBzpB,KAAK+oB,cAAcS,EAAKE,IAQzBrB,QAAWsB,GACd,GAAIA,EAAMpoB,QAAU,EAAI,OAAOooB,EAC/B,IACIC,EADAC,EAAeF,EAAMpoB,OAAS,EAE9BuoB,EAAsB,EAG1B,KAAO,IAAMD,GAGTC,EAAc9pB,KAAK+oB,cAAc,EAAGc,GAIpCD,EAAiBD,EAHjBE,GAAgB,GAIhBF,EAAME,GAAgBF,EAAMG,GAC5BH,EAAMG,GAAeF,EAGzB,OAAOD,GAxKfxsB,EAAAmgB,sJCZA,MAAAyM,EAAA9sB,EAAA,IACA+sB,EAAA/sB,EAAA,KACA+sB,EAAA/sB,EAAA,KAEA,MAAAgtB,EAAAhtB,EAAA,IACA+sB,EAAA/sB,EAAA,KAEA,MAAAitB,EAAAjtB,EAAA,IACA+sB,EAAA/sB,EAAA,KAEA8sB,EAAAI,UAAUC,YAAcH,EAAAG,YACxBL,EAAAI,UAAUE,UAAYH,EAAAG,6KCXtB,MAAArC,EAAAC,EAAAhrB,EAAA,IAIMwrB,EAHNxrB,EAAA,GAGYqgB,OAAOC,SAihCnB,SAAS+M,EAAU/T,GACfA,EAAIlM,QAAQvE,IACR,IAAKkgB,OAAOC,UAAUngB,GAAM,CACxB,MAAM8Y,EAAOC,KAAKC,UAAUvI,GAC5ByR,EAAApmB,QAAGK,IAAI,WAAY,YACf,0BAA4B2c,MA9/B/BzhB,EAAAotB,SAAgB,CAIzBlC,aAAamC,EAAIC,EAAI9sB,EAAG+sB,GAAU,GAC9BJ,EAAU,CAACE,EAAIC,IACf,MAAM9oB,EAAgB,GACtB,IAAK,IAAIsU,EAAIuU,EAAK7sB,EAAGsY,GAAKuU,EAAK7sB,EAAGsY,IAC9B,IAAK,IAAIC,EAAIuU,EAAK9sB,EAAGuY,GAAKuU,EAAK9sB,EAAGuY,IAC1BD,IAAMuU,GAAMtU,IAAMuU,GAClB9oB,EAAIiE,KAAK,CAACqQ,EAAGC,IAKzB,OADIwU,GAAU/oB,EAAIiE,KAAK,CAAC4kB,EAAIC,IACrB9oB,GAGX0mB,eAAemC,EAAIC,EAAI9sB,EAAG+sB,GAAU,GAChCJ,EAAU,CAACE,EAAIC,EAAI9sB,IACnB,MAAMgE,EAAgB,GACtB,IAAK,IAAIsU,EAAIuU,EAAK7sB,EAAGsY,GAAKuU,EAAK7sB,EAAGsY,IAC9B,IAAK,IAAIC,EAAIuU,EAAK9sB,EAAGuY,GAAKuU,EAAK9sB,EAAGuY,IAC1BD,IAAMuU,GAAMtU,IAAMuU,GACdxU,IAAMuU,GAAMtU,IAAMuU,GAClB9oB,EAAIiE,KAAK,CAACqQ,EAAGC,IAM7B,OADIwU,GAAU/oB,EAAIiE,KAAK,CAAC4kB,EAAIC,IACrB9oB,GAIX0mB,aAAamC,EAAIC,EAAI9sB,EAAG+sB,GAAU,GAC9BJ,EAAU,CAACE,EAAIC,EAAI9sB,IACnB,MAAMgE,EAAgB,GACtB,IAAK,IAAIsU,EAAIuU,EAAK7sB,EAAGsY,GAAKuU,EAAK7sB,EAAGsY,IAC9B,IAAK,IAAIC,EAAIuU,EAAK9sB,EAAGuY,GAAKuU,EAAK9sB,EAAGuY,IAAK,CACnC,MACMpC,EAAKoC,EAAIuU,EACJ,IAFAxU,EAAIuU,GAEQ,IAAP1W,GACZnS,EAAIiE,KAAK,CAACqQ,EAAGC,IAKzB,OADIwU,GAAU/oB,EAAIiE,KAAK,CAAC4kB,EAAIC,IACrB9oB,GAGX0mB,iBAAiBmC,EAAIC,EAAI9sB,EAAG+sB,GAAU,GAClCJ,EAAU,CAACE,EAAIC,EAAI9sB,IACnB,MAAMgE,EAAgB,GACtB,IAAK,IAAIsU,EAAIuU,EAAK7sB,EAAGsY,GAAKuU,EAAK7sB,EAAGsY,IAC9B,IAAK,IAAIC,EAAIuU,EAAK9sB,EAAGuY,GAAKuU,EAAK9sB,EAAGuY,IAC1BD,IAAMuU,GAAMtU,IAAMuU,GACdxU,IAAMuU,GAAMtU,IAAMuU,GAClB9oB,EAAIiE,KAAK,CAACqQ,EAAGC,IAM7B,OADIwU,GAAU/oB,EAAIiE,KAAK,CAAC4kB,EAAIC,IACrB9oB,GAKX0mB,OAAOmC,EAAIC,EAAIE,EAAMC,GACjBN,EAAU,CAACE,EAAIC,EAAIE,EAAMC,IACzB,MAAMjpB,EAAgB,GACtB,IAAK,IAAIsU,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACxB,IAAK,IAAIC,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACxBvU,EAAIiE,KAAK,CAACqQ,EAAGC,IAGrB,OAAOvU,GAIXkpB,YAAYvB,GACJA,EAAKpqB,eAAe,OACb,CACHqqB,IAAMD,EAAiBwB,IACvBtB,IAAMF,EAAiByB,IACvBtB,IAAMH,EAAiB0B,IACvBtB,IAAMJ,EAAiB2B,KAInB3B,EAIhBjB,aAAaiB,GACT,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAC7B,OAAOtpB,KAAKkrB,OAAO3B,EAAKC,EAAKC,EAAKC,IAGtCrB,iBAAiBiB,GACb,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAC7B,OAAOtpB,KAAKmrB,aAAa5B,EAAKC,EAAKC,EAAKC,IAG5CrB,eAAejE,EAAgBkF,GAC3B,MAAM8B,EAAQprB,KAAKqrB,aAAa/B,GAC1B7gB,EAAS,GAIf,OAHA2iB,EAAM/gB,QAASihB,IACX7iB,EAAO7C,KAAKwe,EAAMkH,EAAG,IAAIA,EAAG,OAEzB7iB,GAGX4f,SAASpS,EAAWC,EAAWoT,GAC3B,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAC7B,OAAOrT,GAAKsT,GAAOtT,GAAKwT,GAAOvT,GAAKsT,GAAOtT,GAAKwT,GAGpDrB,YAAYiB,GACR,IAAKA,EAAO,OAAO,EACnB,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAC7B,OAAQtB,EAAApmB,QAAG6D,cAAc,CAAC8jB,EAAKC,EAAKC,EAAKC,KAI7CrB,UAAUpR,EAAcC,EAAc5D,GAClC,MAAMiY,EAAUrkB,KAAK4B,MAAMmO,EAAO,GAC5BuU,EAAUtkB,KAAK4B,MAAMoO,EAAO,GAC5BuU,EAAcF,EAAdE,EAA4BD,EAA5BC,EACG,EAAIF,EAAU,EADjBE,EACyB,EAAID,EAAU,EACvC5X,EAAOoU,EAAApmB,QAAGyR,UAAUC,GAC1B,OAAIM,EACO,CACH2V,IAAKkC,EAAY7X,EAAK,GAAK2X,EAC3B/B,IAAKiC,EAAY7X,EAAK,GAAK4X,EAC3B/B,IAAKgC,EAAY7X,EAAK,GAAK2X,EAC3B7B,IAAK+B,EAAY7X,EAAK,GAAK4X,IAI/BxD,EAAApmB,QAAGK,IAAI,WAAY,2BAA4BqR,YAE5C,OAMX+U,sBAAsBqD,EAAUC,GAC9B,MAAOnB,EAAIC,GAAM,CAACiB,EAAG/P,OAAQ+P,EAAG1P,SACzB4P,EAAIC,GAAM,CAACF,EAAGhQ,OAAQgQ,EAAG3P,QAKhC,MAAO,CAACuN,IAJIiB,GAAMoB,EAAKpB,EAAKoB,EAIfpC,IAFDiB,GAAMoB,EAAKpB,EAAKoB,EAEVpC,IAHNmC,EAAKpB,EAAKoB,EAAKpB,EAGJd,IADXmC,EAAKpB,EAAKoB,EAAKpB,IAM7BpC,aAAamC,EAAIC,EAAIE,EAAMC,GACvBN,EAAU,CAACE,EAAIC,EAAIE,EAAMC,IACzB,MAAMjpB,EAAM,GACZ,IAAK,IAAIsU,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACxB,IAAK,IAAIC,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACnBA,IAAMuU,GAAMvU,IAAM0U,GAAQ3U,IAAMuU,GAAMvU,IAAM0U,GAC7ChpB,EAAIiE,KAAK,CAACqQ,EAAGC,IAIzB,OAAOvU,GAGX0mB,iBAAiBmC,EAAYC,EAAYqB,GACrCxB,EAAU,CAACE,EAAIC,EAAIqB,IACnB,MAAMC,EAASvB,EAAK,EAAIsB,EAClBE,EAAOxB,EAAKsB,EACZG,EAAQxB,EAAKqB,EACbI,EAAOzB,EAAKqB,EAEZV,EAAkB,CAAC,CAACZ,EAAIC,IACxB0B,EAAU,CACZza,EAAG,CAACsa,EAAMC,GACVta,EAAG,CAACqa,EAAME,GACVta,EAAG,CAACma,EAAQtB,GACZ5Y,EAAG,CAAC2Y,EAAIC,GACRW,MAAO,IAGX,IAAK,IAAInV,EAAIuU,EAAK,EAAGvU,GAAK+V,EAAM/V,IAAK,CAEjC,IAAK,IAAIC,EAAIuU,EAAK,EAAGvU,GAAK+V,EAAO/V,IAC7BkV,EAAMxlB,KAAK,CAACqQ,EAAGC,IAGnB,IAAK,IAAIA,EAAIuU,EAAK,EAAGvU,GAAKgW,EAAMhW,IAC5BkV,EAAMxlB,KAAK,CAACqQ,EAAGC,IAKvB,IAAK,IAAID,EAAI+V,EAAO,EAAG/V,GAAK8V,EAAQ9V,IAAK,CAErC,IAAK,IAAIC,EAAIuU,EAAK,EAAGvU,GAAK+V,EAAO/V,IAC7BkV,EAAMxlB,KAAK,CAACqQ,EAAGC,IAGnB,IAAK,IAAIA,EAAIuU,EAAK,EAAGvU,GAAKgW,EAAMhW,IAC5BkV,EAAMxlB,KAAK,CAACqQ,EAAGC,IAIvB,OADAiW,EAAQf,MAAQA,EACTe,GAKXC,SAAQ,CAACnW,EAAGC,EAAGqT,EAAKC,EAAKC,EAAKC,KACtBzT,IAAMsT,GAAOtT,IAAMwT,KACZvT,IAAMsT,GAAOtT,IAAMwT,GAOlCrB,eAAegE,EAAUC,GACrB,IAAIC,EAAS,EAuBb,OAtBIhZ,MAAMC,QAAQ6Y,GACdC,EAAYjiB,QAAQihB,IAChB,MAAMpM,EAAQmN,EAASG,UAAUC,GAC7BA,EAAO,KAAOnB,EAAG,IAAMmB,EAAO,KAAOnB,EAAG,IAGxCpM,GAAS,IACTmN,EAASK,OAAOxN,EAAO,KACrBqN,KAMVD,EAAYjiB,QAAQihB,IAChB,MAAM1sB,EAAM0sB,EAAG,GAAK,IAAMA,EAAG,GACzBe,EAASntB,eAAeN,YACjBytB,EAASztB,KACd2tB,KAIPA,GAQXlE,WAAWsE,EAAWC,EAAiBC,GACrC,MAAM5W,EAACA,EAACC,EAAEA,GAAK2W,EACf,IAAIC,EAAQ7W,EACR8W,EAAQ7W,EACZ,GAAI2W,EAAKG,UACPJ,EAAOviB,QAAQ0N,IACb/X,KAAKitB,YAAYN,EAAI5U,EAAO+U,EAAOC,GACnCA,GAAShV,EAAMyL,SAAStM,YAGvB,GAAI2V,EAAKK,QAAS,CACrB,MAAMlB,EAAO9kB,KAAK4B,MAAM6jB,EAAGnJ,SAASvM,KAAO,GAC3C2V,EAAOviB,QAAQ0N,IACb+U,EAAQd,EAAO9kB,KAAK4B,MAAMiP,EAAMyL,SAASvM,KAAO,GAChDjX,KAAKitB,YAAYN,EAAI5U,EAAO+U,EAAOC,GACnCA,GAAShV,EAAMyL,SAAStM,YAGvB,GAAI2V,EAAKM,QAAS,CACrB,MAAMC,EAAOlmB,KAAK4B,MAAM6jB,EAAGnJ,SAAStM,KAAO,GAC3C0V,EAAOviB,QAAQ0N,IACbgV,EAAQK,EAAOlmB,KAAK4B,MAAMiP,EAAMyL,SAAStM,KAAO,GAChDlX,KAAKitB,YAAYN,EAAI5U,EAAO+U,EAAOC,GACnCD,GAAS/U,EAAMyL,SAASvM,SAQ9BoR,YAAYsE,EAAWU,EAAWC,EAAQC,GACtC,MAAMC,EAAKb,EAAGnJ,SACRiK,EAAKJ,EAAG7J,SAIRkK,EAFaf,EAAGriB,YAAY/I,OACf8rB,EAAG/iB,YAAY/I,OAI5BoC,EAAS0pB,EAAG/iB,YAAYwe,QACxBllB,EAAQypB,EAAG3S,WAAWoO,QACtBpoB,EAAW2sB,EAAGM,cAAc7E,QAY5B8E,GAX4B,IAAlBjqB,EAAOpC,QAAiC,IAAjBqC,EAAMrC,QACzCb,EAASa,OAUIO,GAAQ,CAACA,EAAK6Z,OAAS2R,EAAQxrB,EAAKka,OAASuR,IAC9D5pB,EAAO0G,QAAQJ,IACX,MAAOgM,EAAGC,GAAK0X,EAAS3jB,GACpBujB,EAAGK,MAAM5X,EAAGC,IACRmX,EAAGS,YAAY7jB,IACf0iB,EAAGoB,SAAS9jB,EAAOgM,EAAGC,KAKlCtS,EAAMyG,QAAQvD,IACV,MAAO0jB,EAAIC,GAAM,CAAC3jB,EAAK6U,OAAQ7U,EAAKkV,SAC7B/F,EAAGC,GAAK0X,EAAS9mB,GACpB0mB,EAAGK,MAAM5X,EAAGC,IACRmX,EAAGvS,WAAWhU,EAAM0jB,EAAIC,IACxBkC,EAAGqB,QAAQlnB,EAAMmP,EAAGC,KAKhCxV,EAAS2J,QAAQ4jB,IACb,MAAOzD,EAAIC,GAAM,CAACwD,EAAKtS,OAAQsS,EAAKjS,SAC7B/F,EAAGC,GAAK0X,EAASK,GACpBT,EAAGK,MAAM5X,EAAGC,IACRmX,EAAGa,cAAcD,EAAMzD,EAAIC,IAC3BkC,EAAGwB,WAAWF,EAAMhY,EAAGC,KAKnClW,KAAKouB,kBAAkBZ,EAAIC,EAAIH,EAAQC,GAEvC,MAAMc,EAAgB1B,EAAGriB,YAAY/I,OACjC8sB,IAAkBX,GAClB1F,EAAApmB,QAAGK,IAAI,WAAY,iCACIosB,WAAuBX,MAKtDrF,kBAAkBmF,EAAIC,EAAIH,EAAQC,GAC9B,GAAIC,EAAGvW,KAAOwW,EAAGxW,KAAM,CACnB,MAAMqX,SAAad,EAAGvW,YAAYwW,EAAGxW,OACrC+Q,EAAApmB,QAAGK,IAAI,WAAY,oBACf,wCAA0CqsB,GAElD,GAAId,EAAGtW,KAAOuW,EAAGvW,KAAM,CACnB,MAAMoX,SAAad,EAAGtW,YAAYuW,EAAGvW,OACrC8Q,EAAApmB,QAAGK,IAAI,WAAY,oBACf,wCAA0CqsB,GAElD,MAAMC,EAAOjB,EAASG,EAAGxW,KAAO,EAC1BuX,EAAOjB,EAASE,EAAGvW,KAAO,EAChC,IAAK,IAAIjB,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,IAAK,IAAIC,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,GAAIsX,EAAGK,MAAM5X,EAAGC,GAAI,CAChB,MAAMpW,EAAO2tB,EAAGgB,QAAQxY,EAAIqX,EAAQpX,EAAIqX,GACxCC,EAAGxJ,KAAK/N,GAAGC,GAAGwY,YAAY5uB,EAAKS,iBAM/C8nB,oBAAoBmF,EAAIC,EAAIH,EAAQC,GAChC,MAAMgB,EAAOjB,EAASG,EAAGxW,KAAO,EAC1BuX,EAAOjB,EAASE,EAAGvW,KAAO,EAChC,IAAK,IAAIjB,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,IAAK,IAAIC,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,GAAIsX,EAAGK,MAAM5X,EAAGC,GAAI,CAChB,MAAMpW,EAAO2tB,EAAGgB,QAAQxY,EAAIqX,EAAQpX,EAAIqX,GACnCztB,GACDkoB,EAAApmB,QAAGK,IAAI,WAAY,oCACDqrB,KAAUC,OAAYtX,MAAMC,MAElDsX,EAAGmB,eAAe1Y,EAAGC,EAAGpW,KAMxCuoB,UAAUmF,EAAIC,EAAIH,EAAQC,EAAQqB,EAAU,EAACjD,EAAIkD,KAAO,IACpD,MAAMN,EAAOjB,EAASG,EAAGxW,KAAO,EAC1BuX,EAAOjB,EAASE,EAAGvW,KAAO,EAChC,IAAK,IAAIjB,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,IAAK,IAAIC,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,GAAIsX,EAAGK,MAAM5X,EAAGC,GAAI,CAChB,MAAM4Y,EAAQrB,EAAGgB,QAAQxY,EAAIqX,EAAQpX,EAAIqX,GACnCwB,EAAQvB,EAAGxJ,KAAK/N,GAAGC,GACrB0Y,EAAQG,EAAOD,IACfC,EAAML,YAAYI,EAAMvuB,iBAU5C8nB,mBAAmBhT,EAAKiU,EAAM0F,GAC1B,IAAK,IAAI/Y,EAAIqT,EAAKC,IAAKtT,GAAKqT,EAAKG,IAAKxT,IAClC,IAAK,IAAIC,EAAIoT,EAAKE,IAAKtT,GAAKoT,EAAKI,IAAKxT,IAC9Bb,EAAIwY,MAAM5X,EAAGC,IACb8Y,EAAG/Y,EAAGC,IAMtBmS,aAAasE,EAAW5qB,EAAMunB,EAAM2F,GAChC,OAAQltB,GACJ,KAAKimB,EAAApmB,QAAGiL,WACJ7M,KAAKkvB,aAAavC,EAAI5qB,EAAMunB,EAAM2F,GAClC,MACJ,KAAKjH,EAAApmB,QAAGmL,UACJ/M,KAAKmvB,YAAYxC,EAAI5qB,EAAMunB,EAAM2F,GACjC,MACJ,KAAKjH,EAAApmB,QAAGkL,UACJ9M,KAAKovB,eAAezC,EAAI5qB,EAAMunB,GAC9B,MACJ,QAAStB,EAAApmB,QAAGK,IAAI,WAAY,0BACbF,iBAMvBsmB,eAAesE,EAAI0C,EAAU/F,GACzB,MAAMkE,EAAKb,EAAGnJ,SACdxjB,KAAKsvB,mBAAmB9B,EAAIlE,EAAM,CAACrT,EAAGC,KAClC,MAAM+X,EAAOjG,EAAApmB,QAAG2tB,KAAKC,cAAcH,GAC/BA,EAASI,MAAM,gBACfjC,EAAGxJ,KAAK/N,GAAGC,GAAGwY,YAAYT,GAG1BT,EAAGxJ,KAAK/N,GAAGC,GAAGwZ,QAAQ,WAAYzB,MAO9C5F,aAAasE,EAAWgD,EAAWrG,EAAM2F,GACrC,MAAMzB,EAAKb,EAAGnJ,SACdxjB,KAAKsvB,mBAAmB9B,EAAIlE,EAAM,CAACrT,EAAGC,KAClC,GAAIsX,EAAGiB,QAAQxY,EAAGC,GAAG0Z,SAAU,CAC3B,MAAM3lB,EAAQglB,EAAOY,gBAAgB7H,EAAApmB,QAAGiL,WACpC8iB,GACJhD,EAAGoB,SAAS9jB,EAAOgM,EAAGC,OAOlCmS,YAAYsE,EAAWmD,EAAUxG,EAAM2F,GACnC,MAAMzB,EAAKb,EAAGnJ,SACdxjB,KAAKsvB,mBAAmB9B,EAAIlE,EAAM,CAACrT,EAAGC,KAClC,GAAIsX,EAAGiB,QAAQxY,EAAGC,GAAG0Z,SAAU,CAC3B,MAAM9oB,EAAOmoB,EAAOY,gBAAgB7H,EAAApmB,QAAGmL,UAAW+iB,GAClDnD,EAAGqB,QAAQlnB,EAAMmP,EAAGC,OAShCmS,YAAY0H,EAAqBC,EAAMC,EAAMxnB,GACzC,IAAI8B,GAAQ,EACZ,MAAM2lB,EAAOH,EAAUjH,QACjBqH,EAAW,GAKjB,IAJAJ,EAAU1lB,QAAQihB,IACd6E,EAAS7E,EAAG,GAAK,IAAMA,EAAG,IAAMA,KAG5B/gB,GAAS2lB,EAAK3uB,OAAS,GAAG,CAC9B,MAAM2d,EAAQuJ,EAAIM,cAAc,EAAGmH,EAAK3uB,OAAS,GAG3CipB,EAAK0F,EAAKhR,GAAO,GACjBuL,EAAKyF,EAAKhR,GAAO,GACvB,IAAIkR,GAAS,EAEb,IAAK,IAAIna,EAAIuU,EAAIvU,EAAIuU,EAAKwF,EAAM/Z,IAC5B,IAAK,IAAIC,EAAIuU,EAAIvU,EAAIuU,EAAKwF,EAAM/Z,IACxBia,EAASla,EAAI,IAAMC,GACnBzN,EAAO7C,KAAK,CAACqQ,EAAGC,IAGhBka,GAAS,GAIrB7lB,EAAQ6lB,KAGJ3nB,EAAS,GACTynB,EAAKxD,OAAOxN,IAGpB,OAAO3U,GAGX8lB,OAAM,CAAC7F,EAAIC,EAAImB,EAAIC,IACArB,IAAOoB,GAAMnB,IAAOoB,GAC5B3kB,KAAKiR,IAAIyT,EAAKpB,KAAQtjB,KAAKiR,IAAI0T,EAAKpB,GAI/CpC,SAAS+C,GACL,IAAK,IAAI/tB,EAAI,EAAGA,EAAI+tB,EAAM7pB,OAAQlE,IAAK,CACnC,MAAOizB,EAAKC,GAAO,CAACnF,EAAM/tB,GAAI+tB,EAAM/tB,EAAI,KACjCmtB,EAAIC,GAAM6F,GACV1E,EAAIC,GAAM0E,EACjB,IAAKvwB,KAAKqwB,OAAO7F,EAAIC,EAAImB,EAAIC,GACzB,OAAO,EAGf,OAAO,GAKXxD,SAAS+C,GACL,IAAK,IAAI/tB,EAAI,EAAGA,EAAI+tB,EAAM7pB,OAAQlE,IAAK,CACnC,MAAOizB,EAAKC,GAAO,CAACnF,EAAM/tB,GAAI+tB,EAAM/tB,EAAI,KACjCmtB,EAAIC,GAAM6F,GACV1E,EAAIC,GAAM0E,EACjB,GAAI/F,IAAOoB,GAAMnB,IAAOoB,EACpB,OAAO,EAGf,OAAO,GAMXxD,gBAAgBmC,EAAIC,EAAImB,EAAIC,EAAI2E,GAAU,GACtC,GAAIxwB,KAAKqwB,OAAO7F,EAAIC,EAAImB,EAAIC,GAAK,CAC7B,MAAMlqB,EAAM,GACNkS,EAAK+X,IAAOpB,EAAK,GAAKoB,EAAKpB,GAAMtjB,KAAKiR,IAAIyT,EAAKpB,GAC/C1W,EAAK+X,IAAOpB,EAAK,GAAKoB,EAAKpB,GAAMvjB,KAAKiR,IAAI0T,EAAKpB,GAErD,IADI+F,GAAU7uB,EAAIiE,KAAK,CAAC4kB,EAAIC,IACrBD,IAAOoB,GAAMnB,IAAOoB,GACnBrB,IAAOoB,IAAKpB,GAAM3W,GAClB4W,IAAOoB,IAAKpB,GAAM3W,GAElB0W,IAAOoB,GAAMnB,IAAOoB,EAChB2E,GACA7uB,EAAIiE,KAAK,CAAC4kB,EAAIC,IAIlB9oB,EAAIiE,KAAK,CAAC4kB,EAAIC,IAGtB,OAAO9oB,EAEX,MAAO,IASX0mB,aAAauD,EAAIC,EAAI4E,EAAIC,GACrB,IAAKC,EAAIC,EAAIvzB,EAAGunB,GAAK,CAAC,EAAG,EAAG,EAAG,IAC1BiM,EAAMC,EAAMC,EAAMC,GAAQ,CAAC,EAAG,EAAG,EAAG,IACpC/a,EAAGC,GAAK,CAAC,EAAG,GACjB,MAAM+a,EAAW,GAejB,IAbAN,EAAKF,EAAK7E,GAGD,IAAI+E,GAAMA,IAFnBC,EAAKF,EAAK7E,GAGD,IAAI+E,GAAMA,GACnBC,EAAO,EACHJ,EAAK7E,IAAKiF,GAAQ,GACtBC,EAAO,EACHJ,EAAK7E,IAAKiF,GAAQ,GACtB7a,EAAI2V,EACJ1V,EAAI2V,EACJoF,EAASrrB,KAAK,CAACqQ,EAAGC,IAEdya,EAAKC,EAIL,IAHAhM,EAAI,EAAIgM,EAAKD,EACbI,EAAO,GAAKH,EAAKD,GACjBK,EAAO,EAAIJ,EACNvzB,EAAI,EAAGA,EAAIszB,EAAItzB,IACZunB,GAAK,GACL1O,GAAK4a,EACLlM,GAAKmM,GAEHnM,GAAKoM,EACX/a,GAAK4a,EACLI,EAASrrB,KAAK,CAACqQ,EAAGC,SAOtB,IAHA0O,EAAI,EAAI+L,EAAKC,EACbG,EAAO,GAAMJ,EAAKC,GAClBI,EAAO,EAAIL,EACNtzB,EAAI,EAAGA,EAAIuzB,EAAIvzB,IACZunB,GAAK,GACL3O,GAAK4a,EACLjM,GAAKmM,GAEHnM,GAAKoM,EACX9a,GAAK4a,EACLG,EAASrrB,KAAK,CAACqQ,EAAGC,IAG1B,OAAO+a,GAKX5I,eAAemC,EAAIC,EAAImB,EAAIC,EAAI2E,GAAU,GACrC,IAAI7uB,EAAM,GACV,GAAI3B,KAAKqwB,OAAO7F,EAAIC,EAAImB,EAAIC,GACxBlqB,EAAM3B,KAAKkxB,gBAAgB1G,EAAIC,EAAImB,EAAIC,EAAI2E,OAE1C,CACGA,GAAU7uB,EAAIiE,KAAK,CAAC4kB,EAAIC,IAC5B,MAAM5W,EAAK+X,EAAKpB,EACV1W,EAAK+X,EAAKpB,EACV0G,EAAQjqB,KAAKiR,IAAItE,GACjBud,EAAQlqB,KAAKiR,IAAIrE,GAEjBud,EAAOxd,EAAKsd,EACZG,EAAOxd,EAAKsd,EAElB,IAAIG,EAAQJ,EACRK,EAAQJ,EACRtE,EAAQtC,EACRuC,EAAQtC,EAEZ,GAAI0G,EAAQC,EAAO,CAIf,KAAOI,GAAS,GAAMD,EAAQC,GAAU,GACpC1E,GAASuE,EACTtE,GAASuE,EACT3vB,EAAIiE,KAAK,CAACknB,EAAOC,IACjBwE,GAAS,EACTC,GAAS,EAGb,GAAc,IAAVA,EACA,KAAO1E,IAAUlB,GACbkB,GAASuE,EACT1vB,EAAIiE,KAAK,CAACknB,EAAOC,QAGpB,CACD,MAAMzV,EAAQia,EAAQC,EACtB,KAAO1E,IAAUlB,GAAMmB,IAAUlB,GAAI,CAC7BkB,IAAUlB,IACVkB,GAASuE,GAEb,IAAK,IAAIj0B,EAAI,EAAGA,EAAIia,EAAOja,IACnByvB,IAAUlB,IACVkB,GAASuE,EACT1vB,EAAIiE,KAAK,CAACknB,EAAOC,YAOhC,GAAIqE,EAAQD,EAAO,CAIpB,KAAOI,GAAS,GAAMC,EAAQD,GAAU,GACpCzE,GAASuE,EACTtE,GAASuE,EACT3vB,EAAIiE,KAAK,CAACknB,EAAOC,IACjBwE,GAAS,EACTC,GAAS,EAGb,GAAc,IAAVD,EACA,KAAOxE,IAAUlB,GACbkB,GAASuE,EACT3vB,EAAIiE,KAAK,CAACknB,EAAOC,QAGpB,CACD,MAAMzV,EAAQka,EAAQD,EACtB,KAAOzE,IAAUlB,GAAMmB,IAAUlB,GAAI,CAC7BiB,IAAUlB,IACVkB,GAASuE,GAEb,IAAK,IAAIh0B,EAAI,EAAGA,EAAIia,EAAOja,IACnB0vB,IAAUlB,IACVkB,GAASuE,EACT3vB,EAAIiE,KAAK,CAACknB,EAAOC,QAQzC,OAAOprB,IAkCfxE,EAAAotB,SAASkH,UAAY,SAASpc,EAAKvV,EAAMiC,EAAM6C,GAAO,GAClD,IAAIoa,EAAajd,EAIjB,GAHoB,iBAATA,IACPid,EAAathB,IAAKA,EAAE6C,cAAcC,YAAcuB,KAE/Cid,EAAWlf,GAAQ,MAAO,GAE/B,IAAI4xB,EAAW5xB,EACf,MAAM6xB,EAAY,GACZlpB,EAAS,CAAC3I,GACV8xB,EAAU,GAChBA,EAAQ9xB,EAAK+xB,aAAc,EAG3B,MAAMC,EAAe,SAAS7b,EAAGC,GAC7B,GAAIb,EAAIwY,MAAM5X,EAAGC,KACR0b,EAAQ3b,EAAI,IAAMC,GAAI,CACvB,MAAM6b,EAAY1c,EAAIoZ,QAAQxY,EAAGC,GAC7B8I,EAAW+S,KACXH,EAAQG,EAAUF,aAAc,EAChCppB,EAAO7C,KAAKmsB,GACZJ,EAAU/rB,KAAKmsB,MAM/B,KAAOL,GAAU,CACb,MAAOzb,EAAGC,GAAKwb,EAAS9V,QAElBoW,EAAQ/b,EAAI,EAClB6b,EAAaE,EAAO9b,GAGpB,MAAM+b,EAAQhc,EAAI,EAClB6b,EAAaG,EAAO/b,GAGpB,MAAMgc,EAAShc,EAAI,EACnB4b,EAAa7b,EAAGic,GAGhB,MAAMC,EAASjc,EAAI,EACnB4b,EAAa7b,EAAGkc,GAGZvtB,IACAktB,EAAaE,EAAOE,GACpBJ,EAAaG,EAAOC,GACpBJ,EAAaE,EAAOG,GACpBL,EAAaG,EAAOE,IAGxBT,EAAWC,EAAUS,QAEzB,OAAO3pB,GAQXtL,EAAAotB,SAAS8H,YAAc,SACnBhd,EAAciW,EAAYhtB,EAAYg0B,GAAM,EAAO1tB,GAAO,GAE1D,MAAOqR,EAAGC,GAAKoV,EACf,GAAIjW,EAAIY,GAAGC,KAAO5X,EAAQ,MAAO,GAEjC,IAAIi0B,EAASjH,EACb,MAAMkH,EAAS,GACT/pB,EAAS,CAAC8pB,GACVX,EAAU,GAChBA,EAAQ3b,EAAI,IAAMC,IAAK,EAGvB,MAAMuc,EAAa,SAASC,EAAIC,GAC5B,GAAID,GAAM,GAAKA,EAAKrd,EAAI9T,QAAUoxB,GAAM,GAAKA,EAAKtd,EAAI,GAAG9T,SAChDqwB,EAAQc,EAAK,IAAMC,GAAK,CACPtd,EAAIqd,GAAIC,KACRr0B,IACdszB,EAAQc,EAAK,IAAMC,IAAM,EACzBlqB,EAAO7C,KAAK,CAAC8sB,EAAIC,IACbL,IAAMA,EAAII,EAAK,IAAMC,IAAM,GAC/BH,EAAO5sB,KAAK,CAAC8sB,EAAIC,OAMjC,KAAOJ,GAAQ,CACX,MAAOK,EAAIC,GAAMN,EAEXP,EAAQY,EAAK,EACnBH,EAAWT,EAAOa,GAGlB,MAAMZ,EAAQW,EAAK,EACnBH,EAAWR,EAAOY,GAGlB,MAAMX,EAASW,EAAK,EACpBJ,EAAWG,EAAIV,GAGf,MAAMC,EAASU,EAAK,EACpBJ,EAAWG,EAAIT,GAGXvtB,IACA6tB,EAAWT,EAAOE,GAClBO,EAAWR,EAAOC,GAClBO,EAAWT,EAAOG,GAClBM,EAAWR,EAAOE,IAGtBI,EAASC,EAAOJ,QAEpB,OAAO3pB,GAKXtL,EAAAotB,SAASuI,cAAgB,SAASvc,GAC9B,IAAIN,EAAI,EACJC,EAAI,EACR,IAAK,IAAI7Y,EAAI,EAAGA,EAAIkZ,EAAIhV,OAAQlE,IAC5B4Y,GAAKM,EAAIlZ,GAAG,GACZ6Y,GAAKK,EAAIlZ,GAAG,GAEhB,MAAO,CACH6J,KAAK4B,MAAMmN,EAAIM,EAAIhV,QACnB2F,KAAK4B,MAAMoN,EAAIK,EAAIhV,UAK3BpE,EAAAotB,SAASwI,WAAa,SAAS1d,EAAKvV,EAAMiC,EAAM6R,GAC5C,MAAO2a,EAAMC,GAAQ1uB,EAAK8b,SACnB/H,EAAIC,GAAMF,EACN,IAAPC,GAAmB,IAAPC,GACZkU,EAAApmB,QAAGK,IAAI,WAAY,2CACe2R,KAEtC,IAAIof,GAAS,EACTvqB,EAAS,CAAC3I,GACV4xB,EAAW5xB,EAGf,MAAQkzB,GAAQ,CACZ,MAAMlqB,EAAQ,IACPmqB,EAAIC,GAAMxB,EAAS9V,SACnBuX,EAAIC,GAAM,CAACH,EAAKpf,EAAIqf,EAAKpf,GAChC,GAAIuB,EAAIwY,MAAMsF,EAAIC,GAAK,CACnB,MAAMC,EAAUhe,EAAIoZ,QAAQ0E,EAAIC,GAEhC,GAAIC,EAAQ9yB,cAAcC,YAAcuB,EAAM,CAC1CixB,GAAS,EACT,MAEJlqB,EAAMlD,KAAKytB,GAGX,IAAIpd,EAAIkd,EACR,EAAG,CACCld,IAAMpC,EACN,MAAMyf,EAAQje,EAAIoZ,QAAQxY,EAAGmd,GAC7B,GAAIE,EAAM/yB,cAAcC,YAAcuB,EAAM,CACxCixB,GAAS,EACT,MAEJlqB,EAAMlD,KAAK0tB,SAENrd,IAAMsY,GAGf,IAAIrY,EAAIkd,EACR,EAAG,CACCld,IAAMpC,EACN,MAAMyf,EAAQle,EAAIoZ,QAAQ0E,EAAIjd,GAC9B,GAAIqd,EAAMhzB,cAAcC,YAAcuB,EAAM,CACxCixB,GAAS,EACT,MAEJlqB,EAAMlD,KAAK2tB,SAENrd,IAAMsY,GAEVwE,IACDvqB,EAASA,EAAO4I,OAAOvI,IAI3B4oB,EAAW2B,GAInB,OAAO5qB,GAGXtL,EAAAotB,SAASiJ,cAAgB,SAAS7J,GAC9B,MAAM8J,EAAO,GAKb,OAJA9J,EAAMtf,QAAQ/L,IACNm1B,EAAKn1B,GAASm1B,EAAKn1B,IAAU,EAC3Bm1B,EAAKn1B,GAAS,IAEjBm1B,GAMXt2B,EAAAotB,SAASmJ,cAAgB,SAASlJ,EAAIC,EAAImB,EAAIC,EAAI8H,EAAKvI,GACnD,MAAMvX,EAAK3M,KAAKiR,IAAIqS,EAAKoB,GACnB9X,EAAK5M,KAAKiR,IAAIsS,EAAKoB,GAEnB+H,EAAOpJ,EAAKoB,EAAKpB,EAAKoB,EACtBjB,EAAOH,EAAKoB,EAAKpB,EAAKoB,EACtBiI,EAAOpJ,EAAKoB,EAAKpB,EAAKoB,EACtBjB,EAAOH,EAAKoB,EAAKpB,EAAKoB,EAE5B,GAAIhY,GAAM8f,GAAO7f,GAAM6f,EAAK,CACxB,MAAMR,EAAK1K,EAAIM,cAAc6K,EAAMjJ,GAC7ByI,EAAK3K,EAAIM,cAAc8K,EAAMjJ,GACnCztB,EAAAotB,SAASmJ,cAAclJ,EAAIC,EAAI0I,EAAIC,EAAIO,EAAKvI,GAC5CjuB,EAAAotB,SAASmJ,cAAcP,EAAIC,EAAIxH,EAAIC,EAAI8H,EAAKvI,OAE3C,CACiBjuB,EAAAotB,SAASuJ,aAAatJ,EAAIC,EAAImB,EAAIC,GAC1CxhB,QAAQihB,IACdF,EAAMxlB,KAAK0lB,OAUvBnuB,EAAAotB,SAASwJ,gBAAkB,SAASvJ,EAAIC,EAAImB,EAAIC,EAAIgB,GAChD,IAAIlrB,EAAgB,GACpB,MAAMsvB,EAAqB,GAC3B9zB,EAAAotB,SAASmJ,cAAclJ,EAAIC,EAAImB,EAAIC,EAAI,EAAGoF,GAE1C,IAAI+C,EAAY72B,EAAAotB,SAAS0J,iBAUzB,OATIpH,GAA8B,mBAAfA,EAAKqH,QACpBF,EAAYnH,EAAKqH,OAErBjD,EAAS5mB,QAASihB,IACd,MAAOrV,EAAGC,GAAKoV,EACT6I,EAAI1L,EAAIM,cAAc,EAAG,GACzBqC,EAAQ4I,EAAU/d,EAAGC,EAAGie,GAAG,GACjCxyB,EAAMA,EAAI0P,OAAO+Z,KAEdzpB,+UCjhCX,MAAAqmB,EAAAC,EAAAhrB,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAEAo3B,EAAAp3B,EAAA,GACAogB,EAAApgB,EAAA,GAGMkH,EADMlH,EAAQ,EACNq3B,CAAI,eACZvN,EAAOsN,EAAArN,UAAUC,UASvB9pB,EAAAo3B,WAAA,MAOWlM,oBAAoBhhB,EAAKmtB,EAAOC,EAAM,GACzC,GAAIptB,EAAI6B,IAAI,UAAW,CACnB,MAAMkd,EAAO,IAAI+D,EAAUuK,UAC3BtO,EAAKuO,SAASH,GACdpO,EAAKwO,UAAUH,GACfptB,EAAIiZ,IAAI8F,IAKTiC,4BAA4BjC,EAAMR,EAAKpK,GAC1C,MAAMqZ,EAAYzO,EAAKzf,QAEvB,GAAIkuB,EAAU31B,eAAe,YAAa,CACtC,MAAM41B,EAAUD,EAAUE,eACpBC,EAAa,IAAI7K,EAAU8K,WACjCD,EAAWE,UAAUL,EAAWC,GAChClP,EAAItF,IAAI0U,GAKZ,GAAIH,EAAUM,UAAW,CACrB,MAAMC,EAAUP,EAAUM,YACtBnN,EAAApmB,QAAG6D,cAAc,CAAC2vB,KAClBP,EAAUQ,UAAU7Z,GAI5BoK,EAAItF,IAAIuU,GAiBZxM,YAAYtmB,EAAcuzB,EAAqBC,GACtChiB,MAAMC,QAAQ8hB,IACftN,EAAApmB,QAAGK,IAAI,cAAe,MAClB,+CAGRjC,KAAK+B,KAAOA,EACZ/B,KAAKs1B,UAAYA,EACjBt1B,KAAKw1B,SAAW,GAIhBx1B,KAAKy1B,cAAe,EAGpBz1B,KAAK01B,WAAY,EAGjB,IAAK,IAAIr4B,EAAI,EAAGA,EAAI2C,KAAKs1B,UAAU/zB,OAAQlE,IAClC8sB,EAAUjrB,eAAec,KAAKs1B,UAAUj4B,KACzC2qB,EAAApmB,QAAGK,IAAI,cAAe,mBACLjC,KAAKs1B,UAAUj4B,uBAGhCk4B,EACAA,EAAKI,YAAY31B,KAAKs1B,UAAUj4B,GAAI2C,MAGpC+mB,EAAK4O,YAAY31B,KAAKs1B,UAAUj4B,GAAI2C,MAI5CA,KAAK41B,aAAezxB,EAAM0xB,QAC1B71B,KAAKsoB,IAAMjL,EAAAC,OAAOC,SAGf8K,OAAOC,GACVtoB,KAAKsoB,IAAMA,EAGRD,UAAU9B,GACbvmB,KAAKw1B,SAASjP,EAAOzP,SAAWyP,EAG7B8B,aAAa9B,UACTvmB,KAAKw1B,SAASjP,EAAOzP,SAGzBuR,OAAOyN,EAAS1xB,GACfA,EAAIlF,eAAe,OACfc,KAAK+1B,aAAa3xB,EAAImiB,SAAUvmB,KAAKg2B,UAAU5xB,EAAImiB,QAElDniB,EAAIlF,eAAe,YAGnBc,KAAK+1B,aAAa3xB,EAAImiB,SACvBvmB,KAAKi2B,aAAa7xB,EAAImiB,SAO3B8B,aAAa9B,GAChB,MAAM+O,EAAYt1B,KAAKs1B,UACvB,OAA0B,IAAtBt1B,KAAKy1B,aACElP,EAAO2P,OAAOZ,GAGd/O,EAAO4P,OAAOb,GAKtBjN,cACH,OAAOtqB,OAAO6qB,KAAK5oB,KAAKw1B,UAAUj0B,OAAS,EAGxC8mB,SACH,IAAK,MAAMzD,KAAK5kB,KAAKw1B,SACZ5Q,GACL5kB,KAAKo2B,aAAap2B,KAAKw1B,SAAS5Q,IAIjCyD,aAAazD,GAChBoD,EAAApmB,QAAGK,IAAI,aAAc,eACjB,qCAIDomB,IAAIhkB,GACP,GAAIF,EAAM0xB,QAAS,CACf,MAAMQ,EAAOt4B,OAAO6qB,KAAK5oB,KAAKw1B,UAAUj0B,OACxC,IAAI+0B,aAAmBt2B,KAAK+B,KAAK4G,cAEjCxE,KADAmyB,kBAAwBD,OACNhyB,oVClK9B,MAAA2jB,EAAAC,EAAAhrB,EAAA,IACAs5B,EAAAt5B,EAAA,IACAu5B,EAAApC,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,KACA8sB,EAAA9sB,EAAA,IAYaE,EAAAs5B,QAAe,GAE5B,MAAMC,EAAa,OACbC,EAAiB,gCAMvBx5B,EAAAs5B,QAAQG,YAAc70B,MACT20B,EAAWG,KAAK90B,IAAS,WAAa80B,KAAK90B,KAoBxD,MAAa+0B,UAAoBN,EAAMO,MAAMR,EAAAS,SAEzC3O,YAAY4O,EAA6B5H,GACrC,IAAIzxB,EAAO,KACPmE,EAAO,KAEa,iBAAbk1B,GACPr5B,EAAOq5B,EAASr5B,KAChBmE,EAAOk1B,EAASl1B,OAGhBnE,EAAOq5B,EACPl1B,EAAOstB,GAEXttB,EAAOA,GAAQnE,EACfs5B,MAAM,CAACv2B,SAAUqnB,EAAApmB,QAAGkL,UAAW/K,SAC/BimB,EAAApmB,QAAGu1B,iBAAmB,EACtBn3B,KAAKo3B,MAAQx5B,EACboC,KAAKqE,IAAM,GAGRgkB,UAAmB,OAAOroB,KAAKo3B,MAC/B/O,QAAQzqB,GAAeoC,KAAKo3B,MAAQx5B,EAEpCyqB,SACH,OAAOqO,EAAWG,KAAK72B,KAAKQ,WAGzB6nB,aACH,OAAOsO,EAAeE,KAAK72B,KAAKQ,WAG7B6nB,aACH,OAAQroB,KAAKkJ,IAAI,cAGdmf,kBACH,OAAIroB,KAAKkJ,IAAI,eACFlJ,KAAK9B,IAAI,cAAcm5B,WAK/BhP,kBACH,OAAIroB,KAAKkJ,IAAI,eACFlJ,KAAK9B,IAAI,cAAco5B,YAK/BjP,cACH,OAAQroB,KAAKkJ,IAAI,UAGdmf,OAAOhkB,GACVrE,KAAKqE,IAAMA,EAGRgkB,OAAOkP,GACV,OAAOv3B,KAAKqE,IAAIkzB,GAGblP,OAAOkP,GACV,OAAOv3B,KAAKqE,IAAInF,eAAeq4B,GAI5BlP,YAAYvoB,IAIZuoB,eAAevoB,IAKfuoB,SACH,MAAMmP,EAAazN,EAAA0N,YAAYz3B,MACzBoE,EAAW,CACbyS,GAAI7W,KAAK8W,QACTlZ,KAAMoC,KAAK0B,UACXK,KAAM/B,KAAKQ,UACX6D,IAAKrE,KAAKqE,KAKd,OAHImzB,IACApzB,EAAIozB,WAAaA,GAEdpzB,GAvFfjH,EAAA25B,cA0FA35B,EAAAs5B,QAAQiB,KAAOZ,EACf9O,EAAApmB,QAAGu1B,gBAAkB,EAErB,MAAaQ,UAAoBb,EAE7BzO,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAKsgB,IAAI,IAAI6J,EAAUyN,QACvB,MAAMC,EAAa,IAAI1N,EAAU2N,WACjCD,EAAWE,mBACX/3B,KAAKsgB,IAAIuX,IAPjB16B,EAAAw6B,cAWAx6B,EAAAs5B,QAAQuB,KAAOL,EAIf,MAAaM,UAAsBzB,EAAM0B,UAAUpB,IAI/CzO,YAAYzqB,EAAMu6B,EAAWC,GACzBlB,MAAM,CAACt5B,OAAMmE,KAAM,eACnB/B,KAAKq4B,UAAYF,EACjBn4B,KAAKs4B,aAAeF,EACpBp4B,KAAKu4B,cAAgB,KAIlBlQ,cACH,OAAQL,EAAApmB,QAAG6D,cAAc,CACrBzF,KAAKq4B,UAAWr4B,KAAKs4B,aAAct4B,KAAKs4B,eAKzCjQ,YAAY7M,GACVwM,EAAApmB,QAAG6D,cAAc,CAAC+V,IAInBwM,EAAApmB,QAAGK,IAAI,iBAAkB,cACrB,mCAJJjC,KAAKq4B,UAAY7c,EAQlB6M,cAAe,OAAOroB,KAAKq4B,UAG3BhQ,eAAejJ,GACb4I,EAAApmB,QAAG6D,cAAc,CAAC2Z,IAInB4I,EAAApmB,QAAGK,IAAI,iBAAkB,iBACrB,oCAJJjC,KAAKs4B,aAAelZ,EAQrBiJ,iBACH,OAAOroB,KAAKs4B,aAMTjQ,gBAAgBmQ,GACnB,GAAKxQ,EAAApmB,QAAG6D,cAAc,CAAC+yB,IAQnBxQ,EAAApmB,QAAGK,IAAI,iBAAkB,kBACrB,yCATyB,CAC7BjC,KAAKu4B,cAAgBC,EACrB,MAAMJ,EAAcI,EAAOC,cACtBzQ,EAAApmB,QAAG6D,cAAc,CAAC2yB,KACnBp4B,KAAK04B,eAAeN,IASzB/P,kBACH,OAAOroB,KAAKu4B,cAMTlQ,QACH,MAAMpS,EAAIjW,KAAK2b,OACTzF,EAAIlW,KAAKgc,OAEf,SADWhc,KAAKq4B,UAAUvhB,WACVb,KAAKC,IAKlBmS,QAAQmQ,EAAyCtZ,EAAQ,GACxD3L,MAAMC,QAAQglB,IACdA,EAAOnuB,QAAQsuB,IACXA,EAAGC,gBAAgB54B,MACnB24B,EAAGD,eAAe14B,KAAKy4B,iBAE3Bz4B,KAAK44B,gBAAgBJ,EAAOtZ,IAC5Blf,KAAK04B,eAAeF,EAAOtZ,GAAOuZ,iBAGlCz4B,KAAK44B,gBAAgBJ,GACrBA,EAAOI,gBAAgB54B,MACvBA,KAAK04B,eAAeF,EAAOC,eAC3BD,EAAOE,eAAe14B,KAAKy4B,gBAI5BpQ,SAAmB,MAAO,aAAewO,KAAK72B,KAAK0B,WAGnD2mB,UAAUpe,GACb,IAAK+d,EAAApmB,QAAG6D,cAAc,CAACzF,KAAKu4B,cAAev4B,KAAKs4B,eAC5C,GAAIt4B,KAAKu4B,yBAAyBN,EAAe,CAC7C,MAAMY,EAAO74B,KAAKu4B,cAAc5c,OAC1Bmd,EAAO94B,KAAKu4B,cAAcvc,OAChC,GAAIhc,KAAKq4B,UAAUvK,YAAY7jB,IACvBjK,KAAKs4B,aAAavK,SAAS9jB,EAAO4uB,EAAMC,GACxC,OAAO,OAKf9Q,EAAApmB,QAAGK,IAAI,gBAAiB,YACrB,mDAGX,OAAO,EAMJomB,WAAW0Q,GACd/4B,KAAKu4B,cAAgBQ,EAAQC,aAC7Bh5B,KAAKs4B,aAAeS,EAAQX,YAIzB/P,aACH,MAAM2Q,EAAeh5B,KAAKi5B,kBAC1B,GAAID,aAAwBf,EAAe,CACvC,MAAMG,EAAcp4B,KAAKk5B,iBACzB,MAAO,CACHF,aAAc,CACV/iB,EAAG+iB,EAAard,OAChBzF,EAAG8iB,EAAahd,QAEpBoc,YAAaA,EAAYthB,SAI7B,MAAO,CACHkiB,aAAc,CACV/iB,EAAG+iB,EAAa/iB,EAAGC,EAAG8iB,EAAa9iB,GAEvCkiB,YAAap4B,KAAKk5B,kBAMvB7Q,SACH,MAAMzJ,EAAY,CACdhhB,KAAMoC,KAAK0B,UACXK,KAAM/B,KAAKQ,WAEXR,KAAKq4B,YACLzZ,EAAKuZ,SAAWn4B,KAAKy4B,cAAc3hB,SAGnCkP,OAAOC,UAAUjmB,KAAKs4B,cACtB1Z,EAAKwZ,YAAcp4B,KAAKs4B,aAEnBt4B,KAAKs4B,eACV1Z,EAAKwZ,YAAep4B,KAAKk5B,iBAA2BpiB,SAGxD,MAAMkiB,EAAeh5B,KAAKi5B,kBAY1B,OAXID,IAEIpa,EAAKoa,aADLA,aAAwBf,EACJ,CAChBhiB,EAAG+iB,EAAard,OAChBzF,EAAG8iB,EAAahd,QAIAgd,GAGrBpa,GAlLfzhB,EAAA86B,gBAuLA96B,EAAAs5B,QAAQ0C,OAASlB,EAGjB,MAAamB,UAAoB5C,EAAM0B,UAAUpB,IAC7CzO,YAAYgR,GACRnC,MAAM,QACNl3B,KAAKs5B,aAA6B,IAAXD,GACVA,EAEbr5B,KAAKu5B,QAAU,IAAIpP,EAAUyN,OAC7B,MAAMC,EAAa,IAAI1N,EAAU2N,WACjCD,EAAWE,mBACX/3B,KAAKw5B,YAAc3B,EACf73B,KAAKs5B,SAAUt5B,KAAKy5B,YAIrBpR,YAAsB,OAAO,EAE7BA,SACH,OAAQroB,KAAKs5B,QAGVjR,WACH,OAAOroB,KAAKs5B,QAGTjR,WACHroB,KAAKs5B,SAAU,EACft5B,KAAK05B,OAAO,UACZ15B,KAAK05B,OAAO,cAGTrR,YACHroB,KAAKs5B,SAAU,EACft5B,KAAKsgB,IAAItgB,KAAKu5B,SACdv5B,KAAKsgB,IAAItgB,KAAKw5B,aAGXnR,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAExB,OADA7H,EAAKya,OAASr5B,KAAKs5B,QACZ1a,GAvCfzhB,EAAAi8B,cA+CAj8B,EAAAs5B,QAAQkD,KAAOP,EAGf,MAAaQ,UAAyBR,EAElC/Q,YAAYxlB,GAAW,GACnBq0B,MAAMr0B,GACN7C,KAAK65B,QAAQ,aAGVxR,YAAa,OAAO,EAEpBA,QACCroB,KAAK85B,SAAW95B,KAAKy5B,YACnBz5B,KAAK+5B,WAGR1R,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAK7c,KAAO,YACL6c,GAjBfzhB,EAAAy8B,mBAoBAz8B,EAAAs5B,QAAQuD,UAAYJ,EAKpB,MAAaK,UAAqBzD,EAAM0B,UAAUpB,IAE9CzO,cACI6O,MAAM,SACNl3B,KAAKk6B,SAAW,GAGb7R,aACH,OAAOroB,KAAKk6B,SAGT7R,UAAUjJ,GACbpf,KAAKk6B,SAASt0B,KAAKwZ,GAGhBiJ,MAAMpe,GACTjK,KAAKk6B,SAAS7vB,QAAQ+U,IACdA,EAAO+a,OACP/a,EAAO+a,MAAMlwB,KAKlBoe,SACH,MAAO,CACHxR,GAAI7W,KAAK8W,QACT/U,KAAM,QACNq4B,UAAWp6B,KAAKk6B,SAAS7kB,IAAI9W,GAAKypB,EAAApmB,QAAG6U,UAAU,SAAUlY,MA3BrEpB,EAAA88B,eA+BA98B,EAAAs5B,QAAQ4D,MAAQJ,EAGhB,MAAaK,UAAoB9D,EAAM0B,UAAUpB,IAC7CzO,cACI6O,MAAM,QACNl3B,KAAKu6B,YAAc,KACnBv6B,KAAKw6B,qBAAuB,EAC5Bx6B,KAAKy6B,oBAAsB,GAC3Bz6B,KAAK06B,cAAe,EAGjBrS,cACH,OAAOroB,KAAK06B,aAGTrS,QAAQpe,GACXjK,KAAKu6B,YAActwB,EACnBjK,KAAK06B,cAAe,EAIjBrS,sBAAsBvhB,GACzB,GAAIA,EAAKoC,IAAI,UAAW,CACpB,MAAM5K,EAAQwI,EAAKoT,WACbI,EAAa0N,EAAApmB,QAAGgY,kBAAkBtb,GACxC,IAAIic,EAASyN,EAAApmB,QAAG4Y,eAAeF,GAG/B,OAFAC,GAAUzT,EAAKT,WAEA,KADfkU,EAASrT,KAAKC,KAAKnH,KAAKw6B,qBAAuBjgB,IAEpC,EAEJA,EAMX,OAHIyN,EAAApmB,QAAGK,IAAI,eAAgB,wBACnB,QAAU6E,EAAKpF,UAAY,uBAE5B,EAIJ2mB,uBAAuBvhB,EAAMyY,GAChC,MAAMjhB,EAAQwI,EAAKoT,WACbI,EAAa0N,EAAApmB,QAAGgY,kBAAkBtb,GACxC,IAAIic,EAASyN,EAAApmB,QAAG4Y,eAAeF,GAI/B,OAHYC,GAARgF,GACYzY,EAAKT,WACrBkU,EAASrT,KAAK4C,MAAM9J,KAAKy6B,oBAAsBlgB,GAI5C8N,cACHroB,KAAKu6B,YAAc,KACnBv6B,KAAK06B,cAAe,EAIjBrS,cAAcsS,GACZ3S,EAAApmB,QAAG6D,cAAc,CAACk1B,IAKnB3S,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,6CALJjC,KAAKu6B,YAAcI,EACnB36B,KAAK06B,cAAe,GASrBrS,gBACH,OAAOroB,KAAKu6B,YAITlS,cAAcuS,EAAaC,GACzB7S,EAAApmB,QAAG6D,cAAc,CAACm1B,EAAKC,IAKxB7S,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,gDALJjC,KAAKw6B,qBAAuBK,EAC5B76B,KAAKy6B,oBAAsBG,GAS5BvS,oBACH,OAAOroB,KAAKw6B,qBAITnS,mBACH,OAAOroB,KAAKy6B,oBAGTpS,SACH,IAAIyS,EAAe,KACf96B,KAAKu6B,cACLO,EAAe96B,KAAKu6B,YAAYzjB,SAEpC,MAAM1S,EAAW,CACbrC,KAAM,OACNg5B,YAAa/6B,KAAK06B,aAClBM,eAAgBh7B,KAAKw6B,qBACrBS,cAAej7B,KAAKy6B,qBAKxB,OAHqB,OAAjBK,IACA12B,EAAI82B,WAAaJ,GAEd12B,GA3GfjH,EAAAm9B,cA+GAn9B,EAAAs5B,QAAQ0E,KAAOb,EAGf,MAAac,UAA2B5E,EAAM0B,UAAUpB,IACpDzO,cACI6O,MAAM,eACNl3B,KAAKq7B,IAAM,EAGRhT,QAAQ1D,GACX3kB,KAAK2kB,KAAOA,EAGT0D,QAAQzpB,EAAKkH,GAChB9F,KAAK2kB,KAAK/lB,GAAOkH,EAGduiB,UAAW,OAAOroB,KAAK2kB,KAEvB0D,UACH,QAAIroB,KAAK2kB,KAIN0D,OAAOgT,GACNrV,OAAOC,UAAUoV,GACjBr7B,KAAKq7B,IAAMA,EAGXrT,EAAApmB,QAAGK,IAAI,qBAAsB,mCACCo5B,KAI/BhT,SACH,OAAOroB,KAAKq7B,IAIThT,SACH,MAAMzJ,EAAY,CACd7c,KAAM/B,KAAKQ,UACX86B,OAAQt7B,KAAKu7B,UAKjB,OAHIv7B,KAAKw7B,YACL5c,EAAK+F,KAAO3kB,KAAK2kB,MAEd/F,GA5CfzhB,EAAAi+B,qBAgDAj+B,EAAAs5B,QAAQgF,YAAcL,EAGtB,MAAaM,UAAoBlF,EAAM0B,UAAUpB,IAE7CzO,YAAYtmB,GACRm1B,MAAMn1B,GAGHsmB,YAAYvoB,GACAA,EAAK67B,oBACbtxB,QAAQJ,IACXA,EAAMqW,IAAI,IAAI6J,EAAUyR,aAIzBvT,eAAevoB,GACHA,EAAK67B,oBACbtxB,QAAQJ,IACXA,EAAMyvB,OAAO,gBAhBzBv8B,EAAAu+B,cAqBA,MAAaG,UAAmBH,EAE5BrT,cACI6O,MAAM,OACN,MAAM4E,EAAa,IAAI3R,EAAU4R,WACjCD,EAAWE,kBAAiB,GAC5BF,EAAWG,cAAc,IACzBj8B,KAAKsgB,IAAIwb,GAGNzT,cAAc6T,GACjBl8B,KAAK9B,IAAI,cAAc+9B,cAAcC,IAX7C/+B,EAAA0+B,aAeA1+B,EAAAs5B,QAAQ0F,IAAMN,EAEd,MAAaO,UAAqBV,EAE9BrT,cACI6O,MAAM,SACN,MAAM4E,EAAa,IAAI3R,EAAU4R,WACjCD,EAAWE,kBAAiB,GAC5BF,EAAWG,cAAc,IACzBj8B,KAAKsgB,IAAIwb,GAGNzT,cAAc6T,GACjBl8B,KAAK9B,IAAI,cAAc+9B,cAAcC,IAX7C/+B,EAAAi/B,eAeAj/B,EAAAs5B,QAAQ4F,MAAQD,EAEhB,MAAaE,UAAoBZ,EAE7BrT,cACI6O,MAAM,QACN,MAAM4E,EAAa,IAAI3R,EAAU4R,WACjCD,EAAWE,kBAAiB,GAC5BF,EAAWG,cAAc,IACzBj8B,KAAKsgB,IAAIwb,GAGNzT,cAAc6T,GACjBl8B,KAAK9B,IAAI,cAAc+9B,cAAcC,IAX7C/+B,EAAAm/B,cAeAn/B,EAAAs5B,QAAQ8F,KAAOD,EAIf,MAAaE,UAA2BhG,EAAM0B,UAAUpB,IACpDzO,cACI6O,MAAM,gBAFd/5B,EAAAq/B,qBAKAr/B,EAAAs5B,QAAQgG,YAAcD,EAItB,MAAaE,UAAsBlG,EAAM0B,UAAUpB,IAC/CzO,YAAYsU,GACRzF,MAAM,UACNl3B,KAAK28B,KAAOA,EACZ38B,KAAK48B,IAAM,GACX58B,KAAKE,WAAY,EAGdmoB,eAAgB,OAAOroB,KAAKE,UAC5BmoB,aAAazqB,GAAOoC,KAAKE,UAAYtC,EAErCyqB,UAAW,OAAOroB,KAAK28B,KACvBtU,QAAQsU,GAAO38B,KAAK28B,KAAOA,EAE3BtU,OAAOuU,GAAM58B,KAAK48B,IAAMA,EACxBvU,SAAU,OAAOroB,KAAK48B,IAEtBvU,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAGnB,OAFA7H,EAAK+d,KAAO38B,KAAK28B,KACjB/d,EAAKge,IAAM58B,KAAK48B,IACThe,GArBfzhB,EAAAu/B,gBAwBAv/B,EAAAs5B,QAAQoG,OAASH,EAGJv/B,EAAAwB,OAAS,SAASoD,KAAiBoD,GAC5BpD,EAAK+6B,aACrB,OAAI3/B,EAAAs5B,QAAQv3B,eAAe6C,GAChB,IAAI5E,EAAAs5B,QAAQ10B,MAASoD,GAEzB,MAGXhI,EAAAs5B,QAAQ93B,OAASxB,EAAAwB,mVChuBjB,MAAAqpB,EAAAC,EAAAhrB,EAAA,IACA8/B,EAAA9/B,EAAA,KACA+/B,EAAA//B,EAAA,IACAggC,EAAA7I,EAAAn3B,EAAA,KACAigC,EAAA9I,EAAAn3B,EAAA,KACAkgC,EAAAlgC,EAAA,KACAmgC,EAAAngC,EAAA,IAEAogB,EAAApgB,EAAA,GACAogC,EAAApgC,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IACAqgC,EAAArgC,EAAA,IACAsgC,EAAAtgC,EAAA,IAEAugC,EAAAvgC,EAAA,KAEMwrB,EAAMpL,EAAAC,OAAOC,SACNpgB,EAAAsgC,YAAmB,GA+BnBtgC,EAAAugC,QAAU,SAASC,EAAcC,GAC1C59B,KAAK69B,IAAMF,EACX39B,KAAK89B,YAAcF,EAmBnB,MAAMG,EAAmB,CACrBp6B,OAAQ,CACJ5B,KAAM,UACNuF,OAAQ,CAAC8e,KAAM,SAAUzH,KAAM,aAC/Bqf,QAAS,CAAC5X,KAAM,SAAUzH,KAAM,cAChCsf,OAAQ,CAAC7X,KAAM,SAAUzH,KAAM,gBAC/Buf,MAAO,CAAC9X,KAAM,QAASzH,KAAM,YAE7Bwf,SAAU,CAAC/X,KAAM,QAASzH,KAAM,eAChCyf,SAAU,CAAChY,KAAM,QAASzH,KAAM,eAChC0f,QAAS,CAACjY,KAAM,QAASzH,KAAM,cAC/B2f,UAAW,CAAClY,KAAM,QAASzH,KAAM,gBACjC4f,WAAY,CAACnY,KAAM,QAASzH,KAAM,iBAClC6f,MAAO,CAACpY,KAAM,QAASzH,KAAM,YAE7B8f,SAAU,CAACrY,KAAM,aAAczH,KAAM,eAErC+f,GAAI,CAACtY,KAAM,aAAczH,KAAM,CAAC,QAAS,aACzCggB,MAAO,CAACvY,KAAM,aAAczH,KAAM,YAClCigB,GAAI,CAACxY,KAAM,SAAUzH,KAAM,CAAC,QAAS,aACrCkgB,OAAQ,CAACzY,KAAM,aAAczH,KAAM,aACnCmgB,MAAO,CAACngB,KAAM,WAAYogB,QAAS/+B,KAAKg/B,cAE5Cp7B,MAAO,CAEH7B,KAAM,UACNzD,MAAO,WACP0I,OAAQ,CAACof,KAAM,WAAYzH,KAAM,aACjCsgB,WAAY,gBAEZC,OAAQ,CACJ53B,OAAQ,YACR02B,QAAS,aACTmB,WAAY,gBACZC,WAAY,iBAGhBp3B,OAAQ,CACJi2B,OAAQ,eACR32B,OAAQ,YACR02B,QAAS,aACTqB,WAAY,gBACZ51B,MAAO,kBAEXjC,QAAS,CACLy2B,OAAQ,eACR32B,OAAQ,YACRmC,MAAO,kBAEX61B,KAAM,CACF1wB,OAAQ,cAGhBlO,SAAU,CACNqB,KAAM,UACNsC,IAAK,WAIb05B,EAAYn6B,MAAM27B,cAAgBxB,EAAYn6B,MAAMoE,OACpD+1B,EAAYn6B,MAAM27B,cAAcC,SAAW,cAC3CzB,EAAYn6B,MAAM67B,KAAO1B,EAAYn6B,MAAM4D,QAC3Cu2B,EAAYn6B,MAAM67B,KAAKC,SAAW,cAGlC1/B,KAAK9B,IAAM,EAACyhC,EAAe/hC,IACnBoC,KAAK89B,YAAY6B,GAAO/hC,GACjBoC,KAAK89B,YAAY6B,GAAO/hC,GAE5BoC,KAAK69B,IAAI8B,GAAO/hC,IAI3BoC,KAAK4/B,gBAAkB,EAAC79B,EAAM+D,KAC1B,OAAQ/D,GACJ,IAAK,SAAU,OAAO,IAAIooB,EAAU0V,OACpC,IAAK,aAAc,OAAO,IAAI1V,EAAU2V,WACxC,IAAK,SAAU,OAAO,IAAI3V,EAAU4V,OAAOj6B,GAC3C,IAAK,QAAS,OAAO,IAAIqkB,EAAU6V,MACnC,QACI,GAAI7V,EAAUjrB,eAAe6C,GACzB,OAAO,IAAIooB,EAAUpoB,GAGrBimB,EAAApmB,QAAGK,IAAI,UAAW,kBACd,cAAgBF,EAAO,qBAGvC,OAAO,OAMX/B,KAAK6vB,gBAAkB,SAAS8P,EAAe/hC,GAC3C,MAAMqiC,EAAQjgC,KAAK9B,IAAIyhC,EAAO/hC,GACxBsiC,EAAYnC,EAAY4B,GACzBM,GACDjY,EAAApmB,QAAGK,IAAI,UAAW,+BACDrE,mBAGrB,MAAMuiC,EAASngC,KAAKogC,gBAAgBT,EAAOM,GACtCE,GACDnY,EAAApmB,QAAGK,IAAI,sBAAuB,+CACG4c,KAAKC,UAAUmhB,MAIhDA,EAAM/gC,eAAe,YACrBc,KAAKqgC,cAAcJ,EAAOE,GAK9B,IAAK,MAAMhhC,KAAK8gC,EAGZ,GAAIC,EAAUhhC,eAAeC,GAAI,CAC7B,MAAMmhC,EAAWJ,EAAU/gC,GAC3B,GAAwB,iBAAbmhC,GAGP,GAAIA,EAASphC,eAAe,QACxBc,KAAKugC,aAAaJ,EAAQG,EAAUL,EAAM9gC,SAIzC,GAAImhC,EAASphC,eAAe,YAC7B,GAAU,UAANC,EAAe,CACf,MAAMqhC,EACAF,EAASvB,QAAQoB,EAAQF,EAAM9gC,IACrCghC,EAAOG,EAAS3hB,MAAM6hB,SAM1B,IAAK,MAAMC,KAAKH,EACZ,GAAIA,EAASphC,eAAeuhC,GAAI,CAC5B,MAAMC,EAAQJ,EAASG,GACnBN,EAAOjhC,eAAewhC,IACtBP,EAAOO,GAAOT,EAAM9gC,UAOpCghC,EAAOG,GAAUL,EAAM9gC,SAI1B,GAAI8gC,EAAM/gC,eAAe,SAGtBghC,EAAUhhC,eAAe+gC,EAAMl+B,MAAO,CACtC,MAAM4+B,EAAgBT,EAAUD,EAAMl+B,MACtC,GAAI4+B,EAAczhC,eAAeC,GAAI,CACjC,MAAMyhC,EAAYD,EAAcxhC,GAChC,GAAyB,iBAAdyhC,GACP,IAAK,MAAMC,KAAMD,EACb,GAAIA,EAAU1hC,eAAe2hC,GAAK,CAC9B,MAAMC,EAASF,EAAUC,GACrBV,EAAOjhC,eAAe4hC,IACtBX,EAAOS,EAAUC,IAAKZ,EAAM9gC,UAMxCghC,EAAOS,GAAWX,EAAM9gC,KA+C5C,OAxCI8gC,EAAM/gC,eAAe,QAASc,KAAK+gC,cAAcd,EAAOE,GAExDF,EAAM/gC,eAAe,UACrBc,KAAKghC,iBAAiBf,EAAOE,GAG7BF,EAAM/gC,eAAe,QACrBc,KAAKihC,kBAAkBhB,EAAOE,GAG9BF,EAAM/gC,eAAe,SACrBc,KAAKkhC,kBAAkBjB,EAAOE,GAI9BF,EAAM/gC,eAAe,WACrBc,KAAKmhC,UAAUlB,EAAOE,GAGtBF,EAAM/gC,eAAe,YACrBc,KAAKohC,WAAWnB,EAAOE,GAGvBF,EAAM/gC,eAAe,WACrBc,KAAKqhC,sBAAsBpB,EAAOE,GAGlCF,EAAM/gC,eAAe,UACrBc,KAAKshC,mBAAmBrB,EAAOE,GAG/BF,EAAM/gC,eAAe,gBACrBc,KAAKuhC,yBAAyBtB,EAAOE,GAGrCF,EAAM/gC,eAAe,YACrBc,KAAKwhC,qBAAqBvB,EAAOE,GAI9BA,GAIXngC,KAAKmhC,UAAY,EAAClB,EAAe77B,KAC7B,MAAMq9B,EAASxB,EAAMwB,OACfC,EAAa,IAAIvX,EAAUwX,OACjCD,EAAWE,QAAQH,EAAOrpB,MAC1BspB,EAAWrM,UAAUjxB,GACrBs9B,EAAWG,aAAavE,EAAAwE,KAAKnjC,OAAO8iC,EAAOxD,SAE3C,MAAM8D,EAAczE,EAAAwE,KAAKnjC,OAAO8iC,EAAOO,UACvCN,EAAWO,eAAeF,GAC1B,MAAMG,EAAW,IAAI/X,EAAUgY,SAC/BD,EAASE,QAAQV,GACjBt9B,EAAIkc,IAAI4hB,KAIZliC,KAAKshC,mBAAqB,EAACrB,EAAe77B,KACtC67B,EAAMoC,MAAMh4B,QAAQg4B,IAChBriC,KAAKsiC,eAAeD,EAAOj+B,OAInCpE,KAAKuhC,yBAA2B,EAACtB,EAAe77B,KAC5C67B,EAAMsC,YAAYl4B,QAAQg4B,IACtB,MAAMG,EAAexiC,KAAKsiC,eAAeD,EAAOj+B,GAChDo+B,EAAaC,aAAY,GACzBD,EAAaE,gBAAe,OAIpC1iC,KAAKwhC,qBAAuB,EAACvB,EAAeE,KACxCF,EAAM0C,QAAQt4B,QAAQs4B,IAElB3iC,KAAKsiC,eAAeK,EAASxC,GADb,OAKxBngC,KAAKsiC,eAAiB,EAACD,EAAOj+B,EAAKw+B,GAAU,KACzC,GAAIP,EAAMQ,QAAS,CACf,MAAMzc,EAAOpmB,KAAK4/B,gBAAgByC,EAAMQ,SACpCzc,EAAKiP,WACDrN,EAAApmB,QAAGoe,QAAQ5b,IACXgiB,EAAKiP,UAAUjxB,GAMnBmP,MAAMC,QAAQ6uB,EAAM1jB,OACpB0jB,EAAM1jB,KAAKtU,QAAQsU,IACf,GAAiC,mBAAtByH,EAAKzH,EAAKmkB,QACjB1c,EAAKzH,EAAKmkB,QAAQnkB,EAAKrgB,WAEtB,CACD,MAAMqL,EAAMyc,EAAKK,SACjBuB,EAAApmB,QAAGK,IAAI,oBAAqB,oCACT0c,EAAKmkB,kBAAkBn5B,QAOtD,MAAMo5B,EAAY3c,EAElB,IAAI8b,EAAW,KAQf,GANIA,EADAU,EACW,IAAIzY,EAAU6Y,WAGd,IAAI7Y,EAAUgY,SAGzBE,EAAML,SAAU,CAChB,MAAMiB,EAAS3F,EAAAwE,KAAKnjC,OAAO0jC,EAAML,UAC3BkB,EAAe,IAAI/Y,EAAUgZ,SACnCD,EAAajB,eAAegB,GAC5BC,EAAad,QAAQW,GACrBb,EAASE,QAAQc,QAGjBhB,EAASE,QAAQW,GAGrB,OADA3+B,EAAIkc,IAAI4hB,GACDA,EAEX,OAAO,OAIXliC,KAAKohC,WAAa,EAACnB,EAAe77B,KAC9B67B,EAAMmD,QAAQ/4B,QAAQg5B,IAClBj/B,EAAIk/B,WAAWC,aAAaF,OAKpCrjC,KAAKqhC,sBAAwB,EAACpB,EAAe77B,KACzCA,EAAIo/B,QAAQ,IAAIjG,EAAAkG,MAAMC,UAAUt/B,IAChC67B,EAAM0D,OAAOt5B,QAAQu5B,IACjB,MAAMC,EAAY7jC,KAAK8jC,cAAcF,GACrC,GAAIrG,EAAAkG,MAAMI,GACNz/B,EAAI2/B,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMI,QAEhC,CACD,MAAMx/B,YAAgBw/B,qBACtB7b,EAAApmB,QAAGK,IAAI,UAAW,wBAAyBoC,QAKvDrE,KAAK8jC,cAAgB,CAACG,GACM,iBAAbA,GACHA,EAASC,OACFzb,EAAIjL,aAAaymB,EAASC,QAGlCD,GAKXjkC,KAAKogC,gBAAkB,EAACT,EAAOv7B,KAC3B,OAAQu7B,GACJ,KAAK3X,EAAApmB,QAAGiL,WACSzI,EAAIrC,KAGT,OAAQqC,EAAI+/B,WACR,IAAK,YACD,OAAO,IAAIlH,EAAMmH,UAAUhgC,EAAIxG,MACnC,QAAS,OAAO,IAAIq/B,EAAMoH,cAAcjgC,EAAIxG,MAI5D,KAAKoqB,EAAApmB,QAAGmL,UACJ,MAAMu3B,EAAUlgC,EAAIrC,KACpB,OAAQuiC,GACJ,IAAK,SAAU,OAAO,IAAIpH,EAAKqH,OAAOngC,EAAIxG,MAC1C,IAAK,OAAQ,OAAO,IAAIs/B,EAAKsH,KAAKpgC,EAAIxG,MACtC,IAAK,OAAQ,OAAO,IAAIs/B,EAAKuH,KAAKrgC,EAAIxG,MACtC,IAAK,OAAQ,OAAO,IAAIs/B,EAAKwH,KAAKtgC,EAAIxG,MACtC,IAAK,WAAa,OAAO,IAAIs/B,EAAKyH,SAASvgC,EAAIxG,MAC/C,IAAK,UAAW,OAAO,IAAIs/B,EAAK0H,QAAQxgC,EAAIxG,MAC5C,IAAK,UAAW,OAAO,IAAIs/B,EAAK2H,QAAQzgC,EAAIxG,MAC5C,IAAK,gBACD,OAAO,IAAIs/B,EAAK4H,cAAc1gC,EAAIxG,MACtC,IAAK,OAAQ,OAAO,IAAIs/B,EAAK6H,KAAK3gC,EAAIxG,MACtC,IAAK,SAAU,OAAO,IAAIs/B,EAAK8H,OAAO5gC,EAAIxG,MAC1C,IAAK,OAAQ,OAAO,IAAIs/B,EAAK+H,KAAK7gC,EAAIxG,MACtC,IAAK,YAAa,OAAO,IAAIs/B,EAAKgI,UAAU9gC,EAAIxG,MAChD,IAAK,SAAU,OAAO,IAAIs/B,EAAKiI,OAAO/gC,EAAIxG,MAC1C,QAAS,CACL,GAAI0mC,EAAS,CACT,MAAMx9B,EAAO,IAAIo2B,EAAKkI,SAAShhC,EAAIxG,MAEnC,OADAkJ,EAAK+yB,QAAQz1B,EAAIrC,MACV+E,EAEX,MACMzC,sBACkBigC,WAFXzlB,KAAKC,UAAU1a,KAG5B4jB,EAAApmB,QAAGK,IAAI,GAAI,kBAAmBoC,IAGtC,MACJ,KAAK2jB,EAAApmB,QAAGkL,UAAW,CACf,MAAMu4B,EAAWjhC,EAAIrC,MAAQqC,EAAIxG,KACjC,OAAO,IAAIy/B,EAAAvG,YAAY1yB,EAAIxG,KAAMynC,IAIzC,OAAO,OAKXrlC,KAAKugC,aAAe,SAASJ,EAAQmF,EAAUx/B,GAC3C,GAAIw/B,EAASpmC,eAAe,QAGxB,GAAIqU,MAAMC,QAAQ8xB,EAAS3mB,MACvB2mB,EAAS3mB,KAAKtU,QAAQk7B,IAClB,MAAMC,EAAWF,EAASlf,KAC1B,GAAI+Z,EAAOj3B,IAAIs8B,GAEgC,mBAAhCrF,EAAOjiC,IAAIsnC,GAAUD,GAC5BpF,EAAOjiC,IAAIsnC,GAAUD,GAAOz/B,GAG5B9F,KAAKylC,YAAYD,EAAUD,EAAOD,OAGrC,CACD,MAAMlf,EAAOpmB,KAAK4/B,gBAAgB4F,GACP,mBAAhBpf,EAAKmf,IACZnf,EAAKmf,GAAOz/B,GACZq6B,EAAO7f,IAAI8F,IAGXpmB,KAAKylC,YAAYD,EAAUD,EAAOD,UAK7C,CACD,MAAMC,EAAQD,EAAS3mB,KACjB6mB,EAAWF,EAASlf,KAC1B,GAAI+Z,EAAOj3B,IAAIs8B,IAA8B,iBAAVD,EAE/BpF,EAAOjiC,IAAIsnC,GAAUD,GAAOz/B,OAE3B,CACD,MAAMsgB,EAAOpmB,KAAK4/B,gBAAgB4F,GAElC,GADArF,EAAO7f,IAAI8F,GACgB,mBAAhBA,EAAKmf,GACZnf,EAAKmf,GAAOz/B,QAEX,GAAqB,iBAAVy/B,EAAoB,CACdxnC,OAAO6qB,KAAK0c,EAAS3mB,MAC7BtU,QAAQi2B,IACd,MAAMoF,EAAc,CAChB/mB,KAAM2hB,EACNla,KAAMof,GAEJG,EAASL,EAAS3mB,KAAK2hB,GAC7BtgC,KAAKugC,aAAaJ,EAAQuF,EAAaC,UAI3C3d,EAAApmB,QAAGsD,IAAI2Z,KAAKC,UAAUymB,IACtBvd,EAAApmB,QAAGK,IAAI,oBAAqB,8BACTsjC,QAAYC,WAKtCrF,EAAOj3B,IAAIo8B,EAASlf,MACzB4B,EAAApmB,QAAGK,IAAI,oBAAqB,MACxB,mBAGJk+B,EAAO7f,IAAItgB,KAAK4/B,gBAAgB0F,EAASlf,KAAMtgB,KAIvD9F,KAAKylC,YAAc,EAACD,EAAkBD,EAAeD,KACjD,MAAM1mB,EAAO,YAAcC,KAAKC,UAAUwmB,GAC1Ctd,EAAApmB,QAAGK,IAAI,oBAAqB,wBAChBujC,aAAoBD,MAAU3mB,OAI9C5e,KAAKqgC,cAAgB,EAACJ,EAAe1Z,KACjC,GAA6B,iBAAlB0Z,EAAM4C,QACb+C,EAAmB3F,EAAM4C,QAAStc,QAEjC,GAAIhT,MAAMC,QAAQysB,EAAM4C,SACzB5C,EAAM4C,QAAQx4B,QAAQ+b,IAClB,IAAIyf,EAAWzf,EACXA,EAAK8d,SACL2B,EAAWpd,EAAIjL,aAAa4I,EAAK8d,SAEb,iBAAb2B,EACPD,EAAmBC,EAAUtf,GAG7Buf,EAAgBvf,EAAQsf,UAI/B,GAA6B,iBAAlB5F,EAAM4C,QAAsB,CACxC,IAAIgD,EAAW5F,EAAM4C,QACjB5C,EAAM4C,QAAQqB,SACd2B,EAAWpd,EAAIjL,aAAayiB,EAAM4C,QAAQqB,SAE9C4B,EAAgBvf,EAAQsf,QAGxB7d,EAAApmB,QAAGK,IAAI,UAAW,gBACd,+DAIZ,MAAM2jC,EAAqB,CAACJ,EAAUjf,KAClC,IACI,MAAMH,EAAO,IAAI+D,EAAUqb,GAC3Bjf,EAAOjG,IAAI8F,GAEf,MAAOxB,GACH,IAAIvgB,oBAAwBmhC,KAC5BnhC,GAAO,mCACP2jB,EAAApmB,QAAGK,IAAI,UAAW,wBACX2iB,EAAEmhB,aAAa1hC,OAIxByhC,EAAkB,CAACvf,EAAQyf,KAC7BhmC,KAAKugC,aAAaha,EAAQyf,EAAS,OAIvChmC,KAAKihC,kBAAoB,SAAShB,EAAOh2B,GACzBg2B,EAAMgG,IACd57B,QAAQvD,IACR,MAAMlJ,EAAOkJ,EAAKlJ,MAAQkJ,EACpByY,EAAQzY,EAAKyY,OAAS,EACtB2mB,EAAUlmC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGmL,UAAWnP,GAC/CsoC,GACAA,EAAQt/B,SAAS2Y,GACjBtV,EAAMxC,WAAWumB,QAAQkY,IAGzBle,EAAApmB,QAAGK,IAAI,UAAW,mCACCrE,qBAAwBqM,EAAMvI,gBAM7D1B,KAAKkhC,kBAAoB,SAASjB,EAAeh2B,GAC7C,MAAMk8B,EAAOlG,EAAMkG,KACbC,EAAWpmC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGmL,UAAWo5B,GAC9CE,EAAW,IAAIlc,EAAUmc,KAAKF,GACpCn8B,EAAMqW,IAAI+lB,IAIdrmC,KAAKghC,iBAAmB,SAASf,EAAeh2B,GAC5C,MAAMs8B,EAAQtG,EAAMsG,MACpB,IAAIC,GAAc,EAClBD,EAAMl8B,QAAQvD,IACV,MAAMgpB,EAAWhpB,EAAKlJ,MAAQkJ,EACxByY,EAAQzY,EAAKyY,OAAS,EACtB2mB,EAAUlmC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGmL,UAAW+iB,GAC/CoW,GACAA,EAAQt/B,SAAS2Y,GACZtV,EAAMxC,WAAWg/B,gBAAgBP,KAElCM,GAAc,IAIlBxe,EAAApmB,QAAGK,IAAI,UAAW,kCACC6E,qBAAwBmD,EAAMvI,eAKrD8kC,GACA/d,EAAIie,QAAQzG,EAAMsG,QAK1BvmC,KAAK+gC,cAAgB,EAACd,EAAeE,KAGjC,GAFAA,EAAOwG,SAAW,GAClBxG,EAAOyG,QAAU5mC,KAAK69B,IAAIgJ,QAAQC,IAAInoB,KAAK9f,KAAKshC,GACvB,iBAAdF,EAAM6G,KACV7G,EAAM6G,IAAI5nC,eAAe,UAC5B,IAAK,IAAI7B,EAAI,EAAGA,EAAI4iC,EAAM6G,IAAIvlC,OAAQlE,IAClC0pC,EAAoB9G,EAAOE,EAAQF,EAAM6G,IAAIzpC,SAGhD,GAAyB,iBAAd4iC,EAAM6G,IAClB,IAAK,MAAM3nC,KAAK8gC,EAAM6G,IACd7G,EAAM6G,IAAI5nC,eAAeC,IACzB4nC,EAAoB9G,EAAOE,EAAQhhC,QAK3C4nC,EAAoB9G,EAAOE,EAAQF,EAAM6G,OAIjD,MAAMC,EAAsB,CAAC9G,EAAen5B,EAAMkgC,KAC9C,MAAMC,EAAcD,EACpB,GAAIhnC,KAAK69B,IAAIgJ,QAAQ3nC,eAAe+nC,GAAc,CAC9C,MAAMC,EAAiBlnC,KAAK69B,IAAIgJ,QAAQI,GAClCE,EAAaD,EAAevoB,KAGlC,GAFA7X,EAAK6/B,SAAS/gC,KAAKuhC,GAEfD,EAAehoC,eAAe,YAC9B,GAAI+gC,EAAM6G,IAAI5nC,eAAe8nC,GAAU,CACnClgC,EAAKsgC,QAAU,GACf,MAAMC,EAAOH,EAAeI,SAC5B,GAAoB,iBAATD,EACP,IAAK,IAAIhqC,EAAI,EAAGA,EAAIgqC,EAAK9lC,OAAQlE,IAC7BkqC,EAAiBtH,EAAM6G,IAAIE,GAAUlgC,EAAMugC,EAAKhqC,SAIpDkqC,EAAiBtH,EAAM6G,IAAIE,GAAUlgC,EAAMugC,QAI/Crf,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,gGAKZ,GAAIilC,EAAehoC,eAAe,YAAa,CAC9BgoC,EAAeM,SACvBn9B,QAAQo9B,IACLxH,EAAM6G,IAAIE,GAAS9nC,eAAeuoC,KAClC3gC,EAAKsgC,QAAQK,GAAUxH,EAAM6G,IAAIE,GAASS,YAMtDzf,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,oBAAsBglC,EAAc,MAM1CM,EAAmB,CAACnjC,EAAK0C,EAAM4gC,KAC7BtjC,EAAIlF,eAAewoC,GACnB5gC,EAAKsgC,QAAQM,GAAWtjC,EAAIsjC,GAG5B1f,EAAApmB,QAAGK,IAAI,eAAgB,2BACXylC,yCAA+C5gC,MAKnE9G,KAAK2nC,gBAAkB,SAAShI,EAAev7B,GAC3C,OAAIA,EACOpE,KAAK6vB,gBAAgB8P,EAAOv7B,EAAIxG,OAGvCoqB,EAAApmB,QAAGK,IAAI,UAAW,kBACd,8BAED,QAIf9E,EAAAsgC,YAAYC,QAAUvgC,EAAAugC,QAEtBvgC,EAAAugC,QAAQz+B,UAAU+/B,YAAc,SAAS/0B,EAAO29B,GAC5C,GAAIxK,EAAAyK,MAAMD,GACN,OAAO,IAAIxK,EAAAyK,MAAMD,GAAW39B,GAEhC,MAAM5F,2BAA+BujC,WACrC5f,EAAApmB,QAAGK,IAAI,UAAW,cAAeoC,IAMxBlH,EAAA2qC,QAAU,SAASnK,EAAIoK,EAAUC,GAC1ChoC,KAAK69B,IAAMF,EACX39B,KAAKioC,UAAYF,EACjB/nC,KAAKkoC,UAAYF,EAGjB,MAAMG,EAAS,CACXC,aAAc,IAKlBpoC,KAAKqoC,MAAQ,CAACC,IACV,MAAM1qC,EAAO0qC,EAAM1qC,KACb+hC,EAAQ2I,EAAM3I,MACdd,EAASyJ,EAAMzJ,OAGrB,IAAK7W,EAAApmB,QAAG6D,cAAc,CAAC7H,IACnB,OAAIoC,KAAKkoC,UAAUhpC,eAAetB,GACvBoC,KAAKkoC,UAAUtqC,GAEb,GAGjB,IAAKoqB,EAAApmB,QAAG6D,cAAc,CAACo5B,IAAU,CAC7B,GAAI7+B,KAAKioC,UAAU/oC,eAAe2/B,GAAS,CACvC,MAAM0J,EAAUvoC,KAAKioC,UAAUpJ,GAC/B,YAAqB,IAAVc,EACH4I,EAAQrpC,eAAeygC,GAChB4I,EAAQ5I,GAEN,GAGN3/B,KAAKioC,UAAUpJ,GAI1B,MAAO,GAIV,OAAK7W,EAAApmB,QAAG6D,cAAc,CAACk6B,KACpB3/B,KAAK69B,IAAI3+B,eAAeygC,GACjB3/B,KAAK69B,IAAI8B,GAGjB,KAUX3/B,KAAKwoC,oBAAsB,SAAS7I,EAAOhhB,GACvC,MAAM8pB,EAA6BzoC,KAAKqoC,MAAM,CAAC1I,UACzCh+B,EAAgB,GAChBinB,EAAO7qB,OAAO6qB,KAAK6f,GAEzB,IAAK,IAAIprC,EAAI,EAAGA,EAAIurB,EAAKrnB,OAAQlE,IAAK,CAClC,MACM+G,EAAcqkC,EADP7f,EAAKvrB,IAECshB,EAAKva,IAEpBzC,EAAIiE,KAAKxB,GAGjB,OAAOzC,GAYX3B,KAAK0oC,UAAY,SAASJ,GACtB,MAAMzJ,EAASyJ,EAAMzJ,OACfc,EAAQ2I,EAAM3I,MACpB,QAAsB,IAAXd,QACc,IAAVc,GACH3/B,KAAKioC,UAAU/oC,eAAe2/B,GAAS,CACvC,MAAM0J,EAAUvoC,KAAKioC,UAAUpJ,GAAQc,GACvC,OAAO3/B,KAAK2oC,eAAeJ,GAIvC,OAAO,MAKXvoC,KAAK4oC,eAAiB,SAASxkC,GAC3B,GAAIA,EAAIlF,eAAe,UAAW,CAC9B,MAAM2/B,EAASz6B,EAAIy6B,OACbgK,EAAY7oC,KAAK0oC,UAAU,CAAC7J,SAAQc,MAAO3X,EAAApmB,QAAGiL,aACpD,GAAkB,OAAdg8B,EACA,OAAOA,OAGV,GAAIzkC,EAAIlF,eAAe,QAAS,CACjC,MAAMyC,EAAM3B,KAAKwoC,oBAAqBxgB,EAAApmB,QAAGiL,WAAYzI,EAAIua,MACzD,OAAO8J,EAAIjL,aAAa7b,GAE5B,OAAO,MAUX3B,KAAK8oC,cAAgB,SAAS1kC,GAC1B,GAAmB,mBAARA,EAAoB,CAC3B,MAAMzC,EAAM3B,KAAKwoC,oBAAoBxgB,EAAApmB,QAAGmL,UAAW3I,GACnD,OAAOqkB,EAAIjL,aAAa7b,GAEvB,GAAIyC,EAAIlF,eAAe,QAAS,CACjC,MAAMyC,EAAM3B,KAAKwoC,oBAAoBxgB,EAAApmB,QAAGmL,UAAY3I,EAAeua,MACnE,OAAO8J,EAAIjL,aAAa7b,GAM5B,OAHIqmB,EAAApmB,QAAGK,IAAI,UAAW,mDACqB4c,KAAKC,UAAU1a,MAEnD,MAMXpE,KAAK+oC,uBAAyB,SAASlxB,EAAKC,GACxC,MAAMlZ,EAAMiZ,EAAM,IAAMC,EACnBqwB,EAAOC,aAAalpC,eAAeN,KACpCupC,EAAOC,aAAaxpC,GAAOopB,EAAApmB,QAAGgW,cAAcC,EAAKC,IAErD,MAAM+mB,EAASpW,EAAIugB,YAAYb,EAAOC,aAAaxpC,IAEnD,OADcoB,KAAK4oC,eAAe,CAAC/J,YAOvC7+B,KAAK2oC,eAAiBvkC,KAClB,MAAMwkB,EAAO7qB,OAAO6qB,KAAKxkB,GAEzB,OAAOA,EAAIwkB,EADOH,EAAII,UAAUD,QAIxCzrB,EAAAsgC,YAAYqK,QAAU3qC,EAAA2qC,QAIT3qC,EAAA8rC,OAAS,WAYlBjpC,KAAKkpC,MAAQ,CACTvlC,OAAQ,GACRkjC,QAAS,GACTjjC,MAAO,GACPlD,SAAU,IAGdV,KAAK69B,IAAM,CACPl6B,OAAQ,GACRkjC,QAAS,GACTjjC,MAAO,GACPlD,SAAU,IAGdV,KAAKioC,UAAY,GACjBjoC,KAAKkoC,UAAY,GAEjBloC,KAAK89B,YAAc,CACfn6B,OAAQ,GACRC,MAAO,GACPlD,SAAU,IAGdV,KAAKmpC,SAAW,IAAIhsC,EAAAugC,QAAQ19B,KAAK69B,IAAK79B,KAAK89B,aAC3C99B,KAAKopC,SAAW,IAAIjsC,EAAA2qC,QAAQ9nC,KAAK69B,IAAK79B,KAAKioC,UACvCjoC,KAAKkoC,WAETloC,KAAKqpC,WAAa,WACd,OAAOrpC,KAAKmpC,UAGhBnpC,KAAKspC,WAAa,WACd,OAAOtpC,KAAKopC,UAOhBppC,KAAKupC,eAAiB,SAASnlC,GAC3B,MAAMwkB,EAAO7qB,OAAO6qB,KAAKxkB,GACzB,IAAK,IAAI/G,EAAI,EAAGA,EAAIurB,EAAKrnB,OAAQlE,IAC7B2C,KAAKwpC,gBAAgB5gB,EAAKvrB,GAAI+G,EAAIwkB,EAAKvrB,MAK/C2C,KAAKwpC,gBAAkB,SAAS7J,EAAe8J,GAC3C,IAAK,IAAIpsC,EAAI,EAAGA,EAAIosC,EAAUloC,OAAQlE,IAClC2C,KAAK0pC,cAAc/J,EAAO8J,EAAUpsC,KAQ5C2C,KAAK0pC,cAAgB,SAAS/J,EAAev7B,GACzC,GAAIpE,KAAK2pC,gBAAgBvlC,GAAM,CAE3B,GAAIA,EAAIlF,eAAe,QAAS,EACW,iBAAbkF,EAAIwlC,KAAoB,CAACxlC,EAAIwlC,MACjDxlC,EAAIwlC,MACCv/B,QAAQw/B,IACX7pC,KAAK8pC,WAAWnK,EAAOkK,GACvBzlC,EAAMpE,KAAK+pC,UAAU3lC,EAAKpE,KAAKgqC,QAAQrK,EAAOkK,IAG9C7hB,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,gBAAkB4nC,EAAQ,kBACxBhrB,KAAKC,UAAU1a,MASjC,OAHIu7B,IAAU3X,EAAApmB,QAAGiL,YAAa7M,KAAKiqC,iBAAiB7lC,GAEpDpE,KAAKkqC,YAAYvK,EAAOv7B,GACjBA,EAGP,OAAO,MAKfpE,KAAK2pC,gBAAkB,CAACvlC,KACfA,EAAIlF,eAAe,UACpB8oB,EAAApmB,QAAGK,IAAI,SAAU,uDACwB4c,KAAKC,UAAU1a,OACjD,IAMfpE,KAAKiqC,iBAAmB,CAAC7lC,IAChBA,EAAIlF,eAAe,UACpBkF,EAAIrC,KAAOqC,EAAIxG,QAKvBoC,KAAK9B,IAAM,EAACyhC,EAAe/hC,IAAyBoC,KAAK69B,IAAI8B,GAAO/hC,IAGpEoC,KAAKgqC,QAAU,EAACrK,EAAe/hC,IAAyBoC,KAAKkpC,MAAMvJ,GAAO/hC,IAI1EoC,KAAKmqC,oBAAsB,EAACxK,EAAev7B,KACvCpE,KAAKkpC,MAAMvJ,GAAOv7B,EAAIxG,MAAQwG,IAIlCpE,KAAKkqC,YAAc,SAASvK,EAAev7B,GACvC,GAAIpE,KAAK69B,IAAI3+B,eAAeygC,IAGxB,GAFA3/B,KAAKmqC,oBAAoBxK,EAAOv7B,GAE5BA,EAAIlF,eAAe,YACnBc,KAAK89B,YAAY6B,GAAOv7B,EAAIxG,MAAQwG,OAEnC,IAAKA,EAAIlF,eAAe,cAAe,CACxC,GAAIc,KAAKkoC,UAAUhpC,eAAekF,EAAIxG,MAClCoC,KAAKkoC,UAAU9jC,EAAIxG,MAAMgI,KAAKxB,OAE7B,CACD,MAAMgmC,EAAS,GACfA,EAAOxkC,KAAKxB,GACZpE,KAAKkoC,UAAU9jC,EAAIxG,MAAQwsC,EAI/B,GADApqC,KAAK69B,IAAI8B,GAAOv7B,EAAIxG,MAAQwG,EACxBA,EAAIlF,eAAe,UAAW,CAC9B,MAAM2/B,EAASz6B,EAAIy6B,OACd7+B,KAAKioC,UAAU/oC,eAAe2/B,KAC/B7+B,KAAKioC,UAAUpJ,GAAU,IAExB7+B,KAAKioC,UAAUpJ,GAAQ3/B,eAAeygC,KACvC3/B,KAAKioC,UAAUpJ,GAAQc,GAAS,IAEpC3/B,KAAKioC,UAAUpJ,GAAQc,GAAOv7B,EAAIxG,MAAQwG,SAMlD4jB,EAAApmB,QAAGK,IAAI,eAAgB,cACnB,qBAAuB09B,GAE/B3/B,KAAKqqC,mBAAmB1K,EAAOv7B,IAInCpE,KAAKqqC,mBAAqB,EAAC1K,EAAOv7B,KAC9B,GAAIA,EAAIlF,eAAe,SAAU,CAC7B,GAAI8oB,EAAApmB,QAAG6D,cAAc,CAACrB,EAAIkmC,QAAS,CAC/B,MAAM1rB,EAAOC,KAAKC,UAAU1a,GAC5B4jB,EAAApmB,QAAGK,IAAI,SAAU,mDACiB2c,KAEtC,IAAI2rB,GAACA,EAAEC,GAAEA,GAAMpmC,EAAIkmC,MAQnB,GANIlmC,EAAIlF,eAAe,aACnBqrC,EAAKnmC,EAAIqmC,SAETrmC,EAAIlF,eAAe,aACnBsrC,EAAKpmC,EAAIsmC,UAERH,IAAOC,EAAI,CACZ,MAAM5rB,EAAOC,KAAKC,UAAU1a,EAAIkmC,OAChCtiB,EAAApmB,QAAGK,IAAI,SAAU,iDACemC,EAAIxG,aAAaghB,KAEhDxa,EAAIlE,YAAYkE,EAAIlE,UAAY,IACrCkE,EAAIlE,WAAa,YAAcqqC,EAAGh1B,cAC9B,YAAci1B,EAAGj1B,cAErBnR,EAAIlF,eAAe,UACfkF,EAAIlF,eAAe,SACnB8oB,EAAApmB,QAAGO,aAAaw9B,EAAOv7B,EAAIxG,KAAMwG,EAAIu4B,MACjCv4B,EAAIumC,YACJ3iB,EAAApmB,QAAGO,aAAaw9B,EAAOv7B,EAAIrC,KAAMqC,EAAIu4B,OAIzC3U,EAAApmB,QAAGO,aAAaw9B,EAAOv7B,EAAIrC,KAAMqC,EAAIu4B,OAGzCv4B,EAAIlF,eAAe,eACfkF,EAAIlF,eAAe,SACnB8oB,EAAApmB,QAAGC,aAAa89B,EAAOv7B,EAAIxG,KAAMwG,EAAIlE,WACjCkE,EAAIumC,YACJ3iB,EAAApmB,QAAGC,aAAa89B,EAAOv7B,EAAIrC,KAAMqC,EAAIlE,YAIzC8nB,EAAApmB,QAAGC,aAAa89B,EAAOv7B,EAAIrC,KAAMqC,EAAIlE,cAMjDF,KAAK8pC,WAAa,EAACnK,EAAeiL,MAC1B5qC,KAAKkpC,MAAMhqC,eAAeygC,IACnB3/B,KAAKkpC,MAAMvJ,GAAOzgC,eAAe0rC,IAMhD5qC,KAAK+pC,UAAY,EAAC3lC,EAAaymC,KAC3B,IAAK,MAAM/oC,KAAQ+oC,EACVzmC,EAAIlF,eAAe4C,IACP,eAATA,IACAsC,EAAItC,GAAQ+oC,EAAQ/oC,IAIhC,OAAOsC,IASXpE,KAAK8qC,aAAe,SAASltC,GACzB,OAAIoC,KAAK+qC,OAAO/iB,EAAApmB,QAAGmL,UAAWnP,GACnBoC,KAAKgrC,WAAWptC,GAElBoC,KAAK+qC,OAAO/iB,EAAApmB,QAAGiL,WAAYjP,GACzBoC,KAAKirC,YAAYrtC,GAErB,MAGXoC,KAAKirC,YAAc,SAASrtC,GACxB,OAAOoC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGiL,WAAYjP,IAG/CoC,KAAKgrC,WAAa,SAASptC,GACvB,OAAOoC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGmL,UAAWnP,IAG9CoC,KAAKwvB,cAAgB,SAAS5xB,GAC1B,OAAOoC,KAAK6vB,gBAAgB7H,EAAApmB,QAAGkL,UAAWlP,IAG9CoC,KAAKkrC,QAAU,SAASttC,GACpB,OAAOoC,KAAK+qC,OAAO/iB,EAAApmB,QAAGmL,UAAWnP,IAGrCoC,KAAK+qC,OAAS,SAASpL,EAAe/hC,GAClC,OAAOoC,KAAKmrC,SAASxL,EAAO/hC,IAMhCoC,KAAK6vB,gBAAkB,SAAS8P,EAAe/hC,GAC3C,OAAKoC,KAAKmrC,SAASxL,EAAO/hC,GAKnBoC,KAAKmpC,SAAStZ,gBAAgB8P,EAAO/hC,IAJxCoqB,EAAApmB,QAAGK,IAAI,SAAU,4BACH09B,WAAe/hC,oBACtB,OAMfoC,KAAK2nC,gBAAkB,EAAChI,EAAOv7B,IAC3BpE,KAAKmpC,SAASxB,gBAAgBhI,EAAOv7B,IAOzCpE,KAAKmrC,SAAW,EAACxL,EAAO/hC,OAChBoC,KAAK69B,IAAI3+B,eAAeygC,KACpB3/B,KAAK69B,IAAI8B,GAAOzgC,eAAetB,OAInCoC,KAAK89B,YAAY6B,GAAO/hC,IAQhCoC,KAAKqoC,MAAQ,CAACC,GAAoBtoC,KAAKopC,SAASf,MAAMC,IAEtDtoC,KAAK0oC,UAAY,CAACJ,GAAoBtoC,KAAKopC,SAASV,UAAUJ,IAE9DtoC,KAAKmK,OAAS,SAASw1B,EAAOhhB,GAC1B,OAAO3e,KAAKopC,SAASZ,oBAAoB7I,EAAOhhB,IAGpD3e,KAAKorC,YAAc,SAASzsB,GACxB,OAAO3e,KAAKopC,SAASZ,oBAAoBxgB,EAAApmB,QAAGmL,UAAW4R,IAG3D3e,KAAKqrC,cAAgB,CAAC/C,IAClB,MAAM1qC,EAAO0qC,EAAM1qC,KACb+hC,EAAQ2I,EAAM3I,MACdd,EAASyJ,EAAMzJ,OAErB,GAAIc,GAAS3/B,KAAK89B,YAAY6B,GAAQ,CAClC,IAAK/hC,EACD,OAAOG,OAAOutC,OAAOtrC,KAAK89B,YAAY6B,IAErC,CACD,MAAMp1B,EAAQvK,KAAK89B,YAAY6B,GAAO/hC,GACtC,GAAI2M,EAAQ,MAAO,CAACA,SAGnBo1B,GAASd,GACd7W,EAAApmB,QAAGK,IAAI,UAAW,gBACd,uCAER,MAAO,KAQXjC,KAAKurC,kBAAoBnnC,KACrB,MAAMykC,EAAY7oC,KAAKopC,SAASR,eAAexkC,GAC/C,OAAIykC,EACO7oC,KAAKmpC,SAASxB,gBAAgB3f,EAAApmB,QAAGiL,WAAYg8B,GAEjD,OAMX7oC,KAAKwrC,0BAA4B,SAAS3zB,EAAKC,EAAK1T,GAChD,MAAMqnC,EAAazrC,KAAKopC,SAASL,uBAAuBlxB,EAAKC,GAC7D,OAAI2zB,EACOzrC,KAAKmpC,SAASxB,gBAAgB3f,EAAApmB,QAAGiL,WAAY4+B,GAE9CzjB,EAAApmB,QAAG6D,cAAc,CAACrB,IAGrB,KAFIpE,KAAKurC,kBAAkBnnC,IAYtCpE,KAAK0rC,iBAAmB,CAACtnC,IACrB,MAAMykC,EAAY7oC,KAAKopC,SAASN,cAAc1kC,GAC9C,OAAIykC,EACO7oC,KAAKmpC,SAASxB,gBAAgB,QAASkB,GAE3C,OAGX7oC,KAAKymB,OAAS,WACV,MAAO,CACHkX,GAAI39B,KAAK69B,OAKrB1gC,EAAAsgC,YAAYwL,OAAS9rC,EAAA8rC,OAER9rC,EAAA6tC,WAAa,SAASW,GAC/B,MAAM1c,EAAS9xB,EAAAsgC,YAAYmO,YACrBC,EAAU5c,EAAOoa,aACvB,MAA2B,iBAAhBsC,EACAE,EAAQb,WAAWW,IAG1B1c,EAAOya,cAAc1hB,EAAApmB,QAAGmL,UAAW4+B,GAC5BE,EAAQlE,gBAAgB3f,EAAApmB,QAAGmL,UAAW4+B,KAIxCxuC,EAAAyuC,UAAY,WACrB,IAAKzuC,EAAAsgC,YAAYqO,eAAgB,CAC7B,MAAM7c,EAAS,IAAI9xB,EAAA8rC,OACnBha,EAAOsa,eAAepM,EAAA4O,SAEtB,MAAMC,EAAUntB,KAAKC,UAAUie,EAAAkP,SACzBC,EAAartB,KAAKstB,MAAMH,GAC9BhP,EAAAoP,kBAAkBF,EAAWvoC,QAE7BsrB,EAAOsa,eAAe2C,GACtB/uC,EAAAsgC,YAAYqO,eAAiB7c,EAE7B,MAAMod,EAAa7O,EAAA8O,SAASC,UAAU,KACtCtd,EAAOsa,eAAe,CAAC5lC,OAAQ0oC,IAEnC,OAAOlvC,EAAAsgC,YAAYqO,gBAEvB3uC,EAAAsgC,YAAYmO,UAAYzuC,EAAAyuC,6KC/yCxB,MAAA5jB,EAAAC,EAAAhrB,EAAA,IAiBA,MAAa+pB,EAuBTqB,cACIroB,KAAKwsC,WAAa,GAClBxsC,KAAKysC,YAAc,EACnBzsC,KAAK0sC,YAAc,EAEnB1sC,KAAK2sC,aAAe,KACpB3sC,KAAK4sC,aAAe,KAEpB5sC,KAAK6sC,eAAiB,GAItB7sC,KAAK8sC,gBAAkB,EA/BpBzkB,iBAIH,OAHKrB,EAAU+lB,eACX/lB,EAAU+lB,aAAe,IAAI/lB,GAE1BA,EAAU+lB,aA+Bd1kB,kBACH,OAAOroB,KAAKysC,YAGTpkB,uBACH,OAAOtqB,OAAO6qB,KAAK5oB,KAAKwsC,YAAYjrC,OAKjC8mB,UAAUyN,EAAiB3wB,GAC9B,GAAK6iB,EAAApmB,QAAG6D,cAAc,CAACqwB,IAgBnB9N,EAAApmB,QAAGiE,iBAAiB,uBAChB,4BAA6BiwB,QAVjC,KANE91B,KAAK8sC,gBAMH9sC,KAAKwsC,WAAWttC,eAAe42B,GAAU,CACzC91B,KAAKgtC,cAAe,EACpB,MAAMC,EAASjtC,KAAKwsC,WAAW1W,GAC/B,IAAK,IAAIz4B,EAAI,EAAG6vC,EAAMD,EAAO1rC,OAAQlE,EAAI6vC,EAAK7vC,IAC1C4vC,EAAO5vC,GAAG8vC,OAAOrX,EAAS3wB,GAQT,IAAzBnF,KAAK8sC,kBACL9sC,KAAKgtC,cAAe,EAEhBhtC,KAAK6sC,eAAetrC,OAAS,IAC7BvB,KAAK6sC,eAAexiC,QAAQjG,IACxBpE,KAAKotC,eAAehpC,KAExBpE,KAAK6sC,eAAiB,OAG5B7sC,KAAK8sC,gBAIJzkB,YAAYyN,EAAS1xB,GACxB,GAAK4jB,EAAApmB,QAAG6D,cAAc,CAACqwB,IAyBnB9N,EAAApmB,QAAGK,IAAI,YAAa,cAAe,qCAxBnC,GAAImC,EAAIlF,eAAe,WAAakF,EAAIsxB,UAAW,CAC/C,GAAI11B,KAAKwsC,WAAWttC,eAAe42B,GAAU,EAE1B,IADD91B,KAAKwsC,WAAW1W,GAAS/V,QAAQ3b,IAE3CpE,KAAKwsC,WAAW1W,GAASlwB,KAAKxB,QAIlCpE,KAAKwsC,WAAW1W,GAAW,GAC3B91B,KAAKwsC,WAAW1W,GAASlwB,KAAKxB,KAEhCpE,KAAKysC,YACFroC,EAAIlF,eAAe,gBACpBkF,EAAIipC,WAAartC,KAAK0sC,mBAGzB,CACD,IAAIroC,EAAM,YAAcyxB,EACxBzxB,GAAO,gBAAkBwa,KAAKC,UAAU1a,GACxCC,GAAO,yDACP2jB,EAAApmB,QAAGK,IAAI,YAAa,cAAeoC,IAQxCgkB,WAAWjkB,GACd,IAAImG,GAAQ,EAMZ,OALAvK,KAAKstC,aAAalpC,EAAKmpC,IAGnBhjC,GAAQ,IAELA,EAIJ8d,aAAajkB,EAAK4qB,GACrB,MAAMnY,EAAKzS,EAAIipC,WACCtvC,OAAO6qB,KAAK5oB,KAAKwsC,YACzBniC,QAAQmjC,IACExtC,KAAKwsC,WAAWgB,GAAKhhB,UAAUihB,GACzCA,EAAOJ,aAAex2B,IACb,GACTmY,EAAG5qB,EAAKopC,KAQbnlB,eAAejkB,GAClB,GAAIA,EAAIlF,eAAe,cAAe,CAClC,GAAIc,KAAKgtC,aAEL,YADAhtC,KAAK6sC,eAAejnC,KAAKxB,GAG7B,IAAIspC,EAAW,EACf,MAAM72B,EAAKzS,EAAIipC,WAECtvC,OAAO6qB,KAAK5oB,KAAKwsC,YACzBniC,QAAQmjC,IACZ,MAAMtuB,EAAQlf,KAAKwsC,WAAWgB,GAAKhhB,UAAUihB,GACzCA,EAAOJ,aAAex2B,GACtBqI,GAAS,IAITlf,KAAKwsC,WAAWgB,GAAK9gB,OAAOxN,EAAO,KACjCwuB,IACA1tC,KAAKysC,YAC6B,IAAhCzsC,KAAKwsC,WAAWgB,GAAKjsC,eACdvB,KAAKwsC,WAAWgB,MAIlB,IAAbE,GACA1lB,EAAApmB,QAAG+C,KAAK,YAAa,+BACHP,EAAIipC,+BAEnBjpC,EAAIipC,eAEV,CACD,MAAMzuB,EAAOC,KAAKC,UAAU1a,GAC5B4jB,EAAApmB,QAAGK,IAAI,YAAa,uDACsB2c,MAI3CyJ,YACH,GAAKroB,KAAKgtC,aAgBNhlB,EAAApmB,QAAGK,IAAI,YAAa,YAChB,oDAjBgB,CACpB,MAAM0rC,EAA0C,GAChC5vC,OAAO6qB,KAAK5oB,KAAKwsC,YACzBniC,QAAQmjC,IACqBxtC,KAAKwsC,WAAWgB,GACpCnjC,QAAQujC,IACjBD,EAAaC,EAASP,YAAcO,MAI5C7vC,OAAOutC,OAAOqC,GAActjC,QAAQujC,IAChC5tC,KAAKotC,eAAeQ,MAWzBvlB,aAAayN,GAChB,OAAI91B,KAAKwsC,WAAWttC,eAAe42B,GACxB91B,KAAKwsC,WAAW1W,GAAShN,QAE7B,GAGJT,iBACHtqB,OAAO6qB,KAAK5oB,KAAKwsC,YAAYniC,QAAQmjC,IACjCxlB,EAAApmB,QAAGgD,4BAA4BipC,OAAOL,MACtCxlB,EAAApmB,QAAGgD,KAAK5E,KAAKwsC,WAAWgB,OAvMjBxmB,EAAAnQ,GAAa,EAXhC1Z,EAAA6pB,8BClBA,SAAA8mB,GAqJA,SAAAC,IACA,IAAA5vC,EACA,IACAA,EAAAhB,EAAA6wC,QAAA7pC,MACG,MAAAygB,IAOH,OAJAzmB,QAAA,IAAA2vC,GAAA,QAAAA,IACA3vC,EAAA2vC,EAAAG,IAAAC,OAGA/vC,GA1JAhB,EAAAC,EAAAD,QAA2BF,EAAQ,MACnCiI,IA8GA,WAGA,uBAAAV,SACAA,QAAAU,KACAipC,SAAAlvC,UAAAmvC,MAAA5wC,KAAAgH,QAAAU,IAAAV,QAAA6pC,YAlHAlxC,EAAAmxC,WAqEA,SAAAnpC,GACA,IAAAopC,EAAAvuC,KAAAuuC,UASA,GAPAppC,EAAA,IAAAopC,EAAA,SACAvuC,KAAAwuC,WACAD,EAAA,WACAppC,EAAA,IACAopC,EAAA,WACA,IAAApxC,EAAAsxC,SAAAzuC,KAAAk8B,OAEAqS,EAAA,OAEA,IAAA7wC,EAAA,UAAAsC,KAAAsqC,MACAnlC,EAAAunB,OAAA,IAAAhvB,EAAA,kBAKA,IAAAwhB,EAAA,EACAwvB,EAAA,EACAvpC,EAAA,GAAAwpC,QAAA,uBAAAlf,GACA,OAAAA,IACAvQ,IACA,OAAAuQ,IAGAif,EAAAxvB,MAIA/Z,EAAAunB,OAAAgiB,EAAA,EAAAhxC,IAlGAP,EAAAyxC,KA2HA,SAAAC,GACA,IACA,MAAAA,EACA1xC,EAAA6wC,QAAAlzB,WAAA,SAEA3d,EAAA6wC,QAAA7pC,MAAA0qC,EAEG,MAAAjqB,MAjIHznB,EAAA4wC,OACA5wC,EAAAoxC,UA2BA,WAIA,uBAAAzoB,eAAAgoB,SAAA,aAAAhoB,OAAAgoB,QAAA/rC,KACA,SAKA,0BAAA+sC,mBAAAC,iBAAAD,SAAAC,gBAAAtnB,OAAAqnB,SAAAC,gBAAAtnB,MAAAunB,kBAEA,oBAAAlpB,eAAAthB,UAAAshB,OAAAthB,QAAAyqC,SAAAnpB,OAAAthB,QAAA0qC,WAAAppB,OAAAthB,QAAA2qC,QAGA,oBAAAC,qBAAAC,WAAAD,UAAAC,UAAA95B,cAAAka,MAAA,mBAAAtZ,SAAAm5B,OAAAC,GAAA,SAEA,oBAAAH,qBAAAC,WAAAD,UAAAC,UAAA95B,cAAAka,MAAA,uBA3CAtyB,EAAA6wC,QAAA,oBAAAwB,aACA,IAAAA,OAAAxB,QACAwB,OAAAxB,QAAAyB,MAsKA,WACA,IACA,OAAA3pB,OAAA4pB,aACG,MAAA9qB,KAxKH+qB,GAMAxyC,EAAAyyC,OAAA,CACA,gBACA,cACA,YACA,aACA,aACA,WAmCAzyC,EAAA0yC,WAAArlC,EAAA,SAAAslC,GACA,IACA,OAAAjxB,KAAAC,UAAAgxB,GACG,MAAA7tC,GACH,qCAAAA,EAAA8jC,UAqGA5oC,EAAA4yC,OAAAhC,wGCpKA,MAAAiC,EAAA/yC,EAAA,GACAogC,EAAApgC,EAAA,GAEaE,EAAA8yC,KAAqC,GAElD,MAAMC,EAAMnyC,OAAOwT,OAEb0d,EAAS+gB,EAAAvS,YAAYmO,YAI3BzuC,EAAA8yC,KAAKE,IAAMD,EAAIjhB,EAAOO,cAAc,QACpCryB,EAAA8yC,KAAKG,OAASF,EAAIjhB,EAAOO,cAAc,WACvCryB,EAAA8yC,KAAKI,MAAQH,EAAIjhB,EAAOO,cAAc,UAEtCryB,EAAA8yC,KAAKK,MAAQJ,EAAIjhB,EAAOO,cAAc,UACtCryB,EAAA8yC,KAAKM,WAAaL,EAAIjhB,EAAOO,cAAc,gBAC3CryB,EAAA8yC,KAAKO,UAAYN,EAAIjhB,EAAOO,cAAc,aAC1CryB,EAAA8yC,KAAKQ,KAAOP,EAAIjhB,EAAOO,cAAc,SACrCryB,EAAA8yC,KAAKS,KAAOR,EAAIjhB,EAAOO,cAAc,SACrCryB,EAAA8yC,KAAKU,KAAOT,EAAIjhB,EAAOO,cAAc,SACrCryB,EAAA8yC,KAAKW,IAAMV,EAAIjhB,EAAOO,cAAc,QACpCryB,EAAA8yC,KAAKY,KAAOX,EAAIjhB,EAAOO,cAAc,SACrCryB,EAAA8yC,KAAKa,YAAcZ,EAAIjhB,EAAOO,cAAc,qBAC5CryB,EAAA8yC,KAAKc,UAAYb,EAAIjhB,EAAOO,cAAc,cAC1CryB,EAAA8yC,KAAKe,iBAAmBd,EAAIjhB,EAAOO,cAAc,0BACjDryB,EAAA8yC,KAAKgB,WAAaf,EAAIjhB,EAAOO,cAAc,eAC3CryB,EAAA8yC,KAAKiB,kBAAoBhB,EAAIjhB,EAAOO,cAAc,2BAClDryB,EAAA8yC,KAAKkB,MAAQjB,EAAIjhB,EAAOO,cAAc,UACtCryB,EAAA8yC,KAAKmB,KAAOlB,EAAIjhB,EAAOO,cAAc,SACrCryB,EAAA8yC,KAAKoB,UAAYnB,EAAIjhB,EAAOO,cAAc,sBAE1CryB,EAAA8yC,KAAKqB,OAASpB,EAAIjhB,EAAOO,cAAc,kBAEvCryB,EAAA8yC,KAAKsB,MAAQrB,EAAIjhB,EAAOO,cAAc,UACtCryB,EAAA8yC,KAAKuB,aAAetB,EAAIjhB,EAAOO,cAAc,gBAC7CryB,EAAA8yC,KAAKwB,WAAavB,EAAIjhB,EAAOO,cAAc,cAC3CryB,EAAA8yC,KAAKyB,YAAcxB,EAAIjhB,EAAOO,cAAc,eAC5CryB,EAAA8yC,KAAK0B,YAAczB,EAAIjhB,EAAOO,cAAc,eAC5CryB,EAAA8yC,KAAK2B,aAAe1B,EAAIjhB,EAAOO,cAAc,gBAE7CryB,EAAA8yC,KAAK4B,KAAO3B,EAAI,IAAI7S,EAAA1F,YAAY,SAChCx6B,EAAA8yC,KAAK6B,YAAc5B,EAAI,IAAI7S,EAAA1F,YAAY,eACvCx6B,EAAA8yC,KAAK8B,UAAY7B,EAAI,IAAI7S,EAAA1F,YAAY,aACrCx6B,EAAA8yC,KAAK+B,WAAa9B,EAAI,IAAI7S,EAAA1F,YAAY,cACtCx6B,EAAA8yC,KAAKgC,SAAW/B,EAAI,IAAI7S,EAAA1F,YAAY,YACpCx6B,EAAA8yC,KAAKiC,YAAchC,EAAI,IAAI7S,EAAA1F,YAAY,eACvCx6B,EAAA8yC,KAAKkC,WAAajC,EAAI,IAAI7S,EAAA1F,YAAY,cAGtCx6B,EAAA8yC,KAAKh7B,MAAQi7B,EAAIjhB,EAAOO,cAAc,UACtCryB,EAAA8yC,KAAKmC,aAAelC,EAAIjhB,EAAOO,cAAc,iBAC7CryB,EAAA8yC,KAAKoC,KAAOnC,EAAIjhB,EAAOO,cAAc,SAExBryB,EAAAm1C,SAAgB,GAE7Bn1C,EAAAm1C,SAASC,cAAgB,GACzBp1C,EAAAm1C,SAASE,gBAAkB,GAC3Br1C,EAAAm1C,SAASG,gBAAkB,GAC3Bt1C,EAAAm1C,SAASI,mBAAqB,GAE9B,IAAIC,EAAY,EAChB50C,OAAO6qB,KAAKzrB,EAAA8yC,MAAM5lC,QAAQzL,IACtB,MAAMmD,EAAO5E,EAAA8yC,KAAKrxC,GAAK4B,UACvBrD,EAAAm1C,SAASC,cAAcxwC,GAAQ5E,EAAA8yC,KAAKrxC,GACpCzB,EAAAm1C,SAASE,gBAAgBzwC,GAAQ4wC,EACjCx1C,EAAAm1C,SAASG,gBAAgBE,GAAa5wC,EACtC5E,EAAAm1C,SAASI,mBAAmBC,GAAax1C,EAAA8yC,KAAKrxC,KAC5C+zC,8TCrEN3oB,EAAA/sB,EAAA,KAEA+sB,EAAA/sB,EAAA,KACA,MAAAmgC,EAAAngC,EAAA,IA0BQE,EAAA0qC,MA1BAzK,EAAAyK,MAER7d,EAAA/sB,EAAA,KACA+sB,EAAA/sB,EAAA,KAEA,MAAA21C,EAAA31C,EAAA,IACA+sB,EAAA/sB,EAAA,KAEA,MAAA41C,EAAA51C,EAAA,IACA+sB,EAAA/sB,EAAA,KAEA,MAAA61C,EAAA1e,EAAAn3B,EAAA,KACA+sB,EAAA/sB,EAAA,KAEAmgC,EAAAyK,MAAMkL,OAASD,EAAGE,YAClB5V,EAAAyK,MAAMoL,UAAYH,EAAGI,eACrB9V,EAAAyK,MAAMsL,SAAWL,EAAGM,cACpBhW,EAAAyK,MAAMwL,aAAeP,EAAGQ,kBACxBlW,EAAAyK,MAAM0L,YAAcT,EAAGU,iBACvBpW,EAAAyK,MAAM4L,OAASX,EAAGY,YAClBtW,EAAAyK,MAAM8L,MAAQb,EAAGc,WACjBxW,EAAAyK,MAAMgM,MAAQf,EAAGgB,WACjB1W,EAAAyK,MAAMkM,MAAQjB,EAAGkB,WACjB5W,EAAAyK,MAAMoM,QAAUpB,EAAAqB,aAChB9W,EAAAyK,MAAMsM,QAAUvB,EAAAwB,yVC5BhB,MAAApsB,EAAAC,EAAAhrB,EAAA,IACAs5B,EAAAt5B,EAAA,IACAo3C,EAAAp3C,EAAA,IACA8sB,EAAA9sB,EAAA,IACAogB,EAAApgB,EAAA,GACAo3B,EAAAp3B,EAAA,GAGAq3C,EAAAr3C,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,KAoBM8pB,EAAOsN,EAAArN,UAAUC,WACjBpa,WAACA,EAAUC,UAAEA,EAASC,UAAEA,GAAaib,EAAApmB,QAErC6mB,EAAMpL,EAAAC,OAAOC,SAOnBpgB,EAAAo3C,cAAA,MAIIlsB,YAAYtmB,GACR/B,KAAKw0C,OAASzyC,EAGXsmB,UACHL,EAAApmB,QAAGslB,QAAQlnB,KAAKqE,KAGbgkB,YACH,OAAOroB,KAAKw0C,OAGTnsB,SACH,MAAO,CACHmsB,OAAQx0C,KAAKy0C,YACbpwC,IAAKrE,KAAKqE,OAiCtBlH,EAAAu3C,MAAA,cAA2Bne,EAAAS,OAEhB3O,uBACH,OAAOkO,EAAAS,OAAO2d,iBAalBtsB,cACI6O,QACAl3B,KAAKgkB,KAAO,KACZhkB,KAAK40C,QAAU,KAIf50C,KAAK60C,GAAK,CACNlxC,OAAQ,GACRjD,SAAU,GACVkD,MAAO,IAGX5D,KAAK80C,SAAW,EAKhB90C,KAAK+0C,WAAa,GAElB/0C,KAAKg1C,SAAW,CACZC,kBAAkB,EAClBC,iBAAiB,GAGrBl1C,KAAKsgB,IAAI,IAAI6J,EAAUgrB,MAGpB9sB,eAAe+sB,GAAmBp1C,KAAK80C,SAAWM,EAElD/sB,iBACH,OAAOroB,KAAK80C,SAGTzsB,YACH,OAAOroB,KAAK40C,QAGTvsB,gBACH,MAAMgtB,EAAgBr1C,KAAKqW,YAC3B,GAAIg/B,EAAe,CACf,GAAKA,EAA8Bh/B,UAC/B,OAAOg/B,EAAch/B,YAEzB2R,EAAApmB,QAAGK,IAAI,QAAS,qCACS4c,KAAKC,UAAUu2B,MAE5C,OAAO,KAGJhtB,UAAU9C,GACRyC,EAAApmB,QAAG6D,cAAc,CAAC8f,IAInByC,EAAApmB,QAAGK,IAAI,YAAa,YAChB,0BAJJjC,KAAK40C,QAAUrvB,EAQhB8C,YAA0B,OAAOroB,KAAK60C,GAAGlxC,OACzC0kB,WAAwB,OAAOroB,KAAK60C,GAAGjxC,MACvCykB,cAA8B,OAAOroB,KAAK60C,GAAGn0C,SAG7C2nB,YACH,MAAM1mB,EAAM,GAMZ,OALA3B,KAAK60C,GAAGn0C,SAAS2J,QAAQ4jB,IACjBjuB,KAAKs1C,UAAUrnB,IACftsB,EAAIiE,KAAKqoB,KAGVtsB,EAGJ0mB,cACH,MAAM1mB,EAAM,GAOZ,OANA3B,KAAK60C,GAAGn0C,SAAS2J,QAAQ4jB,IACrB,GAAuB,YAAnBA,EAAKvsB,UAAyB,CAC9B,MAAM6zC,EAAsBtnB,EAC5BtsB,EAAIiE,KAAK2vC,MAGV5zC,EAGJ0mB,iBACH,MAAMmtB,EAAO,GAOb,OANAx1C,KAAK60C,GAAGn0C,SAAS2J,QAAQ4jB,IACrB,GAAuB,eAAnBA,EAAKztB,UAA4B,CACjC,MAAM+0C,EAAsBtnB,EAC5BunB,EAAK5vC,KAAK2vC,MAGXC,EAGJntB,UAAU4F,GACb,MAAO,kBAAoB4I,KAAK5I,EAAKvsB,WAGlC2mB,OAAOhT,GAAqBrV,KAAKgkB,KAAO3O,EACxCgT,SAAmB,OAAOroB,KAAKgkB,KAG/BqE,iBAAiBtQ,GAChBiQ,EAAApmB,QAAG6D,cAAc,CAACsS,KAClBiQ,EAAApmB,QAAGK,IAAI,YAAa,YAAa,yBAGrC,MAAMwzC,EAAYz1C,KAAK01C,YACvB,IAAK,IAAIr4C,EAAI,EAAGA,EAAIo4C,EAAUl0C,OAAQlE,IAClC,GAAIo4C,EAAUp4C,GAAG67B,mBAAqBnhB,EAClC,OAAO09B,EAAUp4C,GAGzB,OAAO,KAQJgrB,UAAUmQ,EAAuBviB,EAAWC,GAC/C,GAAK8R,EAAApmB,QAAG6D,cAAc,CAACwQ,EAAGC,IActB8R,EAAApmB,QAAGK,IAAI,YAAa,YAChB,wCAfuB,CAC3B,GAAIjC,KAAKgkB,KAAK6J,MAAM5X,EAAGC,GAIrB,OAHAsiB,EAAOmd,YAAY31C,MAEnBA,KAAKgkB,KAAK4xB,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKsB,OAC5BvxC,KAAK61C,kBAAkB7tB,EAAApmB,QAAGkL,UAAW0rB,EAAQviB,EAAGC,GAEpD,CACH,MAAM7R,SAAa4R,KAAKC,uBACxB8R,EAAApmB,QAAGK,IAAI,YAAa,eACboC,WAAarE,KAAKgkB,KAAK/M,eAAejX,KAAKgkB,KAAK9M,SAO7D,OAAO,EAIJmR,UAAUpe,GACb,MAAMnK,EAAOE,KAAKgkB,KAAKyK,QAAQxkB,EAAM0R,OAAQ1R,EAAM+R,QACnD,GAAIlc,EAAKg2C,gBAAiB,CAEtB,GADmBh2C,EAAKi2C,gBACTC,UAAU/rC,GACrB,OAAO,EAGP+d,EAAApmB,QAAGK,IAAI,QAAS,YAAa,6BAGrC,OAAO,EAIJomB,WAAW4F,EAAMhY,EAAWC,GAC/B,GAAuB,eAAnB+X,EAAKztB,UACL,OAAOR,KAAKi2C,UAAUhoB,EAAMhY,EAAGC,GAEnC,IAAK8R,EAAApmB,QAAG6D,cAAc,CAACwQ,EAAGC,IACtB,OAAOlW,KAAK61C,kBAAkB7tB,EAAApmB,QAAGkL,UAAWmhB,EAAMhY,EAAGC,GAEzD,MAAOggC,EAAOC,GAASn2C,KAAKo2C,iBAM5B,OALIpuB,EAAApmB,QAAG6D,cAAc,CAACywC,EAAOC,MACzBn2C,KAAKq2C,oBACLruB,EAAApmB,QAAGK,IAAI,QAAS,aACZ,qCAEDjC,KAAK61C,kBAAkB7tB,EAAApmB,QAAGkL,UAAWmhB,EAAMioB,EAAOC,GAGtD9tB,cAAc4F,EAAMhY,EAAWC,GAClC,OAAOlW,KAAKs2C,uBAAuBtuB,EAAApmB,QAAGkL,UAAWmhB,EAAMhY,EAAGC,GAGvDmS,UAAUzC,EAAa3P,EAAWC,GACrC,OAAI8R,EAAApmB,QAAGoe,QAAQ4F,GACJ5lB,KAAK+tB,SAASnI,EAAK3P,EAAGC,GAExB8R,EAAApmB,QAAG+U,OAAOiP,GACN5lB,KAAKguB,QAAQpI,EAAK3P,EAAGC,GAEzB8R,EAAApmB,QAAGse,UAAU0F,GACT5lB,KAAKmuB,WAAWvI,EAAK3P,EAAGC,IAGjC8R,EAAApmB,QAAGK,IAAI,QAAS,YACZ,4CAED,GASJomB,QAAQvhB,EAAMmP,EAAYC,GAE7B,IAAK8R,EAAApmB,QAAG6D,cAAc,CAACwQ,EAAGC,IACtB,OAAOlW,KAAK61C,kBAAkB7tB,EAAApmB,QAAGmL,UAAWjG,EAAMmP,EAAGC,GAEzD,MAAOggC,EAAOC,GAASn2C,KAAKo2C,iBAC5B,OAAOp2C,KAAK61C,kBAAkB7tB,EAAApmB,QAAGmL,UAAWjG,EAAMovC,EAAOC,GAItD9tB,WAAWvhB,EAAMmP,EAAWC,GAG/B,OAFYlW,KAAKs2C,uBAAuBtuB,EAAApmB,QAAGmL,UAAWjG,EAAMmP,EAAGC,GAK5DmS,WAAWpe,GACd,MAAMssC,EAAS,IAAIlC,EAAAmC,OACnBvsC,EAAMqW,IAAIi2B,GAKPluB,YAAYjkB,EAAgB6R,EAAWC,GAE1C,MAAM6B,EAAQ3T,EAAIsF,YACX+sC,EAAIC,GAAM,CAACtyC,EAAIuX,OAAQvX,EAAI4X,QAC5Brb,EAAWyD,EAAI6b,cACrB,QAAIlI,EAAMu+B,uBAAuB31C,EAAUyD,EAAKqyC,EAAIC,IACzC12C,KAAK61C,kBAAkBl1C,EAAUyD,EAAK6R,EAAGC,GAYjDmS,SAASpe,EAAOgM,EAAWC,GAE9B,OADA8R,EAAApmB,QAAGuC,MAAMnE,KAAM,4BAA8BiW,EAAI,KAAOC,GACnD8R,EAAApmB,QAAG6D,cAAc,CAACwQ,EAAGC,KAatB8R,EAAApmB,QAAGiE,iBAAiB,kBAAmB,UAAWoQ,GAClD+R,EAAApmB,QAAGiE,iBAAiB,kBAAmB,UAAWqQ,IAC3C,GAdHlW,KAAKgkB,KAAK6J,MAAM5X,EAAGC,IACnBlW,KAAK61C,kBAAkB7tB,EAAApmB,QAAGiL,WAAY5C,EAAOgM,EAAGC,GAChD8R,EAAApmB,QAAGuC,MAAMnE,KAAM,yBAA2BiW,EAAI,OAASC,IAChD,IAGP8R,EAAApmB,QAAGK,IAAI,QAAS,WACZ,kBAAoBgU,EAAI,KAAOC,EAAI,iBAChC,GAaZmS,mBAAmBpe,GACtB+d,EAAApmB,QAAGuC,MAAMnE,KAAM,6BACf,MAAM22C,EAAoB32C,KAAKgkB,KAAK4yB,UACpC,GAAID,EAAUp1C,OAAS,EAAG,CACtB,MAAM20C,EAAQS,EAAU,GAAGh7B,OACrBw6B,EAAQQ,EAAU,GAAG36B,OAC3B,GAAIhc,KAAK61C,kBAAkB7tB,EAAApmB,QAAGiL,WAAY5C,EAAOisC,EAAOC,GAGpD,OAFAnuB,EAAApmB,QAAGuC,MAAMnE,KACL,+BAAiCk2C,EAAQ,KAAOC,IAC7C,OAIXnuB,EAAApmB,QAAGK,IAAI,QAAS,WAAY,gCAEhC,OAAO,EAKJomB,kBAAkB1nB,EAAUyD,EAAK6R,EAAWC,GAC/C,OAAIlW,KAAK60C,GAAG31C,eAAeyB,IACvBX,KAAK60C,GAAGl0C,GAAUiF,KAAKxB,GAClBA,EAAIyyC,YACLzyC,EAAI0yC,MAAM7gC,EAAGC,GACb9R,EAAI2yC,SAAS/2C,OAEjBA,KAAKgkB,KAAK0L,QAAQzZ,EAAGC,EAAGvV,EAAUyD,GAClC2iB,EAAKe,UAAUE,EAAApmB,QAAG4J,qBAAsB,CAACuM,MAAO/X,KAAMoE,MAClDzD,cACG,IAGPqnB,EAAApmB,QAAGK,IAAI,YAAa,+BACLtB,qBAA4Bke,KAAKC,UAAU1a,OAEvD,GAIJikB,eAAe1nB,EAAUyD,GAC5B,OAAIpE,KAAK60C,GAAG31C,eAAeyB,IACvBX,KAAK60C,GAAGl0C,GAAUiF,KAAKxB,GACvBA,EAAI2yC,SAAS/2C,MACb+mB,EAAKe,UAAUE,EAAApmB,QAAG4J,qBAAsB,CAACuM,MAAO/X,KAAMoE,MAClDzD,cACG,IAGPqnB,EAAApmB,QAAGK,IAAI,YAAa,4BACLtB,qBAA4Bke,KAAKC,UAAU1a,OAEvD,GAKJikB,uBACH1nB,EAAUyD,EAAK6R,EAAWC,GAE1B,GAAIlW,KAAK60C,GAAG31C,eAAeyB,GAAW,CAClC,MAAMue,EAAQlf,KAAK60C,GAAGl0C,GAAUof,QAAQ3b,GAExC,OAAI8a,GAAS,GACTlf,KAAK60C,GAAGl0C,GAAU+rB,OAAOxN,EAAO,GAC3B9a,EAAI4yC,WACL5yC,EAAI0yC,MAAM,KAAM,MAChB1yC,EAAI6yC,cAERlwB,EAAKe,UAAUE,EAAApmB,QAAG6J,uBACd,CAACsM,MAAO/X,KAAMoE,MAAKzD,aAChBX,KAAKgkB,KAAKkzB,WAAWjhC,EAAGC,EAAGvV,EAAUyD,KAG5C4jB,EAAApmB,QAAGK,IAAI,YAAa,gEACuBtB,OAExC,GAMX,OAHIqnB,EAAApmB,QAAGK,IAAI,YAAa,oCACLtB,qBAA4Bke,KAAKC,UAAU1a,OAEvD,EAIJikB,kBAAkB1nB,EAAkByD,GACvC,GAAIpE,KAAK60C,GAAG31C,eAAeyB,GAAW,CAClC,MAAMue,EAAQlf,KAAK60C,GAAGl0C,GAAUof,QAAQ3b,GACxC,GAAI8a,GAAS,EAIT,OAHAlf,KAAK60C,GAAGl0C,GAAU+rB,OAAOxN,EAAO,GAChC6H,EAAKe,UAAUE,EAAApmB,QAAG6J,uBACd,CAACsM,MAAO/X,KAAMoE,MAAKzD,cAChB,EAGf,OAAO,EAIJ0nB,YAAYpe,GACf,MAAMiV,EAAQlf,KAAK60C,GAAGlxC,OAAOoc,QAAQ9V,GAC/BgM,EAAIhM,EAAM0R,OACVzF,EAAIjM,EAAM+R,OAChB,QAAIhc,KAAKgkB,KAAKkzB,WAAWjhC,EAAGC,EAAG8R,EAAApmB,QAAGiL,WAAY5C,KAC1CjK,KAAK60C,GAAGlxC,OAAO+oB,OAAOxN,EAAO,IACtB,GAURmJ,aAAape,GAChB,MAAMktC,EAAen3C,KAAKgkB,KAAKozB,gBAAgBntC,GAC/C,IAAK,IAAI5M,EAAI,EAAGA,EAAI85C,EAAa51C,OAAQlE,IACrC85C,EAAa95C,GAAG2nB,cAEpB,OAAOmyB,EAIJ9uB,mBACH,OAAOroB,KAAKgkB,KAAKqzB,mBAMdhvB,UAAUivB,GACbt3C,KAAKu3C,QAAUD,EAGZjvB,YAEH,OADKroB,KAAKu3C,UAAUv3C,KAAKu3C,QAAU,IAC5Bv3C,KAAKu3C,QAGTlvB,YACH,OAAQL,EAAApmB,QAAG6D,cAAc,CAACzF,KAAKu3C,WAC3Bx5C,OAAO6qB,KAAK5oB,KAAKu3C,SAASh2C,OAAS,EAGpC8mB,UAAUzpB,EAAaN,GACrB0B,KAAKu3C,UAAUv3C,KAAKu3C,QAAU,IACnCv3C,KAAKu3C,QAAQ34C,GAAON,EAKjB+pB,UACH,MAAO,CACHkB,IAAK,EAAGC,IAAK,EACbC,IAAKzpB,KAAKwjB,SAASvM,KAAO,EAC1ByS,IAAK1pB,KAAKwjB,SAAStM,KAAO,GAI3BmR,cACH,MAAO,CACHroB,KAAKwjB,SAASvM,KACdjX,KAAKwjB,SAAStM,MAIfmR,WAAW2G,GACdhvB,KAAK+0C,WAAWyC,QAAUxoB,EAGvB3G,gBAAgB2G,GACnBhvB,KAAK+0C,WAAW0C,aAAezoB,EAG5B3G,UAAU2G,GACbhvB,KAAK+0C,WAAW2C,OAAS1oB,EAGtB3G,eAAe2G,GAClBhvB,KAAK+0C,WAAW4C,YAAc3oB,EAG3B3G,UACCroB,KAAK+0C,WAAW71C,eAAe,YAC/Bc,KAAK+0C,WAAWyC,QAAQx3C,MAIzBqoB,eACEroB,KAAKg1C,SAASC,mBACXj1C,KAAK+0C,WAAW71C,eAAe,iBAC/Bc,KAAK+0C,WAAW0C,aAAaz3C,MAEjCA,KAAKg1C,SAASC,kBAAmB,GAIlC5sB,SACCroB,KAAK+0C,WAAW71C,eAAe,WAC/Bc,KAAK+0C,WAAW2C,OAAO13C,MAIxBqoB,cACEroB,KAAKg1C,SAASE,kBACXl1C,KAAK+0C,WAAW71C,eAAe,gBAC/Bc,KAAK+0C,WAAW4C,YAAY33C,MAEhCA,KAAKg1C,SAASE,iBAAkB,GAKjC7sB,kBACH,MAAMsuB,EAAY32C,KAAKwjB,SAASozB,UAChC,OAAID,EAAUp1C,OAAS,EAEZo1C,EADOluB,EAAII,UAAU8tB,IAGzB,KAIJtuB,mBACH,MAAMuvB,EAAa53C,KAAKwjB,SAASq0B,gBACjC,OAAID,EAAWr2C,OAAS,EAEbq2C,EADOnvB,EAAII,UAAU+uB,IAGzB,KAGJvvB,iBACH,MAAMsuB,EAAY32C,KAAKgkB,KAAK4yB,UAC5B,OAAID,EAAUp1C,OAAS,EAGZ,CAFOo1C,EAAU,GAAGh7B,OACbg7B,EAAU,GAAG36B,QAGxB,CAAC,KAAM,MAGXqM,oBACHroB,KAAKwjB,SAAS6yB,oBAIXhuB,eAAele,GACDnK,KAAK60C,GAAGn0C,SAASyJ,OAAOA,GAChCE,QAAQ4jB,IACf,MAAM6pB,EAAM7pB,EAAyBtS,OAC/Bo8B,EAAM9pB,EAAyBjS,OACrChc,KAAKkuB,cAAcD,EAAM6pB,EAAIC,KAI5B1vB,QAAQpS,EAAWC,GACtB,OAAOlW,KAAKgkB,KAAKyK,QAAQxY,EAAGC,GAIzBmS,YAEH,OADeroB,KAAK60C,GAAGlxC,OAAOuiB,KAAKC,GAAKA,EAAEpJ,UAAYoJ,EAAEpJ,YAKrDsL,SACH,MAAMjkB,EAAW,CACb4zC,QAAQ,EACRnhC,GAAI7W,KAAK8W,QACTmhC,YAAaj4C,KAAKk4C,iBAClBv0C,OAAQ,GACRC,MAAO,GACPlD,SAAU,GACV2U,IAAKrV,KAAKwjB,SAASiD,SAEnB0xB,QAASn4C,KAAKg1C,UAgClB,OA7BIh1C,KAAK40C,UACLxwC,EAAImhB,OAASvlB,KAAK40C,QAAQlzC,UACA,iBAAf0C,EAAImhB,QACXyC,EAAApmB,QAAGK,IAAI,YAAa,SAChB,6BAIZmC,EAAIozB,WAAazN,EAAA0N,YAAYz3B,MAEf,CAAC6M,EAAYE,EAAWD,GAChCzC,QAAQ1J,IACVX,KAAK60C,GAAGl0C,GAAU0J,QAAQvI,IACtB,MAAMN,EAAU,CACZyU,EAAGnU,EAAK6Z,OACRzF,EAAGpU,EAAKka,OACR5X,IAAKtC,EAAK2kB,WAIT9lB,IAAaqnB,EAAApmB,QAAGiL,WACjBzI,EAAIzD,GAAUiF,KAAKpE,GAEbA,EAAQ4C,IAAI2Y,UAClB3Y,EAAIzD,GAAUiF,KAAKpE,OAKxB4C,kCCjrBfnH,EAAAkB,EAAAi6C,GAqCA,IAAAC,EAAA,CAIAC,YAAA,WACA,SAAAxJ,SAAAtf,cAAA,UACA+oB,aAAApK,SAAAlvC,UAAAJ,OAIA25C,cAAA,GAEAC,eAAA,GAGAtwB,KAAA,CACAzO,EAAA,CACA,OACA,MACA,MACA,QAEAg/B,EAAA,CACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,SAEAC,EAAA,CACA,QACA,OACA,MACA,MACA,OACA,SAKAC,UAAA,EAEAC,QAAA,EAEAC,cAAA,EAEAC,OAAA,EAEAC,SAAA,GAEAC,UAAA,GAEAC,SAAA,GAEAC,SAAA,GAEAC,WAAA,GAEAC,OAAA,GAEAC,SAAA,GAEAC,aAAA,GAEAC,UAAA,GAEAC,SAAA,GAEAC,WAAA,GAEAC,aAAA,GAEAC,OAAA,GAEAC,QAAA,GAEAC,QAAA,GAEAC,MAAA,GAEAC,SAAA,GAEAC,QAAA,GAEAC,eAAA,GAEAC,UAAA,GAEAC,UAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,SAAA,GAEAC,aAAA,GAEAC,aAAA,GAEAC,UAAA,GAEAC,gBAAA,GAEAC,iBAAA,GAEAC,MAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,KAAA,GAEAC,gBAAA,GAEAC,WAAA,GAEAC,WAAA,GAEAC,WAAA,GAEAC,WAAA,GAEAC,WAAA,IAEAC,WAAA,IAEAC,WAAA,IAEAC,WAAA,IAEAC,WAAA,IAEAC,WAAA,IAEAC,YAAA,IAEAC,OAAA,IAEAC,aAAA,IAEAC,YAAA,IAEAC,WAAA,IAEAC,UAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,MAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,OAAA,IAEAC,YAAA,IAEAC,eAAA,IAEAC,cAAA,IAEAC,eAAA,IAEAC,gBAAA,IAEAC,QAAA,IAEAC,UAAA,IAEAC,WAAA,IAEAC,aAAA,IAEAC,cAAA,IAEAC,cAAA,IAEAC,eAAA,IAEAC,YAAA,IAEAC,QAAA,IAEAC,QAAA,IAEAC,gBAAA,IAEAC,sBAAA,IAEAC,uBAAA,IAEAC,SAAA,IAEAC,SAAA,IAEAC,UAAA,IAEAC,SAAA,IAEAC,cAAA,IAEAC,gBAAA,IAEAC,cAAA,IAEAC,iBAAA,IAEAC,SAAA,IAEAC,QAAA,IAEAC,SAAA,IAGAC,OAAA,GAEAC,QAAA,GAEAC,UAAA,GAEAC,QAAA,GAEAC,SAAA,GAEAC,SAAA,GAEAC,SAAA,GAEAC,SAAA,GAEAC,WAAA,GAEAC,cAAA,GAEAC,UAAA,GAEAC,cAAA,GAEAC,UAAA,GAEAC,SAAA,GAEAC,WAAA,GAEAC,SAAA,IAMAhK,EAAAiK,KAAA,CACAC,UAAA,oBAGAC,UAAA,EACAC,aAAA,EACAC,QAAA,EACAC,QAAA,EAKAC,QAAA,SAAAj5C,EAAAk5C,GACA,IAAAp6C,EAAA,CAAsBq6C,MAAA,EAAAC,OAAA,GACtBC,EAAAhjD,KAAAijD,SAAAt5C,EAAAk5C,GACAK,EAAA,EAEA,QAAA7lD,EAAA,EAAuBA,EAAA2lD,EAAAzhD,OAAmBlE,IAAA,CAC1C,MAAA8lD,EAAAH,EAAA3lD,GACA,OAAA8lD,EAAAphD,MACA,KAAA/B,KAAAwiD,UACAU,GAAAC,EAAA7kD,MAAAiD,OACA,MAEA,KAAAvB,KAAAyiD,aACAh6C,EAAAs6C,SACAt6C,EAAAq6C,MAAA57C,KAAA4Q,IAAArP,EAAAq6C,MAAAI,GACAA,EAAA,GAMA,OAFAz6C,EAAAq6C,MAAA57C,KAAA4Q,IAAArP,EAAAq6C,MAAAI,GAEAz6C,GAMAw6C,SAAA,SAAAt5C,EAAAk5C,GACA,IAAAp6C,EAAA,GAGA26C,EAAA,EACAz5C,EAAAglC,QAAA3uC,KAAAuiD,UAAA,SAAA9yB,EAAA1tB,EAAAnE,EAAAshB,GAEA,IAAAmkC,EAAA15C,EAAAke,UAAAu7B,EAAAlkC,GAeA,OAdAmkC,EAAA9hD,QACAkH,EAAA7C,KAAA,CACA7D,KAAAs2C,EAAAiK,KAAAE,UACAlkD,MAAA+kD,IAKA56C,EAAA7C,KAAA,CACA7D,KAAA,MAAAA,EAAAs2C,EAAAiK,KAAAI,QAAArK,EAAAiK,KAAAK,QACArkD,MAAAV,EAAAoH,SAGAo+C,EAAAlkC,EAAAuQ,EAAAluB,OACA,KAIA,IAAA8hD,EAAA15C,EAAAke,UAAAu7B,GAQA,OAPAC,EAAA9hD,QACAkH,EAAA7C,KAAA,CACA7D,KAAAs2C,EAAAiK,KAAAE,UACAlkD,MAAA+kD,IAIArjD,KAAAsjD,YAAA76C,EAAAo6C,IAIAS,YAAA,SAAAN,EAAAH,GACAA,IAAwBA,EAAAU,KAMxB,IAJA,IAAAlmD,EAAA,EACAmmD,EAAA,EACAC,GAAA,EAEApmD,EAAA2lD,EAAAzhD,QAAA,CAMA,IALA4hD,EAAAH,EAAA3lD,IACA0E,OAAAs2C,EAAAiK,KAAAG,eACAe,EAAA,EACAC,GAAA,GAEAN,EAAAphD,MAAAs2C,EAAAiK,KAAAE,UAAA,CAMA,SAAAgB,GAAA,MAAAL,EAAA7kD,MAAAolD,OAAA,IAAuEP,EAAA7kD,MAAA6kD,EAAA7kD,MAAAupB,UAAA,GAGvE,IAAA3I,EAAAikC,EAAA7kD,MAAAyhB,QAAA,MACA,OAAAb,EAAA,CACAikC,EAAA7kD,MAAA0B,KAAA2jD,kBAAAX,EAAA3lD,EAAA6hB,GAAA,GAIA,IADA,IAAA3I,EAAA4sC,EAAA7kD,MAAAuG,MAAA,IACA0R,EAAAhV,QAAA,MAAAgV,IAAAhV,OAAA,IAAmEgV,EAAAqtC,MACnET,EAAA7kD,MAAAiY,EAAA2N,KAAA,IAIA,GAAAi/B,EAAA7kD,MAAAiD,OAAA,CAKA,GAAAiiD,EAAAL,EAAA7kD,MAAAiD,OAAAshD,EAAA,CAIA,IADA3jC,GAAA,IACA,CACA,IAAA2kC,EAAAV,EAAA7kD,MAAAyhB,QAAA,IAAAb,EAAA,GACA,QAAA2kC,EAA2C,MAC3C,GAAAL,EAAAK,EAAAhB,EAA4D,MAC5D3jC,EAAA2kC,EAGA,OAAA3kC,EACAikC,EAAA7kD,MAAA0B,KAAA2jD,kBAAAX,EAAA3lD,EAAA6hB,GAAA,QAEA,OAAAukC,EAAA,CAEA,IAAAK,GADAX,EAAAH,EAAAS,IACAnlD,MAAAylD,YAAA,KACAZ,EAAA7kD,MAAA0B,KAAA2jD,kBAAAX,EAAAS,EAAAK,GAAA,GACAzmD,EAAAomD,OAGAN,EAAA7kD,MAAA0B,KAAA2jD,kBAAAX,EAAA3lD,EAAAwlD,EAAAW,GAAA,QAKAA,GAAAL,EAAA7kD,MAAAiD,QACA,GAAA4hD,EAAA7kD,MAAAyhB,QAAA,OAAqD0jC,EAAApmD,GAGrDA,SAlCA2lD,EAAAt2B,OAAArvB,EAAA,QApBAA,IA0DA2lD,EAAAp9C,KAAA,CAAqB7D,KAAAs2C,EAAAiK,KAAAG,eAGrB,IAAAuB,EAAA,KACA,IAAA3mD,EAAA,EAAmBA,EAAA2lD,EAAAzhD,OAAmBlE,IAAA,CACtC,IAAA8lD,EACA,QADAA,EAAAH,EAAA3lD,IACA0E,MACA,KAAAs2C,EAAAiK,KAAAE,UAAAwB,EAAAb,EAA+D,MAC/D,KAAA9K,EAAAiK,KAAAG,aACA,GAAAuB,EAAA,CAEA,IADAztC,EAAAytC,EAAA1lD,MAAAuG,MAAA,IACA0R,EAAAhV,QAAA,MAAAgV,IAAAhV,OAAA,IAA2EgV,EAAAqtC,MAC3EI,EAAA1lD,MAAAiY,EAAA2N,KAAA,IAEA8/B,EAAA,MAOA,OAFAhB,EAAAY,MAEAZ,GAWAW,kBAAA,SAAAX,EAAAiB,EAAAH,EAAAI,GACA,IAAAC,EAAA,CACApiD,KAAAs2C,EAAAiK,KAAAG,cAEA2B,EAAA,CACAriD,KAAAs2C,EAAAiK,KAAAE,UACAlkD,MAAA0kD,EAAAiB,GAAA3lD,MAAAupB,UAAAi8B,GAAAI,EAAA,OAGA,OADAlB,EAAAt2B,OAAAu3B,EAAA,IAAAE,EAAAC,GACApB,EAAAiB,GAAA3lD,MAAAupB,UAAA,EAAAi8B,KAMAvwC,MAAAtU,UAAAilC,OAAA3wB,MAAAtU,UAAAilC,QAAA,WACA,OAAAlkC,KAAAuB,OACAvB,KAAAkH,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAA3lB,KAAAuB,SADuB,MAQvBgS,MAAAtU,UAAAolD,UAAA9wC,MAAAtU,UAAAolD,WAAA,WAEA,IADA,IAAA57C,EAAA,GACAzI,KAAAuB,QAAA,CACA,IAAA2d,EAAAlf,KAAA+f,QAAA/f,KAAAkkC,UACAz7B,EAAA7C,KAAA5F,KAAA0sB,OAAAxN,EAAA,OAEA,OAAAzW,GAOAud,OAAA/mB,UAAAqlD,IAAAt+B,OAAA/mB,UAAAqlD,KAAA,SAAAxlD,GACA,OAAAkB,KAAAlB,QAKA+uC,OAAA5uC,UAAA69B,WAAA+Q,OAAA5uC,UAAA69B,YAAA,WACA,OAAA98B,KAAA0jD,OAAA,GAAAhwC,cAAA1T,KAAA6nB,UAAA,IAQAgmB,OAAA5uC,UAAAslD,KAAA1W,OAAA5uC,UAAAslD,MAAA,SAAAC,EAAAjlC,GAKA,IAJA,IAAAklC,EAAAD,GAAA,IACAE,EAAAnlC,GAAA,EAEAngB,EAAA,GACAA,EAAAmC,OAAAmjD,EAAA1kD,KAAAuB,QAA4CnC,GAAAqlD,EAE5C,OADArlD,IAAAyoB,UAAA,EAAA68B,EAAA1kD,KAAAuB,SACAvB,MAQA6tC,OAAA5uC,UAAA0lD,KAAA9W,OAAA5uC,UAAA0lD,MAAA,SAAAH,EAAAjlC,GAKA,IAJA,IAAAklC,EAAAD,GAAA,IACAE,EAAAnlC,GAAA,EAEAngB,EAAA,GACAA,EAAAmC,OAAAmjD,EAAA1kD,KAAAuB,QAA4CnC,GAAAqlD,EAE5C,OAAAzkD,MADAZ,IAAAyoB,UAAA,EAAA68B,EAAA1kD,KAAAuB,UASAssC,OAAA+W,OAAA/W,OAAA+W,QAAA,SAAAC,GACA,IAAAxvC,EAAAw4B,OAAA+W,OAAAvvC,IACAlQ,EAAAoO,MAAAtU,UAAA6pB,MAAAtrB,KAAA6wC,UAAA,GAqBA,OAAAwW,EAAAlW,QAAA,gCAnBA,SAAAlf,EAAAq1B,EAAAC,EAAA7lC,GACA,SAAA2lC,EAAAnB,OAAAxkC,EAAA,GAAiD,OAAAuQ,EAAA5H,UAAA,GACjD,IAAA1iB,EAAA5D,OAA2B,OAAAkuB,EAC3B,IAAArrB,EAAAe,EAAA,GAGA6/C,GADAF,GAAAC,GACAlgD,MAAA,KACAjH,EAAAonD,EAAA5yB,QACA6yB,EAAA5vC,EAAAzX,EAAA2X,eACA,IAAA0vC,EAAsB,OAAAx1B,EAEtB,IACAy1B,GADA9gD,EAAAe,EAAAitB,SACA6yB,GAAA7W,MAAAhqC,EAAA4gD,GAEAG,EAAAvnD,EAAA8lD,OAAA,GAGA,OAFAyB,KAAA5vC,gBAA2C2vC,IAAApoB,cAE3CooB,KAKArX,OAAA+W,OAAAvvC,IAAAw4B,OAAA+W,OAAAvvC,KAAA,CACAjW,EAAA,YAMAyuC,OAAA5uC,UAAA2lD,OAAA/W,OAAA5uC,UAAA2lD,QAAA,WACA,IAAAz/C,EAAAoO,MAAAtU,UAAA6pB,MAAAtrB,KAAA6wC,WAEA,OADAlpC,EAAAigD,QAAAplD,MACA6tC,OAAA+W,OAAAxW,MAAAP,OAAA1oC,IAGApH,OAAAY,SAIAZ,OAAAY,OAAA,SAAAb,GACA,IAAAunD,EAAA,aAEA,OADAA,EAAApmD,UAAAnB,EACA,IAAAunD,IAOAlX,SAAAlvC,UAAAqmD,OAAAnX,SAAAlvC,UAAAqmD,QAAA,SAAA//B,GAGA,OAFAvlB,KAAAf,UAAAlB,OAAAY,OAAA4mB,EAAAtmB,WACAe,KAAAf,UAAAsmD,YAAAvlD,KACAA,MAEA,oBAAA8lB,SACAA,OAAA0/B,sBACA1/B,OAAA0/B,uBACA1/B,OAAA2/B,0BACA3/B,OAAA4/B,6BACA5/B,OAAA6/B,wBACA7/B,OAAA8/B,yBACA,SAAA52B,GAAsB,OAAA62B,WAAA72B,EAAA,SAEtBlJ,OAAAggC,qBACAhgC,OAAAggC,sBACAhgC,OAAAigC,yBACAjgC,OAAAkgC,4BACAlgC,OAAAmgC,uBACAngC,OAAAogC,wBACA,SAAArvC,GAAsB,OAAAsvC,aAAAtvC,KAsBtBwhC,EAAA+N,QAAA,SAAAC,GACA,IAAAC,EAAAxX,SAAAtf,cAAA,UACAxvB,KAAAumD,SAAAD,EAAA/N,WAAA,MACAv4C,KAAAwmD,MAAA,GACAxmD,KAAAymD,QAAA,EACAzmD,KAAA0mD,SAAA,GACA1mD,KAAA2mD,SAAA,KAEA,IAAAC,EAAA,CACA9D,MAAAzK,EAAAG,cACAuK,OAAA1K,EAAAI,eACAoO,WAAA,EACAC,OAAA,OACAC,SAAA,GACAC,QAAA,EACAC,OAAA,EACAC,kBAAA,EACAC,WAAA,YACAC,UAAA,GACA7c,GAAA,OACAC,GAAA,OACA6c,UAAA,GACAC,WAAA,GACAC,QAAA,GACAC,QAAA,KACAC,cAAA,EACAC,UAAA,SAEA,QAAAvoD,KAAAknD,EAA4BO,EAAAznD,GAAAknD,EAAAlnD,GAC5Ba,KAAA2nD,WAAAf,GACA5mD,KAAAkuC,MAAAluC,KAAAkuC,MAAArvC,KAAAmB,MAEAA,KAAA4nD,MAAA5nD,KAAA4nD,MAAA/oD,KAAAmB,MACAwlD,sBAAAxlD,KAAA4nD,QASAvP,EAAA+N,QAAAnnD,UAAAivC,MAAA,SAAAj4B,EAAAC,EAAA2xC,GACA,IAAAjY,EAAA,CAAA5vC,KAAA0mD,SAAAlc,GAAAxqC,KAAA0mD,SAAAnc,IACAvqC,KAAA8nD,KAAA7xC,EAAAC,EAAA,UAAA05B,EAAAiY,EAAAjY,EAAAruC,UAMA82C,EAAA+N,QAAAnnD,UAAA8oD,MAAA,WACA/nD,KAAAwmD,MAAA,GACAxmD,KAAAymD,QAAA,GAMApO,EAAA+N,QAAAnnD,UAAA0oD,WAAA,SAAAtB,GACA,QAAAlnD,KAAAknD,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAC5B,GAAAknD,EAAAvD,OAAAuD,EAAAtD,QAAAsD,EAAAU,UAAAV,EAAAc,YAAAd,EAAAW,SAAAX,EAAAS,OAAA,CACAT,EAAAS,SACA9mD,KAAA2mD,SAAA,IAAAtO,EAAA+N,QAAAC,EAAAS,OAAAhqB,eAAA98B,KAAAumD,WAGA,IAAAyB,GAAAhoD,KAAA0mD,SAAAU,UAAApnD,KAAA0mD,SAAAU,UAAA,QAAApnD,KAAA0mD,SAAAK,SAAA,MAAA/mD,KAAA0mD,SAAAS,WACAnnD,KAAAumD,SAAAyB,OACAhoD,KAAA2mD,SAAAsB,QAAAjoD,KAAA0mD,UACA1mD,KAAAumD,SAAAyB,OACAhoD,KAAAumD,SAAA2B,UAAA,SACAloD,KAAAumD,SAAA4B,aAAA,SACAnoD,KAAAymD,QAAA,EAEA,OAAAzmD,MAOAq4C,EAAA+N,QAAAnnD,UAAAmpD,WAAA,WACA,OAAApoD,KAAA0mD,UAOArO,EAAA+N,QAAAnnD,UAAAopD,aAAA,WACA,OAAAroD,KAAAumD,SAAAD,QASAjO,EAAA+N,QAAAnnD,UAAAqpD,YAAA,SAAAC,EAAAC,GACA,OAAAxoD,KAAA2mD,SAAA2B,YAAAC,EAAAC,EAAAxoD,KAAA0mD,WASArO,EAAA+N,QAAAnnD,UAAAwpD,gBAAA,SAAAF,EAAAC,GACA,OAAAxoD,KAAA2mD,SAAA8B,gBAAAF,EAAAC,EAAAxoD,KAAA0mD,WAQArO,EAAA+N,QAAAnnD,UAAAypD,gBAAA,SAAA9jC,GACA,IAAA3O,EAAAC,EACA0O,EAAA+jC,SACA1yC,EAAA2O,EAAA+jC,QAAA,GAAAC,QACA1yC,EAAA0O,EAAA+jC,QAAA,GAAAE,UAGA5yC,EAAA2O,EAAAgkC,QACA1yC,EAAA0O,EAAAikC,SAGA,IAAAC,EAAA9oD,KAAAumD,SAAAD,OAAAyC,wBAOA,OANA9yC,GAAA6yC,EAAA54B,KACAha,GAAA4yC,EAAAE,IAEA/yC,GAAAjW,KAAAumD,SAAAD,OAAAxD,MAAA9iD,KAAAumD,SAAAD,OAAA2C,YACA/yC,GAAAlW,KAAAumD,SAAAD,OAAAvD,OAAA/iD,KAAAumD,SAAAD,OAAA4C,aAEAjzC,EAAA,GAAAC,EAAA,GAAAD,GAAAjW,KAAAumD,SAAAD,OAAAxD,OAAA5sC,GAAAlW,KAAAumD,SAAAD,OAAAvD,OAAgG,QAEhG/iD,KAAA2mD,SAAA+B,gBAAAzyC,EAAAC,IAUAmiC,EAAA+N,QAAAnnD,UAAA6oD,KAAA,SAAA7xC,EAAAC,EAAAuuC,EAAAla,EAAAC,GACAD,IAAcA,EAAAvqC,KAAA0mD,SAAAnc,IACdC,IAAcA,EAAAxqC,KAAA0mD,SAAAlc,IACdxqC,KAAAwmD,MAAAvwC,EAAA,IAAAC,GAAA,CAAAD,EAAAC,EAAAuuC,EAAAla,EAAAC,IAEA,IAAAxqC,KAAAymD,SACAzmD,KAAAymD,SAAuBzmD,KAAAymD,OAAA,IACvBzmD,KAAAymD,OAAAxwC,EAAA,IAAAC,IAAA,IAWAmiC,EAAA+N,QAAAnnD,UAAAkqD,SAAA,SAAAlzC,EAAAC,EAAAkzC,EAAAvG,GACA,IAAAtY,EAAA,KACAC,EAAA,KACA6e,EAAApzC,EACAqzC,EAAApzC,EACAqzC,EAAA,EACA1G,IAAoBA,EAAA7iD,KAAA0mD,SAAA5D,MAAA7sC,GAIpB,IAFA,IAAA+sC,EAAA3K,EAAAiK,KAAAW,SAAAmG,EAAAvG,GAEAG,EAAAzhD,QAAA,CACA,IAAA4hD,EAAAH,EAAA5wB,QACA,OAAA+wB,EAAAphD,MACA,KAAAs2C,EAAAiK,KAAAE,UACA,IAAAgH,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EACA,QAAAtsD,EAAA,EAA+BA,EAAA8lD,EAAA7kD,MAAAiD,OAAwBlE,IAAA,CACvD,IAAAusD,EAAAzG,EAAA7kD,MAAAurD,WAAAxsD,GACAK,EAAAylD,EAAA7kD,MAAAolD,OAAArmD,GAEAqsD,EAAAE,EAAA,KAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,MAEAJ,EAAA,KAAA9rD,EAAAmsD,WAAA,YAAAnsD,EAAAmsD,WAAA,IAGAF,GAAAD,GAAAF,GAAsEH,IAGtEK,IAAAD,GAAsDJ,IACtDrpD,KAAA8nD,KAAAuB,IAAAC,EAAA5rD,EAAA6sC,EAAAC,GACAif,EAAAD,EACAG,EAAAD,EAEA,MAEA,KAAArR,EAAAiK,KAAAI,QACAnY,EAAA4Y,EAAA7kD,OAAA,KACA,MAEA,KAAA+5C,EAAAiK,KAAAK,QACAnY,EAAA2Y,EAAA7kD,OAAA,KACA,MAEA,KAAA+5C,EAAAiK,KAAAG,aACA4G,EAAApzC,EACAqzC,IACAC,KAKA,OAAAA,GAMAlR,EAAA+N,QAAAnnD,UAAA2oD,MAAA,WAGA,GAFApC,sBAAAxlD,KAAA4nD,OAEA5nD,KAAAymD,OAAA,CAEA,QAAAzmD,KAAAymD,OAIA,QAAA5vC,KAHA7W,KAAAumD,SAAAuD,UAAA9pD,KAAA0mD,SAAAlc,GACAxqC,KAAAumD,SAAAwD,SAAA,IAAA/pD,KAAAumD,SAAAD,OAAAxD,MAAA9iD,KAAAumD,SAAAD,OAAAvD,QAEA/iD,KAAAwmD,MACAxmD,KAAAgqD,MAAAnzC,GAAA,QAKA,QAAAjY,KAAAoB,KAAAymD,OACAzmD,KAAAgqD,MAAAprD,GAAA,GAIAoB,KAAAymD,QAAA,IAOApO,EAAA+N,QAAAnnD,UAAA+qD,MAAA,SAAAprD,EAAAqrD,GACA,IAAAtlC,EAAA3kB,KAAAwmD,MAAA5nD,GACA+lB,EAAA,IAAA3kB,KAAA0mD,SAAAlc,KAAsCyf,GAAA,GAEtCjqD,KAAA2mD,SAAAmB,KAAAnjC,EAAAslC,IAMA5R,EAAA+N,QAAA8D,QAAA,SAAAC,GACAnqD,KAAAumD,SAAA4D,GAGA9R,EAAA+N,QAAA8D,QAAAjrD,UAAAgpD,QAAA,SAAA5B,KAGAhO,EAAA+N,QAAA8D,QAAAjrD,UAAA6oD,KAAA,SAAAnjC,EAAAslC,KAGA5R,EAAA+N,QAAA8D,QAAAjrD,UAAAqpD,YAAA,SAAAC,EAAAC,KAGAnQ,EAAA+N,QAAA8D,QAAAjrD,UAAAwpD,gBAAA,SAAAF,EAAAC,KAGAnQ,EAAA+N,QAAA8D,QAAAjrD,UAAAypD,gBAAA,SAAAzyC,EAAAC,KAMAmiC,EAAA+N,QAAAgE,KAAA,SAAAD,GACA9R,EAAA+N,QAAA8D,QAAA1sD,KAAAwC,KAAAmqD,GAEAnqD,KAAAqqD,UAAA,EACArqD,KAAAsqD,UAAA,EACAtqD,KAAAuqD,aAAA,GACAvqD,KAAA0mD,SAAA,IAEArO,EAAA+N,QAAAgE,KAAA9E,OAAAjN,EAAA+N,QAAA8D,SAEA7R,EAAA+N,QAAAgE,KAAAI,OAAA,EAEAnS,EAAA+N,QAAAgE,KAAAnrD,UAAAgpD,QAAA,SAAA5B,GACArmD,KAAAuqD,aAAA,GACAvqD,KAAA0mD,SAAAL,EAEA,IAAAoE,EAAAvjD,KAAAC,KAAAnH,KAAAumD,SAAAmE,YAAA,KAAA5H,OACA9iD,KAAAqqD,UAAAnjD,KAAAC,KAAAk/C,EAAAW,QAAAyD,GACAzqD,KAAAsqD,UAAApjD,KAAAC,KAAAk/C,EAAAW,QAAAX,EAAAU,UAEA/mD,KAAA0mD,SAAAQ,mBACAlnD,KAAAqqD,UAAArqD,KAAAsqD,UAAApjD,KAAA4Q,IAAA9X,KAAAqqD,UAAArqD,KAAAsqD,YAGAtqD,KAAAumD,SAAAD,OAAAxD,MAAAuD,EAAAvD,MAAA9iD,KAAAqqD,UACArqD,KAAAumD,SAAAD,OAAAvD,OAAAsD,EAAAtD,OAAA/iD,KAAAsqD,WAGAjS,EAAA+N,QAAAgE,KAAAnrD,UAAA6oD,KAAA,SAAAnjC,EAAAslC,GACAjqD,KAAAulD,YAAAiF,MACAxqD,KAAA2qD,eAAAhmC,EAAAslC,GAGAjqD,KAAA4qD,aAAAjmC,EAAAslC,IAIA5R,EAAA+N,QAAAgE,KAAAnrD,UAAA0rD,eAAA,SAAAhmC,EAAAslC,GACA,IAKA3D,EALArwC,EAAA0O,EAAA,GACAzO,EAAAyO,EAAA,GACA8/B,EAAA9/B,EAAA,GACA4lB,EAAA5lB,EAAA,GACA6lB,EAAA7lB,EAAA,GAGAkmC,EAAA,GAAApG,EAAAla,EAAAC,EACA,GAAAqgB,KAAA7qD,KAAAuqD,aACAjE,EAAAtmD,KAAAuqD,aAAAM,OAEA,CACA,IAAAC,EAAA9qD,KAAA0mD,SAAAO,OAEA8D,GADAzE,EAAAxX,SAAAtf,cAAA,WACA+oB,WAAA,MAMA,GALA+N,EAAAxD,MAAA9iD,KAAAqqD,UACA/D,EAAAvD,OAAA/iD,KAAAsqD,UACAS,EAAAjB,UAAAtf,EACAugB,EAAAhB,SAAAe,IAAAxE,EAAAxD,MAAAgI,EAAAxE,EAAAvD,OAAA+H,GAEArG,EAAA,CACAsG,EAAAjB,UAAAvf,EACAwgB,EAAA/C,KAAAhoD,KAAAumD,SAAAyB,KACA+C,EAAA7C,UAAA,SACA6C,EAAA5C,aAAA,SAEA,IAAA6C,EAAA,GAAA35C,OAAAozC,GACA,QAAApnD,EAAA,EAA2BA,EAAA2tD,EAAAzpD,OAAkBlE,IAC7C0tD,EAAAE,SAAAD,EAAA3tD,GAAA2C,KAAAqqD,UAAA,EAAAnjD,KAAAC,KAAAnH,KAAAsqD,UAAA,IAGAtqD,KAAAuqD,aAAAM,GAAAvE,EAGAtmD,KAAAumD,SAAA2E,UAAA5E,EAAArwC,EAAAjW,KAAAqqD,UAAAn0C,EAAAlW,KAAAsqD,YAGAjS,EAAA+N,QAAAgE,KAAAnrD,UAAA2rD,aAAA,SAAAjmC,EAAAslC,GACA,IAAAh0C,EAAA0O,EAAA,GACAzO,EAAAyO,EAAA,GACA8/B,EAAA9/B,EAAA,GACA4lB,EAAA5lB,EAAA,GACA6lB,EAAA7lB,EAAA,GAEA,GAAAslC,EAAA,CACA,IAAAa,EAAA9qD,KAAA0mD,SAAAO,OACAjnD,KAAAumD,SAAAuD,UAAAtf,EACAxqC,KAAAumD,SAAAwD,SAAA9zC,EAAAjW,KAAAqqD,UAAAS,EAAA50C,EAAAlW,KAAAsqD,UAAAQ,EAAA9qD,KAAAqqD,UAAAS,EAAA9qD,KAAAsqD,UAAAQ,GAGA,GAAArG,EAAA,CAEAzkD,KAAAumD,SAAAuD,UAAAvf,EAEA,IAAAygB,EAAA,GAAA35C,OAAAozC,GACA,QAAApnD,EAAA,EAAmBA,EAAA2tD,EAAAzpD,OAAkBlE,IACrC2C,KAAAumD,SAAA0E,SAAAD,EAAA3tD,IAAA4Y,EAAA,IAAAjW,KAAAqqD,UAAAnjD,KAAAC,MAAA+O,EAAA,IAAAlW,KAAAsqD,cAIAjS,EAAA+N,QAAAgE,KAAAnrD,UAAAqpD,YAAA,SAAAC,EAAAC,GAGA,OAFAthD,KAAA4C,MAAAy+C,EAAAvoD,KAAAqqD,WACAnjD,KAAA4C,MAAA0+C,EAAAxoD,KAAAsqD,aAIAjS,EAAA+N,QAAAgE,KAAAnrD,UAAAwpD,gBAAA,SAAAF,EAAAC,GACA,IAAA2C,EAAAjkD,KAAA4C,MAAAy+C,EAAAvoD,KAAA0mD,SAAA5D,OACAsI,EAAAlkD,KAAA4C,MAAA0+C,EAAAxoD,KAAA0mD,SAAA3D,QAGAsI,EAAArrD,KAAAumD,SAAAyB,KACAhoD,KAAAumD,SAAAyB,KAAA,SAAAhoD,KAAA0mD,SAAAS,WACA,IAAArE,EAAA57C,KAAAC,KAAAnH,KAAAumD,SAAAmE,YAAA,KAAA5H,OACA9iD,KAAAumD,SAAAyB,KAAAqD,EACA,IAEAC,EAFAxI,EAAA,IAEAsI,EAAAD,EAIA,OAHAG,EAAA,IACAF,EAAAlkD,KAAA4C,MAAAshD,EAAAE,IAEApkD,KAAA4C,MAAAshD,EAAAprD,KAAA0mD,SAAAM,UAGA3O,EAAA+N,QAAAgE,KAAAnrD,UAAAypD,gBAAA,SAAAzyC,EAAAC,GACA,OAAAhP,KAAA4C,MAAAmM,EAAAjW,KAAAqqD,WAAAnjD,KAAA4C,MAAAoM,EAAAlW,KAAAsqD,aAMAjS,EAAA+N,QAAAmF,IAAA,SAAApB,GACA9R,EAAA+N,QAAA8D,QAAA1sD,KAAAwC,KAAAmqD,GAEAnqD,KAAAqqD,UAAA,EACArqD,KAAAsqD,UAAA,EACAtqD,KAAAwrD,SAAA,EACAxrD,KAAA0mD,SAAA,IAEArO,EAAA+N,QAAAmF,IAAAjG,OAAAjN,EAAA+N,QAAA8D,SAEA7R,EAAA+N,QAAAmF,IAAAtsD,UAAAgpD,QAAA,SAAA5B,GACArmD,KAAA0mD,SAAAL,EAGA,IAKAoF,EAAAC,EALAjB,EAAAvjD,KAAAC,KAAAnH,KAAAumD,SAAAmE,YAAA,KAAA5H,OACA9iD,KAAAwrD,SAAAtkD,KAAA4C,MAAAu8C,EAAAW,SAAAX,EAAAU,SAAA0D,EAAAvjD,KAAAykD,KAAA,OACA3rD,KAAAqqD,UAAArqD,KAAAwrD,SAAAtkD,KAAAykD,KAAA,KACA3rD,KAAAsqD,UAAA,IAAAtqD,KAAAwrD,SAGAnF,EAAAQ,WACA4E,EAAA,SACAC,EAAA,UAGAD,EAAA,QACAC,EAAA,UAEA1rD,KAAAumD,SAAAD,OAAAmF,GAAAvkD,KAAAC,MAAAk/C,EAAAvD,MAAA,GAAA9iD,KAAAqqD,WACArqD,KAAAumD,SAAAD,OAAAoF,GAAAxkD,KAAAC,MAAAk/C,EAAAtD,OAAA,GAAA/iD,KAAAsqD,UAAA,EAAAtqD,KAAAwrD,WAGAnT,EAAA+N,QAAAmF,IAAAtsD,UAAA6oD,KAAA,SAAAnjC,EAAAslC,GACA,IAAAh0C,EAAA0O,EAAA,GACAzO,EAAAyO,EAAA,GACA8/B,EAAA9/B,EAAA,GACA4lB,EAAA5lB,EAAA,GACA6lB,EAAA7lB,EAAA,GAEAinC,EAAA,EACA31C,EAAA,GAAAjW,KAAAqqD,UACAn0C,EAAAlW,KAAAsqD,UAAAtqD,KAAAwrD,UASA,GAPAxrD,KAAA0mD,SAAAG,WAAkC+E,EAAAC,UAElC5B,IACAjqD,KAAAumD,SAAAuD,UAAAtf,EACAxqC,KAAA8rD,MAAAF,EAAA,GAAAA,EAAA,KAGAnH,EAAA,CAEAzkD,KAAAumD,SAAAuD,UAAAvf,EAEA,IAAAygB,EAAA,GAAA35C,OAAAozC,GACA,QAAApnD,EAAA,EAAmBA,EAAA2tD,EAAAzpD,OAAkBlE,IACrC2C,KAAAumD,SAAA0E,SAAAD,EAAA3tD,GAAAuuD,EAAA,GAAA1kD,KAAAC,KAAAykD,EAAA,OAIAvT,EAAA+N,QAAAmF,IAAAtsD,UAAAqpD,YAAA,SAAAC,EAAAC,GASA,OARAxoD,KAAA0mD,SAAAG,YACA0B,GAAAC,EAEAD,GADAC,EAAAD,EAAAC,GAMA,CAFAthD,KAAA4C,MAAAy+C,EAAAvoD,KAAAqqD,WAAA,EACAnjD,KAAA4C,OAAA0+C,EAAA,EAAAxoD,KAAAwrD,UAAAxrD,KAAAsqD,UAAA,KAIAjS,EAAA+N,QAAAmF,IAAAtsD,UAAAwpD,gBAAA,SAAAF,EAAAC,GACAxoD,KAAA0mD,SAAAG,YACA0B,GAAAC,EAEAD,GADAC,EAAAD,EAAAC,GAIA,IAAAuD,EAAA,EAAAxD,IAAAvoD,KAAA0mD,SAAA5D,MAAA,GAAA57C,KAAAykD,KAAA,MACAK,EAAAxD,GAAA,OAAAxoD,KAAA0mD,SAAA3D,OAAA,IACAkJ,EAAA/kD,KAAA2Q,IAAAk0C,EAAAC,GAGAX,EAAArrD,KAAAumD,SAAAyB,KACAhoD,KAAAumD,SAAAyB,KAAA,SAAAhoD,KAAA0mD,SAAAS,WACA,IAAArE,EAAA57C,KAAAC,KAAAnH,KAAAumD,SAAAmE,YAAA,KAAA5H,OACA9iD,KAAAumD,SAAAyB,KAAAqD,EACA,IAAA/zC,EAAAwrC,EAAA,IAKAiE,EAAA,GAHAkF,EAAA/kD,KAAA4C,MAAAmiD,GAAA,IAGAjsD,KAAA0mD,SAAAM,SAAA,EAAA1vC,EAAApQ,KAAAykD,KAAA,KAGA,OAAAzkD,KAAAC,KAAA4/C,GAAA,GAGA1O,EAAA+N,QAAAmF,IAAAtsD,UAAAypD,gBAAA,SAAAzyC,EAAAC,GACA,IAAAg2C,EACAlsD,KAAA0mD,SAAAG,WACA5wC,GAAAC,EAEAD,GADAC,EAAAD,EAAAC,EAEAg2C,EAAAlsD,KAAAumD,SAAAD,OAAAxD,OAGAoJ,EAAAlsD,KAAAumD,SAAAD,OAAAvD,OAEA,IAAAj3B,EAAAogC,EAAAlsD,KAAA0mD,SAAA3D,OAWA,OAVA7sC,EAAAhP,KAAA4C,MAAAoM,EAAA4V,IAEAw4B,IAAA,IACAruC,GAAAjW,KAAAqqD,UACAp0C,EAAA,IAAA/O,KAAA4C,MAAAmM,GAAA,EAAAjW,KAAAqqD,aAGAp0C,EAAA,EAAA/O,KAAA4C,MAAAmM,GAAA,EAAAjW,KAAAqqD,YAGA,CAAAp0C,EAAAC,IAMAmiC,EAAA+N,QAAAmF,IAAAtsD,UAAA6sD,MAAA,SAAAzC,EAAAC,GACA,IAAAnjC,EAAAnmB,KAAAwrD,SACAV,EAAA9qD,KAAA0mD,SAAAO,OAEAjnD,KAAAumD,SAAA4F,YAEAnsD,KAAA0mD,SAAAG,WACA7mD,KAAAumD,SAAA6F,OAAA/C,EAAAljC,EAAA2kC,EAAAxB,GACAtpD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA,EAAA2kC,EAAAxB,EAAAtpD,KAAAqqD,UAAAS,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA,EAAA2kC,EAAAxB,EAAAtpD,KAAAqqD,UAAAS,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA2kC,EAAAxB,GACAtpD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA,EAAA2kC,EAAAxB,EAAAtpD,KAAAqqD,UAAAS,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA,EAAA2kC,EAAAxB,EAAAtpD,KAAAqqD,UAAAS,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAljC,EAAA2kC,EAAAxB,KAGAtpD,KAAAumD,SAAA6F,OAAA/C,EAAAC,EAAAnjC,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAArpD,KAAAqqD,UAAAS,EAAAxB,EAAAnjC,EAAA,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAArpD,KAAAqqD,UAAAS,EAAAxB,EAAAnjC,EAAA,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAC,EAAAnjC,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAArpD,KAAAqqD,UAAAS,EAAAxB,EAAAnjC,EAAA,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAArpD,KAAAqqD,UAAAS,EAAAxB,EAAAnjC,EAAA,EAAA2kC,GACA9qD,KAAAumD,SAAA8F,OAAAhD,EAAAC,EAAAnjC,EAAA2kC,IAEA9qD,KAAAumD,SAAA+F,QAMAjU,EAAA+N,QAAAmG,KAAA,SAAApC,GACA9R,EAAA+N,QAAAgE,KAAA5sD,KAAAwC,KAAAmqD,GAEAnqD,KAAA0mD,SAAA,GACA1mD,KAAAwsD,aAAA1d,SAAAtf,cAAA,WAEA6oB,EAAA+N,QAAAmG,KAAAjH,OAAAjN,EAAA+N,QAAAgE,MAEA/R,EAAA+N,QAAAmG,KAAAttD,UAAAgpD,QAAA,SAAA5B,GACArmD,KAAA0mD,SAAAL,EACArmD,KAAAumD,SAAAD,OAAAxD,MAAAuD,EAAAvD,MAAAuD,EAAAgB,UACArnD,KAAAumD,SAAAD,OAAAvD,OAAAsD,EAAAtD,OAAAsD,EAAAiB,WACAtnD,KAAAwsD,aAAA1J,MAAAuD,EAAAgB,UACArnD,KAAAwsD,aAAAzJ,OAAAsD,EAAAiB,YAGAjP,EAAA+N,QAAAmG,KAAAttD,UAAA6oD,KAAA,SAAAnjC,EAAAslC,GACA,IAAAh0C,EAAA0O,EAAA,GACAzO,EAAAyO,EAAA,GACA8/B,EAAA9/B,EAAA,GACA4lB,EAAA5lB,EAAA,GACA6lB,EAAA7lB,EAAA,GAEA0iC,EAAArnD,KAAA0mD,SAAAW,UACAC,EAAAtnD,KAAA0mD,SAAAY,WAYA,GAVA2C,IACAjqD,KAAA0mD,SAAAe,aACAznD,KAAAumD,SAAAkG,UAAAx2C,EAAAoxC,EAAAnxC,EAAAoxC,EAAAD,EAAAC,IAGAtnD,KAAAumD,SAAAuD,UAAAtf,EACAxqC,KAAAumD,SAAAwD,SAAA9zC,EAAAoxC,EAAAnxC,EAAAoxC,EAAAD,EAAAC,KAIA7C,EAAA,CAEA,IAAAuG,EAAA,GAAA35C,OAAAozC,GACA,QAAApnD,EAAA,EAAmBA,EAAA2tD,EAAAzpD,OAAkBlE,IAAA,CACrC,IAAAqvD,EAAA1sD,KAAA0mD,SAAAa,QAAAyD,EAAA3tD,IACA,IAAAqvD,EAAoB,UAAAhoD,MAAA,SAAAsmD,EAAA3tD,GAAA,0BAEpB,GAAA2C,KAAA0mD,SAAAe,aAAA,CACA,IAAAnB,EAAAtmD,KAAAwsD,aACArC,EAAA7D,EAAA/N,WAAA,MACA4R,EAAAsC,UAAA,IAAApF,EAAAC,GAEA6C,EAAAe,UACAlrD,KAAA0mD,SAAAc,QACAkF,EAAA,GAAAA,EAAA,GAAArF,EAAAC,EACA,IAAAD,EAAAC,GAGA,eAAA/c,IACA4f,EAAAL,UAAAvf,EACA4f,EAAAwC,yBAAA,cACAxC,EAAAJ,SAAA,IAAA1C,EAAAC,IAGA,eAAA9c,IACA2f,EAAAL,UAAAtf,EACA2f,EAAAwC,yBAAA,mBACAxC,EAAAJ,SAAA,IAAA1C,EAAAC,IAGAtnD,KAAAumD,SAAA2E,UAAA5E,EAAArwC,EAAAoxC,EAAAnxC,EAAAoxC,EAAAD,EAAAC,QAIAtnD,KAAAumD,SAAA2E,UACAlrD,KAAA0mD,SAAAc,QACAkF,EAAA,GAAAA,EAAA,GAAArF,EAAAC,EACArxC,EAAAoxC,EAAAnxC,EAAAoxC,EAAAD,EAAAC,MAMAjP,EAAA+N,QAAAmG,KAAAttD,UAAAqpD,YAAA,SAAAC,EAAAC,GAGA,OAFAthD,KAAA4C,MAAAy+C,EAAAvoD,KAAA0mD,SAAAW,WACAngD,KAAA4C,MAAA0+C,EAAAxoD,KAAA0mD,SAAAY,cAIAjP,EAAA+N,QAAAmG,KAAAttD,UAAAwpD,gBAAA,SAAAF,EAAAC,GAGA,OAFAthD,KAAA4C,MAAAy+C,EAAAvoD,KAAA0mD,SAAA5D,OACA57C,KAAA4C,MAAA0+C,EAAAxoD,KAAA0mD,SAAA3D,UAIA1K,EAAA+N,QAAAmG,KAAAttD,UAAAypD,gBAAA,SAAAzyC,EAAAC,GACA,OAAAhP,KAAA4C,MAAAmM,EAAAjW,KAAA0mD,SAAAW,WAAAngD,KAAA4C,MAAAoM,EAAAlW,KAAA0mD,SAAAY,cAOAjP,EAAA5vB,IAAA,CAIAmkC,QAAA,WACA,OAAA5sD,KAAA6sD,OAMAnkC,QAAA,SAAAF,GAaA,OAZAA,IAAA,IAAAA,IAEAxoB,KAAA6sD,MAAArkC,EACAxoB,KAAA8sD,KAAAtkC,IAAA,GAAAxoB,KAAA+sD,MAEAvkC,EAAA,MAAAA,EAAA,MACAxoB,KAAAgtD,IAAAxkC,EAAAxoB,KAAA+sD,MAEAvkC,EAAA,MAAAA,EAAA,MACAxoB,KAAAitD,IAAAzkC,EAAAxoB,KAAA+sD,MAEA/sD,KAAAktD,GAAA,EACAltD,MAMA2lB,WAAA,WACA,IAAApnB,EAAA,QAAAyB,KAAA8sD,IAAA9sD,KAAAktD,GAAAltD,KAAA+sD,MAKA,OAJA/sD,KAAA8sD,IAAA9sD,KAAAgtD,IACAhtD,KAAAgtD,IAAAhtD,KAAAitD,IACAjtD,KAAAktD,GAAA,EAAA3uD,EACAyB,KAAAitD,IAAA1uD,EAAAyB,KAAAktD,GACAltD,KAAAitD,KAQAlkC,cAAA,SAAAokC,EAAAC,GACA,IAAAt1C,EAAA5Q,KAAA4Q,IAAAq1C,EAAAC,GACAv1C,EAAA3Q,KAAA2Q,IAAAs1C,EAAAC,GACA,OAAAlmD,KAAA4C,MAAA9J,KAAA2lB,cAAA7N,EAAAD,EAAA,IAAAA,GAQAqR,UAAA,SAAAF,EAAAC,GACA,IAAA9qB,EACA,GACA,IAAAkvD,EAAA,EAAArtD,KAAA2lB,aAAA,EACAmqB,EAAA,EAAA9vC,KAAA2lB,aAAA,EACAxnB,EAAAkvD,IAAAvd,UACS3xC,EAAA,OAAAA,GAGT,OAAA6qB,GAAA,GADAqkC,EAAAnmD,KAAAykD,MAAA,EAAAzkD,KAAAhC,IAAA/G,OACA8qB,GAAA,IAMAqkC,cAAA,WACA,SAAApmD,KAAA4C,MAAA,IAAA9J,KAAA2lB,eAOAwD,iBAAA,SAAAxE,GACA,IAAA4oC,EAAA,EAEA,QAAA12C,KAAA8N,EACA4oC,GAAA5oC,EAAA9N,GAEA,IAAAqtB,EAAAlkC,KAAA2lB,aAAA4nC,EAEAlK,EAAA,EACA,QAAAxsC,KAAA8N,EAEA,GAAAuf,GADAmf,GAAA1+B,EAAA9N,IACgC,OAAAA,EAKhC,OAAAA,GAOAwS,SAAA,WACA,OAAArpB,KAAA8sD,IAAA9sD,KAAAgtD,IAAAhtD,KAAAitD,IAAAjtD,KAAAktD,KAOAvkC,SAAA,SAAApmB,GAKA,OAJAvC,KAAA8sD,IAAAvqD,EAAA,GACAvC,KAAAgtD,IAAAzqD,EAAA,GACAvC,KAAAitD,IAAA1qD,EAAA,GACAvC,KAAAktD,GAAA3qD,EAAA,GACAvC,MAMA2G,MAAA,WACA,IAAAA,EAAA5I,OAAAY,OAAAqB,MAEA,OADA2G,EAAAgiB,SAAA3oB,KAAAqpB,YACA1iB,GAGAmmD,IAAA,EACAE,IAAA,EACAC,IAAA,EACAC,GAAA,EACAH,MAAA,wBAIA1U,EAAA5vB,IAAAC,QAAA,GAWA2vB,EAAAmV,gBAAA,SAAAnH,GAMA,QAAAlnD,KALAa,KAAA0mD,SAAA,CACA+G,OAAA,EACAC,MAAA,EACAC,MAAA,MAEAtH,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAE5Ba,KAAA4tD,UAAA/f,OAAAggB,aAAA,GACA7tD,KAAA8tD,QAAA9tD,KAAA4tD,UACA5tD,KAAA+tD,QAAA,GACA,QAAA1wD,EAAA,EAAmBA,EAAA2C,KAAA0mD,SAAAgH,MAAyBrwD,IAAO2C,KAAA+tD,QAAAnoD,KAAA5F,KAAA4tD,WAEnD5tD,KAAAguD,aAAA,GACAhuD,KAAAguD,aAAAhuD,KAAA4tD,WAAA5tD,KAAA0mD,SAAAiH,MAEA3tD,KAAAwmD,MAAA,IAMAnO,EAAAmV,gBAAAvuD,UAAA8oD,MAAA,WACA/nD,KAAAwmD,MAAA,GACAxmD,KAAAguD,aAAA,IAMA3V,EAAAmV,gBAAAvuD,UAAAgvD,SAAA,WAEA,IADA,IAAAxlD,EAAA,CAAAzI,KAAAkuD,QAAAluD,KAAA+tD,UACAtlD,IAAAlH,OAAA,IAAAvB,KAAA4tD,WACAnlD,EAAA7C,KAAA5F,KAAAkuD,QAAAzlD,IAEA,OAAAzI,KAAAmuD,MAAA1lD,EAAAqgB,MAAA,QAMAuvB,EAAAmV,gBAAAvuD,UAAAmvD,QAAA,SAAAC,GACA,IAAArL,EAAAhjD,KAAAsuD,OAAAD,GAEA,QAAAhxD,EAAA,EAAmBA,EAAA2lD,EAAAzhD,OAAmBlE,IACtC2C,KAAAguD,aAAAhL,EAAA3lD,IAAA2C,KAAA0mD,SAAAiH,MAKA,IAFA3K,EAAAhjD,KAAA+tD,QAAA18C,OAAA2xC,GAAA3xC,OAAArR,KAAA8tD,SAEAzwD,EAAA2C,KAAA0mD,SAAAgH,MAAiCrwD,EAAA2lD,EAAAzhD,OAAmBlE,IAAA,CACpD,IAAA8sD,EAAAnH,EAAAl6B,MAAAzrB,EAAA2C,KAAA0mD,SAAAgH,MAAArwD,GACAkxD,EAAAvL,EAAA3lD,GACA,QAAAmN,EAAA,EAAuBA,EAAA2/C,EAAA5oD,OAAoBiJ,IAAA,CAC3C,IAAAgkD,EAAArE,EAAArhC,MAAAte,GACAxK,KAAAyuD,cAAAD,EAAAD,MAKAlW,EAAAmV,gBAAAvuD,UAAAyvD,SAAA,WACA,IAAA1J,EAAA,GAEA2J,EAAA,EACA,QAAAxvD,KAAAa,KAAAguD,aAAsCW,IACtCA,IACA3J,EAAAp/C,KAAA,qBAAA+oD,GAEA,IAAAC,EAAA,EACAC,EAAA,EACA,QAAA1vD,KAAAa,KAAAwmD,MAEA,QAAA5nD,KADAgwD,IACA5uD,KAAAwmD,MAAArnD,GACA0vD,IAMA,OAHA7J,EAAAp/C,KAAA,+BAAAgpD,GACA5J,EAAAp/C,KAAA,6BAAAipD,GAEA7J,EAAA9gC,KAAA,OAOAm0B,EAAAmV,gBAAAvuD,UAAAqvD,OAAA,SAAA3kD,GACA,OAAAA,EAAA9E,MAAA7E,KAAA0mD,SAAA+G,MAAA,WAOApV,EAAAmV,gBAAAvuD,UAAAkvD,MAAA,SAAA53C,GACA,OAAAA,EAAA2N,KAAAlkB,KAAA0mD,SAAA+G,MAAA,SAOApV,EAAAmV,gBAAAvuD,UAAAwvD,cAAA,SAAAtE,EAAAoE,GACA,IAAA3vD,EAAAoB,KAAAmuD,MAAAhE,GACAvrD,KAAAoB,KAAAwmD,QAA+BxmD,KAAAwmD,MAAA5nD,GAAA,IAC/B,IAAA+lB,EAAA3kB,KAAAwmD,MAAA5nD,GAEA2vD,KAAA5pC,IAA2BA,EAAA4pC,GAAA,GAC3B5pC,EAAA4pC,MAOAlW,EAAAmV,gBAAAvuD,UAAAivD,QAAA,SAAA/D,GACAA,EAAAnqD,KAAA8uD,SAAA3E,GACA,IAAAvrD,EAAAoB,KAAAmuD,MAAAhE,GACAxlC,EAAA3kB,KAAAwmD,MAAA5nD,GAEAmwD,EAAA,GAEA,GAAA/uD,KAAA0mD,SAAAiH,MAAA,CACA,QAAAY,KAAAvuD,KAAAguD,aAA8Ce,EAAAR,GAAAvuD,KAAAguD,aAAAO,GAC9C,IAAAA,KAAA5pC,EAA6BoqC,EAAAR,IAAA5pC,EAAA4pC,QAG7BQ,EAAApqC,EAGA,OAAA0zB,EAAA5vB,IAAAU,iBAAA4lC,IAOA1W,EAAAmV,gBAAAvuD,UAAA6vD,SAAA,SAAA3E,GAQA,IAPAA,EAAA5oD,OAAAvB,KAAA0mD,SAAAgH,MACAvD,IAAArhC,OAAA9oB,KAAA0mD,SAAAgH,OAEAvD,EAAA5oD,OAAAvB,KAAA0mD,SAAAgH,QACAvD,EAAAnqD,KAAA+tD,QAAAjlC,MAAA,EAAA9oB,KAAA0mD,SAAAgH,MAAAvD,EAAA5oD,QAAA8P,OAAA84C,MAGAnqD,KAAAmuD,MAAAhE,KAAAnqD,KAAAwmD,QAAA2D,EAAA5oD,OAAA,GAAwE4oD,IAAArhC,MAAA,GAExE,OAAAqhC,GAKA9R,EAAA2W,WAAA,WACAhvD,KAAAivD,MAAA,EACAjvD,KAAAkvD,QAAA,GACAlvD,KAAAmvD,YAAA,IAMA9W,EAAA2W,WAAA/vD,UAAAmwD,QAAA,WACA,OAAApvD,KAAAivD,OAMA5W,EAAA2W,WAAA/vD,UAAA8oD,MAAA,WAGA,OAFA/nD,KAAAkvD,QAAA,GACAlvD,KAAAmvD,YAAA,GACAnvD,MAGA,MAAAqvD,EAAA,SAAA1lC,EAAAzK,EAAApY,GACA,IAAAzJ,EAAAssB,EAAApoB,OACA,KAAAlE,MAAA6hB,GACAyK,EAAAtsB,EAAA,GAAAssB,EAAAtsB,GAGA,OADAssB,EAAAzK,GAAApY,EACA6iB,GAOA0uB,EAAA2W,WAAA/vD,UAAAqhB,IAAA,SAAAiuC,EAAAe,GACA,IAAApwC,EAAAlf,KAAAkvD,QAAA3tD,OACA,QAAAlE,EAAA,EAAmBA,EAAA2C,KAAAmvD,YAAA5tD,OAA6BlE,IAChD,GAAA2C,KAAAmvD,YAAA9xD,GAAAiyD,EAAA,CACApwC,EAAA7hB,EACA,MAIAgyD,EAAArvD,KAAAkvD,QAAAhwC,EAAAqvC,GAGAc,EAAArvD,KAAAmvD,YAAAjwC,EAAAowC,IAOAjX,EAAA2W,WAAA/vD,UAAAf,IAAA,WACA,IAAA8B,KAAAkvD,QAAA3tD,OAA+B,YAG/B,IAAA+tD,EAAAtvD,KAAAmvD,YAAA/8B,QACA,GAAAk9B,EAAA,GACAtvD,KAAAivD,OAAAK,EACA,QAAAjyD,EAAA,EAAuBA,EAAA2C,KAAAmvD,YAAA5tD,OAA6BlE,IAAO2C,KAAAmvD,YAAA9xD,IAAAiyD,EAI3D,OAAAtvD,KAAAkvD,QAAA98B,SAQAimB,EAAA2W,WAAA/vD,UAAAy6B,OAAA,SAAA60B,GACA,IAAArvC,EAAAlf,KAAAkvD,QAAAnvC,QAAAwuC,GACA,WAAArvC,IACAlf,KAAAuvD,QAAArwC,IACA,IAGA,MAAAswC,EAAA,SAAAj5C,EAAA2I,GACA,MAAAguB,EAAA32B,EAAAhV,OACA,GAAA2rC,EAAA,CACA,KAAAhuB,EAAAguB,GACA32B,EAAA2I,GAAA3I,EAAA2I,EAAA,GACAA,IAEA3I,EAAAhV,WAOA82C,EAAA2W,WAAA/vD,UAAAswD,QAAA,SAAArwC,GAGAswC,EAAAxvD,KAAAkvD,QAAAhwC,GACAswC,EAAAxvD,KAAAmvD,YAAAjwC,IAKAm5B,EAAAoX,UAAA,WACAzvD,KAAA0vD,OAAA,IAAArX,EAAA2W,WACAhvD,KAAA2vD,QAAA,GACA3vD,KAAA4vD,SAAA,MAMAvX,EAAAoX,UAAAxwD,UAAAmwD,QAAA,WACA,OAAApvD,KAAA0vD,OAAAN,WAOA/W,EAAAoX,UAAAxwD,UAAAqhB,IAAA,SAAAxZ,EAAA+oD,GAEA,OADAA,GAAiB7vD,KAAA2vD,QAAA/pD,KAAAkB,GACjB9G,MAMAq4C,EAAAoX,UAAAxwD,UAAA8oD,MAAA,WAIA,OAHA/nD,KAAA0vD,OAAA3H,QACA/nD,KAAA2vD,QAAA,GACA3vD,KAAA4vD,SAAA,KACA5vD,MAQAq4C,EAAAoX,UAAAxwD,UAAAy6B,OAAA,SAAA5yB,GACA,IAAA2B,EAAAzI,KAAA0vD,OAAAh2B,OAAA5yB,GAEAoY,EAAAlf,KAAA2vD,QAAA5vC,QAAAjZ,GAKA,OAJA,GAAAoY,GAAsBlf,KAAA2vD,QAAAjjC,OAAAxN,EAAA,GAEtBlf,KAAA4vD,WAAA9oD,IAAiC9G,KAAA4vD,SAAA,MAEjCnnD,GAOA4vC,EAAAoX,UAAAxwD,UAAA6wD,KAAA,WAEA,OADA9vD,KAAA4vD,SAAA5vD,KAAA0vD,OAAAxxD,MACA8B,KAAA4vD,UAMAvX,EAAAoX,UAAAM,OAAA,WACA1X,EAAAoX,UAAAjyD,KAAAwC,OAEAq4C,EAAAoX,UAAAM,OAAAzK,OAAAjN,EAAAoX,WAKApX,EAAAoX,UAAAM,OAAA9wD,UAAAqhB,IAAA,SAAAxZ,EAAA+oD,GAEA,OADA7vD,KAAA0vD,OAAApvC,IAAAxZ,EAAA,GACAuxC,EAAAoX,UAAAxwD,UAAAqhB,IAAA9iB,KAAAwC,KAAA8G,EAAA+oD,IAMAxX,EAAAoX,UAAAM,OAAA9wD,UAAA6wD,KAAA,WAIA,OAHA9vD,KAAA4vD,WAAA,GAAA5vD,KAAA2vD,QAAA5vC,QAAA/f,KAAA4vD,WACA5vD,KAAA0vD,OAAApvC,IAAAtgB,KAAA4vD,SAAA,GAEAvX,EAAAoX,UAAAxwD,UAAA6wD,KAAAtyD,KAAAwC,OAMAq4C,EAAAoX,UAAAO,MAAA,WACA3X,EAAAoX,UAAAjyD,KAAAwC,OAEAq4C,EAAAoX,UAAAO,MAAA1K,OAAAjN,EAAAoX,WAOApX,EAAAoX,UAAAO,MAAA/wD,UAAAqhB,IAAA,SAAAxZ,EAAA+oD,GAEA,OADA7vD,KAAA0vD,OAAApvC,IAAAxZ,EAAA,EAAAA,EAAAmpD,YACA5X,EAAAoX,UAAAxwD,UAAAqhB,IAAA9iB,KAAAwC,KAAA8G,EAAA+oD,IAMAxX,EAAAoX,UAAAO,MAAA/wD,UAAA6wD,KAAA,WAIA,OAHA9vD,KAAA4vD,WAAA,GAAA5vD,KAAA2vD,QAAA5vC,QAAA/f,KAAA4vD,WACA5vD,KAAA0vD,OAAApvC,IAAAtgB,KAAA4vD,SAAA,EAAA5vD,KAAA4vD,SAAAK,YAEA5X,EAAAoX,UAAAxwD,UAAA6wD,KAAAtyD,KAAAwC,OAMAq4C,EAAAoX,UAAAS,OAAA,WACA7X,EAAAoX,UAAAjyD,KAAAwC,MACAA,KAAAmwD,iBAAA,EACAnwD,KAAAowD,UAAApwD,KAAAmwD,kBAEA9X,EAAAoX,UAAAS,OAAA5K,OAAAjN,EAAAoX,WAQApX,EAAAoX,UAAAS,OAAAjxD,UAAAqhB,IAAA,SAAAxZ,EAAA+oD,EAAAP,GAEA,OADAtvD,KAAA0vD,OAAApvC,IAAAxZ,EAAAwoD,GAAAtvD,KAAAmwD,kBACA9X,EAAAoX,UAAAxwD,UAAAqhB,IAAA9iB,KAAAwC,KAAA8G,EAAA+oD,IAGAxX,EAAAoX,UAAAS,OAAAjxD,UAAA8oD,MAAA,WAEA,OADA/nD,KAAAowD,UAAApwD,KAAAmwD,iBACA9X,EAAAoX,UAAAxwD,UAAA8oD,MAAAvqD,KAAAwC,OAGAq4C,EAAAoX,UAAAS,OAAAjxD,UAAAy6B,OAAA,SAAA5yB,GAEA,OADAA,IAAA9G,KAAA4vD,WAAiC5vD,KAAAowD,UAAApwD,KAAAmwD,kBACjC9X,EAAAoX,UAAAxwD,UAAAy6B,OAAAl8B,KAAAwC,KAAA8G,IAMAuxC,EAAAoX,UAAAS,OAAAjxD,UAAA6wD,KAAA,WAKA,OAJA9vD,KAAA4vD,WAAA,GAAA5vD,KAAA2vD,QAAA5vC,QAAA/f,KAAA4vD,YACA5vD,KAAA0vD,OAAApvC,IAAAtgB,KAAA4vD,SAAA5vD,KAAAowD,WAAApwD,KAAAmwD,kBACAnwD,KAAAowD,UAAApwD,KAAAmwD,kBAEA9X,EAAAoX,UAAAxwD,UAAA6wD,KAAAtyD,KAAAwC,OAMAq4C,EAAAoX,UAAAS,OAAAjxD,UAAAoxD,YAAA,SAAAf,GAEA,OADAtvD,KAAA4vD,WAAwB5vD,KAAAowD,UAAAd,GACxBtvD,MAMAq4C,EAAAiY,OAAA,SAAAC,GACAvwD,KAAAwwD,WAAAD,EACAvwD,KAAAywD,MAAA,GAMApY,EAAAiY,OAAArxD,UAAAyxD,MAAA,WACA,OAAA1wD,KAAA2wD,UAMAtY,EAAAiY,OAAArxD,UAAA2xD,KAAA,WAEA,OADA5wD,KAAAywD,QACAzwD,MAMAq4C,EAAAiY,OAAArxD,UAAA0xD,OAAA,WACA,IAAA3wD,KAAAywD,MAAsB,UAAA/rD,MAAA,iCAGtB,IAFA1E,KAAAywD,SAEAzwD,KAAAywD,OAAA,CACA,IAAAxmD,EAAAjK,KAAAwwD,WAAAV,OACA,IAAA7lD,EAAqB,OAAAjK,KAAA4wD,OACrB,IAAAnoD,EAAAwB,EAAA4mD,MACApoD,KAAAqoD,OACA9wD,KAAA4wD,OACAnoD,EAAAqoD,KAAA9wD,KAAA2wD,OAAA9xD,KAAAmB,QAIA,OAAAA,MAOAq4C,EAAA0Y,IAAA,SAAAjO,EAAAC,GACA/iD,KAAAgxD,OAAAlO,GAAAzK,EAAAG,cACAx4C,KAAAixD,QAAAlO,GAAA1K,EAAAI,gBAGAJ,EAAA0Y,IAAA9xD,UAAAN,OAAA,SAAAuyD,KAEA7Y,EAAA0Y,IAAA9xD,UAAAkyD,SAAA,SAAA7yD,GACA,IAAA+W,EAAA,GACA,QAAAhY,EAAA,EAAmBA,EAAA2C,KAAAgxD,OAAiB3zD,IAAA,CACpCgY,EAAAzP,KAAA,IACA,QAAA4E,EAAA,EAAuBA,EAAAxK,KAAAixD,QAAkBzmD,IAAO6K,EAAAhY,GAAAuI,KAAAtH,GAEhD,OAAA+W,GAGAgjC,EAAA0Y,IAAA9xD,UAAAmyD,QAAA,WACA,OAAApxD,KAAAgxD,QAGA3Y,EAAA0Y,IAAA9xD,UAAAoyD,QAAA,WACA,OAAArxD,KAAAixD,SAGA5Y,EAAA0Y,IAAA9xD,UAAAqyD,YAAA,WACA,OACApqD,KAAA4C,MAAA9J,KAAAgxD,OAAA,GACA9pD,KAAA4C,MAAA9J,KAAAixD,QAAA,KAQA5Y,EAAA0Y,IAAAQ,MAAA,SAAAzO,EAAAC,GACA1K,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,IAEA1K,EAAA0Y,IAAAQ,MAAAjM,OAAAjN,EAAA0Y,KAEA1Y,EAAA0Y,IAAAQ,MAAAtyD,UAAAN,OAAA,SAAAuyD,GACA,IAAA/8B,EAAAn0B,KAAAgxD,OAAA,EACAQ,EAAAxxD,KAAAixD,QAAA,EACA,QAAA5zD,EAAA,EAAmBA,GAAA82B,EAAQ92B,IAC3B,QAAAmN,EAAA,EAAuBA,GAAAgnD,EAAQhnD,IAAA,CAE/B0mD,EAAA7zD,EAAAmN,EADAnN,GAAAmN,GAAAnN,EAAA82B,GAAA3pB,EAAAgnD,EACA,KAGA,OAAAxxD,MAMAq4C,EAAA0Y,IAAAU,YAAA,SAAA3O,EAAAC,GACA1K,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,GACA/iD,KAAA0xD,OAAA,IAEArZ,EAAA0Y,IAAAU,YAAAnM,OAAAjN,EAAA0Y,KAEA1Y,EAAA0Y,IAAAU,YAAAxyD,UAAAN,OAAA,SAAAuyD,GACA,IAAA/8B,EAAAn0B,KAAAgxD,OACAQ,EAAAxxD,KAAAixD,QAEAjxD,KAAAgkB,KAAA,GAEA,QAAA3mB,EAAA,EAAmBA,EAAA82B,EAAO92B,IAAA,CAC1B2C,KAAAgkB,KAAApe,KAAA,IACA,QAAA4E,EAAA,EAAuBA,EAAAgnD,EAAOhnD,IAAA,CAC9B,IAAAy8C,EAAA,IAAA5pD,GAAA,IAAAmN,GAAAnN,EAAA,IAAA82B,GAAA3pB,EAAA,IAAAgnD,EACAxxD,KAAAgkB,KAAA3mB,GAAAuI,KAAAqhD,EAAA,MAIAjnD,KAAA0xD,OAAA,CACA,KAAAv9B,EAAA,EAAAq9B,EAAA,IAEAxxD,KAAA2xD,WAEA,QAAAt0D,EAAA,EAAmBA,EAAA82B,EAAO92B,IAC1B,QAAAmN,EAAA,EAAuBA,EAAAgnD,EAAOhnD,IAC9B0mD,EAAA7zD,EAAAmN,EAAAxK,KAAAgkB,KAAA3mB,GAAAmN,IAIA,OADAxK,KAAAgkB,KAAA,KACAhkB,MAGAq4C,EAAA0Y,IAAAU,YAAAxyD,UAAA0yD,SAAA,WACA,KAAA3xD,KAAA0xD,OAAAnwD,QAAA,CACA,IAAAqwD,EAAA5xD,KAAA0xD,OAAAt/B,QACApyB,KAAA6xD,eAAAD,KAIAvZ,EAAA0Y,IAAAU,YAAAxyD,UAAA4yD,eAAA,SAAAD,GACA,IAAAE,EAAA,GACAC,EAAA,GAEA,QAAA10D,EAAAu0D,EAAA,KAA6Bv0D,EAAAu0D,EAAA,GAAav0D,IAAA,CAC1C,IAAA2rD,EAAAhpD,KAAAgkB,KAAA3mB,GAAAu0D,EAAA,MACAI,EAAAhyD,KAAAgkB,KAAA3mB,GAAAu0D,EAAA,OACA5I,IAAAgJ,GAAA30D,EAAA,GAAwCy0D,EAAAlsD,KAAAvI,GAGxC,QAAAmN,EAAAonD,EAAA,KAA6BpnD,EAAAonD,EAAA,GAAapnD,IAAA,CAC1C,IAAA0lB,EAAAlwB,KAAAgkB,KAAA4tC,EAAA,MAAApnD,GACAynD,EAAAjyD,KAAAgkB,KAAA4tC,EAAA,MAAApnD,IACA0lB,IAAA+hC,GAAAznD,EAAA,GAAwCunD,EAAAnsD,KAAA4E,GAGxC,GAAAsnD,EAAAvwD,QAAAwwD,EAAAxwD,OAAA,CAEA,IAAA0U,EAAA67C,EAAA5tB,SACAhuB,EAAA67C,EAAA7tB,SAEAlkC,KAAAgkB,KAAA/N,GAAAC,GAAA,EAEA,IAAAg8C,EAAA,GAEA/9B,EAAA,GAAe+9B,EAAAtsD,KAAAuuB,GACf,QAAA92B,EAAAu0D,EAAA,GAAyBv0D,EAAA4Y,EAAO5Y,IAChC2C,KAAAgkB,KAAA3mB,GAAA6Y,GAAA,EACAie,EAAAvuB,KAAA,CAAAvI,EAAA6Y,IAGAie,EAAA,GAAe+9B,EAAAtsD,KAAAuuB,GACf,QAAA92B,EAAA4Y,EAAA,EAAuB5Y,GAAAu0D,EAAA,GAAcv0D,IACrC2C,KAAAgkB,KAAA3mB,GAAA6Y,GAAA,EACAie,EAAAvuB,KAAA,CAAAvI,EAAA6Y,IAGAie,EAAA,GAAe+9B,EAAAtsD,KAAAuuB,GACf,QAAA3pB,EAAAonD,EAAA,GAAyBpnD,EAAA0L,EAAO1L,IAChCxK,KAAAgkB,KAAA/N,GAAAzL,GAAA,EACA2pB,EAAAvuB,KAAA,CAAAqQ,EAAAzL,IAGA2pB,EAAA,GAAe+9B,EAAAtsD,KAAAuuB,GACf,QAAA3pB,EAAA0L,EAAA,EAAuB1L,GAAAonD,EAAA,GAAcpnD,IACrCxK,KAAAgkB,KAAA/N,GAAAzL,GAAA,EACA2pB,EAAAvuB,KAAA,CAAAqQ,EAAAzL,IAGA,IAAA2nD,EAAAD,EAAAhuB,SACA,QAAA7mC,EAAA,EAAmBA,EAAA60D,EAAA3wD,OAAkBlE,IAAA,CAErC,IADA82B,EAAA+9B,EAAA70D,MACA80D,EAAA,CAEA,IAAAC,EAAAj+B,EAAA+P,SACAlkC,KAAAgkB,KAAAouC,EAAA,IAAAA,EAAA,OAGApyD,KAAA0xD,OAAA9rD,KAAA,CAAAgsD,EAAA,GAAAA,EAAA,GAAA37C,EAAA,EAAAC,EAAA,IACAlW,KAAA0xD,OAAA9rD,KAAA,CAAAqQ,EAAA,EAAA27C,EAAA,GAAAA,EAAA,GAAA17C,EAAA,IACAlW,KAAA0xD,OAAA9rD,KAAA,CAAAgsD,EAAA,GAAA17C,EAAA,EAAAD,EAAA,EAAA27C,EAAA,KACA5xD,KAAA0xD,OAAA9rD,KAAA,CAAAqQ,EAAA,EAAAC,EAAA,EAAA07C,EAAA,GAAAA,EAAA,OAOAvZ,EAAA0Y,IAAAsB,SAAA,SAAAvP,EAAAC,EAAAuP,GACAja,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,GACA/iD,KAAAuyD,YAAAD,GAAA,GAEAja,EAAA0Y,IAAAsB,SAAA/M,OAAAjN,EAAA0Y,KAEA1Y,EAAA0Y,IAAAsB,SAAApzD,UAAAN,OAAA,SAAAuyD,GACA,IAAApO,EAAA9iD,KAAAgxD,OACAjO,EAAA/iD,KAAAixD,QAEA57C,EAAArV,KAAAmxD,SAAA,GAEArO,KAAA,MACAC,KAAA,MAEA,IAAAsG,EAAA,EACAC,EAAA,EACAkJ,EAAA,EACAC,EAAA,EAEAC,EAAA,EACAC,GAAA,EACAC,EAAA,CACA,MACA,MACA,MACA,OAEA,GAMA,GALAvJ,EAAA,IAAAniD,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,cAAAm9B,EAAA,MACAwG,EAAA,IAAApiD,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,cAAAo9B,EAAA,MAEA2P,IAAoBr9C,EAAAg0C,GAAAC,GAAA,IAEpBj0C,EAAAg0C,GAAAC,GAAA,CACAtpD,KAAA6yD,WAAAD,GACA,GACA,IAAA1rD,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,cAAA3lB,KAAAuyD,YAAA,KAAsFvyD,KAAA6yD,WAAAD,GACtFD,GAAA,EACA,QAAAt1D,EAAA,EAA+BA,EAAA,EAAOA,IAGtC,GAFAm1D,EAAAnJ,EAAA,EAAAuJ,EAAAv1D,GAAA,GACAo1D,EAAAnJ,EAAA,EAAAsJ,EAAAv1D,GAAA,GACA2C,KAAA8yD,QAAAz9C,EAAAm9C,EAAAC,EAAA3P,EAAAC,GAAA,CACA1tC,EAAAm9C,GAAAC,GAAA,EACAp9C,EAAAg0C,EAAAuJ,EAAAv1D,GAAA,IAAAisD,EAAAsJ,EAAAv1D,GAAA,MAEAgsD,EAAAmJ,EACAlJ,EAAAmJ,EACAE,GAAA,EACAD,IACA,cAGaC,UAERD,EAAA,EAAA5P,EAAAC,EAAA,GAEL,QAAA1lD,EAAA,EAAmBA,EAAA2C,KAAAgxD,OAAiB3zD,IACpC,QAAAmN,EAAA,EAAuBA,EAAAxK,KAAAixD,QAAkBzmD,IACzC0mD,EAAA7zD,EAAAmN,EAAA6K,EAAAhY,GAAAmN,IAIA,OADAxK,KAAAgkB,KAAA,KACAhkB,MAGAq4C,EAAA0Y,IAAAsB,SAAApzD,UAAA4zD,WAAA,SAAAD,GACA,QAAAv1D,EAAA,EAAmBA,EAAA,EAAOA,IAC1Bu1D,EAAAv1D,GAAA,KACAu1D,EAAAv1D,GAAA,KAGA,OAAA6J,KAAA4C,MAAA,EAAAuuC,EAAA5vB,IAAA9C,eACA,OACAitC,EAAA,SAA4BA,EAAA,QAC5BA,EAAA,SAA4BA,EAAA,QAC5B,MACA,OACAA,EAAA,SAA4BA,EAAA,QAC5BA,EAAA,SAA4BA,EAAA,QAC5B,MACA,OACAA,EAAA,SAA4BA,EAAA,QAC5BA,EAAA,SAA4BA,EAAA,QAC5B,MACA,OACAA,EAAA,SAA4BA,EAAA,QAC5BA,EAAA,SAA4BA,EAAA,UAK5Bva,EAAA0Y,IAAAsB,SAAApzD,UAAA6zD,QAAA,SAAAz9C,EAAAY,EAAAC,EAAA4sC,EAAAC,GACA,QAAA9sC,EAAA,GAAAC,EAAA,GAAAD,GAAA6sC,GAAA5sC,GAAA6sC,IACA1tC,EAAAY,GAAAC,IAOAmiC,EAAA0Y,IAAAgC,UAAA,SAAAjQ,EAAAC,GACA1K,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,IAEA1K,EAAA0Y,IAAAgC,UAAAzN,OAAAjN,EAAA0Y,KAEA1Y,EAAA0Y,IAAAgC,UAAA9zD,UAAAN,OAAA,SAAAuyD,GACA,IAAA77C,EAAArV,KAAAmxD,SAAA,GACAh9B,EAAAjtB,KAAAC,MAAAnH,KAAAgxD,OAAA,MAIAgC,EAAA,GACAC,EAAA,GAEA,QAAA51D,EAAA,EAAmBA,EAAA82B,EAAO92B,IAC1B21D,EAAAptD,KAAAvI,GACA41D,EAAArtD,KAAAvI,GAEA21D,EAAAptD,KAAAuuB,EAAA,GAEA,IAAA++B,EAAA,EACA,QAAA1oD,EAAA,EAAmBA,EAAA,EAAAxK,KAAAixD,QAAsBzmD,GAAA,GAEzC,QAAAnN,EAAA,EAAuBA,EAAA82B,EAAO92B,IAAA,CAE9B,IACA6Y,EAAA1L,EACA6K,EAFAY,EAAA,EAAA5Y,EAAA,GAEA6Y,GAAA,EAGA7Y,GAAA21D,EAAA31D,EAAA,IAAAg7C,EAAA5vB,IAAA9C,aArBA,OAsBA3lB,KAAAmzD,WAAA91D,EAAA21D,EAAAC,GACA59C,EAAAY,EAAA,GAAAC,GAAA,GAIA7Y,GAAA21D,EAAA31D,IAAAg7C,EAAA5vB,IAAA9C,aA3BA,KA6BA3lB,KAAAozD,gBAAA/1D,EAAA21D,EAAAC,GAIA59C,EAAAY,GAAAC,EAAA,KAGAg9C,EAAA1oD,EAIA,QAAAnN,EAAA,EAAmBA,EAAA82B,EAAO92B,IAAA,CAE1B,IAAA4Y,EACAC,EAAAg9C,EACA79C,EAFAY,EAAA,EAAA5Y,EAAA,GAEA6Y,GAAA,EAGA7Y,GAAA21D,EAAA31D,EAAA,KAAAA,IAAA21D,EAAA31D,IAAAg7C,EAAA5vB,IAAA9C,aA/CA,QAiDA3lB,KAAAmzD,WAAA91D,EAAA21D,EAAAC,GACA59C,EAAAY,EAAA,GAAAC,GAAA,GAGAlW,KAAAozD,gBAAA/1D,EAAA21D,EAAAC,GAGA,QAAA51D,EAAA,EAAmBA,EAAA2C,KAAAgxD,OAAiB3zD,IACpC,QAAAmN,EAAA,EAAuBA,EAAAxK,KAAAixD,QAAkBzmD,IACzC0mD,EAAA7zD,EAAAmN,EAAA6K,EAAAhY,GAAAmN,IAIA,OAAAxK,MAMAq4C,EAAA0Y,IAAAgC,UAAA9zD,UAAAm0D,gBAAA,SAAA/1D,EAAA21D,EAAAC,GACAA,EAAAD,EAAA31D,IAAA41D,EAAA51D,GACA21D,EAAAC,EAAA51D,IAAA21D,EAAA31D,GACA41D,EAAA51D,KACA21D,EAAA31D,MAMAg7C,EAAA0Y,IAAAgC,UAAA9zD,UAAAk0D,WAAA,SAAA91D,EAAA21D,EAAAC,GACAA,EAAAD,EAAA31D,EAAA,IAAA41D,EAAA51D,GACA21D,EAAAC,EAAA51D,IAAA21D,EAAA31D,EAAA,GACA41D,EAAA51D,KAAA,EACA21D,EAAA31D,EAAA,GAAAA,GAYAg7C,EAAA0Y,IAAAsC,SAAA,SAAAvQ,EAAAC,EAAAsD,GACAhO,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,GACA/iD,KAAA0mD,SAAA,CACA4M,KAAA,UACAC,QAAA,YACAC,SAAA,GAEAxzD,KAAA2nD,WAAAtB,GAEArmD,KAAAyzD,MAAApb,EAAAlwB,KAAAnoB,KAAA0mD,SAAA8M,UACAxzD,KAAAgkB,KAAAhkB,KAAAmxD,SAAA,IAEA9Y,EAAA0Y,IAAAsC,SAAA/N,OAAAjN,EAAA0Y,KAMA1Y,EAAA0Y,IAAAsC,SAAAp0D,UAAAolD,UAAA,SAAAqP,GACA,QAAAr2D,EAAA,EAAmBA,EAAA2C,KAAAgxD,OAAiB3zD,IACpC,QAAAmN,EAAA,EAAuBA,EAAAxK,KAAAixD,QAAkBzmD,IACzCxK,KAAAgkB,KAAA3mB,GAAAmN,GAAA6tC,EAAA5vB,IAAA9C,aAAA+tC,EAAA,IAGA,OAAA1zD,MAOAq4C,EAAA0Y,IAAAsC,SAAAp0D,UAAA0oD,WAAA,SAAAtB,GACA,QAAAlnD,KAAAknD,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,IAG5Bk5C,EAAA0Y,IAAAsC,SAAAp0D,UAAA00D,IAAA,SAAA19C,EAAAC,EAAA5X,GACA0B,KAAAgkB,KAAA/N,GAAAC,GAAA5X,GAGA+5C,EAAA0Y,IAAAsC,SAAAp0D,UAAAN,OAAA,SAAAuyD,GACA,IAAA0C,EAAA5zD,KAAAmxD,SAAA,GACAmC,EAAAtzD,KAAA0mD,SAAA4M,KACAC,EAAAvzD,KAAA0mD,SAAA6M,QAGA,QAAA/oD,EAAA,EAAmBA,EAAAxK,KAAAixD,QAAkBzmD,IAAA,CACrC,IAAAqpD,EAAA,EACAC,EAAA,EACA,IAAA9zD,KAAA0mD,SAAA8M,WACAK,EAAA,EACAC,EAAAtpD,EAAA,GAGA,QAAAnN,EAAAy2D,EAAgCz2D,EAAA2C,KAAAgxD,OAAiB3zD,GAAAw2D,EAAA,CAEjD,IAAAE,EAAA/zD,KAAAgkB,KAAA3mB,GAAAmN,GACAwpD,EAAAh0D,KAAAi0D,cAAA52D,EAAAmN,GAEAupD,IAAA,GAAAR,EAAAxzC,QAAAi0C,GACAJ,EAAAv2D,GAAAmN,GAAA,EAEAupD,IAAA,GAAAT,EAAAvzC,QAAAi0C,KACAJ,EAAAv2D,GAAAmN,GAAA,IAKAxK,KAAAgkB,KAAA4vC,EAEA5zD,KAAAk0D,gBAAAhD,IAGA7Y,EAAA0Y,IAAAsC,SAAAp0D,UAAAi1D,gBAAA,SAAAhD,GACA,GAAAA,EAEA,QAAA1mD,EAAA,EAAmBA,EAAAxK,KAAAixD,QAAkBzmD,IAAA,CACrC,IAAAqpD,EAAA,EACAC,EAAA,EACA,IAAA9zD,KAAA0mD,SAAA8M,WACAK,EAAA,EACAC,EAAAtpD,EAAA,GAEA,QAAAnN,EAAAy2D,EAAgCz2D,EAAA2C,KAAAgxD,OAAiB3zD,GAAAw2D,EACjD3C,EAAA7zD,EAAAmN,EAAAxK,KAAAgkB,KAAA3mB,GAAAmN,MAQA6tC,EAAA0Y,IAAAsC,SAAAp0D,UAAAg1D,cAAA,SAAA5K,EAAAC,GACA,IAAA7gD,EAAA,EACA,QAAApL,EAAA,EAAmBA,EAAA2C,KAAAyzD,MAAAlyD,OAAuBlE,IAAA,CAC1C,IAAAiW,EAAAtT,KAAAyzD,MAAAp2D,GACA4Y,EAAAozC,EAAA/1C,EAAA,GACA4C,EAAAozC,EAAAh2C,EAAA,GAEA2C,EAAA,GAAAA,GAAAjW,KAAAgxD,QAAA/6C,EAAA,GAAAC,GAAAlW,KAAAgxD,SACAvoD,GAAA,IAAAzI,KAAAgkB,KAAA/N,GAAAC,GAAA,KAGA,OAAAzN,GASA4vC,EAAA0Y,IAAAsC,SAAAp0D,UAAAk1D,QAAA,SAAAjD,EAAA5yD,EAAA81D,GACA91D,IAAiBA,EAAA,GAEjB,IAAA+1D,EAAA,GACAC,EAAA,GAEA,QAAAr+C,EAAA,EAAmBA,EAAAjW,KAAAgxD,OAAiB/6C,IACpC,QAAAC,EAAA,EAAuBA,EAAAlW,KAAAixD,QAAkB/6C,IACzC,GAAAlW,KAAAu0D,WAAAt+C,EAAAC,EAAA5X,GAAA,CACA,IAAAa,EAAA,CAAA8W,EAAAC,GACAo+C,EAAAt0D,KAAAw0D,UAAAr1D,MACAk1D,EAAAzuD,KAAA,CAAAqQ,EAAAC,IAIA,IAAAw6C,EAAA2D,EAAAhc,EAAA5vB,IAAAM,cAAA,EAAAsrC,EAAA9yD,OAAA,IAEA3C,EAAAoB,KAAAw0D,UAAA9D,GACA+D,EAAA,GAOA,IANAA,EAAA71D,GAAA8xD,SACA4D,EAAA11D,GAGAoB,KAAA00D,eAAAD,EAAAH,EAAA,CAAA5D,IAAA,EAAApyD,GAEAP,OAAA6qB,KAAA0rC,GAAA/yD,OAAA,IAGA,IACAozD,GADAx1D,EAAAa,KAAA40D,WAAAH,EAAAH,IACA,GACAO,EAAA11D,EAAA,GAGAswC,EAAA,GAQA,QAAAqlB,KAPArlB,EAAAzvC,KAAAw0D,UAAAG,MACA30D,KAAA00D,eAAAjlB,EAAA6kB,EAAA,CAAAK,IAAA,EAAAr2D,GAGA0B,KAAA+0D,mBAAAF,EAAAF,EAAAF,EAAAH,EAAAh2D,EAAA81D,GAGA3kB,EAAA,CACA,IAAA/Q,EAAA+Q,EAAAqlB,GACA90D,KAAAgkB,KAAA0a,EAAA,IAAAA,EAAA,IAAApgC,EACAm2D,EAAAK,GAAAp2B,SACA41B,EAAAQ,IAIA90D,KAAAk0D,gBAAAhD,IAOA7Y,EAAA0Y,IAAAsC,SAAAp0D,UAAA21D,WAAA,SAAAH,EAAAH,GACA,IAAAK,EAAAE,EACAG,EAAAj3D,OAAA6qB,KAAA6rC,GACAQ,EAAAl3D,OAAA6qB,KAAA0rC,GACA,QAAAj3D,EAAA,EAAmBA,EAAA,EAAOA,IAAA,CAE1B,IAKAurB,EANA,GAAAosC,EAAAzzD,OAAA0zD,EAAA1zD,OAEAszD,EAAAJ,GADA7rC,EAAAosC,GACA3c,EAAA5vB,IAAAM,cAAA,EAAAH,EAAArnB,OAAA,KACAozD,EAAA30D,KAAAk1D,YAAAL,EAAAP,QAIAK,EAAAL,GADA1rC,EAAAqsC,GACA5c,EAAA5vB,IAAAM,cAAA,EAAAH,EAAArnB,OAAA,KACAszD,EAAA70D,KAAAk1D,YAAAP,EAAAF,GAGA,IADAE,EAAA,GAAAE,EAAA,KAAAF,EAAA,GAAAE,EAAA,KAAAF,EAAA,GAAAE,EAAA,KAAAF,EAAA,GAAAE,EAAA,IACA,GACA,MAIA,OAAAF,EAAAE,IAGAxc,EAAA0Y,IAAAsC,SAAAp0D,UAAAi2D,YAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,KACAC,EAAA,KACA,QAAAR,KAAAM,EAAA,CACA,IAAAj2D,EAAAi2D,EAAAN,GACAn3D,GAAAwB,EAAA,GAAAg2D,EAAA,KAAAh2D,EAAA,GAAAg2D,EAAA,KAAAh2D,EAAA,GAAAg2D,EAAA,KAAAh2D,EAAA,GAAAg2D,EAAA,KACA,OAAAG,GAAA33D,EAAA23D,KACAA,EAAA33D,EACA03D,EAAAl2D,GAGA,OAAAk2D,GAGAhd,EAAA0Y,IAAAsC,SAAAp0D,UAAAy1D,eAAA,SAAAD,EAAAH,EAAAxvD,EAAAywD,EAAAj3D,GACA,KAAAwG,EAAAvD,OAAA,IACA,IAAApC,EAAA2F,EAAA4nB,OAAA,QACA8oC,EAAA,CACA,CAAAr2D,EAAA,KAAAA,EAAA,IACA,CAAAA,EAAA,KAAAA,EAAA,IACA,CAAAA,EAAA,GAAAA,EAAA,MACA,CAAAA,EAAA,GAAAA,EAAA,OAEA,QAAA9B,EAAA,EAAuBA,EAAAm4D,EAAAj0D,OAAkBlE,IAAA,CACzC,IAAAuB,EAAAoB,KAAAw0D,UAAAgB,EAAAn4D,IACA,OAAAo3D,EAAA71D,IAAAoB,KAAAu0D,WAAAiB,EAAAn4D,GAAA,GAAAm4D,EAAAn4D,GAAA,GAAAiB,KACAm2D,EAAA71D,GAAA42D,EAAAn4D,GACAk4D,UACAjB,EAAA11D,GAEAkG,EAAAc,KAAA4vD,EAAAn4D,QAMAg7C,EAAA0Y,IAAAsC,SAAAp0D,UAAA81D,mBAAA,SAAAF,EAAAF,EAAAF,EAAAH,EAAAh2D,EAAA81D,GACA,IACAjuC,EAAA2kC,EADA9qD,KAAAw0D,UAAAG,GAEAA,EAAA,GAAAE,EAAA,IACA1uC,EAAAwuC,EACA7J,EAAA+J,IAGA1uC,EAAA0uC,EACA/J,EAAA6J,GAEA,QAAA/hC,EAAAzM,EAAA,GAAuByM,GAAAk4B,EAAA,GAAYl4B,IAAA,CACnC5yB,KAAAgkB,KAAA4O,GAAAzM,EAAA,IAAA7nB,EACA,IAAAa,EAAA,CAAAyzB,EAAAzM,EAAA,IAEAsuC,EADAgB,EAAAz1D,KAAAw0D,UAAAr1D,IACAA,SACAm1D,EAAAmB,GAEArB,GAAAjuC,EAAA,GAAA2kC,EAAA,IACAsJ,EAAAjuC,EAAA,CAAA2kC,EAAA,GAAA3kC,EAAA,KAIA,IAAAlQ,EAAA60C,EAAA,GAEA6J,EAAA,GAAAE,EAAA,IACA1uC,EAAAwuC,EACA7J,EAAA+J,IAGA1uC,EAAA0uC,EACA/J,EAAA6J,GAEA,QAAA9hC,EAAA1M,EAAA,GAAuB0M,EAAAi4B,EAAA,GAAWj4B,IAAA,CAClC7yB,KAAAgkB,KAAA/N,GAAA4c,GAAAv0B,EACA,IACAm3D,EADAt2D,EAAA,CAAA8W,EAAA4c,GAEA4hC,EADAgB,EAAAz1D,KAAAw0D,UAAAr1D,IACAA,SACAm1D,EAAAmB,GAEArB,GAAAjuC,EAAA,GAAA2kC,EAAA,IACAsJ,EAAA,CAAAtJ,EAAA,GAAA3kC,EAAA,KAAA2kC,EAAA,GAAAA,EAAA,MAIAzS,EAAA0Y,IAAAsC,SAAAp0D,UAAAs1D,WAAA,SAAAt+C,EAAAC,EAAA5X,GACA,OAAA2X,GAAA,GAAAA,EAAAjW,KAAAgxD,QAAA96C,GAAA,GAAAA,EAAAlW,KAAAixD,SAAAjxD,KAAAgkB,KAAA/N,GAAAC,KAAA5X,GAGA+5C,EAAA0Y,IAAAsC,SAAAp0D,UAAAu1D,UAAA,SAAAr1D,GACA,OAAAA,EAAA,OAAAA,EAAA,IAOAk5C,EAAA0Y,IAAA2E,QAAA,SAAA5S,EAAAC,GACA1K,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,GACA/iD,KAAA21D,OAAA,GACA31D,KAAA41D,WAAA,IAEAvd,EAAA0Y,IAAA2E,QAAApQ,OAAAjN,EAAA0Y,KAMA1Y,EAAA0Y,IAAA2E,QAAAz2D,UAAA42D,SAAA,WACA,OAAA71D,KAAA21D,QAOAtd,EAAA0Y,IAAA2E,QAAAz2D,UAAA62D,aAAA,WACA,OAAA91D,KAAA41D,YAQAvd,EAAA0Y,IAAAgF,OAAA,SAAAjT,EAAAC,EAAAsD,GAUA,QAAAlnD,KATAk5C,EAAA0Y,IAAA2E,QAAAl4D,KAAAwC,KAAA8iD,EAAAC,GAEA/iD,KAAA0mD,SAAA,CACAsP,UAAA,MACAC,WAAA,MACAC,eAAA,OACAC,cAAA,GACAC,UAAA,KAEA/P,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAE5Ba,KAAAq2D,UAAA,CACAC,KAAA,EACAC,SAAA,GAEAv2D,KAAAw2D,iBAAA,GACAx2D,KAAAy2D,OAAA,GAEAz2D,KAAA02D,aAAA12D,KAAA02D,aAAA73D,KAAAmB,MACAA,KAAA22D,kBAAA32D,KAAA22D,kBAAA93D,KAAAmB,MACAA,KAAA42D,gBAAA52D,KAAA42D,gBAAA/3D,KAAAmB,MACAA,KAAA62D,sBAAA72D,KAAA62D,sBAAAh4D,KAAAmB,OAEAq4C,EAAA0Y,IAAAgF,OAAAzQ,OAAAjN,EAAA0Y,IAAA2E,SAMArd,EAAA0Y,IAAAgF,OAAA92D,UAAAN,OAAA,SAAAuyD,GACAlxD,KAAA21D,OAAA,GACA31D,KAAAgkB,KAAAhkB,KAAAmxD,SAAA,GACAnxD,KAAAy2D,OAAA,GACAz2D,KAAA82D,KAAA,EAEA92D,KAAA41D,WAAA,GACA,IAAAmB,GAAA/2D,KAAAgxD,OAAA,IAAAhxD,KAAAixD,QAAA,GAEAjxD,KAAAg3D,aAEA,IAAAC,EAAAC,KAAAC,MAEA,GAEA,GADAD,KAAAC,MACAF,EAAAj3D,KAAA0mD,SAAA0P,UAAgD,MAGhD,IAAAhzD,EAAApD,KAAAo3D,YACA,IAAAh0D,EAAoB,MAEpB,IAAA4hD,EAAA5hD,EAAAyB,MAAA,KACAoR,EAAAE,SAAA6uC,EAAA,IACA9uC,EAAAC,SAAA6uC,EAAA,IACA1xC,EAAAtT,KAAAq3D,qBAAAphD,EAAAC,GACA,GAAA5C,EAAA,CAKA,IAAAgkD,EAAA,EACA,GAEA,GADAA,IACAt3D,KAAAu3D,YAAAthD,EAAAC,EAAA5C,EAAA,GAAAA,EAAA,KAGAtT,KAAAw3D,wBAAAvhD,EAAAC,GACAlW,KAAAw3D,wBAAAvhD,EAAA3C,EAAA,GAAA4C,EAAA5C,EAAA,IACA,aAESgkD,EAAAt3D,KAAAw2D,kBAET,IAAAiB,EAAA,EACA,QAAA5gD,KAAA7W,KAAAy2D,OACAz2D,KAAAy2D,OAAA5/C,GAAA,GAAsC4gD,WAGjCz3D,KAAA82D,KAAAC,EAAA/2D,KAAA0mD,SAAAyP,eAAAsB,GAIL,GAFAz3D,KAAA03D,YAEAxG,EACA,QAAA7zD,EAAA,EAAuBA,EAAA2C,KAAAgxD,OAAiB3zD,IACxC,QAAAmN,EAAA,EAA2BA,EAAAxK,KAAAixD,QAAkBzmD,IAC7C0mD,EAAA7zD,EAAAmN,EAAAxK,KAAAgkB,KAAA3mB,GAAAmN,IAQA,OAHAxK,KAAAy2D,OAAA,GACAz2D,KAAAgkB,KAAA,KAEAhkB,MAGAq4C,EAAA0Y,IAAAgF,OAAA92D,UAAAy3D,aAAA,SAAAzgD,EAAAC,EAAA5X,GACA,IAAAA,GAAA,IAAAA,GACA0B,KAAAgkB,KAAA/N,GAAAC,GAAA,EACAlW,KAAA82D,QAGA92D,KAAAy2D,OAAAxgD,EAAA,IAAAC,GAAA,GAIAmiC,EAAA0Y,IAAAgF,OAAA92D,UAAA23D,gBAAA,SAAA3gD,EAAAC,GACA,QAAAD,EAAA,GAAAC,EAAA,GAAAD,GAAAjW,KAAAgxD,QAAA96C,GAAAlW,KAAAixD,UACA,IAAAjxD,KAAAgkB,KAAA/N,GAAAC,IAGAmiC,EAAA0Y,IAAAgF,OAAA92D,UAAA03D,kBAAA,SAAA1gD,EAAAC,GACA,QAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAjW,KAAAgxD,QAAA96C,EAAA,GAAAlW,KAAAixD,UACA,IAAAjxD,KAAAgkB,KAAA/N,GAAAC,IAGAmiC,EAAA0Y,IAAAgF,OAAA92D,UAAA43D,sBAAA,SAAA5gD,EAAAC,GACAlW,KAAAy2D,OAAAxgD,EAAA,IAAAC,GAAA,GAGAmiC,EAAA0Y,IAAAgF,OAAA92D,UAAA+3D,WAAA,WACA,IAAApF,EAAA5xD,KAAA23D,WACA,IAAA/F,EAAA,CACA,IAAAvI,EAAAniD,KAAA4C,MAAA9J,KAAAgxD,OAAA,GACA1H,EAAApiD,KAAA4C,MAAA9J,KAAAixD,QAAA,GACAW,EAAAvZ,EAAA0Y,IAAA6G,QAAAtB,KAAAuB,mBAAAxO,EAAAC,EAAAtpD,KAAA0mD,UAEA1mD,KAAA21D,OAAA/vD,KAAAgsD,GACAA,EAAAjzD,OAAAqB,KAAA02D,cACA12D,KAAA83D,aACA93D,KAAA83D,YAAAztD,QAAA0tD,IACA/3D,KAAA21D,OAAA/vD,KAAAmyD,GACAA,EAAAp5D,OAAAqB,KAAA02D,iBAOAre,EAAA0Y,IAAAgF,OAAA92D,UAAA+4D,UAAA,SAAApG,GACA5xD,KAAA23D,WAAA/F,GAKAvZ,EAAA0Y,IAAAgF,OAAA92D,UAAAg5D,QAAA,SAAArG,GACA5xD,KAAA23D,YAIA33D,KAAA83D,cAAgC93D,KAAA83D,YAAA,IAChC93D,KAAA83D,YAAAlyD,KAAAgsD,IAJA5xD,KAAA23D,WAAA/F,GAWAvZ,EAAA0Y,IAAAgF,OAAA92D,UAAAm4D,UAAA,WACA,IAAAc,EAAA,GACAC,EAAA,GACA,QAAAthD,KAAA7W,KAAAy2D,OAAA,CAEA,IADAz2D,KAAAy2D,OAAA5/C,GAEAshD,EAAAvyD,KAAAiR,GAGAqhD,EAAAtyD,KAAAiR,GAIA,IAAAN,EAAA4hD,EAAA52D,OAAA42D,EAAAD,EACA,IAAA3hD,EAAAhV,OAAsB,YAEtBsV,EAAAN,EAAApF,OAAA+yB,SAGA,cAFAlkC,KAAAy2D,OAAA5/C,GAEAA,GAOAwhC,EAAA0Y,IAAAgF,OAAA92D,UAAAs4D,YAAA,SAAAthD,EAAAC,EAAAya,EAAAC,GACA,IAAAwnC,EAAA/f,EAAA5vB,IAAAU,iBAAAnpB,KAAAq2D,WAGA,SAFA+B,EAAA/f,EAAA0Y,IAAA6G,QAAAQ,GAAAC,eAAApiD,EAAAC,EAAAya,EAAAC,EAAA5wB,KAAA0mD,WAEA4R,QAAAt4D,KAAA42D,gBAAA52D,KAAA22D,qBAMAyB,EAAAz5D,OAAAqB,KAAA02D,cAGA0B,aAAA/f,EAAA0Y,IAAA6G,QAAAtB,MAAkDt2D,KAAA21D,OAAA/vD,KAAAwyD,GAClDA,aAAA/f,EAAA0Y,IAAA6G,QAAArB,WACA6B,EAAAG,oBAAAv4D,KAAA62D,uBACA72D,KAAA41D,WAAAhwD,KAAAwyD,KAGA,IAGA/f,EAAA0Y,IAAAgF,OAAA92D,UAAAu4D,wBAAA,SAAAnO,EAAAC,GACA,IAAAkP,EAAAngB,EAAAlwB,KAAA,GAEA,QAAA9qB,EAAA,EAAmBA,EAAAm7D,EAAAj3D,OAAmBlE,IAAA,CACtC,IAAAo7D,EAAAD,EAAAn7D,GACA4Y,EAAAozC,EAAAoP,EAAA,GACAviD,EAAAozC,EAAAmP,EAAA,UACAz4D,KAAAy2D,OAAAxgD,EAAA,IAAAC,GACAD,EAAAozC,EAAA,EAAAoP,EAAA,GACAviD,EAAAozC,EAAA,EAAAmP,EAAA,UACAz4D,KAAAy2D,OAAAxgD,EAAA,IAAAC,KAOAmiC,EAAA0Y,IAAAgF,OAAA92D,UAAAo4D,qBAAA,SAAAhO,EAAAC,GACA,GAAAD,GAAA,GAAAC,GAAA,GAAAD,GAAArpD,KAAAgxD,OAAA,GAAA1H,GAAAtpD,KAAAixD,QAAA,EAAgF,YAEhF,IAAAxoD,EAAA,KACA+vD,EAAAngB,EAAAlwB,KAAA,GAEA,QAAA9qB,EAAA,EAAmBA,EAAAm7D,EAAAj3D,OAAmBlE,IAAA,CACtC,IAAAo7D,EAAAD,EAAAn7D,GACA4Y,EAAAozC,EAAAoP,EAAA,GACAviD,EAAAozC,EAAAmP,EAAA,GAEA,IAAAz4D,KAAAgkB,KAAA/N,GAAAC,GAAA,CACA,GAAAzN,EAAyB,YACzBA,EAAAgwD,GAKA,OAAAhwD,EAEA,EAAAA,EAAA,IAAAA,EAAA,IAFkB,MAQlB4vC,EAAA0Y,IAAAgF,OAAA92D,UAAAy4D,UAAA,WACA,IAAA/yC,EAAA3kB,KAAAgkB,KACA00C,EAAA,SAAAziD,EAAAC,GACA,WAAAyO,EAAA1O,GAAAC,IAEA,QAAA7Y,EAAA,EAAmBA,EAAA2C,KAAA21D,OAAAp0D,OAAwBlE,IAAA,CAC3C,IAAAu0D,EAAA5xD,KAAA21D,OAAAt4D,GACAu0D,EAAA+G,aACA/G,EAAAgH,SAAAF,KAOArgB,EAAA0Y,IAAA8H,QAAA,SAAA/V,EAAAC,EAAAsD,GASA,QAAAlnD,KARAk5C,EAAA0Y,IAAA2E,QAAAl4D,KAAAwC,KAAA8iD,EAAAC,GAEA/iD,KAAA0mD,SAAA,CACAsP,UAAA,MACAC,WAAA,MACA6C,kBAAA,GACA1C,UAAA,KAEA/P,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAE5Ba,KAAA+4D,cAAA,GACA/4D,KAAAg5D,kBAAA,GAEAh5D,KAAAi5D,WAAA,GACAj5D,KAAAk5D,aAAA,GAEAl5D,KAAA02D,aAAA12D,KAAA02D,aAAA73D,KAAAmB,MACAA,KAAA22D,kBAAA32D,KAAA22D,kBAAA93D,KAAAmB,MACAA,KAAA42D,gBAAA52D,KAAA42D,gBAAA/3D,KAAAmB,OAEAq4C,EAAA0Y,IAAA8H,QAAAvT,OAAAjN,EAAA0Y,IAAA2E,SAMArd,EAAA0Y,IAAA8H,QAAA55D,UAAAN,OAAA,SAAAuyD,GAEA,IADA,IAAA+F,EAAAC,KAAAC,QACA,CAEA,GADAD,KAAAC,MACAF,EAAAj3D,KAAA0mD,SAAA0P,UAAgD,YAYhD,GAVAp2D,KAAAgkB,KAAAhkB,KAAAmxD,SAAA,GACAnxD,KAAA82D,KAAA,EACA92D,KAAA21D,OAAA,GACA31D,KAAAk5D,aAAA,GACAl5D,KAAAm5D,iBAEAn5D,KAAA23D,aACA33D,KAAA21D,OAAA/vD,KAAA5F,KAAA23D,YACA33D,KAAA23D,WAAAh5D,OAAAqB,KAAA02D,iBAEA12D,KAAA21D,OAAAp0D,OAAA,IACAvB,KAAAo5D,qBAAwC,MAGxC,GAAAlI,EACA,QAAA7zD,EAAA,EAAuBA,EAAA2C,KAAAgxD,OAAiB3zD,IACxC,QAAAmN,EAAA,EAA2BA,EAAAxK,KAAAixD,QAAkBzmD,IAC7C0mD,EAAA7zD,EAAAmN,EAAAxK,KAAAgkB,KAAA3mB,GAAAmN,IAKA,OAAAxK,MAGAq4C,EAAA0Y,IAAA8H,QAAA55D,UAAA+4D,UAAA,SAAApG,GACA5xD,KAAA23D,WAAA/F,GAMAvZ,EAAA0Y,IAAA8H,QAAA55D,UAAAk6D,eAAA,WACA,IAAAhlC,EAAAn0B,KAAAgxD,OAAA,EACAQ,EAAAxxD,KAAAixD,QAAA,EAEA,GACA,IAAAW,EAAA5xD,KAAAq5D,gBAEA,GAAAr5D,KAAA82D,MAAA3iC,EAAAq9B,GAAAxxD,KAAA0mD,SAAAoS,kBAAoE,YAC/DlH,IAQLvZ,EAAA0Y,IAAA8H,QAAA55D,UAAAo6D,cAAA,WAEA,IADA,IAAA95C,EAAA,EACAA,EAAAvf,KAAA+4D,eAAA,CACAx5C,IAEA,IAAAqyC,EAAAvZ,EAAA0Y,IAAA6G,QAAAtB,KAAAgD,aAAAt5D,KAAAgxD,OAAAhxD,KAAAixD,QAAAjxD,KAAA0mD,UACA,GAAAkL,EAAA0G,QAAAt4D,KAAA42D,gBAAA52D,KAAA22D,mBAIA,OAFA/E,EAAAjzD,OAAAqB,KAAA02D,cACA12D,KAAA21D,OAAA/vD,KAAAgsD,GACAA,EAIA,aAOAvZ,EAAA0Y,IAAA8H,QAAA55D,UAAAm6D,mBAAA,WAEA,IADA,IAAA1U,EAAA,EACAA,EAAA1kD,KAAAg5D,mBAAA,CACAtU,IACA1kD,KAAA41D,WAAA,GAGA51D,KAAAgkB,KAAAhkB,KAAAmxD,SAAA,GACA,QAAA9zD,EAAA,EAAuBA,EAAA2C,KAAA21D,OAAAp0D,OAAwBlE,IAAA,CAC/C,IAAAu0D,EAAA5xD,KAAA21D,OAAAt4D,GACAu0D,EAAA+G,aACA/G,EAAAjzD,OAAAqB,KAAA02D,cAOA,IAJA12D,KAAAk5D,aAAAl5D,KAAA21D,OAAA7sC,QAAAu7B,YACArkD,KAAAi5D,WAAA,GACAj5D,KAAAk5D,aAAA33D,QAAuCvB,KAAAi5D,WAAArzD,KAAA5F,KAAAk5D,aAAAtV,SAEvC,CAEA,IAAA6Q,EAAAz0D,KAAAi5D,WAAA/0B,SAGAq1B,EAAAv5D,KAAAw5D,aAAAx5D,KAAAk5D,aAAAzE,GAGAgF,EAAAz5D,KAAAw5D,aAAAx5D,KAAAi5D,WAAAM,GAGA,IADAv5D,KAAA05D,cAAAH,EAAAE,GACsB,MAEtB,IAAAz5D,KAAAk5D,aAAA33D,OAA4C,UAG5C,UAMA82C,EAAA0Y,IAAA8H,QAAA55D,UAAAu6D,aAAA,SAAAG,EAAA/H,GACA,IAAAx4C,EAAAmqC,IACAqW,EAAAhI,EAAAiI,YACApxD,EAAA,KAEA,QAAApL,EAAA,EAAmBA,EAAAs8D,EAAAp4D,OAAkBlE,IAAA,CACrC,IAAAc,EAAAw7D,EAAAt8D,GACAK,EAAAS,EAAA07D,YACAlpC,EAAAjzB,EAAA,GAAAk8D,EAAA,GACAhpC,EAAAlzB,EAAA,GAAAk8D,EAAA,GACAj8D,EAAAgzB,IAAAC,IAEAjzB,EAAAyb,IACAA,EAAAzb,EACA8K,EAAAtK,GAIA,OAAAsK,GAGA4vC,EAAA0Y,IAAA8H,QAAA55D,UAAAy6D,cAAA,SAAAH,EAAAE,GAMA,IAAAK,EAAAP,EAAAM,YACAE,EAAAN,EAAAI,YAEAG,EAAAD,EAAA,GAAAD,EAAA,GACAG,EAAAF,EAAA,GAAAD,EAAA,GAEA,GAAA5yD,KAAAiR,IAAA6hD,GAAA9yD,KAAAiR,IAAA8hD,GACA,IACAC,IADAC,EAAAF,EAAA,OACA,KACApiD,EAAA4hD,EAAAW,UACAtiD,EAAA2hD,EAAAY,WACAn7C,EAAA,MAGA,KAAAi7C,EACAD,IADAC,EAAAH,EAAA,OACA,KACAniD,EAAA4hD,EAAAa,SACAxiD,EAAA2hD,EAAAc,YACAr7C,EAAA,EAGA,IAAAwxC,EAAA1wD,KAAAw6D,aAAAjB,EAAAY,GACA,IAAAzJ,EAAiB,SAEjB,GAAAA,EAAAxxC,IAAArH,GAAA64C,EAAAxxC,IAAApH,EAAA,CACA,IAAA2iD,EAAA/J,EAAA5nC,QACAxqB,EAAA,KACA,OAAA47D,GACA,OAAA57D,EAAAm7D,EAAAa,SAAA,EAA+C,MAC/C,OAAAh8D,EAAAm7D,EAAAY,WAAA,EAAiD,MACjD,OAAA/7D,EAAAm7D,EAAAc,YAAA,EAAkD,MAClD,OAAAj8D,EAAAm7D,EAAAW,UAAA,EAEAK,GAAAv7C,EAAA,MAAA5gB,EACA0B,KAAA06D,SAAA,CAAAhK,EAAA+J,SAGA,GAAA/J,EAAAxxC,GAAArH,EAAA,GAAA64C,EAAAxxC,GAAApH,EAAA,GAEA,IAAAokB,EAAAw0B,EAAAxxC,GAAA66C,EAAA76C,GACA,OAAAg7C,GACA,OACA,WAAAS,EAAAz+B,EAAA,MAAsD,MACtD,OACA,OAAAy+B,EAAAz+B,EAAA,MAKA,GAHAg+B,KAAAS,GAAA,IAEAF,EAAAz6D,KAAAw6D,aAAAf,EAAAS,IACmB,UAEnBU,EAAA,OACA17C,GAAAwxC,EAAAxxC,GAEA07C,EADAC,GAAA37C,EAAA,MACAu7C,EAAAI,GACA76D,KAAA06D,SAAA,CAAAhK,EAAAkK,EAAAH,QAGA,CAEA,IAAAI,GAAA37C,EAAA,KAEA,KADAu7C,EAAAz6D,KAAAw6D,aAAAf,EAAAS,IACmB,SACnB,IAAAU,EAAA1zD,KAAA4B,OAAA2xD,EAAAI,GAAAnK,EAAAmK,IAAA,GAEAC,EAAA,MACAC,EAAA,MACAD,EAAA57C,GAAAwxC,EAAAxxC,GACA47C,EAAAD,GAAAD,EACAG,EAAA77C,GAAAu7C,EAAAv7C,GACA67C,EAAAF,GAAAD,EACA56D,KAAA06D,SAAA,CAAAhK,EAAAoK,EAAAC,EAAAN,IAkBA,OAfAlB,EAAAyB,QAAAtK,EAAA,GAAAA,EAAA,IACA+I,EAAAuB,QAAAP,EAAA,GAAAA,EAAA,KAGA,IADAv7C,EAAAlf,KAAAk5D,aAAAn5C,QAAAw5C,MAEAv5D,KAAAk5D,aAAAxsC,OAAAxN,EAAA,GACAlf,KAAAi5D,WAAArzD,KAAA2zD,KAIA,IADAr6C,EAAAlf,KAAAk5D,aAAAn5C,QAAA05C,MAEAz5D,KAAAk5D,aAAAxsC,OAAAxN,EAAA,GACAlf,KAAAi5D,WAAArzD,KAAA6zD,KAGA,GAGAphB,EAAA0Y,IAAA8H,QAAA55D,UAAAu7D,aAAA,SAAA5I,EAAAqJ,GACA,IAAAvK,EAAA,MACAp9C,EAAA,MACA/R,EAAA,EAEA,OAAA05D,GACA,OACA3nD,EAAA,MACAo9C,EAAA,CAAAkB,EAAAwI,UAAAxI,EAAA0I,SAAA,GACA/4D,EAAAqwD,EAAAyI,WAAAzI,EAAAwI,UAAA,EACA,MACA,OACA9mD,EAAA,MACAo9C,EAAA,CAAAkB,EAAAyI,WAAA,EAAAzI,EAAA0I,UACA/4D,EAAAqwD,EAAA2I,YAAA3I,EAAA0I,SAAA,EACA,MACA,OACAhnD,EAAA,MACAo9C,EAAA,CAAAkB,EAAAwI,UAAAxI,EAAA2I,YAAA,GACAh5D,EAAAqwD,EAAAyI,WAAAzI,EAAAwI,UAAA,EACA,MACA,OACA9mD,EAAA,MACAo9C,EAAA,CAAAkB,EAAAwI,UAAA,EAAAxI,EAAA0I,UACA/4D,EAAAqwD,EAAA2I,YAAA3I,EAAA0I,SAAA,EAIA,IAAAY,EAAA,GACAC,GAAA,EAEA,QAAA99D,EAAA,EAAmBA,EAAAkE,EAAYlE,IAAA,CAC/B,IAAA4Y,EAAAy6C,EAAA,GAAArzD,EAAAiW,EAAA,GACA4C,EAAAw6C,EAAA,GAAArzD,EAAAiW,EAAA,GACA4nD,EAAAt1D,KAAA,MAEA,IAAA5F,KAAAgkB,KAAA/N,GAAAC,GAEAilD,GAAA99D,EAAA,IAAwC69D,EAAA79D,GAAA,CAAA4Y,EAAAC,KAGxCilD,EAAA99D,EACAA,IAAoB69D,EAAA79D,EAAA,UAIpB,QAAAA,EAAA69D,EAAA35D,OAAA,EAAkClE,GAAA,EAAQA,IAC1C69D,EAAA79D,IAAwB69D,EAAAxuC,OAAArvB,EAAA,GAExB,OAAA69D,EAAA35D,OAAA25D,EAAAh3B,SAAA,MAMAmU,EAAA0Y,IAAA8H,QAAA55D,UAAAy7D,SAAA,SAAAU,GACA,QAAA/9D,EAAA,EAAmBA,EAAA+9D,EAAA75D,OAAmBlE,IAAA,CACtC,IAAAqzD,EAAA0K,EAAA/9D,EAAA,GACAo9D,EAAAW,EAAA/9D,GACAg+D,EAAA,IAAAhjB,EAAA0Y,IAAA6G,QAAArB,SAAA7F,EAAA,GAAAA,EAAA,GAAA+J,EAAA,GAAAA,EAAA,IACAY,EAAA18D,OAAAqB,KAAA02D,cACA12D,KAAA41D,WAAAhwD,KAAAy1D,KAIAhjB,EAAA0Y,IAAA8H,QAAA55D,UAAAy3D,aAAA,SAAAzgD,EAAAC,EAAA5X,GACA0B,KAAAgkB,KAAA/N,GAAAC,GAAA5X,EACA,IAAAA,GAAsB0B,KAAA82D,QAGtBze,EAAA0Y,IAAA8H,QAAA55D,UAAA23D,gBAAA,SAAA3gD,EAAAC,GACA,QAAAD,EAAA,GAAAC,EAAA,GAAAD,GAAAjW,KAAAgxD,QAAA96C,GAAAlW,KAAAixD,UACA,IAAAjxD,KAAAgkB,KAAA/N,GAAAC,IAGAmiC,EAAA0Y,IAAA8H,QAAA55D,UAAA03D,kBAAA,SAAA1gD,EAAAC,GACA,QAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAjW,KAAAgxD,QAAA96C,EAAA,GAAAlW,KAAAixD,UACA,IAAAjxD,KAAAgkB,KAAA/N,GAAAC,IAeAmiC,EAAA0Y,IAAAuK,MAAA,SAAAxY,EAAAC,EAAAsD,GAQA,QAAAlnD,KAPAk5C,EAAA0Y,IAAAvzD,KAAAwC,KAAA8iD,EAAAC,GAEA/iD,KAAA0mD,SAAA,CACA6U,UAAA,EACAC,WAAA,GAGAnV,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAO5Ba,KAAA0mD,SAAAxnD,eAAA,eACAc,KAAA0mD,SAAA,UAAA1mD,KAAAy7D,mBAAAz7D,KAAAgxD,OAAAhxD,KAAA0mD,SAAA,YAEA1mD,KAAA0mD,SAAAxnD,eAAA,gBACAc,KAAA0mD,SAAA,WAAA1mD,KAAAy7D,mBAAAz7D,KAAAixD,QAAAjxD,KAAA0mD,SAAA,cAKArO,EAAA0Y,IAAAuK,MAAAhW,OAAAjN,EAAA0Y,KAKA1Y,EAAA0Y,IAAAuK,MAAAr8D,UAAAN,OAAA,SAAAuyD,GAYA,GAXAlxD,KAAAqV,IAAArV,KAAAmxD,SAAA,GACAnxD,KAAA25D,MAAA,GACA35D,KAAA07D,eAAA,GAEA17D,KAAA27D,aACA37D,KAAA05D,gBACA15D,KAAA47D,2BACA57D,KAAA67D,+BACA77D,KAAA87D,eACA97D,KAAA+7D,mBAEA7K,EACA,QAAA7zD,EAAA,EAAuBA,EAAA2C,KAAAgxD,OAAiB3zD,IACxC,QAAAmN,EAAA,EAA2BA,EAAAxK,KAAAixD,QAAkBzmD,IAC7C0mD,EAAA7zD,EAAAmN,EAAAxK,KAAAqV,IAAAhY,GAAAmN,IAKA,OAAAxK,MAGAq4C,EAAA0Y,IAAAuK,MAAAr8D,UAAAw8D,mBAAA,SAAA3vC,EAAAhsB,GACA,IAAAgY,EAAA5Q,KAAA4C,MAAAgiB,EAAAhsB,EAAA,IACA+X,EAAA3Q,KAAA4C,MAAAgiB,EAAAhsB,EAAA,KAGA,OAFA+X,EAAA,IAAkBA,EAAA,GAClBC,EAAA,IAAkBA,EAAA,GAClB,CAAAD,EAAAC,IAGAugC,EAAA0Y,IAAAuK,MAAAr8D,UAAA08D,WAAA,WAEA,QAAAt+D,EAAA,EAAmBA,EAAA2C,KAAA0mD,SAAA6U,UAA6Bl+D,IAAA,CAChD2C,KAAA25D,MAAA/zD,KAAA,IACA,QAAA4E,EAAA,EAAuBA,EAAAxK,KAAA0mD,SAAA8U,WAA8BhxD,IACrDxK,KAAA25D,MAAAt8D,GAAAuI,KAAA,CAAgCqQ,EAAA,EAAAC,EAAA,EAAA4sC,MAAA,EAAAC,OAAA,EAAAiZ,YAAA,GAAAC,MAAA5+D,EAAA6+D,MAAA1xD,MAKhC6tC,EAAA0Y,IAAAuK,MAAAr8D,UAAAy6D,cAAA,WAEA,IAGAyC,EACAC,EACAC,EAGAzK,EACA0K,EATAC,EAAAlkB,EAAA5vB,IAAAM,cAAA,EAAA/oB,KAAA0mD,SAAA6U,UAAA,GACAiB,EAAAnkB,EAAA5vB,IAAAM,cAAA,EAAA/oB,KAAA0mD,SAAA8U,WAAA,GAMAjxD,GAAA,EAKA,GAGA,IAAAkyD,EAAA,UACAA,IAAApY,YAEA,GAQA,GAPA95C,GAAA,EACA4xD,EAAAM,EAAA7Y,MAGAwY,EAAAG,EAAAlkB,EAAAlwB,KAAA,GAAAg0C,GAAA,GACAE,EAAAG,EAAAnkB,EAAAlwB,KAAA,GAAAg0C,GAAA,KAEAC,EAAA,GAAAA,GAAAp8D,KAAA0mD,SAAA6U,WACAc,EAAA,GAAAA,GAAAr8D,KAAA0mD,SAAA8U,YAAA,CAIA,IAFA5J,EAAA5xD,KAAA25D,MAAA4C,GAAAC,IAEA,YAAAj7D,OAAA,GAEAqwD,EAAA,oBAAAwK,GACAxK,EAAA,oBAAAyK,EACA,MAMA,KAFAC,EAAAt8D,KAAA25D,MAAAyC,GAAAC,IAEA,YAAA96D,SACA+6D,EAAA,YAAA12D,KAAA,CAAA22D,EAAAC,IAEAx8D,KAAA07D,eAAA91D,KAAA,CAAAw2D,EAAAC,IACAE,EAAAH,EACAI,EAAAH,EACA9xD,GAAA,UAGSkyD,EAAAl7D,OAAA,QAAAgJ,SAEJkyD,EAAAl7D,OAAA,IAIL82C,EAAA0Y,IAAAuK,MAAAr8D,UAAA28D,yBAAA,WAGA,IAKAhK,EACA0K,EANAI,EAAA18D,KAAA0mD,SAAA6U,UACA9W,EAAAzkD,KAAA0mD,SAAA8U,WAGAx7D,KAAA07D,eAAA17D,KAAA07D,eAAArX,YAKA,QAAAhnD,EAAA,EAAmBA,EAAA2C,KAAA0mD,SAAA6U,UAA6Bl+D,IAChD,QAAAmN,EAAA,EAAuBA,EAAAxK,KAAA0mD,SAAA8U,WAA8BhxD,IAIrD,QAFAonD,EAAA5xD,KAAA25D,MAAAt8D,GAAAmN,IAEA,YAAAjJ,OAAA,CACA,IAAAo7D,EAAA,UACAA,IAAAtY,YAEA,IAAAuY,GAAA,EAEA,GAEA,IAAAC,EAAAF,EAAA/Y,MACAkZ,EAAAz/D,EAAAg7C,EAAAlwB,KAAA,GAAA00C,GAAA,GACAE,EAAAvyD,EAAA6tC,EAAAlwB,KAAA,GAAA00C,GAAA,GAEA,KAAAC,EAAA,GAAAA,GAAAJ,GACAK,EAAA,GAAAA,GAAAtY,GADA,CASA,GAFAmY,GAAA,EAEA,KAJAN,EAAAt8D,KAAA25D,MAAAmD,GAAAC,IAIA,YAAAx7D,OACA,MAGA,QAAAuzD,EAAA,EAAmCA,EAAAwH,EAAA,YAAA/6D,OAAqCuzD,IACxE,GAAAwH,EAAA,YAAAxH,GAAA,KAAAz3D,GACAi/D,EAAA,YAAAxH,GAAA,KAAAtqD,EAAA,CACAoyD,GAAA,EACA,MAIA,GAAAA,EAAoC,aAEnBD,EAAAp7D,QAEjBq7D,EACAhL,EAAA,YAAAhsD,KAAA,CAAA02D,EAAA,MAAAA,EAAA,QAGA93D,QAAAU,IAAA,gCAOAmzC,EAAA0Y,IAAAuK,MAAAr8D,UAAA48D,6BAAA,SAAAG,KAKA3jB,EAAA0Y,IAAAuK,MAAAr8D,UAAA68D,aAAA,WAGA,IASAkB,EACAC,EAGAvqC,EACAC,EAGA2pC,EAjBAnoC,EAAAn0B,KAAAgxD,OACAQ,EAAAxxD,KAAAixD,QAEAyL,EAAA18D,KAAA0mD,SAAA6U,UACA9W,EAAAzkD,KAAA0mD,SAAA8U,WAEA0B,EAAAh2D,KAAA4C,MAAA9J,KAAAgxD,OAAA0L,GACAS,EAAAj2D,KAAA4C,MAAA9J,KAAAixD,QAAAxM,GAIAuR,EAAAh2D,KAAA0mD,SAAA,UACAuP,EAAAj2D,KAAA0mD,SAAA,WAOA,QAAArpD,EAAA,EAAmBA,EAAAq/D,EAAQr/D,IAC3B,QAAAmN,EAAA,EAAuBA,EAAAi6C,EAAQj6C,IAAA,CAU/B,GANA,KAHAkoB,EAAAwqC,EAAA7/D,KAG2Bq1B,EAAA,GAC3B,KAHAC,EAAAwqC,EAAA3yD,KAG2BmoB,EAAA,GAE3BqqC,EAAA3kB,EAAA5vB,IAAAM,cAAAitC,EAAA,GAAAA,EAAA,IACAiH,EAAA5kB,EAAA5vB,IAAAM,cAAAktC,EAAA,GAAAA,EAAA,IAEAzrD,EAAA,EAEA,IADA8xD,EAAAt8D,KAAA25D,MAAAt8D,GAAAmN,EAAA,GACAmoB,GAAA2pC,EAAA,EAAAA,EAAA,WACA3pC,IAIA,GAAAt1B,EAAA,EAEA,IADAi/D,EAAAt8D,KAAA25D,MAAAt8D,EAAA,GAAAmN,GACAkoB,GAAA4pC,EAAA,EAAAA,EAAA,UACA5pC,IAOA,IAHA,IAAA0qC,EAAAl2D,KAAA4B,MAAAuvC,EAAA5vB,IAAAM,cAAA,EAAAm0C,EAAAF,GAAA,GACAK,EAAAn2D,KAAA4B,MAAAuvC,EAAA5vB,IAAAM,cAAA,EAAAo0C,EAAAF,GAAA,GAEAvqC,EAAA0qC,EAAAJ,GAAA7oC,GACAipC,EACAA,IAGAJ,IAIA,KAAArqC,EAAA0qC,EAAAJ,GAAAzL,GACA6L,EACAA,IAGAJ,IAIAvqC,GAAA0qC,EACAzqC,GAAA0qC,EAEAr9D,KAAA25D,MAAAt8D,GAAAmN,GAAA,EAAAkoB,EACA1yB,KAAA25D,MAAAt8D,GAAAmN,GAAA,EAAAmoB,EACA3yB,KAAA25D,MAAAt8D,GAAAmN,GAAA,MAAAwyD,EACAh9D,KAAA25D,MAAAt8D,GAAAmN,GAAA,OAAAyyD,EAEA,QAAAK,EAAA5qC,EAA6B4qC,EAAA5qC,EAAAsqC,EAAiBM,IAC9C,QAAAC,EAAA5qC,EAAiC4qC,EAAA5qC,EAAAsqC,EAAiBM,IAClDv9D,KAAAqV,IAAAioD,GAAAC,GAAA,IAOAllB,EAAA0Y,IAAAuK,MAAAr8D,UAAAu+D,iBAAA,SAAAC,EAAAC,GACA,IAAAC,EACAC,EACAl6D,EA8BA,OA5BA,IAAAg6D,GAAA,IAAAA,GACAC,EAAAtlB,EAAA5vB,IAAAM,cAAA00C,EAAA,IAAAA,EAAA,EAAAA,EAAA,SAGA/5D,EAFA,IAAAg6D,GACAE,EAAAH,EAAA,KACA,GAGAG,EAAAH,EAAA,EAAAA,EAAA,UACA,EAGAz9D,KAAAqV,IAAAsoD,GAAAj6D,GAAA,GAGA,IAAAg6D,GAAA,IAAAA,IACAE,EAAAvlB,EAAA5vB,IAAAM,cAAA00C,EAAA,IAAAA,EAAA,EAAAA,EAAA,UAGA/5D,EAFA,IAAAg6D,GACAC,EAAAF,EAAA,EAAAA,EAAA,SACA,GAGAE,EAAAF,EAAA,KACA,EAGAz9D,KAAAqV,IAAA3R,GAAAk6D,GAAA,GAGA,CAAAD,EAAAC,IAOAvlB,EAAA0Y,IAAAuK,MAAAr8D,UAAA4+D,eAAA,SAAAC,EAAAC,GACA,IAMAC,EACAC,EACAC,EAEAC,EAVAC,EAAAL,EAAA,GAAAD,EAAA,GACAO,EAAAN,EAAA,GAAAD,EAAA,GAEAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GAOAU,EAAA,GAEAC,EAAAv3D,KAAAiR,IAAAimD,GACAM,EAAAx3D,KAAAiR,IAAAkmD,GAEAM,EAAAtmB,EAAA5vB,IAAA9C,aACAi5C,EAAAD,EACAE,EAAA,EAAAF,EA4BA,IA1BAV,EAAAG,EAAA,MACAF,EAAAG,EAAA,MAEAI,EAAAC,GAEAV,EAAA92D,KAAAC,KAAAu3D,EAAAE,GACAJ,EAAA54D,KAAA,CAAAs4D,EAAAF,IAEAQ,EAAA54D,KAAA,CAAAq4D,EAAAQ,IAEAT,EAAA92D,KAAA4C,MAAA40D,EAAAG,GACAL,EAAA54D,KAAA,CAAAs4D,EAAAF,MAIAA,EAAA92D,KAAAC,KAAAs3D,EAAAG,GACAJ,EAAA54D,KAAA,CAAAq4D,EAAAD,IAEAQ,EAAA54D,KAAA,CAAAs4D,EAAAQ,IAEAV,EAAA92D,KAAA4C,MAAA20D,EAAAI,GACAL,EAAA54D,KAAA,CAAAq4D,EAAAD,KAGAh+D,KAAAqV,IAAAipD,GAAAC,GAAA,EAEAC,EAAAj9D,OAAA,GAEA,IADA48D,EAAAK,EAAA5a,MACAua,EAAA,MACAG,GAAAjmB,EAAAlwB,KAAA,GAAAg2C,EAAA,OACAI,GAAAlmB,EAAAlwB,KAAA,GAAAg2C,EAAA,OACAn+D,KAAAqV,IAAAipD,GAAAC,GAAA,EACAJ,EAAA,GAAAA,EAAA,MAKA9lB,EAAA0Y,IAAAuK,MAAAr8D,UAAA88D,iBAAA,WAGA,IAEAnK,EACAkN,EACAxC,EACAl5D,EACA27D,EANArC,EAAA18D,KAAA0mD,SAAA6U,UACA9W,EAAAzkD,KAAA0mD,SAAA8U,WAOA,QAAAn+D,EAAA,EAAmBA,EAAAq/D,EAAQr/D,IAC3B,QAAAmN,EAAA,EAAuBA,EAAAi6C,EAAQj6C,IAAA,CAC/BonD,EAAA5xD,KAAA25D,MAAAt8D,GAAAmN,GAEA,QAAAsqD,EAAA,EAA2BA,EAAAlD,EAAA,YAAArwD,OAAgCuzD,IAE3DgK,EAAAlN,EAAA,YAAAkD,IAEAwH,EAAAt8D,KAAA25D,MAAAmF,EAAA,IAAAA,EAAA,KAIA,MAAAlN,EAAA,OACAxuD,EAAA,EACA27D,EAAA,GAEAzC,EAAA,MAAA1K,EAAA,OACAxuD,EAAA,EACA27D,EAAA,GAEAzC,EAAA,MAAA1K,EAAA,OACAxuD,EAAA,EACA27D,EAAA,GAEAzC,EAAA,MAAA1K,EAAA,QACAxuD,EAAA,EACA27D,EAAA,GAGA/+D,KAAA69D,eAAA79D,KAAAw9D,iBAAA5L,EAAAxuD,GACApD,KAAAw9D,iBAAAlB,EAAAyC,MAQA1mB,EAAA0Y,IAAA6G,QAAA,aACAvf,EAAA0Y,IAAA6G,QAAA34D,UAAAq5D,QAAA,SAAA0G,KACA3mB,EAAA0Y,IAAA6G,QAAA34D,UAAAN,OAAA,SAAAsgE,KACA5mB,EAAA0Y,IAAA6G,QAAA34D,UAAAkF,MAAA,aACAk0C,EAAA0Y,IAAA6G,QAAAS,eAAA,SAAApiD,EAAAC,EAAAya,EAAAC,EAAAy1B,KAYAhO,EAAA0Y,IAAA6G,QAAAtB,KAAA,SAAA1qC,EAAAC,EAAA4E,EAAAC,EAAAwuC,EAAAC,GACAn/D,KAAAo/D,IAAAxzC,EACA5rB,KAAAq/D,IAAAxzC,EACA7rB,KAAAs/D,IAAA7uC,EACAzwB,KAAAu/D,IAAA7uC,EACA1wB,KAAAw/D,OAAA,GACAx/D,KAAAy/D,OAAA,GACAz/D,KAAA0/D,QAAA,GACArxB,UAAA9sC,OAAA,GAA+BvB,KAAAg7D,QAAAkE,EAAAC,IAE/B9mB,EAAA0Y,IAAA6G,QAAAtB,KAAAhR,OAAAjN,EAAA0Y,IAAA6G,SAKAvf,EAAA0Y,IAAA6G,QAAAtB,KAAA+B,eAAA,SAAApiD,EAAAC,EAAAya,EAAAC,EAAAy1B,GACA,IAcA31B,EAUAD,EAxBA5Y,EAAAwuC,EAAA2P,UAAA,GACAl+C,EAAAuuC,EAAA2P,UAAA,GACAlT,EAAAzK,EAAA5vB,IAAAM,cAAAlR,EAAAC,GAIAirC,GAFAlrC,EAAAwuC,EAAA4P,WAAA,GACAn+C,EAAAuuC,EAAA4P,WAAA,GACA5d,EAAA5vB,IAAAM,cAAAlR,EAAAC,IAEA,OAAA6Y,EAEA,WAAA3wB,KAAAiW,EAAA,EADAya,EAAAxa,EAAAhP,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAo9B,GACA9sC,EAAA6sC,EAAApyB,EAAAqyB,EAAA,EAAA9sC,EAAAC,GAGA,QAAAya,EAEA,WAAA3wB,KAAAiW,EAAA6sC,EADApyB,EAAAxa,EAAAhP,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAo9B,GACA9sC,EAAA,EAAAya,EAAAqyB,EAAA,EAAA9sC,EAAAC,GAGA,OAAA0a,EAEA,WAAA5wB,KADAywB,EAAAxa,EAAA/O,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAm9B,GACA5sC,EAAA,EAAAua,EAAAqyB,EAAA,EAAA5sC,EAAA6sC,EAAA9sC,EAAAC,GAGA,QAAA0a,EAEA,WAAA5wB,KADAywB,EAAAxa,EAAA/O,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAm9B,GACA5sC,EAAA6sC,EAAAtyB,EAAAqyB,EAAA,EAAA5sC,EAAA,EAAAD,EAAAC,GAGA,UAAAxR,MAAA,6BAMA2zC,EAAA0Y,IAAA6G,QAAAtB,KAAAuB,mBAAA,SAAAxO,EAAAC,EAAAjD,GACA,IAAAxuC,EAAAwuC,EAAA2P,UAAA,GACAl+C,EAAAuuC,EAAA2P,UAAA,GACAlT,EAAAzK,EAAA5vB,IAAAM,cAAAlR,EAAAC,GAIAirC,GAFAlrC,EAAAwuC,EAAA4P,WAAA,GACAn+C,EAAAuuC,EAAA4P,WAAA,GACA5d,EAAA5vB,IAAAM,cAAAlR,EAAAC,IAEA8T,EAAAy9B,EAAAniD,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAm9B,GACAj3B,EAAAy9B,EAAApiD,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAo9B,GAIA,WAAA/iD,KAAA4rB,EAAAC,EAHAD,EAAAk3B,EAAA,EACAj3B,EAAAk3B,EAAA,IAQA1K,EAAA0Y,IAAA6G,QAAAtB,KAAAqJ,aAAA,SAAAtW,EAAAC,EAAAjD,GACA,IAAAxuC,EAAAwuC,EAAA2P,UAAA,GACAl+C,EAAAuuC,EAAA2P,UAAA,GACAlT,EAAAzK,EAAA5vB,IAAAM,cAAAlR,EAAAC,GAIAirC,GAFAlrC,EAAAwuC,EAAA4P,WAAA,GACAn+C,EAAAuuC,EAAA4P,WAAA,GACA5d,EAAA5vB,IAAAM,cAAAlR,EAAAC,IAEA8T,EAAAy9B,EAAAniD,KAAA4C,MAAAg5C,EAAA,GACAj3B,EAAAy9B,EAAApiD,KAAA4C,MAAAi5C,EAAA,GAIA,WAAA/iD,KAAA4rB,EAAAC,EAHAD,EAAAk3B,EAAA,EACAj3B,EAAAk3B,EAAA,IAQA1K,EAAA0Y,IAAA6G,QAAAtB,KAAAgD,aAAA,SAAA/Q,EAAAC,EAAAnC,GACA,IAAAxuC,EAAAwuC,EAAA2P,UAAA,GACAl+C,EAAAuuC,EAAA2P,UAAA,GACAlT,EAAAzK,EAAA5vB,IAAAM,cAAAlR,EAAAC,GAIAirC,GAFAlrC,EAAAwuC,EAAA4P,WAAA,GACAn+C,EAAAuuC,EAAA4P,WAAA,GACA5d,EAAA5vB,IAAAM,cAAAlR,EAAAC,IAEAoY,EAAAq4B,EAAAzF,EAAA,EACAkG,EAAAR,EAAAzF,EAAA,EAEAn3B,EAAA,EAAA1kB,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAuK,GACArE,EAAA,EAAA3kB,KAAA4C,MAAAuuC,EAAA5vB,IAAA9C,aAAAqjC,GAIA,WAAAhpD,KAAA4rB,EAAAC,EAHAD,EAAAk3B,EAAA,EACAj3B,EAAAk3B,EAAA,IAKA1K,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA+7D,QAAA,SAAA/kD,EAAAC,GAEA,OADAlW,KAAAw/D,OAAAvpD,EAAA,IAAAC,GAAA,EACAlW,MAGAq4C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAg3C,UAAA,SAAAhgC,EAAAC,EAAA0pD,GAEA,OADA5/D,KAAA0/D,QAAAzpD,EAAA,IAAAC,GAAA0pD,EACA5/D,MAGAq4C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA4gE,UAAA,SAAA5pD,EAAAC,GACA,OAAAnY,OAAA6qB,KAAA5oB,KAAA0/D,SAAAn+D,OAAA,GAGA82C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA6gE,YAAA,SAAA7pD,EAAAC,GACA,MAAA6pD,EAAAhiE,OAAAutC,OAAAtrC,KAAA0/D,SACA,QAAAriE,EAAA,EAAmBA,EAAA0iE,EAAAx+D,OAAiBlE,IACpC,QAAA0iE,EAAA1iE,GACA,SAGA,UAGAg7C,EAAA0Y,IAAA6G,QAAAtB,KAAAh2C,IAAA,SAAA1iB,EAAAqY,EAAAC,GACAlW,KAAAy/D,OAAAxpD,EAAA,IAAAC,KACAlW,KAAAy/D,OAAAxpD,EAAA,IAAAC,GAAA,IAEAlW,KAAAy/D,OAAAxpD,EAAA,IAAAC,GAAAtQ,KAAAhI,IAMAy6C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA+gE,SAAA,SAAA9O,GACA,QAAAtyD,KAAAoB,KAAAw/D,OAAA,CACA,IAAAxa,EAAApmD,EAAAiG,MAAA,KACAqsD,EAAA/6C,SAAA6uC,EAAA,IAAA7uC,SAAA6uC,EAAA,KAEA,OAAAhlD,MAGAq4C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA05D,WAAA,WAEA,OADA34D,KAAAw/D,OAAA,GACAx/D,MAGAq4C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA25D,SAAA,SAAAF,GACA,IAAAxoC,EAAAlwB,KAAAo/D,IAAA,EACAnN,EAAAjyD,KAAAs/D,IAAA,EACAtW,EAAAhpD,KAAAq/D,IAAA,EACArN,EAAAhyD,KAAAu/D,IAAA,EAEA,QAAAtpD,EAAAia,EAAsBja,GAAAg8C,EAAYh8C,IAClC,QAAAC,EAAA8yC,EAAyB9yC,GAAA87C,EAAa97C,IACtCD,GAAAia,GAAAja,GAAAg8C,GAAA/7C,GAAA8yC,GAAA9yC,GAAA87C,GACA0G,EAAAziD,EAAAC,IAEAlW,KAAAg7D,QAAA/kD,EAAAC,GAIA,OAAAlW,MAGAq4C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAkF,MAAA,WACAK,QAAAU,IAAA,OAAAlF,KAAAo/D,IAAAp/D,KAAAq/D,IAAAr/D,KAAAs/D,IAAAt/D,KAAAu/D,MAGAlnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAq5D,QAAA,SAAAI,EAAAsG,GACA,IAAA9uC,EAAAlwB,KAAAo/D,IAAA,EACAnN,EAAAjyD,KAAAs/D,IAAA,EACAtW,EAAAhpD,KAAAq/D,IAAA,EACArN,EAAAhyD,KAAAu/D,IAAA,EAEA,QAAAtpD,EAAAia,EAAsBja,GAAAg8C,EAAYh8C,IAClC,QAAAC,EAAA8yC,EAAyB9yC,GAAA87C,EAAa97C,IACtC,GAAAD,IAAAia,GAAAja,IAAAg8C,GAAA/7C,IAAA8yC,GAAA9yC,IAAA87C,GACA,IAAA0G,EAAAziD,EAAAC,GAA4C,cAE5C,IAAA8oD,EAAA/oD,EAAAC,GAA+C,SAI/C,UAMAmiC,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAN,OAAA,SAAAsgE,GACA,IAAA/uC,EAAAlwB,KAAAo/D,IAAA,EACAnN,EAAAjyD,KAAAs/D,IAAA,EACAtW,EAAAhpD,KAAAq/D,IAAA,EACArN,EAAAhyD,KAAAu/D,IAAA,EAGA,QAAAtpD,EAAAia,EAAsBja,GAAAg8C,EAAYh8C,IAClC,QAAAC,EAAA8yC,EAAyB9yC,GAAA87C,EAAa97C,IAUtC+oD,EAAAhpD,EAAAC,EATAD,EAAA,IAAAC,KAAAlW,KAAAw/D,OACA,EAEAvpD,IAAAia,GAAAja,IAAAg8C,GAAA/7C,IAAA8yC,GAAA9yC,IAAA87C,EACA,EAGA,IAOA3Z,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAghE,SAAA,WACA,OAAAjgE,KAAAs/D,IAAAt/D,KAAAo/D,KAGA/mB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAihE,UAAA,WACA,OAAAlgE,KAAAu/D,IAAAv/D,KAAAq/D,KAGAhnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAkhE,WAAA,WACA,OACAC,GAAA,CAAApgE,KAAAo/D,IAAAp/D,KAAAq/D,KACAgB,GAAA,CAAArgE,KAAAs/D,IAAAt/D,KAAAq/D,KACAiB,GAAA,CAAAtgE,KAAAo/D,IAAAp/D,KAAAu/D,KACAgB,GAAA,CAAAvgE,KAAAs/D,IAAAt/D,KAAAu/D,OAIAlnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAuhE,OAAA,WACA,WAAAxgE,KAAAggE,WAAAz+D,QAGA82C,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA6X,MAAA,WACA,OAAA9W,KAAAygE,SAGApoB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAyhE,MAAA,SAAA7pD,GACA7W,KAAAygE,QAAA5pD,GAGAwhC,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA46D,UAAA,WACA,OAAA3yD,KAAA4B,OAAA9I,KAAAo/D,IAAAp/D,KAAAs/D,KAAA,GAAAp4D,KAAA4B,OAAA9I,KAAAq/D,IAAAr/D,KAAAu/D,KAAA,KAGAlnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAm7D,QAAA,WACA,OAAAp6D,KAAAo/D,KAGA/mB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAo7D,SAAA,WACA,OAAAr6D,KAAAs/D,KAGAjnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAq7D,OAAA,WACA,OAAAt6D,KAAAq/D,KAGAhnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAAs7D,UAAA,WACA,OAAAv6D,KAAAu/D,KAIAlnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA0hE,QAAA,WACA,OACAp3C,IAAAvpB,KAAAo/D,IAAA51C,IAAAxpB,KAAAq/D,IACA51C,IAAAzpB,KAAAs/D,IAAA51C,IAAA1pB,KAAAu/D,MAIAlnB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA2hE,aAAA,WACA,OACAr3C,IAAAvpB,KAAAo/D,IAAA,EAAA51C,IAAAxpB,KAAAq/D,IAAA,EACA51C,IAAAzpB,KAAAs/D,IAAA,EAAA51C,IAAA1pB,KAAAu/D,IAAA,IAKAlnB,EAAA0Y,IAAA6G,QAAA34D,UAAA4hE,aAAA,SAAAC,EAAA,GACA,MAAAv3C,EAAAvpB,KAAAo/D,IAAA0B,EACAr3C,EAAAzpB,KAAAs/D,IAAAwB,EACA,GAAAv3C,EAAAE,EAAoB,SACpB,MAAAD,EAAAxpB,KAAAq/D,IAAAyB,EACAp3C,EAAA1pB,KAAAu/D,IAAAuB,EACA,OAAAt3C,EAAAE,EAAoB,GACpB,CAAYH,MAAAC,MAAAC,MAAAC,QAGZ2uB,EAAA0Y,IAAA6G,QAAAtB,KAAAr3D,UAAA8hE,YAAA,WACA,OAAA/gE,KAAAs/D,IAAAt/D,KAAAo/D,MAAAp/D,KAAAu/D,IAAAv/D,KAAAq/D,MAWAhnB,EAAA0Y,IAAA6G,QAAArB,SAAA,SAAAjpC,EAAAC,EAAAgB,EAAAC,GACAxuB,KAAAghE,QAAA1zC,EACAttB,KAAAihE,QAAA1zC,EACAvtB,KAAAkhE,MAAA3yC,EACAvuB,KAAAmhE,MAAA3yC,EACAxuB,KAAAohE,gBAAA,GAEA/oB,EAAA0Y,IAAA6G,QAAArB,SAAAjR,OAAAjN,EAAA0Y,IAAA6G,SAEAvf,EAAA0Y,IAAA6G,QAAArB,SAAA8B,eAAA,SAAApiD,EAAAC,EAAAya,EAAAC,EAAAy1B,GACA,IAAAxuC,EAAAwuC,EAAA6P,eAAA,GACAp+C,EAAAuuC,EAAA6P,eAAA,GACA30D,EAAA82C,EAAA5vB,IAAAM,cAAAlR,EAAAC,GAEA,WAAA9X,KAAAiW,EAAAC,EAAAD,EAAA0a,EAAApvB,EAAA2U,EAAA0a,EAAArvB,IAGA82C,EAAA0Y,IAAA6G,QAAArB,SAAAt3D,UAAAkF,MAAA,WACAK,QAAAU,IAAA,WAAAlF,KAAAghE,QAAAhhE,KAAAihE,QAAAjhE,KAAAkhE,MAAAlhE,KAAAmhE,QAGA9oB,EAAA0Y,IAAA6G,QAAArB,SAAAt3D,UAAAq5D,QAAA,SAAAI,EAAAsG,GACA,IAAAtsC,EAAA1yB,KAAAghE,QACAruC,EAAA3yB,KAAAihE,QACAtwC,EAAA3wB,KAAAkhE,MAAAxuC,EACA9B,EAAA5wB,KAAAmhE,MAAAxuC,EACApxB,EAAA,EAAA2F,KAAA4Q,IAAA5Q,KAAAiR,IAAAwY,GAAAzpB,KAAAiR,IAAAyY,IAEAD,IAAaA,GAAAzpB,KAAAiR,IAAAwY,IACbC,IAAaA,GAAA1pB,KAAAiR,IAAAyY,IACb,IAAA4hC,EAAA5hC,EACA6hC,GAAA9hC,EAEA0wC,GAAA,EACA,QAAAhkE,EAAA,EAAmBA,EAAAkE,EAAYlE,IAAA,CAC/B,IAAA4Y,EAAAyc,EAAAr1B,EAAAszB,EACAza,EAAAyc,EAAAt1B,EAAAuzB,EAMA,GAJAouC,EAAA/oD,EAAAC,KAAuCmrD,GAAA,GACvC3I,EAAAziD,EAAAu8C,EAAAt8C,EAAAu8C,KAA8C4O,GAAA,GAC9C3I,EAAAziD,EAAAu8C,EAAAt8C,EAAAu8C,KAA8C4O,GAAA,IAE9CA,EAAA,CACA9/D,EAAAlE,EACA2C,KAAAkhE,MAAAjrD,EAAA0a,EACA3wB,KAAAmhE,MAAAjrD,EAAA0a,EACA,OASA,OAAArvB,EAAuB,SAGvB,OAAAA,GAAAm3D,EAAA14D,KAAAkhE,MAAAvwC,EAAA3wB,KAAAmhE,MAAAvwC,GAA2E,SAc3E,IAAA0wC,GAAA5I,EAAA14D,KAAAkhE,MAAAvwC,EAAA6hC,EAAAxyD,KAAAmhE,MAAAvwC,EAAA6hC,GACA8O,GAAA7I,EAAA14D,KAAAkhE,MAAAvwC,EAAA6hC,EAAAxyD,KAAAmhE,MAAAvwC,EAAA6hC,GAEA,OADAzyD,KAAAohE,eAAA1I,EAAA14D,KAAAkhE,MAAAvwC,EAAA3wB,KAAAmhE,MAAAvwC,IACA0wC,IAAAC,IAAAvhE,KAAAohE,gBAQA/oB,EAAA0Y,IAAA6G,QAAArB,SAAAt3D,UAAAN,OAAA,SAAAsgE,GACA,IAAAvsC,EAAA1yB,KAAAghE,QACAruC,EAAA3yB,KAAAihE,QACAtwC,EAAA3wB,KAAAkhE,MAAAxuC,EACA9B,EAAA5wB,KAAAmhE,MAAAxuC,EACApxB,EAAA,EAAA2F,KAAA4Q,IAAA5Q,KAAAiR,IAAAwY,GAAAzpB,KAAAiR,IAAAyY,IAEAD,IAAaA,GAAAzpB,KAAAiR,IAAAwY,IACbC,IAAaA,GAAA1pB,KAAAiR,IAAAyY,IAIb,QAAAvzB,EAAA,EAAmBA,EAAAkE,EAAYlE,IAAA,CAG/B4hE,EAFAvsC,EAAAr1B,EAAAszB,EACAgC,EAAAt1B,EAAAuzB,EACA,GAGA,UAGAynB,EAAA0Y,IAAA6G,QAAArB,SAAAt3D,UAAAs5D,oBAAA,SAAAiJ,GACA,GAAAxhE,KAAAohE,eAAA,CAEA,IAAA1uC,EAAA1yB,KAAAghE,QACAruC,EAAA3yB,KAAAihE,QAEAtwC,EAAA3wB,KAAAkhE,MAAAxuC,EACA9B,EAAA5wB,KAAAmhE,MAAAxuC,EACAhC,IAAaA,GAAAzpB,KAAAiR,IAAAwY,IACbC,IAAaA,GAAA1pB,KAAAiR,IAAAyY,IACb,IAAA4hC,EAAA5hC,EACA6hC,GAAA9hC,EAEA6wC,EAAAxhE,KAAAkhE,MAAAvwC,EAAA3wB,KAAAmhE,MAAAvwC,GACA4wC,EAAAxhE,KAAAkhE,MAAA1O,EAAAxyD,KAAAmhE,MAAA1O,GACA+O,EAAAxhE,KAAAkhE,MAAA1O,EAAAxyD,KAAAmhE,MAAA1O,KAKApa,EAAAopB,MAAA,aAGAppB,EAAAopB,MAAAxiE,UAAAf,IAAA,SAAA+X,EAAAC,KAcAmiC,EAAAopB,MAAAC,QAAA,SAAAC,GACAtpB,EAAAopB,MAAAjkE,KAAAwC,MAEAA,KAAA4hE,IAAA,IAAA16D,KAAAykD,KAAA,MACA3rD,KAAA6hE,KAAA,EAAA36D,KAAAykD,KAAA,MAEA3rD,KAAA8hE,WAAA,CACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,SAGA,IAAAC,EAAA,GACAxiD,EAAAoiD,GAAA,IACA,QAAAtkE,EAAA,EAAmBA,EAAAkiB,EAAWliB,IAAO0kE,EAAAn8D,KAAAvI,GACrC0kE,IAAA1d,YAEArkD,KAAAgiE,OAAA,GACAhiE,KAAAiiE,SAAA,GAEA,QAAA5kE,EAAA,EAAmBA,EAAA,EAAAkiB,EAAeliB,IAClC2C,KAAAgiE,OAAAp8D,KAAAm8D,EAAA1kE,EAAAkiB,IACAvf,KAAAiiE,SAAAr8D,KAAA5F,KAAAgiE,OAAA3kE,GAAA2C,KAAA8hE,WAAAvgE,SAIA82C,EAAAopB,MAAAC,QAAApc,OAAAjN,EAAAopB,OAEAppB,EAAAopB,MAAAC,QAAAziE,UAAAf,IAAA,SAAAgkE,EAAAC,GACA,IAKAC,EAcAC,EAAAC,EAnBAC,EAAAviE,KAAAgiE,OACAQ,EAAAxiE,KAAAiiE,SACA1iD,EAAAgjD,EAAAhhE,OAAA,EACAkhE,EAAAziE,KAAA6hE,IAEAa,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAGAxjE,GAAA8iE,EAAAC,GAAAniE,KAAA4hE,IACAvkE,EAAA6J,KAAA4C,MAAAo4D,EAAA9iE,GACAoL,EAAAtD,KAAA4C,MAAAq4D,EAAA/iE,GACAb,GAAAlB,EAAAmN,GAAAi4D,EAGAj4C,EAAA03C,GAFA7kE,EAAAkB,GAGAksB,EAAA03C,GAFA33D,EAAAjM,GAOAisB,EAAAC,GACA43C,EAAA,EACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,GAMA,IAAA12C,EAAApB,EAAA63C,EAAAI,EACA52C,EAAApB,EAAA63C,EAAAG,EACAhyC,EAAAjG,EAAA,IAAAi4C,EACA/xC,EAAAjG,EAAA,IAAAg4C,EAGAnF,EAAAjgE,EAAAinD,IAAA/kC,GACAg+C,EAAA/yD,EAAA85C,IAAA/kC,GAGAsjD,EAAA,GAAAr4C,IAAAC,IACAo4C,GAAA,IACAA,KACAT,EAAAI,EAAAlF,EAAAiF,EAAAhF,IAEAmF,EAAAG,MADAC,EAAA9iE,KAAA8hE,WAAAM,IACA,GAAA53C,EAAAs4C,EAAA,GAAAr4C,IAGA,IAAAwsC,EAAA,GAAArrC,IAAAC,IACAorC,GAAA,IACAA,KACAmL,EAAAI,EAAAlF,EAAA+E,EAAAE,EAAAhF,EAAA+E,IAEAK,EAAA1L,MADA6L,EAAA9iE,KAAA8hE,WAAAM,IACA,GAAAx2C,EAAAk3C,EAAA,GAAAj3C,IAGA,IAIAi3C,EAJAC,EAAA,GAAAtyC,IAAAC,IACAqyC,GAAA,IACAA,KACAX,EAAAI,EAAAlF,EAAA,EAAAiF,EAAAhF,EAAA,IAEAqF,EAAAG,MADAD,EAAA9iE,KAAA8hE,WAAAM,IACA,GAAA3xC,EAAAqyC,EAAA,GAAApyC,IAKA,WAAAgyC,EAAAC,EAAAC,IAQAvqB,EAAA2qB,IAAA,SAAAC,EAAA5c,GAKA,QAAAlnD,KAJAa,KAAAkjE,aAAAD,EACAjjE,KAAA0mD,SAAA,CACA8M,SAAA,GAEAnN,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,IAU5Bk5C,EAAA2qB,IAAA/jE,UAAAgpD,QAAA,SAAAhyC,EAAAC,EAAA+8C,EAAA/B,KAQA7Y,EAAA2qB,IAAA/jE,UAAAkkE,WAAA,SAAA9Z,EAAAC,EAAAnrD,GACA,IACAy0D,EAAAwQ,EAAAC,EADA56D,EAAA,GAGA,OAAAzI,KAAA0mD,SAAA8M,UACA,OACA4P,EAAA,EACAC,EAAA,MACAzQ,EAAA,CACAva,EAAAlwB,KAAA,MACAkwB,EAAAlwB,KAAA,MACAkwB,EAAAlwB,KAAA,MACAkwB,EAAAlwB,KAAA,OAEA,MAEA,OACAyqC,EAAAva,EAAAlwB,KAAA,GACAi7C,EAAA,EACAC,EAAA,OACA,MAEA,OACAzQ,EAAAva,EAAAlwB,KAAA,GACAi7C,EAAA,EACAC,EAAA,OAKA,IAAAptD,EAAAozC,EAAAga,EAAA,GAAAllE,EACA+X,EAAAozC,EAAA+Z,EAAA,GAAAllE,EAGA,QAAAd,EAAA,EAAmBA,EAAAu1D,EAAArxD,OAAiBlE,IACpC,QAAAmN,EAAA,EAAuBA,EAAArM,EAAAilE,EAAqB54D,IAC5C/B,EAAA7C,KAAA,CAAAqQ,EAAAC,IACAD,GAAA28C,EAAAv1D,GAAA,GACA6Y,GAAA08C,EAAAv1D,GAAA,GAKA,OAAAoL,GAMA4vC,EAAA2qB,IAAAM,sBAAA,SAAAL,EAAA5c,GACAhO,EAAA2qB,IAAAxlE,KAAAwC,KAAAijE,EAAA5c,IAEAhO,EAAA2qB,IAAAM,sBAAAhe,OAAAjN,EAAA2qB,KAKA3qB,EAAA2qB,IAAAM,sBAAArkE,UAAAgpD,QAAA,SAAAhyC,EAAAC,EAAA+8C,EAAA/B,GACAlxD,KAAAujE,QACAvjE,KAAAgkB,KAMA,GAHAktC,EAAAj7C,EAAAC,EAAA,KAGAlW,KAAAkjE,aAAAjtD,EAAAC,GAAA,CAGA,IAEAstD,EAAAC,EAAApa,EAAAC,EAAAoa,EAFAC,EAAA,GAKA,QAAAxlE,EAAA,EAAmBA,GAAA80D,EAAQ90D,IAAA,CAC3B,IAAAylE,EAAA5jE,KAAAmjE,WAAAltD,EAAAC,EAAA/X,GACA0lE,EAAA,IAAAD,EAAAriE,OAEA,QAAAlE,EAAA,EAAuBA,EAAAumE,EAAAriE,OAAsBlE,IAS7C,GARAgsD,EAAAua,EAAAvmE,GAAA,GACAisD,EAAAsa,EAAAvmE,GAAA,GAEAomE,GADAD,EAAAK,GAAAxmE,EAAA,KACAwmE,EAEAH,GAAA1jE,KAAAkjE,aAAA7Z,EAAAC,GACAtpD,KAAA8jE,eAAA58D,KAAA4C,MAAA05D,GAAAt8D,KAAAC,KAAAs8D,GAAAC,EAAAC,IAAiFzS,EAAA7H,EAAAC,EAAAnrD,EAAA,GAEjF,IAAAwlE,EAAApiE,QAAA,IAAAoiE,EAAA,UAAAA,EAAA,GAAwE,UAYxEtrB,EAAA2qB,IAAAM,sBAAArkE,UAAA6kE,eAAA,SAAAN,EAAAC,EAAAC,EAAAC,GACA,GAAAH,EAAA,GACA,IAAAO,EAAA11B,UAAA21B,OAAA,EAAAP,EAAAC,EAAAC,GACAM,EAAA51B,UAAA21B,OAAA,IAAAR,EAAA,IAAAE,EAAAC,GACA,OAAAI,GAAAE,EAIA,IADA,IAAA/kD,EAAA,EACAA,EAAAykD,EAAApiE,QAAAoiE,EAAAzkD,GAAAskD,GAAoDtkD,IAEpD,GAAAA,IAAAykD,EAAApiE,OAEA,OADAmiE,GAAqBC,EAAA/9D,KAAA49D,EAAAC,IACrB,EAGA,IAAAlkD,EAAA,EAEA,GAAAL,EAAA,GACA,KAAAA,EAAAykD,EAAApiE,QAAAoiE,EAAAzkD,GAAAukD,GACAvkD,IACAK,IAGA,WAAAA,IAEAmkD,IACAnkD,EAAA,EACAokD,EAAAj3C,OAAAxN,EAAAK,IAAAkkD,GAGAE,EAAAj3C,OAAAxN,EAAAK,OAIA,GAIA,KAAAL,EAAAykD,EAAApiE,QAAAoiE,EAAAzkD,GAAAukD,GACAvkD,IACAK,IAIA,OAAAikD,IAAAG,EAAAzkD,EAAAK,IAAA,IAAAA,KAEAmkD,IACAnkD,EAAA,EACAokD,EAAAj3C,OAAAxN,EAAAK,IAAAikD,GAGAG,EAAAj3C,OAAAxN,EAAAK,IAAAikD,EAAAC,KAIA,IAOAprB,EAAA2qB,IAAAkB,qBAAA,SAAAjB,EAAA5c,GACAhO,EAAA2qB,IAAAxlE,KAAAwC,KAAAijE,EAAA5c,IAEAhO,EAAA2qB,IAAAkB,qBAAA5e,OAAAjN,EAAA2qB,KAKA3qB,EAAA2qB,IAAAkB,qBAAAjlE,UAAAgpD,QAAA,SAAAhyC,EAAAC,EAAA+8C,EAAA/B,GAKA,GAHAA,EAAAj7C,EAAAC,EAAA,KAGAlW,KAAAkjE,aAAAjtD,EAAAC,GAAA,CAGA,IAEAmzC,EAAAC,EAAAoa,EAAAS,EAAAC,EAAAC,EAFAC,EAAA,GAKA,QAAAnmE,EAAA,EAAmBA,GAAA80D,EAAQ90D,IAAA,CAC3B,IAAAylE,EAAA5jE,KAAAmjE,WAAAltD,EAAAC,EAAA/X,GACAomE,EAAAX,EAAAriE,OAEA,QAAAlE,EAAA,EAAuBA,EAAAknE,EAAmBlnE,IAW1C,GAVAgsD,EAAAua,EAAAvmE,GAAA,GACAisD,EAAAsa,EAAAvmE,GAAA,GAEA8mE,EAAA,CAAA9mE,EAAA,EAAAA,EAAA,IAAAknE,EAAA,IAAAA,GACAH,EAAA,GAAA/mE,EAAA,IAAAknE,GAEAb,GAAA1jE,KAAAkjE,aAAA7Z,EAAAC,IACA+a,EAAArkE,KAAAwkE,iBAAAL,EAAAC,EAAAV,EAAAY,KAC6BpT,EAAA7H,EAAAC,EAAAnrD,EAAAkmE,GAE7B,IAAAC,EAAA/iE,QAAA,IAAA+iE,EAAA,OAAAA,EAAA,QAAAA,EAAA,MAAiG,UAYjGjsB,EAAA2qB,IAAAkB,qBAAAjlE,UAAAulE,iBAAA,SAAAL,EAAAC,EAAAV,EAAAY,GACA,GAAAH,EAAA,GAAAC,EAAA,GAGA,OAFApkE,KAAAwkE,iBAAAL,EAAA,CAAAA,EAAA,GAAAA,EAAA,IAAAT,EAAAY,GACAtkE,KAAAwkE,iBAAA,MAAAJ,EAAAV,EAAAY,IACA,EAKA,IADA,IAAAG,EAAA,EAAAC,GAAA,EACAD,EAAAH,EAAA/iE,QAAA,CAGA,IADA26B,GADAyoC,EAAAL,EAAAG,IACA,GAAAN,EAAA,GAAAA,EAAA,GAAAQ,EAAA,KACA,GACA,IAAAzoC,GAAAuoC,EAAA,IAA8CC,GAAA,GAC9C,MAEAD,IAKA,IADA,IAAA5J,EAAAyJ,EAAA/iE,OAAAqjE,GAAA,EACA/J,KAAA,CACA,IACA3+B,EADAyoC,EAAAL,EAAAzJ,GAEA,IADA3+B,EAAAkoC,EAAA,GAAAO,EAAA,GAAAA,EAAA,GAAAP,EAAA,KACA,GACA,IAAAloC,GAAA2+B,EAAA,IAA6C+J,GAAA,GAC7C,OAIA,IAaAC,EAbAC,GAAA,EAWA,GAVAL,IAAA5J,IAAA6J,GAAAE,GACAE,GAAA,EAEAJ,GAAAE,GAAAH,EAAA,IAAA5J,KAAA,EACAiK,GAAA,EAEAL,EAAA5J,GAAA4J,EAAA,IACAK,GAAA,IAGAA,EAAmB,SAKnB,IAAAprC,EAAAmhC,EAAA4J,EAAA,EACA,GAAA/qC,EAAA,EACA,GAAA+qC,EAAA,GACA,IAAAM,EAAAT,EAAAG,GACAI,GAAAT,EAAA,GAAAW,EAAA,GAAAA,EAAA,GAAAX,EAAA,KAAAW,EAAA,GAAAX,EAAA,IACAV,GAAyBY,EAAA53C,OAAA+3C,EAAA/qC,EAAA0qC,OAEzB,CAEAS,IADAE,EAAAT,EAAAzJ,IACA,GAAAsJ,EAAA,GAAAA,EAAA,GAAAY,EAAA,KAAAZ,EAAA,GAAAY,EAAA,IACArB,GAAyBY,EAAA53C,OAAA+3C,EAAA/qC,EAAAyqC,OAGzB,MAAAM,EAAA,GAQA,OADAf,GAAqBY,EAAA53C,OAAA+3C,EAAA/qC,EAAAyqC,EAAAC,GACrB,EAPA,IAAAY,EAAAV,EAAAG,GACAQ,EAAAX,EAAAzJ,GACAgK,GAAAI,EAAA,GAAAD,EAAA,GAAAA,EAAA,GAAAC,EAAA,KAAAD,EAAA,GAAAC,EAAA,IACAvB,GAAqBY,EAAA53C,OAAA+3C,EAAA/qC,GASrB,OAAAmrC,IAFAT,EAAA,GAAAD,EAAA,GAAAA,EAAA,GAAAC,EAAA,KAAAD,EAAA,GAAAC,EAAA,MAUA/rB,EAAA2qB,IAAAkC,uBAAA,SAAAjC,EAAA5c,GACAhO,EAAA2qB,IAAAxlE,KAAAwC,KAAAijE,EAAA5c,IAEAhO,EAAA2qB,IAAAkC,uBAAA5f,OAAAjN,EAAA2qB,KAGA3qB,EAAA2qB,IAAAkC,uBAAAC,QAAA,CACA,WACA,WACA,YACA,YACA,WACA,WACA,UACA,WAUA9sB,EAAA2qB,IAAAkC,uBAAAjmE,UAAAgpD,QAAA,SAAAhyC,EAAAC,EAAA+8C,EAAA/B,GAEAA,EAAAj7C,EAAAC,EAAA,KACA,QAAA7Y,EAAA,EAAmBA,EAAAg7C,EAAA2qB,IAAAkC,uBAAAC,QAAA5jE,OAAmDlE,IACtE2C,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAA9nE,GAAA41D,EAAA/B,IAYA7Y,EAAA2qB,IAAAkC,uBAAAjmE,UAAAomE,WAAA,SAAApvD,EAAAC,EAAA+8C,EAAA3/C,EAAA49C,GAEAA,EAAAj7C,EAAAC,EAAA,KACA,IAAAovD,GAAAhyD,EAAA,OACAiyD,GAAAjyD,EAAA,OACAkyD,GAAAlyD,EAAA,OACAtT,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAAI,GAAAtS,EAAA/B,GACAlxD,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAAG,GAAArS,EAAA/B,GACAlxD,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAA7xD,GAAA2/C,EAAA/B,GACAlxD,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAAK,GAAAvS,EAAA/B,IAWA7Y,EAAA2qB,IAAAkC,uBAAAjmE,UAAAwmE,UAAA,SAAAxvD,EAAAC,EAAA+8C,EAAA3/C,EAAA49C,GAEAA,EAAAj7C,EAAAC,EAAA,KACA,IAAAovD,GAAAhyD,EAAA,OACAtT,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAA7xD,GAAA2/C,EAAA/B,GACAlxD,KAAAolE,cAAAnvD,EAAAC,EAAAmiC,EAAA2qB,IAAAkC,uBAAAC,QAAAG,GAAArS,EAAA/B,IAWA7Y,EAAA2qB,IAAAkC,uBAAAjmE,UAAAmmE,cAAA,SAAAnvD,EAAAC,EAAAwvD,EAAAzS,EAAA/B,GAEAlxD,KAAA2lE,gBAAA1vD,EAAAC,EAAA,MAAA+8C,EAAA,EAAAyS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAxU,IAiBA7Y,EAAA2qB,IAAAkC,uBAAAjmE,UAAA0mE,gBAAA,SAAAr4C,EAAAC,EAAA9I,EAAAmhD,EAAAC,EAAAC,EAAAlzC,EAAAtH,EAAAy6C,EAAAlzC,EAAAq+B,GACA,KAAA0U,EAAAC,GACA,QAAAxoE,EAAAonB,EAAqBpnB,GAAAyoE,EAAazoE,IAAA,CAOlC,IANA,IAAAszB,GAAAtzB,EAAA,EACAuzB,GAAAvzB,EACAs1D,GAAA,EACAqT,EAAA,EAGAr1C,GAAA,IAIA,IAAAs1C,EAAA34C,GAHAqD,GAAA,GAGAiC,EAAAhC,EAAAtF,EACA46C,EAAA34C,EAAAoD,EAAAo1C,EAAAn1C,EAAAiC,EAGAszC,GAAAx1C,EAAA,KAAAC,EAAA,IACAw1C,GAAAz1C,EAAA,KAAAC,EAAA,IAGA,KAAAw1C,EAAAR,GAAA,CAGA,GAAAO,EAAAN,EAA2C,MAO3C,GAJAl1C,IAAAC,IAAAk1C,KACA5U,EAAA+U,EAAAC,EAAA7oE,EAAA,GAGAs1D,EAQA,CAEA,IAAA3yD,KAAAkjE,aAAA+C,EAAAC,GAAA,CACAF,EAAAI,EACA,SAIAzT,GAAA,EACAiT,EAAAI,OAfAhmE,KAAAkjE,aAAA+C,EAAAC,IAAA7oE,EAAAyoE,IACAnT,GAAA,EACA3yD,KAAA2lE,gBAAAr4C,EAAAC,EAAAlwB,EAAA,EAAAuoE,EAAAO,EAAAL,EAAAlzC,EAAAtH,EAAAy6C,EAAAlzC,EAAAq+B,GACA8U,EAAAI,IAeA,GAAAzT,EAAsB,QAMtBta,EAAAguB,MAAA,CACAC,WAAA,SAAA38D,GACA,IAAA48D,EAAApoE,EACA,GAAAwL,KAAA3J,KAAAmoC,OACAo+B,EAAAvmE,KAAAmoC,OAAAx+B,OAEA,CACA,SAAAA,EAAA+5C,OAAA,IAEA,IAAApY,EAAA3hC,EAAA8lB,MAAA,cAAApa,IAAA,SAAAY,GAAsE,OAAAE,SAAAF,EAAA,MACtE,OAAAq1B,EAAA/pC,OACAglE,EAAAj7B,EAAAj2B,IAAA,SAAAY,GAAqD,UAAAA,QAErD,CACA,QAAA5Y,EAAA,EAAmCA,EAAA,EAAOA,IAC1CiuC,EAAAjuC,EAAA,OAAAiuC,EAAAjuC,GACAiuC,EAAA5e,OAAArvB,EAAA,GAEAkpE,EAAAj7B,QAKAi7B,GADApoE,EAAAwL,EAAA8lB,MAAA,uBACAtxB,EAAA,GAAA0G,MAAA,WAAAwQ,IAAA,SAAAY,GAAgE,OAAAE,SAAAF,KAGhE,QAGAjW,KAAAmoC,OAAAx+B,GAAA48D,EAGA,OAAAA,EAAAz9C,SASAxI,IAAA,SAAAkmD,EAAAC,GACA,IAAAh+D,EAAA+9D,EAAA19C,QACA,QAAAzrB,EAAA,EAAuBA,EAAA,EAAOA,IAC9B,QAAAmN,EAAA,EAA2BA,EAAA6jC,UAAA9sC,OAAsBiJ,IACjD/B,EAAApL,IAAAgxC,UAAA7jC,GAAAnN,GAGA,OAAAoL,GASAi+D,KAAA,SAAAF,EAAAC,GACA,QAAAppE,EAAA,EAAuBA,EAAA,EAAOA,IAC9B,QAAAmN,EAAA,EAA2BA,EAAA6jC,UAAA9sC,OAAsBiJ,IACjDg8D,EAAAnpE,IAAAgxC,UAAA7jC,GAAAnN,GAGA,OAAAmpE,GASAG,SAAA,SAAAH,EAAAC,GACA,IAAAh+D,EAAA+9D,EAAA19C,QACA,QAAAzrB,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,QAAAmN,EAAA,EAA2BA,EAAA6jC,UAAA9sC,OAAsBiJ,IACjD/B,EAAApL,IAAAgxC,UAAA7jC,GAAAnN,GAAA,IAEAoL,EAAApL,GAAA6J,KAAA4B,MAAAL,EAAApL,IAEA,OAAAoL,GASAm+D,UAAA,SAAAJ,EAAAC,GACA,QAAAppE,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,QAAAmN,EAAA,EAA2BA,EAAA6jC,UAAA9sC,OAAsBiJ,IACjDg8D,EAAAnpE,IAAAgxC,UAAA7jC,GAAAnN,GAAA,IAEAmpE,EAAAnpE,GAAA6J,KAAA4B,MAAA09D,EAAAnpE,IAEA,OAAAmpE,GAUAK,YAAA,SAAAL,EAAAC,EAAAK,GACAz4B,UAAA9sC,OAAA,IAAmCulE,EAAA,IACnC,IAAAr+D,EAAA+9D,EAAA19C,QACA,QAAAzrB,EAAA,EAAuBA,EAAA,EAAOA,IAC9BoL,EAAApL,GAAA6J,KAAA4B,MAAAL,EAAApL,GAAAypE,GAAAL,EAAAppE,GAAAmpE,EAAAnpE,KAEA,OAAAoL,GAUAs+D,eAAA,SAAAP,EAAAC,EAAAK,GACAz4B,UAAA9sC,OAAA,IAAmCulE,EAAA,IACnC,IAAAE,EAAAhnE,KAAAinE,QAAAT,GACAU,EAAAlnE,KAAAinE,QAAAR,GACA,QAAAppE,EAAA,EAAuBA,EAAA,EAAOA,IAC9B2pE,EAAA3pE,IAAAypE,GAAAI,EAAA7pE,GAAA2pE,EAAA3pE,IAEA,OAAA2C,KAAAmnE,QAAAH,IASA3iB,UAAA,SAAA/Z,EAAApO,GACAA,aAAA3oB,QAAuC2oB,EAAAh1B,KAAA4B,MAAAuvC,EAAA5vB,IAAAS,UAAA,EAAAgT,KACvC,IAAAzzB,EAAA6hC,EAAAxhB,QACA,QAAAzrB,EAAA,EAAuBA,EAAA,EAAOA,IAC9BoL,EAAApL,IAAA6+B,aAAA3oB,MAAArM,KAAA4B,MAAAuvC,EAAA5vB,IAAAS,UAAA,EAAAgT,EAAA7+B,KAAA6+B,EAEA,OAAAzzB,GAQAw+D,QAAA,SAAA38B,GACA,IAKAknB,EAAApyD,EALAjB,EAAAmsC,EAAA,OACA88B,EAAA98B,EAAA,OACAwgB,EAAAxgB,EAAA,OAEAxyB,EAAA5Q,KAAA4Q,IAAA3Z,EAAAipE,EAAAtc,GAAAjzC,EAAA3Q,KAAA2Q,IAAA1Z,EAAAipE,EAAAtc,GACAxtD,GAAAwa,EAAAD,GAAA,EAEA,GAAAC,IAAAD,EACA25C,EAAApyD,EAAA,MAEA,CACA,IAAAzB,EAAAma,EAAAD,EAEA,OADAzY,EAAA9B,EAAA,GAAAK,GAAA,EAAAma,EAAAD,GAAAla,GAAAma,EAAAD,GACAC,GACA,KAAA3Z,EAAAqzD,GAAA4V,EAAAtc,GAAAntD,GAAAypE,EAAAtc,EAAA,KAA0D,MAC1D,KAAAsc,EAAA5V,GAAA1G,EAAA3sD,GAAAR,EAAA,EAA4C,MAC5C,KAAAmtD,EAAA0G,GAAArzD,EAAAipE,GAAAzpE,EAAA,EAEA6zD,GAAA,EAGA,OAAAA,EAAApyD,EAAA9B,IAQA6pE,QAAA,SAAA78B,GACA,IAAAhtC,EAAAgtC,EAAA,GAEA,OAAAA,EAAA,GAEA,OADAhtC,EAAA4J,KAAA4B,MAAA,IAAAxL,GACAA,KAGA,IAAA+pE,EAAA,SAAAloE,EAAAmoE,EAAA/oE,GAGA,OAFAA,EAAA,IAA4BA,GAAA,GAC5BA,EAAA,IAA4BA,GAAA,GAC5BA,EAAA,IAAgCY,EAAA,GAAAmoE,EAAAnoE,GAAAZ,EAChCA,EAAA,GAAgC+oE,EAChC/oE,EAAA,IAAgCY,GAAAmoE,EAAAnoE,IAAA,IAAAZ,GAAA,EAChCY,GAGAC,EAAAkrC,EAAA,GACAg9B,EAAAhqE,EAAA,GAAAA,GAAA,EAAA8B,GAAA9B,EAAA8B,EAAA9B,EAAA8B,EACAD,EAAA,EAAA7B,EAAAgqE,EACAnpE,EAAAkpE,EAAAloE,EAAAmoE,EAAAh9B,EAAA,QACA88B,EAAAC,EAAAloE,EAAAmoE,EAAAh9B,EAAA,IACAwgB,EAAAuc,EAAAloE,EAAAmoE,EAAAh9B,EAAA,QACA,OAAApjC,KAAA4B,MAAA,IAAA3K,GAAA+I,KAAA4B,MAAA,IAAAs+D,GAAAlgE,KAAA4B,MAAA,IAAAgiD,KAIAyc,MAAA,SAAAj9B,GACA,aAAAtqC,KAAAwnE,OAAAl9B,EAAA,QAAAtqC,KAAAwnE,OAAAl9B,EAAA,QAAAtqC,KAAAwnE,OAAAl9B,EAAA,SAGAm9B,MAAA,SAAAn9B,GACA,IAAA0a,EAAA,GACA,QAAA3nD,EAAA,EAAuBA,EAAA,EAAOA,IAC9B2nD,EAAAp/C,KAAA5F,KAAAwnE,OAAAl9B,EAAAjtC,IAAAsL,SAAA,IAAA47C,KAAA,QAEA,UAAAS,EAAA9gC,KAAA,KAGAsjD,OAAA,SAAAE,GACA,OAAAA,EAAA,EACA,EAEAA,EAAA,IACA,IAGAA,GAIAv/B,OAAA,CACAw/B,MAAA,QACAC,KAAA,UACAC,SAAA,UACAC,WAAA,UACAC,KAAA,UACAC,UAAA,UACAC,MAAA,UACAC,KAAA,YACAC,SAAA,YACAC,YAAA,YACAC,cAAA,YACAC,kBAAA,YACAC,KAAA,UACAC,YAAA,YACAC,KAAA,YACAC,KAAA,YACAC,aAAA,YACAC,WAAA,aACAC,YAAA,YACAC,SAAA,YACAC,cAAA,WACAC,cAAA,WACAC,UAAA,YACAC,eAAA,aACAC,UAAA,aACAC,UAAA,aACAC,UAAA,aACAC,cAAA,YACAC,gBAAA,aACAC,OAAA,WACAC,eAAA,YACAC,UAAA,aACAC,eAAA,cACAC,iBAAA,cACAC,QAAA,cACAC,QAAA,cACAC,UAAA,aACAC,UAAA,aACAC,UAAA,cACAC,UAAA,cACAC,eAAA,cACAC,eAAA,cACAC,gBAAA,cACAC,UAAA,YACAC,WAAA,YACAC,WAAA,cACAC,OAAA,UACAC,OAAA,YACAC,MAAA,YACAC,KAAA,cACAC,KAAA,cACAC,QAAA,cACAC,aAAA,cACAC,WAAA,aACAC,QAAA,UACAC,YAAA,YACAC,YAAA,YACAC,aAAA,cACAC,WAAA,cACAC,aAAA,cACAC,WAAA,YACAC,UAAA,cACAC,WAAA,aACAC,YAAA,aACAC,OAAA,YACAC,MAAA,YACAC,SAAA,cACAC,SAAA,cACAC,UAAA,cACAC,YAAA,aACAC,cAAA,cACAC,eAAA,cACAC,WAAA,cACAC,UAAA,YACAC,cAAA,aACAC,aAAA,aACAC,UAAA,cACAC,UAAA,cACAC,OAAA,cACAC,gBAAA,aACAC,UAAA,YACAC,KAAA,aACAC,UAAA,aACAC,IAAA,cACAC,UAAA,cACAC,UAAA,cACAC,cAAA,cACAC,QAAA,cACAC,OAAA,cACAC,UAAA,aACAC,QAAA,YACAC,UAAA,cACAC,KAAA,cACAC,UAAA,cACAC,UAAA,cACAC,SAAA,cACAC,WAAA,cACAC,OAAA,cACAC,cAAA,cACAC,WAAA,cACAC,MAAA,cACAC,UAAA,cACAC,SAAA,cACAC,MAAA,cACAC,WAAA,aACAC,MAAA,cACAC,MAAA,cACAC,WAAA,cACAC,UAAA,cACAC,WAAA,cACAC,OAAA,cACAC,aAAA,cACAC,MAAA,cACAC,qBAAA,cACAC,QAAA,cACAC,IAAA,UACAC,QAAA,YACAC,QAAA,YACAC,SAAA,aACAC,UAAA,WACAC,OAAA,YACAC,QAAA,cACAC,MAAA,aACAC,WAAA,YACAC,YAAA,cACAC,OAAA,YACAC,UAAA,cACAC,KAAA,cACAC,KAAA,YACAC,UAAA,cACAC,YAAA,cACAC,SAAA,cACAC,OAAA,cACAC,UAAA,cACAC,eAAA,cACAC,WAAA,cACAC,cAAA,cACAC,SAAA,cACAC,SAAA,cACAC,aAAA,cACAC,YAAA,cACAC,KAAA,cACAC,OAAA,YACAC,YAAA,cACAC,MAAA,cACAC,MAAA,gBAWAv4B,EAAAw4B,SAAA,SAAAC,EAAAzqB,GACArmD,KAAA+wE,sBAAAD,EACA9wE,KAAA0mD,SAAA,CACAsqB,OAAA,EACAC,kBAAA,IACAxnE,MAAA,IAEAzJ,KAAAkxE,KAAA,KAEAlxE,KAAAmxE,QAAA,GACAnxE,KAAAoxE,mBAAA,GACApxE,KAAAqxE,UAAA,GAEArxE,KAAA2nD,WAAAtB,IAQAhO,EAAAw4B,SAAA5xE,UAAA0oD,WAAA,SAAAtB,GACA,QAAAlnD,KAAAknD,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAE5B,OADAknD,KAAA58C,OAAmCzJ,KAAAsxE,QACnCtxE,MAOAq4C,EAAAw4B,SAAA5xE,UAAAsyE,OAAA,SAAAC,GAGA,OAFAxxE,KAAAkxE,KAAAM,EACAxxE,KAAAqxE,UAAA,GACArxE,MASAq4C,EAAAw4B,SAAA5xE,UAAAwyE,SAAA,SAAAx7D,EAAAC,EAAAo0B,GACA,IAAA1rC,EAAAqX,EAAA,IAAAC,EAQA,OANAo0B,EACAtqC,KAAAmxE,QAAAvyE,GAAA,mBAAAy5C,EAAAguB,MAAAC,WAAAh8B,YAGAtqC,KAAAmxE,QAAAvyE,GAEAoB,MAMAq4C,EAAAw4B,SAAA5xE,UAAAyyE,YAAA,WACA1xE,KAAAmxE,QAAA,IAMA94B,EAAAw4B,SAAA5xE,UAAAqyE,MAAA,WAIA,OAHAtxE,KAAAoxE,mBAAA,GACApxE,KAAAqxE,UAAA,GAEArxE,MAOAq4C,EAAAw4B,SAAA5xE,UAAAgpD,QAAA,SAAA0pB,GACA,IAAAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA,QAAAlzE,KAAAoB,KAAAmxE,QAAA,CACA,IAAAY,EAAA/xE,KAAAmxE,QAAAvyE,GACAizE,EAAAjzE,GAAA,QACAy5C,EAAAguB,MAAAK,KAAAmL,EAAAjzE,GAAAmzE,GAGA,QAAA10E,EAAA,EAAmBA,EAAA2C,KAAA0mD,SAAAsqB,OAA0B3zE,IAC7C2C,KAAAgyE,WAAAH,EAAAC,EAAAF,GACAv0E,EAAA,IAAA2C,KAAA0mD,SAAAsqB,SACAa,EAAA7xE,KAAAiyE,iBAAAH,EAAAF,IAGA,QAAAM,KAAAJ,EAAA,CACA,IAAA9sB,EAAAktB,EAAArtE,MAAA,KAGA8sE,EAFAx7D,SAAA6uC,EAAA,IACA7uC,SAAA6uC,EAAA,IACA8sB,EAAAI,IAGA,OAAAlyE,MASAq4C,EAAAw4B,SAAA5xE,UAAA+yE,WAAA,SAAAH,EAAAC,EAAAF,GACA,QAAAhzE,KAAAizE,EAAA,CACA,IAAA7sB,EAAApmD,EAAAiG,MAAA,KACAoR,EAAAE,SAAA6uC,EAAA,IACA9uC,EAAAC,SAAA6uC,EAAA,IACAhlD,KAAAmyE,mBAAAl8D,EAAAC,EAAA27D,EAAAjzE,GAAAkzE,GACAF,EAAAhzE,GAAA,EAEA,OAAAoB,MASAq4C,EAAAw4B,SAAA5xE,UAAAgzE,iBAAA,SAAAH,EAAAF,GACA,IAAAnpE,EAAA,GAEA,QAAA7J,KAAAkzE,EACA,KAAAlzE,KAAAgzE,GAAA,CAEA,IAAAtnC,EAAAwnC,EAAAlzE,GAEA,GAAAA,KAAAoB,KAAAoxE,mBACA,IAAAgB,EAAApyE,KAAAoxE,mBAAAxyE,OAEA,CACA,IAAAomD,EAAApmD,EAAAiG,MAAA,KACAoR,EAAAE,SAAA6uC,EAAA,IACA9uC,EAAAC,SAAA6uC,EAAA,IACAotB,EAAApyE,KAAA+wE,sBAAA96D,EAAAC,GACAlW,KAAAoxE,mBAAAxyE,GAAAwzE,EAGA,OAAAA,EAAA,CAGA,IAAAC,EAAA,GACAC,EAAA,EACA,QAAAj1E,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAAgmD,EAAAn8C,KAAA4B,MAAAwhC,EAAAjtC,GAAA+0E,GACAC,EAAAh1E,GAAAgmD,EACAivB,GAAAjvB,EAEAivB,EAAAtyE,KAAA0mD,SAAAuqB,oBAA0DxoE,EAAA7J,GAAAyzE,IAG1D,OAAA5pE,GAUA4vC,EAAAw4B,SAAA5xE,UAAAkzE,mBAAA,SAAAl8D,EAAAC,EAAAo0B,EAAAwnC,GACA,IAAAlzE,EAAAqX,EAAA,IAAAC,EACA,GAAAtX,KAAAoB,KAAAqxE,UACA,IAAAG,EAAAxxE,KAAAqxE,UAAAzyE,QAGA4yE,EAAAxxE,KAAAuyE,WAAAt8D,EAAAC,GAGA,QAAAs8D,KAAAhB,EAAA,CACA,IAAAiB,EAAAjB,EAAAgB,GAEA,GAAAA,KAAAV,EACA,IAAArpE,EAAAqpE,EAAAU,OAEA,CACA/pE,EAAA,QACAqpE,EAAAU,GAAA/pE,EAGA,QAAApL,EAAA,EAAuBA,EAAA,EAAOA,IAAOoL,EAAApL,IAAA6J,KAAA4B,MAAAwhC,EAAAjtC,GAAAo1E,GAGrC,OAAAzyE,MASAq4C,EAAAw4B,SAAA5xE,UAAAszE,WAAA,SAAAt8D,EAAAC,GACA,IAAAw8D,EAAAz8D,EAAA,IAAAC,EACAs0C,EAAA,GACAxqD,KAAAqxE,UAAAqB,GAAAloB,EACA,IAAA/gD,EAAAzJ,KAAA0mD,SAAAj9C,MASA,OAFAzJ,KAAAkxE,KAAAjpB,QAAAhyC,EAAAC,EAAAzM,EANA,SAAAwM,EAAAC,EAAA/X,EAAAw0E,GACA,IACAF,EAAAE,GAAA,EAAAx0E,EAAAsL,GACA,IAAAgpE,IACAjoB,EAHAv0C,EAAA,IAAAC,GAGAu8D,IAEA5zE,KAAAmB,OAEAwqD,GAUAnS,EAAAu6B,KAAA,SAAAC,EAAAC,EAAAC,EAAA1sB,GASA,QAAAlnD,KARAa,KAAAgzE,KAAAH,EACA7yE,KAAAizE,KAAAH,EACA9yE,KAAAkzE,OAAA,KACAlzE,KAAAmzE,OAAA,KACAnzE,KAAAozE,kBAAAL,EACA/yE,KAAA0mD,SAAA,CACA8M,SAAA,GAEAnN,EAA4BrmD,KAAA0mD,SAAAvnD,GAAAknD,EAAAlnD,GAE5Ba,KAAAyzD,MAAApb,EAAAlwB,KAAAnoB,KAAA0mD,SAAA8M,UACA,IAAAxzD,KAAA0mD,SAAA8M,WACAxzD,KAAAyzD,MAAA,CACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,GACAzzD,KAAAyzD,MAAA,MAWApb,EAAAu6B,KAAA3zE,UAAAgpD,QAAA,SAAAorB,EAAAC,EAAApiB,KAGA7Y,EAAAu6B,KAAA3zE,UAAAg1D,cAAA,SAAA5K,EAAAC,GACA,IAAA7gD,EAAA,GACA,QAAApL,EAAA,EAAmBA,EAAA2C,KAAAyzD,MAAAlyD,OAAuBlE,IAAA,CAC1C,IAAAiW,EAAAtT,KAAAyzD,MAAAp2D,GACA4Y,EAAAozC,EAAA/1C,EAAA,GACA4C,EAAAozC,EAAAh2C,EAAA,GAEAtT,KAAAozE,kBAAAn9D,EAAAC,IACAzN,EAAA7C,KAAA,CAAAqQ,EAAAC,IAGA,OAAAzN,GAOA4vC,EAAAu6B,KAAAW,SAAA,SAAAV,EAAAC,EAAAC,EAAA1sB,GACAhO,EAAAu6B,KAAAp1E,KAAAwC,KAAA6yE,EAAAC,EAAAC,EAAA1sB,GAEArmD,KAAAwzE,UAAA,GACAxzE,KAAAyzE,MAAA,GACAzzE,KAAA0zE,KAAAb,EAAAC,EAAA,OAEAz6B,EAAAu6B,KAAAW,SAAAjuB,OAAAjN,EAAAu6B,MAMAv6B,EAAAu6B,KAAAW,SAAAt0E,UAAAgpD,QAAA,SAAAorB,EAAAC,EAAApiB,GACA,IAAAtyD,EAAAy0E,EAAA,IAAAC,EAEA,GADA10E,KAAAoB,KAAAwzE,WAAmCxzE,KAAA2zE,SAAAN,EAAAC,GACnC10E,KAAAoB,KAAAwzE,UAGA,IADA,IAAA1sE,EAAA9G,KAAAwzE,UAAA50E,GACAkI,GACAoqD,EAAApqD,EAAAmP,EAAAnP,EAAAoP,GACApP,IAAA8sE,MAOAv7B,EAAAu6B,KAAAW,SAAAt0E,UAAA00E,SAAA,SAAAN,EAAAC,GACA,KAAAtzE,KAAAyzE,MAAAlyE,QAAA,CACA,IAAAuF,EAAA9G,KAAAyzE,MAAArhD,QACA,GAAAtrB,EAAAmP,IAAAo9D,GAAAvsE,EAAAoP,IAAAo9D,EAAmD,OAEnD,IAAA1P,EAAA5jE,KAAAi0D,cAAAntD,EAAAmP,EAAAnP,EAAAoP,GAEA,QAAA7Y,EAAA,EAAAw2E,EAAAjQ,EAAAriE,OAAgDlE,EAAAw2E,EAAUx2E,IAAA,CAC1D,IAAA4Y,EAAA2tD,EAAAvmE,GAAA,GACA6Y,EAAA0tD,EAAAvmE,GAAA,GACAwZ,EAAAZ,EAAA,IAAAC,EACAW,KAAA7W,KAAAwzE,WACAxzE,KAAA0zE,KAAA78D,EAAAZ,EAAAC,EAAApP,MAKAuxC,EAAAu6B,KAAAW,SAAAt0E,UAAAy0E,KAAA,SAAA78D,EAAAZ,EAAAC,EAAA09D,GACA,IAAAxvE,EAAA,CACA6R,IACAC,IACA09D,QAEA5zE,KAAAwzE,UAAA38D,GAAAzS,EACApE,KAAAyzE,MAAA7tE,KAAAxB,IAOAi0C,EAAAu6B,KAAAkB,MAAA,SAAAjB,EAAAC,EAAAC,EAAA1sB,GACAhO,EAAAu6B,KAAAp1E,KAAAwC,KAAA6yE,EAAAC,EAAAC,EAAA1sB,GAEArmD,KAAAyzE,MAAA,GACAzzE,KAAA+zE,MAAA,GACA/zE,KAAAkzE,OAAA,KACAlzE,KAAAmzE,OAAA,MAEA96B,EAAAu6B,KAAAkB,MAAAxuB,OAAAjN,EAAAu6B,MAMAv6B,EAAAu6B,KAAAkB,MAAA70E,UAAAgpD,QAAA,SAAAorB,EAAAC,EAAApiB,GASA,GARAlxD,KAAAyzE,MAAA,GACAzzE,KAAA+zE,MAAA,GACA/zE,KAAAkzE,OAAAG,EACArzE,KAAAmzE,OAAAG,EACAtzE,KAAA0zE,KAAA1zE,KAAAgzE,KAAAhzE,KAAAizE,KAAA,MAIA,IADAjzE,KAAAi0D,cAAAof,EAAAC,GACA/xE,OAAqC,OAErC,KAAAvB,KAAAyzE,MAAAlyE,QAAA,CACA,MAAAuF,EAAA9G,KAAAyzE,MAAArhD,QACA,GAAAtrB,EAAAmP,IAAAo9D,GAAAvsE,EAAAoP,IAAAo9D,EAAmD,MAMnD,MAAA1P,EAAA5jE,KAAAi0D,cAAAntD,EAAAmP,EAAAnP,EAAAoP,GAEA,QAAA7Y,EAAA,EAAuBA,EAAAumE,EAAAriE,OAAsBlE,IAAA,CAC7C,MAAA22E,EAAApQ,EAAAvmE,GACA4Y,EAAA+9D,EAAA,GACA99D,EAAA89D,EAAA,GACA/9D,EAAA,IAAAC,KACAlW,KAAA+zE,OACA/zE,KAAA0zE,KAAAz9D,EAAAC,EAAApP,IAIA,IAAAA,EAAA9G,KAAA+zE,MAAAV,EAAA,IAAAC,GACA,GAAAxsE,EAEA,KAAAA,GACAoqD,EAAApqD,EAAAmP,EAAAnP,EAAAoP,GACApP,IAAA8sE,MAIAv7B,EAAAu6B,KAAAkB,MAAA70E,UAAAy0E,KAAA,SAAAz9D,EAAAC,EAAA09D,GACA,IAAApiB,EAAAxxD,KAAAi0E,UAAAh+D,EAAAC,GACA9R,EAAA,CACA6R,IACAC,IACA09D,OACAxM,EAAAwM,IAAAxM,EAAA,IACA5V,KAEAxxD,KAAA+zE,MAAA99D,EAAA,IAAAC,GAAA9R,EAIA,IAAAq8B,EAAAr8B,EAAAgjE,EAAAhjE,EAAAotD,EACA,QAAAn0D,EAAA,EAAmBA,EAAA2C,KAAAyzE,MAAAlyE,OAAuBlE,IAAA,CAC1C,IAAAyJ,EAAA9G,KAAAyzE,MAAAp2E,GACA62E,EAAAptE,EAAAsgE,EAAAtgE,EAAA0qD,EACA,GAAA/wB,EAAAyzC,GAAAzzC,IAAAyzC,GAAA1iB,EAAA1qD,EAAA0qD,EAGA,YADAnC,EAAArvD,KAAAyzE,MAAAp2E,EAAA+G,GAKApE,KAAAyzE,MAAA7tE,KAAAxB,IAGAi0C,EAAAu6B,KAAAkB,MAAA70E,UAAAg1E,UAAA,SAAAh+D,EAAAC,GACA,OAAAhP,KAAA4Q,IAAA5Q,KAAAiR,IAAAlC,EAAAjW,KAAAkzE,QAAAhsE,KAAAiR,IAAAjC,EAAAlW,KAAAmzE,UAGe/6B,EAAA,sVC/9Kf,MAAApwB,EAAAC,EAAAhrB,EAAA,IAEAu5B,EAAApC,EAAAn3B,EAAA,KACAk3E,EAAAl3E,EAAA,IACA8sB,EAAA9sB,EAAA,IACAo3B,EAAAp3B,EAAA,GAEAqgC,EAAArgC,EAAA,IACAm3E,EAAAn3E,EAAA,GAGM8pB,EAAOsN,EAAArN,UAAUC,UAEjBotD,EAAgBtqD,EAAAI,UAAUkqD,cAC1BC,EAAsBvqD,EAAAI,UAAUmqD,oBAChCC,EAA+BxqD,EAAAI,UAAUmqD,oBACzCE,EAAyBzqD,EAAAI,UAAUqqD,uBACnCC,EAAwB1qD,EAAAI,UAAUsqD,sBAClCC,EAAe3qD,EAAAI,UAAUuqD,aACzBC,EAAqB5qD,EAAAI,UAAUwqD,mBAE/BC,EAAY7qD,EAAA8qD,cAAc51E,UAE1B61E,EAAU/2E,OAAOwT,OAAO,IAKjBpU,EAAA+yD,OAASqkB,EAA6B,SAC/C,CAAC3lE,OAAQ,EAAGmmE,QAAQ,IAGxB53E,EAAA+yD,OAAOjxD,UAAU+1E,UAAY,SAASpmE,GAClC5O,KAAK4O,QAAUA,GAGnBzR,EAAA+yD,OAAOjxD,UAAUg2E,YAAc,WAAYj1E,KAAK4O,OAAS,GAEzDzR,EAAA+yD,OAAOjxD,UAAU8wC,OAAS,WACtB,IAAoB,IAAhB/vC,KAAK+0E,OACLhuD,EAAKe,UAAUE,EAAApmB,QAAGgK,qBACd,CAAC3B,MAAOjK,KAAKk1E,cACjBl1E,KAAK+0E,QAAS,MAEb,CACY/0E,KAAKk1E,YAAYxzE,UACnB1B,KAAKk1E,YAAYp+D,UAKpC3Z,EAAA+yD,OAAOjxD,UAAUk2E,QAAU,YACH,IAAhBn1E,KAAK+0E,SACLhuD,EAAKe,UAAUE,EAAApmB,QAAGiK,sBACd,CAAC5B,MAAOjK,KAAKk1E,cACjBl1E,KAAK+0E,QAAS,IAIT53E,EAAAi4E,SAAWd,EAAoB,WAAY,CACpDr+D,GAAI,EAAGC,GAAI,EAAG6B,MAAO,OAEzB5a,EAAAi4E,SAASn2E,UAAU2c,MAAQ,WAAoB,MAAO,CAAC5b,KAAKiW,EAAGjW,KAAKkW,IACpE/Y,EAAAi4E,SAASn2E,UAAU63C,MAAQ,SAAS7gC,EAAGC,GACnClW,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,GAGb/Y,EAAAi4E,SAASn2E,UAAUg4C,WAAa,WACxBj3C,KAAK+X,MACL/X,KAAK+X,MAAQ,KAGbiQ,EAAApmB,QAAGK,IAAI,WAAY,aACf,wCAKZ9E,EAAAi4E,SAASn2E,UAAUo2E,UAAY,WAC3B,OAAQr1E,KAAKiW,GAAK,GAAOjW,KAAKkW,GAAK,GACZ,OAAflW,KAAK+X,OAIjB5a,EAAAi4E,SAASn2E,UAAUwvB,QAAU,WACzB,OAAIzuB,KAAK+X,MACE/X,KAAK+X,MAAMyL,SAASiL,QAAQzuB,KAAKiW,EAAGjW,KAAKkW,GAE7C,MAGX/Y,EAAAi4E,SAASn2E,UAAUwnB,OAAS,WACxB,MAAMriB,EAAW,CACby1B,QAAS75B,KAAKQ,UAAWkgE,MAAO1gE,KAAK8W,QACrCw+D,KAAMt1E,KAAKiW,EAAGs/D,KAAMv1E,KAAKkW,GAK7B,OAHIlW,KAAK+X,QACL3T,EAAI2yC,SAAW/uB,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK+X,QAExC3T,GAGEjH,EAAA45B,MAAQu9C,EAAoB,QAAS,CAC9CkB,QAASV,EAASn0E,SAAUm0E,IAGhC33E,EAAA45B,MAAM93B,UAAUw2E,MAAQ,SAAS1zE,EAAMpB,GACnCX,KAAKw1E,QAAUzzE,EACf/B,KAAKW,SAAWA,GAKPxD,EAAA+/B,KAAOo3C,EAAoB,OAAQ,CAC5Ch2E,MAAO,EAAG2gC,WAAYjX,EAAApmB,QAAGoS,IAAIE,MAAOqL,MAAO,IAG/CpiB,EAAA+/B,KAAKj+B,UAAUqH,UAAY,SAASiZ,GAChCvf,KAAKuf,OAASA,GAGlBpiB,EAAA+/B,KAAKj+B,UAAUyH,UAAY,SAAS6Y,GAChCvf,KAAKuf,OAASA,GAILpiB,EAAAu4E,OAASpB,EAAoB,SACtC,CAAC1lE,OAAQ,IAAO+mE,UAAW,IAAOC,WAAY,MAElDz4E,EAAAu4E,OAAOz2E,UAAU+1E,UAAY,SAASpmE,GAClC5O,KAAK4O,QAAUA,EACX5O,KAAK4O,OAAS5O,KAAK21E,YACnB31E,KAAK4O,OAAS5O,KAAK21E,YAI3Bx4E,EAAAu4E,OAAOz2E,UAAU42E,WAAa,SAASjnE,GACnC5O,KAAK4O,QAAUA,EACX5O,KAAK4O,OAAS5O,KAAK41E,YACnB51E,KAAK4O,OAAS5O,KAAK41E,YAI3Bz4E,EAAAu4E,OAAOz2E,UAAU62E,WAAa,WAC1B,OAAO91E,KAAK4O,QAAU,GAG1BzR,EAAAu4E,OAAOz2E,UAAU82E,OAAS,WACtB,OAAO/1E,KAAK4O,SAAW5O,KAAK21E,WAKnBx4E,EAAA4iC,OAASu0C,EAAoB,SACtC,CAAC0B,GAAI,GAAIC,MAAO,KAEpB94E,EAAA4iC,OAAO9gC,UAAUi3E,MAAQ,SAASt3C,GAC9B5+B,KAAKg2E,IAAMp3C,EACP5+B,KAAKg2E,GAAKh2E,KAAKi2E,QAAQj2E,KAAKg2E,GAAKh2E,KAAKi2E,QAG9C94E,EAAA4iC,OAAO9gC,UAAUk3E,OAAS,SAASv3C,GAAK5+B,KAAKg2E,IAAMp3C,GAEnDzhC,EAAA4iC,OAAO9gC,UAAUm3E,QAAU,WACvB,OAAOp2E,KAAKg2E,GAAK,GAGrB74E,EAAA4iC,OAAO9gC,UAAUo3E,OAAS,WAAY,OAAOr2E,KAAKg2E,IAAM,GAExD74E,EAAA4iC,OAAO9gC,UAAUq3E,OAAS,WACtB,OAAOt2E,KAAKi2E,MAAQj2E,KAAKg2E,IAG7B74E,EAAA4iC,OAAO9gC,UAAUw2E,MAAQ,SAAS72C,GAC9B5+B,KAAKg2E,GAAKp3C,EACV5+B,KAAKi2E,MAAQr3C,GAIJzhC,EAAAo5E,KAAO5B,EAAmB,QAG1Bx3E,EAAAq5E,UAAY7B,EAAmB,aAG/Bx3E,EAAAs5E,OAASjC,EAAuB,SAAU,CACnDv2C,OAAQ,EAAGj2B,OAAQ,KAAMi3B,WAAY,GAAIy3C,YAAa,GACtDC,OAAQ,KACRC,YAAa,OAGjBz5E,EAAAs5E,OAAOx3E,UAAUw2E,MAAQ,SAASrtE,EAAKrG,GACnC/B,KAAKi+B,OAAS71B,EACdpI,KAAKi/B,WAAal9B,GAMT5E,EAAA05E,aAAexC,EAAc,eAAgB,CACtDp2C,OAAQ,EAAGgB,WAAY,GAAIy3C,YAAa,GAAIt+D,KAAM,EAClDu+D,OAAQ,OAIZx5E,EAAA05E,aAAa53E,UAAUwnB,OAAS,WAC5B,MAAMriB,EAAM2lB,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAOhD,OANIA,KAAK22E,OACLvyE,EAAIixB,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK22E,eAGrCvyE,EAAIixB,UAERjxB,GAIEjH,EAAA25E,QAAUxC,EAAoB,UACvC,CAACyC,YAAa,IAIL55E,EAAA65E,OAASrC,EAAmB,UAG5Bx3E,EAAA26B,WAAaw8C,EAAoB,aAAc,CACxDj9C,YAAY,EAAMT,aAAa,EAAMU,aAAa,IAGtDn6B,EAAA26B,WAAW74B,UAAU84B,iBAAmB,WACpC/3B,KAAKq3B,YAAa,EAClBr3B,KAAKs3B,aAAc,GAIVn6B,EAAAy6B,OAAS+8C,EAAmB,UAG5Bx3E,EAAA2iC,WAAaw0C,EAAoB,aAC1C,CAACj5C,IAAK,EAAG47C,SAAU,EAAGp4C,OAAQ,IAIrB1hC,EAAA+5E,UAAY1C,EAAuB,YAC5C,CAAC2C,UAAW,KAAMC,YAAa,OAGnCj6E,EAAA+5E,UAAUj4E,UAAUw2E,MAAQ,SAAS0B,GACjCn3E,KAAKm3E,UAAYA,EACjBn3E,KAAKq3E,OAAS,IAGlBl6E,EAAA+5E,UAAUj4E,UAAUq4E,eAAiB,SAAS9iD,EAAOC,GACjDz0B,KAAKq3E,OAAO7iD,GAASC,GAGzBt3B,EAAA+5E,UAAUj4E,UAAUs4E,aAAe,SAASl8C,GACxCr7B,KAAKm3E,WAAa97C,GAITl+B,EAAA0iC,OAASy0C,EAAoB,SAAU,CAChDhtE,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGr3B,YAAa,EAAG0vE,UAAW,OAGrEr6E,EAAA0iC,OAAO5gC,UAAUw2E,MAAQ,WACrBz1E,KAAKw3E,UAAYl6C,EAAAwE,KAAKnjC,OAAO,QAGjCxB,EAAA0iC,OAAO5gC,UAAU8H,WAAa,WAC1B,OAAO/G,KAAKw3E,UAAUC,QAG1Bt6E,EAAA0iC,OAAO5gC,UAAU4iC,aAAe,SAAS61C,GAEjC13E,KAAKw3E,UADe,iBAAbE,EACUp6C,EAAAwE,KAAKnjC,OAAO+4E,GAGZA,GAIzBv6E,EAAA0iC,OAAO5gC,UAAUqlB,KAAO,SAASqzD,GAC7B/C,EAAUtwD,KAAK9mB,KAAKwC,KAAM23E,GAC1B33E,KAAKw3E,UAAYG,EAAIjvE,eAAe/B,SAGxCxJ,EAAA0iC,OAAO5gC,UAAUwnB,OAAS,WACtB,MAAMriB,EAAMwwE,EAAUnuD,OAAOjpB,KAAKwC,MAElC,OADAoE,EAAIy9B,aAAe7hC,KAAKw3E,UAAU7uE,WAC3BvE,GAIEjH,EAAAy6E,WAAavD,EAAc,aAAc,CAClD/sE,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGr3B,YAAa,EAAGm2B,OAAQ,EAC9DrB,IAAK,KAIIz/B,EAAA6iC,MAAQs0C,EAAoB,QAAS,CAC9Cl2C,SAAU,EAAGC,QAAS,EAAGF,SAAU,EACnCG,UAAW,EAAGC,WAAY,EAAGC,MAAO,EAAGN,MAAO,MAGlD/gC,EAAA6iC,MAAM/gC,UAAU44E,YAAc,WAC1B73E,KAAK83E,YAAY,GACjB93E,KAAK+3E,WAAW,GAChB/3E,KAAKg4E,YAAY,GACjBh4E,KAAKi4E,aAAa,GAClBj4E,KAAKk4E,cAAc,GACnBl4E,KAAKm4E,SAAS,GACdn4E,KAAKo4E,SAAS,IAIlBj7E,EAAA6iC,MAAM/gC,UAAUwe,SAAW,SAAS46D,EAAUC,GAC1C,MAAMx1C,EAAS,MAAQu1C,EAASv7C,aAE1B7iB,EAAYja,KADH,MAAQq4E,EAASv7C,gBAEhC98B,KAAK8iC,GAAQ7oB,EAAYq+D,IAG7Bn7E,EAAA6iC,MAAM/gC,UAAU0J,SAAW,WACvB,IAAIF,EAAS,GAOb,OANAuf,EAAApmB,QAAGgU,UAAUvL,QAAQ,CAACxM,EAAQR,KAC1B,MAAMiB,EAAQ0B,KAAKnC,KACL,IAAVS,IACAmK,GAAUuf,EAAApmB,QAAG8T,WAAWrY,GAAK,KAAOiB,KAGrCmK,GAGXtL,EAAA6iC,MAAM/gC,UAAUkH,OAAS,SAASwxE,GAC9B,IAAIh2E,EAAM3B,KAAKQ,YAAcm3E,EAAIn3E,UAQjC,OADAmB,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,GAAO3B,KAAKsJ,gBAAkBquE,EAAIruE,gBAC3BtJ,KAAKiJ,eAAiB0uE,EAAI1uE,eAC1BjJ,KAAKuI,gBAAkBovE,EAAIpvE,gBAC3BvI,KAAKu4E,iBAAmBZ,EAAIY,iBAC5Bv4E,KAAKiwD,aAAe0nB,EAAI1nB,aACxBjwD,KAAKw4E,kBAAoBb,EAAIa,kBAC7Bx4E,KAAKy4E,aAAed,EAAIc,YAK5Bt7E,EAAAu7E,UAAYrE,EAAc,YAAa,CAChDj2C,SAAU,EAAGC,QAAS,EAAGF,SAAU,EACnCG,UAAW,EAAGC,WAAY,EAAGC,MAAO,EAAGN,MAAO,EAC9CtB,IAAK,KAIIz/B,EAAAw7E,WAAarE,EAAoB,aAC1C,CAACsE,SAAU5wD,EAAApmB,QAAG+I,gBAILxN,EAAA07E,OAASrE,EAAuB,SAAU,CAACp1D,OAAQ,OAGnDjiB,EAAA27E,SAAWtE,EAAuB,WAAY,CACvDv+D,EAAG,EAAGC,EAAG,EAAG6B,MAAO,OAGvB5a,EAAA27E,SAAS75E,UAAU63C,MAAQ,SAAS7gC,EAAGC,GACnClW,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,GAGb/Y,EAAA27E,SAAS75E,UAAU2c,MAAQ,WACvB,MAAO,CAAC5b,KAAKiW,EAAGjW,KAAKkW,IAGzB/Y,EAAA27E,SAAS75E,UAAUw2E,MAAQ,SAASx/D,EAAGC,EAAG6B,GACtC/X,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,EACTlW,KAAK+X,MAAQA,GAIJ5a,EAAA47E,KAAOvE,EAAuB,OAAQ,CAACrvE,KAAM,OAG7ChI,EAAA67E,QAAU1E,EAAoB,UAAW,CAClD2E,QAAS,cAIN97E,EAAA67E,QAAQ/5E,UAAUi6E,WAEzB/7E,EAAA67E,QAAQ/5E,UAAUw2E,MAAQ,WACtBz1E,KAAKi5E,QAAU,IAAI9E,EAAAgF,YAKnBn5E,KAAKo5E,YAAY,QAHF,KACbp5E,KAAKi5E,QAAQI,WAAWr5E,KAAKk1E,gBAOtB/3E,EAAA0nC,QAAU2vC,EAAuB,UAAW,CACrDv+D,EAAG,KAAMC,EAAG,KAAMygE,OAAQ,KAAM5+D,MAAO,KACvCuhE,QAAQ,EACRC,QAAS,KAAMC,QAAS,KACxB/vE,MAAO,EAAGnC,OAAQ,EAAG22B,OAAQ,EAAGw7C,KAAM,OAG1Ct8E,EAAA0nC,QAAQ5lC,UAAUw2E,MAAQ,SAASkB,GAC/B32E,KAAK22E,OAASA,EACd32E,KAAKiW,EAAI0gE,EAAOh7D,OAChB3b,KAAKkW,EAAIygE,EAAO36D,OAChBhc,KAAK+X,MAAQ4+D,EAAOjtE,WACpB1J,KAAKy5E,KAAO,GACZz5E,KAAK05E,UAAY,GAGrBv8E,EAAA0nC,QAAQ5lC,UAAU06E,SAAW,WACzB,OAAO35E,KAAKyJ,MAAQ,GAGxBtM,EAAA0nC,QAAQ5lC,UAAU26E,SAAW,WACzB,OAAO55E,KAAKs5E,QAGhBn8E,EAAA0nC,QAAQ5lC,UAAU46E,YAAc,WAC5B75E,KAAKs5E,QAAS,GAGlBn8E,EAAA0nC,QAAQ5lC,UAAU66E,YAAc,SAAS7jE,EAAGC,GACxClW,KAAKy5E,KAAOrF,EAAA7pD,SAASuJ,aAAa9zB,KAAKiW,EAAGjW,KAAKkW,EAAGD,EAAGC,GACrDlW,KAAKu5E,QAAUtjE,EACfjW,KAAKw5E,QAAUtjE,EACXlW,KAAKy5E,KAAKl4E,OAAS,IAAIvB,KAAK05E,SAAW,IAI/Cv8E,EAAA0nC,QAAQ5lC,UAAU86E,SAAW,WACzB,OAAO/5E,KAAKiW,IAAMjW,KAAKu5E,SAAWv5E,KAAKkW,IAAMlW,KAAKw5E,SAGtDr8E,EAAA0nC,QAAQ5lC,UAAU+6E,cAAgB,WAC9B,OAAOh6E,KAAK05E,UAAY,GAAK15E,KAAK05E,SAAW15E,KAAKy5E,KAAKl4E,QAG3DpE,EAAA0nC,QAAQ5lC,UAAUg7E,sBAAwB,WACtC,MAAM7uD,EAAQprB,KAAKy5E,KAAKz5E,KAAK05E,UAC7B15E,KAAKiW,EAAImV,EAAM,GACfprB,KAAKkW,EAAIkV,EAAM,IAInBjuB,EAAA0nC,QAAQ5lC,UAAUkmD,MAAQ,WAGtB,OAFAnlD,KAAK05E,SAAW,EAChB15E,KAAKi6E,wBACE,CAACj6E,KAAKiW,EAAGjW,KAAKkW,IAKzB/Y,EAAA0nC,QAAQ5lC,UAAU6wD,KAAO,WACrB,OAAI9vD,KAAKg6E,mBACHh6E,KAAKyJ,QACLzJ,KAAK05E,SACP15E,KAAKi6E,yBACE,GAEJ,MAIX98E,EAAA0nC,QAAQ5lC,UAAU20E,KAAO,WACrB,OAAI5zE,KAAKg6E,mBACHh6E,KAAKyJ,QACLzJ,KAAK05E,SACP15E,KAAKi6E,yBACE,GAEJ,MAIE98E,EAAAmpC,KAAO,SAAS4zC,GACzBnwD,EAAA8qD,cAAcr3E,KAAKwC,KAAM,QAGzBA,KAAKm6E,YAAcD,GAEvBlyD,EAAApmB,QAAG0D,QAAQnI,EAAAmpC,KAAMvc,EAAA8qD,eACjB9qD,EAAAI,UAAUmc,KAAOnpC,EAAAmpC,KAGjBnpC,EAAAmpC,KAAKrnC,UAAUm7E,SAAW,SAASt6E,GAC/B,MAAMiY,EAAQ/X,KAAKk1E,YAAYxrE,WAC/B,GAAI1J,KAAKm6E,YAAYl6D,YAAa,CAC9B,MAAMtf,EAAWX,KAAKm6E,YAAYl6D,cACjB,aAAbtf,EACAX,KAAKq6E,cAAcv6E,GAEda,IAAaqnB,EAAApmB,QAAGmL,UACrBgL,EAAMiW,QAAQhuB,KAAKm6E,YAAar6E,EAAK6b,OAAQ7b,EAAKkc,QAIlDgM,EAAApmB,QAAGK,IAAI,iBAAkB,WACtB,oCAAsCtB,QAI7CqnB,EAAApmB,QAAGK,IAAI,OAAQ,WAAY,0BAInC9E,EAAAmpC,KAAKrnC,UAAUo7E,cAAgB,SAASv6E,GACpC,MAAMw6E,EAAWt6E,KAAKk1E,YAAYxrE,WAC9B1J,KAAKm6E,YAAYj7E,eAAe,eAChC8oB,EAAApmB,QAAGuC,MAAMnE,KAAM,mBAAqBF,EAAK6b,OACnC,KAAO7b,EAAKkc,QAClBs+D,EAASrkC,UAAUj2C,KAAKm6E,YAAar6E,EAAK6b,OAAQ7b,EAAKkc,UAI/D7e,EAAAmpC,KAAKrnC,UAAUs7E,cAAgB,SAASL,GACpCl6E,KAAKm6E,YAAcD,GAGvB/8E,EAAAmpC,KAAKrnC,UAAUwnB,OAAS,WACpB,MAAM7H,EAAOmL,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAC3Cw6E,EAAWx6E,KAAKm6E,YAAY1zD,SAiBlC,OAhBIzmB,KAAKm6E,YAAYl6D,gBAAkB+H,EAAApmB,QAAGmL,UACtC6R,EAAK27D,cAAgB,CACjBE,WAAY,aACZn8E,MAAOk8E,GAGNx6E,KAAKm6E,YAAYl6D,gBAAkB+H,EAAApmB,QAAGiL,WAC3C+R,EAAK27D,cAAgB,CACjBE,WAAY,cACZn8E,MAAOk8E,GAIXxyD,EAAApmB,QAAGK,IAAI,OAAQ,SACX,8CAED2c,GAKEzhB,EAAAu9E,cAAgBlG,EAAuB,gBAChD,CAACnwE,IAAK,OAEVlH,EAAAu9E,cAAcz7E,UAAUw2E,MAAQ,WAC5Bz1E,KAAKqE,IAAM,IAGflH,EAAAu9E,cAAcz7E,UAAU07E,OAAS,SAASv2E,GACtCpE,KAAKqE,IAAIuB,KAAKxB,IAKLjH,EAAAy9E,SAAWvG,EAAc,WAAY,CAC9Cp2C,OAAQ,EAAGgB,WAAY,KAId9hC,EAAA09E,QAAUlG,EAAmB,WAG7Bx3E,EAAA29E,SAAWxG,EAAoB,WACxC,CAACttE,OAAQ,EAAG8kB,KAAM,IAIT3uB,EAAA49E,SAAWrG,EAAa,WACjC,CAACsG,YAAa,2DAKL79E,EAAA89E,KAAO5G,EAAc,OAAQ,CAACsC,OAAQ,OAEnDx5E,EAAA89E,KAAKh8E,UAAUwnB,OAAS,WACpB,MAAMriB,EAAM2lB,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAIhD,OAHIgoB,EAAApmB,QAAG2e,cAAcvgB,KAAK22E,UACtBvyE,EAAIixB,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK22E,SAEzCvyE,GAEXjH,EAAA89E,KAAKD,YAAc,4CAIN79E,EAAA+9E,UAAY7G,EAAc,YAAa,CAACsC,OAAQ,OAC7Dx5E,EAAA+9E,UAAUF,YAAc,8CAExB79E,EAAA+9E,UAAUj8E,UAAUwnB,OAAS,WACzB,MAAMriB,EAAM2lB,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAIhD,OAHIgoB,EAAApmB,QAAG2e,cAAcvgB,KAAK22E,UACtBvyE,EAAIixB,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK22E,SAEzCvyE,GAIEjH,EAAAg+E,QAAU7G,EAAoB,UAAW,CAACzoC,QAAS,OAEhE1uC,EAAAg+E,QAAQl8E,UAAUwnB,OAAS,WACvB,MAAMriB,EAAM2lB,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAEhD,OADAoE,EAAIg3E,WAAapzD,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK6rC,SACtCznC,GAGEjH,EAAAk+E,MAAQ/G,EAAoB,QACrC,CAAC12E,KAAM,GAAI09E,WAAY,KAG3Bn+E,EAAAk+E,MAAMp8E,UAAUs8E,QAAU,SAAS39E,GAC/BoC,KAAKpC,KAAOA,EAAOoC,KAAKpC,MAG5BT,EAAAk+E,MAAMp8E,UAAUu8E,YAAc,WAC1B,OAAOx7E,KAAKpC,MAGhBT,EAAAk+E,MAAMp8E,UAAUw8E,YAAc,WAC1B,MAAwB,KAApBz7E,KAAKs7E,cACKt7E,KAAKs7E,eAAet7E,KAAKpC,OAEhCoC,KAAKpC,MAIhB,MAAa+jC,UAAenL,EAAMklD,aAAallD,EAAMmlD,WAAW5xD,EAAA8qD,iBAI5DxsD,cACI6O,MAAM,UACNl3B,KAAK47E,KAAO,KACZ57E,KAAK67E,MAAQ,IAGVxzD,UAAW,OAAOroB,KAAK67E,MACvBxzD,QAAQjQ,GAAOpY,KAAK67E,MAAQzjE,EAE5BiQ,YAAa,OAAOroB,KAAK47E,KACzBvzD,UAAU7M,GAAMxb,KAAK47E,KAAOpgE,EAE5B6M,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK67E,MAAQlE,EAAImE,UACjB97E,KAAK47E,KAAOjE,EAAIxiD,YAGb9M,SACH,MAAMjkB,EAAM8yB,MAAMzQ,SAOlB,OANAriB,EAAIy1B,QAAU75B,KAAKQ,UACnB4D,EAAIw9B,QAAU5hC,KAAK67E,MAEf7zD,EAAApmB,QAAG2e,cAAcvgB,KAAK47E,QACtBx3E,EAAIixB,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK47E,OAEzCx3E,GA9BfjH,EAAAwkC,SAiCAA,EAAOq5C,YAAc,kDACrBjxD,EAAAI,UAAUwX,OAASA,EAENxkC,EAAA4+E,SAAWrH,EAAa,WACnC,CAACsG,YAAa,0DAEH79E,EAAA6+E,KAAOtH,EAAa,QAEpBv3E,EAAA8+E,SAAW3H,EAAoB,WACxC,CAAC4H,KAAM,IAAKC,QAAS,IAAKC,SAAU,MAExCj/E,EAAA8+E,SAASh9E,UAAU6d,KAAO,WAClB9c,KAAKk8E,KAAOl8E,KAAKm8E,UACjBn8E,KAAKk8E,MAAQ,IAIrB/+E,EAAA8+E,SAASh9E,UAAUo9E,KAAO,WAClBr8E,KAAKk8E,KAAOl8E,KAAKo8E,UACjBp8E,KAAKk8E,MAAQ,IAIrB/+E,EAAA8+E,SAASh9E,UAAUq9E,WAAa,WAC5B,OAAOt8E,KAAKk8E,MAAQ,GAGxB/+E,EAAA8+E,SAASh9E,UAAUs9E,SAAW,WAC1B,OAAOv8E,KAAKk8E,OAASl8E,KAAKo8E,SAIjBj/E,EAAAq/E,MAAQlI,EAAoB,QAAS,CAACmI,MAAO,OAG7Ct/E,EAAAu/E,OAAShI,EAAa,UAGtBv3E,EAAAw/E,OAASjI,EAAa,UAEtBv3E,EAAAy/E,UAAYjI,EAAmB,aAC/Bx3E,EAAA0/E,eAAiBlI,EAAmB,kBACpCx3E,EAAA4nC,KAAO2vC,EAAa,QACpBv3E,EAAA2/E,OAASpI,EAAa,SACjC,CAACsG,YAAa,4DACH79E,EAAA4/E,OAASrI,EAAa,UACtBv3E,EAAA6/E,SAAWtI,EAAa,YACxBv3E,EAAA8/E,UAAYvI,EAAa,YACpC,CAACsG,YAAa,8CACH79E,EAAA+/E,UAAYxI,EAAa,aACzBv3E,EAAAggF,UAAYzI,EAAa,aAEzBv3E,EAAA02C,MAAQ2gC,EAAuB,QACxC,CAACv1C,WAAY,GAAIhB,OAAQ,EAAG04C,OAAQ,OAE3Bx5E,EAAAigF,SAAW/I,EAAc,WAAY,CAC9CgJ,OAAQ,GACRtlE,MAAOiQ,EAAApmB,QAAG4f,SAASC,OAEnB,CAACu5D,YAAa,wDAGL79E,EAAAmgF,WAAajJ,EAAc,aAAc,CAClDgJ,OAAQ,GACRtlE,MAAOiQ,EAAApmB,QAAGigB,WAAWJ,OAErB,CAACu5D,YAAa,wDAKL79E,EAAAogF,QAAU5I,EAAmB,WAG7Bx3E,EAAAqgF,YAAc7I,EAAmB,eAGjCx3E,EAAAsgF,WAAa,WACtB1zD,EAAA8qD,cAAcr3E,KAAKwC,KAAM,cACzBA,KAAK09E,OAAS,KACd19E,KAAK29E,WAAa,KAElB39E,KAAK49E,aAAehgF,KAChBoC,KAAK29E,WAAa//E,IAGtBoC,KAAK8D,aAAe,KAAM9D,KAAK29E,YAE/B39E,KAAKyc,SAAW,KAAMzc,KAAK09E,QAC3B19E,KAAK69E,cAAgBC,KACjB99E,KAAK09E,OAASI,KAItB91D,EAAApmB,QAAG0D,QAAQnI,EAAAsgF,WAAY1zD,EAAA8qD,eACvB9qD,EAAAI,UAAUszD,WAAatgF,EAAAsgF,WAEvBtgF,EAAAsgF,WAAWx+E,UAAUwnB,OAAS,WAC1B,MAAM7H,EAAOg2D,EAAUnuD,OAAOjpB,KAAKwC,MAQnC,OAPA4e,EAAKi/D,cAAgB,CACjBpD,WAAY,mBACZn8E,MAAO,CACH4B,UAAWF,KAAK29E,WAChBI,SAAU/1D,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKk1E,eAGvCt2D,GAMEzhB,EAAA6gF,SAAWrJ,EAAmB,WACvC,CAACqG,YAAa,uCACL79E,EAAA8gF,SAAWtJ,EAAmB,WACvC,CAACqG,YAAa,sCACL79E,EAAA+gF,YAAcvJ,EAAmB,cAC1C,CAACqG,YAAa,4CACL79E,EAAAghF,cAAgBxJ,EAAmB,gBAC5C,CAACyJ,WAAY,yDACJjhF,EAAAkhF,cAAgB1J,EAAmB,iBACnCx3E,EAAAmhF,UAAY3J,EAAmB,aAE/Bx3E,EAAAohF,YAAc5J,EAAmB,cAAe,CACzDqG,YAAa,qDAIJ79E,EAAAqhF,eAAiBnK,EAAc,iBACxC,CAACvN,OAAQ,KAGA3pE,EAAAshF,iBAAmBpK,EAAc,mBAC1C,CAACqK,OAAQ,IAGAvhF,EAAAwhF,MAAQtK,EAAc,QAAS,CACxCt8D,MAAO,EAAG6mE,YAAa52D,EAAApmB,QAAG4M,YAMjBrR,EAAA0hF,QAAUlK,EAAmB,WAC7Bx3E,EAAA2hF,OAASxK,EAAoB,SAAU,CAACyK,UAAW,IACnD5hF,EAAA6hF,WAAarK,EAAmB,cAChCx3E,EAAA8hF,SAAWtK,EAAmB,YAE9Bx3E,EAAA+hF,WAAavK,EAAmB,cAKhCx3E,EAAAgiF,SAAWzK,EAAa,WAAY,CAC7CsG,YAAa,iDAEJ79E,EAAAiiF,WAAa1K,EAAa,aAAc,CACjDsG,YAAa,wDAEJ79E,EAAAkiF,YAAc3K,EAAa,cAAe,CACnDsG,YAAa,wDAEJ79E,EAAAmiF,UAAY5K,EAAa,YAAa,CAC/CsG,YAAa,yDAEJ79E,EAAAoiF,cAAgB7K,EAAa,gBAAiB,CACvDsG,YAAa,iCAEJ79E,EAAAqiF,cAAgB9K,EAAa,gBAAiB,CACvDsG,YAAa,4DAEJ79E,EAAAsiF,aAAe/K,EAAa,gBAC5Bv3E,EAAAuiF,WAAahL,EAAa,cAM1Bv3E,EAAAwiF,WAAarL,EAAoB,aAAc,CACxDsL,GAAI,GAAIjhD,MAAO,KAGnBxhC,EAAAwiF,WAAW1gF,UAAU4gF,MAAQ,SAASnhD,GAClC1+B,KAAK4/E,IAAMlhD,EACP1+B,KAAK4/E,GAAK5/E,KAAK2+B,QAAQ3+B,KAAK4/E,GAAK5/E,KAAK2+B,QAG9CxhC,EAAAwiF,WAAW1gF,UAAU6gF,OAAS,SAASphD,GACnC1+B,KAAK4/E,IAAMlhD,GAGfvhC,EAAAwiF,WAAW1gF,UAAU8gF,SAAW,WAC5B,OAAO//E,KAAK4/E,GAAK,GAGrBziF,EAAAwiF,WAAW1gF,UAAU+gF,QAAU,SAASC,GACpC,OAAOjgF,KAAK4/E,IAAMK,GAKT9iF,EAAA+iF,WAAa7L,EAAc,aAAc,CAClD8L,UAAW,IAEfhjF,EAAA+iF,WAAWlF,YACP,wEAES79E,EAAAijF,UAAY,SAASr+E,GAC9BgoB,EAAA8qD,cAAcr3E,KAAKwC,KAAM+B,GAEzB,IAAIs+E,EAAS,KACTzE,EAAO,KACP0E,EAAQ,KAEZtgF,KAAKugF,SAAW,KAAMF,GACtBrgF,KAAKwgF,SAAW58C,KAAUy8C,EAASz8C,IAEnC5jC,KAAKm1B,UAAY,KAAMymD,GACvB57E,KAAKq1B,UAAY7Z,KAAQogE,EAAOpgE,IAEhCxb,KAAKygF,QAAU,KAAMH,GACrBtgF,KAAK0gF,QAAUv7E,KAASm7E,EAAQn7E,KAGpC6iB,EAAApmB,QAAG0D,QAAQnI,EAAAijF,UAAWr2D,EAAA8qD,eAGT13E,EAAAwjF,UAAY,WACrBxjF,EAAAijF,UAAU5iF,KAAKwC,KAAM,cAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAAwjF,UAAWxjF,EAAAijF,WAETjjF,EAAAyjF,SAAW,WACpBzjF,EAAAijF,UAAU5iF,KAAKwC,KAAM,aAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAAyjF,SAAUzjF,EAAAijF,WAERjjF,EAAA0jF,aAAe,WACxB1jF,EAAAijF,UAAU5iF,KAAKwC,KAAM,iBAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAA0jF,aAAc1jF,EAAAijF,WAEZjjF,EAAA2jF,UAAY,WACrB3jF,EAAAijF,UAAU5iF,KAAKwC,KAAM,cAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAA2jF,UAAW3jF,EAAAijF,WAETjjF,EAAA4jF,UAAY,WACrB5jF,EAAAijF,UAAU5iF,KAAKwC,KAAM,cAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAA4jF,UAAW5jF,EAAAijF,WAETjjF,EAAA6jF,UAAY,WACrB7jF,EAAAijF,UAAU5iF,KAAKwC,KAAM,cAEzBgoB,EAAApmB,QAAG0D,QAAQnI,EAAA6jF,UAAW7jF,EAAAijF,WAGTjjF,EAAA8jF,UAAYtM,EAAmB,aAO/Bx3E,EAAA+jF,aAAevM,EAAmB,eAAgB,CAC3DqG,YAAa,+CAQJ79E,EAAAgkF,WAAa3M,EAAuB,aAC7C,CAAC4M,OAAQ,KAAMhiE,OAAQ,OAGdjiB,EAAAkkF,SAAW/M,EAAoB,WAAY,CAACp5D,IAAK,OAC9D/d,EAAAkkF,SAASpiF,UAAUwnB,OAAS,WACxB,MAAO,CACHi6C,MAAO1gE,KAAK8W,QACZ+iB,QAAS,WACTynD,OAAQ,CACJ7G,WAAY,aACZn8E,MAAO0B,KAAKmb,SAASsL,YAMpBtpB,EAAAokF,kBAAoB5M,EAAmB,oBAAqB,CACrEqG,YAAa,gEAOJ79E,EAAAqkF,OAAS,WAClBz3D,EAAA8qD,cAAcr3E,KAAKwC,KAAM,UACzBA,KAAKyhF,WAAY,EAEjBzhF,KAAK0hF,QAAU,GAEf1hF,KAAK2hF,SAAWntD,IAASx0B,KAAK0hF,QAAQxiF,eAAes1B,IACrDx0B,KAAK4hF,SAAWptD,KACZx0B,KAAK0hF,QAAQltD,GAAS,CAAC52B,KAAM42B,EAAOzc,MAAO,EAAGqjD,OAAQ,KAI1Dp7D,KAAK0J,SAAW8qB,IACRx0B,KAAK2hF,SAASntD,GACPx0B,KAAK0hF,QAAQltD,GAAOzc,MAExB,GAEX/X,KAAK+2C,SAAW,EAACviB,EAAOzc,KAAW/X,KAAK0hF,QAAQltD,GAAOzc,MAAQA,IAC/D/X,KAAK6hF,UAAYrtD,IAASx0B,KAAK0hF,QAAQltD,GAAO4mC,QAE9Cp7D,KAAK8hF,YAActtD,KAAUx0B,KAAK0hF,QAAQltD,GAAO4mC,OAAS,IAC1Dp7D,KAAK+hF,UAAY,EAACvtD,EAAO4mC,KACjBp7D,KAAK2hF,SAASntD,KACdx0B,KAAK0hF,QAAQltD,GAAO4mC,QAAUA,KAItCp7D,KAAKgiF,UAAY,KAAMhiF,KAAK0hF,SAC5B1hF,KAAKiiF,UAAY5K,KAAWr3E,KAAK0hF,QAAUrK,IAE3Cr3E,KAAKymB,OAAS,MACH,CACHi6C,MAAO1gE,KAAK8W,QACZ+iB,QAAS75B,KAAKQ,UACdyhF,UAAWjiF,KAAK0hF,YAI5B15D,EAAApmB,QAAG0D,QAAQnI,EAAAqkF,OAAQz3D,EAAA8qD,eACnB9qD,EAAAI,UAAUq3D,OAASrkF,EAAAqkF,OACNrkF,EAAAu3B,UAAY8/C,EAAuB,YAC5C,CAAChgD,MAAO,GAAI4mC,OAAQ,IAGXj+D,EAAA+kF,WAAa5N,EAAoB,aAC1C,CAAC6N,SAAU,EAAGC,MAAO,KAAMC,OAAQ,OAGvCllF,EAAA+kF,WAAWzM,MAAQ,WACfz1E,KAAKoiF,MAAQ,IAIJjlF,EAAAmlF,YAAc9N,EAAuB,cAAe,CAACrvE,KAAM,OAO3DhI,EAAAolF,SAAW,WACpBx4D,EAAA8qD,cAAcr3E,KAAKwC,KAAM,YACzBA,KAAKyhF,WAAY,EACjB,IAAIj7B,EAAQ,KACZxmD,KAAKwiF,QAAU79D,KAAS6hC,EAAQ7hC,IAChC3kB,KAAKyiF,QAAU,KAAMj8B,GACrBxmD,KAAK0iF,WAAa/9D,KAAS6hC,EAAQzoD,OAAO4kF,OAAOn8B,GAAS,GAAI7hC,MAElEqD,EAAApmB,QAAG0D,QAAQnI,EAAAolF,SAAUx4D,EAAA8qD,eACrB9qD,EAAAI,UAAUo4D,SAAWplF,EAAAolF,SAIRplF,EAAAylF,UAAY,WACrB74D,EAAA8qD,cAAcr3E,KAAKwC,KAAM,aAEzB,IAAIwmD,EAAQ,KAEZxmD,KAAKwiF,QAAU79D,KAAS6hC,EAAQ7hC,IAChC3kB,KAAKyiF,QAAU,KAAMj8B,GACrBxmD,KAAK0iF,WAAa/9D,KAAS6hC,EAAQzoD,OAAO4kF,OAAOn8B,GAAS,GAAI7hC,MAGlEqD,EAAApmB,QAAG0D,QAAQnI,EAAAylF,UAAW74D,EAAA8qD,eACtB9qD,EAAAI,UAAUy4D,UAAYzlF,EAAAylF,UAKTzlF,EAAA0lF,WAAalO,EAAmB,cAGhCx3E,EAAA2lF,YAAc,WACvB/4D,EAAA8qD,cAAcr3E,KAAKwC,KAAM,eAEzB,IAAIwmD,EAAQ,KAEZxmD,KAAKwiF,QAAU79D,KAAS6hC,EAAQ7hC,IAChC3kB,KAAKyiF,QAAU,KAAMj8B,GACrBxmD,KAAK0iF,WAAa/9D,KAAS6hC,EAAQzoD,OAAO4kF,OAAOn8B,EAAO7hC,KAExD3kB,KAAK+iF,MAAQ,KAAuB,QAAjBv8B,EAAMw8B,QACzBhjF,KAAKijF,OAAS,KAAuB,SAAjBz8B,EAAMw8B,SAE9Bh7D,EAAApmB,QAAG0D,QAAQnI,EAAA2lF,YAAa/4D,EAAA8qD,eACxB9qD,EAAAI,UAAU24D,YAAc3lF,EAAA2lF,YAGX3lF,EAAA+lF,YAAc7O,EAAc,cAAe,CAAClvE,KAAM,OAGlDhI,EAAA81C,UAAYyhC,EAAa,aAIzBv3E,EAAAgmF,WAAa,WACtBp5D,EAAA8qD,cAAcr3E,KAAKwC,KAAM,cAEzB,IAAIwmD,EAAQ,KAEZxmD,KAAKwiF,QAAU79D,KAAS6hC,EAAQ7hC,IAChC3kB,KAAKyiF,QAAU,KAAMj8B,GACrBxmD,KAAK0iF,WAAa/9D,KAAS6hC,EAAQzoD,OAAO4kF,OAAOn8B,EAAO7hC,KAExD3kB,KAAKojF,UAAYC,KACR78B,IAAQA,EAAQ,IACjBA,EAAMtnD,eAAe,QACrBsnD,EAAM88B,MAAQD,EAGd78B,EAAM88B,KAAOD,KAIzBr7D,EAAApmB,QAAG0D,QAAQnI,EAAAgmF,WAAYp5D,EAAA8qD,eACvB9qD,EAAAI,UAAUg5D,WAAahmF,EAAAgmF,WAGVhmF,EAAAomF,MAAQ/O,EAAuB,QAAS,CAACrvE,KAAM,OAE5DhI,EAAAomF,MAAMtkF,UAAUw2E,MAAQ,SAAStwE,GAC7BnF,KAAKmF,KAAOA,GAGHhI,EAAA4uC,QAAUyoC,EAAuB,UAC1C,CAACrvE,KAAM,KAAMq+E,WAAY,KAE7BrmF,EAAA4uC,QAAQ9sC,UAAUw2E,MAAQ,SAAStwE,GAC/BnF,KAAKmF,KAAOA,GAAQ,IAIXhI,EAAAsmF,iBAAmB9O,EAAmB,oBAGtCx3E,EAAAumF,OAAS/O,EAAmB,UAM5Bx3E,EAAAglC,SAAWkyC,EAAc,WAAY,CAC9CjuD,KAAM,KACNu9D,UAAU,EACVphD,aAAa,IAGjBplC,EAAAglC,SAASljC,UAAUwnB,OAAS,WACxB,MAAMm9D,EAAW5jF,KAAKomB,KAAKK,SAC3B,MAAO,CACHi6C,MAAO1gE,KAAK8W,QACZ+iB,QAAS75B,KAAKQ,UACd4hC,QAAS,CAACyhD,WAAYD,GACtBnhD,YAAaziC,KAAK2jF,SAClBjhD,eAAgB1iC,KAAKuiC,cAKhBplC,EAAA2mF,MAAQtP,EAAuB,QAAS,CACjDrvE,KAAM,KAAM2B,KAAM,KAAMi9E,UAAU,IAIzB5mF,EAAA6lC,WAAaqxC,EAAc,aAAc,CAClDjuD,KAAM,KAAM49D,cAAc,IAG9B7mF,EAAA6lC,WAAW/jC,UAAUwnB,OAAS,WAC1B,MAAM7H,EAAY,CACd8hD,MAAO1gE,KAAK8W,QACZ+iB,QAAS75B,KAAKQ,UACdyjF,gBAAiBjkF,KAAKgkF,cAE1B,GAAKhkF,KAAKgkF,aAKNplE,EAAKwjB,QAAU,CAACyhD,WAAY7jF,KAAKomB,UALb,CACpB,MAAMw9D,EAAW5jF,KAAKomB,KAAKK,SAC3B7H,EAAKwjB,QAAU,CAACyhD,WAAYD,GAKhC,OAAOhlE,GAMEzhB,EAAA+mF,YAAc7P,EAAc,cAAe,CACpDuL,GAAI,EAAG5J,GAAI,EAAGmO,OAAQ,GAAIC,OAAQ,GAAIC,UAAW,GAAIC,UAAW,KAGvDnnF,EAAAonF,UAAYlQ,EAAc,YAAa,CAChDj1D,OAAQ,KAAMu3D,OAAQ,MACvB,CACCqE,YAAa,wDAGjB79E,EAAAonF,UAAUtlF,UAAUwnB,OAAS,WACzB,MAAM7H,EAAY,CACd8hD,MAAO1gE,KAAK8W,QACZ+iB,QAAS75B,KAAKQ,WAQlB,OANIwnB,EAAApmB,QAAG2e,cAAcvgB,KAAKof,UACtBR,EAAK4lE,UAAYx8D,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKof,SAE7C4I,EAAApmB,QAAG2e,cAAcvgB,KAAK22E,UACtB/3D,EAAKyW,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK22E,SAE1C/3D,GAKEzhB,EAAAsnF,UAAYjQ,EAAuB,YAC5C,CAACrvE,KAAM,OAGXhI,EAAAsnF,UAAUxlF,UAAUw2E,MAAQ,SAAStwE,GACjCnF,KAAKmF,KAAOA,GAIHhI,EAAAunF,oBAAsB,EAC/Bn+D,EAAgBH,EAAqBu+D,EAAatgF,KAElD,GAAIkiB,EAAOrd,IAAI,cACXqd,EAAOroB,IAAI,cAAcg3B,UAAU9O,EAAMu+D,EAAKtgF,OAE7C,CACD,MAAMugF,EAAU,IAAIznF,EAAA83B,WACpB2vD,EAAQ1vD,UAAU9O,EAAMu+D,EAAKtgF,GAC7BkiB,EAAOjG,IAAIskE,GAEVr+D,EAAOrd,IAAIkd,IACZG,EAAOjG,IAAI8F,KASNjpB,EAAA0nF,KAAOrQ,EAAuB,OACvC,CAACsQ,WAAY,KAAMh+E,KAAM,OAGhB3J,EAAA4nF,KAAOvQ,EAAuB,OAAQ,CAACv+D,GAAI,EAAGC,GAAI,IAGlD/Y,EAAA6nF,SAAWxQ,EAAuB,WAAY,CAAC9wE,KAAM,OAGrDvG,EAAAq5C,OAASi+B,EAAsB,UAG/Bt3E,EAAA8nF,KAAOzQ,EAAuB,OAAQ,CAAC0Q,WAAY,OAEnD/nF,EAAAgoF,KAAO1Q,EAAsB,QAE7Bt3E,EAAAioF,WAAa5Q,EAAuB,aAC7C,CAAC6Q,QAAS,KAAMC,QAAS,KAEhBnoF,EAAAooF,QAAU/Q,EAAuB,UAC1C,CAAC1tE,KAAM,KAAMw+E,QAAS,GAAIlmE,OAAQ,KAAMomE,WAAY,KAAMnI,OAAQ,OAGzDlgF,EAAAsoF,UAAYhR,EAAsB,aAOlCt3E,EAAAuoF,SAAWpR,EAAoB,WAAY,CACpD3vD,KAAM,OAEVxnB,EAAAuoF,SAASzmF,UAAUw2E,MAAQ,WACvBz1E,KAAK2kB,KAAO,CAACghE,MAAO,KAIxBxoF,EAAAuoF,SAASzmF,UAAUyjF,WAAa,SAAS/9D,GACrC,MAAMihE,EAAU5lF,KAAK2kB,KACrB3kB,KAAK2kB,KAAO5mB,OAAO4kF,OAAOiD,EAASjhE,IAGvCxnB,EAAAuoF,SAASzmF,UAAU4mF,QAAU,SAAShvE,GAClC7W,KAAK2kB,KAAKghE,MAAM9uE,IAAM,GAG1B1Z,EAAAuoF,SAASzmF,UAAU6mF,QAAU,SAASjvE,GAClC,OAAO7W,KAAK2kB,KAAKghE,MAAM9uE,IAG3B1Z,EAAAuoF,SAASzmF,UAAU8mF,YAAc,SAAShkF,GACtC,MAAM4iB,EAAO3kB,KAAK2kB,KACbA,EAAKghE,MAAMzmF,eAAe6C,GAI3B4iB,EAAKghE,MAAM5jF,IAAS,EAHpB4iB,EAAKghE,MAAM5jF,GAAQ,EAKvB/B,KAAK2kB,KAAOA,GASHxnB,EAAA6oF,OAAS3R,EAAc,SAAU,CAACryC,SAAU,IAEzD7kC,EAAA6oF,OAAO/mF,UAAUgnF,aAAe,WAC5BjmF,KAAKgiC,UAAY,GAMR7kC,EAAA83B,WAAao/C,EAAc,aACpC,CAACryC,SAAU,KAAMkkD,UAAW,OAEhC/oF,EAAA83B,WAAWh2B,UAAUw2E,MAAQ,WACzBz1E,KAAKkmF,UAAY,IAIrB/oF,EAAA83B,WAAWh2B,UAAUi2B,UAAY,SAAS9O,EAAMu+D,EAAKtgF,GAC5CrE,KAAKgiC,WAAWhiC,KAAKgiC,SAAW,IACrC,MAAM3b,EAASD,EAAKtP,QACf9W,KAAKgiC,SAAS9iC,eAAemnB,GAQ9BrmB,KAAKgiC,SAAS3b,IAAWs+D,GAPzB3kF,KAAKgiC,SAAS3b,GAAUs+D,EAExBv+D,EAAKgzD,YAAY,WAAY,KACzBp5E,KAAKmmF,aAAa//D,MAMtB/hB,IACKrE,KAAKkmF,YAAYlmF,KAAKkmF,UAAY,IACvClmF,KAAKkmF,UAAU7/D,GAAUhiB,IAKjClH,EAAA83B,WAAWh2B,UAAUgnF,aAAe,WAChC,IAAK,MAAMG,KAAapmF,KAAKgiC,SAAU,CACnC,MAAM3b,EAAiBlQ,SAASiwE,EAAW,IAC3C,GAAI//D,GAAU,IACVrmB,KAAKgiC,SAAS3b,IAAW,EACK,IAA1BrmB,KAAKgiC,SAAS3b,IAAe,CAC7B,MAAMT,EAAM5lB,KAAKk1E,YACjB,GAAIl1E,KAAKkmF,WAAalmF,KAAKkmF,UAAU7/D,GAAS,CAC1C,MAAMhiB,EAAMrE,KAAKkmF,UAAU7/D,GAC3B2B,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,YAEhC,CACD,MAAMA,EAAM,2BAA6BuhB,EAAIlkB,UAC7CsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,QAErCuhB,EAAI8T,OAAOrT,UACJrmB,KAAKgiC,SAAS3b,MAOrClpB,EAAA83B,WAAWh2B,UAAUonF,WAAa,WAC9B,OAAOtoF,OAAO6qB,KAAK5oB,KAAKgiC,UAAUzgC,OAAS,GAG/CpE,EAAA83B,WAAWh2B,UAAUqnF,UAAY,SAASlgE,GACtC,MAAMC,EAASD,EAAKtP,QACpB,OAAO9W,KAAKgiC,SAAS9iC,eAAemnB,IAKxClpB,EAAA83B,WAAWh2B,UAAUknF,aAAe,SAAS//D,GACzC,MAAMC,EAASD,EAAKtP,QAChB9W,KAAKgiC,SAAS9iC,eAAemnB,WACtBrmB,KAAKgiC,SAAS3b,GAErBrmB,KAAKkmF,WAAalmF,KAAKkmF,UAAUhnF,eAAemnB,WACzCrmB,KAAKkmF,UAAU7/D,IAI9BlpB,EAAA83B,WAAWh2B,UAAUsnF,QAAU,WAC3B,MAAMhgE,EAASvmB,KAAKk1E,YACpBn3E,OAAO6qB,KAAK5oB,KAAKgiC,UAAU33B,QAAQgc,IAC/BE,EAAOmT,OAAOvjB,SAASkQ,EAAQ,QAMvC,MAAa8c,UAAiB3M,EAAMklD,aAAa3xD,EAAA8qD,gBAE7CxsD,cACI6O,MAAM,YACNl3B,KAAKwmF,MAAQ,KACbxmF,KAAKymF,QAAU,KAEfzmF,KAAK0mF,eAAgB,EAGlBr+D,UAAUsuD,GACb32E,KAAKymF,QAAU9P,EAGZtuD,YACH,OAAOroB,KAAKymF,QAGTp+D,QAAQjC,GAEX,GADApmB,KAAKwmF,MAAQpgE,GACRpmB,KAAK0mF,cAAe,CAIrB,MAAMC,EAAS,KACX3mF,KAAKk1E,YAAY50D,IAAItgB,KAAKwmF,OACtBxmF,KAAKwmF,MAAMnxD,WAAar1B,KAAKymF,SAC7BzmF,KAAKwmF,MAAMnxD,UAAUr1B,KAAKymF,SAE9BzmF,KAAKwmF,MAAQxmF,KAAKwmF,MAAM1vE,QACxB9W,KAAK0mF,eAAgB,EACrB1mF,KAAK4mF,gBAAgB,UAEzB5mF,KAAKo5E,YAAY,QAASuN,GAU9B3mF,KAAKo5E,YAAY,WAPC,KAEVp5E,KAAKk1E,YAAYhsE,IAAIlJ,KAAKwmF,QAC1BxmF,KAAKk1E,YAAYx7C,OAAO15B,KAAKwmF,SAOlCn+D,UAAW,OAAOroB,KAAKwmF,MAEvBn+D,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX,MAAMvxD,EAAOuxD,EAAIkP,UAAUlgF,QAC3B3G,KAAKoiC,QAAQhc,GAGViC,QACH,MAAMy+D,EAAU5vD,MAAMvwB,QAEtB,OADAmgF,EAAQxiE,KAAKtkB,MACN8mF,EAGJz+D,gBAAgB0+D,GACnB/mF,KAAK0mF,cAAgBK,EAGlB1+D,kBAAmB,OAAOroB,KAAK0mF,cAE/Br+D,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAInB,GAHIuB,EAAApmB,QAAG2e,cAAcvgB,KAAKymF,WACtB7nE,EAAKyW,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKymF,UAE5CzmF,KAAK0mF,cAKN,OAAO3oF,OAAO4kF,OAAO/jE,EAAM,CAACooE,iBAAiB,EACzC5kD,QAASpiC,KAAKwmF,QANG,CACrB,MAAM5C,EAAW5jF,KAAKwmF,MAAM//D,SAC5B,OAAO1oB,OAAO4kF,OAAO/jE,EAAM,CAACwjB,QAAS,CAACyhD,WAAYD,OAzE9DzmF,EAAAgmC,WAoFApZ,EAAAI,UAAUgZ,SAAWA,EAWRhmC,EAAA8pF,WAAa3S,EAAoB,aAAc,CACxD4S,eAAe,EAAO5wD,MAAO,GAC7B6wD,SAAU,EAAGtoD,OAAQ,EAAGuoD,QAPJ,EAQpBC,gBAAgB,EAChBC,aAAc,OAGlBnqF,EAAA8pF,WAAWhoF,UAAUw2E,MAAQ,SAASn/C,GAClCt2B,KAAKi5E,QAAU,IAAI9E,EAAAoT,UACnBvnF,KAAKs2B,MAAQA,EACbt2B,KAAKmnF,QAAUnnF,KAAK8W,QACpB9W,KAAKsnF,aAAe,GAKpBtnF,KAAKo5E,YAAY,QAHF,KACbp5E,KAAKi5E,QAAQuO,cAAcxnF,KAAKk1E,gBAKtC/3E,EAAA8pF,WAAWhoF,UAAUwoF,UAAY,WAC7B,OAAOznF,KAAKonF,SAzBQ,IAyBGpnF,KAAKonF,QAGhCjqF,EAAA8pF,WAAWhoF,UAAUyoF,UAAY,SAAStoE,GAClCA,GACApf,KAAK2nF,aAAevoE,EACpBpf,KAAKknF,eAAgB,GAGrBlnF,KAAKknF,eAAgB,GAI7B/pF,EAAA8pF,WAAWhoF,UAAUm7B,UAAY,SAASorD,EAAYpmE,GAC7CA,GACD4I,EAAApmB,QAAGK,IAAI,aAAc,qCACQujF,KAEjC,MAAM5nF,EAAOoqB,EAAApmB,QAAGF,QAAQ0d,GACxB,GAAK4I,EAAApmB,QAAGwU,QAAQxY,GAYZoqB,EAAApmB,QAAGK,IAAI,aAAc,yCACY4c,KAAKC,UAAUM,UAb7B,CACnB,MAAMwoE,EAAa,CACf/wE,GAAIuI,EAAOtI,QAASlZ,OAAM4nF,aAC1BqC,YAAa,GAEXC,EAAU1oE,EAAOlhB,IAAI,gBAhDd,IAiDT4pF,EAAQC,kBACRH,EAAWC,WAAaC,EAAQC,iBAEpC/nF,KAAKsnF,aAAa1hF,KAAKgiF,KAQ/BzqF,EAAA8pF,WAAWhoF,UAAUwnB,OAAS,WAC1B,MAAM7H,EAAOg2D,EAAUnuD,OAAOjpB,KAAKwC,MAKnC,OAHIA,KAAK2nF,eACL/oE,EAAK8oE,UAAY1/D,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAK2nF,eAE1C/oE,GAGXzhB,EAAA8pF,WAAWhoF,UAAU+oF,WAAa,WAC9B,OAAOhoF,KAAKi5E,SAIH97E,EAAA8qF,YAAc5T,EAAc,cAAe,CACpDmR,WAAY,GAAIpmE,OAAQ,KAAM8oE,aAAa,EAC3CC,UAAW,EAAGhB,SAAU,EAAGU,YA5EV,IA+ErB1qF,EAAA8qF,YAAYhpF,UAAUmpF,OAAS,WAC3B,MAA2B,SAApBpoF,KAAKwlF,YAGhBroF,EAAA8qF,YAAYhpF,UAAU0J,SAAW,WAC7B,IAAI/K,EAAO,GACX,GAAIoC,KAAKof,OAAO1d,QACZ9D,EAAOoC,KAAKof,OAAO1d,eAElB,GAAI1B,KAAKof,OAAO/I,UAAW,CAC5B,MAAMkP,EAASvlB,KAAKof,OAAO/I,YAI3B,GAHIkP,IACA3nB,EAAO2nB,EAAO7jB,WAEd6jB,EAAOlP,UAAW,CAElBzY,GAAQ,OADU2nB,EAAOlP,YACE3U,WAGnC,SAAU1B,KAAKwlF,cAAc5nF,KAGjCT,EAAA8qF,YAAYhpF,UAAUwnB,OAAS,WAC3B,MAAM7H,EAAOg2D,EAAUnuD,OAAOjpB,KAAKwC,MAQnC,OAPA4e,EAAKypE,cAAgBroF,KAAKwlF,WACtBxlF,KAAKof,OAAOrI,OACZ6H,EAAK4lE,UAAYx8D,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKof,QAG7CR,EAAK4lE,UAAYx8D,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKof,QAE1CR,GAGEzhB,EAAAmrF,kBAAoBjU,EAAc,oBAAqB,CAChEkU,UAAW,EAAGC,SAAU,qCAG5BrrF,EAAAmrF,kBAAkBrpF,UAAUwnB,OAAS,WACjC,MAAM7H,EAAOg2D,EAAUnuD,OAAOjpB,KAAKwC,MAEnC,OADA4e,EAAK6pE,YAAczgE,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKuoF,UACxC3pE,GAIEzhB,EAAAurF,MAAQrU,EAAc,QAAS,CACxCsU,MAAO,KAAMrB,aAAc,KAAMH,SAAU,EAAG7wD,MAAO,KAGzDn5B,EAAAurF,MAAMzpF,UAAUw2E,MAAQ,WACpBz1E,KAAKsnF,aAAe,IAGxBnqF,EAAAurF,MAAMzpF,UAAUm7B,UAAY,SAASwtD,GACjC5nF,KAAKsnF,aAAa1hF,KAAKgiF,IAG3BzqF,EAAAurF,MAAMzpF,UAAU2pF,cAAgB,SAASC,GACrC,OAAO7oF,KAAK8oF,eAAiBD,EAAWC,cAG5C3rF,EAAAurF,MAAMzpF,UAAU8pF,iBAAmB,SAASvD,GACxC,OAAOxlF,KAAKsnF,aAAan9E,OAAO/F,GAC5BA,EAAIohF,aAAeA,IAK3BroF,EAAAurF,MAAMzpF,UAAUkmD,MAAQ,SAASqgC,GAC7B,MAAMhvE,EAAYxW,KAAKsnF,aAAaphE,KAAK9hB,GACrCA,EAAIohF,aAAeA,GAEvB,OAAIhvE,GACG,MAIXrZ,EAAAurF,MAAMzpF,UAAUipF,YAAc,WAC1B,OAAOloF,KAAKsnF,aAAa0B,OAAO,CAACn/E,EAAKzF,IAAQyF,GAAOzF,EAAI8jF,aACrD,IAGR/qF,EAAAurF,MAAMzpF,UAAUgqF,gBAAkB,SAASJ,GACvC,MAAMzpE,EAASypE,EAAWK,YAC1B,IAAK,IAAI7rF,EAAI,EAAGA,EAAI2C,KAAKsnF,aAAa/lF,OAAQlE,IAAK,CAE/C,GADa2C,KAAKsnF,aAAajqF,GACtBwZ,KAAOuI,EAAOtI,QACnB,OAAO,EAGf,OAAO,GAGX3Z,EAAAurF,MAAMzpF,UAAU0J,SAAW,WACvB,IAAIhH,EAAM,GAUV,OATA3B,KAAKsnF,aAAaj9E,QAAQ,CAACjG,EAAK/G,KACxBA,EAAI,IAAIsE,GAAO,MACI,aAAnByC,EAAIohF,WACJ7jF,GAAO,WAAayC,EAAIxG,KAGxB+D,GAAOyC,EAAIohF,WAAa,IAAMphF,EAAIxG,OAGnC+D,GAGExE,EAAAgsF,UAAY9U,EAAc,YAAa,CAChDmU,SAAU,GAAIvjF,KAAM,GACpBmkF,SAAU,IAGDjsF,EAAAksF,YAAchV,EAAc,cAAe,CACpDiV,gBAAiB,IAGRnsF,EAAAosF,eAAiB/U,EAAuB,iBACjD,CAACmU,MAAO,OAGCxrF,EAAAqsF,UAAYhV,EAAuB,YAC5C,CAACp1D,OAAQ,KAAMupE,MAAO,OAGbxrF,EAAAssF,iBAAmBjV,EAAuB,mBACnD,CAACqU,WAAY,KAAM1jF,KAAM,KAAMukF,UAAW,KAG9CvsF,EAAAssF,iBAAiBxqF,UAAU0qF,cAAgB,SAASvqE,GAChD4I,EAAApmB,QAAGwD,WAAWga,EAAQ,eACtBpf,KAAK6oF,WAAazpE,GAMTjiB,EAAAg3C,QAAUkgC,EAAc,UAAW,CAC5CuV,YAAa,UAGJzsF,EAAA0sF,cAAgBrV,EAAuB,gBAAiB,CACjEgP,WAAY,UAIHrmF,EAAA2sF,OAASnV,EAAmB,UAG5Bx3E,EAAA4sF,MAAQpV,EAAmB,SAG3Bx3E,EAAA4+B,WAAau4C,EAAoB,aAAc,CACxD0V,WAAY,EAAGC,eAAe,IAGrB9sF,EAAAy+B,UAAY+4C,EAAmB,aAG/Bx3E,EAAAg4C,KAAOm/B,EAAoB,OAAQ,CAC5C4V,OAAQ,OAGZ/sF,EAAAg4C,KAAKl2C,UAAUkrF,SAAW,SAASvrF,EAAayF,GACvCrE,KAAKkqF,OAAOtrF,KACboB,KAAKkqF,OAAOtrF,GAAO,IAEvBoB,KAAKkqF,OAAOtrF,GAAKgH,KAAKvB,IAG1BlH,EAAAg4C,KAAKl2C,UAAUw2E,MAAQ,WACnBz1E,KAAKkqF,OAAS,gVClsDlB,MAAAliE,EAAAC,EAAAhrB,EAAA,IACAirB,EAAAD,EAAAhrB,EAAA,KACAmtF,EAAAntF,EAAA,IACAotF,EAAAptF,EAAA,IACAqtF,EAAArtF,EAAA,IACAstF,EAAAttF,EAAA,IAEAutF,EAAAvtF,EAAA,IACAwtF,EAAAxtF,EAAA,IACAytF,EAAAztF,EAAA,IACA0tF,EAAA1tF,EAAA,KACAm3E,EAAAn3E,EAAA,GACAq3C,EAAAr3C,EAAA,GACAogB,EAAApgB,EAAA,GAEA2tF,EAAA3tF,EAAA,KACA4tF,EAAA5tF,EAAA,KACA6tF,EAAA7tF,EAAA,KACA8tF,EAAA9tF,EAAA,KACAw5B,EAAArC,EAAAn3B,EAAA,IAGMy/B,EAAgBjG,EAAQiG,cAGxBjU,EAAMpL,EAAAC,OAAOC,SAEbytE,EAAU,SAASllF,EAAK+R,EAAKC,GAC/B,OAAIhS,GAAO+R,GAAO/R,GAAOgS,GA+CvBmzE,EAAgB,SAASzgE,EAAIC,EAAImB,EAAIC,EAAIgB,GAC3C,IAAIw0C,GAAK,EACT,GAAIx0C,EAAKq+D,SACL,GAAIr+D,EAAKq+D,QAAQ5hE,KAAM,CACnB,MAAMC,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOmD,EAAKq+D,QAAQ5hE,KACtC0hE,EAAQxgE,EAAIjB,EAAKE,IAAQuhE,EAAQvgE,EAAIjB,EAAKE,KAC1C23C,GAAK,GAEL2pB,EAAQp/D,EAAIrC,EAAKE,IAAQuhE,EAAQn/D,EAAIrC,EAAKE,KAC1C23C,GAAK,SAIRx0C,EAAKjC,OACVy2C,EAAKx1C,GAAMgB,EAAKjC,MAEpB,OAAOy2C,GAIX,MAAa8pB,EAQF9iE,oBAAoBwE,GACvB,GAAIA,EAAM,CACN,GAAIA,EAAKvE,IAAM,OAAOuE,EAAKvE,IACrBuE,EAAKvE,IAAMG,EAErB,OAAOA,EAKJJ,qBAAqBhT,EAAciC,EAAeuV,GACrD,MAAM8pB,EAAYthC,EAAIuhC,UAAUzsC,OAAOzM,GAAKA,EAAE0tF,cACxC9iE,EAAM6iE,EAAaE,aAAax+D,GAEtC,IAAK,IAAIxvB,EAAI,EAAGA,EAAIs5C,EAAUp1C,OAAQlE,IAAK,CACvC,MAAMiuF,EAAUhjE,EAAI3C,aACd7lB,EAAO62C,EAAUt5C,GACvB,GAAIiuF,GAAWh0E,EAAO,CAClB,MAAMhX,EAAWR,EAAKS,cAAcC,UACpC,IAAI+qF,EAAWJ,EAAaK,YAAY5pF,QACpCupF,EAAaK,YAAYlrF,KACzBirF,EAAWJ,EAAaK,YAAYlrF,IAExCq2C,EAAUt5C,GAAGqxB,YAAY68D,KAO9BljE,oBACHojE,EAAsBC,GAEtB,MAAMz0E,EAAOw0E,EAASlqF,OAChB2V,EAAOu0E,EAAS,GAAGlqF,OACnB8T,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,GAE9B,IAAK,IAAIjB,EAAI,EAAGA,EAAIgB,EAAMhB,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAMhB,IAAK,CAC3B,MAAMymB,EAAO8uD,EAASx1E,GAAGC,GACzB,GAAa,MAATymB,EAAc,CACd,MAAM75B,EAAS,IAAI2zB,EAAQiG,cAAc,KACzC55B,EAAO8oF,OAAO,QAEdv2E,EAAIugC,cAAc3/B,EAAGC,EAAGw1E,EAAY,MACpCr2E,EAAIw2E,UAAU51E,EAAGC,EAAGpT,QAEnB,GAAI4oF,EAAYxsF,eAAey9B,GAAO,CACvC,MAAMr+B,EAAQotF,EAAY/uD,GACL,mBAAVr+B,EACP+W,EAAIugC,cAAc3/B,EAAGC,EAAG5X,GAGxBA,EAAM+W,EAAKY,EAAGC,IAK9B,MAAO,CACHb,OAIDgT,mBAAmByjE,GACtB,OAAQA,GACJ,IAAK,OACL,IAAK,WAAY,OAAOx3C,EAAArE,KAAK8B,UAC7B,IAAK,SACL,IAAK,aAAc,OAAOuC,EAAArE,KAAK6B,YAC/B,IAAK,QACL,IAAK,YAAa,OAAOwC,EAAArE,KAAK+B,WAC9B,IAAK,MACL,IAAK,UAAW,OAAOsC,EAAArE,KAAKgC,SAC5B,IAAK,SACL,IAAK,aAAc,OAAOqC,EAAArE,KAAKiC,YAC/B,QAAS,OAAOoC,EAAArE,KAAK4B,MAItBxpB,oBAAoB0jE,GACvB,OAAQA,GACJ,IAAK,OACL,IAAK,YAAa,OAAOz3C,EAAArE,KAAKwB,WAC9B,IAAK,SACL,IAAK,cAAe,OAAO6C,EAAArE,KAAKuB,aAChC,IAAK,QACL,IAAK,aAAc,OAAO8C,EAAArE,KAAKyB,YAC/B,IAAK,MACL,IAAK,WAAY,OAAO4C,EAAArE,KAAK+7C,UAC7B,IAAK,SACL,IAAK,cAAe,OAAO13C,EAAArE,KAAK2B,aAChC,QAAS,OAAO0C,EAAArE,KAAKsB,OAItBlpB,sBAAsBpR,EAAMC,EAAM2V,GACrC,MAAMoB,EAAOpB,EAAKoB,MAAQqmB,EAAArE,KAAKh7B,MACzBI,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,GAQ9B,OAPe,IAAI0zE,EAAAqB,UAAUh1E,EAAMC,EAAM2V,GAClCluB,OAAO,CAACsX,EAAGC,EAAGpQ,KACjBuP,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKsB,OACjB,IAARzrC,GACAuP,EAAIugC,cAAc3/B,EAAGC,EAAG+X,KAGzB,CAAC5Y,OAILgT,kBAAkB/pB,GACrB,OAAI6sF,EAAa9kC,QAAQ/nD,GACdP,OAAO4kF,OAAO,GAAIwI,EAAa9kC,QAAQ/nD,KAG9C0pB,EAAApmB,QAAG+C,KAAK,eAAgB,iCACArG,KAErB,IAUX+pB,cACIroB,KAAKiX,KAAO+Q,EAAApmB,QAAGwV,eACfpX,KAAKkX,KAAO8Q,EAAApmB,QAAGyV,eACfrX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIQ,MAAMvxD,KAAKiX,KAAMjX,KAAKkX,MACjDlX,KAAKmsF,SAAW,KAChBnsF,KAAKosF,MAAQ,EACbpsF,KAAKqsF,eAAiB/3C,EAAArE,KAAKsB,MAGxBlpB,iBAGH,MADY,CAAChT,IADD,IAAI+0E,EAAAuB,QAAQ3rF,KAAKiX,KAAMjX,KAAKkX,KAAMlX,KAAKqsF,iBAOhDhkE,OAAOwE,EAAgB,IAC1B,MAAMzoB,EAAW,GACjB,GAA4B,mBAAjBpE,KAAKksF,QACZ9nF,EAAIiR,IAAMrV,KAAKksF,cAEd,CACD,MAAMI,EAAWnB,EAAaoB,YAAY1/D,EAAKi/D,UACzCU,EAAYrB,EAAasB,aAAa5/D,EAAKk/D,WAC3C12E,EAAM,IAAI+0E,EAAAuB,QAAQ3rF,KAAKiX,KAAMjX,KAAKkX,KAAMlX,KAAKqsF,gBACnDrsF,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACnBA,IAAQ9F,KAAKosF,MACb/2E,EAAIugC,cAAc3/B,EAAGC,EAAGo2E,GAGxBj3E,EAAIugC,cAAc3/B,EAAGC,EAAGs2E,KAGhCpoF,EAAIiR,IAAMA,EACY,YAAlBrV,KAAKmsF,UAA4C,WAAlBnsF,KAAKmsF,WACpC/nF,EAAIu1D,MAAQ35D,KAAKksF,QAAQr2B,WACzBzxD,EAAIsoF,UAAY1sF,KAAKksF,QAAQp2B,gBAGrC,OAAO1xD,EAKJikB,YAAYpR,EAAMC,EAAM2V,EAAO,IAClC,IAAI8/D,EAAY,CAACr5B,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GAChCC,QAAS,CAAC,EAAG,EAAG,EAAG,GAAIkB,WAAW,GACtCk4B,EAAY5uF,OAAO4kF,OAAOgK,EAAW9/D,GACrC,MAAMxX,EAAM,IAAI6S,EAAAtmB,QAAImvD,IAAIsC,SAASp8C,EAAMC,EAAMy1E,GAC7Ct3E,EAAIgvC,UAAU,IACd,IAAK,IAAIhnD,EAAI,EAAGA,EAAI,EAAGA,IAAMgY,EAAI1W,SAGjC,OAFA0W,EAAI8+C,QAAQ,KAAM,GAClBn0D,KAAKosF,MAAQ,EACN/2E,EAIJgT,eAAepR,EAAMC,GACxB,MAAM7B,EAAM,IAAI6S,EAAAtmB,QAAImvD,IAAIsC,SAASp8C,EAAMC,EACnC,CAACu9C,WAAW,IAChBp/C,EAAIgvC,UAAU,KACd,IAAK,IAAIhnD,EAAI,EAAGA,EAAI,EAAGA,IAAMgY,EAAI1W,SAGjC,OAFA0W,EAAI8+C,QAAQ,KAAM,GAClBn0D,KAAKosF,MAAQ,EACN/2E,EAGJgT,YAAYpR,EAAMC,GAGrB,OAFY,IAAIgR,EAAAtmB,QAAImvD,IAAIgF,OAAO9+C,EAAMC,EACjC,CAAC8+C,UAAW,CAAC,EAAG,IAAKG,cAAe,KAIrC9tC,cAAcpR,EAAMC,EAAM2V,GAC7B,MAAM+/D,EAAY//D,EAAK+/D,WAAa,IAC9BC,EAAYhgE,EAAKggE,WAAa,IAS9BvkE,EAAM6iE,EAAaE,aAAax+D,GAChCigE,EAAS,IAAIxC,EAAAyC,IAAIC,OAAO,CAAC1kE,QAGzB2kE,EAAUh2E,EAAO,EACjBi2E,EAAUh2E,EAAO,EAEjBi2E,EAAgB,IAAI7C,EAAAyC,IAAIK,UAAU,EAAG,EAAGH,EAASC,GAEjDG,EADgBP,EAAOQ,eAAeH,EAb5B,GAcaI,WAG7BF,EAAOhjF,QAAQmjF,IACXA,EAAKv3E,GAXKw3E,EAYVD,EAAKt3E,GAXKw3E,IAcdplE,EAAIoe,QAAQ2mD,GAEZ,MAAMb,EAAYrB,EAAasB,aAAa5/D,EAAKk/D,WAC3C12E,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMs1E,GAC9BmB,EAAa,GAIbC,EAAkB,GAClBC,EAAW,IAAIlD,EAAAmD,eAsDrB,OArDAT,EAAOhjF,QAAQmjF,IACX,MAAMr5D,EAACA,EAACq9B,EAAEA,GAAKg8B,EACf,IAAIO,EAAY55D,EAAI,EAChB65D,EAAYx8B,EAAI,EA8BpB,GA7BIu8B,EAAYnB,IACZmB,EAAY7mF,KAAK4B,MAAMilF,EAAY,IAEnCC,EAAYnB,IACZmB,EAAY9mF,KAAK4B,MAAMklF,EAAY,IAjC7BP,IAmCND,EAAKv3E,GACLu3E,EAAKv3E,GAAK,EACVu3E,EAAKr5D,GAAK,EACV45D,GAAa,GAERP,EAAKv3E,IAAMgB,EAAO,IACvBu2E,EAAKv3E,GAAK,EACVu3E,EAAKr5D,GAAK,EACV45D,GAAa,GA1CPL,IA6CNF,EAAKt3E,GACLs3E,EAAKt3E,GAAK,EACVs3E,EAAKh8B,GAAK,EACVw8B,GAAa,GAERR,EAAKt3E,IAAMgB,EAAO,IACvBs2E,EAAKt3E,GAAK,EACVs3E,EAAKh8B,GAAK,EACVw8B,GAAa,GAIbD,GAAa,GAAKC,GAAa,EAAG,CAC9BD,EAAY,IAAMA,EAAY,GAAM,IACpCA,GAAa,GAEbC,EAAY,IAAMA,EAAY,GAAM,IACpCA,GAAa,GAGjB,MAAMC,EAAiB,CAACh3E,KAAM82E,EAAW72E,KAAM82E,GAC/CC,EAAUC,WAAarhE,EAAKqhE,WAC5B,MAAMC,EAAQN,EAASO,YAAYH,GAC/BE,IACAnuF,KAAKquF,WAAWF,EAAO94E,EAAKm4E,EAAKv3E,EAAGu3E,EAAKt3E,EAAG2W,GAC5C+gE,EAAOhoF,KAAKuoF,SAIhBR,EAAW/nF,KAAK4nF,KAGjB,CAACn4E,MAAKu4E,SAAQU,OAAQX,GAG1BtlE,WAAW8lE,EAAc94E,EAAcY,EAAGC,EAAG2W,GAChD,MAAMzB,EAAQ+iE,EAAM/iE,MACdxC,EAAO7qB,OAAO6qB,KAAKwC,GACnBkhE,EAAWnB,EAAaoB,YAAY1/D,EAAKi/D,UAC/CljE,EAAKve,QAAQkkF,IAEQ,MAAbA,EACAnjE,EAAMmjE,GAAUlkF,QAAQihB,IACpB,MAAMd,EAAKc,EAAG,GAAKrV,EACbwU,EAAKa,EAAG,GAAKpV,EACnBb,EAAIugC,cAAcprB,EAAIC,EAAI6hE,KAGZ,MAAbiC,IAIa,MAAbA,EACLnjE,EAAMmjE,GAAUlkF,QAAQihB,IACpB,MAAMd,EAAKc,EAAG,GAAKrV,EACbwU,EAAKa,EAAG,GAAKpV,EACnBb,EAAIugC,cAAcprB,EAAIC,EAAI6pB,EAAArE,KAAK0B,eAGjB,YAAb48C,GACLnjE,EAAMmjE,GAAUlkF,QAAQihB,IACpB,MAAMd,EAAKc,EAAG,GAAKrV,EACbwU,EAAKa,EAAG,GAAKpV,EACnBb,EAAIugC,cAAcprB,EAAIC,EAAI6pB,EAAArE,KAAKqB,aAI3C68C,EAAMK,YAAYv4E,EAAGC,GAOlBmS,aAAawE,GAChB,MAAMxX,EAAM,IAAI+0E,EAAAuB,QAAQ3rF,KAAKiX,KAAMjX,KAAKkX,KAAMlX,KAAKqsF,gBAEnD,OADArsF,KAAKyuF,eAAep5E,EAAKwX,GAClB,CAACxX,OAGLgT,eAAehT,EAAcwX,GAChC,MAAMvV,EAAQuV,EAAKvV,OACbo3E,SAACA,GAAY7hE,EACbvE,EAAM6iE,EAAaE,aAAax+D,GACtC7sB,KAAKksF,QAAU,IAAItB,EAAAqB,UAAUjsF,KAAKiX,KAAMjX,KAAKkX,KAAM2V,GAC/C6hE,EACA1uF,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACvB,MAAM6oF,EAAarmE,EAAI3C,cAAgBrO,EAC3B,IAARxR,GAAa6oF,EACTt5E,EAAIoZ,QAAQxY,EAAGC,GAAG0Z,UAClBva,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKmB,MAGpB,IAARtrC,GACDuP,EAAIoZ,QAAQxY,EAAGC,GAAG0Z,UAClBva,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKK,SAMzCtwC,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACvB,MAAM6oF,EAAarmE,EAAI3C,cAAgBrO,EAC3B,IAARxR,GAAa6oF,EACbt5E,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKmB,MAEhB,IAARtrC,GACLuP,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKK,SAMtCjoB,YAAYwE,GACf,MAAMxX,EAAM,IAAI+0E,EAAAuB,QAAQ3rF,KAAKiX,KAAMjX,KAAKkX,KAAMlX,KAAKqsF,gBAGnD,OAFArsF,KAAKksF,QAAU,IAAItB,EAAAqB,UAAUjsF,KAAKiX,KAAMjX,KAAKkX,KAAM2V,GACnD7sB,KAAK4uF,cAAcv5E,EAAKwX,GACjB,CAACxX,OAGLgT,cAAchT,EAAcwX,GAC3BA,EAAK6hE,SACL1uF,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KAEX,IAARA,GACIuP,EAAIoZ,QAAQxY,EAAGC,GAAG0Z,UAClBva,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKh7B,SAMzCjV,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACvBuP,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKsB,OACjB,IAARzrC,GACAuP,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKh7B,SAMtCoT,SAAShT,EAAcwX,EAAMvD,GAChC,MAAMrS,EAAOqS,EAAKG,IAAMH,EAAKC,IACvBrS,EAAOoS,EAAKI,IAAMJ,EAAKE,IAC7BxpB,KAAK6uF,OAAO,QAAS53E,EAAMC,GAC3B,MAAM43E,EAAU9uF,KAAK+uF,YAAYliE,GAAMxX,IAEvC2S,EAAApmB,QAAGuiB,UAAU2qE,EAAQ9qE,KAAM,CAAC/N,EAAGC,KAC3B,MAAMid,EAAKld,EAAIqT,EAAKC,IACd6J,EAAKld,EAAIoT,EAAKE,IACpB,GAAI4qD,EAAA7pD,SAASykE,SAAS77D,EAAIC,EAAI9J,IAASjU,EAAIwY,MAAMsF,EAAIC,GAAK,CACtD,MAAM67D,EAAWH,EAAQI,cAAcj5E,EAAGC,GAC1C,GAA2B,UAAvB+4E,EAASzuF,UACT,GAAIqsB,EAAKsiE,UAAW,CAChB,MAAM9/D,EAAWha,EAAI65E,cAAc/7D,EAAIC,GAAI5yB,UACtCqsB,EAAKsiE,UAAUjwF,eAAemwB,IAC/Bha,EAAIugC,cAAcziB,EAAIC,EAAI67D,QAI9B55E,EAAIugC,cAAcziB,EAAIC,EAAI67D,MAOvC5mE,WAAWpR,EAAMC,EAAM2V,GAC1B,MAAMxX,EAAe,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMlX,KAAKqsF,gBAC5CC,EAAWz/D,EAAKy/D,UAAYh4C,EAAArE,KAAK4B,KAOvC,OANA7xC,KAAKksF,QAAU,IAAInB,EAAAqE,QAAQn4E,EAAMC,EAAM2V,GACvC7sB,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACX,IAARA,GACAuP,EAAIugC,cAAc3/B,EAAGC,EAAGo2E,KAGzB,CAACj3E,OAGLgT,eAAepR,EAAMC,EAAM2V,GAC9B,MAAMxX,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMlX,KAAKqsF,gBACpCx/D,IACDA,EAAOs+D,EAAa/iC,WAAW,aAGnC,MAAM9/B,EAAM6iE,EAAaE,aAAax+D,GACtC7sB,KAAKksF,QAAU,IAAIpB,EAAAuE,YAAYrvF,KAAKiX,KAAMjX,KAAKkX,KAAM2V,GACrD7sB,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACvB,GAAIA,EAAM+mB,EAAKyiE,YACXj6E,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKO,gBAE5B,GAAI1qC,EAAM+mB,EAAK0iE,SAChBl6E,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKkB,YAE5B,GAAIrrC,EAAM+mB,EAAK2iE,SAChBn6E,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKI,WAE5B,CACe/nB,EAAI3C,aACNkH,EAAK4iE,UACfp6E,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKY,MAG7Bx7B,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKsB,UAIzC,IAAIm+C,EAAQ,GAIZ,OAHI7iE,EAAK8iE,WAAa,IAClBD,EAAQ1vF,KAAK4vF,mBAAmBv6E,EAAKwX,IAElC,CAACxX,MAAKq6E,SAIVrnE,mBAAmBhT,EAAcwX,GACpC,MAAM6iE,EAAQ,GACRG,EAAShjE,EAAK8iE,YAAc,GAClC,IAAIG,EAAW5oF,KAAK4C,MAAMuL,EAAI6B,KAAO24E,GACjChjE,EAAKijE,WAAWA,EAAWjjE,EAAKijE,UAChCA,EAAW,IACXA,EAAW,GAEf,MAGMC,EAAU,CAHF,EACC16E,EAAI4B,KAAO,EACV/P,KAAK4C,MAAMuL,EAAI4B,KAAO,IAGtC,IAAI+4E,GAAW,EACXC,GAAS,EACTC,GAAS,EAEb,MAAMC,EAAgB,CAClB,CAACl6E,EAAGC,IAAMb,EAAIwY,MAAM5X,EAAGC,IAAMb,EAAIoZ,QAAQxY,EAAGC,GAAG0Z,SAC/C,CAAC3Z,EAAGC,IACAb,EAAIwY,MAAM5X,EAAGC,IACiC,aAA9Cb,EAAIoZ,QAAQxY,EAAGC,GAAG3V,cAAcC,WAIlC8nB,EAAM6iE,EAAaE,aAAax+D,GACtC,IAAK,IAAIxvB,EAAI,EAAG2yF,GAAY3yF,EAAIwyF,EAAQxyF,IAAK,CACzC2yF,GAAW,EAEX,IAAIxlE,EAAKylE,EACLxlE,EAAKylE,EACC,IAAN7yF,IACAmtB,EAAKxE,OAAOC,UAAU4G,EAAKS,QAAUT,EAAKS,OACtChF,EAAI9K,aAAauyE,GACrBtlE,EAAKoC,EAAKU,OAASV,EAAKU,OAAS,GAErC,MAAM3B,EAAKtD,EAAI9K,aAAauyE,GACtBlkE,GAAMxuB,EAAI,GAAKyyF,EAAWrlE,EAIhC,GAAIwgE,EAAczgE,EAAIC,EAAImB,EAAIC,EAAIgB,GAAO,CACrC,MAAMzB,EAAQi/D,EAAAzX,KAAKwd,uBAAuB/6E,EAAKmV,EAAIC,EAAImB,EACnDC,EAAIskE,GACR,GAAI/kE,EAAO,CACP,MAAMilE,EAAc9F,EAAA+F,QAAQC,aAAal7E,EAAK+V,GAC1CilE,EAAY9uF,OAAS,IAAIyuF,GAAW,GACxCN,EAAM9pF,KAAKyqF,GACXJ,EAAQrkE,EACRskE,EAAQrkE,OAGRmkE,GAAW,OAIfA,GAAW,EAKnB,GAAInjE,EAAKjC,MAAQ8kE,EAAMnuF,OAAS,EAAG,CAC/B,MAAMivF,EAAWd,EAAMA,EAAMnuF,OAAS,GACtC,GAAIivF,EAASjvF,OAAS,EAAG,CACrB,MAAMkvF,EAASD,EAASA,EAASjvF,OAAS,IACnCipB,EAAIC,GAAM,CAACgmE,EAAOx6E,EAAGw6E,EAAOv6E,GACnC,IAAI0V,EAAKtD,EAAI9K,aAAauyE,GAC1B,MAAMlkE,EAAKgB,EAAKjC,KAEhB,GADIiC,EAAK0B,OAAO3C,EAAKiB,EAAK0B,MACtB1C,EAAKpB,GACDwgE,EAAczgE,EAAIC,EAAImB,EAAIC,EAAIgB,GAAO,CACrC,MAAMzB,EAAQi/D,EAAAzX,KAAKwd,uBAAuB/6E,EAAKmV,EAAIC,EAC/CmB,EAAIC,EAAIskE,GACZ,GAAI/kE,EAAO,CACP,MAAMilE,EAAc9F,EAAA+F,QAAQC,aAAal7E,EAAK+V,GAC9CskE,EAAM9pF,KAAKyqF,MAO/B,OAAOX,EAIJrnE,aAAapR,EAAMC,EAAM2V,GAC5B,MAAMxX,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMo9B,EAAArE,KAAKW,KAEnCt5B,EAAQuV,EAAKvV,OAAS,GAC5B,IAAK2b,EAAIC,GAAM,CAAChsB,KAAK4C,MAAMmN,EAAO,GAAI/P,KAAK4C,MAAMoN,EAAO,IACxD,MAAMw5E,EAAaz5E,EAAOC,EAEpBy5E,EAAc,CAAC,CAAC19D,EAAIC,IAC1B7d,EAAIugC,cAAc3iB,EAAIC,EAAIohB,EAAArE,KAAKsB,OAC/B,IAAIq/C,EAAc,EAElB,MAAMtoE,EAAM6iE,EAAaE,aAAax+D,GACtC,IAAIgkE,EAAW,IACf,KAAOD,EAAcF,EAAap5E,GAAO,EACpC2b,EAAIC,GAAM5K,EAAI9K,aAAamzE,GAC5B,MAAO98E,EAAIC,GAAMwU,EAAIwoE,aAWrB,GAVA79D,GAAMpf,EACNqf,GAAMpf,EACFuB,EAAIwY,MAAMoF,EAAIC,IAC8B,QAAxC7d,EAAI65E,cAAcj8D,EAAIC,GAAI1yB,YAC1BmwF,EAAY/qF,KAAK,CAACqtB,EAAIC,MACpB09D,EACFv7E,EAAIugC,cAAc3iB,EAAIC,EAAIohB,EAAArE,KAAKsB,UAGrCs/C,GACc,EAAI,MAGxB,MAAO,CAACx7E,OAILgT,WAAWpR,EAAMC,EAAM2V,GAC1B7sB,KAAKksF,QAAU,IAAIrB,EAAAkG,SAAS95E,EAAMC,EAAM2V,GACxC,MAAMxX,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMlX,KAAKqsF,gBACnCC,EAAWz/D,EAAKy/D,UAAYh4C,EAAArE,KAAK8B,UACjCy6C,EAAY3/D,EAAK2/D,WAAal4C,EAAArE,KAAKwB,WASzC,OARAzxC,KAAKksF,QAAQvtF,OAAO,CAACsX,EAAGC,EAAGpQ,KACX,IAARA,EACAuP,EAAIugC,cAAc3/B,EAAGC,EAAGo2E,GAGxBj3E,EAAIugC,cAAc3/B,EAAGC,EAAGs2E,KAGzB,CAACn3E,MAAK27E,OAAQhxF,KAAKksF,SAIvB7jE,eAAepR,EAAMC,EAAM2V,EAAgB,IAC9C,MAAMokE,EAASpkE,EAAKokE,QAAU,GACxBC,EAASrkE,EAAKqkE,QAAU,EACxBn5E,EAAQ,IAAIyyE,EAAA2G,cAAcF,EAAQC,GACxCn5E,EAAM+uB,IAAI2jD,EAAA2G,OAGV,MAAMC,EAAYxkE,EAAKwkE,WAAa,CAAC,EAAG,EAAG,EAAG,GACxCC,EAAYzkE,EAAKykE,WAAa,GACpCv5E,EAAMw5E,aAAaF,GACnBt5E,EAAMy5E,aAAaF,GACnBv5E,EAAMpZ,SAEN,MAAM+sF,EAAc,CAChB+F,IAAKn9C,EAAArE,KAAK+B,WACV0/C,IAAKp9C,EAAArE,KAAKyB,aAERigD,EAAiBxG,EAAayG,aAAa75E,EAAM1C,IAAKq2E,GAE5D,OADAiG,EAAOE,MAAQ95E,EAAM+5E,gBACdH,EAIJtpE,aAAapR,EAAMC,EAAM2V,EAAgB,IAC5C,MAAMwkE,EAAYxkE,EAAKwkE,WAAa,CAAC,EAAG,EAAG,EAAG,GACxCU,EAAY,EAAIV,EAAU,GAAKA,EAAU,GACzCW,EAAY,EAAIX,EAAU,GAAKA,EAAU,GACzCJ,EAASpkE,EAAKokE,QAAU/pF,KAAKC,KAAK8P,EAAO86E,GACzCb,EAASrkE,EAAKqkE,QAAUhqF,KAAKC,KAAK+P,EAAO86E,GAEzCj6E,EAAQ,IAAIyyE,EAAA2G,cAAcF,EAAQC,GACxCn5E,EAAM+uB,IAAI4jD,EAAAuH,QACLplE,EAAKqlE,QAAWrlE,EAAKslE,UAGM,iBAAhBtlE,EAAKqlE,OACjBn6E,EAAMq6E,aAAa1H,EAAAuH,OAAOI,OAAOxlE,EAAKqlE,SAEP,iBAAnBrlE,EAAKslE,UACjBp6E,EAAMq6E,aAAa1H,EAAAuH,OAAOE,UAAUtlE,EAAKslE,YAGzCp6E,EAAMq6E,aAAavlE,EAAKqlE,QATxBn6E,EAAMq6E,aAAa1H,EAAAuH,OAAOI,OAAOC,MAYjB,IAAhBzlE,EAAK0lE,OACPx6E,EAAMy6E,iBAAiB9H,EAAAuH,OAAOQ,mBAEvB5lE,EAAK6lE,eACZ36E,EAAMy6E,iBAAiB3lE,EAAK6lE,eAG1B7lE,EAAK8lE,gBACL56E,EAAM66E,kBAAkB/lE,EAAK8lE,gBAGjC,MAAMrB,EAAYzkE,EAAKykE,WAAa,GAYpC,OAXAv5E,EAAMw5E,aAAaF,GACnBt5E,EAAMy5E,aAAaF,GAEfzkE,EAAKgmE,WACL90F,OAAO6qB,KAAKiE,EAAKgmE,WAAWxoF,QAAQzM,IAChCma,EAAMqhE,YAAYx7E,EAAMivB,EAAKgmE,UAAUj1F,MAI/Cma,EAAMpZ,SACSqB,KAAK8yF,mBAAmB/6E,EAAO8U,GAM3CxE,iBAAiBpR,EAAMC,EAAM2V,EAAgB,IAChD,MAAMokE,EAASpkE,EAAKokE,QAAU/pF,KAAKC,KAAK8P,EAAO,GACzCi6E,EAASrkE,EAAKqkE,QAAUhqF,KAAKC,KAAK+P,EAAO,GAEzCa,EAAQ,IAAIyyE,EAAA2G,cAAcF,EAAQC,GACxCn5E,EAAM+uB,IAAI4jD,EAAAuH,QACVl6E,EAAMq6E,aAAa1H,EAAAuH,OAAOI,OAAOU,WACjCh7E,EAAMi7E,UAAUtI,EAAAuH,OAAOJ,MAAMoB,aAET,IAAhBpmE,EAAK0lE,OACPx6E,EAAMy6E,iBAAiB9H,EAAAuH,OAAOQ,mBAEvB5lE,EAAK6lE,eACZ36E,EAAMy6E,iBAAiB3lE,EAAK6lE,eAG1B7lE,EAAK8lE,gBACL56E,EAAM66E,kBAAkB/lE,EAAK8lE,gBAEjC56E,EAAMpZ,SAEN,MAEM+sF,EAAc,CAChB+F,IAHatG,EAAaoB,YAAY1/D,EAAKi/D,UAI3C4F,IAHcvG,EAAasB,aAAa5/D,EAAKk/D,YAK3CmH,EAAuB/H,EAAayG,aAAa75E,EAAM1C,IAAKq2E,GAElE,OADAwH,EAAarB,MAAQ95E,EAAM+5E,gBACpBoB,EAKJ7qE,mBAAmBtQ,EAAO8U,GAC7B,MA2BM6+D,EAAc,CAChB+F,IAAKtG,EAAaoB,YAAY1/D,EAAKi/D,UACnC4F,IAAKvG,EAAasB,aAAa5/D,EAAKk/D,WACpCoH,IA9BsB,CAAC99E,EAAKY,EAAGC,KAE/B,GADAb,EAAIugC,cAAc3/B,EAAGC,EAAGi1E,EAAasB,aAAa5/D,EAAKk/D,YACnDl/D,EAAKumE,gBAAiB,CACtB,MAAMtwF,EAAS,IAAI45B,EAAc,KACjC55B,EAAO8oF,OAAO,SACdv2E,EAAIoZ,QAAQxY,EAAGC,GAAGwZ,QAAQ1H,EAAApmB,QAAGkL,UAAWhK,KA0B5CuwF,IAtB0B,CAACh+E,EAAKY,EAAGC,KAEnC,GADAb,EAAIugC,cAAc3/B,EAAGC,EAAGi1E,EAAasB,aAAa5/D,EAAKk/D,YACnDl/D,EAAKumE,gBAAiB,CACtB,MAAMtwF,EAAS,IAAI45B,EAAc,KACjC55B,EAAO8oF,OAAO,aACdv2E,EAAIoZ,QAAQxY,EAAGC,GAAGwZ,QAAQ1H,EAAApmB,QAAGkL,UAAWhK,KAkB5CwwF,IAd8B,CAACj+E,EAAKY,EAAGC,KAEvC,GADAb,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAK0B,aACzB9kB,EAAKumE,gBAAiB,CACtB,MAAMtwF,EAAS,IAAI45B,EAAc,KACjC55B,EAAO8oF,OAAO,kBACdv2E,EAAIoZ,QAAQxY,EAAGC,GAAGwZ,QAAQ1H,EAAApmB,QAAGkL,UAAWhK,MAW1C6uF,EAAiBxG,EAAayG,aAAa75E,EAAM1C,IAAKq2E,GAE5D,OADAiG,EAAOE,MAAQ95E,EAAM+5E,gBACdH,EAGJtpE,mBAAmBpR,EAAMC,EAAM2V,EAAgB,IAClD,MACMokE,EAAS/pF,KAAKC,KAAK8P,EADR,GAEXi6E,EAAShqF,KAAKC,KAAK+P,EAFR,GAGXg8E,EAAelzF,KAAKuzF,iBAAiBt8E,EAAMC,EAAM2V,GAEvDA,EAAK2mE,UAAY,QACjB,MAAMC,EANW,GAMCxC,EAAS,GACrByC,EAPW,GAOCxC,EAAS,GACrByC,EAAa3zF,KAAK4zF,cAAcH,EAAUC,EAAU7mE,GAEpDgnE,EAAWX,EAAa79E,IAC9B++D,EAAA7pD,SAAS6D,kBAAkBylE,EAAUF,EAAWt+E,IAX/B,KAejB,MAAMu4E,EAAS+F,EAAW/F,OAC1BA,EAAOvjF,QAAQ8jF,IACXA,EAAM2F,UAjBO,OAoBjB,MAAMxF,EAASqF,EAAWrF,OAQ1B,OAPIA,GACAA,EAAOjkF,QAAQmjF,IACXA,EAAKv3E,GAvBI,EAwBTu3E,EAAKt3E,GAxBI,IA4BV,CACHb,IAAKw+E,EACLjG,SACAU,SACAuD,MAAOqB,EAAarB,OAIrBxpE,aAAapR,EAAMC,EAAM2V,EAAgB,IAC5C,MAAM4iE,EAAY5iE,EAAK4iE,WAAa,EACpCzvF,KAAK6uF,OAAO,QAAS53E,EAAMC,GAC3B,MAAM7B,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,EAAMlX,KAAKqsF,gBAEzC,OADAlB,EAAa4I,cAAc1+E,EAAKo6E,GACzB,CAACp6E,OAILgT,OAAOtmB,EAAMkV,EAAMC,GAKtB,OAJAlX,KAAKiX,KAAOA,EACZjX,KAAKkX,KAAOA,EACZnV,EAAOA,EAAKwT,cACZvV,KAAKmsF,SAAWpqF,EACRA,GACJ,IAAK,SAAU/B,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAI2E,QAAQz+C,EAAMC,GAAO,MAC/D,IAAK,QAASlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIQ,MAAMt6C,EAAMC,GAAO,MAC5D,IAAK,OAAQlX,KAAKksF,QAAU,IAAIrB,EAAAkG,SAAS95E,EAAMC,GAAO,MACtD,IAAK,WAAYlX,KAAKksF,QAAUlsF,KAAKg0F,eAAe/8E,EAAMC,GAAO,MACjE,IAAK,SAAU,MACf,IAAK,QAASlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAI8H,QAAQ5hD,EAAMC,GAAO,MAC9D,IAAK,SAAUlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIgF,OAAO9+C,EAAMC,GAAO,MAC9D,IAAK,UACDlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIU,YAAYx6C,EAAMC,GAAO,MACxD,IAAK,UAAWlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIuK,MAAMrkD,EAAMC,GAAO,MAC9D,IAAK,QAASlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAI2E,QAAQz+C,EAAMC,GAAO,MAC9D,IAAK,QAASlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIgC,UAAU97C,EAAMC,GAAO,MAChE,IAAK,SACL,IAAK,QAASlX,KAAKksF,QAAU,IAAItB,EAAAqB,UAAUh1E,EAAMC,GAAO,MACxD,IAAK,YACDlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIU,YAAYx6C,EAAMC,GAAO,MACxD,IAAK,QAASlX,KAAKksF,QAAU,IAAIrB,EAAAkG,SAAS95E,EAAMC,GAAO,MACvD,IAAK,WAAYlX,KAAKksF,QAAU,IAAIpB,EAAAuE,YAAYp4E,EAAMC,GAAO,MAC7D,IAAK,OAAQlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIsB,SAASp7C,EAAMC,GAAO,MAC9D,IAAK,QAASlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIuK,MAAMrkD,EAAMC,GAAO,MAC5D,IAAK,UAAWlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAI8H,QAAQ5hD,EAAMC,GAAO,MAChE,IAAK,QAASlX,KAAKksF,QAAUlsF,KAAKi0F,YAAYh9E,EAAMC,GAAO,MAC3D,IAAK,QAASlX,KAAKksF,QAAUlsF,KAAKk0F,YAAYj9E,EAAMC,GAAO,MAC3D,IAAK,OAAQlX,KAAKksF,QAAU,IAAIhkE,EAAAtmB,QAAImvD,IAAIQ,MAAMt6C,EAAMC,GAAO,MAC3D,IAAK,eACL,IAAK,SAAU,MACf,IAAK,OAAQlX,KAAKksF,QAAU,IAAInB,EAAAqE,QAAQn4E,EAAMC,GAAO,MACrD,QAAS8Q,EAAApmB,QAAGK,IAAI,SACZ,SAAU,qBAAuBF,EAAO,iBA90BxD5E,EAAAguF,eAo1BAA,EAAa9kC,QAAU,GACvB8kC,EAAa9kC,QAAQ8tC,SAAWp2F,OAAOwT,OAAO,CAC1C6iF,UAAW,EACXC,aAAc,GACd/E,YAAa,IACbC,SAAU,GACVC,UAAW,GACXG,WAAY,EACZF,UAAW,IAGftE,EAAaK,YAAc,CACvB1hF,MAASwqC,EAAArE,KAAKgB,WACdqjD,aAAchgD,EAAArE,KAAKY,KACnB0jD,yBAA0BjgD,EAAArE,KAAKY,KAC/B2/B,KAAQl8B,EAAArE,KAAKc,UACbyjD,mBAAoBlgD,EAAArE,KAAKY,KACzB4jD,KAAQngD,EAAArE,KAAKoB,UACbqjD,oBAAqBpgD,EAAArE,KAAKoB,UAC1BsjD,MAASrgD,EAAArE,KAAKmC,aACdwiD,eAAgBtgD,EAAArE,KAAKmC,aACrByiD,MAASvgD,EAAArE,KAAKM,WACdukD,cAAexgD,EAAArE,KAAKM,WACpBwkD,YAAazgD,EAAArE,KAAKc,UAClBikD,wBAAyB1gD,EAAArE,KAAKc,WAGlCo6C,EAAa8J,YAAc,CACvBX,aAAchgD,EAAArE,KAAKsB,MACnBgjD,yBAA0BjgD,EAAArE,KAAKsB,MAC/Bi/B,KAAQl8B,EAAArE,KAAKgB,WACbujD,mBAAoBlgD,EAAArE,KAAKgB,WACzByjD,oBAAqBpgD,EAAArE,KAAKmB,KAC1BwjD,eAAgBtgD,EAAArE,KAAKh7B,MACrB6/E,cAAexgD,EAAArE,KAAKK,MACpBykD,YAAazgD,EAAArE,KAAKY,KAClBmkD,wBAAyB1gD,EAAArE,KAAKY,yKC19BlC,MAAA3oB,EAAAD,EAAAhrB,EAAA,KAIaE,EAAAy1E,KAAY,GAOzB,MAAMsiB,EAAUn3F,OAAOwT,OAAO,IAgQ9B,SAAS4jF,EAAgB3qE,EAAIC,EAAIpV,EAAK+/E,GAClC,IAAK,IAAIn/E,EAAIuU,EAAK,EAAGvU,GAAKuU,EAAK,EAAGvU,IAC9B,IAAK,IAAIC,EAAIuU,EAAK,EAAGvU,GAAKuU,EAAK,EAAGvU,IAC9B,GAAIb,EAAIwY,MAAM5X,EAAGC,IACTk/E,EAAWn/E,EAAGC,GAAK,OAAO,EAI1C,OAAO,EASX,SAASm/E,EAAsBC,GACvBA,EAAO/zF,OAAS,IAChB+zF,EAAOljE,QACPkjE,EAAO1xC,OA7QfzmD,EAAAy1E,KAAK2iB,gBAAkB,SAAS/qE,EAAIC,EAAImB,EAAIC,EAAImD,EAAK,MAAM,IACvD,MAAMsmE,EAAS,GACTviB,EAAmB/jD,EAKzB,OAJe,IAAI9G,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EAAIknD,GACnC9qB,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAEbo/E,GAGXn4F,EAAAy1E,KAAK4iB,oBAAsB,SAASvrF,EAAOoL,EAAKuW,EAAIC,GAChD,MAAM3hB,EAAYD,EAAMq5B,WAAWmyD,eAC7BnjE,EAAM,GAGZpoB,EAAUG,QAAQvK,IACdwyB,EAAIxyB,EAAK+xB,YAAc/xB,IAG3B,MAAMs1F,EAAa,CAACn/E,EAAGC,MAEfoc,EAAIpzB,eAAe+W,EAAI,IAAMC,KAEzBb,EAAIqgF,WAAWz/E,EAAGC,IAAOD,IAAMuU,GAAMtU,IAAMuU,GACvCxU,IAAM2V,GAAM1V,IAAM2V,IAM3BrB,EAAIC,GAAMxgB,EAAM2R,QACvB,GAAIu5E,EAAgB3qE,EAAIC,EAAIpV,EAAK+/E,GAC7B,OAAOF,EAGX,MAAMI,EAAS,GAOf,OANe,IAAIptE,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EAAIupE,GACnCntC,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAGpBm/E,EAAsBC,GACfA,GAMXn4F,EAAAy1E,KAAK+iB,wBAA0B,SAAStgF,EAAKmV,EAAIC,EAAImB,EAAIC,GACrD,MAAMypE,EAAS,GAMf,OAJe,IAAIptE,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EADb,CAAC5V,EAAGC,IAAMb,EAAIqgF,WAAWz/E,EAAGC,IAE9C+xC,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAEbo/E,GAKXn4F,EAAAy1E,KAAKgjB,oBAAsB,SAASvgF,EAAKmV,EAAIC,EAAImB,EAAIC,GACjD,MAAMypE,EAAS,GACTF,EAAa,CAACn/E,EAAGC,MACfb,EAAIwY,MAAM5X,EAAGC,KAETb,EAAIqgF,WAAWz/E,EAAGC,IAAOD,IAAMuU,GAAMtU,IAAMuU,GACvCxU,IAAM2V,GAAM1V,IAAM2V,GAOlC,OAAIspE,EAAgB3qE,EAAIC,EAAIpV,EAAK+/E,GACtBF,GAGI,IAAIhtE,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EAAIupE,GACnCntC,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAGpBm/E,EAAsBC,GACfA,IAKXn4F,EAAAy1E,KAAKijB,qBAAuB,SAASxgF,EAAKmV,EAAIC,EAAImB,EAAIC,EAAImD,GACtD,MAAMsmE,EAAS,GACTF,EAAa,CAACn/E,EAAGC,MACfb,EAAIwY,MAAM5X,EAAGC,KACT8Y,EACOA,EAAG/Y,EAAGC,IAAOD,IAAMuU,GAAMtU,IAAMuU,EAGtCpV,EAAIqgF,WAAWz/E,EAAGC,IAAOD,IAAMuU,GAAMtU,IAAMuU,GAKvD,OAAI0qE,EAAgB3qE,EAAIC,EAAIpV,EAAK+/E,GACtBF,GAGI,IAAIhtE,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EAAIupE,GACnCntC,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAyJxB,SAAsBo/E,GACdA,EAAO/zF,OAAS,GAChB+zF,EAAOljE,QAxJX0jE,CAAaR,GACNA,IAGXn4F,EAAAy1E,KAAKmjB,iCAAmC,SAAS1gF,EAAKmV,EAAIC,EAAImB,EAAIC,GAC9D,MAAMypE,EAAS,GAWf,OAJe,IAAIptE,EAAAtmB,QAAIgxE,KAAKkB,MAAMloD,EAAIC,EANf,CAAC5V,EAAGC,MACnBb,EAAIwY,MAAM5X,EAAGC,KACNb,EAAIqgF,WAAWz/E,EAAGC,IAAMb,EAAIoZ,QAAQxY,EAAGC,GAAG8/E,YAKlD/tC,QAAQz9B,EAAIC,EAAI,CAACxU,EAAGC,KACvBo/E,EAAO1vF,KAAK,CAACqQ,IAAGC,QAEbo/E,GAKXn4F,EAAAy1E,KAAKqjB,aAAe,SAASzrE,EAAIC,EAAImB,EAAIC,GAErC,OADe1uB,EAAAy1E,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,GAClCtqB,OAAS,GAI3BpE,EAAAy1E,KAAKsjB,cAAgB,EAAC7gF,EAAK+V,KACvB,IAAI+I,EAAI,EAgBR,OAfA/I,EAAM/gB,QAAQ3M,IACV,GAAI2X,EAAIwY,MAAMnwB,EAAEuY,EAAGvY,EAAEwY,GAAI,CAErB,OADab,EAAI65E,cAAcxxF,EAAEuY,EAAGvY,EAAEwY,GACzB1V,WACT,IAAK,QAAS2zB,GAAK,EAAG,MACtB,IAAK,SACL,IAAK,QAASA,GAAK,EAAG,MACtB,IAAK,QACL,IAAK,WAAYA,GAAK,EAAG,MACzB,IAAK,QAASA,GAAK,EAAG,MACtB,IAAK,OAAQA,GAAK,GAAI,MACtB,QAASA,GAAK,MAInBA,IAOXh3B,EAAAy1E,KAAKujB,iBAAmB,SAAS9gF,EAAKmV,EAAIC,EAAImB,EAAIC,EAAIuqE,GAClD,IAAIC,EAAgB,GAEhBA,EADAD,EACgBA,EAAS/gF,EAAKmV,EAAIC,EAAImB,EAAIC,GAG1B1uB,EAAAy1E,KAAK+iB,wBAAwBtgF,EAAKmV,EAAIC,EAAImB,EAAIC,GAGlE,MAAMyqE,EAAgBn5F,EAAAy1E,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,GACjD0qE,EAAiBp5F,EAAAy1E,KAAKsjB,cAAc7gF,EAAKghF,GACzCG,EAAiBr5F,EAAAy1E,KAAKsjB,cAAc7gF,EAAKihF,GAE/C,IAAIlrE,EAAQ,KAQZ,OANIA,EADyB,IAAzBirE,EAAc90F,OACN+0F,EAGAC,GAAkBC,EAAiBF,EACrCD,GAOdl5F,EAAAy1E,KAAKwd,uBAAyB,SAAS/6E,EAAKmV,EAAIC,EAAImB,EAAIC,EAAIskE,GACxD,MAAMmG,EAAgBn5F,EAAAy1E,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,GACjD6jE,EAAQ,GACdS,EAAc9lF,QAAQ+qF,IAClB,MAAM3b,EAAOt8E,EAAAy1E,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,EAAIupE,GAC9C3b,EAAKl4E,OAAS,GACdmuF,EAAM9pF,KAAK6zE,KAGnBiW,EAAM9pF,KAAK0wF,GAEX,IAAIG,EAAU,KACVC,GAAa,EAQjB,OAPAhH,EAAMrlF,QAAQovE,IACV,MAAMkd,EAAax5F,EAAAy1E,KAAKsjB,cAAc7gF,EAAKokE,KACxB,IAAfid,GAAoBC,EAAaD,KACjCA,EAAYC,EACZF,EAAUhd,KAGXgd,GAOXt5F,EAAAy1E,KAAKgkB,uBAAyB,SAASvhF,EAAKmV,EAAIC,EAAImB,EAAIC,EAAIgrE,EAAMT,GAC9D,MAAMviF,EAAK+X,EAAKpB,EACV1W,EAAK+X,EAAKpB,EACVqsE,EAAO35F,EAAAy1E,KAAKmkB,WAAWljF,EAAIgjF,GAC3BG,EAAO75F,EAAAy1E,KAAKmkB,WAAWjjF,EAAI+iF,GACjC,IAAII,EAAY,IAEX3pE,EAAQC,GAAU,CAAC/C,EAAIC,GAC5B,IAAK,IAAIptB,EAAI,EAAGA,EAAIw5F,EAAMx5F,IAAK,CAC3B,MAAOkxB,EAAMC,GAAQ,CAAClB,EAASwpE,EAAKz5F,GAAIkwB,EAASypE,EAAK35F,IAChD65F,EAAc/5F,EAAAy1E,KAAKujB,iBAAiB9gF,EAAKiY,EAAQC,EACnDgB,EAAMC,EAAM4nE,IACf9oE,EAAQC,GAAU,CAACgB,EAAMC,GAC1ByoE,EAAYA,EAAU5lF,OAAO6lF,GAEjC,OAAOD,GAMX95F,EAAAy1E,KAAKmkB,WAAa,SAAS39E,EAAMy9E,GAC7B,IAAIM,EAAS/9E,EACb,MAAM3Q,EAAS,GACT2uF,EAAUlwF,KAAK4C,MAAMsP,EAAOy9E,GAClC,IAAK,IAAIx5F,EAAI,EAAGA,EAAIw5F,EAAO,EAAGx5F,IAC1BoL,EAAO7C,KAAKwxF,GACZD,GAAUC,EAGd,OADA3uF,EAAO7C,KAAKuxF,GACL1uF,sKCtQX,MAAAuf,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GAWA,MAAa6kC,EA0ETzZ,YAAYq/C,EAAK2vB,EAAM/yC,GACnBtkD,KAAKs3F,KAAOnhF,SAASuxD,EAAK,IAC1B1nE,KAAKu3F,MAAQphF,SAASkhF,EAAM,IAC5Br3F,KAAKw3F,KAAOrhF,SAASmuC,EAAK,IAtEvBj8B,cAAcovE,GACjB,MAAMC,EAAuB51D,EAAK61D,aAAaF,GAC/C,GAA0B,IAAtBC,EAAWn2F,OACX,OAAO,IAAIugC,EAAK41D,EAAW,GAAIA,EAAW,GAAIA,EAAW,IAGzD1vE,EAAApmB,QAAGK,IAAI,OAAQ,SAAU,kCAK1BomB,gBAAgBuvE,GACnB,GAA6B,iBAAlBA,EAON,IAA6B,iBAAlBA,EAA4B,CACxC,MAAMrhF,EAAgBurB,EAAK61D,aAAcC,GACzC,OAAO,IAAI91D,EAAKvrB,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAIkhE,OAGxC,OAAQmgB,EAAuBngB,OAX/B,GAAIzxD,OAAOC,UAAW2xE,GAClB,OAAOA,EAiBZvvE,oBAAoBovE,GACvB,GAA0B,iBAAfA,GACP,GAAIA,EAAWl2F,QAAU,EACrB,MAAO,CAACk2F,EAAW,GAAIA,EAAW,GAAIA,EAAW,QAGpD,CACD,MAAMhoE,EAAQqS,EAAK+1D,OAAOC,KAAKL,GAC/B,GAAc,OAAVhoE,EAAgB,CAGhB,IAAI60B,EAAM,KAQV,MAAO,CAVK70B,EAAM,GACJA,EAAM,GAOhB60B,EALCt8B,EAAApmB,QAAG6D,cAAc,CAACgqB,EAAM,GAAIA,EAAM,KAK7B,IAJW,MAAbA,EAAM,GAAmBA,EAAM,GACvB,IAAMA,EAAM,IAO3B,GAAIqS,EAAKi2D,WAAWlhE,KAAK4gE,GAC1B,MAAO,CAAC,EAAG,EAAGthF,SAASshF,EAAY,KAGnCzvE,EAAApmB,QAAGK,IAAI,KAAM,eAAgB,iBAAmBw1F,GAGxD,MAAO,GAcJpvE,SAAkB,OAAOroB,KAAKs3F,KAC9BjvE,OAAOq/C,GAAoB1nE,KAAKs3F,KAAO5vB,EACvCr/C,UAAW,OAAOroB,KAAKu3F,MACvBlvE,QAAQgvE,GAAOr3F,KAAKu3F,MAAQF,EAC5BhvE,SAAU,OAAOroB,KAAKw3F,KACtBnvE,OAAOi8B,GAAMtkD,KAAKw3F,KAAOlzC,EAEzBj8B,OACH,IAAI1mB,EAAM,EACV,IAAK,IAAItE,EAAI,EAAGA,EAAI2C,KAAKs3F,KAAMj6F,IAC3BsE,GAAOmgC,EAAKrZ,IAAIM,cAAc,EAAG/oB,KAAKu3F,OAE1C,OAAO51F,EAAM3B,KAAKw3F,KAGfnvE,WACH,IAAI2vE,EAAS,KAAOh4F,KAAKw3F,KAGzB,OAFIx3F,KAAKw3F,KAAO,EAAIQ,EAAS,KAAOh4F,KAAKw3F,KAClB,IAAdx3F,KAAKw3F,OAAaQ,EAAS,IAC7Bh4F,KAAKs3F,KAAO,IAAMt3F,KAAKu3F,MAAQ,IAAMS,EAGzC3vE,KAAKsvD,GACR33E,KAAKs3F,KAAO3f,EAAIsgB,SAChBj4F,KAAKu3F,MAAQ5f,EAAIt5D,UACjBre,KAAKw3F,KAAO7f,EAAIp5D,SAGb8J,QACH,OAAO,IAAIyZ,EAAK9hC,KAAKs3F,KAAMt3F,KAAKu3F,MAAOv3F,KAAKw3F,MAIzCnvE,OAAOsvD,GACV,IAAIh2E,EAAM3B,KAAKs3F,OAAS3f,EAAIsgB,SAG5B,OADAt2F,GADAA,EAAMA,GAAQ3B,KAAKu3F,QAAU5f,EAAIt5D,YACnBre,KAAKw3F,OAAS7f,EAAIp5D,SAI7B8J,SACH,MAAO,CAACroB,KAAKs3F,KAAMt3F,KAAKu3F,MAAOv3F,KAAKw3F,OAtH1B11D,EAAA+1D,OAAS,oCACT/1D,EAAAi2D,WAAa,kBAJ/B56F,EAAA2kC,OA4HAA,EAAKrZ,IAAM,IAAIpL,EAAAC,QAAO,IAAI45C,MAAO9H,uVCxIjC,MAAApnC,EAAAC,EAAAhrB,EAAA,IACAi7F,EAAAj7F,EAAA,IACAk7F,EAAAl7F,EAAA,IACAogC,EAAApgC,EAAA,GACAm7F,EAAAhkE,EAAAn3B,EAAA,KACAo7F,EAAAp7F,EAAA,IAEA,MAAaq7F,EAIFjwE,mBACHtmB,EAAckV,EAAcC,EAAc2V,GAG1C,OADkB,IAAIyrE,GACLC,YAAYx2F,EAAMkV,EAAMC,EAAM2V,GAGnDxE,cACIroB,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,gBAIlCpwE,YAAYmrE,EAAWv8E,EAAMC,EAAM2V,GAC/B,MAAM6rE,EAAS,IAAIR,EAAA/M,aACnB,IAAIwG,EAAS,KACb,MAAM55E,EAAQ,IAAIogF,EAAAzjD,MAmDlB,GAlDAgkD,EAAO7J,OAAO2E,EAAWv8E,EAAMC,GAEb,UAAds8E,EACA7B,EAAS+G,EAAOC,iBAEG,SAAdnF,GACL7B,EAAS+G,EAAO9E,cAAc38E,EAAMC,EAAM2V,GAC1C9U,EAAM6gF,OAAOjH,EAAOt8E,KACpBrV,KAAK64F,oBAAoB9gF,EAAO45E,GAChC3xF,KAAK84F,YAAY/gF,EAAO45E,EAAQ9kE,GAChC7sB,KAAK+4F,eAAehhF,EAAO8U,IAER,iBAAd2mE,GACL7B,EAAS+G,EAAOM,mBAAmB/hF,EAAMC,EAAM2V,GAC/C9U,EAAM6gF,OAAOjH,EAAOt8E,KACpBrV,KAAK64F,oBAAoB9gF,EAAO45E,GAChC3xF,KAAK84F,YAAY/gF,EAAO45E,EAAQ9kE,GAChC7sB,KAAK+4F,eAAehhF,EAAO8U,IAG3B8kE,EADmB,WAAd6B,EACIkF,EAAOO,aAAapsE,GAEV,UAAd2mE,EACIkF,EAAO3J,YAAYliE,GAET,aAAd2mE,EACIkF,EAAOQ,eAAejiF,EAAMC,EAAM2V,GAExB,WAAd2mE,EACIkF,EAAOS,aAAaliF,EAAMC,EAAM2V,GAEtB,UAAd2mE,EACIkF,EAAOU,eAAeniF,EAAMC,EAAM2V,GAExB,SAAd2mE,EACIkF,EAAOW,WAAWpiF,EAAMC,EAAM2V,GAEpB,WAAd2mE,EACIkF,EAAOY,aAAariF,EAAMC,EAAM2V,GAEtB,SAAd2mE,EACIkF,EAAOa,WAAWtiF,EAAMC,EAAM2V,GAEpB,WAAd2mE,EACIkF,EAAOc,aAAaviF,EAAMC,EAAM2V,GAGhC6rE,EAAOl1E,SAGhBmuE,EACA55E,EAAM6gF,OAAOjH,EAAOt8E,SAEnB,CACD,MAAMhR,EAAMwa,KAAKC,UAAU+N,GAC3B7E,EAAApmB,QAAGK,IAAI,cAAe,uCACOuxF,MAAcnvF,KAG/C,OADArE,KAAKy5F,eAAe1hF,EAAO45E,GACpB55E,EAGXsQ,eAAetQ,EAAO45E,GAClB,MAAMr6C,EAAS,GACQ,CAAC,QAAS,YAAa,SAAU,SACpD,SACWjtC,QAAQqvF,IACf/H,EAAOzyF,eAAew6F,KACtBpiD,EAAOoiD,GAAS/H,EAAO+H,MAG/B3hF,EAAM4hF,UAAUriD,GAGpBjvB,oBAAoBtQ,EAAO45E,GACvB,IAAKA,EAAOzyF,eAAe,UAAY,OACvC,MAAM0uF,EAAS+D,EAAO/D,OACtB,IAAK,IAAIvwF,EAAI,EAAGA,EAAIuwF,EAAOrsF,OAAQlE,IAAK,CACpC,MAAMglF,EAASuL,EAAOvwF,GAAGqG,KACnBA,EAAO,IAAI25B,EAAAjE,aAAY,GAC7BrhB,EAAMoW,WAAWzqB,EAAM2+E,EAAO,GAAIA,EAAO,KAOjDh6D,YAAYtQ,EAAO45E,EAAQ9kE,GACvB7sB,KAAKw4F,OAAOoB,WAAW,cAAe/sE,EAAM,CAAC,WAC7C,MAAMgtE,EAAY,IAAIxB,EAAAyB,gBACtB/hF,EAAMgiF,UAAU,SAAUpI,EAAO/D,QACjCiM,EAAUf,YAAY/gF,EAAO8U,GAIjCxE,eAAetQ,EAAO8U,IACA,IAAIwrE,EAAAyB,iBACZf,eAAehhF,EAAO8U,IArHxC1vB,EAAAm7F,kLCPA,MAAAtwE,EAAAC,EAAAhrB,EAAA,IACAA,EAAA,IAEaE,EAAAgtB,UAAiB,GAC9BhtB,EAAAgtB,UAAU6vE,iBAAmB,GAKhB78F,EAAA88F,iBAAmB,KAAW,MAC3C98F,EAAAgtB,UAAU8vE,iBAAmB98F,EAAA88F,iBAG7B,MAAMC,EAAa,IAAIC,IAAY,CACjC,gBA0BF,SAASC,EAAiBC,EAAeC,GACrCJ,EAAW7vF,QAASkwF,IACZD,EAAWp7F,eAAeq7F,KAC1BF,EAASE,GAAQD,EAAWC,MAKxC,SAASC,EAAez4F,EAAcs4F,GAC7Bl9F,EAAAgtB,UAAUjrB,eAAe6C,GAI1BimB,EAAApmB,QAAGK,IAAI,YAAa,sBACRF,qBAJZ5E,EAAAgtB,UAAUpoB,GAAQs4F,EA+J1B,SAASI,EAAsB14F,GACvB5E,EAAAgtB,UAAU6vE,iBAAiBj4F,IAC3BimB,EAAApmB,QAAGK,IAAI,YAAa,uCACGF,KAwD/B,SAAgB24F,EAAWC,GACvB,OAAOx9F,EAAAgtB,UAAUwwE,QAAUA,EAvPlBx9F,EAAAu3E,aAAe,SAAS3yE,EAAcu4F,EAAkB,IACjEG,EAAsB14F,GACtB,MAAMs4F,EAAW,WACbl9F,EAAA03E,cAAcr3E,KAAKwC,KAAM+B,GACzBhE,OAAO6qB,KAAK0xE,GAAYjwF,QAAQzL,IACvBs7F,EAAWhxF,IAAItK,KAChBoB,KAAKpB,GAAO07F,EAAW17F,OAQnC,OAJAopB,EAAApmB,QAAG0D,QAAQ+0F,EAAUl9F,EAAA03E,eACrB13E,EAAAgtB,UAAU6vE,iBAAiBj4F,GAAQs4F,EACnCD,EAAiBC,EAAUC,GAC3BE,EAAez4F,EAAMs4F,GACdA,GAEXl9F,EAAAgtB,UAAUuqD,aAAev3E,EAAAu3E,aAsCZv3E,EAAAk3E,cAAgB,EAACtyE,EAAc64F,EAAcN,EAAkB,MAExE,GADAG,EAAsB14F,GACF,iBAATA,EAAmB,CAC1B,MAAM6c,EAAOC,KAAKC,UAAU/c,GAC5BimB,EAAApmB,QAAGK,IAAI,oBAAqB,+BACxB,mCAAqC2c,EAAO,MAE7B,iBAAZg8E,GAAwBrnF,MAAMC,QAAQonF,KAC7C5yE,EAAApmB,QAAGK,IAAI,sCAAuCF,IAC1C,6CAIR,MAAMs4F,EAAW,YAAYQ,GACzB19F,EAAA03E,cAAcr3E,KAAKwC,KAAM+B,GACzBhE,OAAO6qB,KAAK0xE,GAAYjwF,QAAQzL,IAC5BoB,KAAKpB,GAAO07F,EAAW17F,KAK3Bb,OAAO6qB,KAAKgyE,GAASvwF,QAAQzL,IACrBi8F,GAAYA,EAAS,IAAMA,EAAS,GAAG37F,eAAeN,GACtDoB,KAAKpB,GAAOi8F,EAAS,GAAGj8F,GAEK,iBAAjBg8F,EAAQh8F,GAGpBoB,KAAKpB,GAAOigB,KAAKstB,MAAMttB,KAAKC,UAAU87E,EAAQh8F,KAG9CoB,KAAKpB,GAAOg8F,EAAQh8F,KAKxBoB,KAAKy1E,OAA+B,mBAAfz1E,KAAKy1E,OAC1Bz1E,KAAKy1E,SAASolB,IA2CtB,OAxCA7yE,EAAApmB,QAAG0D,QAAQ+0F,EAAUl9F,EAAA03E,eAGrB92E,OAAO6qB,KAAKgyE,GAASvwF,QAASywF,IAEtB39F,EAAA03E,cAAc51E,UAAUC,eAAe47F,IACvC9yE,EAAApmB,QAAGK,IAAI,iCAAkCF,OAClC+4F,yBAIX,MAAMh4D,EAoCd,SAA0Bg4D,GACtB,MAAO,MAAQA,EAASh+D,aArCGi+D,CAAiBD,GACpC39F,EAAA03E,cAAc51E,UAAUC,eAAe4jC,IACvC9a,EAAApmB,QAAGK,IAAI,iCAAkCF,OAClC+gC,yBAEXu3D,EAASp7F,UAAU6jC,GAAU,SAASxkC,GAClC0B,KAAK86F,GAAYx8F,GAIrB,MAAMT,EAuBd,SAA0Bi9F,GACtB,MAAO,MAAQA,EAASh+D,aAxBGk+D,CAAiBF,GACpC39F,EAAA03E,cAAc51E,UAAUC,eAAe4jC,IACvC9a,EAAApmB,QAAGK,IAAI,iCAAkCF,OAClClE,yBAEXw8F,EAASp7F,UAAUpB,GAAU,WACzB,OAAOmC,KAAK86F,MAKhBR,EAAWW,UACXZ,EAASp7F,UAAUg8F,QAAUl9F,OAAOwT,OAAO+oF,EAAWW,UAG1DZ,EAASp7F,UAAU27F,QAAU78F,OAAOwT,OAAOqpF,GAC3CR,EAAiBC,EAAUC,GAC3Bn9F,EAAAgtB,UAAU6vE,iBAAiBj4F,GAAQs4F,EACnCG,EAAez4F,EAAMs4F,GACdA,IAEXl9F,EAAAgtB,UAAUkqD,cAAgBl3E,EAAAk3E,cAWbl3E,EAAAw3E,mBAAqB,EAAC5yE,EAAcu4F,EAAkB,KACxDn9F,EAAAu3E,aAAa3yE,EAAMhE,OAAO4kF,OAAO,CAAClB,WAAW,GAAO6Y,KAE/Dn9F,EAAAgtB,UAAUwqD,mBAAqBx3E,EAAAw3E,mBAIlBx3E,EAAAm3E,oBAAsB,EAACvyE,EAAc64F,EAAcN,EAAkB,KACvEn9F,EAAAk3E,cAActyE,EAAM64F,EACvB78F,OAAO4kF,OAAO,CAAClB,WAAW,GAAO6Y,KAEzCn9F,EAAAgtB,UAAUmqD,oBAAsBn3E,EAAAm3E,oBAInBn3E,EAAAs3E,sBAAwB,EAAC1yE,EAAcu4F,EAAkB,KAC3Dn9F,EAAAu3E,aAAa3yE,EAChBhE,OAAO4kF,OAAO,CAACl8D,OAAQtpB,EAAA88F,kBAAmBK,KAElDn9F,EAAAgtB,UAAUsqD,sBAAwBt3E,EAAAs3E,sBAGrBt3E,EAAAq3E,uBAAyB,EAACzyE,EAAc64F,EAAcN,EAAkB,KAC1En9F,EAAAk3E,cAActyE,EAAM64F,EACvB78F,OAAO4kF,OAAO,CAACl8D,OAAQtpB,EAAA88F,kBAAmBK,KAElDn9F,EAAAgtB,UAAUqqD,uBAAyBr3E,EAAAq3E,uBAEtBr3E,EAAAo3E,6BAA+B,EAACxyE,EAAc64F,EAAcN,EAAa,KAC3En9F,EAAAk3E,cAActyE,EAAM64F,EACvB78F,OAAO4kF,OAAO,CACVlB,WAAW,EACXh7D,OAAQtpB,EAAA88F,kBACTK,KAGXn9F,EAAAgtB,UAAUoqD,6BAA+Bp3E,EAAAo3E,6BA4C5Bp3E,EAAAs6B,YAAc,CAAC7R,IACxB,MAAM4R,EAAa,GACb0jE,EAAYt1E,EAAIY,gBAOtB,OANAzoB,OAAO6qB,KAAKsyE,GAAW7wF,QAAQwM,IAC3B,MAAMskF,EAAWD,EAAUrkF,GAAI4P,SAC3B00E,IACA3jE,EAAW3gB,GAAMskF,KAGlB3jE,IAEXr6B,EAAAgtB,UAAUsN,YAAct6B,EAAAs6B,YAExBt6B,EAAAgtB,UAAUwwE,QAAU,EAEpBx9F,EAAAi+F,WAAA,WACI,OAAOj+F,EAAAgtB,UAAUwwE,SAGrBx9F,EAAAu9F,aAGAv9F,EAAAgtB,UAAUuwE,WAAaA,EAIVv9F,EAAA03E,cAAgB,SAAS9yE,GAClC/B,KAAKq7F,MAAQt5F,EACb/B,KAAKs7F,QAAU,KACft7F,KAAKu7F,IAAMp+F,EAAAgtB,UAAUwwE,UACrB36F,KAAKyhF,WAAY,EAEjBzhF,KAAKw7F,gBAAkB,GACvBx7F,KAAKy7F,mBAAqB,IAE9Bt+F,EAAAgtB,UAAU0qD,cAAgB13E,EAAA03E,cAE1B13E,EAAA03E,cAAc51E,UAAU6X,MAAQ,WAAoB,OAAO9W,KAAKu7F,KAChEp+F,EAAA03E,cAAc51E,UAAUyhE,MAAQ,SAAS7pD,GAAmB7W,KAAKu7F,IAAM1kF,GAEvE1Z,EAAA03E,cAAc51E,UAAUi2E,UAAY,WAAY,OAAOl1E,KAAKs7F,SAC5Dn+F,EAAA03E,cAAc51E,UAAUy8F,UAAY,SAASn1E,GACpB,OAAjBvmB,KAAKs7F,SAA+B,OAAX/0E,EACzBvmB,KAAKs7F,QAAU/0E,EAEC,OAAXA,EACLvmB,KAAKs7F,QAAU,KAGftzE,EAAApmB,QAAGK,IAAI,OAAQ,YAAa,wBAMpC9E,EAAA03E,cAAc51E,UAAU08F,aAAe,SAASC,GAGvC5zE,EAAApmB,QAAG6D,cAAc,CAACzF,KAAKs7F,UAKxBtzE,EAAApmB,QAAGK,IAAI,OAAQ,eACX,6DALJjC,KAAKs7F,QAAQ5hE,OAAO15B,KAAK8W,SACzB8kF,EAAUt7E,IAAItgB,QAQtB7C,EAAA03E,cAAc51E,UAAU48F,SAAW,WAAY,OAAO77F,KAAKyhF,WAE3DtkF,EAAA03E,cAAc51E,UAAUuB,QAAU,WAAY,OAAOR,KAAKq7F,OAC1Dl+F,EAAA03E,cAAc51E,UAAU46B,QAAU,SAAS93B,GAAO/B,KAAKq7F,MAAQt5F,GAG/D5E,EAAA03E,cAAc51E,UAAU68F,kBAAoB,SAASv1E,GACjDvmB,KAAK07F,UAAUn1E,GACf,IAAK,IAAIlpB,EAAI,EAAGA,EAAI2C,KAAKw7F,gBAAgBj6F,OAAQlE,IAC7C2C,KAAKw7F,gBAAgBn+F,MAK7BF,EAAA03E,cAAc51E,UAAU88F,qBAAuB,WAC3C,IAAK,IAAI1+F,EAAI,EAAGA,EAAI2C,KAAKy7F,mBAAmBl6F,OAAQlE,IAChD2C,KAAKy7F,mBAAmBp+F,KAE5B2C,KAAK07F,UAAU,OAGnBv+F,EAAA03E,cAAc51E,UAAUm6E,YAAc,SAASx7E,EAAMoxB,GACpC,UAATpxB,EAAmBoC,KAAKw7F,gBAAgB51F,KAAKopB,GAC/B,aAATpxB,EAAsBoC,KAAKy7F,mBAAmB71F,KAAKopB,GAExDhH,EAAApmB,QAAGK,IAAI,OACH,cAAe,WAAarE,EAAO,4BAK/CT,EAAA03E,cAAc51E,UAAU2nF,gBAAkB,SAAShpF,GAClC,UAATA,EACAoC,KAAKw7F,gBAAkB,GAET,aAAT59F,EACLoC,KAAKy7F,mBAAqB,IAG1Bz7F,KAAKw7F,gBAAkB,GACvBx7F,KAAKy7F,mBAAqB,KAMlCt+F,EAAA03E,cAAc51E,UAAU0H,MAAQ,WAC5B,MAAMq1F,EAAWh8F,KAAKQ,UACtB,GAAIrD,EAAAgtB,UAAUjrB,eAAe88F,GAAW,CACpC,MAAM51E,EAAO,IAAIjpB,EAAAgtB,UAAU6xE,GAE3B,OADA51E,EAAK9B,KAAKtkB,MACHomB,EAMX,OAHI4B,EAAApmB,QAAGK,IAAI,OAAQ,oBACC+5F,oBAEb,MAKX7+F,EAAA03E,cAAc51E,UAAUqlB,KAAO,SAASqzD,GACpC,IAAK,MAAMx4E,KAAKa,KACZ,GAAI,OAAO62B,KAAK13B,GAAI,CAChB,MAAMtB,EAASsB,EACf,GAAe,cAAXtB,GAAqC,UAAXA,EAAoB,CAC9C,MAAMilC,EAASjlC,EAAO8wC,QAAQ,MAAO,OACrC,GAA2B,mBAAhBgpC,EAAI95E,IACiB,mBAAjBmC,KAAK8iC,GAAwB,CACpC,MAAMm5D,EAAUtkB,EAAI95E,KACpBmC,KAAK8iC,GAAQm5D,OAQrC9+F,EAAA03E,cAAc51E,UAAUkH,OAAS,SAASwxE,GACtC,OAAO33E,KAAKQ,YAAcm3E,EAAIn3E,WAGlCrD,EAAA03E,cAAc51E,UAAU0J,SAAW,WAC/B,MAAO,cAAgB3I,KAAKQ,WAMhCrD,EAAA03E,cAAc51E,UAAUwnB,OAAS,WAC7B,MAAMriB,EAAM,GACZ,IAAK,MAAMjF,KAAKa,KACZ,GAAI,OAAO62B,KAAK13B,GAAI,CAChB,MAAMtB,EAASsB,EACf,GAAe,cAAXtB,GAC4B,mBAAjBmC,KAAKnC,GAAwB,CACpC,MAAMilC,EAASjlC,EAAO8wC,QAAQ,MAAO,OACT,mBAAjB3uC,KAAK8iC,KAGZ1+B,EAAI0+B,GAAU9iC,KAAKnC,OAMvC,OAAOuG,GAEXjH,EAAAgtB,UAAUuN,KAAOv6B,EAAA03E,cAOJ13E,EAAAwB,OAAS,SAAS6mC,KAAqBrgC,GAChD,OAAIhI,EAAAgtB,UAAUqb,GACH,IAAIroC,EAAAgtB,UAAUqb,MAAargC,IAEtC6iB,EAAApmB,QAAGK,IAAI,YAAa,uBACFujC,sBACX,OAEXroC,EAAAgtB,UAAUxrB,OAASxB,EAAAwB,OAENxB,EAAA++F,gBAAkB,SAASt+F,EAAcuH,GAClD,IAAKhI,EAAAgtB,UAAUjrB,eAAetB,GAAO,CAEjC,OADiBT,EAAAk3E,cAAcz2E,EAAMuH,GAKzC,OAFA6iB,EAAApmB,QAAGK,IAAI,YAAa,+BACHrE,qBACV,MAEXT,EAAAgtB,UAAU+xE,gBAAkB/+F,EAAA++F,gBAEf/+F,EAAAg/F,kBAAoB,SAASp6F,UAC/B5E,EAAAgtB,UAAU6vE,iBAAiBj4F,UAC3B5E,EAAAgtB,UAAUpoB,IAErB5E,EAAAgtB,UAAUgyE,kBAAoBh/F,EAAAg/F,8VC1c9B,MAAAn0E,EAAAC,EAAAhrB,EAAA,IACA8sB,EAAA9sB,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KACAu5B,EAAApC,EAAAn3B,EAAA,KACAs5B,EAAAt5B,EAAA,IACAo3B,EAAAp3B,EAAA,GACAqgC,EAAArgC,EAAA,IAKM8pB,EAAOsN,EAAArN,UAAUC,UAMV9pB,EAAA+/B,KAAY,GAIzB,MAAakI,UAAiB7O,EAAAS,OAQ1B3O,YAAYzqB,GACRs5B,QACAl3B,KAAK62C,WAAY,EACjB72C,KAAKo8F,OAAS,KACdp8F,KAAKo3B,MAAQx5B,EACboC,KAAKq8F,UAAW,EAChBr8F,KAAKsgB,IAAI,IAAI6J,EAAU4M,MAAM/O,EAAApmB,QAAGoL,KAAKC,KAAM+a,EAAApmB,QAAGmL,YAC9C/M,KAAKsgB,IAAI,IAAI6J,EAAU+S,MACvBl9B,KAAKsgB,IAAI,IAAI6J,EAAU2wD,UAGpBzyD,SAASo0D,GACRz0D,EAAApmB,QAAG6D,cAAc,CAACg3E,IAClBz0D,EAAApmB,QAAGK,IAAI,WAAY,WAAY,yBAG/BjC,KAAKo8F,OAAS3f,EAMfp0D,cACH,IAAIo0D,EAAQz8E,KAAKo8F,OACjB,KAAQ3f,EAAmBzlC,UACvBylC,EAASA,EAAmBzlC,WAEhC,OAAOylC,EAIJp0D,WAAY,OAAOroB,KAAKo8F,OAExB/zE,OACH,OAAIroB,KAAKo8F,OAAgBp8F,KAAKo8F,OAAOzgF,OAC9B,KAGJ0M,OACH,OAAIroB,KAAKo8F,OAAgBp8F,KAAKo8F,OAAOpgF,OAC9B,KAGJqM,QACH,OAAIroB,KAAKo8F,OAAgBp8F,KAAKo8F,OAAOxgF,QAC9B,KAGJyM,WACH,OAAIroB,KAAKo8F,OAAgBp8F,KAAKo8F,OAAO1yF,WAC9B,KAGJ2e,QAAQzqB,GAAOoC,KAAKo3B,MAAQx5B,EAC5ByqB,UAAW,OAAOroB,KAAKo3B,MAEvB/O,UAAUrhB,GACbhH,KAAK9B,IAAI,YAAYo+F,UAAUt1F,GAG5BqhB,YAAqB,OAAOroB,KAAK9B,IAAI,YAAY+I,YAEjDohB,SAAS/pB,GAAsB0B,KAAK9B,IAAI,QAAQkc,SAAS9b,GACzD+pB,WAAoB,OAAOroB,KAAK9B,IAAI,QAAQgc,WAE5CmO,UAAU9I,GAAsBvf,KAAK9B,IAAI,QAAQoI,UAAUiZ,GAC3D8I,UAAU9I,GAAsBvf,KAAK9B,IAAI,QAAQwI,UAAU6Y,GAC3D8I,WAAoB,OAAOroB,KAAK9B,IAAI,QAAQmI,WAC5CgiB,SAAS9I,GAAsBvf,KAAK9B,IAAI,QAAQ0I,SAAS2Y,GAEzD8I,UAAmB,OAAOroB,KAAK9B,IAAI,SAASq+F,aAC5Cl0E,QAAQtmB,GAAqB,OAAO/B,KAAK9B,IAAI,SAASs+F,WAAWz6F,GACjEsmB,cAAuB,OAAOroB,KAAK9B,IAAI,SAAS+hB,cAChDoI,YAAYtmB,GACf,OAAO/B,KAAK9B,IAAI,SAASu+F,YAAY16F,GAGlCsmB,cAActmB,GAAqB/B,KAAK9B,IAAI,QAAQw+F,cAAc36F,GAClEsmB,gBAAyB,OAAOroB,KAAK9B,IAAI,QAAQy+F,gBAEjDt0E,mBAGH,SAFaroB,KAAK0B,eACJ1B,KAAKqG,cAMhBgiB,WACH,IAAIu0E,EAAM58F,KAAK0B,UAAY,KAAO1B,KAAKQ,UAAY,KAUnD,OARAo8F,IADoB58F,KAAKiH,YAAcjH,KAAKqG,YACzBw2F,QAAQ,GAAK,KAChCD,EAAM58F,KAAKqG,WAAa,MAAQu2F,EAC5B58F,KAAKkJ,IAAI,cACT0zF,GAAO,YAEP58F,KAAKkJ,IAAI,WACT0zF,GAAO,IAAM58F,KAAK9B,IAAI,SAASyK,YAE5Bi0F,EAGJv0E,KAAKsvD,GACR33E,KAAK88F,QAAQnlB,EAAIj2E,WACjB1B,KAAK65B,QAAQ89C,EAAIn3E,WACjBR,KAAKs8F,UAAU3kB,EAAI1wE,aACnBjH,KAAKoa,SAASu9D,EAAIz9D,YAEdy9D,EAAIvwC,UACJpnC,KAAKonC,QAAUuwC,EAAIvwC,SAEnBuwC,EAAI0kB,WACJr8F,KAAK4mC,QAAU+wC,EAAI/wC,QAAQ/nC,KAAKmB,OAGtBjC,OAAOutC,OAAOqsC,EAAInxD,iBAC1Bnc,QAAS+b,IACXpmB,KAAKsgB,IAAI8F,EAAKzf,WAIf0hB,QAAQjkB,GACX,OAAO,EAGJikB,QACH,MAAM00E,EAAU,IAAI33D,EAASplC,KAAK0B,WAElC,OADAq7F,EAAQz4E,KAAKtkB,MACN+8F,EAGJ10E,OAAOvhB,GACV,GAAI9G,KAAKQ,YAAcsG,EAAKtG,UAAY,OAAO,EAC/C,GAAIR,KAAK8W,UAAYhQ,EAAKgQ,QACtB,OAAO,EAEX,IAAInV,EAAM3B,KAAK0B,YAAcoF,EAAKpF,UAGlC,OADAC,GADAA,EAAMA,GAAQ3B,KAAKiH,cAAgBH,EAAKG,gBACzBjH,KAAKkJ,IAAI,aAAepC,EAAKoC,IAAI,aAI7Cmf,SACH,MAAMzJ,EAAY,CACd8hD,MAAO1gE,KAAK8W,QACZgmF,QAAS98F,KAAK0B,UACdm4B,QAAS75B,KAAKQ,UACd67F,SAAUr8F,KAAKq8F,UAGnB,OADAz9E,EAAK4Y,WAAazN,EAAA0N,YAAYz3B,MACvB4e,GA9JfzhB,EAAAioC,WAkKAjoC,EAAA+/B,KAAKxF,KAAO0N,EAKZ,MAAaX,UAAaW,EAItB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKE,MACrBlN,KAAKg9F,QAAU,EACfh9F,KAAKq8F,UAAW,EAGbh0E,UAAUzZ,GAAuB5O,KAAKg9F,QAAUpuF,EAChDyZ,YAAqB,OAAOroB,KAAKg9F,QAGjC30E,QAAQjkB,GAEX,GAAIA,EAAIlF,eAAe,UAAW,CAC9B,MAAMY,EAAOsE,EAAIgb,OACjB,GAAItf,EAAKsK,YAAa,CAClB,MAAMgV,EAAStf,EAAKgB,QAAQ,UAAU,GACtC,GAAIse,EAAOlW,IAAI,UAAW,CACtB,IAAI+zF,EAAcj9F,KAAKk9F,oBAKvB,GAJI99E,EAAOlW,IAAI,kBACX+zF,GAAe,GAEnB79E,EAAOlhB,IAAI,UAAU82E,UAAUioB,GACP,IAApBj9F,KAAKqG,WAAkB,CACvB,MAAMhC,EAAM,CAACyC,KAAM9G,MACnB+mB,EAAKe,UAAUE,EAAApmB,QAAGsJ,iBAAkB7G,GACpC2jB,EAAApmB,QAAGslB,QAAQ9H,EAAO1d,UAAY,aAC1B1B,KAAK0B,gBAGT1B,KAAK0G,UAAU,GAEnB,OAAO,EAGPshB,EAAApmB,QAAG2lB,SAASnI,EAAO1d,UACf,sCAIRsmB,EAAApmB,QAAG2lB,SAAS,wCAIhBS,EAAApmB,QAAGK,IAAI,WAAY,UAAW,2BAElC,OAAO,EAGJomB,oBACH,OAAOnhB,KAAK4B,MAAM9I,KAAKiH,YAAcjH,KAAKg9F,QAAU,IAGjD30E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAKu+E,UAAYn9F,KAAKo9F,YACfx+E,EAGJyJ,QACH,MAAMg1E,EAAU,IAAIlgG,EAAA+/B,KAAKuH,KAAKzkC,KAAK0B,WAGnC,OAFA27F,EAAQ/4E,KAAKtkB,MACbq9F,EAAQF,UAAUn9F,KAAKo9F,aAChBC,GAnEflgG,EAAAsnC,OAuEAtnC,EAAA+/B,KAAKuH,KAAOA,EAKZ,MAAa64D,UAAel4D,EAGxB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKI,QAGlBib,aAAazqB,GAChBoC,KAAK2vB,UAAY/xB,EAGdyqB,eACH,OAAOroB,KAAK2vB,WAbpBxyB,EAAAmgG,SAgBAngG,EAAA+/B,KAAKogE,OAASA,EAKd,MAAan4D,UAAe3O,EAAMigD,OAAOrxC,IAIrC/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKK,QACrBrN,KAAKu9F,YAAc,GAGhBl1E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAKu9F,YAAc5lB,EAAI6lB,gBAGpBn1E,QACH,MAAMrgB,EAAS,IAAIm9B,EAAOnlC,KAAK0B,WAE/B,OADAsG,EAAOsc,KAAKtkB,MACLgI,EAGJqgB,cAActmB,GACjB/B,KAAKu9F,YAAcx7F,EAGhBsmB,gBACH,OAAOroB,KAAKu9F,YAGTl1E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAK6+E,cAAgBz9F,KAAKu9F,YACnB3+E,GAhCfzhB,EAAAgoC,SAqCAhoC,EAAA+/B,KAAKiI,OAASA,EAKd,MAAaL,UAAsBK,EAI/B9c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKW,gBACrB3N,KAAK09F,UAAY,EAGdr1E,YAAYs1E,GACf39F,KAAK09F,UAAYC,EAGdt1E,cACH,OAAOroB,KAAK09F,UAGTr1E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK49F,YAAYjmB,EAAIkmB,eAGlBx1E,QACH,MAAMrgB,EAAS,IAAI88B,EAAc9kC,KAAK0B,WAEtC,OADAsG,EAAOsc,KAAKtkB,MACLgI,EAGJqgB,OAAOsvD,GACV,QAAIzgD,MAAM/wB,OAAOwxE,IACN33E,KAAK09F,YAAc/lB,EAAIkmB,cAK/Bx1E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAKg/E,YAAc59F,KAAK09F,UACjB9+E,GAvCfzhB,EAAA2nC,gBA2CA3nC,EAAA+/B,KAAK4H,cAAgBA,EAKrB,MAAaC,UAAaI,EAGtB9c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKY,YACrB5N,KAAKsgB,IAAI,IAAI6J,EAAU4a,MACvB/kC,KAAK89F,UAAY,GAGdz1E,YAAYtmB,GAAO/B,KAAK89F,UAAY/7F,EACpCsmB,cAAe,OAAOroB,KAAK89F,UAE3Bz1E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK+9F,YAAYpmB,EAAIqmB,eAGlB31E,QACH,MAAMoX,EAAO,IAAIsF,EAAK/kC,KAAK0B,WAE3B,OADA+9B,EAAKnb,KAAKtkB,MACHy/B,EAGJpX,OAAOsvD,GACV,QAAIzgD,MAAM/wB,OAAOwxE,IACN33E,KAAK89F,YAAcnmB,EAAIqmB,cAK/B31E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAKm/E,YAAc/9F,KAAK89F,UACjBl/E,GAlCfzhB,EAAA4nC,OAuCA5nC,EAAA+/B,KAAK6H,KAAOA,EAKZ,MAAaR,UAAe/N,EAAMynE,QAAQ74D,IAItC/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKM,QACrBtN,KAAKk+F,YAAc,KAIhB71E,cAActmB,GAAqB/B,KAAKk+F,YAAcn8F,EACtDsmB,gBAAyB,OAAOroB,KAAKk+F,YAErC71E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAKm+F,cAAcxmB,EAAIymB,iBAGpB/1E,QACH,MAAM6W,EAAS,IAAIqF,EAAOvkC,KAAK0B,WAE/B,OADAw9B,EAAO5a,KAAKtkB,MACLk/B,EAGJ7W,OAAOsvD,GACV,IAAIh2E,EAAMu1B,MAAM/wB,OAAOwxE,GAEvB,OADAh2E,EAAMA,GAAO3B,KAAKk+F,cAAgBvmB,EAAIymB,gBAInC/1E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAKu/E,cAAgBn+F,KAAKo+F,gBACnBx/E,GAlCfzhB,EAAAonC,SAsCApnC,EAAA+/B,KAAKqH,OAASA,EAKd,MAAaS,UAAeI,EACxB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKa,QACrB7N,KAAKq8F,UAAW,EAGbh0E,QAAQjkB,GACX,GAAIA,EAAIlF,eAAe,UAAW,CAC9B,MAAMY,EAAOsE,EAAIgb,OACjB,GAAItf,EAAKsK,YAAa,CAClB,MAAMgV,EAAStf,EAAKgB,QAAQ,UAAU,GAEhCu9F,EADM,IAAI/gE,EAAAwE,KAAK,EAAG,GAAI,GACb21C,OACf,GAAIr4D,EAAOlW,IAAI,UAAW,CACtBkW,EAAOlhB,IAAI,UAAUg4E,MAAMmoB,GAC3B,MAAM5hB,EAASz8E,KAAKg3C,WAAwBA,WACtCsnD,EAAc,IAAIn0E,EAAUo7D,QAKlC,OAJA+Y,EAAY9Z,UAAUplE,GACtBk/E,EAAYC,QAAQv+F,MACpBs+F,EAAYE,WAAWx2E,EAAApmB,QAAGqM,IAAIC,OAC9BuuE,EAAMn8D,IAAIg+E,IACH,QAIXt2E,EAAApmB,QAAG2lB,SAAS,sDAIhBS,EAAApmB,QAAGK,IAAI,aAAc,UAAW,2BAEpC,OAAO,EAGJomB,QACH,MAAMo2E,EAAY,IAAIthG,EAAA+/B,KAAK8H,OAAOhlC,KAAK0B,WAEvC,OADA+8F,EAAUn6E,KAAKtkB,MACRy+F,GAtCfthG,EAAA6nC,SA0CA7nC,EAAA+/B,KAAK8H,OAASA,EAKd,MAAaC,UAAaG,EAItB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKc,MAErB9N,KAAK0+F,SAAW,EAGbr2E,aAAsB,OAAOroB,KAAK0+F,SAClCr2E,WAAWs2E,GAAwB3+F,KAAK0+F,SAAWC,EAEnDt2E,QACH,MAAMu2E,EAAO,IAAI35D,EAAKjlC,KAAK0B,WAE3B,OADAk9F,EAAKt6E,KAAKtkB,MACH4+F,EAGJv2E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK6+F,WAAWlnB,EAAImnB,cAGjBz2E,OAAOsvD,GACV,IAAIh2E,EAAMu1B,MAAM/wB,OAAOwxE,GACvB,QAAIA,EAAImnB,aACJn9F,EAAMA,GAAO3B,KAAK8+F,eAAiBnnB,EAAImnB,cAMxCz2E,WACH,IAAI1mB,EAAMu1B,MAAMvuB,WAEhB,OADAhH,gBAAoB3B,KAAK8+F,eAItBz2E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAEnB,OADA7H,EAAKigF,WAAa7+F,KAAK8+F,aAChBlgF,GA3CfzhB,EAAA8nC,OA8CA9nC,EAAA+/B,KAAK+H,KAAOA,EAKZ,MAAaJ,UAAgBM,EACzB9c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKU,SAGlB2a,QACH,MAAMrgB,EAAS,IAAI68B,EAAQ7kC,KAAK0B,WAEhC,OADAsG,EAAOsc,KAAKtkB,MACLgI,GATf7K,EAAA0nC,UAcA1nC,EAAA+/B,KAAK2H,QAAUA,EAKf,MAAauoD,UAAkBhoD,EAM3B/c,YAAYo0D,GACRvlD,MAAM,aACNl3B,KAAK++F,SAAStiB,GAEdz8E,KAAKg/F,OAAS,GACdh/F,KAAKi/F,MAAQ,EACbj/F,KAAKk/F,aAAe,KAIjB72E,SAASvhB,GACZ,IAAIq4F,GAAa,EACjB,IAAK,IAAI9hG,EAAI,EAAGA,EAAI2C,KAAKg/F,OAAOz9F,OAAQlE,IACpC,GAAI2C,KAAKg/F,OAAO3hG,GAAG8I,OAAOW,GAAO,CAC7B9G,KAAKg/F,OAAO3hG,GAAGiJ,UAAUQ,EAAKT,YAC9B84F,GAAa,EACb,MAIHA,IACDr4F,EAAKi4F,SAAS/+F,MACdA,KAAKg/F,OAAOp5F,KAAKkB,IAKlBuhB,YACH,IAAI+2E,EAAM,EACV,IAAK,IAAI/hG,EAAI,EAAGA,EAAI2C,KAAKg/F,OAAOz9F,OAAQlE,IACpC+hG,GAAOp/F,KAAKg/F,OAAO3hG,GAAG4J,YAAcjH,KAAKg/F,OAAO3hG,GAAGgJ,WAEvD,OAAO+4F,EAIJ/2E,QAAQvhB,GACX,GAAIA,EAAKT,YAAc,EAAG,CACtB,MAAMsD,EAAMkV,KAAKC,UAAUhY,GAC3BkhB,EAAApmB,QAAG+C,KAAK,YAAa,2DACgCgF,KAElC,cAAnB7C,EAAKtG,UACDR,KAAKg3C,aAAelwC,EACpB9G,KAAKq/F,SAASv4F,GAGdkhB,EAAApmB,QAAGK,IAAI,OAAQ,UACX,gDAIRjC,KAAKq/F,SAASv4F,GAIfuhB,WAAwB,OAAOroB,KAAKg/F,OAAOl2E,QAG3CT,WAAWvhB,GAEd,OAAe,IADD9G,KAAKg/F,OAAOj/E,QAAQjZ,GAO/BuhB,QAAQvhB,GACX,GAAI9G,KAAKs/F,WAAWx4F,GAAQ,OAAO,EAEnC,OADc9G,KAAKu/F,sBAAsBz4F,IACzB,EAIbuhB,WAAWvhB,GACd,OAAI9G,KAAKkrC,QAAQpkC,GACN9G,KAAKw/F,YAAY14F,IAE5B9G,KAAKk/F,aAAe,MACb,GAGJ72E,sBAAsBvhB,GACzB,IAAK,IAAIzJ,EAAI,EAAGA,EAAI2C,KAAKg/F,OAAOz9F,OAAQlE,IACpC,GAAIyJ,EAAKX,OAAOnG,KAAKg/F,OAAO3hG,IAAM,OAAOA,EAE7C,OAAQ,EAGLgrB,YAAYvhB,GACf,MAAMzJ,EAAI2C,KAAKu/F,sBAAsBz4F,GAErC,OAAW,IAAPzJ,GACA2qB,EAAApmB,QAAGK,IAAI,gBAAiB,cACpB,0CACG,IAGuB,IAA9BjC,KAAKg/F,OAAO3hG,GAAGgJ,YACfrG,KAAKk/F,aAAep4F,EACpB9G,KAAKg/F,OAAOtyE,OAAOrvB,EAAG,KAGtB2C,KAAKk/F,aAAel3E,EAAApmB,QAAG2E,mBAAmBvG,KAAKg/F,OAAO3hG,GAAI,GACxB,IAA9B2C,KAAKg/F,OAAO3hG,GAAGgJ,YAAmBrG,KAAKg/F,OAAOtyE,OAAOrvB,EAAG,KAEzD,GAIJgrB,iBAA4B,OAAOroB,KAAKk/F,aAGxC72E,aAAavhB,EAAgBhI,GAChC,IAAIygB,EAAQ,EACZ,KAAQA,EAAQzgB,GAAMkB,KAAK8a,WAAWhU,MAChCyY,EAGN,OAA0B,OAAtBvf,KAAKk/F,cAILl3E,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,2DACG,IALPjC,KAAKk/F,aAAat4F,SAAS2Y,GAQ3BA,EAAQ,GAKT8I,QACH,OAAIroB,KAAKg/F,OAAOz9F,OAAS,GACrBvB,KAAKi/F,MAAQ,EACNj/F,KAAKg/F,OAAO,IAEhB,KAIJ32E,OACH,OAAIroB,KAAKi/F,MAAQj/F,KAAKg/F,OAAOz9F,OAClBvB,KAAKg/F,OAAOh/F,KAAKi/F,SAErB,KAGJ52E,OACH,OAAOroB,KAAKg/F,OAAOh/F,KAAKg/F,OAAOz9F,OAAS,GAIrC8mB,UACH,OAA8B,IAAvBroB,KAAKg/F,OAAOz9F,OAGhB8mB,WACH,IAAI1e,EAAM,cAAgB3J,KAAK0B,UAAY,KAC3C,MAAMkC,EAAQ5D,KAAK0a,WACnB,IAAK,IAAIrd,EAAI,EAAGA,EAAIuG,EAAMrC,OAAQlE,IAC9BsM,GAAO/F,EAAMvG,GAAGsL,WAAa,KAEjC,OAAOgB,EAGJ0e,SACH,MAAMzJ,EAAO,GACPhb,EAAQ5D,KAAK0a,WACnB,IAAK,IAAIrd,EAAI,EAAGA,EAAIuG,EAAMrC,OAAQlE,IAC9BuhB,EAAKhZ,KAAKhC,EAAMvG,GAAGopB,UAEvB,OAAO7H,GAnLfzhB,EAAAiwF,YAsLAjwF,EAAA+/B,KAAKkwD,UAAYA,EAKjB,MAAa1oD,UAAaU,EAItB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKQ,MACrBxN,KAAKy/F,QAAU,EAGZp3E,YACH,OAAOroB,KAAKy/F,QAGTp3E,UAAUq3E,GACb1/F,KAAKy/F,QAAUC,EAGZr3E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAGnB,OAFA7H,EAAKib,QAAU75B,KAAKQ,UACpBoe,EAAK+gF,UAAY3/F,KAAKy/F,QACf7gF,GAtBfzhB,EAAAunC,OA0BAvnC,EAAA+/B,KAAKwH,KAAOA,EAOZ,MAAaC,UAAiBD,EAC1Brc,YAAYzqB,GAERs5B,MADct5B,GAAQoqB,EAAApmB,QAAG8O,gBAEzB1Q,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKe,WACrB/N,KAAKy/F,QAAU,EACfz/F,KAAKs8F,UAAU,MANvBn/F,EAAAwnC,WASAxnC,EAAA+/B,KAAKyH,SAAWA,EAKhB,MAAaO,UAAkBE,EAK3B/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKO,WAErBvN,KAAK4/F,QAAU,KACf5/F,KAAK6/F,YAAa,EAIfx3E,gBAAyB,OAAOroB,KAAKQ,UAErC6nB,YAAsB,OAAOroB,KAAK6/F,WAClCx3E,YAA4B,OAAOroB,KAAK4/F,QAExCv3E,UAAUrkB,GACRhE,KAAK6/F,WAKN73E,EAAApmB,QAAGK,IAAI,iBAAkB,YAAa,8BAJtCjC,KAAK6/F,YAAa,EAClB7/F,KAAK4/F,QAAU57F,GAQhBqkB,QAAQjkB,GACX,MAAMg9E,EAAUphF,KAAKg3C,WAAwBA,WAC7C,GAAIoqC,EAAQ,CACR,MAAM0e,EAAW,IAAI31E,EAAUg3D,WAI/B,OAHA2e,EAAStb,UAAUpgF,EAAIgb,QACvB0gF,EAASC,UAAU3e,GACnBphF,KAAKsgB,IAAIw/E,IACF,EAEN,CACD,MAAMz7F,0BAA8Bwa,KAAKC,UAAU1a,KACnD4jB,EAAApmB,QAAGK,IAAI,iBAAkB,UAAWoC,GAExC,OAAO,EAGJgkB,QACH,MAAMnN,EAAM,IAAIgqB,EAAUllC,KAAK0B,WAE/B,OADAwZ,EAAIoJ,KAAKtkB,MACFkb,EAGJmN,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACPA,EAAIqoB,aAAchgG,KAAKigG,UAAUtoB,EAAIuoB,aAGtC73E,OAAOsvD,GACV,IAAIh2E,EAAMu1B,MAAM/wB,OAAOwxE,GAEvB,OADAh2E,EAAMA,GAAQ3B,KAAKkgG,cAAgBvoB,EAAIuoB,YAIpC73E,WACH,IAAIu0E,EAAM1lE,MAAMvuB,WAChB,GAAI3I,KAAKggG,YAAa,CAClB,MAAMG,EAAQngG,KAAKkgG,YAAYhiG,IAAI,SACnC0+F,GAAO,IAAM58F,KAAKkgG,YAAYx+F,UAAY,IAC1Ck7F,GAAO,SAAWuD,EAAM53F,cACxBq0F,GAAO,SAAWuD,EAAMl3F,aACxB2zF,GAAO,SAAWuD,EAAM72F,cACxBszF,GAAO,SAAWuD,EAAM5nB,oBAEtBqkB,GAAO,UACb,OAAOA,EAGJv0E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAGnB,OAFA7H,EAAKohF,UAAYhgG,KAAKggG,YAClBphF,EAAKohF,YAAYphF,EAAKqhF,UAAYjgG,KAAKkgG,YAAYz5E,UAChD7H,GAjFfzhB,EAAA+nC,YAoFA/nC,EAAA+/B,KAAKgI,UAAYA,EAWjB,IAAK,IAAI7nC,EAAI,EAAGA,EAAI2qB,EAAApmB,QAAGgU,UAAUrU,OAAQlE,IACrC6nC,EAAUjmC,UAAU+oB,EAAApmB,QAAGgU,UAAUvY,IAAM,WACnC,MAAO,MAEH,MAAMijC,EAAmBtY,EAAApmB,QAAGgU,UAAUvY,GACtC,OAAK2C,KAAK6/F,WACH7/F,KAAK4/F,QAAQ1hG,IAAI,SAASoiC,KADH,GAH3B,IAYf,MAAasE,UAAgBQ,EACzB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKS,UAH7BtQ,EAAAynC,UAMAznC,EAAA+/B,KAAK0H,QAAUA,EAMf,MAAaJ,UAAaY,EAKtB/c,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ7R,EAAApmB,QAAGoL,KAAKG,MACrBnN,KAAKopD,KAAO,GACZppD,KAAKogG,SAAW,GAGb/3E,YAAYzpB,EAAKwF,GACfpE,KAAKogG,SAASlhG,eAAeN,KAC9BoB,KAAKogG,SAASxhG,GAAO,IAEzBoB,KAAKogG,SAASxhG,GAAKgH,KAAKxB,GAGrBikB,YAAY1D,GACf3kB,KAAKogG,SAAWz7E,EAGb0D,YAAYzpB,GACf,OAAOoB,KAAKogG,SAASxhG,GAGlBypB,UACH,MAAMo0D,EAAQz8E,KAAKqgG,cACnB,GAAI5jB,EAAO,CACP,MAAM6jB,EAAW,IAAIn2E,EAAU86D,KAG/B,OAFAqb,EAASC,cAAcvgG,MACvBy8E,EAAMn8D,IAAIggF,IACH,EAEX,OAAO,EAGJj4E,UACH,OAAOroB,KAAKopD,KAGT/gC,QAAQm4E,GACXxgG,KAAKopD,KAAKxjD,KAAK46F,GAGZn4E,QAAQ+gC,GACXppD,KAAKopD,KAAOA,EAGT/gC,QACH,MAAMo4E,EAAO,IAAIj8D,EAAKxkC,KAAK0B,WAE3B,OADA++F,EAAKn8E,KAAKtkB,MACHygG,EAGJp4E,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX,MAAMvuB,EAAOuuB,EAAI+oB,UAAU53E,QAC3B9oB,KAAK2gG,QAAQv3C,GACbppD,KAAKogG,SAAWvhF,KAAKstB,MAAMttB,KAAKC,UAAU64D,EAAIyoB,WAG3C/3E,OAAOsvD,GAEV,OAAI33E,KAAK8W,UAAY6gE,EAAI7gE,QAItBuR,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAGnB,OAFA7H,EAAK+hF,QAAU3gG,KAAKopD,KACpBxqC,EAAKgiF,YAAc5gG,KAAKogG,SACjBxhF,GAzEfzhB,EAAAqnC,OA4EArnC,EAAA+/B,KAAKsH,KAAOA,qKCl/BZ,MAAAxc,EAAAC,EAAAhrB,EAAA,IAYaE,EAAA0jG,wBAA0B,SAASC,EAAMz8F,GACnCy8F,EAAKC,YACO1rF,IAAI2rF,GAAMA,EAAGtrD,aAC5BrrC,QAAQ42F,IAChBA,EAAM52F,QAAQjL,IACV,GAA6B,mBAAlBA,EAAE8hG,YACTl5E,EAAApmB,QAAGK,IAAI,YAAa,0BAChB,4BAA8B4c,KAAKC,UAAU1f,SAEhD,IAAKA,EAAE8hG,cAAe,CACvB,IAAIC,EAAS,IAAM98F,EAAM,aAAewa,KAAKC,UAAU1f,GAEvD,MAAM+4B,EAAW/4B,EAAEq5B,cAKf0oE,GAJChpE,EAIS,oBAAsBA,EAAS9hB,YAAc,IAH7C,qBAMd,MAAM+hB,EAAch5B,EAAE65B,kBAKlBkoE,GAJC/oE,EAIS,wBAA0BA,EAAY/hB,YAHtC,wBAMTjX,EAAE65B,oBACHkoE,GAAU,yBAEdn5E,EAAApmB,QAAGK,IAAI,YAAa,oBAAqBk/F,SAMzDhkG,EAAAs7F,KAAA,MAIIpwE,YAAY+4E,GACRphG,KAAKo3B,MAAQgqE,EAIV/4E,WAAWiY,EAAkBzT,EAAiBw0E,GACjD,IAAIhgC,GAAK,EACLigC,EAAW,GAcf,OAbAD,EAASh3F,QAAQk3F,IACRvhG,KAAKwhG,UAAU30E,EAAM00E,GAsCtC,SAAyB10E,EAAiB00E,GACtC,MAAME,EAAUF,EAAI18F,MAAM,KACpBw8D,EAAKogC,EAAQlgG,OAAS,EAC5B,IAAImgG,GAAU,EACd,IAAK,MAAMC,KAAYF,EACf50E,EAAK3tB,eAAeyiG,IAChB35E,EAAApmB,QAAG6D,cAAc,CAAConB,EAAK80E,OACvBD,GAAU,GAItB,OAAQrgC,GAAMqgC,EA7CGE,CAAgB/0E,EAAM00E,KAC3BlgC,GAAK,EACLigC,4BAAqCC,MALrClgC,GAAK,EACLigC,gBAAyBC,OAO5BlgC,GACDr5C,EAAApmB,QAAGK,IAAIjC,KAAKo3B,MAAO,gBAAiBkJ,KAAYghE,KAE7CjgC,EAIJh5C,UAAUwE,EAAiB00E,GAC9B,MAAME,EAAUF,EAAI18F,MAAM,KAC1B,IAAIw8D,GAAK,EAaT,OAZAogC,EAAQp3F,QAAQs3F,IACZ,GAAI90E,EAAK3tB,eAAeyiG,GACpB,GAAKtgC,EAGA,CACD,MAAMwgC,EAAWhjF,KAAKC,UAAU+N,GAC1BxoB,SAAak9F,qBAAuBM,IAC1C75E,EAAApmB,QAAGK,IAAIjC,KAAKo3B,MAAO,YAAa/yB,QALhCg9D,GAAK,IASVA,IAqBFlkE,EAAA2kG,eAAiB,SAASn9E,EAAMo9E,GAAW,GACpDC,EAAYr9E,EAAMo9E,IAGtB,MAAMj9F,EAAQ,GACd,SAAgBk9F,EAAY59F,EAAU29F,EAAoBE,EAAW,IACjE,MAAMC,EAAY,GAClB,IAAK,MAAMpgG,KAAQsC,EACf,GAAIA,EAAIlF,eAAe4C,GAAO,CAE1B,GADAgD,EAAMc,KAAK9D,GACPgD,EAAMvD,OAAS0gG,EACf,GAAyB,iBAAd79F,EAAItC,GACXkgG,EAAY59F,EAAItC,SAEf,GAAyB,mBAAdsC,EAAItC,GAAsB,CACtC,IAAIuC,oBAAwBwa,KAAKC,UAAUha,KAG3C,GAFAT,gBAAoBvC,IACpBuC,iBAAqBD,EAAItC,GAAM6G,aAC3Bo5F,EACA,MAAM,IAAIr9F,MAAML,GAGhB69F,EAAUt8F,KAAKvB,QAGlB,GAAyB,iBAAdD,EAAItC,IACZ,WAAW+0B,KAAKzyB,EAAItC,IAAQ,CAC5B,IAAIuC,0BAA8BD,EAAItC,SAEtC,MADAuC,iBAAqBS,EAAMof,KAAK,OAC1B,IAAIxf,MAAML,GAK5BS,EAAM8+C,MAGd,GAAIs+C,EAAU3gG,OAAS,EAAG,CACtB,MAAM8C,EAAM69F,EAAUh+E,KAAK,MAC3B,MAAM,IAAIxf,MAAML,IAlCxBlH,EAAA6kG,cAuCA7kG,EAAAglG,iBAAA,SAAiCpqF,GAC7B,MAAMnU,EAAQmU,EAAM2C,WAEd0nE,EADMrqE,EAAMyL,SACQ4+E,WAEpBC,EAAY,GAClBjgB,EAAM/3E,QAASvK,IACPA,EAAKwiG,YACUxiG,EAAK4a,WACbrQ,QAAQvD,IACXu7F,EAAUv7F,EAAKgQ,SAAWhQ,MAKtC,MAAMy7F,EAAa,GACnB3+F,EAAMyG,QAAQvD,IACVy7F,EAAWz7F,EAAKgQ,SAAWhQ,IAG/B,MAAM07F,EAAazkG,OAAO6qB,KAAKy5E,GAAW9gG,OACpCkhG,EAAc1kG,OAAO6qB,KAAK25E,GAAYhhG,OAC5C,GAAIkhG,IAAgBD,EAAY,CAC5B,IAAIn+F,iBAAqBm+F,IACzBn+F,qBAAyBo+F,IACzBj+F,QAAQC,MAAM,sCAAuCJ,GAGzD,MAAMq+F,EAAqB,GAC3B3kG,OAAO6qB,KAAKy5E,GAAWh4F,QAAQwM,IACvB0rF,EAAWrjG,eAAe2X,UACnB0rF,EAAW1rF,GAGlB6rF,EAAmB98F,KAAKy8F,EAAUxrF,MAI1C,MAAM8rF,EAAqB,GAC3B5kG,OAAO6qB,KAAK25E,GAAYl4F,QAAQwM,IACxBwrF,EAAUnjG,eAAe2X,UAClBwrF,EAAUxrF,GAGjB8rF,EAAmB/8F,KAAK28F,EAAW1rF,MAI3C6rF,EAAmBr4F,QAAQvD,IACvBtC,QAAQC,MAAM,6BAA8BqC,EAAKpF,aAErDihG,EAAmBt4F,QAAQvD,IACvBtC,QAAQC,MAAM,6BAA8BqC,EAAKpF,0VC9MzD,MACMyC,EADNlH,EAAA,EACcq3B,CAAI,cAElBtM,EAAAC,EAAAhrB,EAAA,IACAw5B,EAAArC,EAAAn3B,EAAA,IAEAo3B,EAAAp3B,EAAA,GACAogB,EAAApgB,EAAA,GAIA2lG,EAAA3lG,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAEAs5B,EAAAt5B,EAAA,IAEM8pB,EAAkBsN,EAAArN,UAAUC,UAG5BgR,EAAgBxB,EAAQwB,cAEjB96B,EAAA0lG,MAAa,GAqB1B,MAAMp6E,EAAMpL,EAAAC,OAAOC,SAEbulF,EAAe,CACjBC,KAAM,OACNC,MAAO,QACPC,MAAO,QACPC,KAAM,QAGV,SAASC,EAAyBprF,EAAc9B,EAAWC,GACvD,MAAMpW,EAAOiY,EAAMyL,SAASiL,QAAQxY,EAAGC,GACvC,GAAIpW,EAAKg2C,gBAAiB,CACtB,MAAMN,EAAO11C,EAAKi2C,gBAClB5xC,4BAAgC8R,KAAKC,KAChC6B,EAAMmW,cAAcsnB,EAAMv/B,EAAGC,IAC9B8R,EAAApmB,QAAGK,IAAI,WAAY,sDACWgU,MAAMC,MAmHhD,SAASktF,EAAUxlG,EAAc+nF,EAAkBzsE,GAC/C,MAAMmqF,EAAO1d,EAAMz/D,KAAKo9E,GACbA,EAAE5hG,YAAc9D,GAE3B,GAAIylG,EAAM,CACN,MAAMz2E,EAASy2E,EAAKtC,YACpB,GAAIn0E,EAAOrrB,OAAS2X,EAChB,OAAO0T,EAAO1T,GAEb,CACD,MAAM7U,WAAezG,IACrBoqB,EAAApmB,QAAGK,IAAI,WAAY,eACZoC,UAAY6U,oBAAyB0T,EAAOrrB,OAAS,OAIpE,OAAO,KAYX,SAASgiG,EAA6BxrF,GAClC,IAAIyrF,EAAYzrF,EAAM0rF,kBACtB,KAAOD,EAAU1tD,iBACb0tD,EAAYzrF,EAAM0rF,kBAEtB,OAAOD,EAIX,SAASE,EAAoB92E,GACzB,MAAM+2E,EAAU/2E,EAAOrrB,OACjBqiG,EAAgB,GAChBC,EAAc,GAEpB,IAAK,IAAIC,EAAK,EAAGA,EAAKH,EAASG,IAAM,CACjC,MAAMtoF,EAAaoR,EAAOk3E,GAE1B,IAAIC,EAAY,KAIhB,GAHIvoF,EAAIwoF,cAAcD,EAAYvoF,EAAIyoF,aAGlCH,EAAKH,EAAU,EAAG,CAClB,MAAMO,EAAoBt3E,EAAOk3E,EAAK,GAEhC5gG,EAAa,IAAI+0B,EAAc,aAAczc,EAAK0oF,GAClDV,EAAYD,EAA6B/nF,GAC/C,IAAK2oF,EAAIC,GAAM,CAACZ,EAAU7nF,OAAQ6nF,EAAUxnF,QACxC+nF,GACIA,EAAUM,YACTF,EAAIC,GAAML,EAAUM,UAI7B7oF,EAAIy6B,UAAU/yC,EAAYihG,EAAIC,GAC9BR,EAAch+F,KAAK1C,GAIvB,GAAI4gG,EAAK,EAAG,CACR,MAAMQ,EAAW13E,EAAOk3E,EAAK,GACvB3gG,EAAW,IAAI80B,EAAc,WAAYzc,EAAK8oF,GAE9Cd,EAAYD,EAA6B/nF,GAC/C,IAAK2oF,EAAIC,GAAM,CAACZ,EAAU7nF,OAAQ6nF,EAAUxnF,QACxC+nF,GACIA,EAAUQ,cACTJ,EAAIC,GAAML,EAAUQ,YAI7B/oF,EAAIy6B,UAAU9yC,EAAUghG,EAAIC,GAC5BP,EAAYj+F,KAAKzC,IAKzB,IAAK,IAAI2gG,EAAK,EAAGA,EAAKH,EAASG,IACvBA,EAAKH,EAAU,GACfC,EAAcE,GAAI3vC,QAAQ0vC,EAAYC,IAgElD,SAASU,EAAeC,EAAUC,EAAQC,GACtC,IAAIC,EAAMF,EACNG,EAAMF,EAOV,MAJsB,iBAAXD,GAAyC,iBAAXC,IACrCC,EAAMH,EAASv+E,KAAK4+E,GAAMA,EAAGpjG,YAAcgjG,GAC3CG,EAAMJ,EAASv+E,KAAK4+E,GAAMA,EAAGpjG,YAAcijG,IAExC,CAACC,EAAKC,GAqEjB,SAASE,EAAYn4E,EAAQo4E,GACzB,GAAiB,OAAbA,EAAoB,OAAO,KAC/B,MAAM/uF,EAACA,EAACC,EAAEA,GAAK8uF,EAGf,OAFkBp4E,EAAOo4E,EAAS/sD,aACPz0B,SAASiL,QAAQxY,EAAGC,GAC/Bw/B,YApVPv4C,EAAA8nG,eAAiB,EAC1BltF,EAAcmtF,EAAW,UAAWC,EAAO,MAAOC,GAAY,KAG9D,MAAM/vF,EAAM0C,EAAMyL,SACZvM,EAAO5B,EAAI4B,KACXC,EAAO7B,EAAI6B,KACXmuF,EAAa,GAEnB,IAAK,IAAI5gF,EAAM,EAAGA,EAAMvN,EAAO,EAAGuN,IAAO,CACrC,IAAa,QAAT0gF,GAA2B,SAATA,KACd9vF,EAAIqgF,WAAW,EAAGjxE,IAAQ2gF,GAAW,CACrC,MAAME,EAAW,IAAIrtE,EAAcitE,EAAUntF,GAC7CorF,EAAyBprF,EAAO,EAAG0M,GAC9B2gF,EACCrtF,EAAMk+B,UAAUqvD,EAAU,EAAG7gF,GADlB1M,EAAMoW,WAAWm3E,EAAU,EAAG7gF,GAE/C4gF,EAAWz/F,KAAK0/F,GAGxB,IAAa,QAATH,GAA2B,SAATA,KACd9vF,EAAIqgF,WAAWz+E,EAAO,EAAGwN,IAAQ2gF,GAAW,CAC5C,MAAMG,EAAW,IAAIttE,EAAcitE,EAAUntF,GAC7CorF,EAAyBprF,EAAOd,EAAO,EAAGwN,GACrC2gF,EACCrtF,EAAMk+B,UAAUsvD,EAAUtuF,EAAO,EAAGwN,GADzB1M,EAAMoW,WAAWo3E,EAAUtuF,EAAO,EAAGwN,GAEtD4gF,EAAWz/F,KAAK2/F,IAK5B,IAAK,IAAIC,EAAM,EAAGA,EAAMvuF,EAAO,EAAGuuF,IAAO,CACrC,IAAa,QAATL,GAA2B,UAATA,KACd9vF,EAAIqgF,WAAW8P,EAAK,IAAMJ,GAAW,CACrC,MAAMK,EAAY,IAAIxtE,EAAcitE,EAAUntF,GAC9CorF,EAAyBprF,EAAOytF,EAAK,GAChCJ,EACCrtF,EAAMk+B,UAAUwvD,EAAWD,EAAK,GADrBztF,EAAMoW,WAAWs3E,EAAWD,EAAK,GAElDH,EAAWz/F,KAAK6/F,GAGxB,IAAa,QAATN,GAA2B,UAATA,KACd9vF,EAAIqgF,WAAW8P,EAAKtuF,EAAO,IAAMkuF,GAAW,CAC5C,MAAMM,EAAY,IAAIztE,EAAcitE,EAAUntF,GAC9CorF,EAAyBprF,EAAOytF,EAAKtuF,EAAO,GACvCkuF,EACCrtF,EAAMk+B,UAAUyvD,EAAWF,EAAKtuF,EAAO,GAD5Ba,EAAMoW,WAAWu3E,EAAWF,EAAKtuF,EAAO,GAEzDmuF,EAAWz/F,KAAK8/F,IAI5B,OAAOL,IAKEloG,EAAAwoG,mBAAqB,EAAC5tF,EAAcotF,KAC7C,MAAM9vF,EAAM0C,EAAMyL,SACZvM,EAAO5B,EAAI4B,KACXC,EAAO7B,EAAI6B,KACjB,IAAK,IAAIuN,EAAM,EAAGA,EAAMvN,EAAO,EAAGuN,IAAO,CACrC,IAAa,QAAT0gF,GAA2B,SAATA,IACd9vF,EAAIoZ,QAAQ,EAAGhK,GAAKqxB,gBACpB,OAAO,EAGf,IAAa,QAATqvD,GAA2B,SAATA,IACd9vF,EAAIoZ,QAAQxX,EAAO,EAAGwN,GAAKqxB,gBAC3B,OAAO,EAInB,IAAK,IAAI0vD,EAAM,EAAGA,EAAMvuF,EAAO,EAAGuuF,IAAO,CACrC,IAAa,QAATL,GAA2B,UAATA,IACd9vF,EAAIoZ,QAAQ+2E,EAAK,GAAG1vD,gBACpB,OAAO,EAGf,IAAa,QAATqvD,GAA2B,UAATA,IACd9vF,EAAIoZ,QAAQ+2E,EAAKtuF,EAAO,GAAG4+B,gBAC3B,OAAO,EAInB,OAAO,IAkHX34C,EAAA0lG,MAAMa,oBAAsBA,EA6K5BvmG,EAAA0lG,MAAMoC,eAAiB9nG,EAAA8nG,eACvB9nG,EAAA0lG,MAAM8C,mBAAqBxoG,EAAAwoG,mBA2B3B,MAAaC,UAAkBrvE,EAAAS,OAO3B3O,YAAYzqB,GACRs5B,QACAl3B,KAAKpC,KAAOA,EACZoC,KAAK+B,KAAO,OACZ/B,KAAKulB,OAAS,KAGX8C,UACH,OAAOroB,KAAKpC,KAGTyqB,cACH,OAAOroB,KAAK6lG,SAGTx9E,YAAYw9E,GACf7lG,KAAK6lG,SAAWA,EAGbx9E,UACH,OAAOroB,KAAK+B,KAGTsmB,QAAQtmB,GACX/B,KAAK+B,KAAOA,EAGTsmB,YACH,OAAOroB,KAAKulB,OAGT8C,UAAU9C,GACbvlB,KAAKulB,OAASA,EAGX8C,SACH,MAAMjkB,EAAsB,CACxByhG,SAAU7lG,KAAK6lG,SACfhvF,GAAI7W,KAAK8W,QACTlZ,KAAMoC,KAAKpC,KACXmE,KAAM/B,KAAK+B,MAMf,OAJI/B,KAAKulB,SACLnhB,EAAImhB,OAASvlB,KAAKulB,OAAOzO,SAE7B1S,EAAIozB,WAAarN,EAAUsN,YAAYz3B,MAChCoE,GArDfjH,EAAAyoG,YAyDAzoG,EAAA0lG,MAAMnrE,KAAOkuE,EAMb,MAAaE,UAAiBF,EAK1Bv9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK+lG,UAAY,GAGd19E,eAAe29E,EAAOC,GACzB,OAAOzB,EAAexkG,KAAK+lG,UAAWC,EAAOC,GAG1C59E,UAAUpS,EAAWC,GACxBlW,KAAKkmG,MAAQjwF,EACbjW,KAAKmmG,MAAQjwF,EAGVmS,YACH,MAAO,CAACroB,KAAKkmG,MAAOlmG,KAAKmmG,OAGtB99E,WAAW+9E,GAKd,OAJIA,EAAQtvF,UAAY9W,KAAK8W,SACzBkR,EAAApmB,QAAGK,IAAI,WAAY,aACf,oCAAsCjC,KAAK0B,YAE9CsmB,EAAApmB,QAAG6D,cAAc,CAAC2gG,MACnBA,EAAQC,UAAUrmG,MAClBA,KAAK+lG,UAAUngG,KAAKwgG,IACb,GAKR/9E,WAAW+9E,GAEd,OADcpmG,KAAK+lG,UAAUhmF,QAAQqmF,IACrB,EAGb/9E,YACH,IAAI1mB,EAAM,GAIV,OAHA3B,KAAK+lG,UAAU17F,QAAQi8F,IACnB3kG,EAAMA,EAAI0P,OAAOi1F,EAAQvF,eAEtBp/F,EAGJ0mB,mBACH,IAAI1mB,EAAgB,CAAC3B,MAIrB,OAHAA,KAAK+lG,UAAU17F,QAAQi8F,IACnB3kG,EAAIiE,KAAK0gG,KAEN3kG,EAGJ0mB,gBAAgB29E,EAAOC,EAAOt5E,EAAIU,IAxP7C,SAAyBo3E,EAAyBC,EAAQC,EAAQh4E,EAAIU,GAC9DrF,EAAApmB,QAAG6D,cAAc,CAACknB,EAAIU,KACtBrF,EAAApmB,QAAGK,IAAI,QAAS,yBACL0qB,cAAeU,qCAE9B,MAAOu3E,EAAKC,GAAOL,EAAeC,EAAUC,EAAQC,GAEhD38E,EAAApmB,QAAG6D,cAAc,CAACm/F,EAAKC,KACvB78E,EAAApmB,QAAGK,IAAI,QAAS,kBACZ,uDAGR,IAAIskG,GAAW,EACX55E,EAAKU,IAAKk5E,GAAW,GACzB,MACMC,EAAW,IAAIvuE,EADRsuE,EAAW,aAAe,YAEjCE,EAAY5B,EAAI9D,YACtB,GAAI1zE,EAAKo5E,EAAUllG,OAAQ,CACvB,MAAMzB,EAAOyjG,EAA6BkD,EAAUp5E,IACpDo5E,EAAUp5E,GAAI4oB,UAAUuwD,EAAU1mG,EAAK6b,OAAQ7b,EAAKkc,QACpDwqF,EAAS7wD,YAAY8wD,EAAUp5E,IAC/Bu3E,EAAI8B,qBAAqB/5E,EAAI65E,QAG7Bx+E,EAAApmB,QAAGK,IAAI,QAAS,kBACZ,SAAWorB,EAAK,8BAAiCw3E,EAAInjG,WAgOzDilG,CAAgB3mG,KAAK+lG,UAAWC,EAAOC,EAAOt5E,EAAIU,GAG/ChF,UAAUzqB,EAAcsb,GAE3B,OADckqF,EAAUxlG,EAAMoC,KAAK+lG,UAAW7sF,GAI3CmP,YAAYzqB,GAEf,OAnZR,SAAqBA,EAAc6mG,GAI/B,OAHgBA,EAASv+E,KAAK4+E,GAC1BA,EAAGpjG,YAAc9D,GAgZDgpG,CAAYhpG,EAAMoC,KAAK+lG,WAKpC19E,eACH,MAAMw+E,EAAY,GAOlB,OANA7mG,KAAK+lG,UAAU17F,QAAQy6F,IACnB,MAAMgC,EAAShC,EAAGC,cACd+B,GACAD,EAAUjhG,KAAKkhG,KAGhBD,EAGJx+E,kBACHroB,KAAK+lG,UAAU17F,QAAQy6F,IACnBA,EAAGiC,oBAIJ1+E,SACH,MAAMzJ,EAAsBsY,MAAMzQ,SAGlC,OAFA7H,EAAK3I,EAAIjW,KAAKkmG,MACdtnF,EAAK1I,EAAIlW,KAAKmmG,MACPvnF,EAGJyJ,cACH,MAAM1mB,EAAkC,CAAC0mB,CAACroB,KAAK8W,SAAU9W,MAIzD,OAHAA,KAAK+lG,UAAU17F,QAAQy6F,IACnBnjG,EAAImjG,EAAGhuF,SAAWguF,IAEfnjG,GArGfxE,EAAA2oG,WAyGA3oG,EAAA0lG,MAAMiD,SAAWA,EASjB,MAAakB,UAAoBpB,EAO7Bv9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAKinG,eAAiB,IAAIl2C,IAC1B/wD,KAAKknG,QAAU,GACflnG,KAAKmnG,YAAc,EAIhB9+E,cACH,OAAO08E,EAAY/kG,KAAKknG,QAASlnG,KAAKonG,WAGnC/+E,UAAUnP,GACb,GAAIA,EAASlZ,KAAKknG,QAAQ3lG,OACtB,OAAOvB,KAAKknG,QAAQhuF,GAEnB,CACD,MAAMyqF,EAAU3jG,KAAKknG,QAAQ3lG,OAC7BymB,EAAApmB,QAAGK,IAAI,cAAe,yBACLiX,iBAAsByqF,KAE3C,OAAO,KAGJt7E,YACH,OAAOroB,KAAKknG,QAAQp+E,QAGjBT,SAAStQ,GAEZ,OADc/X,KAAKknG,QAAQnnF,QAAQhI,IACnB,EAGbsQ,qBAAqBnP,EAAgBsf,IA/XhD,SAA8B5L,EAAiB1T,EAAQsf,GACnD,GAAItf,EAAS0T,EAAOrrB,OAAQ,CACxB,MAAMwW,EAAQ6U,EAAO1T,GACfmuF,EAAkB7uE,EAAOC,cAE/B,IAAKzQ,EAAApmB,QAAG6D,cAAc,CAAC4hG,IAAmB,CACtC,MAAMC,GAAQ9uE,EAAOonC,SAEf2nC,EAAY,IAAItvE,EADTqvE,EAAO,aAAe,WAE/BvvF,EAAOsvF,GAELvnG,EAAOyjG,EAA6BxrF,GAG1C,OAFAA,EAAMk+B,UAAUsxD,EAAWznG,EAAK6b,OAAQ7b,EAAKkc,QAC7CurF,EAAUpzC,QAAQ37B,IACX,QAIXxQ,EAAApmB,QAAGK,IAAI,WAAY,kCACJiX,oBAAyB0T,EAAOrrB,WAGnD,OAAO,GA0WEmlG,CAAqB1mG,KAAKknG,QAAShuF,EAAQsf,IAC5CxQ,EAAApmB,QAAGK,IAAI,cAAe,uBAClB,kDAMLomB,iBACH,OAzhBR,SAAwBzqB,EAAcgvB,GAClC,MAAM4L,EAAS,GAaf,OAZA5L,EAAOviB,QAAQ0N,IACGA,EAAM29B,YACdrrC,QAASjL,IACX,MAAMooG,EAAapoG,EAAE85B,iBACrB,GAAIsuE,GAAeA,EAAqBnxF,UAAW,CAC/C,MAAMoxF,EAAeD,EAAqBnxF,YACtCoxF,GAAeA,EAAY/lG,YAAc9D,GACzC46B,EAAO5yB,KAAKxG,QAKrBo5B,EA2gBIkvE,CAAe1nG,KAAK0B,UAAW1B,KAAKknG,SAGxC7+E,gBAAgB/C,GACnB,MAAMvjB,EAAOujB,EAAK9kB,UACbR,KAAKinG,eAAe/9F,IAAInH,KACzB/B,KAAKinG,eAAellG,GAAQ,IAEhC/B,KAAKinG,eAAellG,GAAM6D,KAAK0f,GAG5B+C,mBAKAA,SAASnP,GACZ,GAAIA,EAASlZ,KAAKknG,QAAQ3lG,OACtB,OAAOvB,KAAKknG,QAAQhuF,GAEnB,CACD,MAAMjU,KAAUjF,KAAKQ,cAAcR,KAAK0B,YAClCimG,SAAmB3nG,KAAKknG,QAAQ3lG,gBACtCymB,EAAApmB,QAAGK,IAAI,cAAe,cACfgD,cAAiBiU,MAAWyuF,KAEvC,OAAO,KAKJt/E,SAAStQ,GACZ,GAAKiQ,EAAApmB,QAAG6D,cAAc,CAACsS,IAanBiQ,EAAApmB,QAAGK,IAAI,cAAe,WAClB,8BAbJ,GAAKjC,KAAK4nG,SAAS7vF,GAKd,CACD,IAAI1T,EAAM,iCACVA,GAAO,QAAU0T,EAAMjB,QACvBkR,EAAApmB,QAAGK,IAAI,cAAe,WAAYoC,QAPlC0T,EAAM8vF,eAAe7nG,KAAKmnG,eAC1BnnG,KAAKknG,QAAQthG,KAAKmS,GAClBA,EAAMsuF,UAAUrmG,MAcrBqoB,SACH,MAAMzJ,EAAyBsY,MAAMzQ,SAGrC,OAFA7H,EAAK+kF,QAAU3jG,KAAKknG,QAAQ3lG,OAC5Bqd,EAAKgO,OAAS5sB,KAAKknG,QAAQ7xF,IAAI0C,GAASA,EAAMjB,SACvC8H,GAxGfzhB,EAAA6pG,cA2GA7pG,EAAA0lG,MAAMmE,YAAcA,EASpB,MAAac,UAAed,EAExB3+E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,UACb75B,KAAKonG,UAAY,KAGd/+E,YAAY4vB,GACf,MAAM8vD,EAAa,IAAI9vE,EAAc,YACrCj4B,KAAKgoG,YAAYD,EAAY9vD,GAI1B5vB,YAAYmQ,EAAgByf,GAC/B,GAAIA,EAAcj4C,KAAKknG,QAAQ3lG,OAAQ,CACnC,MAAMwW,EAAQ/X,KAAKknG,QAAQjvD,GAErBn4C,EAAOyjG,EAA6BxrF,GAC1C,IAAK9B,EAAGC,GAAKpW,EAAK8b,QAClB,GAAI7D,EAAMisF,YAAa,CACnB,MAAM1sD,EAASv/B,EAAMksF,YACjB3sD,EAAOitD,cACNtuF,EAAGC,GAAKohC,EAAOitD,YAIxBxsF,EAAMk+B,UAAUzd,EAAQviB,EAAGC,GAC3BlW,KAAKonG,UAAY,CAACnvD,cAAahiC,IAAGC,UAGlC8R,EAAApmB,QAAGK,IAAI,eAAgB,iDACgBjC,KAAKknG,QAAQ3lG,UAIrD8mB,oBAAoB28E,GAClBh9E,EAAApmB,QAAG6D,cAAc,CAACu/F,IAInBh9E,EAAApmB,QAAGK,IAAI,eAAgB,sBACnB,gCAJJjC,KAAKonG,UAAYpC,EASlB38E,cACH,OAAO08E,EAAY/kG,KAAKknG,QAASlnG,KAAKonG,WAKnC/+E,gBACHq7E,EAAoB1jG,KAAKknG,SAGtB7+E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAW,GAIjB,OAHIpE,KAAKonG,YACLhjG,EAAI4gG,SAAWhlG,KAAKonG,WAEjBrpG,OAAO4kF,OAAOv+E,EAAKwa,IA/DlCzhB,EAAA2qG,SAmEA3qG,EAAA0lG,MAAMiF,OAASA,EAMf,MAAapyC,UAAgBowC,EAIzBz9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,WACb75B,KAAKioG,eAAiB,GAKnB5/E,UAAU6/E,GACb,OAAOloG,KAAKmoG,WAAWD,GAGpB7/E,cACH,OAAOroB,KAAK+lG,UAIT19E,YAAY+/E,GAEXpoG,KAAKioG,eADiB,iBAAfG,EACe,CAACA,GAGDA,EAKvB//E,UAAU6/E,GACb,OAAKloG,KAAKqoG,UAAUH,KAChBloG,KAAK+lG,UAAUngG,KAAKsiG,GAEpBA,EAAO7B,UAAUrmG,MAGa,IAA1BA,KAAK+lG,UAAUxkG,QACfvB,KAAKgoG,YAAYE,EAAOxmG,YAErB,GAMR2mB,eACH,MAAM1mB,EAAM,GACN2mG,EAAYtoG,KAAK+lG,UAAUxkG,OACjC,IAAK,IAAIlE,EAAI,EAAGA,EAAIirG,EAAWjrG,IAAK,CAChC,MAAM6qG,EAASloG,KAAK+lG,UAAU1oG,GAC9B,GAAI2C,KAAKioG,eAAeloF,QAAQmoF,EAAOxmG,YAAc,EAAG,CACpD,MAAM6mG,EAAOL,EAAOnD,cACf/8E,EAAApmB,QAAG6D,cAAc,CAAC8iG,KACnB5mG,EAAIiE,KAAK2iG,IAIrB,OAAO5mG,EAGJ0mB,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAM,CACR8jG,OAAQloG,KAAK+lG,UAAU1wF,IAAImzF,GAAMA,EAAG/hF,UACpCgiF,cAAezoG,KAAKioG,eACpBS,UAAW1oG,KAAK+lG,UAAUxkG,QAE9B,OAAOxD,OAAO4kF,OAAOv+E,EAAKwa,IArElCzhB,EAAAu4D,UAyEAv4D,EAAA0lG,MAAMntC,QAAUA,EAOhB,MAAaizC,EAYTtgF,YAAYpS,EAAGC,EAAG6gD,GACd/2D,KAAK4oG,OAAS3yF,EACdjW,KAAK6oG,OAAS3yF,EACdlW,KAAK8oG,MAAQ/xC,EAEb/2D,KAAKiX,KAAO,KACZjX,KAAKkX,KAAO,KAEZlX,KAAK+oG,OAAS,KAGd/oG,KAAK2lF,MAAQ,CACTjwB,QAAS,GACTszC,SAAU,GACVC,KAAM,GACNC,WAAY,IAKb7gF,WACH,OAAOroB,KAAK+oG,OAET1gF,WACH,OAAOroB,KAAK4oG,OAETvgF,WACH,OAAOroB,KAAK6oG,OAGTxgF,cACH,OAAuB,IAAhBroB,KAAK6oG,OAETxgF,cACH,OAAOroB,KAAK6oG,SAAY7oG,KAAK8oG,MAAMK,WAAa,EAE7C9gF,aACH,OAAuB,IAAhBroB,KAAK4oG,OAETvgF,aACH,OAAOroB,KAAK4oG,SAAY5oG,KAAK8oG,MAAMM,WAAa,EAI7C/gF,SACH,QAAIroB,KAAKqpG,kBACLrpG,KAAKspG,kBACLtpG,KAAKupG,gBACLvpG,KAAKwpG,eAKNnhF,SAAStQ,GACZ/X,KAAK+oG,OAAShxF,EACd/X,KAAKiX,KAAOjX,KAAK+oG,OAAOvlF,SAASvM,KACjCjX,KAAKkX,KAAOlX,KAAK+oG,OAAOvlF,SAAStM,KAI9BmR,QAAQohF,EAAUC,GACrB,MAAMC,EAAQ3pG,KAAKiX,KAAO,EACpB2yF,EAAQ5pG,KAAKkX,KAAO,EAG1B,IAAK8Q,EAAApmB,QAAG6D,cAAc,CAACgkG,IAAY,CAC/B,MAAMI,EAAYJ,EAAS//F,WACrB2L,EAAMrV,KAAK+oG,OAAOvlF,SAClBsmF,EAAUD,EAAUrmF,SAE1B,IAAK,IAAItN,EAAI,EAAGA,GAAK0zF,EAAQ,EAAG1zF,IAAK,CACjC,MAAMpW,EAAOuV,EAAIoZ,QAAQk7E,EAAOzzF,GAC1B6zF,EAAWD,EAAQr7E,QAAQ,EAAGvY,GAEpC,GAAIpW,EAAK8vB,UAAYm6E,EAASn6E,SAAU,CACpC,MAAM4I,EAAS,IAAIP,EAAc,UAC7Bj4B,KAAK+oG,OAAQc,GACXG,EAAa,IAAI/xE,EAAc,UACjC4xE,EAAW7pG,KAAK+oG,QACpBvwE,EAAOI,gBAAgBoxE,GACvBA,EAAWpxE,gBAAgBJ,GAE3Bx4B,KAAK+oG,OAAO9yD,UAAUzd,EAAQmxE,EAAOzzF,GACrC2zF,EAAU5zD,UAAU+zD,EAAY,EAAG9zF,KAM/C,IAAK8R,EAAApmB,QAAG6D,cAAc,CAACikG,IAAa,CAChC,MAAMO,EAAaP,EAAUhgG,WACvB2L,EAAMrV,KAAK+oG,OAAOvlF,SAClB0mF,EAAWD,EAAWzmF,SAE5B,IAAK,IAAIvN,EAAI,EAAGA,GAAK0zF,EAAQ,EAAG1zF,IAAK,CACjC,MAAMnW,EAAOuV,EAAIoZ,QAAQxY,EAAG2zF,GACtBO,EAAYD,EAASz7E,QAAQxY,EAAG,GAEtC,GAAInW,EAAK8vB,UAAYu6E,EAAUv6E,SAAU,CACrC,MAAM4I,EAAS,IAAIP,EAAc,UAC7Bj4B,KAAK+oG,OAAQkB,GACXG,EAAY,IAAInyE,EAAc,UAChCgyE,EAAYjqG,KAAK+oG,QACrBvwE,EAAOI,gBAAgBwxE,GACvBA,EAAUxxE,gBAAgBJ,GAE1Bx4B,KAAK+oG,OAAO9yD,UAAUzd,EAAQviB,EAAG2zF,GACjCK,EAAWh0D,UAAUm0D,EAAWn0F,EAAG,MAM5CoS,QAAQtmB,EAAcshG,GACrBr7E,EAAApmB,QAAG6D,cAAc,CAAC49F,EAAK6C,MAAO7C,EAAK8C,SACnCn+E,EAAApmB,QAAGK,IAAI,WAAY,UACf,yBAEHjC,KAAK2lF,MAAM5jF,KACZ/B,KAAK2lF,MAAM5jF,GAAQ,IAEvB/B,KAAK2lF,MAAM5jF,GAAM6D,KAAKy9F,GAGnBh7E,SAAStmB,GACZ,GAAIA,EACA,OAAO/B,KAAK2lF,MAAM5jF,GAEtB,IAAI4jF,EAAQ,GAIZ,OAHA5nF,OAAO6qB,KAAK5oB,KAAK2lF,OAAOt7E,QAASggG,IAC7B1kB,EAAQA,EAAMt0E,OAAOrR,KAAK2lF,MAAM0kB,MAE7B1kB,EAGJt9D,YACH,IAAI1mB,EAAM,CAAC3B,KAAK+oG,QAKhB,GAJAhrG,OAAO6qB,KAAK5oB,KAAK2lF,OAAOt7E,QAAQtI,IAC5B/B,KAAK2lF,MAAM5jF,GAAMsI,QAAQi5F,IAAM3hG,EAAMA,EAAI0P,OAAOiyF,EAAEvC,iBAGlD58F,EAAM0xB,QAAS,CACf,IAAIxxB,EAAMrE,KAAK2I,WACftE,WAAeA,SAAW1C,EAAIJ,8BACF,OAAxBvB,KAAK+oG,OAAOjyF,UACZzS,gBAAoB1C,EAAI0T,IAAI/X,GAAKA,EAAEwZ,YAEvCtS,QAAQC,MAAMJ,GAGlB,OAAO1C,EAGJ0mB,mBACH,IAAI1mB,EAAgB,GAIpB,OAHA5D,OAAO6qB,KAAK5oB,KAAK2lF,OAAOt7E,QAAQtI,IAC5B/B,KAAK2lF,MAAM5jF,GAAMsI,QAAQi5F,IAAM3hG,EAAMA,EAAI0P,OAAOiyF,EAAEgH,wBAE/C3oG,EAGJ0mB,WACH,IAAIhkB,KAASrE,KAAK4oG,UAAU5oG,KAAK6oG,eAAe7oG,KAAK+oG,OAAOjyF,UAE5D,OADAzS,eAAmBrE,KAAKuqG,WAAWhpG,SAIhC8mB,SACH,MAAO,CACHpS,EAAGjW,KAAK4oG,OACR1yF,EAAGlW,KAAK6oG,OACR9wF,MAAO/X,KAAK+oG,OAAOjyF,QACnB8V,OAAQ5sB,KAAK+gG,YAAY1rF,IAAI/X,GAAKA,EAAEmpB,UAEpC+jF,UAAWxqG,KAAK2lF,MAAMjwB,QAAQn0D,OAC9BkpG,QAASzqG,KAAKuqG,SAAS,WAAWl1F,IAAIq1F,GAAMA,EAAGjkF,UAC/CkkF,WAAY3qG,KAAK2lF,MAAMqjB,SAASznG,OAChC4yF,SAAUn0F,KAAKuqG,SAAS,YAAYl1F,IAAIu1F,GAAMA,EAAGnkF,UACjDokF,QAAS7qG,KAAK2lF,MAAMsjB,KAAK1nG,OACzBupG,KAAM9qG,KAAKuqG,SAAS,QAAQl1F,IAAIy1F,GAAQA,EAAKrkF,UAC7CskF,aAAc/qG,KAAK2lF,MAAMujB,WAAW3nG,OACpCypG,WAAYhrG,KAAKuqG,SAAS,cAAcl1F,IAAI41F,GAAMA,EAAGxkF,WAItD4B,kBACHtqB,OAAOutC,OAAOtrC,KAAK2lF,OAAOt7E,QAAQ6gG,IAC9BA,EAAS7gG,QAAQg5F,IACbA,EAAK0D,uBAxMrB5pG,EAAAwrG,WA6MAxrG,EAAA0lG,MAAM8F,SAAWA,EASjB,MAAawC,UAAavF,EAiBtBv9E,YAAYzqB,EAAM2mB,EAAON,EAAOhN,EAAMC,EAAM0V,GACxCsK,MAAMt5B,GACNoC,KAAK65B,QAAQ,QACb75B,KAAKorG,OAASj1F,SAASoO,EAAO,IAC9BvkB,KAAKqrG,OAASl1F,SAAS8N,EAAO,IAE9BjkB,KAAKsrG,MAAQr0F,GAAQ,GACrBjX,KAAKurG,MAAQr0F,GAAQ,GAErBlX,KAAKwrG,OAAS,GAEdxrG,KAAKyrG,MAAQ,GAGbzrG,KAAK0rG,aAAe,GAGpB1rG,KAAK2rG,YAAc,GAInB3rG,KAAKy1E,MAAM7oD,GAIRvE,WACH,OAAOroB,KAAKorG,OAET/iF,WACH,OAAOroB,KAAKqrG,OAGThjF,SAASpS,EAAGC,GACf,OAAOlW,KAAK2rG,YAAY11F,GAAGC,GAGxBmS,UAAUpS,EAAGC,GAChBlW,KAAK2rG,YAAY11F,GAAGC,IAAK,EAGtBmS,YAAYpS,EAAGC,GAClBlW,KAAK2rG,YAAY11F,GAAGC,IAAK,EAGtBmS,sBACHtqB,OAAO6qB,KAAK5oB,KAAK0rG,cAAcrhG,QAAQzL,IACnCoB,KAAK0rG,aAAa9sG,IAAO,IAI1BypB,qBAAqBpS,EAAGC,GAC3BlW,KAAK0rG,aAAaz1F,EAAI,IAAMC,IAAK,EAG9BmS,oBAAoBpS,EAAGC,GAC1B,OAAOlW,KAAK0rG,aAAaz1F,EAAI,IAAMC,GAGhCmS,WACH,OAAOroB,KAAKwrG,OAGTnjF,QAAQpS,EAAGC,EAAGw2C,GACjB1sD,KAAKwrG,OAAOv1F,GAAGC,GAAKw2C,EAGjBrkC,QAAQwE,GACX7sB,KAAKyrG,MAAQ5+E,EAGVxE,UACH,OAAOroB,KAAKyrG,MAGTpjF,MAAMuE,GAET,IAAK,IAAI3W,EAAI,EAAGA,EAAIjW,KAAKorG,OAAQn1F,IAAK,CAClC,MAAM21F,EAAa,GACnB5rG,KAAK2rG,YAAY/lG,KAAK,IACtB,IAAK,IAAIsQ,EAAI,EAAGA,EAAIlW,KAAKqrG,OAAQn1F,IAAK,CAClClW,KAAK0rG,aAAaz1F,EAAI,IAAMC,IAAK,EACjC,MAAM21F,EAAU,IAAIlD,EAAS1yF,EAAGC,EAAGlW,MAG7B8rG,EAAa9jF,EAAApmB,QAAGoV,cAAchX,KAAKsrG,MAAOtrG,KAAKurG,OACrD,IAAIxzF,EAAQ,KACZ,GAAI6U,EACA7U,EAAQ6U,EAAO3W,GAAGC,OAEjB,CAED6B,GADkB,IAAI6qF,EAAAtK,cACJC,YAAY,SAC1Bv4F,KAAKsrG,MAAOtrG,KAAKurG,MAAOO,GAG5B/zF,IAAUiQ,EAAApmB,QAAG4T,kBACbxV,KAAK2rG,YAAY11F,GAAGC,IAAK,EACzB6B,EAAMsuF,UAAUrmG,MAChB6rG,EAAQ90D,SAASh/B,GACjB6zF,EAAWhmG,KAAKimG,KAGhB7rG,KAAK2rG,YAAY11F,GAAGC,IAAK,EACzB01F,EAAWhmG,KAAKoiB,EAAApmB,QAAG6T,kBAG3BzV,KAAKwrG,OAAO5lG,KAAKgmG,GAKhBh/E,GACD5sB,KAAK+rG,eAKN1jF,gBAh1BX,SAAsBwpE,EAAOttE,EAAON,GAClB,IAAVM,GAAyB,IAAVN,GACf+D,EAAApmB,QAAGK,IAAI,WAAY,eACf,wCAER,IAAK,IAAIgU,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB/R,4BAAgC8R,KAAKC,SACjCD,EAAIsO,EAAQ,GAAKrO,EAAI+N,EAAQ,GAC7B9f,wBAA4B8R,KAAKC,SACjC27E,EAAM57E,GAAGC,GAAGi+C,QACR09B,EAAM57E,EAAI,GAAGC,GAAI27E,EAAM57E,GAAGC,EAAI,KAE7BD,EAAIsO,EAAQ,GACjBpgB,wBAA4B8R,KAAKC,SACjC27E,EAAM57E,GAAGC,GAAGi+C,QAAQ09B,EAAM57E,EAAI,GAAGC,GAAI,OAEhCA,EAAI+N,EAAQ,IACjB9f,wBAA4B8R,KAAKC,SACjC27E,EAAM57E,GAAGC,GAAGi+C,QAAQ,KAAM09B,EAAM57E,GAAGC,EAAI,KA8zB/C61F,CAAa/rG,KAAKwrG,OAAQxrG,KAAKorG,OAAQprG,KAAKqrG,QAGzChjF,YACH,IAAI1mB,EAAM,GACV,IAAK,IAAIsU,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IAEnClW,KAAK2rG,YAAY11F,GAAGC,KACpBvU,EAAMA,EAAI0P,OAAOrR,KAAKwrG,OAAOv1F,GAAGC,GAAG6qF,cAI/C,OAAOp/F,EAKJ0mB,eAAexR,GAClB,IAAK,IAAIZ,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IACvC,GAAIlW,KAAK2rG,YAAY11F,GAAGC,GAAI,CACxB,MAAM81F,EAAShsG,KAAKwrG,OAAOv1F,GAAGC,GAAGxM,WAAWoN,QAC5C,IACI,GAAIk1F,IAAWn1F,EACX,MAAO,CAACZ,EAAGC,GAGnB,MAAO0O,GACH,IAAIvgB,UAAcrE,KAAK8W,gBAIvB,MAHAzS,yCAA6C4R,KAAKC,IAClD7R,GAAO,qCACPG,QAAQC,MAAMJ,GACR,IAAIK,MAAMkgB,IAMhC,OADA5kB,KAAKisG,gBACE,KAIJ5jF,cAAcxR,GACjB,IAAK,IAAIZ,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IACvC,GAAIlW,KAAK2rG,YAAY11F,GAAGC,IACpB,GAAIlW,KAAKwrG,OAAOv1F,GAAGC,GAAGxM,WAAWoN,UAAYD,EACzC,OAAO,OAGV,GAAK7W,KAAKwrG,OAAOv1F,GAAGC,GAAqB6B,QAAUlB,EACpD,OAAO,EAInB,OAAO,EAIJwR,SAAS9R,GACZ,IAAI9N,EAAS8N,EAAIhV,OAAS,EAc1B,OAbAgV,EAAIlM,QAAQ0N,IACR,GAA2B,mBAAhBA,EAAMjB,MACbrO,EAASA,GAAUzI,KAAKksG,cAAcn0F,EAAMjB,cAE3C,GAAIkP,OAAOC,UAAUlO,GACtBtP,EAASA,GAAUzI,KAAKksG,cAAcn0F,OAErC,CACD,MAAMpO,EAAMkV,KAAKC,UAAU/G,GAC3BiQ,EAAApmB,QAAGK,IAAI,OAAQ,kCACY0H,8BAG5BlB,EAGJ4f,UAAUpS,EAAGC,GAChB,GAAID,GAAK,GAAKA,EAAIjW,KAAKopG,YAAclzF,GAAK,GAAKA,EAAIlW,KAAKmpG,WACpD,OAAOnpG,KAAKwrG,OAAOv1F,GAAGC,GAErB,CACD,MAAMqO,EAAQvkB,KAAKopG,WACbnlF,EAAQjkB,KAAKmpG,WACnBnhF,EAAApmB,QAAGK,IAAI,OAAQ,yBACEgU,MAAMC,wBAAwBqO,MAAUN,OAE7D,OAAO,KAGJoE,QAAQtmB,EAAMshG,GACbr7E,EAAApmB,QAAG6D,cAAc,CAAC49F,EAAK6C,MAAO7C,EAAK8C,SACnCn+E,EAAApmB,QAAGK,IAAI,OAAQ,UACX,yBAERjC,KAAKwrG,OAAOnI,EAAK6C,OAAO7C,EAAK8C,OAAOtgB,QAAQ9jF,EAAMshG,GAClDA,EAAKgD,UAAUrmG,MAGZqoB,SAAStmB,GACZ,IAAIJ,EAAM,GACV,IAAK,IAAIsU,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IACnClW,KAAK2rG,YAAY11F,GAAGC,KACpBvU,EAAMA,EAAI0P,OAAOrR,KAAKwrG,OAAOv1F,GAAGC,GAAGq0F,SAASxoG,KAIxD,OAAOJ,EAGJ0mB,mBACH,MAAO,CACHzqB,KAAMoC,KAAK0B,UACXipB,KAAM3qB,KAAKorG,OACXxgF,KAAM5qB,KAAKqrG,QAKZhjF,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACb0lF,EAAY,GAClBnsG,KAAKwrG,OAAOnhG,QAAQ,CAAC+hG,EAASn2F,KAC1B,MAAMo2F,EAAcD,EAAQ/2F,IAAI,CAACq3C,EAAMx2C,IAC/BlW,KAAK2rG,YAAY11F,GAAGC,GACbw2C,EAAKjmC,SAGLimC,GAGfy/C,EAAUvmG,KAAKymG,KAGnB,MAAMjoG,EAAM,CACR4zC,QAAQ,EACRnrB,KAAM7sB,KAAKssG,UACX3hF,KAAM3qB,KAAKorG,OAAQxgF,KAAM5qB,KAAKqrG,OAC9Bp0F,KAAMjX,KAAKsrG,MAAOp0F,KAAMlX,KAAKurG,MAC7B1Z,MAAOsa,EACPR,YAAa3rG,KAAK2rG,YAClBD,aAAc1rG,KAAK0rG,cAEvB,OAAO3tG,OAAO4kF,OAAOv+E,EAAKwa,GAIvByJ,kBAAkB2G,GACrB,IAAK,IAAI/Y,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IACnClW,KAAK2rG,YAAY11F,GAAGC,IACpB8Y,EAAG/Y,EAAGC,EAAGlW,KAAKwrG,OAAOv1F,GAAGC,IAQjCmS,YAAY2G,GACf,IAAK,IAAI/Y,EAAI,EAAGA,EAAIjW,KAAKwrG,OAAOjqG,OAAQ0U,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKwrG,OAAOv1F,GAAG1U,OAAQ2U,IACvC8Y,EAAG/Y,EAAGC,EAAGlW,KAAKwrG,OAAOv1F,GAAGC,IAK7BmS,mBACH,IAAI1mB,EAAgB,CAAC3B,MAIrB,OAHAA,KAAKusG,kBAAkB,CAACt2F,EAAGC,EAAGw2C,KAC1B/qD,EAAMA,EAAI0P,OAAOrR,KAAKwrG,OAAOv1F,GAAGC,GAAGo0F,sBAEhC3oG,EAGJ0mB,gBACH,MAAMmkF,EAAmB,GACzBxsG,KAAKysG,YAAY,CAACx2F,EAAGC,EAAGw2C,KAChB1sD,KAAK2rG,YAAY11F,GAAGC,GACpBs2F,EAAO5mG,KAAK5F,KAAKwrG,OAAOv1F,GAAGC,GAAGxM,WAAWoN,SAGzC01F,EAAO5mG,KAAM5F,KAAKwrG,OAAOv1F,GAAGC,GAAqB6B,SAMtDsQ,iBACH,MAAM8jF,EAAsB,GACtBO,EAAwB,GACxBC,EAAuB,GAC7B3sG,KAAKysG,YAAY,CAACx2F,EAAGC,EAAGw2C,KACfA,EAAuB1U,OAASm0D,EAAUvmG,KAAK,CAACqQ,EAAGC,IAC/ClW,KAAK2rG,YAAY11F,GAAGC,GAAKw2F,EAAY9mG,KAAK,CAACqQ,EAAGC,IACjDy2F,EAAW/mG,KAAK,CAACqQ,EAAGC,MAG9B,IAAI7R,aAAiBrE,KAAK8W,wBAC1BzS,yBAA6B8nG,EAAUjoF,KAAK,SAC5C7f,wBAA4BqoG,EAAYxoF,KAAK,SAC7C7f,uBAA2BsoG,EAAWzoF,KAAK,SAC3ClkB,KAAKisG,gBACLznG,QAAQU,IAAI,eAAgBlF,KAAKwrG,OAAO,GAAG,IAC3ChnG,QAAQU,IAAIb,IArVpBlH,EAAAguG,OAyVAhuG,EAAA0lG,MAAMsI,KAAOA,EAQb,MAAanC,UAAiBlD,EAE1Bz9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,YAwBVxR,UAAUzqB,EAAcsb,GAC3B,MAAM0zF,EAAQ5sG,KAAK6sG,WACbC,EAAU9sG,KAAK+sG,aACrB,IAAIh1F,EAAQqrF,EAAUxlG,EAAMgvG,EAAO1zF,GAInC,OAHKnB,IACDA,EAAQqrF,EAAUxlG,EAAMkvG,EAAS5zF,IAE9BnB,EAGJsQ,UAAU2kF,GACbhtG,KAAKitG,WAAWD,GAGb3kF,QAAQ6kF,GACXltG,KAAKitG,WAAWC,GAGb7kF,WACH,OAAOroB,KAAK+lG,UAAU57F,OAAO26F,GAAuB,SAAjBA,EAAGtkG,WAGnC6nB,aACH,OAAOroB,KAAK+lG,UAAU57F,OAAO26F,GAAuB,WAAjBA,EAAGtkG,WAGnC6nB,qBAAqB6kF,EAAMF,EAAQrgF,EAAIU,GAC1C,MAAOu3E,EAAKC,GAAO7kG,KAAKwkG,eAAe0I,EAAMF,GAC7C,GAAsB,WAAlBnI,EAAIrkG,UAAwB,CAC5B,MAAMuB,EAAO8iG,EAAIrkG,UACjBwnB,EAAApmB,QAAGK,IAAI,iBAAkB,wDACYF,MArvCjD,SAAkCorG,EAAOC,GACrC,MAAMC,EAASF,EAAMp1F,MACfu1F,EAASF,EAAMr1F,MACrB,IAAI6T,EAAK1kB,KAAK4C,MAAMujG,EAAO7pF,SAASvM,KAAO,GACvC4U,EAAKshF,EAAMj3F,IAIf,MAAMq3F,EAAOF,EAAO7pF,SACpB,IAAIuL,EAAQw+E,EAAK9+E,QAAQ7C,EAAIC,GAC7B,KAAOkD,EAAM+mB,kBACTlqB,GAAM,KACK2hF,EAAKt2F,OACZ2U,EAAK,EACDC,EAAK,KAAMA,GAEnBkD,EAAQw+E,EAAK9+E,QAAQ7C,EAAIC,GAG7B,MAAMiD,EAAQy0E,EAA6B+J,IACpC78E,EAAIC,GAAM,CAAC5B,EAAMnT,OAAQmT,EAAM9S,QAEhCwxF,EAAW,IAAIv1E,EAAc,WAAYo1E,EAAQC,GACjDG,EAAW,IAAIx1E,EAAc,aAAcq1E,EAAQD,GACzDG,EAASr5C,QAAQs5C,GACjBJ,EAAOp3D,UAAUu3D,EAAU5hF,EAAIC,GAC/ByhF,EAAOr3D,UAAUw3D,EAAUh9E,EAAIC,GAiuC3Bg9E,CAFiB,CAACx3F,EAAG,IAAM,EAAG6B,MAFf6sF,EAAI+I,UAAUhhF,IAGV,CAAC5U,MAFL8sF,EAAI8I,UAAUtgF,KAM1BhF,gBAAgB29E,EAAOC,EAAOt5E,EAAIU,GACrC,MAAOu3E,EAAKC,GAAO7kG,KAAKwkG,eAAewB,EAAOC,GAG9C,GAAsB,SAAlBrB,EAAIpkG,WACJ,GAAsB,WAAlBqkG,EAAIrkG,UAEJ,YADAR,KAAK4tG,qBAAqBhJ,EAAKC,EAAKl4E,EAAIU,QAI3C,GAAsB,WAAlBu3E,EAAIpkG,WACa,SAAlBqkG,EAAIrkG,UAGJ,YADAR,KAAK4tG,qBAAqB/I,EAAKD,EAAKv3E,EAAIV,GAKhDuK,MAAMyvE,gBAAgBX,EAAOC,EAAOt5E,EAAIU,GAIrChF,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAM,CACRypG,OAAQ7tG,KAAK6sG,WAAWtrG,OACxB2rG,KAAMltG,KAAK6sG,WAAWx3F,IAAI63F,GAAQA,EAAKzmF,UACvCqnF,SAAU9tG,KAAK+sG,aAAaxrG,OAC5ByrG,OAAQhtG,KAAK+sG,aAAa13F,IAAI23F,GAAUA,EAAOvmF,WAEnD,OAAO1oB,OAAO4kF,OAAOv+E,EAAKwa,IAlGlCzhB,EAAA6rG,WAqGA7rG,EAAA0lG,MAAMmG,SAAWA,EAQjB,MAAa+E,UAAqB/G,EAE9B3+E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,QACb75B,KAAKonG,UAAY,KAGd/+E,YAAYmQ,GACfx4B,KAAKonG,UAAY5uE,EAGdnQ,oBAAoB28E,GAClBh9E,EAAApmB,QAAG6D,cAAc,CAACu/F,IAInBh9E,EAAApmB,QAAGK,IAAI,eAAgB,sBACnB,gCAJJjC,KAAKonG,UAAYpC,EAQlB38E,cACH,OAAO08E,EAAY/kG,KAAKknG,QAASlnG,KAAKonG,WAGnC/+E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAW,GAIjB,OAHIpE,KAAKonG,YACLhjG,EAAI4gG,SAAWhlG,KAAKonG,WAEjBrpG,OAAO4kF,OAAOv+E,EAAKwa,GAIvByJ,YAAY4vB,GACf,GAAuB,OAAnBj4C,KAAKonG,UAAoB,CACzB,MAAMrvF,EAAQ/X,KAAKknG,QAAQjvD,GACrBzf,EAAS,IAAIP,EAAc,aAAclgB,GACzC1C,EAAM0C,EAAMyL,SACZwI,EAAO9kB,KAAK4C,MAAMuL,EAAI4B,KAAO,GAGnC,IAAIhB,EAAI+V,EACJ9V,EAHSb,EAAI6B,KAAO,EAOxB,MAAQ7B,EAAIoZ,QAAQxY,EAAGC,GAAG0Z,UACZ,IAAN3Z,IAAUA,EAAI+V,EAAO,GACrB/V,GAAK+V,KAAS/V,EACdA,EAAI+V,KAAS/V,EACbA,IAAMZ,EAAI4B,KAAO,IACjBhB,EAAI+V,IACF9V,GAIV6B,EAAMk+B,UAAUzd,EAAQviB,EAAGC,GAC3BlW,KAAKonG,UAAY,CAACnvD,cAAahiC,IAAGC,UAGlC8R,EAAApmB,QAAGK,IAAI,eAAgB,cACnB,4BAhEhB9E,EAAA4wG,eAoEA5wG,EAAA0lG,MAAMkL,aAAeA,EAMrB,MAAaC,UAAuBhH,EAChC3+E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,UAGVxR,cACH,OAAO,MAPflrB,EAAA6wG,iBAYA7wG,EAAA0lG,MAAMmL,eAAiBA,EAOvB,MAAa/E,UAAanD,EACtBz9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,QAGVxR,cACH,OAAOroB,KAAK+lG,UAGT19E,WAAW4lF,GACTjuG,KAAKitG,WAAWgB,IACjBjmF,EAAApmB,QAAGK,IAAI,aAAc,qBACTjC,KAAK0B,kCAIlB2mB,aAAa6lF,EAAIC,EAAIxhF,EAAIU,GAE5B,OAnzCR,SAA6Bo3E,EAAUC,EAAQC,EAAQh4E,EAAIU,GACvD,MAAMq3C,EAAQj8C,EAAIjL,aAAa,CAAC,QAAS,QAAS,OAAQ,SACpDonD,EAAQk+B,EAAap+B,IACpBkgC,EAAKC,GAAOL,EAAeC,EAAUC,EAAQC,GAE9CyJ,EAAWxJ,EAAIl7F,SAASijB,GACxB0hF,EAAWxJ,EAAIn7F,SAAS2jB,GAKxBihF,EAAsBnxG,EAAA8nG,eAAemJ,EAAU,OAAQ1pC,GAAO,GAC9D6pC,EAAsBpxG,EAAA8nG,eAAeoJ,EAAU,OAAQzpC,GAAO,GAKpE,GAAyB,IAArB0pC,EAAU/sG,QAAqC,IAArBgtG,EAAUhtG,OACpC,OAAO,EAGX,MAAMitG,EAAQF,EACRG,EAAQF,EAERG,EAAWF,EAAMjtG,OACjBotG,EAAWF,EAAMltG,OACjBqtG,EAASF,GAAYC,EAAWD,EAAWC,EAEjD,IAAK,IAAItxG,EAAI,EAAGA,EAAIuxG,EAAQvxG,IACxBmxG,EAAMnxG,GAAG82D,QAAQs6C,EAAMpxG,IAE3B,OAAO,EAmxCSwxG,CAAoB7uG,KAAK+lG,UAAWmI,EAAIC,EAAIxhF,EAAIU,GAIzDhF,WAAWi/C,GACd,OAAOtnE,KAAKmoG,WAAW7gC,GAGpBj/C,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAM,CACR0qG,UAAW9uG,KAAK+lG,UAAUxkG,OAC1B0sG,QAASjuG,KAAK+lG,UAAU1wF,IAAIiyD,GAAKA,EAAE7gD,WAEvC,OAAO1oB,OAAO4kF,OAAOv+E,EAAKwa,IAhClCzhB,EAAA8rG,OAmCA9rG,EAAA0lG,MAAMoG,KAAOA,EAOb,MAAa8F,UAAoB/H,EAI7B3+E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,WACb75B,KAAKonG,UAAY,KACjBpnG,KAAKgvG,OAAS,GAGX3mF,kBACHroB,KAAKgvG,OAAO3kG,QAAQpH,IACXA,EAAK83B,eAENhU,EAAKqmB,eAAenqC,KAKzBolB,QAAQplB,GACXjD,KAAKgvG,OAAOppG,KAAK3C,GAGdolB,WACH,OAAOroB,KAAKgvG,OAGT3mF,oBAAoB28E,GAClBh9E,EAAApmB,QAAG6D,cAAc,CAACu/F,IAInBh9E,EAAApmB,QAAGK,IAAI,cAAe,sBAClB,gCAJJjC,KAAKonG,UAAYpC,EASlB38E,cACH,OAAO08E,EAAY/kG,KAAKknG,QAASlnG,KAAKonG,WAGnC/+E,YAAY4vB,GACf,GAAuB,OAAnBj4C,KAAKonG,UAAoB,CACzB,MAAMrvF,EAAQ/X,KAAKknG,QAAQjvD,GACrBzf,EAAS,IAAIP,EAAc,aAAclgB,GAC/CA,EAAMk+B,UAAUzd,EAAQ,EAAG,GAC3Bx4B,KAAKonG,UAAY,CAACnvD,cAAahiC,EAAG,EAAGC,EAAG,QAGxC8R,EAAApmB,QAAGK,IAAI,cAAe,cAClB,2BAMLomB,gBACHq7E,EAAoB1jG,KAAKknG,SAGtB7+E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbriB,EAAW,CACb6qG,MAAOjvG,KAAKgvG,OAAO35F,IAAIpS,GAAQA,EAAKwjB,WAKxC,OAHIzmB,KAAKonG,YACLhjG,EAAI4gG,SAAWhlG,KAAKonG,WAEjBrpG,OAAO4kF,OAAOv+E,EAAKwa,IAtElCzhB,EAAA4xG,cAyEA5xG,EAAA0lG,MAAMkM,YAAcA,EAMpB,MAAa7F,UAAmBpD,EAG5Bz9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,cACb75B,KAAKknG,QAAU,GAGZ7+E,SAAStQ,GACZ,OAAO/X,KAAKknG,QAAQthG,KAAKmS,GAGtBsQ,YACH,OAAOroB,KAAKknG,QAGT7+E,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbk9E,EAAU3jG,KAAKknG,QAAQ3lG,OACvB6C,EAAM,CACVu/F,UACA/2E,OAAQ5sB,KAAKknG,QAAQ7xF,IAAI/X,GAAKA,EAAEwZ,UAMlC,OAJgB,IAAZ6sF,GACA37E,EAAApmB,QAAGK,IAAI,mBAAoB,eACjBjC,KAAK0B,mCAEZ3D,OAAO4kF,OAAOv+E,EAAKwa,IA5BlCzhB,EAAA+rG,aA+BA/rG,EAAA0lG,MAAMqG,WAAaA,EAOnB,MAAagG,UAAiBtJ,EAO1Bv9E,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAK65B,QAAQ,SAEb75B,KAAKmvG,OAAS,GAEdnvG,KAAKovG,cAAgB,EACrBpvG,KAAKyrG,MAAQ,GAGVpjF,UACH,OAAOroB,KAAKyrG,MAGTpjF,QAAQwE,GAAO7sB,KAAKyrG,MAAQ5+E,EAG5BxE,QAAQ0uC,GACXA,EAAKsvC,UAAUrmG,MACfA,KAAKmvG,OAAOvpG,KAAKmxD,GAGd1uC,YACH,IAAIuE,EAAS,GAIb,OAHA5sB,KAAKmvG,OAAO95F,IAAI0hD,IACZnqC,EAASA,EAAOvb,OAAO0lD,EAAKgqC,eAEzBn0E,EAGJvE,WACH,OAAOroB,KAAKmvG,OAIT9mF,SAAStmB,GACZ,IAAI4jF,EAAQ,GAIZ,OAHA3lF,KAAKmvG,OAAO9kG,QAAQ8b,IAChBw/D,EAAQA,EAAMt0E,OAAO8U,EAAEokF,SAASxoG,MAE7B4jF,EAIJt9D,YACH,MAAM1mB,EAAM,GAQZ,OAPA3B,KAAKuqG,WAAWlgG,QAAQg5F,GACpBA,EAAKtC,YAAY12F,QAAQ/M,GACrBA,EAAEo4C,YAAYrrC,QAAQglG,GAClB1tG,EAAIiE,KAAKypG,MAId1tG,EAKJ0mB,mBACH,IAAImN,EAAqB,CAACx1B,MAI1B,OAHAA,KAAKmvG,OAAO95F,IAAI0hD,IACZvhC,EAAWA,EAASnkB,OAAO0lD,EAAKuzC,sBAE7B90E,EAGJnN,iBACH,OAAOroB,KAAKmvG,OAAOnvG,KAAKovG,eAGrB/mF,SACH,MAAMzJ,EAAOsY,MAAMzQ,SACbswC,EAAO/2D,KAAKmvG,OAAO95F,IAAIi6F,GAAMA,EAAG7oF,UACtC,IAAI8oF,GAAiB,EACjBvvG,KAAKssG,UAAUptG,eAAe,oBAC9BqwG,EAAiBvvG,KAAKssG,UAAUiD,gBAEpC,MAAMnrG,EAAM,CACRyoB,KAAM7sB,KAAKssG,UACXkD,OAAQxvG,KAAKmvG,OAAO5tG,OACpBw1D,OACAw4C,kBAKJ,OAHKnrG,EAAIyoB,KAAKkqC,OACV3yD,EAAIyoB,KAAKkqC,KAAO/2D,KAAKyvG,oBAElB1xG,OAAO4kF,OAAOv+E,EAAKwa,GAIvByJ,mBACH,MAAMqnF,EAAW,GAIjB,OAHA1vG,KAAKmvG,OAAO9kG,QAAQ,SAAS0sD,GACzB24C,EAAS9pG,KAAKmxD,EAAK04C,sBAEhBC,EAGJrnF,cACH,IAAI1mB,EAAkC,CAAC0mB,CAACroB,KAAK8W,SAAU9W,MAUvD,OATAA,KAAKmvG,OAAO9kG,QAAQ0sD,IAChBp1D,EAAIo1D,EAAKjgD,SAAWigD,IAEV/2D,KAAKuqG,WACblgG,QAAQg5F,IACV1hG,EAAI0hG,EAAKvsF,SAAWusF,EACpB,MAAMsM,EAAWtM,EAAKuM,cACtBjuG,EAAM5D,OAAO4kF,OAAOhhF,EAAKguG,KAEtBhuG,GApHfxE,EAAA+xG,WAuHA/xG,EAAA0lG,MAAMqM,SAAWA,EAMjB,MAAaW,EAQTxnF,cACIroB,KAAKu6B,YAAc,KACnBv6B,KAAK+oG,OAAS,KACd/oG,KAAK8vG,OAAS,GACd9vG,KAAK06B,cAAe,EAGpB16B,KAAK01B,WAAY,EAGdrN,SAAStQ,GACZ/X,KAAK+oG,OAAShxF,EAGXsQ,SAAS+C,GACZprB,KAAK8vG,OAAS1kF,EAGX/C,cACH,OAAOroB,KAAK06B,aAITrS,OAAOyN,EAAS3wB,GACfnF,KAAKu6B,aACDp1B,EAAK8E,MAAM6M,UAAY9W,KAAKu6B,YAAYzjB,UACxC9W,KAAK+vG,mBACLhpF,EAAKqmB,eAAeptC,OAKzBqoB,WACH,OAAOroB,KAAK+oG,OAGT1gF,gBACH,OAAOroB,KAAKu6B,YAGTlS,cAAcsS,GACbA,GACA36B,KAAKu6B,YAAcI,EACnB5T,EAAK4O,YAAY3N,EAAApmB,QAAGqJ,iBAAkBjL,OAGtCgoB,EAAApmB,QAAGK,IAAI,YAAa,gBAChB,gCAILomB,mBACHroB,KAAK06B,cAAe,EACpB16B,KAAKu6B,YAAc,KACnBv6B,KAAK8vG,OAAOzlG,QAAQihB,IAChB,MAAMxrB,EAAOE,KAAKyuB,QAAQnD,GACTxrB,EAAKkwG,UACbC,cACT,MAAMrsG,EAAQ9D,EAAK4a,WACf9W,GACAA,EAAMyG,QAAQvD,IACNA,EAAKoC,IAAI,WACTpC,EAAK4yB,OAAO,cAOzBrR,QAAQiD,GACX,OAAOtrB,KAAK+oG,OAAOvlF,SAASiL,QAAQnD,EAAG,GAAIA,EAAG,IAG3CjD,YAAYpe,GACXjK,KAAK06B,eACL16B,KAAK06B,cAAe,EACpB16B,KAAKkwG,cAAcjmG,GACnBjK,KAAK8vG,OAAOzlG,QAAQihB,IAChB,MAAMxrB,EAAOE,KAAKyuB,QAAQnD,GACTxrB,EAAKkwG,UACbG,QAAQlmG,GACjB,MAAMrG,EAAQ9D,EAAK4a,WACf9W,GACAA,EAAMyG,QAAQvD,IACLA,EAAKoC,IAAI,WACVpC,EAAKwZ,IAAI,IAAI6J,EAAUwyD,aASxCt0D,aACH,MAAM5f,EAAS,GAOf,OANAzI,KAAK8vG,OAAOzlG,QAAQihB,IAChB,MAAMxrB,EAAOE,KAAK+oG,OAAOvlF,SAASiL,QAAQnD,EAAG,GAAIA,EAAG,IAC/CxrB,EAAKwiG,YACN75F,EAAO7C,KAAK9F,KAGb2I,EAIJ4f,iBAAiB+nF,GACpB,IAAIC,EAAQ,EACZrwG,KAAK8vG,OAAOzlG,QAAQihB,IACHtrB,KAAK+oG,OAAOvlF,SAASiL,QAAQnD,EAAG,GAAIA,EAAG,IAC1Cg3E,YACF+N,EAAQD,EAAS7uG,SACjB6uG,EAASC,GAAO/vF,IAAI,IAAI6J,EAAUwyD,QAClC38E,KAAK+oG,OAAO/6E,QAAQoiF,EAASC,GAAQ/kF,EAAG,GAAIA,EAAG,MAC7C+kF,KAMXhoF,SACH,MAAMjkB,EAAW,CACb22B,YAAa/6B,KAAK06B,aAClB3iB,MAAO/X,KAAK+oG,OAAOjyF,QACnBsU,MAAOprB,KAAK8vG,QAKhB,OAHK9vG,KAAK06B,eACNt2B,EAAI82B,WAAal7B,KAAKu6B,YAAYzjB,SAE/B1S,GAzIfjH,EAAA0yG,YA6IA1yG,EAAA0lG,MAAMgN,UAAYA,EAElB1yG,EAAA0lG,MAAMyN,OAAS,SAASl4C,GACpB,GAAIA,EAAQ53D,QAAS,CACjB,MAAMuB,EAAOq2D,EAAQ53D,UACrB,MAAO,qCAAuCq2B,KAAK90B,GAEvD,OAAO,sKCxiEX,MAAAimB,EAAAC,EAAAhrB,EAAA,IACAszG,EAAAtzG,EAAA,KAEMuzG,OAACA,GAAUD,EAAAE,KAEJtzG,EAAAuzG,KAAY,GACzBvzG,EAAAuzG,KAAKC,UAAY,KACjBxzG,EAAAuzG,KAAKE,UAAY,YACjBzzG,EAAAuzG,KAAKG,WAAa,aAgDlB,MAAMC,EAAkB,SAAS3rG,GAC7B,MAAMgqC,EAAQ,GAyBd,OAxBAhqC,EAAKkF,QAAQ,CAACvD,EAAMzJ,KAChB,MAAM6hB,EAAQqxF,EAAAE,KAAKM,YAAY1zG,GAC/B,GAAKyJ,EAAoBlI,IAAK,CAC1B,MAAMsnC,EAAUp/B,EACVw2D,EAAKizC,EAAAE,KAAKO,YAAY9qE,EAAQtnC,KAChCsnC,EAAQ+qE,KACR9hE,EAAMmuB,GAAMp3B,EAAQ+qE,KAEf/qE,EAAQvnB,KACbwwB,EAAMmuB,GAAMp3B,EAAQvnB,KAEfunB,EAAQgrE,aACb/hE,EAAMmuB,GAAM,CAAC4zC,WAAYhrE,EAAQgrE,kBAGpC,GAAsC,IAAjCpqG,EAAsBvF,OAC5B4tC,EAAMjwB,GAASpY,MAEd,CACD,IAAIzC,EAAM,qDACVA,GAAO,sDACP2jB,EAAApmB,QAAGK,IAAI,UAAW,kBAAmBoC,MAGtC8qC,GAGXhyC,EAAAuzG,KAAKS,gBAAkB,SAASC,GAC5B,MAA4B,mBAAdA,GAGlBj0G,EAAAuzG,KAAKW,WAAa,SAASD,GACvB,OAAOA,GAAkC,iBAAdA,GAM/B,MAAaE,EAWTjpF,YAAYljB,EAAkB,IAC1BnF,KAAKmvC,MAAQ2hE,EAAgB3rG,GAC7BnF,KAAKqE,IAAM,GACXrE,KAAKuxG,IAAM,GACXvxG,KAAKwxG,KAAO,GACZxxG,KAAKyxG,WAAY,EAEjBzxG,KAAKulB,OAAS,KAGX8C,QAAQzqB,GACXoC,KAAKpC,KAAOA,EAGTyqB,OAAOhkB,GACVrE,KAAKqE,IAAMA,EAGRgkB,UACCroB,KAAKqE,IAAI9C,OAAS,GAClBymB,EAAApmB,QAAGslB,QAAQlnB,KAAKqE,KAIjBgkB,UAAU9C,GACbvlB,KAAKulB,OAASA,EAGX8C,YACH,OAAOroB,KAAKulB,OAGT8C,QAAQqpF,EAAc5qG,GACzB,MAAMoY,EAAQqxF,EAAAE,KAAKO,YAAYU,GAC/B1xG,KAAKmvC,MAAMjwB,GAASpY,EAGjBuhB,WAAY,OAAOroB,KAAKyxG,UAExBppF,YAAY2G,GACfhvB,KAAKkxD,SAAWliC,EAGb3G,UACH,MAAMjkB,EAAM,CAACmtG,IAAK,GAAIC,KAAM,IAO5B,OANAzzG,OAAO6qB,KAAK5oB,KAAKmvC,OAAO9kC,QAAQ6U,IAC5B,MAAMyd,EAAO4zE,EAAAE,KAAKM,YAAY7xF,GAC9B9a,EAAIu4B,GAAQ38B,KAAKmvC,MAAMjwB,GAAO,KAElC9a,EAAImtG,IAAMvxG,KAAKuxG,IACfntG,EAAIotG,KAAOxxG,KAAKwxG,KACTptG,EAGJikB,QAAQvhB,GACPyM,MAAMC,QAAQ1M,GACd9G,KAAKwxG,KAAOxxG,KAAKwxG,KAAKngG,OAAOvK,GAG7B9G,KAAKwxG,KAAK5rG,KAAKkB,GAIhBuhB,OAAOvhB,GACNyM,MAAMC,QAAQ1M,GACd9G,KAAKuxG,IAAMvxG,KAAKuxG,IAAIlgG,OAAOvK,GAG3B9G,KAAKuxG,IAAI3rG,KAAKkB,GAIfuhB,OAAOljB,GACVX,QAAQU,YAAYlF,KAAKpC,UAAWuH,GAGjCkjB,OAAOqpF,GACV,MAAMC,EAAcpB,EAAAE,KAAKO,YAAYU,GACrC,GAAI1xG,KAAKmvC,MAAMjwC,eAAeyyG,GAAc,CACxC,MAAMP,EAAYpxG,KAAKmvC,MAAMwiE,GAC7B,OAAuC,IAAlCP,EAAuB7vG,OACjB6vG,EAAU,GAEXA,EAA0BF,WACxBE,EAA0BF,WAG3BE,IAlGvBj0G,EAAAm0G,WAwGAn0G,EAAAuzG,KAAKh5E,KAAO45E,EAKZ,MAAaM,UAAqBN,EAC9BjpF,cACI6O,QAGG7O,OAAOqpF,GAEV,OAAkB,IADAnB,EAAAE,KAAKO,YAAYU,GAExBv0G,EAAAuzG,KAAKC,UAET3wG,KAGJqoB,UAMH,MALY,CACR/O,EAAG,gBACHi4F,IAAKvxG,KAAKuxG,IACVC,KAAMxxG,KAAKwxG,OAjBvBr0G,EAAAy0G,eAuBA5pF,EAAApmB,QAAG0D,QAAQssG,EAAcN,GACzBn0G,EAAAuzG,KAAKmB,SAAWD,EAIhB,MAAaE,UAAqBR,EAG9BjpF,YAAYljB,GACR+xB,MAAM/xB,GACN,MAAM4sG,EAAYxB,EAAAE,KAAKO,YAAYT,EAAAE,KAAKuB,IAAIC,WAC5CjyG,KAAKmvC,MAAM4iE,GAAa,CAAC,YAAa50G,EAAAuzG,KAAKC,WAGxCtoF,OAAOqpF,GACV,MAAMN,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,GAAI1xG,KAAKmvC,MAAMjwC,eAAekyG,GAAY,CACtC,MAAM9yG,EAAQ0B,KAAKmvC,MAAMiiE,GAAW,GAIpC,OAHI9yG,IAAUnB,EAAAuzG,KAAKC,WAAa3wG,KAAKkyG,QAChClyG,KAAKkyG,SAEH5zG,EAEX,OAAO0B,MAlBf7C,EAAA20G,eAqBA30G,EAAAuzG,KAAKyB,SAAWL,EAGhB,MAAaM,UAA2Bd,EACpCjpF,YAAYljB,GACR+xB,MAAM/xB,GAGHkjB,OAAOqpF,GACV,MAAMN,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,OAAI1xG,KAAKmvC,MAAMjwC,eAAekyG,GACnBpxG,KAAKmvC,MAAMiiE,GAAW,GAE1BpxG,MAVf7C,EAAAi1G,qBAcAj1G,EAAAuzG,KAAK2B,eAAiBD,EAKtB,MAAaE,UAAuBhB,EAGhCjpF,YAAYljB,EAAkB,IAC1B+xB,MAAM/xB,GACNnF,KAAKuyG,kBAAmB,EACxBvyG,KAAKyxG,WAAY,EAGdppF,kBACHroB,KAAKuyG,kBAAmB,EAGrBlqF,OAAOqpF,GACV,GAAIlB,EAAOgC,cAAcd,GAErB,OADA1xG,KAAKkxD,SAASwgD,GACP1xG,KAEN,GAAIwwG,EAAOiC,SAASf,GAAO,CAC5B,MAAMgB,EAAWnC,EAAAE,KAAKO,YAAYU,GAC5BiB,EAAS3yG,KAAKmvC,MAAMujE,GAC1B,OAAKC,EAAuBzB,WAChByB,EAAuBzB,WAE5ByB,EAEN,OAAI3yG,KAAKuyG,kBAAoB/B,EAAOoC,YAAYlB,IACjD1xG,KAAKkxD,SAASwgD,GACP1xG,MAEJ7C,EAAAuzG,KAAKC,WA9BpBxzG,EAAAm1G,iBAkCAtqF,EAAApmB,QAAG0D,QAAQgtG,EAAgBhB,GAC3Bn0G,EAAAuzG,KAAKmC,WAAaP,EAIlBn1G,EAAA21G,iBAAA,cAAsCR,EAIlCjqF,YAAYljB,EAAkB,IAC1B+xB,MAAM/xB,GACNnF,KAAK+yG,eAAiB,KAGnB1qF,OAAOqpF,GACV,MAAM5rG,EAAMwsG,EAAerzG,UAAU+zG,OAAOx1G,KAAKwC,KAAM0xG,GACvD,GAAI5rG,IAAQ3I,EAAAuzG,KAAKC,UAAW,CACxB,GAAIH,EAAOyC,aAAavB,GAIpB,OAHI1xG,KAAK+yG,gBACL/yG,KAAK+yG,eAAerB,GAEjB1xG,KAEN,GAAIwwG,EAAO0C,aAAaxB,GAIzB,OAHI1xG,KAAK+yG,gBACL/yG,KAAK+yG,eAAerB,GAEjB1xG,KAEN,GAAI0xG,IAASlB,EAAOwB,IAAImB,OAAQ,CACjC,MAAMT,EAAWnC,EAAAE,KAAKO,YAAYU,GAC5BiB,EAAS3yG,KAAKmvC,MAAMujE,GAC1B,OAAKC,EAAuBzB,WAChByB,EAAuBzB,WAE5ByB,EAEX,OAAOx1G,EAAAuzG,KAAKC,UAEhB,OAAO7qG,IAKf,MAAastG,UAAsB9B,EAC/BjpF,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAKyxG,WAAY,EAGdppF,OAAOqpF,GACV,GAAIlB,EAAOgC,cAAcd,GAAO,CAC5B,MAAM99F,EAAO28F,EAAAE,KAAKD,OAAO6C,OAAO3B,GAChC,OAAO1xG,KAAKkxD,SAASryD,KAAK,KAAM+U,GAEpC,OAAOzW,EAAAuzG,KAAKC,WAXpBxzG,EAAAi2G,gBAcAj2G,EAAAuzG,KAAK4C,UAAYF,EAGjBj2G,EAAAo2G,kBAAA,cAAuCjB,EAInCjqF,YAAYljB,EAAkB,GAAI8E,GAC9BitB,MAAM/xB,GACNnF,KAAKiK,MAAQA,EACbjK,KAAKyxG,WAAY,EACjB,MAAM3yE,EAAQ9+B,KAAKiK,MAAMq5B,WACzB,GAAIxE,EAAM00E,WAAY,CAClB,MAAMC,EAAS30E,EAAM00E,WAAW30G,KAAKigC,GACrC9+B,KAAK0zG,YAAYD,QAGjBzrF,EAAApmB,QAAGK,IAAI,oBAAqB,cACxB,6CAGR68B,EAAM60E,iBACD70E,EAAM80E,oBAOPpvG,QAAQU,IAAI,8BAJZ45B,EAAM00E,aACNhvG,QAAQU,IAAI,0CAQbmjB,OAAOqpF,GACV,MAAM5rG,EAAMwsG,EAAerzG,UAAU+zG,OAAOx1G,KAAKwC,KAAM0xG,GACvD,GAAI5rG,IAAQ3I,EAAAuzG,KAAKC,UACb,OAAO7qG,EAIX,OAAQ4rG,GACJ,KAAKnB,EAAAE,KAAKuB,IAAI6B,KAEV,OADA7zG,KAAKiK,MAAMq5B,WAAWwwE,aACf9zG,KAEX,KAAKuwG,EAAAE,KAAKuB,IAAI+B,KAEV,OADA/zG,KAAKiK,MAAMq5B,WAAW0wE,aACfh0G,KAEX,KAAKuwG,EAAAE,KAAKuB,IAAImB,OAAQ,CAClB,MAAMT,EAAWnC,EAAAE,KAAKO,YAAYU,GAClC,OAAO1xG,KAAKmvC,MAAMujE,GAEtB,QACI,OAAOv1G,EAAAuzG,KAAKC,UAGpB,OAAOxzG,EAAAuzG,KAAKC,YAWpB,MAAasD,UAAsBnC,EAS/BzpF,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAKyxG,WAAY,EAGjBzxG,KAAKk0G,WAAa,GAGlBl0G,KAAKm0G,aAAe,GAGpBn0G,KAAKo0G,YAAc,GACnBp0G,KAAKq0G,WAAa,GAGlBr0G,KAAKs0G,UAAY,GAIdjsF,OAAOqpF,GACV,GAAI1xG,KAAKk0G,WAAWh1G,eAAewyG,GAE/B,OADA1xG,KAAKs0G,UAAYt0G,KAAKk0G,WAAWxC,GAC1B1xG,KAEN,CACD,MAAMoxG,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,GAAI1xG,KAAKmvC,MAAMjwC,eAAekyG,GAAY,CACtC,MAAM9yG,EAAQ0B,KAAKmvC,MAAMiiE,GAAW,GAIpC,OAHI9yG,IAAUnB,EAAAuzG,KAAKC,WAAa3wG,KAAKkyG,QAChClyG,KAAKkyG,SAEH5zG,EAEX,MAAMi2G,EAAYv0G,KAAKm0G,aAAan0G,KAAKs0G,WACzC,GAAIC,EAAUr1G,eAAekyG,GAAY,CAErC,OADcmD,EAAUnD,GAAW,GAGvC,OAAOpxG,MAIRqoB,SAAS9lB,EAAOiyG,GACnBx0G,KAAKm0G,aAAa5xG,GAASuuG,EAAgB0D,GAGxCnsF,cAAc9lB,EAAOmvG,GACxB1xG,KAAKk0G,WAAWxC,GAAQnvG,EAIrB8lB,UACH,MAAMosF,EAAU3C,EAAa7yG,UAAUy1G,QAAQl3G,KAAKwC,MAC9CuC,EAAQvC,KAAKs0G,UACbnlE,EAAQnvC,KAAKm0G,aAAa5xG,GAChC,IAAI6B,EAAM,CAACmtG,IAAKvxG,KAAKuxG,IAAKC,KAAMxxG,KAAKwxG,MAYrC,OAXAzzG,OAAO6qB,KAAKumB,GAAO9kC,QAAQ6U,IACvB,MAAMyd,EAAO4zE,EAAAE,KAAKM,YAAY7xF,GAC9B9a,EAAIu4B,GAAQwS,EAAMjwB,GAAO,KAE7B9a,EAAMrG,OAAO4kF,OAAOv+E,EAAKqwG,GACrBz0G,KAAKq0G,WAAW9xG,IAChB6B,EAAImtG,IAAI3rG,KAAK5F,KAAKq0G,WAAW9xG,IAE7BvC,KAAKo0G,YAAY7xG,IACjB6B,EAAIotG,KAAK5rG,KAAK5F,KAAKo0G,YAAY7xG,IAE5B6B,EAGJikB,YAAYvhB,EAAMvE,GACjBA,EACAvC,KAAKq0G,WAAW9xG,GAASuE,EAGzBgrG,EAAa7yG,UAAU01G,OAAOn3G,KAAKwC,KAAM8G,GAI1CuhB,aAAavhB,EAAMvE,GAClBA,EACAvC,KAAKo0G,YAAY7xG,GAASuE,EAG1BgrG,EAAa7yG,UAAU21G,QAAQp3G,KAAKwC,KAAM8G,IA7FtD3J,EAAA82G,gBAkGA92G,EAAAuzG,KAAKmE,UAAYZ,qKC7iBjB,MAAAjsF,EAAAC,EAAAhrB,EAAA,IACA63G,EAAA73G,EAAA,IACAo3B,EAAAp3B,EAAA,GAIMuyD,EAAY,SAASj5C,EAAY2I,GACnC,MAAMguB,EAAM32B,EAAIhV,OAChB,GAAK2rC,EAAL,CACA,KAAOhuB,EAAQguB,GACX32B,EAAI2I,GAAS3I,EAAI2I,EAAQ,GACzBA,IAEJ3I,EAAIhV,WAOR,MAAay1B,UAAe89E,EAAAC,WAKjB1sF,wBACH,OAAOysF,EAAAC,WAAWC,iBAGf3sF,eAAekN,GAClByB,EAAOjQ,KAAOwO,EAGXlN,oBACH,OAAOysF,EAAAC,WAAWE,GAMtB5sF,eAAeljB,GACX+xB,QAEAl3B,KAAKogB,MAAQ,GAGbpgB,KAAKqgB,YAAc,GAUhBgI,OAAO6sF,GAEV,KADEl+E,EAAO0wC,IAAIhuC,OACiB,iBAAnBw7E,EAA6B,CACpC,MAAMr+F,EAAKq+F,EAAep+F,QAC1B,GAAI9W,KAAKogB,MAAMlhB,eAAe2X,GAAK,CAC/B,MAAMuP,EAAOpmB,KAAKogB,MAAMvJ,GAClB2uB,EAAWpf,EAAK5lB,UACtB4lB,EAAK21E,qBAAqB/7F,aACnBA,KAAKogB,MAAMvJ,GAElB,MAAMqI,EAAQlf,KAAKqgB,YAAYmlB,GAAUzlB,QAAQqG,GACjDopC,EAAUxvD,KAAKqgB,YAAYmlB,GAAWtmB,GACI,IAAtClf,KAAKqgB,YAAYmlB,GAAUjkC,eACpBvB,KAAKqgB,YAAYmlB,GAE5BxO,EAAOjQ,KAAKe,UAAU0d,EAAU,CAACjf,OAAQvmB,KAAM05B,QAAQ,UAG1D,GAAI1T,OAAOC,UAAUivF,GAAiB,CACvC,MAAM7uF,EAAS6uF,EACXl1G,KAAKogB,MAAMiG,IACXrmB,KAAK05B,OAAO15B,KAAKogB,MAAMiG,QAG1B,CACD,MAAM2f,EAAUhmC,KAAK9B,IAAIg3G,GACzB,GAAIlvE,EACAhmC,KAAK05B,OAAOsM,OAEX,CACD,MAAM3f,EAASlQ,SAAS++F,EAAgB,IACxC,GAAI7uF,EACArmB,KAAK05B,OAAOrT,OAEX,CACD,MAAMtkB,SAAcmzG,EACpBltF,EAAApmB,QAAG+C,KAAK,SAAU,+BACQuwG,aAA0BnzG,QAM7DsmB,OAAOsvD,GACV,OAAO33E,KAAK8W,UAAY6gE,EAAI7gE,QAKzBuR,IAAI8sF,GAEP,QADEn+E,EAAO0wC,IAAIxpE,IACT8B,KAAKqgB,YAAY80F,GACVn1G,KAAKqgB,YAAY80F,GAAU,GAE/B,KAIJ9sF,QAAQhC,GACX,OAAOrmB,KAAKogB,MAAMiG,GAIfgC,QAAQ8sF,GAEX,QADEn+E,EAAO0wC,IAAI0tC,QACTp1G,KAAKqgB,YAAY80F,GACVn1G,KAAKqgB,YAAY80F,GAAUrsF,QAE/B,GAIJT,IAAI2d,GACgB,iBAAZA,GACPhe,EAAApmB,QAAGK,IAAI,SAAU,MAAO,+BAE1B+0B,EAAO0wC,IAAIpnD,IACb,MAAMklB,EAAWQ,EAAQxlC,UACrBwlC,EAAQ61D,YAAc77F,KAAKkJ,IAAIs8B,IAC/BxlC,KAAKq1G,UAAU7vE,GAGnBxlC,KAAKogB,MAAM4lB,EAAQlvB,SAAWkvB,EACzBhmC,KAAKqgB,YAAYnhB,eAAesmC,GAIjCxlC,KAAKqgB,YAAYmlB,GAAU5/B,KAAKogC,GAHhChmC,KAAKqgB,YAAYmlB,GAAY,CAACQ,GAKlCA,EAAQ81D,kBAAkB97F,MAC1Bg3B,EAAOjQ,KAAKe,UAAU0d,EAAU,CAACjf,OAAQvmB,KAAMsgB,KAAK,IAKjD+H,IAAIitF,GAEP,QADEt+E,EAAO0wC,IAAIx+D,MACTlJ,KAAKqgB,YAAYnhB,eAAeo2G,IAG7Bt1G,KAAKogB,MAAMlhB,eAAeo2G,GAI9BjtF,OAAOktF,KACRv+E,EAAO0wC,IAAIvxC,OACb,IAAK,MAAMqP,KAAY+vE,EACnB,GAAIv1G,KAAKqgB,YAAYnhB,eAAesmC,GAChC,OAAO,EAGf,OAAO,EAGJnd,QAAQktF,GACX,OAAQv1G,KAAKm2B,OAAOo/E,GAIjBltF,OAAOktF,GACV,IAAK,MAAM/vE,KAAY+vE,EACnB,IAAKv1G,KAAKqgB,YAAYnhB,eAAesmC,GACjC,OAAO,EAGf,OAAO,EAIJnd,UAAUmtF,KACXx+E,EAAO0wC,IAAI2tC,UACb,IAAI7vE,EAAWgwE,EAIf,GAH0B,iBAAfA,IACPhwE,EAAWgwE,EAAWh1G,WAEtBR,KAAKkJ,IAAIs8B,GAAW,CACPxlC,KAAKqgB,YAAYmlB,GAAU1c,QACnCze,QAAQ+b,IAASpmB,KAAK05B,OAAOtT,MAKnCiC,QAAQmtF,EAAYpvF,GACvBpmB,KAAKq1G,UAAUG,GACXpvF,EACApmB,KAAKsgB,IAAI8F,GAGTpmB,KAAKsgB,IAAIk1F,GAIVntF,gBACH,OAAOroB,KAAKogB,MAGTiI,KAAKsvD,GACR,MAAM,IAAIjzE,MAAM,oCAGb2jB,QACH,MAAM,IAAI3jB,MAAM,qCAGb2jB,SACH,MAAM,IAAI3jB,MAAM,uCAzMxBvH,EAAA65B,SA6MAA,EAAOy+E,QAAQphF,EAAArN,UAAUC,WAGzB+P,EAAO0wC,IAAM,GACb1wC,EAAO0wC,IAAIpnD,IAAM,EACjB0W,EAAO0wC,IAAIxpE,IAAM,EACjB84B,EAAO0wC,IAAI0tC,QAAU,EACrBp+E,EAAO0wC,IAAIx+D,IAAM,EACjB8tB,EAAO0wC,IAAIvxC,OAAS,EACpBa,EAAO0wC,IAAIxxC,OAAS,EACpBc,EAAO0wC,IAAIhuC,OAAS,EACpB1C,EAAO0wC,IAAI2tC,UAAY,qKChPvB,MAAArtF,EAAAC,EAAAhrB,EAAA,IAGMwrB,EAFNxrB,EAAA,GAEYqgB,OAAOC,SACNpgB,EAAAu4G,OAAc,GAO3Bv4G,EAAAu4G,OAAOC,oBAAsB,SAAS59F,EAAOlX,EAAOkB,GAChD,MAAM40C,EAAY5+B,EAAMyL,SAASozB,UACjCz5C,EAAAu4G,OAAOE,gBAAgB79F,EAAO4+B,EAAW91C,EAAOkB,IAMpD5E,EAAAu4G,OAAOE,gBAAkB,SAAS79F,EAAcqqE,EAAevhF,EAAOkB,GAClE,IAAK,IAAI1E,EAAI,EAAGA,EAAIwD,EAAMU,OAAQlE,IAC9B,GAAI+kF,EAAM7gF,OAAS,EAAG,CAClB,MAAM2d,EAAQuJ,EAAII,UAAUu5D,GACtBtiF,EAAOsiF,EAAMljE,GACfnd,IAASimB,EAAApmB,QAAGiL,WACZkL,EAAMgW,SAASltB,EAAMxD,GAAIyC,EAAK6b,OAAQ7b,EAAKkc,QAEtCja,IAASimB,EAAApmB,QAAGmL,UACjBgL,EAAMiW,QAAQntB,EAAMxD,GAAIyC,EAAK6b,OAAQ7b,EAAKkc,QAG1CgM,EAAApmB,QAAGK,IAAI,SAAU,0BACLF,mBAEhBqgF,EAAM11D,OAAOxN,EAAO,KAKhC/hB,EAAAu4G,OAAOG,eAAiB,SAAS99F,EAAc65C,EAAM/wD,GAC5C0S,MAAMC,QAAQ3S,IACfmnB,EAAApmB,QAAGK,IAAI,SAAU,iDACmBpB,KAExC,MAAMyoB,EAAasoC,EAAK+O,UAClB7+D,EAAOjB,EAAM,GACfmnB,EAAApmB,QAAGoe,QAAQle,GACX3E,EAAAu4G,OAAOI,gBAAgB/9F,EAAOuR,EAAMzoB,GAE/BmnB,EAAApmB,QAAG+U,OAAO7U,GACf3E,EAAAu4G,OAAOK,eAAeh+F,EAAOuR,EAAMzoB,GAGnCmnB,EAAApmB,QAAGK,IAAI,SAAU,6CACeH,MAIxC3E,EAAAu4G,OAAOI,gBAAkB,SAAS/9F,EAAcuR,EAAY3lB,GACxD,MAAMqyG,EAAUryG,EAAOpC,OACjBo1C,EAAY5+B,EAAMyL,SAASyyF,cAAc3sF,GAC3CqtB,EAAUp1C,OAASy0G,GACnBhuF,EAAApmB,QAAG+C,KAAK,UAAW,kBACf,yBAERxH,EAAAu4G,OAAOE,gBAAgB79F,EAAO4+B,EAAWhzC,EAAQqkB,EAAApmB,QAAGiL,aAIxD1P,EAAAu4G,OAAOK,eAAiB,SAASh+F,EAAcuR,EAAY1lB,GACvD,MAAM+yC,EAAY5+B,EAAMyL,SAASyyF,cAAc3sF,GAC/CnsB,EAAAu4G,OAAOE,gBAAgB79F,EAAO4+B,EAAW/yC,EAAOokB,EAAApmB,QAAGmL,YAKvD5P,EAAAu4G,OAAOQ,oBAAsB,SAAS3vF,EAAgBxO,EAAciH,GAChE,IAAIqiD,GAAK,EACT,MAAM+gB,EAAgBrqE,EAAMyL,SAAS4+E,SAASpjF,GAC9C,GAAqB,IAAjBojE,EAAM7gF,OAAe,OAAO,EAChC,MAAM40G,EAAW1tF,EAAIjL,aAAa4kE,IAC3BnsE,EAAGC,GAAKigG,EAASv6F,QAUxB,OATIoM,EAAApmB,QAAGoe,QAAQuG,GACX86C,EAAKtpD,EAAMgW,SAASxH,EAAQtQ,EAAGC,GAE1B8R,EAAApmB,QAAG+U,OAAO4P,GACf86C,EAAKtpD,EAAMiW,QAAQzH,EAAQtQ,EAAGC,GAEzB8R,EAAApmB,QAAGse,UAAUqG,KAClB86C,EAAKtpD,EAAMoW,WAAW5H,EAAQtQ,EAAGC,IAE9BmrD,+UC1FX,MAAAr5C,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACAm5G,EAAAn5G,EAAA,IACA+yC,EAAA/yC,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SAINpgB,EAAAk5G,eAAiB,WAI1Br2G,KAAKs2G,WAAa,EAACxvG,EAAMhB,KACrB,MAAMga,EAAWhZ,EAAKtG,UAClB+1G,EAAiBr3G,eAAe4gB,IAChCy2F,EAAiBz2F,GAAUhZ,EAAMhB,KAKzC,MAAM0wG,EAAexuF,EAAApmB,QAAG+W,qBAmBlB89F,EAAiBjvG,IACnB,MAAM+X,EAAQkJ,EAAIM,cAAc,EAAG,IACnCvhB,EAAQZ,SAAS2Y,IASfm3F,EAAgB1uG,IAClB,MAAM2uG,EAAUluF,EAAI9C,aACpB,GARiB7f,IAAOA,GAAO,GAAOA,GAAO,IAQzC8wG,CAAaD,GAAU,CACvB,MAAM38F,EAAQyO,EAAIM,cAAc,EAAG,GAEnC,OADaN,EAAIM,cAAc,EAAG,IAE9B,KAAK,EACL,KAAK,EACD/gB,EAAO4V,UAAU5V,EAAOT,YAAcyS,GACtC,MAEJ,KAAK,EACL,KAAK,EACDhS,EAAO8V,WAAW9V,EAAO+V,aAAe/D,GACxC,MAEJ,KAAK,EACDhS,EAAOkW,cAAclW,EAAOiW,gBAAkBjE,GAKtDgO,EAAApmB,QAAGmY,eAAe,SAAUC,EAAOhS,QAElC,GA7BWlC,IAAOA,GAAO,IAAOA,GAAO,IA6BnC+wG,CAAYF,GAAU,CAC3B,MAAM38F,EAAQyO,EAAIM,cAAc,EAAG,GACnC,IAAIo3E,EAAQ,KACRn4F,EAAOkB,IAAI,SACXi3F,EAAQn4F,EAAO9J,IAAI,WAGnBiiG,EAAQ,IAAIh2E,EAAU6V,OAChB63C,cACN7vE,EAAOsY,IAAI6/E,IAEf,MAAM/iF,EAtCO,KAAMqL,EAAIjL,aAAawK,EAAApmB,QAAGuT,OAsCtB2hG,GACXp1G,EAAU,MAAQ0b,EAExB+iF,EADgB,MAAQ/iF,GACT+iF,EAAMz+F,KAAasY,GAClCgO,EAAApmB,QAAGmY,eAAe,QAASC,EAAOhS,KAQpC+uG,EAAe/uF,EAAApmB,QAAGyX,qBAWlBk9F,EAAmB,CACrBj3E,KAvFoBA,IACpB,MAAMt4B,EAASyhB,EAAIugB,YAAYwtE,GAC/Bl3E,EAAKg9D,UAAUt1F,IAsFfgwG,SAnFoB,CAACrnC,EAAMz2D,KAC3B,GAAK8O,EAAApmB,QAAG6D,cAAc,CAACyT,IAMnB8O,EAAApmB,QAAGK,IAAI,iBAAkB,kBACrB,8BAPyB,CAC7B,MAAMg1G,EAAcjvF,EAAApmB,QAAGqX,sBAAsBC,GACvCqG,EAAQkJ,EAAIugB,YAAYiuE,GAC9BtnC,EAAK/oE,SAASuP,SAASoJ,EAAO,OAgFlC/X,QAASivG,EACTzuG,OAAQ0uG,EACRx3E,OApBkBA,IAClBw3E,EAAcx3E,IAoBdO,KAAMg3E,EACN7X,KAjBgBA,IAChB,MAAMD,EAAUl2E,EAAIugB,YAAY+tE,GAChCnY,EAAKC,WAAWF,MAsBXxhG,EAAA+5G,YAAc,WACvBl3G,KAAKm3G,gBAAkB,IAAIh6G,EAAAk5G,eAG3B,MAAMe,EAA6B,CAACtwG,EAAMhB,KACtC9F,KAAKm3G,gBAAgBb,WAAWxvG,EAAMhB,IAG1C9F,KAAKgrC,WAAa,SAAS1C,GAEvB,OADe0H,EAAAvS,YAAYmO,YACbF,iBAAiBpD,IAKnCtoC,KAAKq3G,cAAgB,EAACt/F,EAAO8U,KACzB,MAAMjpB,EAAQ5D,KAAKs3G,cAAczqF,GAC3BoC,EAAS+gB,EAAAvS,YAAYmO,YAE3B,GAAI/e,EAAKyS,KAAM,CACX,MAAMA,EAAOrQ,EAAOyc,iBAAiB,CACjC/sB,KAAM7X,GAAsB,SAAdA,EAAK/E,OAGnBu9B,GACA83E,EAA2B93E,EAAMzS,EAAKnU,UACtC9U,EAAMgC,KAAK05B,IAGXtX,EAAApmB,QAAG+C,KAAK,cAAe,gBACnB,uCAIZ,OADAyxG,EAAAV,OAAOC,oBAAoB59F,EAAOnU,EAAOokB,EAAApmB,QAAGmL,WACrCnJ,EAAMrC,SAGjBvB,KAAKs3G,cAAgB,SAASzqF,GAC1B,MAAM0qF,EAAS1qF,EAAK2qF,eAAiB3qF,EAAK0qF,OACpC3zG,EAAQ,GACRqrB,EAAS+gB,EAAAvS,YAAYmO,YAC3B,IAAK,IAAIphC,EAAI,EAAGA,EAAI+sG,EAAQ/sG,IAAK,CAC7B,MAAM1D,EAAOmoB,EAAOyc,iBAAiB,CAAC/sB,KAAMkO,EAAKlO,OAC7C7X,IACAswG,EAA2BtwG,EAAM+lB,EAAKnU,UACtC9U,EAAMgC,KAAKkB,IAGnB,OAAOlD,GAGX5D,KAAKy3G,aAAe,SAAS5qF,GACzB,MAAM6qF,EAAQ7qF,EAAK8qF,cAAgB9qF,EAAK6qF,MAClCzoF,EAAS+gB,EAAAvS,YAAYmO,YACrBgsE,EAAY,GAClB,IAAK,IAAIv6G,EAAI,EAAGA,EAAIq6G,EAAOr6G,IAAK,CAC5B,MAAMsyE,EAAO1gD,EAAOY,gBAAgB7H,EAAApmB,QAAGmL,UACnCib,EAAApmB,QAAG8O,gBACP0mG,EAA2BznC,EAAM9iD,EAAK3T,QACtC0+F,EAAUhyG,KAAK+pE,GAEnB,OAAOioC,GAIX53G,KAAK63G,cAAgB,EAAC9/F,EAAOkX,EAAQpC,KACjC,MAAM+qF,EAAY53G,KAAKy3G,aAAa5qF,GACpCupF,EAAAV,OAAOC,oBAAoB59F,EAAO6/F,EAAW5vF,EAAApmB,QAAGmL,aAIpD/M,KAAK83G,YAAc,EAACh5G,EAAG+tB,KACnB,IAAI/lB,EAAO,KA4BX,OA3BI+lB,EAAKkrF,SAC2B,mBAArBlrF,EAAKkrF,SAASj5G,GACrBgI,EAAO+lB,EAAKoC,OAAOyc,iBAAiB,CAChC/sB,KAAMkO,EAAKkrF,SAASj5G,KAIxBkpB,EAAApmB,QAAGK,IAAI,cAAe,4BAClB,gCAIR6E,EADKyM,MAAMC,QAAQqZ,EAAKmrF,UACjBnrF,EAAKoC,OAAOyc,iBAAiB,CAChC/sB,KAAM7X,GAAQA,EAAK/E,OAAS8qB,EAAKmrF,SAASl5G,KAGhB,iBAAlB+tB,EAAKmrF,SACVnrF,EAAKoC,OAAOyc,iBAAiB,CAChC/sB,KAAM7X,GAAQA,EAAK/E,OAAS8qB,EAAKmrF,WAI9BnrF,EAAKoC,OAAOyc,iBAAiB,CAChC/sB,KAAM7X,GAAQA,EAAKxI,OAAS,GAAS,IAAJQ,IAGzCs4G,EAA2BtwG,EAAM,GAAS,IAAJhI,GAC/BgI,IAGX9G,KAAKi4G,gBAAkB,SAASlgG,EAAOkX,EAAQmzD,EAAOv1D,GAC7CA,EAAKnU,UACNsP,EAAApmB,QAAGK,IAAI,cAAe,kBAClB,4BAER,MAAM2B,EAAQ5D,KAAKs3G,cAAczqF,GACjCupF,EAAAV,OAAOE,gBAAgB79F,EAAOqqE,EAAOx+E,EAAOokB,EAAApmB,QAAGmL,aAIvD5P,EAAA+5G,YAAYgB,gBAAkB,SAASjuG,EAAOrG,GAC1C,MAAMqrB,EAAS+gB,EAAAvS,YAAYmO,YAC3B,IAAIusE,EAAc,KAClBv0G,EAAMyG,QAAQvD,IACU,iBAATA,EACPqxG,EAAclpF,EAAO+b,WAAWlkC,GAEX,iBAATA,IACZqxG,EAAclpF,EAAO+b,WAAWlkC,EAAKlJ,OAErCu6G,GACAluG,EAAMxC,WAAWumB,QAAQmqF,MAOrCh7G,EAAA+5G,YAAYkB,kBAAoB,SAASnuG,EAAOlI,GAC5C,MAAMktB,EAAS+gB,EAAAvS,YAAYmO,YACrBysE,EAAa,IAAI/oE,OAAOvtC,GACxB6B,EAAQqrB,EAAOmc,YAAYtkC,GACf,WAAdA,EAAK/E,MAAqBs2G,EAAWxhF,KAAK/vB,EAAKlJ,OAEnD,OAAOT,EAAA+5G,YAAYoB,kBAAkBruG,EAAOrG,IAIhDzG,EAAA+5G,YAAYqB,kBAAoB,SAAStuG,EAAOlI,GAC5C,MAAMktB,EAAS+gB,EAAAvS,YAAYmO,YACrBysE,EAAa,IAAI/oE,OAAOvtC,GACxB6B,EAAQqrB,EAAOmc,YAAYtkC,GACf,WAAdA,EAAK/E,MAAqBs2G,EAAWxhF,KAAK/vB,EAAKlJ,OAE7C46G,EAAY/vF,EAAIjL,aAAa5Z,GACnC,OAAOzG,EAAA+5G,YAAYoB,kBAAkBruG,EAAO,CAACuuG,KAKjDr7G,EAAA+5G,YAAYoB,kBAAoB,SAASruG,EAAOrG,GAC5C,MAAMqrB,EAAS+gB,EAAAvS,YAAYmO,YAC3B,IAAIusE,EAAc,KACd92C,GAAK,EAgBT,OAfAz9D,EAAMyG,QAAQvD,IACV,GAAoB,iBAATA,EACPqxG,EAAclpF,EAAO+b,WAAWlkC,QAE/B,GAAoB,iBAATA,EAAmB,CAC/BqxG,EAAclpF,EAAO+b,WAAWlkC,EAAKlJ,MACrC,MAAM66G,EAAY3xG,EAAKyY,OAAS,EAChC44F,EAAYvxG,SAAS6xG,GAEzB,GAAIN,EAAa,CACb,MAAM54F,EAAQ44F,EAAY9xG,WAC1B4D,EAAMxC,WAAWumB,QAAQmqF,GACzB92C,EAAKA,GAAMp3D,EAAMxC,WAAWixG,YAAYP,EAAa54F,MAGtD8hD,sKCrSX,MAAAr5C,EAAAC,EAAAhrB,EAAA,IACA07G,EAAA17G,EAAA,IACA27G,EAAA37G,EAAA,KAEAogB,EAAApgB,EAAA,GAEAmgC,EAAAngC,EAAA,IAGA07G,EAAAE,KAAKllE,MAAQilE,EAAAE,UAEA37G,EAAA47G,UAAiB,GAC9B57G,EAAA47G,UAAUtlF,KAAO,GAGjBt2B,EAAA47G,UAAUxpG,aAAeyY,EAAApmB,QAAGyN,KAAKE,aAGjCpS,EAAA47G,UAAUzpG,OAAS0Y,EAAApmB,QAAGyN,KAAKC,OAE3B,MAAMmZ,EAAMpL,EAAAC,OAAOC,SAGnB,MAAay7F,EAKT3wF,YAAY4wF,GAKRj5G,KAAKi5G,UAAYA,EACjBj5G,KAAK+B,KAAO,OAGTsmB,sBAAsBpe,GACzB,MAAM,IAAIvF,MAAM,yBAGb2jB,aAAape,KAAU9E,GAC1B,MAAM+zG,EAAUjvG,EAAMq5B,WAAW61E,UACjC,GAAIR,EAAAE,KAAK74G,KAAK+B,MAAO,CACjB,MAAMq3G,EAAO,IAAIT,EAAAE,KAAK74G,KAAK+B,MAAMkI,KAAU9E,GAC3C+zG,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,WAGtBimB,EAAApmB,QAAGK,IAAI,gBAAiB,0BACTjC,KAAK+B,eAIrBsmB,UAAW,OAAO,EAElBA,UAAW,OAAOroB,KAAK+B,KAEvBsmB,QAAQixF,GACXt5G,KAAKi5G,UAAYK,EAGdjxF,SACH,MAAO,CACHtmB,KAAM/B,KAAKQ,UACX84G,KAAMt5G,KAAKi5G,WAKZ5wF,QAAQljB,KA/CnBhI,EAAA67G,gBAkDA77G,EAAA47G,UAAUrhF,KAAOshF,EAGjB,MAAaO,UAA6BP,EAItC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,cAGTsmB,sBAAsBpe,GACzB,MAAM60B,EAAQ70B,EAAMq5B,WACdp5B,EAAY40B,EAAM22D,eAClB+jB,EAAY16E,EAAM26E,cAAcvvG,GACtC,GAAIsvG,EAAW,CACX,MAAM/wG,EAAS,EAEf,OADAzI,KAAK05G,WAAaF,EAAUlvG,YAAY,GACjCtK,KAAKi5G,UAAYxwG,EAAS,EAErC,OAAOtL,EAAA47G,UAAUxpG,aAGd8Y,aAAape,GAChBitB,MAAMyiF,aAAa1vG,EAAOjK,KAAK05G,aAtBvCv8G,EAAAo8G,uBA8BAp8G,EAAA47G,UAAUa,YAAcL,EACxBp8G,EAAA47G,UAAUtlF,KAAKmmF,YAAc,EAG7B,MAAaC,UAAyBb,EAElC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,UAGTsmB,wBAKH,OAAOroB,KAAKi5G,WAZpB97G,EAAA08G,mBAgBA18G,EAAA47G,UAAUvpG,QAAUqqG,EACpB18G,EAAA47G,UAAUtlF,KAAKjkB,QAAU,EAGzB,MAAasqG,UAAsBd,EAI/B3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,OAGTsmB,sBAAsBpe,GACzB,MAAMm5B,EAAUn5B,EAAMq5B,WAAWy2E,iBACjC,GAAI32E,EAAQ7hC,OAAS,EAAG,CACpB,MAAMy4G,EAAS/vG,EAAM/L,IAAI,UACnB+3E,EAAQ+jC,EAAO/8F,WAEfg9F,EADKD,EAAO78F,QACE84D,EACpB,GAAIgkC,EAASj6G,KAAKi5G,UAAW,CACzB,IAAI/5F,GAAS,EACTlf,KAAK05G,aACLx6F,EAAQkkB,EAAQ5W,UAAU5H,GACtBA,EAAE9N,UAAY9W,KAAK05G,WAAW5iG,WAGvB,IAAXoI,IACAlf,KAAK05G,WAAat2E,EAAQ,IAG9B,MAAM82E,EAAMhzG,KAAKizG,IAAIF,EAAQ,GAC7B,OAAOj6G,KAAKi5G,WAAa,EAAMgB,GAAUC,GAIjD,OADAl6G,KAAK05G,WAAa,KACXv8G,EAAA47G,UAAUxpG,aAGd8Y,aAAape,GAChB,GAAIjK,KAAK05G,WAAY,CACjB,MAAMR,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIT,EAAAE,KAAKuB,cAAcnwG,EAAOjK,KAAK05G,YAChDR,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,WAGtBimB,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,sCA5ChB9E,EAAA28G,gBAiDA38G,EAAA47G,UAAUtpG,KAAOqqG,EACjB38G,EAAA47G,UAAUtlF,KAAKhkB,KAAO,EAGtB,MAAa4qG,UAAwBrB,EAIjC3wF,YAAY4wF,EAAW7tF,EAAQ,IAC3B8L,MAAM+hF,GACNj5G,KAAK+B,KAAO,SACZ/B,KAAKs1F,OAASlqE,EAGX/C,UAAUitE,GACbt1F,KAAKs1F,OAASA,EAGXjtE,wBACH,OAAOroB,KAAKi5G,UAGT5wF,aAAape,GAChB,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3B7jB,EAASt1F,KAAKs1F,OACpB,GAAIA,EAAO/zF,OAAS,EAAG,CACnB,MAAM63G,EAAO,IAAIT,EAAAE,KAAKjpG,OAAO3F,EAAOqrF,GACpC4jB,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,WAGtBimB,EAAApmB,QAAGK,IAAI,kBAAmB,eACtB,wCAILomB,QAAQljB,GACXnF,KAAKs1F,OAASnwF,EAAKmwF,OAGhBjtE,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAIxB,OAHA7H,EAAKzZ,KAAO,CACRmwF,OAAQt1F,KAAKs1F,QAEV12E,GAzCfzhB,EAAAk9G,kBA4CAl9G,EAAA47G,UAAUnpG,OAASyqG,EACnBl9G,EAAA47G,UAAUtlF,KAAK7jB,OAAS,EAGxB,MAAa0qG,UAAuBtB,EAKhC3wF,YAAY4wF,EAAW3tF,GACnB4L,MAAM+hF,GACNj5G,KAAK+B,KAAO,QACRupB,GAAKtrB,KAAK82C,MAAMxrB,GAGjBjD,MAAMiD,GACTtrB,KAAKiW,EAAIqV,EAAG,GACZtrB,KAAKkW,EAAIoV,EAAG,GAGTjD,QAAQljB,GACX,MAAMmmB,GAACA,GAAMnmB,EACbnF,KAAK82C,MAAMxrB,GAGRjD,wBACH,OAAOroB,KAAKi5G,UAGT5wF,aAAape,GAChB,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIT,EAAAE,KAAKnpG,MAAMzF,EAAO,CAACjK,KAAKiW,EAAGjW,KAAKkW,IACjDgjG,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,MAGnBsmB,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAExB,OADA7H,EAAKzZ,KAAO,CAACmmB,GAAI,CAACtrB,KAAKiW,EAAGjW,KAAKkW,IACxB0I,GAnCfzhB,EAAAm9G,iBAsCAn9G,EAAA47G,UAAUrpG,MAAQ4qG,EAClBn9G,EAAA47G,UAAUtlF,KAAK/jB,MAAQ,EAGvB,MAAa6qG,UAAwBvB,EAMjC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,SACZ/B,KAAKo5G,KAAO,KAIT/wF,QAAQljB,GACXnF,KAAKo5G,KAAOj0G,EAAKi0G,KACjBp5G,KAAKw6G,SAAWr1G,EAAKq1G,SAGlBnyF,wBAKH,IAAIlR,EADcnX,KAAKo5G,KAAKqB,gBACH9B,EAAAE,KAAK6B,MAAMC,KAAO,GAAM,EAEjD,OADAxjG,GAAQnX,KAAKi5G,UACTj5G,KAAK46G,0BAJa,EAKXzjG,EAEJ,EAGJkR,0BACH,QAAIroB,KAAKw6G,SAAStxG,IAAI,gBAGblJ,KAAKw6G,SAASz9F,WAMpBsL,aAAape,GAChB,GAAIjK,KAAKo5G,KAAM,CACKnvG,EAAMq5B,WAAW61E,UACzBE,QAAQr5G,KAAKo5G,QACnBj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,WAGtBimB,EAAApmB,QAAGK,IAAI,iBAAkB,eACrB,8BAILomB,gBAAgBwyF,GACnB76G,KAAK86G,QAAUD,EAGZxyF,UAAW,OAAO,GAzD7BlrB,EAAAo9G,kBA4DAp9G,EAAA47G,UAAUgC,OAASR,EACnBp9G,EAAA47G,UAAUtlF,KAAKsnF,OAAS,EAGxB,MAAaC,UAA2BhC,EAMpC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,YACZ/B,KAAKi7G,aAAe,GAGjB5yF,sBAAsBjQ,GACzBpY,KAAKi7G,aAAe7iG,EAGjBiQ,wBACH,OAAOroB,KAAKi7G,aAGT5yF,sBAAsBpe,GAEzB,OADAjK,KAAK4jC,MAAQ5jC,KAAKk7G,eAAejxG,GAC5BjK,KAAK4jC,OAEN5jC,KAAKm7G,aAAalxG,IACdjK,KAAKo7G,gBAAgBnxG,GACdjK,KAAKi5G,UAJK,EAUtB5wF,aAAape,GAChB,GAAIjK,KAAK4jC,MAAO,CACZ,MAAMs1E,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIT,EAAAE,KAAKwC,UAAUpxG,EAAOjK,KAAK4jC,MAAO5jC,KAAKs7G,WACxDpC,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,WAGtBimB,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,qCAILomB,eAAepe,GAClB,MAAMw2F,EAAOx2F,EAAM85B,UACnB,GAAI08D,GAAQA,EAAK8a,YAAYh6G,OAAS,EAAG,CAErC,OADcknB,EAAIjL,aAAaijF,EAAK8a,aAGxC,OAAO,KAIJlzF,aAAape,GAChB,GAAIA,EAAMf,IAAI,cAAe,CAEzB,GADmBe,EAAM/L,IAAI,cACds9G,SAAWx7G,KAAK4jC,MAAM63E,mBAC7BhzF,EAAI9C,cAAgB3lB,KAAKi7G,aACzB,OAAO,EAInB,OAAO,EAIJ5yF,gBAAgBpe,GACnB,MAAM60B,EAAQ70B,EAAMq5B,WACdp5B,EAAY40B,EAAM22D,eAClB+jB,EAAY16E,EAAM26E,cAAcvvG,GAEhC/E,EAAY,CAAC8E,QAAOyxG,iBADDt+E,EAAAyK,MAAM8zE,oBAAoB1xG,IAKnD,GAHIuvG,IACAr0G,EAAKy2G,MAAQpC,EAAUlvG,YAAY,IAEnCtK,KAAK4jC,MAAMi4E,kBACX,OAAO77G,KAAK4jC,MAAMi4E,kBAAkB12G,EAAM,CAAC0rD,EAAKirD,KAC5C97G,KAAKs7G,UAAYQ,IAGpB,CACD,IAAIz3G,WAAerE,KAAK4jC,MAAMliC,iCAC9B2C,GAAO,gDACP2jB,EAAApmB,QAAG+C,KAAK,sBAAuB,kBAAmBN,GAEtD,OAAO,GAvFflH,EAAA69G,qBA2FA79G,EAAA47G,UAAUsC,UAAYL,EACtB79G,EAAA47G,UAAUtlF,KAAK4nF,UAAY,EAI3B,MAAaU,UAA4B/C,EAKrC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,aAGTsmB,sBAAsBpe,GAEzB,OAAIA,EAAMf,IAAI,cACHlJ,KAAKi5G,WAEhBjxF,EAAApmB,QAAGK,IAAI,sBAAuB,uDACKgI,KAC5B,GAGJoe,aAAape,GAChB,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIT,EAAAE,KAAK32B,WAAWj4E,EAAOjK,KAAKiW,EAAGjW,KAAKkW,GACrDgjG,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,MAGnBsmB,QAAQljB,GACX,MAAMmmB,GAACA,GAAMnmB,EACbnF,KAAKiW,EAAIqV,EAAG,GACZtrB,KAAKkW,EAAIoV,EAAG,GAGTjD,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAExB,OADA7H,EAAKzZ,KAAO,CAACmmB,GAAI,CAACtrB,KAAKiW,EAAGjW,KAAKkW,IACxB0I,GApCfzhB,EAAA4+G,sBAwCA5+G,EAAA47G,UAAU72B,WAAa65B,EACvB5+G,EAAA47G,UAAUtlF,KAAKyuD,WAAa,EAI5B,MAAa85B,UAAwBhD,EAOjC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,SACZ/B,KAAKi8G,eAAiBxzF,EAAIM,cAAc,GAAI,IAC5C/oB,KAAKk8G,WAAa,EAClBl8G,KAAKm8G,YAAc,EAGhB9zF,sBAAsBpe,GACzB,GAAIjK,KAAKi8G,eAAiB,EAEtB,OADAj8G,KAAKi8G,gBAAkB,EAChB,EAOX,GALiC,IAAxBj8G,KAAKi8G,iBACVj8G,KAAKi8G,gBAAkB,EACvBj8G,KAAKk8G,WAAazzF,EAAIM,cAAc,GAAI,KAGxC/oB,KAAKk8G,WAAa,EAAG,CACrB,MAAM5wF,EAAK,CAACtrB,KAAKiW,EAAGjW,KAAKkW,GAIzB,OAHI8R,EAAApmB,QAAGua,YAAYnc,KAAKm8G,YAAa7wF,EAAIrhB,KACrCjK,KAAKk8G,YAAc,GAEhBl8G,KAAKi5G,UAMhB,OAJ6B,IAApBj5G,KAAKk8G,aACVl8G,KAAKk8G,YAAc,EACnBl8G,KAAKi8G,eAAiBxzF,EAAIM,cAAc,GAAI,KAEzC,EAGJV,aAAape,GAChB,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIT,EAAAE,KAAKuD,OAAOnyG,EAAOjK,KAAKiW,EAAGjW,KAAKkW,EAAGlW,KAAKm8G,aACzDjD,EAAQG,QAAQD,KACdj8G,EAAA47G,UAAUtlF,KAAKzzB,KAAK+B,MAGnBsmB,QAAQljB,GACX,MAAMmmB,GAACA,GAAMnmB,EACbnF,KAAKiW,EAAIqV,EAAG,GACZtrB,KAAKkW,EAAIoV,EAAG,GACZtrB,KAAKi8G,eAAiB92G,EAAK82G,eAGxB5zF,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAKxB,OAJA7H,EAAKzZ,KAAO,CACRmmB,GAAI,CAACtrB,KAAKiW,EAAGjW,KAAKkW,GAClB+lG,eAAgBj8G,KAAKi8G,gBAElBr9F,GA3DfzhB,EAAA6+G,kBA+DA7+G,EAAA47G,UAAUqD,OAASJ,EACnB7+G,EAAA47G,UAAUtlF,KAAK2oF,OAAS,EAExB,MAAaC,UAAuBrD,EAEhC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,QAGTsmB,wBACH,OAAOroB,KAAKi5G,WARpB97G,EAAAk/G,iBAYAl/G,EAAA47G,UAAUplE,MAAQ0oE,EAClBl/G,EAAA47G,UAAUtlF,KAAKkgB,MAAQ,EAEvB,MAAa2oE,UAA6BtD,EAEtC3wF,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,cAGTsmB,sBAAsBpe,GACzB,GAAIjK,KAAKu8G,gBAAgBtyG,GACrB,OAAOjK,KAAKi5G,UAKb5wF,gBAAgBpe,GACnB,MAAM60B,EAAQ70B,EAAMq5B,WACdk5E,EAAsB/zF,EAAI9C,aAC1Bzb,EAAY40B,EAAM22D,eAClBgnB,EAAa39E,EAAM49E,eAAexyG,GAClCyyG,EAAS79E,EAAM89E,YAErB,IAAIC,EAAc,KAClB,OAAI70F,EAAApmB,QAAG6D,cAAc,CAACg3G,MAIlBI,EAAcJ,EAAWnyG,YAAY,IACjCqyG,EAAOG,oBAAoBD,MAGtBA,EAAY3zG,IAAI,oBAKzBszG,EAAuB,EAAMx8G,KAAKi5G,cAnC9C97G,EAAAm/G,uBAyCAn/G,EAAA47G,UAAUgE,YAAcT,qKC7lBxB,MAAAp0F,EAAAD,EAAAhrB,EAAA,KACA+qB,EAAAC,EAAAhrB,EAAA,IACA+/G,EAAA//G,EAAA,IACAogC,EAAApgC,EAAA,GAEAq3C,EAAAr3C,EAAA,GAEMs0C,EAAQ,IAAIlU,EAAAvG,YAAY,SACxB+a,EAAO,IAAIxU,EAAA1F,YAAY,QAmB7B,MAAag0D,EAGFtjE,iBAAiBhT,GACpB,IAAK,IAAIY,EAAI,EAAGA,EAAIZ,EAAI4B,KAAMhB,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAI6B,KAAMhB,IAAK,CAC/B,MAAMnU,EAAOsT,EAAI2O,KAAK/N,GAAGC,GAAG3V,cAAcC,UAC7B,SAATuB,EACAsT,EAAI2O,KAAK/N,GAAGC,GAAGwY,YAAY6iB,GAEb,UAATxvC,GACLsT,EAAI2O,KAAK/N,GAAGC,GAAGwY,YAAYmjB,IAMpCxpB,0BAA0BpR,EAAcC,GAC3C,MAAM7B,EAAM,IAAIs2E,EAAQ,EAAG,GAC3Bt2E,EAAI2O,KAAO,IAAIzQ,MAAM0D,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,EAAMhB,IACtBZ,EAAI2O,KAAK/N,GAAK,IAAI1C,MAAM2D,GAI5B,OAFA7B,EAAI4B,KAAOA,EACX5B,EAAI6B,KAAOA,EACJ7B,EAWXgT,YAAYpR,EAAcC,EAAc+3E,EAAW19C,GAC/CvxC,KAAKgkB,KAAO,GACZhkB,KAAKiX,KAAOA,EACZjX,KAAKkX,KAAOA,EAEa,iBAAdlX,KAAKiX,MAA0C,iBAAdjX,KAAKkX,MAC7C8Q,EAAApmB,QAAGK,IAAI,eAAgB,cACnB,gDAGRjC,KAAKgkB,KAAO,IAAIzQ,MAAMvT,KAAKiX,MAC3B,IAAK,IAAIhB,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAAK,CAChCjW,KAAKgkB,KAAK/N,GAAK,IAAI1C,MAAMvT,KAAKkX,MAC9B,IAAK,IAAIhB,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAC3BlW,KAAKgkB,KAAK/N,GAAGC,GAAK,IAAI8mG,EAAAC,KAAKhnG,EAAGC,EAAG+4E,GAIzCjvF,KAAKwxE,IAAM,IAAItpD,EAAAtmB,QAAIohE,IAAIkC,uBACnBllE,KAAKk9G,YAAYr+G,KAAKmB,OAE1BA,KAAK+yE,iBAAmB/yE,KAAK+yE,iBAAiBl0E,KAAKmB,MACnDA,KAAKm9G,uBAAyBn9G,KAAKm9G,uBAAuBt+G,KAAKmB,MAI5DqoB,MAAMpS,EAAWC,GACpB,OAAQD,GAAK,GAAOA,EAAIjW,KAAKiX,MAAUf,GAAK,GAAOA,EAAIlW,KAAKkX,KAIzDmR,QAAQpS,EAAWC,EAAWpU,EAAcsC,GAC/CpE,KAAKgkB,KAAK/N,GAAGC,GAAGwZ,QAAQ5tB,EAAMsC,GAG3BikB,WAAWpS,EAAGC,EAAGpU,EAAcsC,GAClC,OAAOpE,KAAKgkB,KAAK/N,GAAGC,GAAGghC,WAAWp1C,EAAMsC,GAGrCikB,SAAS+0F,EAAQC,EAAMv7G,EAAcsC,GACxC,QAAIpE,KAAKk3C,WAAWkmE,EAAO,GAAIA,EAAO,GAAIt7G,EAAMsC,KAC5CpE,KAAK0vB,QAAQ2tF,EAAK,GAAIA,EAAK,GAAIv7G,EAAMsC,IAC9B,GAKRikB,UAAUpS,EAAWC,EAAW9R,GACnCpE,KAAK0vB,QAAQzZ,EAAGC,EAAG8R,EAAApmB,QAAGkL,UAAW1I,GAG9BikB,cAAcpS,EAAWC,EAAW+X,GACvCjuB,KAAKgkB,KAAK/N,GAAGC,GAAGwY,YAAYT,GAGzB5F,cAAcpS,EAAWC,GAC5B,OAAOlW,KAAKgkB,KAAK/N,GAAGC,GAAG3V,cAGpB8nB,QAAQpS,EAAWC,GACtB,OAAOlW,KAAKgkB,KAAK/N,GAAGC,GAGjBmS,WAAWpS,EAAWC,GACzB,OAAOlW,KAAKgkB,KAAK/N,GAAGC,GAAG5U,aAGpB+mB,eAAenS,GAClB,MAAMuO,EAAM,GACZ,IAAK,IAAIpnB,EAAI,EAAGA,EAAI2C,KAAKiX,OAAQ5Z,EAC7BonB,EAAI7e,KAAK5F,KAAKgkB,KAAK3mB,GAAG6Y,GAAG3V,eAE7B,OAAOkkB,EAGJ4D,WAAWnS,GACd,MAAMuO,EAAM,GACZ,IAAK,IAAIpnB,EAAI,EAAGA,EAAI2C,KAAKiX,OAAQ5Z,EAC7BonB,EAAI7e,KAAK5F,KAAKgkB,KAAK3mB,GAAG6Y,IAE1B,OAAOuO,EAKJ4D,UACH,MAAMsuB,EAAY,GAClB,IAAK,IAAI1gC,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IACvBlW,KAAKgkB,KAAK/N,GAAGC,GAAG0Z,UAChB+mB,EAAU/wC,KAAK5F,KAAKgkB,KAAK/N,GAAGC,IAIxC,OAAOygC,EAGJtuB,mBAEH,OAD0BroB,KAAK42C,UACdzsC,OAAQzM,GACrBA,EAAE4/G,GAAK,GAAK5/G,EAAE4/G,GAAMt9G,KAAKiX,KAAO,GAChCvZ,EAAE6/G,GAAK,GAAK7/G,EAAE6/G,GAAMv9G,KAAKkX,KAAO,GAQjCmR,sBAAsBoC,EAAK,EAAGoB,EAAK7rB,KAAKkX,KAAO,GAClD,IAAK,IAAIjB,EAAIjW,KAAKiX,KAAO,EAAGhB,GAAK,EAAGA,IAChC,IAAK,IAAIC,EAAIuU,EAAIvU,GAAK2V,EAAI3V,IACtB,GAAIlW,KAAKgkB,KAAK/N,GAAGC,GAAG0Z,SAChB,OAAO5vB,KAAKgkB,KAAK/N,GAAGC,GAIhC,OAAO,KAIJmS,cAAciB,GACjB,MAAMqtB,EAAY,GAClB,IAAK,IAAI1gC,EAAIqT,EAAKC,IAAKtT,GAAKqT,EAAKG,IAAKxT,IAClC,IAAK,IAAIC,EAAIoT,EAAKE,IAAKtT,EAAIoT,EAAKI,IAAKxT,IAC7BlW,KAAKgkB,KAAK/N,GAAGC,GAAG0Z,UAChB+mB,EAAU/wC,KAAK5F,KAAKgkB,KAAK/N,GAAGC,IAIxC,OAAOygC,EAKJtuB,gBACH,MAAMuvB,EAAqB,GAC3B,IAAK,IAAI3hC,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IACtBlW,KAAKgkB,KAAK/N,GAAGC,GAAG7V,YACjBu3C,EAAWhyC,KAAK5F,KAAKgkB,KAAK/N,GAAGC,IAIzC,OAAO0hC,EAIJvvB,YAAYpS,EAAWC,GAC1B,QAAIlW,KAAK6tB,MAAM5X,EAAGC,IACPlW,KAAKgkB,KAAK/N,GAAGC,GAAGgnG,cAKxB70F,YAAYpS,EAAWC,GAC1B,QAAIlW,KAAK6tB,MAAM5X,EAAGC,IACPlW,KAAKgkB,KAAK/N,GAAGC,GAAGsnG,cAKxBn1F,WAAWpS,EAAWC,GACzB,QAAIlW,KAAK6tB,MAAM5X,EAAGC,IACPlW,KAAKgkB,KAAK/N,GAAGC,GAAGw/E,aAKxBrtE,gBAAgBpS,EAAWC,GAC9B,QAAIlW,KAAK6tB,MAAM5X,EAAGC,IACPlW,KAAKgkB,KAAK/N,GAAGC,GAAGunG,kBAMxBp1F,gBAAgBpe,GACnB,MAAMm4E,EAAQ,IACPs7B,EAAIC,GAAM1zG,EAAM2R,QACjBnS,EAAQQ,EAAM2zG,cAcpB,OAZI3zG,EAAMorE,aACFprE,EAAMP,WAAW8Z,WAAaxjB,MAE9BA,KAAKwxE,IAAIvpB,QAAQy1D,EAAIC,EAAIl0G,EAAO,CAACwM,EAAGC,EAAG/X,EAAGkmE,KAClCA,GACIrkE,KAAK6tB,MAAM5X,EAAGC,IACdksE,EAAMx8E,KAAK5F,KAAKgkB,KAAK/N,GAAGC,MAMrCksE,EAIJ/5D,mBACH,MAAM+5D,EAAQ,GACd,IAAK,IAAInsE,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IACvBlW,KAAKgkB,KAAK/N,GAAGC,GAAG5U,cAChB8gF,EAAMx8E,KAAK5F,KAAKgkB,KAAK/N,GAAGC,IAIpC,OAAOksE,EAGJ/5D,WAAW/mB,GAAa,GAC3B,IAAK,IAAI2U,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAC3BlW,KAAKgkB,KAAK/N,GAAGC,GAAG2nG,UAAYv8G,EAMjC+mB,WAAWpS,EAAWC,GACzB,OAAU,IAAND,IACM,IAANC,IACAD,IAAMjW,KAAKiX,KAAO,GAClBf,IAAMlW,KAAKkX,KAAO,IAKnBmR,oBACH,IAAIy1F,EAAa,GACjB,IAAK,IAAI5nG,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAAK,CAChC,IAAIuO,EAAM,GACV,IAAK,IAAIxO,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAAK,CAChC,MAAMnW,EAAOE,KAAKgkB,KAAK/N,GAAGC,GACpB+4E,EAAWnvF,EAAKS,cACtB,IAAK0uF,EAAU,CACXxqE,GAAO,IACP,SAEJ,MAAMnkB,EAAW2uF,EAASzuF,UAC1B,GAAIV,EAAKsK,YACDtK,EAAKi+G,gBAAgBhhG,WACrB0H,GAAO,IAGPA,GAAO,SAGV,GAAI3kB,EAAKwiG,WAAa79E,GAAO,SAC7B,GAAyB,OAArB3kB,EAAK41C,YAAuBjxB,GAAO,SACvC,GAAI3kB,EAAKg2C,gBAAkBrxB,GAAO,SAClC,GAAI3kB,EAAKk+G,cAAe,CACzB,MAAM/vF,EAAOnuB,EAAK6tB,cAAc,GAChC,GAAuB,WAAnBM,EAAKztB,UAAwB,CAE7BikB,GAD4BwJ,EACS0O,SAEb,SAAnB1O,EAAKztB,UACVikB,GAAO,IAGPA,GAAO,QAGN,QAAUoS,KAAKv2B,GAAYmkB,GAAO,IAClC,mBAAqBoS,KAAKv2B,GAAYmkB,GAAO,IAC7C,OAASoS,KAAKv2B,GAAYmkB,GAAO,IACjC,OAASoS,KAAKv2B,GAAYmkB,GAAO,IACjC,QAAUoS,KAAKv2B,GAAYmkB,GAAO,IAClC,WAAaoS,KAAKv2B,GAAYmkB,GAAO,IACrC,OAASoS,KAAKv2B,GAAYmkB,GAAO,IACjC,SAAWoS,KAAKv2B,GAAYmkB,GAAO,IACtCA,GAAO,IAEjBq5F,GAAcr5F,EAAM,KAExBuD,EAAApmB,QAAGgD,KAAKk5G,GAKLz1F,eAAenS,GAElB,OADKlW,KAAKi+G,iBAAkBj+G,KAAKk+G,wBAC1Bl+G,KAAKm+G,QAAQjoG,GAKjBmS,QAAQrJ,GACX,IAAIvW,EAAS,GACb,IAAK,IAAIwN,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAC3BzN,EAASA,EAAO4I,OAAOrR,KAAKgkB,KAAK/N,GAAGC,GAAGkoG,QAAQp/F,IAGvD,OAAOvW,EAQJ4f,SAASle,EAAS,CAACrK,IAAe,IACrC,MAAM2I,EAAS,GACf,IAAK,IAAIwN,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IACvB/L,EAAOnK,KAAKgkB,KAAK/N,GAAGC,KACpBzN,EAAO7C,KAAK5F,KAAKgkB,KAAK/N,GAAGC,IAIrC,OAAOzN,EAGJ4f,kBAAkB+C,GACrB,MAAM3iB,EAAS,GAMf,OALA2iB,EAAM/gB,QAAQihB,IACNtrB,KAAK6tB,MAAMvC,EAAG,GAAIA,EAAG,KACrB7iB,EAAO7C,KAAK5F,KAAKgkB,KAAKsH,EAAG,IAAIA,EAAG,OAGjC7iB,EAGJ4f,aAAa+C,EAAiB6C,GACjC7C,EAAM/gB,QAAQihB,IACVtrB,KAAKgkB,KAAKsH,EAAG,IAAIA,EAAG,IAAIoD,YAAYT,KAIrC5F,IAAIiD,EAAIgd,GACX,MAAOryB,EAAGC,GAAKoV,EACf,GAAItrB,KAAK6tB,MAAM5X,EAAGC,GAAI,CAClB,MAAMpW,EAAOE,KAAKyuB,QAAQxY,EAAGC,GAC7B,GAAqB,iBAAVoyB,EAAoB,CAE3B,GADiBxoC,EAAKS,cACTC,YAAc8nC,EAAQ,OAAO,GAGlD,OAAO,EAKJjgB,wBACHroB,KAAKm+G,QAAU,GACf,IAAK,IAAIjoG,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAAK,CAChClW,KAAKm+G,QAAQjoG,GAAK,GAClB,IAAK,IAAID,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3BjW,KAAKm+G,QAAQjoG,GAAGD,GAAKjW,KAAKgkB,KAAK/N,GAAGC,GAG1ClW,KAAKi+G,iBAAkB,EAGpB51F,SACH,MAAMhT,EAAM,IAAI9B,MAAMvT,KAAKiX,MACrBvW,EAAW,GACX29G,EAAW,GACXC,EAAY,GAElB,IAAK,IAAIroG,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAAK,CAChCZ,EAAIY,GAAK,IAAI1C,MAAMvT,KAAKkX,MACxB,IAAK,IAAIhB,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAAK,CAChC,MAAM0I,EAAO5e,KAAKyuB,QAAQxY,EAAGC,GAAGuQ,SAChCpR,EAAIY,GAAGC,GAAK0I,EAAKrgB,EACjB+/G,EAAU1/F,EAAKrgB,GAAK,EAChBqgB,EAAK2/F,IAAKF,EAASz4G,KAAK,CAACqQ,EAAGC,IAC5B0I,EAAKle,WACLA,EAASuV,EAAI,IAAMC,GAAKxV,IAIpC,MAAO,CACHuW,KAAMjX,KAAKiX,KACXC,KAAMlX,KAAKkX,KACXkrE,MAAO/sE,EACPgpG,WACA39G,WACA49G,aAKDj2F,gBACH,MAAMzJ,EAAY5e,KAAKymB,UACjB27D,MAACA,EAAKk8B,UAAEA,GAAa1/F,EAK3B,IAAK,IAAI3I,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IAC3BooG,EAAUl8B,EAAMnsE,GAAGC,KAAO,EAIlC,IAAIsoG,GAAe,EACfC,EAAe,EACnB1gH,OAAO6qB,KAAK01F,GAAWj0G,QAAQtI,IACvBu8G,EAAUv8G,GAAQ08G,IAClBA,EAAeH,EAAUv8G,GACzBy8G,EAAcroG,SAASpU,EAAM,OAIrC,MAAM28G,EAAU,GAChB,IAAK,IAAIzoG,EAAI,EAAGA,EAAIjW,KAAKiX,KAAMhB,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkX,KAAMhB,IACvBksE,EAAMnsE,GAAGC,KAAOsoG,IACXE,EAAQzoG,KAAKyoG,EAAQzoG,GAAK,IAC/ByoG,EAAQzoG,GAAGrQ,KAAK,CAACsQ,EAAEksE,EAAMnsE,GAAGC,MASxC,cAJO0I,EAAKwjE,MACZxjE,EAAK4/F,YAAcA,EACnB5/F,EAAK8/F,QAAUA,EACf9/F,EAAK+/F,SAAU,EACR//F,EAIJyJ,kBAAkBpe,EAAO4oE,EAAKC,GACjC,MAAOqxB,EAAIC,GAAMn6F,EAAM2R,QACvB,IAAIgjG,EAAS5+G,KAAK+yE,iBAAiBl0E,KAAK,KAAMslG,EAAIC,GAC9Cn6F,EAAMf,IAAI,YACV01G,EAAS5+G,KAAKm9G,uBAAuBt+G,KAAK,KAAMslG,EAAIC,IAExD,MAAMya,EAAa,IAAI32F,EAAAtmB,QAAIgxE,KAAKkB,MAAMjB,EAAKC,EAAK8rC,GAC1CnlC,EAAO,GAMb,OALAolC,EAAW52D,QAAQk8C,EAAIC,EAAI,CAACnuF,EAAGC,KACvBlW,KAAK6tB,MAAM5X,EAAGC,IACdujE,EAAK7zE,KAAK5F,KAAKgkB,KAAK/N,GAAGC,MAGxBujE,EAGJpxD,sBAAsBpe,EAAO4oE,EAAKC,GAErC,MAAO,GAGJzqD,iBAAiB87E,EAAIC,EAAInuF,EAAGC,GAC/B,IAAIvU,EAAM3B,KAAK01F,WAAWz/E,EAAGC,GAI7B,OAHKvU,IACDA,EAAOsU,IAAMkuF,GAAQjuF,IAAMkuF,GAExBziG,EAGJ0mB,uBAAuB87E,EAAIC,EAAInuF,EAAGC,GACrC,IAAIvU,EAAM3B,KAAKy9G,gBAAgBxnG,EAAGC,GAIlC,OAHKvU,IACDA,EAAOsU,IAAMkuF,GAAQjuF,IAAMkuF,GAExBziG,EAIJ0mB,eAAepS,EAAWC,EAAWpW,GACxCA,EAAKg3C,MAAM,CAAC7gC,EAAGC,IACflW,KAAKgkB,KAAK/N,GAAGC,GAAKpW,GArf1B3C,EAAAwuF,UAyfAA,EAAQmzB,SAAW,SAASlgG,GACxB,GAAIA,EAAK+/F,QAAS,CACd,MAAMH,YAACA,GAAe5/F,EAChBmgG,EAAUzqE,EAAAhC,SAASI,mBAAmB8rE,GACtCnpG,EAAM,IAAIs2E,EAAQ/sE,EAAK3H,KAAM2H,EAAK1H,KAAM6nG,GAe9C,OAbAhhH,OAAO6qB,KAAKhK,EAAK8/F,SAASr0G,QAAQ4L,IAC9B,MAAM+oG,EAAOpgG,EAAK8/F,QAAQzoG,GACpBgpG,EAAO9oG,SAASF,EAAG,IACzB+oG,EAAK30G,QAAQ60G,IACT,MAAMjxF,EAAOqmB,EAAAhC,SAASI,mBAAmBwsE,EAAU,IACnD7pG,EAAIugC,cAAcqpE,EAAMC,EAAU,GAAIjxF,OAI9CrP,EAAKy/F,SAASh0G,QAAQihB,IAClB,MAAOrV,EAAGC,GAAKoV,EACfjW,EAAI2O,KAAK/N,GAAGC,GAAG8O,gBAEZ3P,gVCviBf,MAAA2S,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACAm3E,EAAAn3E,EAAA,GACAkiH,EAAAliH,EAAA,IAEAm5G,EAAAn5G,EAAA,IACAmiH,EAAAniH,EAAA,IACAoiH,EAAApiH,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACAqiH,EAAAriH,EAAA,IACAigC,EAAA9I,EAAAn3B,EAAA,KACAw5B,EAAArC,EAAAn3B,EAAA,IACA+yC,EAAA/yC,EAAA,GAEMsiH,EAAkB,EAClB92F,EAAMpL,EAAAC,OAAOC,SAMbiiG,EAAa,CAAC,UAAW,OAAQ,OAAQ,WAAY,UAAW,SAClE,OAQJriH,EAAA28F,gBAAA,MAWIzxE,YAAYwE,EAAkB,IAC1B7sB,KAAKy/G,MAAQ5yF,EAAK4yF,OAAU,GAC5Bz/G,KAAKwY,UAAYqU,EAAKrU,WAAa,EACnCxY,KAAK0Y,SAAWmU,EAAKnU,UAAY,GAEjC1Y,KAAK0/G,UAAY,IAAIN,EAAAlI,YACrBl3G,KAAK2/G,WAAa,IAAIN,EAAAO,aAUnBv3F,cAActQ,GACjB,MAAMu/B,EAASv/B,EAAMksF,YACfzrF,EAAYxY,KAAKwY,UACjBE,EAAW1Y,KAAK0Y,SAEtB,IAAImnG,GAAgB,EACpB,MAAMC,EAAY,GAEdxoE,EAAOyoE,UACPzoE,EAAOyoE,SAAS11G,QAAQ21G,IACpB,MAAMpuD,KAACA,EAAI7vD,KAAEA,GAAQi+G,EACf12F,EAAOsoC,EAAK+O,UACZs/C,EAAWruD,EAAKmP,cAChBm/C,EAAY,CACd1nG,YACAmG,KAAM1U,GAASA,EAAM40B,QAAUrmB,EAAY,EAC3Cw9F,QAAS,GAab,GAXI,QAAQn/E,KAAK90B,IAEbm+G,EAAUlK,QAAU9uG,KAAK4C,MAAMm2G,EAAW,GAC1CjgH,KAAK81G,gBAAgB/9F,EAAOuR,EAAM42F,KAGlCA,EAAUlK,QAAU9uG,KAAK4C,MAAMm2G,EAAW,GAC1CjgH,KAAK81G,gBAAgB/9F,EAAOuR,EAAM42F,KAIjCL,EAAe,CAChB,MAAMjmD,EAAShI,EAAKiI,YACpBgmD,EAAgB7/G,KAAKmgH,YAAYpoG,EAAO6hD,EAAQlhD,GAGpDonG,EAAUluD,EAAK96C,UAAW,IAU9BwgC,EAAO8oE,OACP9oE,EAAO8oE,MAAM/1G,QAAQunD,IAEjB,IAAKA,EAAKkO,cAAe,CACrB,MAAMx2C,EAAOsoC,EAAK+O,UAElB,IAAKk/C,EAAe,CAChB,MAAMjmD,EAAShI,EAAKiI,YACpBgmD,EAAgB7/G,KAAKmgH,YAAYpoG,EAAO6hD,EAAQlhD,GAIpD,MAAMunG,EAAWruD,EAAKmP,cAChBw2C,EAASrwG,KAAKC,KAAK84G,EAAW,IAC9BI,EAAW,CAAC3nG,WAAU8+F,cAAeD,EACvC54F,KAAM7X,GAAQA,EAAKxI,OAASoa,GAEhC1Y,KAAK+1G,eAAeh+F,EAAOuR,EAAM+2F,GAEnBjsC,EAAA7pD,SAASc,aAAa/B,GAC9Bjf,QAAQihB,IACV,MAAMswF,EAAQ,IAAInlF,EAAQiG,cAAc,KACxCk/E,EAAMhwB,OAAO,SACb7zE,EAAMoW,WAAWytF,EAAOtwF,EAAG,GAAIA,EAAG,MAG1Cw0F,EAAUluD,EAAK96C,UAAW,IAK9BwgC,EAAOqiB,OACPriB,EAAOqiB,MAAMtvD,QAAQunD,IACjB,MAAMtoC,EAAOsoC,EAAK+O,UACZs/C,EAAWruD,EAAKmP,cAGhBm/C,EAAY,CACd1nG,YACAmG,KAAM1U,GAASA,EAAM40B,QAAUrmB,EAC/Bw9F,QAAS9uG,KAAK4C,MAAMm2G,EAAW,IAE/BC,EAAUlK,QAAUuJ,IACpBW,EAAUlK,QAAUuJ,GAExBv/G,KAAK81G,gBAAgB/9F,EAAOuR,EAAM42F,GAGlC,MAAM3I,EAASrwG,KAAKC,KAAK84G,EAAW,IAC9BI,EAAW,CAAC3nG,WAAU8+F,cAAeD,EACvC54F,KAAM7X,GAAQA,EAAKxI,OAASoa,GAEhC1Y,KAAK+1G,eAAeh+F,EAAOuR,EAAM+2F,GAEjCP,EAAUluD,EAAK96C,UAAW,IAK9BwgC,EAAO+sD,UACPrkG,KAAKsgH,iBAAiBvoG,EAAOu/B,EAAO+sD,SAAU7rF,GAI/C6P,aAAa1J,GACI,mBAATA,EACP3e,KAAKugH,UAAY5hG,EAGjBqJ,EAAApmB,QAAGK,IAAI,kBAAmB,4CACO0c,kBAIlC0J,iBAAiBtQ,EAAco9C,EAAe38C,GACjD,MAAMgoG,EAAMrrD,GACRntC,EAAApmB,QAAG6D,cAAc,CAAC+S,KAAeA,EAAY,IAC7CwP,EAAApmB,QAAGK,IAAI,kBAAmB,mDACUuW,MAGxC,MAAMioG,EAAWzgH,KAAK0gH,oBAAoBloG,GAC1C,GAAIioG,EAAU,CACV,GAAIA,EAASn9E,WAAW61E,QAAS,CAC7B,MAAMwH,EAAY,IAAIxB,EAAApG,UAAUrpG,MAAMsY,EAAApmB,QAAGyN,KAAKK,MAAO8wG,GACrDC,EAASn9E,WAAW61E,UAAUyH,aAAaD,GAE/C5oG,EAAMgW,SAAS0yF,EAAUD,EAAI,GAAIA,EAAI,QAEpC,CACD,MAAMn8G,0CAA8C8wD,IACpDntC,EAAApmB,QAAG+C,KAAK,kBAAmB,mBAAoBN,IAIhDgkB,oBAAoB7P,GACvB,IAAIqoG,EAAaroG,EACbioG,EAAW,KACXF,EAAYt2G,GAASA,EAAM40B,QAAUgiF,EAMzC,IALI7gH,KAAKugH,YACLA,EAAYt2G,IACRjK,KAAKugH,UAAUt2G,IAAUA,EAAM40B,QAAUgiF,KAGzCJ,GAAYI,EAAa,GAE7BJ,EAAWzgH,KAAK2/G,WAAWp0E,kBAAkB,CAAC5sB,KAAM4hG,MAClDM,EAEN,OAAOJ,EAGJp4F,YAAYtQ,EAAO6hD,EAAQlhD,GAC9B,MAAO2wC,EAAIC,GAAMsQ,EAIXknD,EAAYr4F,EAAIM,cAAc,EAAG,GACjCg4F,EAAgBD,EAAYpoG,EAC5BsoG,GAAiBF,EAAY,GAAKpoG,EAClCuoG,EAAYjhH,KAAK0/G,UAAU10E,WAC7B,CAACrsB,KAAM7X,GAAQA,EAAKxI,OAAS0iH,GACtBl6G,EAAKxI,OAASyiH,IAEzB,QAAIE,IACAlpG,EAAMiW,QAAQizF,EAAW53D,EAAIC,IACtB,GAMRjhC,cAActQ,EAAOo9C,EAAOtoC,GAC/B,MAAMrU,UAACA,GAAaqU,EAGpB,OAFapE,EAAIjL,aAAagiG,IAG1B,IAAK,UAAW,MAChB,IAAK,OAAQx/G,KAAKkhH,eAAenpG,EAAOo9C,GAAQ,MAChD,IAAK,WACDn1D,KAAKsgH,iBAAiBvoG,EAAOo9C,EAAO38C,GACpC,MACJ,IAAK,UAAWxY,KAAKmhH,kBAAkBppG,EAAOo9C,EAAOtoC,GAAO,MAC5D,IAAK,SAAU7sB,KAAKohH,iBAAiBrpG,EAAOo9C,EAAOtoC,GAAO,MAC1D,IAAK,OAAQ7sB,KAAKqhH,eAAetpG,EAAOo9C,GAAQ,MAChD,IAAK,MAAOn1D,KAAKshH,cAAcvpG,EAAOo9C,EAAOtoC,IAU9CxE,kBAAkBtQ,EAAOo9C,EAAOtoC,GAC/BA,EAAK00F,KAMNl5F,iBAAiBtQ,EAAOo9C,EAAOtoC,GAC9BA,EAAK00F,KAKNl5F,eAAetQ,EAAOo9C,GACzB,MAAMz8C,EAAW1Y,KAAK0Y,SAChB8oG,EAAY,CAACx5F,EAAApmB,QAAG6/G,YAAaz5F,EAAApmB,QAAG8/G,eAAgB15F,EAAApmB,QAAG+/G,gBACrD35F,EAAApmB,QAAG6/G,YAAaz5F,EAAApmB,QAAGggH,WACjBC,EAAgBp5F,EAAIjL,aAAagkG,GAGjCP,EADSjxE,EAAAvS,YAAYmO,YACFF,iBACrB,CAAC/sB,KAAM7X,GAAQA,EAAK/E,MAAQ8/G,GACrB/6G,EAAKxI,OAASoa,IAEzB,GAAIuoG,EAAW,CACX,MAAO53D,EAAIC,GAAM6L,EAEjB,OADAp9C,EAAMiW,QAAQizF,EAAW53D,EAAIC,IACtB,EAEX,OAAO,EAGJjhC,eAAetQ,EAAOo9C,GACzB,MAAM2sD,EAAW9hH,KAAK0Y,SAChBi3D,EAAO,IAAIzyC,EAAKyH,SACtBgrC,EAAK/oE,SAASk7G,GACd,MAAOz4D,EAAIC,GAAM6L,EACjBp9C,EAAMiW,QAAQ2hD,EAAMtmB,EAAIC,GAKrBjhC,cAActQ,EAAOo9C,EAAOtoC,GAC3BA,EAAK00F,KAKNl5F,YAAYtQ,EAAc8U,GAC7B,MAAMyqB,EAASv/B,EAAMksF,YACf8d,EAAsB,GAC5B,GAAIzqE,EAAOp4C,eAAe,UAAW,CACjC,MAAM0uF,EAASt2C,EAAOs2C,OAEhBo0B,EAAuB,GAC7B,IAAIC,EAAW,EACf3qE,EAAO23D,MAAQ,GACf,IAAK,IAAInwG,EAAI,EAAGA,EAAI+tB,EAAKq1F,OAAQpjH,IAAK,CAClC,MAAMqjH,EAAU,IAAI7C,EAAAzP,UAGpB,IAAI3wF,EAAQuJ,EAAII,UAAU+kE,GAC1B,KAAOo0B,EAAWjiG,QAAQb,IAAU,GAChCA,EAAQuJ,EAAII,UAAU+kE,KACpBq0B,GACgB,EAAIr0B,EAAOrsF,QACzBymB,EAAApmB,QAAGK,IAAI,kBAAmB,cACtB,+BAGZ+/G,EAAWp8G,KAAKsZ,GAEhB,MAAMivE,EAAQ72C,EAAOs2C,OAAO1uE,GAC5B6iG,EAAWn8G,KAAKuoF,GAChB,MAAMrkF,EAAQqkF,EAAMrkF,OACbo1D,EAAOC,GAASgvB,EAAMzqF,KACvB0+G,EAAWrqG,EAAMyL,SAASiL,QAAQywC,EAAOC,GAC/C,IAAKijD,EAASpsB,UAAW,CACrB,MAAMtyF,EAAO,IAAI+yB,EAAQ2C,aAAY,GACrCrhB,EAAMoW,WAAWzqB,EAAMw7D,EAAOC,GAGlC,MAAMxkC,EAAS36B,KAAKqiH,iBAAiBx1F,GAC/By1F,EAAY,GAClB,IAAIC,GAAc,EAClB,IAAK,IAAIllH,EAAI,EAAGA,EAAIyM,EAAMvI,OAAQlE,IAAK,CACnC,MAAMiuB,EAAKxhB,EAAMzM,GAEXmlH,EAAW,IAAI/rF,EAAQ6D,YAC7BkoF,EAAStS,cAAcv1E,GACvB5iB,EAAMoW,WAAWq0F,EAAUl3F,EAAG,GAAIA,EAAG,IAE3B,IAANjuB,IACAklH,GAAc,EACdxqG,EAAMgW,SAAS4M,EAAQrP,EAAG,GAAIA,EAAG,KAGrC,MAAMxkB,EAAO9G,KAAK0/G,UAAU5H,YAAYh5G,EAAG+tB,GAC3C,GAAK/lB,EAODA,EAAKwZ,IAAI,IAAI6J,EAAUwyD,QACvB5kE,EAAMiW,QAAQlnB,EAAMwkB,EAAG,GAAIA,EAAG,IAC9Bg3F,EAAU18G,KAAK0lB,OATR,CACP,MAAMjnB,EAAM,uBACCwa,KAAKC,UAAU+N,KAC5B7E,EAAApmB,QAAGK,IAAI,kBAAmB,gBACnBoC,kBAAoBvF,wBASnC,IAAKyjH,EAAa,CACd,MAAM3jG,EAAOC,KAAKC,UAAUqvE,GAC5BnmE,EAAApmB,QAAGK,IAAI,kBAAmB,cACtB,2BAA6B2c,GAGrC,GAAI+b,EAAOzxB,IAAI,cAAe,CAC1B,MAAMu5G,EAAW9nF,EAAOz8B,IAAI,cAC5BukH,EAASC,SAASJ,GAClBG,EAASE,WAAW5qG,EAAMjB,SAC1B2rG,EAASG,UAAUR,EAASxmG,SAC5B,MAAMhe,EAAO+8B,EAAOn6B,UAAY,cAChCm6B,EAAOmiE,QAAQl/F,GACfoqB,EAAApmB,QAAGC,aAAammB,EAAApmB,QAAGiL,WAAYjP,EAC3B,yBACJ,MAAMilH,EAASp6F,EAAIjL,aAAa8kG,GAChC,GAAI3nF,EAAO2I,WAAW61E,QAAS,CAC3B,MAAM2J,EAAW,IAAI3D,EAAApG,UAAU72B,WAAW,KAC1C4gC,EAASpiC,QAAQ,CAACp1D,GAAIu3F,IACtBloF,EAAO2I,WAAW61E,UAAUyH,aAAakC,IAIjDX,EAAQjS,cAAcv1E,GACtBwnF,EAAQprE,SAASh/B,GACjBoqG,EAAQY,SAAST,GACjBhrE,EAAO23D,MAAMrpG,KAAKu8G,SAItBn6F,EAAApmB,QAAGK,IAAI,kBAAmB,cAAe,wBAE7C,OAAO8/G,EAIJ15F,iBAAiBwE,GACpB,IAAI8N,EAAS,KACb,GAAI9N,EAAKoC,OACL,GAAIpC,EAAK5iB,OAGL,KAFA0wB,EAAS9N,EAAKoC,OAAOsc,kBAAkB,CACnC5sB,KAAMkO,EAAK5iB,SACF,CACT,IAAI5F,EAAM,sCACgB,mBAAfwoB,EAAK5iB,MACZ5F,GAAO,kBAAoBwoB,EAAK5iB,MAAMtB,WAAa,IAGnDtE,GAAO,+BAEX2jB,EAAApmB,QAAGK,IAAI,UAAW,mBAAoBoC,SAI1Cs2B,EAAS9N,EAAKoC,OAAOgc,YAAY,mBAIrCtQ,EAAS36B,KAAK2/G,WAAW10E,YAAY,aAAc,CAACnM,MAAO,UAG/DnE,EAAOra,IAAI,IAAI6J,EAAU+3D,YACzB,MAAMvS,EAAO,IAAIzyC,EAAKyH,SAAS3c,EAAApmB,QAAG8O,gBAClCi/D,EAAK/oE,SAAS6hB,EAAIM,cAAc,GAAI,MACpC4R,EAAOlzB,WAAWumB,QAAQ2hD,GAE1B,IAAIqzC,EAAc,GAMlB,OALIn2F,EAAKrU,WAAa,IAClBwqG,EAAc,EAAIn2F,EAAKrU,WAE3BwP,EAAApmB,QAAGwa,aAAaue,EAAQqoF,GAEjBroF,EAGJtS,eAAetQ,EAAO8U,GACzB,MAAM+gE,EAAkB71E,EAAMksF,YAAYrW,OAC1C,GAAI5lE,EAAApmB,QAAG8jB,UAAUsC,EAAApmB,QAAG2O,cAAe,CAC/B,IAAI0yG,EAAU,KACd,GAAIp2F,EAAKoC,OACLg0F,EAAUp2F,EAAKoC,OAAOgc,YAAY,eAEjC,CACD,MAAMi4E,EAAc,CAChB1qG,UAAW,EACX+nG,UAAWt2G,GAAS+d,EAAApmB,QAAGwP,UAAUob,UAAUviB,EAAMlI,OAAS,GAE9DkhH,EAAUjjH,KAAKirC,YAAYi4E,GAE/B,MAAMC,EAAY,IAAIh5F,EAAU6uD,QAChCiqC,EAAQ3iG,IAAI6iG,GACZ,MAAMrjH,EAAOiY,EAAM0rF,kBAEnB,GADA1rF,EAAMgW,SAASk1F,EAASnjH,EAAK6b,OAAQ7b,EAAKkc,QACtC4xE,EAAQ,CACR,MAAMO,EAAQ1lE,EAAIjL,aAAaowE,GAC/B,GAAIq1B,EAAQ3/E,WAAW61E,QAAS,CAC5B,MAAMiK,EAAW,IAAIjE,EAAApG,UAAUqD,OAAO,KAChC9wF,EAAK6iE,EAAMt0B,YAGjB,OAFAupD,EAAS1iC,QAAQ,CAACp1D,OAClB23F,EAAQ3/E,WAAW61E,UAAUyH,aAAawC,GACnC,CAACj1B,KAIpB,MAAO,GAGJ9lE,cAActQ,EAAco2E,EAActhE,GAC7C,MACMw2F,EAAWl1B,EAAMk1B,SACvB,IAAIC,EAAYp8G,KAAK4B,MAAMu6G,EAFL,GAGJ,IAAdC,IAAkBA,EAAY,GAElC,IAAK,IAAIjmH,EAAI,EAAGA,EAAIimH,EAAWjmH,IAAK,CAChC,MAAM4M,EAAQjK,KAAKirC,YAAYpe,GAC/B,GAAI5iB,EAAMq5B,WAAW61E,QAAS,CAC1B,MAAMiK,EAAW,IAAIjE,EAAApG,UAAUqD,OAAO,KAChC9wF,EAAK6iE,EAAMt0B,YACjBupD,EAAS1iC,QAAQ,CAACp1D,OAClBrhB,EAAMq5B,WAAW61E,UAAUyH,aAAawC,GAE5C,MAAMG,EAAU96F,EAAIjL,aAAa2wE,EAAMrkF,OACvCiO,EAAMgW,SAAS9jB,EAAOs5G,EAAQ,GAAIA,EAAQ,KAI3Cl7F,YAAYwE,GACf,MAAMoC,EAAS+gB,EAAAvS,YAAYmO,YACrBpzB,EAAYqU,EAAKrU,WAAaxY,KAAKwY,UACzC,IAAIvO,EAAQ,KACZ,GAAIuO,EAAY,EAAG,CACf,IAAI+nG,EAAYiD,GAAMA,EAAG3kF,QAAUrmB,EAC/BxY,KAAKugH,UACLA,EAAYiD,IACRxjH,KAAKugH,UAAUiD,IAAOA,EAAG3kF,QAAUrmB,GAGlCqU,EAAK0zF,YACVA,EAAYiD,IACR32F,EAAK0zF,UAAUiD,IAAOA,EAAG3kF,QAAUrmB,IAG3CvO,EAAQglB,EAAOsc,kBAAkB,CAAC5sB,KAAM4hG,SAGxCv4F,EAAApmB,QAAGK,IAAI,kBAAmB,cACtB,yBAER,OAAOgI,EAGJoe,gBAAgBtQ,EAAOuR,EAAMuD,GAChC,MAAMmpF,EAAUnpF,EAAKmpF,SAAW,GAC1Bx9F,UAACA,EAASmG,KAAEA,GAAQkO,EACpBlpB,EAAS3D,KAAK2/G,WAAW8D,gBAAgBzN,EAASr3F,EAAMnG,GAC9D49F,EAAAV,OAAOI,gBAAgB/9F,EAAOuR,EAAM3lB,GAIjC0kB,eAAetQ,EAAOuR,EAAMuD,GAC/B,MAAM0qF,EAAS1qF,EAAK0qF,QAAU,EACxB8I,EAAWtiH,OAAO4kF,OAAO,CAAC60B,cAAeD,GAAS1qF,GAClDjpB,EAAQ5D,KAAK0/G,UAAUpI,cAAc+I,GAC3CjK,EAAAV,OAAOK,eAAeh+F,EAAOuR,EAAM1lB,oBC9gB3CiqC,OAAO5uC,UAAU69B,WAAa+Q,OAAO5uC,UAAU69B,YAAc,WACzD,OAAO98B,KAAK0jD,OAAO,GAAGhwC,cAAgB1T,KAAK6nB,UAAU,gVCLzD,MAAAG,EAAAC,EAAAhrB,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAIAm3E,EAAAn3E,EAAA,GACAymH,EAAAzmH,EAAA,IACA0mH,EAAA1mH,EAAA,IACAogB,EAAApgB,EAAA,GAMaE,EAAAymH,oBAAsB7lH,OAAOwT,OAAO,QACpCpU,EAAA0mH,gBAAkB9lH,OAAOwT,OAAO,QAE7C,MAAMkX,EAAMpL,EAAAC,OAAOC,SAMNpgB,EAAA0qC,MAAa,GAU1B1qC,EAAA0qC,MAAMi8E,oBAAsB,EAAC75G,EAAkBtM,EAAI,KAC/C,MAAM0X,EAAepL,EAAMP,WAAW8Z,UAC/BvN,EAAGC,GAAKjM,EAAM2R,QACfwmE,EAAgB,GAEtB,IAAK,IAAIxvD,EAAK3c,EAAItY,EAAGi1B,GAAM3c,EAAItY,EAAGi1B,IAC9B,IAAK,IAAIC,EAAK3c,EAAIvY,EAAGk1B,GAAM3c,EAAIvY,EAAGk1B,IAC1Bxd,EAAIwY,MAAM+E,EAAIC,KACVD,IAAO3c,GAAK4c,IAAO3c,GACnBksE,EAAMx8E,KAAKyP,EAAIoZ,QAAQmE,EAAIC,KAK3C,OAAOuvD,IAGXjlF,EAAA0qC,MAAMk8E,wBAA0B,EAAC95G,EAAkBtM,KAC/C,MAAM0X,EAAMpL,EAAMP,WAAW8Z,UACtBvN,EAAGC,GAAKjM,EAAM2R,QAGrB,IAAIooG,EAAc5vC,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAAGvY,GAI1CykF,GAHJ4hC,EAAcA,EAAY75G,OAAOmhB,GAC7BjW,EAAIwY,MAAMvC,EAAG,GAAIA,EAAG,MAEAjW,IAAIiW,GAAMjW,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,KAExD,OADA82D,EAAQA,EAAMj4E,OAAOrK,GAAQA,EAAK8vB,YAKtCzyB,EAAA0qC,MAAMq8E,oBAAsB,EAACj6G,EAAkBC,EAAmB8U,KAC9D,MAAMojE,EAAQ,GACd,IAAK,IAAI/kF,EAAI,EAAG8mH,EAAOj6G,EAAU3I,OAAQlE,EAAI8mH,EAAM9mH,IAC/C,GAAI6M,EAAU7M,GAAGuD,QAAQ,UAAW,CAChC,MAAM+C,EAASuG,EAAU7M,GAAGyD,QAAQ,UAEhC6C,EAAO,GAAGmT,UAAY7M,EAAM6M,UACxBkI,GAAcA,EAAWrb,GACzBy+E,EAAMx8E,KAAKsE,EAAU7M,KAQrC,OAAO+kF,IAGXjlF,EAAA0qC,MAAMu8E,iBAAmB,EAACl6G,EAAmB8U,KACzC,MAAMojE,EAAQ,GACd,IAAK,IAAI/kF,EAAI,EAAG8mH,EAAOj6G,EAAU3I,OAAQlE,EAAI8mH,EAAM9mH,IAC/C,GAAI6M,EAAU7M,GAAGuD,QAAQ,UAAW,CAChC,MAAM+C,EAASuG,EAAU7M,GAAGyD,QAAQ,UACd,IAAlB6C,EAAOpC,OACHyd,EACIA,EAAWrb,EAAO,KAClBy+E,EAAMx8E,KAAKjC,EAAO,IAItBy+E,EAAMx8E,KAAKjC,EAAO,IAItBA,EAAO0G,QAAQg6G,IACPrlG,EACIA,EAAWqlG,IACXjiC,EAAMx8E,KAAKy+G,GAIfjiC,EAAMx8E,KAAKy+G,KAM/B,OAAOjiC,IAGXjlF,EAAA0qC,MAAMy8E,gBAAkB,CAAC1+F,IACrB,MAAM1b,EAAY0b,EAAI0d,WAAWmyD,eAGjC,OADgBt4F,EAAA0qC,MAAMu8E,iBAAiBl6G,EADnBD,GAAUA,EAAMQ,QAAQmb,MAKhDzoB,EAAA0qC,MAAM08E,qBAAuB,EAACt6G,EAAkBC,KAC5C,MAAMk4E,EAAQ,GACd,IAAK,IAAI/kF,EAAI,EAAG8mH,EAAOj6G,EAAU3I,OAAQlE,EAAI8mH,EAAM9mH,IAC/C,GAAI6M,EAAU7M,GAAG+M,YAAa,CACXF,EAAU7M,GAAGs+B,oBACrBtxB,QAAQm6G,IACPA,EAAW1tG,UAAY7M,EAAM6M,UACxB0tG,EAAW/5G,QAAQR,IACpBm4E,EAAMx8E,KAAKsE,EAAU7M,OAMzC,OAAO+kF,IAIXjlF,EAAA0qC,MAAM8zE,oBAAsB,CAAC1xG,IAGzB,OAFoB9M,EAAA0qC,MAAMi8E,oBAAoB75G,GACtBE,OAAOrK,GAAQA,EAAKsK,eAKhDjN,EAAA0qC,MAAM48E,gBAAkB,CAACx6G,IACrB,MAAMy6G,EAAcvnH,EAAA0qC,MAAMi8E,oBAAoB75G,GAC9C,IAAItG,EAAS,GAIb,OAHA+gH,EAAYr6G,QAAQ3M,IACZA,EAAE0M,cAAczG,EAASA,EAAO0N,OAAO3T,EAAE4M,gBAE1C3G,IAGXxG,EAAA0qC,MAAM88E,oBAAsB,CAAC16G,IAMzB,OALoB9M,EAAA0qC,MAAMi8E,oBAAoB75G,GACtBE,OAAOrK,GAC3BA,EAAKsK,aACDH,EAAMq5B,WAAWs5E,YAAYnyG,QAAQ3K,EAAKwK,YAAY,OAKlEnN,EAAA0qC,MAAM+8E,qBAAuB,CAAC36G,IAM1B,OALoB9M,EAAA0qC,MAAMi8E,oBAAoB75G,GACtBE,OAAOrK,GAC3BA,EAAKsK,aACDH,EAAMq5B,WAAWs5E,YAAYiI,SAAS/kH,EAAKwK,YAAY,OAKnEnN,EAAA0qC,MAAMi9E,YAAc,EAACC,EAAmBC,KACpC,MAAOltE,EAAIC,GAAMgtE,EAAOnpG,SACjBqpG,EAAIC,GAAMF,EAAOppG,QAExB,OA1JJ,SAAsBk8B,EAAIC,EAAIktE,EAAIC,GAC9B,MACMC,EADO/wC,EAAA7pD,SAASuJ,aAAagkB,EAAIC,EAAIktE,EAAIC,GAC1B3jH,OAAS,EAC9B,OAAO4jH,EAAU,EAAIA,EAAU,EAsJflvB,CAAan+C,EAAIC,EAAIktE,EAAIC,KAI7C/nH,EAAA0qC,MAAMu9E,kBAAoB,SAASn7G,GAC/B,MAAMo7G,EAAep7G,EAAMP,WAAWoN,QAChCwuG,EAAer7G,EAAMmrG,QAAQ,aACnC,IAAIhzB,EAAQ,GAWZ,OAVAkjC,EAAaj7G,QAAQk7G,IACjB,MAAMnmG,EAASmmG,EAASr8B,YAClB9wD,EAAchZ,EAAO1V,WAC3B,GAAIse,EAAApmB,QAAG2e,cAAcnB,IACbgZ,EAAYthB,UAAYuuG,EAAc,CACtC,MAAMG,EAAWptF,EAAY5U,SAAS4zB,gBAAgBh4B,GACtDgjE,EAAQA,EAAM/wE,OAAOm0G,MAI1BpjC,GAOX,MAAaqjC,UAAyB/B,EAAAgC,UAClCr9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,eAGVxR,iBAAiBjkB,GACpB,OAAOjH,EAAA0mH,iBAPf1mH,EAAAsoH,mBAUAtoH,EAAA0qC,MAAM21C,YAAcioC,EAIpB,MAAaE,UAAsBjC,EAAAgC,UAK/Br9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK69G,UAAY,GACjB79G,KAAKq7F,MAAQ,WACbr7F,KAAK4lH,QAAU,IAAIjC,EAAAkC,OACnB7lH,KAAKmoC,OAAS,CACVrjB,KAAM,MAKPuD,YACH,OAAOroB,KAAK4lH,QAGTv9F,SAASpe,GACZjK,KAAK4lH,QAAQE,SAAS77G,GAGnBoe,UAAUpe,GACbjK,KAAK4lH,QAAQG,UAAU97G,GAGpBoe,aAAatmB,GAChB/B,KAAK4lH,QAAQriF,aAAaxhC,GAIvBsmB,iBAAiBjkB,GAIpB,OAHApE,KAAKmoC,OAAOrjB,KAAO,KACnBkD,EAAApmB,QAAGK,IAAI,gBAAiB,mBACpB,iCACG,KAIJomB,eACH,GAAIroB,KAAKmoC,OAAOrjB,KACZ,OAAO9kB,KAAKmoC,OAAOrjB,KAEvB,MAAMzP,EAAMrV,KAAKgmH,OAAOt8G,WAAW8Z,SAEnC,GADAxjB,KAAKmoC,OAAOrjB,KAAOzP,EAAI+hC,gBAAgBp3C,KAAKgmH,QACxChmH,KAAKgmH,OAAO98G,IAAI,aAAc,CAC9B,MAAM+8G,EAAY9oH,EAAA0qC,MAAMu9E,kBAAkBplH,KAAKgmH,QAC/ChmH,KAAKmoC,OAAOrjB,KAAO9kB,KAAKmoC,OAAOrjB,KAAKzT,OAAO40G,GAE/C,OAAOjmH,KAAKmoC,OAAOrjB,KAIhBuD,eAAepS,EAAWC,GAC7B,MAAMpO,EAAc9H,KAAKgmH,OAAO9nH,IAAI,UAAU6J,kBACvC8L,EAAIC,GAAMkU,EAAApmB,QAAGqa,QAAQ,CAAChG,EAAGC,GAAIlW,KAAKgmH,QACzC,OAAInyG,GAAM/L,GAAegM,GAAMhM,EAI5BugB,aAAa1J,GAEhB,OADkB3e,KAAKy1F,eACNtrF,OAAOwU,GAIrB0J,YAAYpe,GACf,MAAMC,EAAYlK,KAAKy1F,eACjBrT,EAAQjlF,EAAA0qC,MAAMq8E,oBAAoBlkH,KAAKgmH,OAAQ97G,GACrD,IAAIg8G,GAAS,EASb,OARA9jC,EAAM/3E,QAAQvK,IACKA,EAAKwK,YACbD,QAAQ8b,IACPA,EAAErP,UAAY7M,EAAM6M,UACpBovG,GAAS,OAIdA,EAIJ79F,cAAcne,GACjB,MAAMi8G,EAAa,GACb/jC,EAAQjlF,EAAA0qC,MAAMq8E,oBAAoBlkH,KAAKgmH,OAAQ97G,GACrD,IAAK,IAAI7M,EAAI,EAAGA,EAAI+kF,EAAM7gF,OAAQlE,IAAK,CACnC,MAAMsG,EAASy+E,EAAM/kF,GAAGs+B,oBACxB,IAAK,IAAInxB,EAAI,EAAGA,EAAI7G,EAAOpC,OAAQiJ,IAC/B,GAAIxK,KAAK4lH,QAAQn7G,QAAQ9G,EAAO6G,IAAK,CAEjC,GADAxK,KAAK4lH,QAAQQ,iBAAiBziH,EAAO6G,IACjCxK,KAAK4lH,QAAQS,gBAAgB1iH,EAAO6G,IACpC,OAAO43E,EAAM/kF,GAGb8oH,EAAWvgH,KAAKw8E,EAAM/kF,KAMtC,OAAI8oH,EAAW5kH,OAAS,EACbknB,EAAIjL,aAAa2oG,GAErB,KAIJ99F,eAAene,GAClB,MAAMyyG,EAAS38G,KAAK48G,YACdx6B,EAAQjlF,EAAA0qC,MAAMq8E,oBAAoBlkH,KAAKgmH,OAAQ97G,GACrD,IAAK,IAAI7M,EAAI,EAAGA,EAAI+kF,EAAM7gF,OAAQlE,IAAK,CACnC,MAAMsG,EAASy+E,EAAM/kF,GAAGiN,YACxB,IAAKqyG,EAAOlyG,QAAQ9G,EAAO,IAAM,OAAOy+E,EAAM/kF,GAElD,OAAO,KAGJgrB,SACH,MAAO,CACHtmB,KAAM/B,KAAKQ,UACXm8G,OAAQ38G,KAAK48G,YAAYn2F,UAI1B4B,gBACH,MAAMvoB,EAAOE,KAAKgmH,OAAOv3F,UACzB,GAAI3uB,EAAKwiG,WAAY,CACjB,MAAMgkB,EAAUxmH,EAAK4a,WAAW,GAChC,OAAQ1a,KAAKgmH,OAAyBv+G,WAAW8+G,aAAaD,GAElE,OAAO,EAGJj+F,aACH,MAAO,KACH,MAAMkuB,EAAS,IAAIpsB,EAAUqsB,OAC7Bx2C,KAAKgmH,OAAO1lG,IAAIi2B,IAKjBluB,mBAAmBmxF,GACtB,MAAMzhG,EAAQ/X,KAAKgmH,OAAOt8G,WACpB88G,EAAQhN,EAAU79F,OAClB8qG,EAAQjN,EAAUx9F,OACxB,OAAIhc,KAAK0mH,eAAeF,EAAOC,GACpB,KACH,MACMrnG,EADOrH,EAAMyL,SAASiL,QAAQ+3F,EAAOC,GACvB3lH,QAAQ,UAAU,GAChC6lH,EAAa,IAAIx8F,EAAU0uD,OAAO,CAACz5D,WACzCpf,KAAKgmH,OAAO1lG,IAAIqmG,IAIb3mH,KAAK4mH,qBAAqBpN,GAIlCnxF,qBAAqBvoB,GAExB,MAAMiY,EAAQ/X,KAAKgmH,OAAOt8G,YACnBu7G,EAAIC,GAAMllH,KAAKgmH,OAAOpqG,SACtBqX,EAAIC,GAAM,CAACpzB,EAAK6b,OAAQ7b,EAAKkc,QACpC,IAAKnI,EAAIC,GAAM,CAACmf,EAAKgyF,EAAI/xF,EAAKgyF,GAC9BrxG,EAAY,IAAPA,EAAWA,EAAK3M,KAAKiR,IAAItE,GAAM,EACpCC,EAAY,IAAPA,EAAWA,EAAK5M,KAAKiR,IAAIrE,GAAM,EAEpC,MAAO+kB,EAAMC,GAAQ,CAACmsF,EAAKpxG,EAAIqxG,EAAKpxG,GAEpC,GADgBiE,EAAMyL,SAASiL,QAAQoK,EAAMC,GACjC48D,aACR,MAAO,KACH,MAAMmxB,EAAU,IAAI18F,EAAU2uD,SAASjgD,EAAMC,EAAM/gB,GACnD/X,KAAKgmH,OAAO1lG,IAAIumG,IAKxB,MAAMC,EAAY9mH,KAAK+mH,kBAAkBjnH,GACzC,GAAIgnH,EAAUvlH,OAAS,EAAG,CACtB,MAAM0U,EAAI6wG,EAAU,GAAGnrG,OACjBzF,EAAI4wG,EAAU,GAAG9qG,OACvB,MAAO,KACH,MAAM6qG,EAAU,IAAI18F,EAAU2uD,SAAS7iE,EAAGC,EAAG6B,GAC7C/X,KAAKgmH,OAAO1lG,IAAIumG,IAIpB,OAAO1pH,EAAA0mH,gBAKRx7F,iBACH,MAAM2+F,EAAU,GACVrK,EAAS38G,KAAK48G,YACd1yG,EAAYlK,KAAKy1F,eACjBrT,EAAQjlF,EAAA0qC,MAAMq8E,oBAAoBlkH,KAAKgmH,OAAQ97G,GACrD,IAAK,IAAI7M,EAAI,EAAGA,EAAI+kF,EAAM7gF,OAAQlE,IAAK,CACnC,MAAMsG,EAASy+E,EAAM/kF,GAAGiN,YACpBqyG,EAAOkI,SAASlhH,EAAO,KACvBqjH,EAAQphH,KAAKjC,EAAO,IAG5B,OAAOqjH,EAIJ3+F,iBACH,MAAMs0F,EAAS38G,KAAK48G,YACd1yG,EAAYlK,KAAKy1F,eAGvB,OADgBt4F,EAAA0qC,MAAMu8E,iBAAiBl6G,EADpBD,GAAS0yG,EAAOlyG,QAAQR,IAOxCoe,aAAane,GAEhB,IAAIgV,GAAS,EACTqjD,EAAQ,GACZ,IAAK,IAAI/3D,EAAI,EAAGA,EAAIN,EAAU3I,OAAQiJ,IAAM+3D,EAAM38D,KAAK4E,GAGvD,IAAK,IAAInN,EAAI,EAAG4pH,GAFhB1kD,EAAQ95C,EAAIie,QAAQ67B,IAEOhhE,OAAQlE,EAAI4pH,EAAI5pH,IAAK,CAC5C,MAAM6pH,EAAK3kD,EAAMllE,GACXyC,EAAOoK,EAAUg9G,GACvB,GAAIpnH,EAAK8vB,SAAU,CACf,MAAMtE,EAAKxrB,EAAK6b,OAAS,IAAM7b,EAAKkc,OACpC,IAAKhc,KAAK69G,UAAU3+G,eAAeosB,GAAK,CACpCtrB,KAAK69G,UAAUvyF,IAAM,EACrBpM,EAAQgoG,EACR,YAGH,GAAIpnH,EAAKk2F,UAAW,CACrB,MAAMtyF,EAAO5D,EAAKmgB,YAAY,QAAQ,GACtC,GAAIvc,EAAKyjH,YAAa,CAClB,MAAM/gG,EAAO,IAAI+D,EAAU66D,SAG3B,OAFA5+D,EAAKghG,QAAQ1jH,GACb1D,KAAKgmH,OAAO1lG,IAAI8F,GACTjpB,EAAAymH,sBAQnB,OAHe,IAAX1kG,IACAA,EAAQuJ,EAAII,UAAU3e,IAEnBlK,KAAK4mH,qBAAqB18G,EAAUgV,IAOxCmJ,kBAAkBvoB,GACrB,MAAO+yE,EAAKC,GAAOhzE,EAAK8b,QAExB,OADY5b,KAAKgmH,OAAOt8G,WAAW8Z,SACxBujG,kBAAkB/mH,KAAKgmH,OAAQnzC,EAAKC,GAI5CzqD,aAAavoB,EAAYoK,GAC5B,MAAM+L,EAAInW,EAAK6b,OACTzF,EAAIpW,EAAKkc,OACTqrG,EAAQrnH,KAAKgmH,OAAOrqG,OACpB2rG,EAAQtnH,KAAKgmH,OAAOhqG,OAIpB6c,EAAOwuF,GAHEpxG,EAAIoxG,GAIbvuF,EAAOwuF,GAHEpxG,EAAIoxG,GAInB,GAAItnH,KAAKgmH,OAAOt8G,WAAW8Z,SAASqK,MAAMgL,EAAMC,GAAO,CACnD,MAAMyuF,EAAUvnH,KAAKgmH,OAAOt8G,WAAW8Z,SAASiL,QAAQoK,EAAMC,GAC9D,GAAIyuF,EAAQ7xB,aACR,OAAO11F,KAAK4mH,qBAAqBW,GAEhC,GAAIvnH,KAAKgmH,OAAO98G,IAAI,WAAaq+G,EAAQ9J,kBAC1C,OAAOz9G,KAAK4mH,qBAAqBW,GAGzC,OAAOvnH,KAAKwnH,aAAat9G,GAItBme,qBAEH,OADoBlrB,EAAA0qC,MAAMi8E,oBAAoB9jH,KAAKgmH,QAChC77G,OAAOrK,GAAQA,EAAK8vB,UAGpCvH,0BACH,MAAMq8F,EAAc1kH,KAAKynH,qBACzB,OAAI/C,EAAYnjH,OAAS,EACdknB,EAAIjL,aAAaknG,GAErB,MA1SfvnH,EAAAwoH,gBA8SAxoH,EAAA0qC,MAAM6/E,SAAW/B,8UCvgBjB,MAAA39F,EAAAC,EAAAhrB,EAAA,IACAs5B,EAAAt5B,EAAA,IAIAktB,EAAAiK,EAAAn3B,EAAA,KACA8sB,EAAA9sB,EAAA,IAEAmgC,EAAAngC,EAAA,IACA0qH,EAAA1qH,EAAA,IAEA2qH,EAAA3qH,EAAA,KACA4qH,EAAAzzF,EAAAn3B,EAAA,KAQaE,EAAA8/B,MAAa,GAEb9/B,EAAA2qH,gBAAkB/pH,OAAOwT,OAAO,QAC1BxT,OAAOwT,OAAO,IAAjC,MACMw2G,EAAc//F,EAAApmB,QAAGiJ,WAAamd,EAAApmB,QAAGgJ,WAMvC,MAAaw5B,UAAkB7N,EAAAS,OAI3B3O,YAAYzqB,GACRs5B,MAAM,CAACv2B,SAAUqnB,EAAApmB,QAAGiL,WAAY9K,KAAM,OACtC,MAAMimH,EAAQ,IAAI79F,EAAUkxD,MAC5B2sC,EAAMlrB,QAAQl/F,GACdoC,KAAKsgB,IAAI0nG,GACThoH,KAAKsgB,IAAI,IAAI6J,EAAU+lC,QACvBlwD,KAAKsgB,IAAI,IAAI6J,EAAUirD,UACvBp1E,KAAKsgB,IAAI,IAAI6J,EAAU4M,MAAM,YAAa/O,EAAApmB,QAAGiL,aAG1Cwb,UAAW,OAAOroB,KAAK9B,IAAI,SAASq+F,aACpCl0E,QAAQtmB,GAAO,OAAO/B,KAAK9B,IAAI,SAASs+F,WAAWz6F,GACnDsmB,cAAe,OAAOroB,KAAK9B,IAAI,SAAS+hB,cACxCoI,YAAYtmB,GAAO,OAAO/B,KAAK9B,IAAI,SAASu+F,YAAY16F,GAExDsmB,UACH,OAAOroB,KAAK9B,IAAI,YAAYuwB,UAEzBpG,YACH,OAAOroB,KAAK9B,IAAI,YAAYm3E,YAEzBhtD,aACHroB,KAAK9B,IAAI,YAAY+4C,aAElB5uB,SAAStQ,GACZ,OAAO/X,KAAK9B,IAAI,YAAY64C,SAASh/B,GAElCsQ,WAAY,OAAOroB,KAAK9B,IAAI,YAAYwL,WACxC2e,OAAgB,OAAOroB,KAAK9B,IAAI,YAAYyd,OAC5C0M,OAAgB,OAAOroB,KAAK9B,IAAI,YAAY8d,OAC5CqM,QAAiB,OAAOroB,KAAK9B,IAAI,YAAY0d,QAC7CyM,MAAMpS,EAAGC,GACZlW,KAAK9B,IAAI,YAAY44C,MAAM7gC,EAAGC,GAI3BmS,WACH,OAAOroB,KAAKkJ,IAAI,WAAalJ,KAAKkJ,IAAI,oBAGnCmf,QAAQpe,GAA4B,OAAO,EAC3Coe,SAASpe,IACToe,aAAatmB,IAEbsmB,QAAQzqB,GAAeoC,KAAK9B,IAAI,SAAS4+F,QAAQl/F,GACjDyqB,UACH,OAAOroB,KAAK9B,IAAI,SAASu9E,cAGtBpzD,WAAuB,OAAOroB,KAAKioH,OAEnC5/F,SAASyW,GACZ9+B,KAAKioH,OAASnpF,EACd9+B,KAAKioH,OAAOC,SAASloH,MAGlBqoB,WACH,OAAOL,EAAApmB,QAAGiJ,WAGPwd,qBAA8B,OAAO,EAGrCA,WAAWjkB,GAEd,MAAM4qB,EAAqBhvB,KAAKioH,OAAOE,iBAAiB/jH,GACxD,IAAIgkH,EAAS,KAEb,GAAW,OAAPp5F,EAAa,CACb,MAAMgT,EAAW96B,KAAK4B,MAAMi/G,EAAc/nH,KAAKiwD,YAC/Cm4D,EAAS,IAAIP,EAAK33D,OAAOluB,EAAUhT,QAGnCo5F,EAAS,IAAIP,EAAK33D,OAAO,EAAG/yD,EAAA2qH,iBAGhC,GAAI9nH,KAAKioH,OAAO/oH,eAAe,UAAW,CACtC,MAAMmpH,EAAKroH,KAAKioH,OAChBG,EAAOx5G,OAAUy5G,EAAmBz5G,OAGxC,OADAw5G,EAAOn+G,MAAQjK,KACRooH,EAIJ//F,SACH,IAAI85D,EAAU,KACVniF,KAAK0J,aACLy4E,EAAUniF,KAAK0J,WAAWoN,SAE9B,MAAM1S,EAAW,CACbyS,GAAI7W,KAAK8W,QAET/U,KAAM/B,KAAKQ,UACX2hF,UACArjD,MAAO9+B,KAAKioH,OAAOxhG,SACnB6hG,IAAK,QAUT,OAPAlkH,EAAIozB,WAAazN,EAAA0N,YAAYz3B,MAEZ,OAAboE,EAAIrC,MACJimB,EAAApmB,QAAGK,IAAI,gBAAiB,0BACH4c,KAAKC,UAAU1a,MAGjCA,GA9GfjH,EAAAinC,YAkHAjnC,EAAA8/B,MAAMvF,KAAO0M,EAIb,MAAaC,UAAsBD,EAW/B/b,YAAYzqB,GACRs5B,MAAMt5B,GAENoC,KAAKioH,OAAS,IAAI7qF,EAAAkW,kBAAkBtzC,MACpCA,KAAKioH,OAAOrL,YAAYr5E,aAAa,UAErCvjC,KAAKuoH,OAAS,IAAIX,EAAAY,UAAUxoH,MAC5BA,KAAKyoH,WAAa,GAGlBzoH,KAAKsgB,IAAI,IAAI6J,EAAU2V,YACvB9/B,KAAKsgB,IAAI,IAAI6J,EAAU0V,QACvB7/B,KAAKsgB,IAAI,IAAI6J,EAAU6V,OACvBhgC,KAAKsgB,IAAI,IAAI6J,EAAU4V,OAAO,KAC9B//B,KAAKsgB,IAAI,IAAI6J,EAAUqsD,WAEvB,MAAMj4C,EAAa,IAAIpU,EAAUwuD,WACjCp6C,EAAWmqF,YAAY1gG,EAAApmB,QAAG+I,eAC1B3K,KAAKsgB,IAAIie,GAGNlW,cACH,IAAI5e,EAAQzJ,KAAK9B,IAAI,cAAc0/G,cAEnC,OADI59G,KAAKkJ,IAAI,cAAcO,GAAS,GAC7BA,EAGJ4e,YAAY5e,GACfzJ,KAAK9B,IAAI,cAAcwqH,YAAYj/G,GAOhC4e,aAAatmB,GAChB/B,KAAKioH,OAAOrL,YAAYr5E,aAAaxhC,GAElCsmB,SAASpe,GACXjK,KAAKioH,OAA6BnC,SAAS77G,GAEzCoe,UAAUpe,GACZjK,KAAKioH,OAA6BlC,UAAU97G,GAG1Coe,QAAQpe,GACX,OAAOjK,KAAKioH,OAAOrL,YAAYnyG,QAAQR,GAGpCoe,SAASpe,GACZ,OAAOjK,KAAKioH,OAAOrL,YAAYiI,SAAS56G,GAOrCoe,WAAa,OAAOroB,KAAKuoH,OAGzBlgG,YAAa,OAAOroB,KAAKuoH,OAAOtgH,YAGhCogB,mBACH,OAAOroB,KAAKuoH,OAAO3gH,mBAIhBygB,aACH,OAAOroB,KAAKuoH,OAAOl/G,eAAes/G,QAAQ,WAGvCtgG,iBACH,IAAIhhB,EAAMrH,KAAKuoH,OAAOl/G,eAAe9B,YAIrC,OAHIvH,KAAKkJ,IAAI,YACT7B,GAAOrH,KAAK9B,IAAI,UAAUwL,SAAS,UAEhCrC,EAGJghB,kBACH,IAAIugG,EAAM5oH,KAAKuoH,OAAOl/G,eAAe0U,aAIrC,OAHI/d,KAAKkJ,IAAI,YACT0/G,GAAO5oH,KAAK9B,IAAI,UAAUwL,SAAS,YAEhCk/G,EAGJvgG,qBACH,OAAOroB,KAAKuoH,OAAOl/G,eAAe4U,gBAG/BoK,mBACH,MAAMwgG,EAAS7oH,KAAKuoH,OAAOl/G,eAAey/G,YAAY,UACtD,IAAI9uG,EAAQ,EACZ,GAAI6uG,EAAQ,CAER7uG,EADe6uG,EACgB9qG,aAC3B/d,KAAKkJ,IAAI,YACT8Q,GAASha,KAAK9B,IAAI,UAAUwL,SAAS,YAG7C,OAAOsQ,EAGJqO,cAAc0gG,GACjB/oH,KAAKgpH,YAAcD,EAGhB1gG,gBACH,OAAOroB,KAAKgpH,YAGT3gG,QAAQo4E,GACXzgG,KAAKipH,WAAaxoB,EAGfp4E,UACH,OAAOroB,KAAKipH,WAIT5gG,eAGH,OAAO,EAFSroB,KAAK9B,IAAI,SAASqK,cAEb,EADPvI,KAAKuoH,OAAOl/G,eAAed,cACRvI,KAAKyoH,WAInCpgG,YAAYtL,GACXA,GACA/c,KAAKioH,OAAS,IAAIN,EAAAuB,YAAYlpH,MAC9BmpH,EAAoBnpH,MACpBA,KAAKsgB,IAAI,IAAI6J,EAAUu5D,QAClB1jF,KAAKkJ,IAAI,eACVlJ,KAAKsgB,IAAI,IAAI6J,EAAUw1D,aAI3B33D,EAAApmB,QAAGK,IAAI,iBAAkB,cACrB,+CAKLomB,cAActL,GAmNzB,IAAgC9S,EAlNpB8S,GACA/c,KAAKsgB,IAAI,IAAI6J,EAAUs5D,kBACvBzjF,KAAKopH,aAAeppH,KAAKioH,OACzBjoH,KAAKioH,OAAS,IAAIN,EAAAuB,YAAYlpH,MAC9BmpH,EAAoBnpH,MACpBA,KAAKsgB,IAAI,IAAI6J,EAAUgzD,aAGvBn9E,KAAK05B,OAAO,oBACZ15B,KAAK05B,OAAO,aAyMQzvB,EAxMGjK,KAyM/BqpH,EAAiBh/G,QAAQm7B,IACrB,IAAInf,GAAU,EACd,GAAIpc,EAAMf,IAAIs8B,GAAW,CACrB,MAAMz/B,EAAOkE,EAAMmrG,QAAQ5vE,GAC3Bz/B,EAAKsE,QAAQ+b,IACa,iBAAlBA,EAAKkjG,WACLjjG,EAASD,EAAKtP,YAIV,IAAZuP,GACApc,EAAMyvB,OAAOrT,KAnNbrmB,KAAKioH,OAASjoH,KAAKopH,oBACZppH,KAAKopH,cAKb/gG,UACH,MAAMpS,EAAIjW,KAAK2b,OACTzF,EAAIlW,KAAKgc,OACTjE,EAAQ/X,KAAK0J,WACnB,OAAIqO,EACOA,EAAMyL,SAASiL,QAAQxY,EAAGC,GAE9B,KAGJmS,UAAUtQ,GACb,QAAI/X,KAAK0J,YACE1J,KAAK0J,WAAWoN,UAAYiB,EAAMjB,QAK1CuR,SACH,IAAI85D,EAAU,KACVniF,KAAK0J,aACLy4E,EAAUniF,KAAK0J,WAAWoN,SAE9B,MAAM1S,EAAW,CACbyS,GAAI7W,KAAK8W,QACTlZ,KAAMoC,KAAK0B,UACXK,KAAM/B,KAAKQ,UACXyV,EAAGjW,KAAK2b,OACRzF,EAAGlW,KAAKgc,OACRutG,SAAUvpH,KAAK49G,cACfz7B,UACAqnC,UAAWxpH,KAAKyH,WAAWgT,eAAegM,SAC1CgjG,UAAWzpH,KAAKyH,WAAW4B,eAAeod,SAC1CqY,MAAO9+B,KAAKioH,OAAOxhG,SACnB6hG,IAAK,WACL9wF,WAAYzN,EAAA0N,YAAYz3B,OAkB5B,OAfiB,OAAboE,EAAIrC,MACJimB,EAAApmB,QAAGK,IAAI,iBAAkB,0BACJ4c,KAAKC,UAAU1a,MAGpCpE,KAAKipH,aACL7kH,EAAIslH,UAAY1pH,KAAKipH,WAAWxiG,UAEhCzmB,KAAKkJ,IAAI,YACT9E,EAAI2Y,UAAW,GAEf/c,KAAKopH,eACLhlH,EAAI06B,MAAQ9+B,KAAKopH,aAAa3iG,UAG3BriB,EAOJikB,YACH,IAAI/gB,EAAStH,KAAK9B,IAAI,UAAUqJ,YAIhC,OAHAD,GAAUtH,KAAK2pH,iBACfriH,GAAUtH,KAAK4pH,iBAAiB,aAAc,aAC9CtiH,GAAU0gB,EAAApmB,QAAGgI,iBAAiB5J,KAAKsJ,eAIhC+e,aACH,IAAI2V,EAAUh+B,KAAK9B,IAAI,UAAU6f,aAIjC,OAHAigB,GAAWh+B,KAAK6pH,kBAChB7rF,GAAWh+B,KAAK4pH,iBAAiB,aAAc,cAC/C5rF,GAAWhW,EAAApmB,QAAGmI,iBAAiB/J,KAAKiJ,cAIjCof,gBACH,IAAI8W,EAAan/B,KAAK9B,IAAI,UAAU+f,gBAGpC,OAFAkhB,GAAcn/B,KAAK8pH,qBACnB3qF,GAAcn/B,KAAK4pH,iBAAiB,aAAc,iBAI/CvhG,YACH,IAAI4V,EAASj+B,KAAK9B,IAAI,UAAU6I,aAChC,MAAMiB,EAAShI,KAAKiI,YACpB,GAAID,EAAQ,CACR,MAAM+hH,EAAY/hG,EAAApmB,QAAGiF,cAAcmB,GAC/B+hH,EAAY9rF,IACZA,EAAS8rF,GAGjB,MAAM5rF,EAAWn+B,KAAKuI,cAGtB,OAFA01B,GAAUjW,EAAApmB,QAAG0G,iBAAiB61B,GAC9BF,GAAUj+B,KAAK4pH,iBAAiB,aAAc,aAK3CvhG,eAAeiY,GAClB,OAAOtgC,KAAK4pH,iBAAiB,aAActpF,GAGxCjY,iBAAiB2zE,EAAkBr9E,GACtC,MAAMqrG,EAAWhqH,KAAKo1G,QAAQpZ,GAC9B,OAAIguB,EAASzoH,OAAS,EACXyoH,EAAShhC,OAAO,CAACn/E,EAAK/D,IAClB+D,EAAM/D,EAAI6Y,KAClB,GAEA,EAOJ0J,cACH,IAAIxe,EAAM7J,KAAK9B,IAAI,SAASoL,cAG5B,OAFAO,GAAO7J,KAAKyH,WAAW4B,eAAeC,cACtCO,GAAO7J,KAAK4pH,iBAAiB,YAAa,eAIvCvhG,aACH,IAAIxf,EAAM7I,KAAK9B,IAAI,SAAS+K,aAG5B,OAFAJ,GAAO7I,KAAKyH,WAAW4B,eAAeJ,aACtCJ,GAAO7I,KAAK4pH,iBAAiB,YAAa,cAIvCvhG,cACH,IAAI1e,EAAM3J,KAAK9B,IAAI,SAASqK,cAG5B,OAFAoB,GAAO3J,KAAKyH,WAAW4B,eAAed,cACtCoB,GAAO3J,KAAK4pH,iBAAiB,YAAa,eAIvCvhG,eACH,IAAI4hG,EAAMjqH,KAAK9B,IAAI,SAASq6E,eAG5B,OAFA0xC,GAAOjqH,KAAKyH,WAAW4B,eAAekvE,eACtC0xC,GAAOjqH,KAAK4pH,iBAAiB,YAAa,gBAIvCvhG,WACH,IAAI6V,EAAQl+B,KAAK9B,IAAI,SAAS+xD,WAG9B,OAFA/xB,GAASl+B,KAAKyH,WAAW4B,eAAe4mD,WACxC/xB,GAASl+B,KAAK4pH,iBAAiB,YAAa,YAIzCvhG,gBACH,IAAI6hG,EAAMlqH,KAAK9B,IAAI,SAASs6E,gBAG5B,OAFA0xC,GAAOlqH,KAAKyH,WAAW4B,eAAemvE,gBACtC0xC,GAAOlqH,KAAK4pH,iBAAiB,YAAa,iBAIvCvhG,WACH,IAAI8hG,EAAMnqH,KAAK9B,IAAI,SAASu6E,WAG5B,OAFA0xC,GAAOnqH,KAAKyH,WAAW4B,eAAeovE,WACtC0xC,GAAOnqH,KAAK4pH,iBAAiB,YAAa,YAKvCvhG,aAAaiY,GAChB,OAAOtgC,KAAK4pH,iBAAiB,YAAatpF,IArVlDnjC,EAAAknC,gBAyVA,MAAMglF,EAAmB,CAAC,YAAa,cAEvC,SAASF,EAAoBl/G,GACzBo/G,EAAiBh/G,QAAQm7B,IACrB,IAAI4kF,GAAS,EACb,GAAIngH,EAAMf,IAAIs8B,GAAW,CACRv7B,EAAMmrG,QAAQ5vE,GACtBn7B,QAAQ+b,IACa,iBAAlBA,EAAKkjG,WACLc,GAAS,KAKrB,IAAKA,EAAQ,CACT,MAAMC,EAAY,IAAIlgG,EAAUqb,GAChC6kF,EAAUz+B,OAAO,gBACjB3hF,EAAMqW,IAAI+pG,MAqBtBltH,EAAA8/B,MAAMyqF,SAAWrjF,EAGjBA,EAAcimF,kBAAoB,SAASrgH,GACvC,MAAMsgH,EAAetgH,EAAMP,WAAWwuC,iBAChCsyE,EAAWxiG,EAAApmB,QAAGyjB,mBAAmBpb,EAAMP,YAE7C,IAAIk2E,EAAK,KACL31E,EAAMf,IAAI,gBACZ02E,EAAK31E,EAAM/L,IAAI,cAAcs9G,QAAU,IACrCvxG,EAAM/L,IAAI,cAAcusH,YAK5B,MAAMtqB,EAAa,CACjBnqB,GAAI/rE,EAAM/L,IAAI,UAAUif,QAAU,IAChClT,EAAM/L,IAAI,UAAU+e,WACtB2iE,KAEA8qC,IAAK,CAACzgH,EAAM1C,YAAa0C,EAAM5B,eAAe,cAC9CsiH,IAAK,CAAC1gH,EAAM8T,aAAc9T,EAAM5B,eAAe,eAC/CuiH,IAAK,CAAC3gH,EAAMgU,gBAAiBhU,EAAM5B,eAAe,kBAElDwiH,IAAK,CAAC5gH,EAAM1B,cAAe0B,EAAM6gH,aAAa,gBAC9CC,IAAK,CAAC9gH,EAAMhB,aAAcgB,EAAM6gH,aAAa,eAC7CE,IAAK,CAAC/gH,EAAMX,cAAeW,EAAM6gH,aAAa,gBAC9CG,IAAK,CAAChhH,EAAMsuE,eAAgBtuE,EAAM6gH,aAAa,iBAC/CI,IAAK,CAACjhH,EAAMuuE,gBAAiBvuE,EAAM6gH,aAAa,kBAChDK,IAAK,CAAClhH,EAAMwuE,WAAYxuE,EAAM6gH,aAAa,aAE3C96D,MAAO,CAAC/lD,EAAMgmD,WAAYhmD,EAAM6gH,aAAa,aAC7CM,GAAInhH,EAAM/L,IAAI,cAAcq9B,SAC5B8vF,GAAIphH,EAAM/L,IAAI,cAAcoe,cAC5BgvG,GAAIf,EACJgB,IAAKf,GAOP,OAJIvgH,EAAMf,IAAI,YACVi3F,EAAMvuF,EAAI3H,EAAM/L,IAAI,UAAUk/F,aAG3B+C,GAGXhjG,EAAAquH,WAAA,SAA2BpsG,GACvB,GAAIA,EAEA,MAAiC,mBADnBA,EAAOkkB,WACA61E,4KCnkB7B,MAAAjxF,EAAAD,EAAAhrB,EAAA,KACA+qB,EAAAC,EAAAhrB,EAAA,IAGM8pB,EAFN9pB,EAAA,GAEa+pB,UAAUC,UAEV9pB,EAAA0qH,KAAO,GAKpB,MAAa33D,EAKT7nC,YAAYs8D,EAAK31D,GACbhvB,KAAKowD,UAAYu0B,EACjB3kF,KAAKyrH,IAAMz8F,EACXhvB,KAAKg9F,QAAU,EAGnB30E,UAAUqjG,GAAK1rH,KAAKg9F,QAAU0uB,EAC9BrjG,YAAa,OAAOroB,KAAKg9F,QACzB30E,cAAe,OAAOroB,KAAKowD,UAC3B/nC,WAAYroB,KAAKyrH,OAdrBtuH,EAAA+yD,SAuBa/yD,EAAAwuH,UAAY,SAAShnC,EAAK31D,EAAI6gC,EAAQzM,GAG/C,IAAIuM,EAAUE,EAEV+7D,EAAUxoE,EAEV2lD,EAAS,KAEb/oG,KAAK6rH,SAAU,EAGf7rH,KAAK+c,SAAW,MAAM,GAEtB/c,KAAK8rH,WAAa,KAAM,IAAI57D,EAAOy0B,EAAK31D,IAExChvB,KAAK+rH,UAAY,KAAMp8D,GACvB3vD,KAAKgsH,UAAYn8D,KAAWF,EAAUE,IAEtC7vD,KAAKisH,UAAY,KAAML,GACvB5rH,KAAKksH,UAAY9oE,KAAWwoE,EAAUxoE,IAEtCpjD,KAAK+2C,SAAWh/B,KAAUgxF,EAAShxF,IACnC/X,KAAK0J,SAAW,KAAMq/F,IAKb5rG,EAAAgvH,WAAa,SAASliH,EAAO06E,GACtC3kF,KAAKosH,KAAOznC,EAMZxnF,EAAAwuH,UAAUnuH,KAAKwC,KAAMA,KAAKosH,KAJN,KAChBniH,EAAM/L,IAAI,UAAUg4E,MAAM,KAGe,IAEjDluD,EAAApmB,QAAG0D,QAAQnI,EAAAgvH,WAAYhvH,EAAAwuH,WAGVxuH,EAAAkvH,aAAe,SAASpiH,EAAO06E,GACxC3kF,KAAKosH,KAAOznC,EAMZxnF,EAAAwuH,UAAUnuH,KAAKwC,KAAMA,KAAKosH,KAJD,KACrBniH,EAAM/L,IAAI,cAAc2hF,MAAM,KAGgB,IAEtD73D,EAAApmB,QAAG0D,QAAQnI,EAAAkvH,aAAclvH,EAAAwuH,WAGZxuH,EAAAmvH,aAAe,SAASt9F,EAAIo0B,EAAQ/+C,GAU7ClH,EAAAwuH,UAAUnuH,KAAKwC,KAAM,EAPX,KACDgoB,EAAApmB,QAAG6D,cAAc,CAACpB,KACnB2jB,EAAApmB,QAAGslB,QAAQ7iB,GAEf2qB,MAGyB,EAAOo0B,IAExCp7B,EAAApmB,QAAG0D,QAAQnI,EAAAmvH,aAAcnvH,EAAAwuH,WAIZxuH,EAAAsyD,UAAY,WAGrBzvD,KAAKwwD,WAAa,IAAItoC,EAAAtmB,QAAI6tD,UAAUS,OACpClwD,KAAKwwD,WAAWL,iBAAmB,EACnCnwD,KAAKwwD,WAAWJ,UAAY,EAG5BpwD,KAAKkvD,QAAU,GACflvD,KAAKusH,QAAU,GAEfvsH,KAAK01B,WAAY,EAGjB3O,EAAK4O,YAAY3N,EAAApmB,QAAGqJ,iBAAkBjL,OAK1C7C,EAAAsyD,UAAUxwD,UAAUqhB,IAAM,SAASksG,EAAY38D,EAAQzM,GACnDpjD,KAAKwwD,WAAWlwC,IAAIksG,EAAY38D,EAAQzM,GACpCopE,EAAWttH,eAAe,WAC1Bc,KAAKkvD,QAAQtpD,KAAK4mH,GAGlBxsH,KAAKusH,QAAQ3mH,KAAK4mH,IAK1BrvH,EAAAsyD,UAAUxwD,UAAU6wD,KAAO,WACvB,OAAO9vD,KAAKwwD,WAAWV,QAK3B3yD,EAAAsyD,UAAUxwD,UAAUwtH,UAAY,SAASrE,GACrCpoH,KAAKwwD,WAAWH,YAAY+3D,EAAOsE,gBAIvCvvH,EAAAsyD,UAAUxwD,UAAUy6B,OAAS,SAAS8yF,GAClC,GAAIA,EAAWttH,eAAe,WAC1B,OAAOc,KAAK2sH,YAAYH,GAEvB,CACD,MAAMttG,EAAQlf,KAAKusH,QAAQxsG,QAAQysG,IACpB,IAAXttG,GACAlf,KAAKusH,QAAQ7/F,OAAOxN,EAAO,GAGnC,OAAOlf,KAAKwwD,WAAW92B,OAAO8yF,IAIlCrvH,EAAAsyD,UAAUxwD,UAAU0tH,YAAc,SAASH,GACvC,IAAIttG,GAAS,EAOb,OANIstG,EAAWttH,eAAe,aAEX,KADfggB,EAAQlf,KAAKkvD,QAAQnvC,QAAQysG,KAEzBxsH,KAAKkvD,QAAQxiC,OAAOxN,EAAO,GAG5Blf,KAAKwwD,WAAW92B,OAAO8yF,IAGlCrvH,EAAAsyD,UAAUxwD,UAAUmwD,QAAU,WAC1B,OAAOpvD,KAAKwwD,WAAWpB,WAG3BjyD,EAAAsyD,UAAUxwD,UAAUkuC,OAAS,SAASrX,EAAS3wB,GACvC2wB,IAAY9N,EAAApmB,QAAGqJ,kBACX9F,EAAKjG,eAAe,UACpBc,KAAK05B,OAAOv0B,EAAK8E,2KC7K7B,MAAA+d,EAAAC,EAAAhrB,EAAA,IACA2vH,EAAA3vH,EAAA,IACAymH,EAAAzmH,EAAA,IAEA+yC,EAAA/yC,EAAA,GAEM4vH,EAAY,GAGlB,MAAa34E,UAAqBwvE,EAAAgC,UAE9Br9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,YAJrB18B,EAAA+2C,eASA/2C,EAAA2vH,aAAA,cAAkC54E,EAK9B7rB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,WACb75B,KAAK+sH,WAAa,KAClB/sH,KAAKgtH,gBAAkB,KAIpB3kG,cAAc0kG,GACjB/sH,KAAK+sH,WAAaA,EAClB/sH,KAAKgtH,iBAAkB,IAAIJ,EAAAK,aAAcC,eAAeH,GAIrD1kG,mBACH,OAAIL,EAAApmB,QAAG8jB,UAAUmnG,GACN,KACH,MAAM90G,EAAQ/X,KAAKmtH,WAAWzjH,WACxB0jH,EAAWr1G,EAAM0rF,mBAChBxtF,EAAGC,GAAK,CAACk3G,EAASzxG,OAAQyxG,EAASpxG,QAGpCqxG,EADSr9E,EAAAvS,YAAYmO,YACHL,kBACpB,CAAC5sB,KAAM3e,KAAKgtH,kBACZK,IACAt1G,EAAMgW,SAASs/F,EAAUp3G,EAAGC,GAC5B8R,EAAApmB,QAAGslB,8BAA8BjR,MAAMC,OAI5C,OAGJmS,SACH,MAAO,CACHtmB,KAAM/B,KAAKQ,UACXusH,WAAY/sH,KAAK+sH,iLC3D7B,MAAA/kG,EAAAC,EAAAhrB,EAAA,IACAqwH,EAAArwH,EAAA,IAGMswH,EAAe,eA0hDrB,SAAgBC,EAAWzrH,EAAMgW,GAC7B,MAAO,CACHqO,KAAM,aAAczH,KAAM,CACtB8uG,UAAWzlG,EAAApmB,QAAGoS,IAAIjS,EAAK2R,eACvBqjC,SAAU/uB,EAAApmB,QAAGigB,WAAW9J,EAAMrE,iBAK1C,SAAgBg6G,EAAWpvH,GACvB,MAAO,CAAC8nB,KAAM,mBAAoBzH,KAAM,CAACgvG,UAAWrvH,IAl9C3CnB,EAAAywH,WAA2B,CAGpC,CACIhwH,KAAM,SAAU+sC,YAAY,EAAM5oC,KAAM,SACxC7B,UAAW,oBACXoH,OAAQ,EAAG02B,QAAS,EAAGY,GAAI,EAC3BO,WAAY,EACZ11B,MAAO,EAAGo1B,OAAQ,EAAGX,MAAO,IAAKY,MAAO,SACxCsE,QAASpb,EAAApmB,QAAGsP,aAEhB,CACItT,KAAM,MAAO++B,KAAM,IAAKiN,KAAM,UAElC,CACIhsC,KAAM,mBAAoB++B,KAAM,IAAKiN,KAAM,SAC3CU,MAAOgjF,EAAAhjF,MAAM,QAAS,SACtBrM,OAAQ,MACRD,QAAS,EAAG6E,QAAS,SACrBR,MAAO,CAAC,CAACQ,QAAS,YAAab,SAAU,OAE7C,CACIpkC,KAAM,MAAO++B,KAAM,IAAKiN,KAAM,SAC9B5L,QAAS,EAAG6E,QAAS,UAEzB,CACIjlC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,SACpC5L,QAAS,EAAGY,GAAI,GAEpB,CACIhhC,KAAM,SAAU++B,KAAM,IAAKiN,KAAM,SACjCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,SAAU++B,KAAM,IAAKiN,KAAM,SACjCa,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,OAAQ++B,KAAM,IAAKiN,KAAM,SAC/Ba,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,OAAQ++B,KAAM,IAAKiN,KAAM,SAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,EAAGC,OAAQ,EAAGgE,QAAS,UAE/B,CACIjlC,KAAM,OAAQ++B,KAAM,IAAKiN,KAAM,SAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,SACtCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,EAChB4C,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,OAAQ7lB,KAAM,QAEpD,CACIxa,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,SACtCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,EAChB4C,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,SAEvD,CACIxa,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,SACxCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAC/BW,GAAI,GAAIC,OAAQ,EAChB4C,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,QACnDiqB,MAAO,CAAC,CAACQ,QAAS,YAAab,SAAU,OAE7C,CACIpkC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,SACpCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,SAAU++B,KAAM,IAAKiN,KAAM,SACjCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9CW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,QAAS++B,KAAM,IAAKiN,KAAM,SAChCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,EAAGgE,QAAS,UAEhC,CACIjlC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,SACpCa,QAAS,OACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,SACvCa,QAAS,QACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAC/BW,GAAI,GAAIC,OAAQ,EAChB4C,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,SAEvD,CACIxa,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,SACxCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,EAAGgE,QAAS,UAEhC,CACIjlC,KAAM,iBAAkB++B,KAAM,IAAKiN,KAAM,SACzCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAC/BW,GAAI,GAAIC,OAAQ,EAAGC,MAAO,cAC1B6E,OAAQ,CAAC,iBAAkBhF,MAAO,EAAGD,GAAI,EACzC+C,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,SAEvD,CACIxa,KAAM,OAAQ++B,KAAM,IAAKiN,KAAM,SAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,SACxCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,mBAAoB++B,KAAM,IAAKiN,KAAM,SAC3CtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BwM,QAAS,MACT7L,GAAI,GAAIC,OAAQ,EAAGX,MAAO,KAE9B,CACItgC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,SACpCa,QAAS,OACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAEpB,CACIjhC,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,SAClCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,EAAGgE,QAAS,SAAU3E,MAAO,KAEjD,CACItgC,KAAM,aAAc++B,KAAM,IAAKiN,KAAM,SACrCU,MAAOgjF,EAAAhjF,MAAM,OAAQ,SACrBhjC,OAAQ,GAAI02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,UAC/CW,GAAI,GAAIC,OAAQ,EAChBwD,MAAO,CACH,CAACQ,QAAS,OAAQb,SAAU,YAEhCa,QAAS,CAAC2qF,EAAW,MAAO,UAEhC,CACI5vH,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,SAClCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9CE,SAAU,GAAIS,GAAI,GAAIC,OAAQ,EAC9BgE,QAAS,CAAC2qF,EAAW,MAAO,YAEhC,CACI5vH,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,SACvCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,GAAIlB,OAAQ,OAC/CE,SAAU,GAAIS,GAAI,GAAIC,OAAQ,EAC9B4L,QAAS,OACT5H,QAAS,CAAC2qF,EAAW,MAAO,YAEhC,CACI5vH,KAAM,kBAAmB++B,KAAM,IAAKiN,KAAM,SAC1CU,MAAOgjF,EAAAhjF,MAAM,OAAQ,SACrBhjC,OAAQ,GAAI02B,QAAS,EAAGC,OAAQ,UAChCW,GAAI,GAAIC,OAAQ,GAChBwD,MAAO,CACH,CAACQ,QAAS,OAAQb,SAAU,YAEhCa,QAAS,CAAC2qF,EAAW,MAAO,cAEhC,CACI5vH,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,SACtCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BW,GAAI,GAAIC,OAAQ,GAAIgE,QAAS,SAAU/D,MAAO,cAC9C6E,OAAQ,CAAC,kBAAmBhF,MAAO,GAAID,GAAI,IAE/C,CACI9gC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,SACpCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,OAC/BW,GAAI,GAAIC,OAAQ,GAAIgE,QAAS,SAC7BR,MAAO,CAAC,CAACQ,QAAS,YAAab,SAAU,aAE7C,CACIpkC,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,SACtCU,MAAOgjF,EAAAhjF,MAAM,QAAS,SACtBhjC,OAAQ,GAAI02B,QAAS,EAAGmB,WAAY,GAAIlB,OAAQ,OAChDW,GAAI,GAAIC,OAAQ,IAEpB,CACIjhC,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,SACvCU,MAAOgjF,EAAAhjF,MAAM,SAAU,SACvBhjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,UAC9CW,GAAI,GAAIC,OAAQ,GAAIC,MAAO,cAC3B6E,OAAQ,CAAC,gBAAiB,eAAgBhF,MAAO,GAAID,GAAI,GACzD+C,OAAQ,CAACO,SAAU,OAAQ/D,OAAQ,UAAW7lB,KAAM,SAExD,CACIxa,KAAM,oBAAqB++B,KAAM,IAAKiN,KAAM,SAC5CU,MAAOgjF,EAAAhjF,MAAM,OAAQ,SACrBhjC,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAAIlB,OAAQ,YACjDW,GAAI,GAAIC,OAAQ,GAAIgE,QAAS,SAC7BR,MAAO,CAAC,CAACQ,QAAS,YAAab,SAAU,YACzC2B,OAAQ,CAAC,aAAchF,MAAO,GAAID,GAAI,IAI1C,CACI9gC,KAAM,YAAamE,KAAM,QACzB4oC,YAAY,EACZvH,QAASpb,EAAApmB,QAAGsP,aAEhB,CACItT,KAAM,eAAgBgsC,KAAM,YAC5BjN,KAAM,IAAK2N,MAAOgjF,EAAAhjF,MAAM,QAAS,OACjChjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,WAC9CW,GAAI,GAAIC,OAAQ,EAChBC,MAAO,cAAe6E,OAAQ,CAAC,aAC/BhF,MAAO,GAAID,GAAI,IAEnB,CACI9gC,KAAM,SAAUgsC,KAAM,YACtBjN,KAAM,IAAKz8B,UAAW,oBACtBoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnCP,GAAI,GAAIC,OAAQ,GAAIZ,OAAQ,MAC5B4E,QAAS,CAAC2qF,EAAW,SAAU,aAC/B1uF,MAAO,cAAe6E,OAAQ,CAAC,eAC/BhF,MAAO,GAAID,GAAI,IAInB,CACI9gC,KAAM,gBAAiBmE,KAAM,YAC7B4oC,YAAY,EACZvH,QAASpb,EAAApmB,QAAGsP,aAEhB,CACItT,KAAM,kBAAmBgsC,KAAM,gBAC/BjN,KAAM,IAAKz8B,UAAW,mBACtBoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnCP,GAAI,GAAIC,OAAQ,EAAGZ,OAAQ,MAC3B4E,QAAS,aACT/D,MAAO,cAAe6E,OAAQ,CAAC,aAC/BhF,MAAO,GAAID,GAAI,IAEnB,CACI9gC,KAAM,gBAAiBgsC,KAAM,gBAC7BjN,KAAM,IAAKz8B,UAAW,iBACtBoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnCP,GAAI,GAAIC,OAAQ,EAAGZ,OAAQ,MAC3B4E,QAAS,SACT/D,MAAO,cAAe6E,OAAQ,CAAC,iBAC/BhF,MAAO,GAAID,GAAI,IAEnB,CACI9gC,KAAM,kBAAmBgsC,KAAM,gBAC/BjN,KAAM,IAAKz8B,UAAW,mBACtBoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,GACnCP,GAAI,GAAIC,OAAQ,GAAIZ,OAAQ,MAC5Ba,MAAO,cAAe6E,OAAQ,CAAC,aAC/BhF,MAAO,GAAID,GAAI,IAEnB,CACI9gC,KAAM,iBAAkBgsC,KAAM,gBAC9BU,MAAOgjF,EAAAhjF,MAAM,SAAU,SACvB3N,KAAM,IAAKz8B,UAAW,kBACtBoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnCP,GAAI,GAAIC,OAAQ,GAAIZ,OAAQ,MAC5Ba,MAAO,cAAe6E,OAAQ,CAAC,cAC/Bd,QAAS,CAAC,YACN2qF,EAAW,QAAS,UACpBA,EAAW,OAAQ,aAEvB7uF,MAAO,GAAID,GAAI,IAInB,CACI9gC,KAAM,SAAU++B,KAAM,IAAK56B,KAAM,SACjC7B,UAAW,oBACXoH,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAAGm1B,GAAI,EACpDO,WAAY,EACZN,OAAQ,EAAGuE,QAAS,CAAC,SACrBtE,MAAOyuF,GAEX,CACI3vH,KAAM,iBAAkBgsC,KAAM,SAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGY,GAAI,GAC3B2H,MAAO,CAAC,CAAC3oC,KAAM,OAAQ2hB,MAAO,MAElC,CACI3hB,KAAM,iBAAkBgsC,KAAM,SAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,GAEZ,CACIjhC,KAAM,gBAAiBgsC,KAAM,SAC7BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,EACRC,MAAO,cAAeJ,GAAI,GAAIC,MAAO,GACrCgF,OAAQ,CAAC,SAEb,CACI/lC,KAAM,kBAAmBgsC,KAAM,SAC/B3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,GAEZ,CACIjhC,KAAM,kBAAmBgsC,KAAM,SAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CD,MAAO,GAAID,GAAI,GACfI,MAAO,cAAe6E,OAAQ,CAAC,gBAC/B9E,OAAQ,GAEZ,CACIjhC,KAAM,cAAegsC,KAAM,SAC3BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,GAEZ,CACIjhC,KAAM,cAAegsC,KAAM,SAC3BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,IAGZ,CACIjhC,KAAM,WAAY++B,KAAM,IAAK56B,KAAM,OACnCuoC,MAAOgjF,EAAAhjF,MAAM,QAAS,UAAWK,YAAY,EAC7CrjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAAGm1B,GAAI,GACpDC,OAAQ,EAAGC,MAAOyuF,EAClBnqF,QAAS,CAAC,WAEd,CACIxlC,KAAM,eAAgBgsC,KAAM,WAC5BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1CC,OAAQ,GAEZ,CACIjhC,KAAM,kBAAmBgsC,KAAM,WAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1CC,OAAQ,EACR0H,MAAO,CAAC,CAAC3oC,KAAM,aAAc2hB,MAAO,KAExC,CACI3hB,KAAM,gBAAiBgsC,KAAM,WAC7BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1CC,OAAQ,EAAGC,MAAO,cAClB6E,OAAQ,CAAC,YAAa,iBACtBhF,MAAO,GAAID,GAAI,IAEnB,CACI9gC,KAAM,YAAagsC,KAAM,WACzBtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1CT,SAAU,GAAID,MAAO,GACrBW,OAAQ,GAIZ,CACIjhC,KAAM,WAAY++B,KAAM,IAAK56B,KAAM,WACnCuF,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAAGm1B,GAAI,GACpDC,OAAQ,EAAGC,MAAOyuF,EAClBnqF,QAAS,CAAC,QAAS,WAEvB,CACIxlC,KAAM,eAAgB++B,KAAM,IAAK56B,KAAM,WACvC7B,UAAW,kBACXoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnClB,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACjCwE,QAASpb,EAAApmB,QAAGsP,YAAa4tB,MAAO,cAChC6E,OAAQ,CAAC,oBAAqBhF,MAAO,GAAID,GAAI,GAAIG,OAAQ,GAE7D,CACIjhC,KAAM,cAAe++B,KAAM,IAAK56B,KAAM,WACtC7B,UAAW,kBACXoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnClB,OAAQ,MAAOx0B,MAAO,EAAGm1B,GAAI,GAC7BwE,QAASpb,EAAApmB,QAAGsP,YAAa4tB,MAAO,cAChC6E,OAAQ,CAAC,oBAAqBhF,MAAO,GAAID,GAAI,GAAIG,OAAQ,EACzD0H,MAAO,CAAC,WAAY,CAAC3oC,KAAM,cAAe2hB,MAAO,IACjDsjB,QAAS,CAAC,kBAEd,CACIjlC,KAAM,gBAAiB++B,KAAM,IAAK56B,KAAM,WACxC7B,UAAW,kBACXoH,OAAQ,GAAI02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACxEwE,QAASpb,EAAApmB,QAAGsP,YAAa4tB,MAAO,cAChC6E,OAAQ,CAAC,oBAAqBhF,MAAO,GAAID,GAAI,GAAIG,OAAQ,GACzDgE,QAAS,CAAC2qF,EAAW,SAAU,aAC/B/rF,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,SAEvD,CACIxa,KAAM,YAAa++B,KAAM,IAAK56B,KAAM,WACpCuoC,MAAOgjF,EAAAhjF,MAAM,SAAU,UACvBhjC,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAAGlB,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACzEwE,QAASpb,EAAApmB,QAAGsP,YAAa4tB,MAAO,cAChC6E,OAAQ,CAAC,mBAAoB,eAAgBhF,MAAO,GAAID,GAAI,GAC5DG,OAAQ,GAAIgE,QAAS,CAAC2qF,EAAW,SAAU,aAC3C/rF,OAAQ,CAACO,SAAU,MAAO/D,OAAQ,UAAW7lB,KAAM,SAIvD,CACIxa,KAAM,gBAAiB++B,KAAM,IAAKz8B,UAAW,uBAC7C6B,KAAM,YAAa4oC,YAAY,EAC/BvH,QAAS,CAAC,SAAU,QAAS,UAAW,UAAW,YACnDtE,MAAOyuF,EAAc1qF,QAAS,SAC9Bv7B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAC7C01B,WAAY,EAAGP,GAAI,GAAIC,OAAQ,GAEnC,CACIjhC,KAAM,kBAAmBgsC,KAAM,gBAAiB/K,OAAQ,EACxDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,IAE9C,CACIhhC,KAAM,cAAegsC,KAAM,gBAAiB/K,OAAQ,EACpDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1CV,MAAO,IAAKO,SAAU,GAE1B,CACI7gC,KAAM,gBAAiBgsC,KAAM,gBAAiB/K,OAAQ,EACtDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,IAE9C,CACIhhC,KAAM,iBAAkBgsC,KAAM,gBAAiB/K,OAAQ,EACvDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAC1C2H,MAAO,CAAC,kBAAmB,CAAC3oC,KAAM,cAAe2hB,MAAO,MAE5D,CACI3hB,KAAM,gBAAiBgsC,KAAM,gBAAiB/K,OAAQ,EACtDv3B,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,MAAOW,GAAI,GAC3CiE,QAAS,CAAC,gBAAiB,WAE/B,CACIjlC,KAAM,kBAAmBgsC,KAAM,gBAAiB/K,OAAQ,EACxDv3B,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,MAAOW,GAAI,GAC3CiE,QAAS,CAAC,cAAe,WAE7B,CACIjlC,KAAM,iBAAkBgsC,KAAM,gBAAiB/K,OAAQ,GACvDv3B,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,MAAOW,GAAI,GAC3CE,MAAO,cAAe6E,OAAQ,CAAC,sBAC/BjF,GAAI,GAAIC,MAAO,IAEnB,CACI/gC,KAAM,gBAAiBgsC,KAAM,gBAAiB/K,OAAQ,GACtDv3B,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,MAAOW,GAAI,GAC3CiE,QAAS,CAAC,SAAU6qF,EAAW,OAInC,CACI9vH,KAAM,eAAgB++B,KAAM,IAAKz8B,UAAW,sBAC5CyqC,YAAY,EAAM5oC,KAAM,WACxBuF,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACxDC,OAAQ,EAAGuE,QAAS,CAAC,SAAU,QAAS,SAAU,SAClDtE,MAAOyuF,GAEX,CACE3vH,KAAM,iBAAkBgsC,KAAM,eAC9BU,MAAOgjF,EAAAhjF,MAAM,SAAU,SACvBrM,OAAQ,MAAOa,MAAO,QACtBx3B,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAAGD,GAAI,IAExC,CACEhhC,KAAM,mBAAoBgsC,KAAM,eAChC3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAAGD,GAAI,IAExC,CACEhhC,KAAM,kBAAmBgsC,KAAM,eAC/B3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAAGD,GAAI,GACtC2H,MAAO,CAAC,aAAc,CAAC3oC,KAAM,eAAgB2hB,MAAO,MAEtD,CACE3hB,KAAM,gBAAiBgsC,KAAM,eAC7B3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAAGD,GAAI,GACtC2H,MAAO,CAAC,OAAQ,gBAChBzH,MAAO,cAAe6E,OAAQ,CAAC,aAC/BjF,GAAI,GAAIC,MAAO,IAEjB,CACE/gC,KAAM,sBAAuBgsC,KAAM,eACnC3L,OAAQ,WACRwM,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAAGD,GAAI,GACtC2H,MAAO,CAAC,mBAEV,CACI3oC,KAAM,iBAAkBgsC,KAAM,eAC9B3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGY,GAAI,GAAIC,OAAQ,EACvCwD,MAAO,CACH,CAACQ,QAAS,OAAQb,SAAU,aAGpC,CACEpkC,KAAM,gBAAiBgsC,KAAM,eAC7B3L,OAAQ,MAAOE,SAAU,GACzB72B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGN,OAAQ,EAAGD,GAAI,IAIvD,CACIhhC,KAAM,aAAcsC,UAAW,oBAC/BoqC,MAAOgjF,EAAAhjF,MAAM,QAAS,SACtBK,YAAY,EAAM9H,QAAS,SAAU/D,MAjlBzB,eAklBZx3B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnC11B,MAAO,EAAG25B,QAASpb,EAAApmB,QAAGsP,YAAanP,KAAM,UAE7C,CACInE,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,aACvC3L,OAAQ,MAAOY,OAAQ,EACvBC,MAAO,SACPF,GAAI,GAER,CACIhhC,KAAM,kBAAmB++B,KAAM,IAAKiN,KAAM,aAC1CtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAAGD,GAAI,EACrDE,MAAO,SACP2C,OAAQ,CAACO,SAAU,OAAQ/D,OAAQ,MAAO7lB,KAAM,QAEpD,CACIxa,KAAM,iBAAkB++B,KAAM,IAAKiN,KAAM,aACzCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAC9CC,MAAO,SAAUZ,MAAO,IAAKU,GAAI,GAErC,CACIhhC,KAAM,WAAY++B,KAAM,IAAKiN,KAAM,aACnCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAC9CD,GAAI,GAER,CACIhhC,KAAM,SAAU++B,KAAM,IAAKiN,KAAM,aACjCa,QAAS,QACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAC9CD,GAAI,IAER,CACIhhC,KAAM,kBAAmB++B,KAAM,IAAKiN,KAAM,aAC1Ca,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAC9CD,GAAI,GACJ2H,MAAO,CAAC,aAAc,CAAC3oC,KAAM,eAAgB2hB,MAAO,KAExD,CACI3hB,KAAM,mBAAoB++B,KAAM,IAAKiN,KAAM,aAC3CtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDD,GAAI,IAER,CACIhhC,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,aACpCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOY,OAAQ,EAC9CC,MAAO,SAAUZ,MAAO,IAAKU,GAAI,IAErC,CACIhhC,KAAM,qBAAsB++B,KAAM,IAAKiN,KAAM,aAC7Ca,QAAS,OACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,WAAYY,OAAQ,EACnDD,GAAI,IAER,CACIhhC,KAAM,QAAS++B,KAAM,IAAKiN,KAAM,aAChCa,QAAS,YACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDD,GAAI,GAAIyD,MAAO,CAAC,CAACQ,QAAS,YAAab,SAAU,SAErD,CACIpkC,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,aACvCa,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnClB,OAAQ,MAAOY,OAAQ,EAAGD,GAAI,IAElC,CACIhhC,KAAM,QAAS++B,KAAM,IAAKiN,KAAM,aAChCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDwD,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,WAAYxkC,OAAQ,IACvD0jC,SAAU,SAElBpD,GAAI,IAER,CACIhhC,KAAM,SAAU++B,KAAM,IAAKiN,KAAM,aACjCa,QAAS,OACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDwD,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,cAAexkC,OAAQ,IAC1D0jC,SAAU,SAElBpD,GAAI,IAER,CACIhhC,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,aAClCa,QAAS,OACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDwD,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,WAAYxkC,OAAQ,IACvD0jC,SAAU,UAElBpD,GAAI,GACJiE,QAAS,CAAC,SAAU2qF,EAAW,MAAO,UAE1C,CACI5vH,KAAM,WAAY++B,KAAM,IAAKiN,KAAM,aACnCtiC,OAAQ,GAAI02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EACnDX,MAAO,IACPqE,YAAa,CACT,CAACM,QAAS,eAAgBlkB,KAAM,CAC5B,CAACmkB,OAAQ,YAAaxkC,MAAO,GAC7B,CAACwkC,OAAQ,gBAAiBxkC,MAAO0pB,EAAApmB,QAAGoS,IAAIW,OACxC,CAACmuB,OAAQ,iBAAkBxkC,MAAO0pB,EAAApmB,QAAGoS,IAAIU,QAEzCstB,SAAU,YAGlBpD,GAAI,IAER,CACIhhC,KAAM,aAAc++B,KAAM,IAAKiN,KAAM,aACrCa,QAAS,YACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDwD,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,WAAYxkC,OAAQ,KACvD0jC,SAAU,SAElBpD,GAAI,IAER,CACIhhC,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,aACxCa,QAAS,MACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDD,GAAI,GACJiE,QAAS,CACL2qF,EAAW,SAAU,QACrBA,EAAW,QAAS,QACpBA,EAAW,MAAO,UAG1B,CACI5vH,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,aAClCa,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,EAClDX,MAAO,IACPmE,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,cAAexkC,OAAQ,IAC1D0jC,SAAU,SAElBpD,GAAI,IAER,CACIhhC,KAAM,iBAAkB++B,KAAM,IAAKiN,KAAM,aACzCa,QAAS,aACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,UAAWY,OAAQ,EACjEX,MAAO,IAAKU,GAAI,GAChBiE,QAAS,CAAC6qF,EAAW,OAEzB,CACI9vH,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,aACpCa,QAAS,aACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOY,OAAQ,GAC7DC,MAAO,SAAUZ,MAAO,IAAKU,GAAI,GACjCiE,QAAS,CAAC,WAEd,CACIjlC,KAAM,aAAc++B,KAAM,IAAKiN,KAAM,aACrCa,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWY,OAAQ,GAClDC,MAAO,cACPuD,MAAO,CACH,CAACQ,QAAS,YAAalkB,KAAM,CAAC,CAACmkB,OAAQ,WAAYxkC,OAAQ,KACvD0jC,SAAU,SAElBpD,GAAI,GACJiE,QAAS,CAAC6qF,EAAW,MAEzB,CACI9vH,KAAM,OAAQ++B,KAAM,IAAKiN,KAAM,aAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnClB,OAAQ,UAAWY,OAAQ,GAC3BD,GAAI,GAAIE,MAAO,cACf6E,OAAQ,CAAC,gBAAiB,cAAehF,MAAO,GAAID,GAAI,GACxDmE,QAAS,CAAC2qF,EAAW,MAAO,YAEhC,CACI5vH,KAAM,YAAa++B,KAAM,IAAKiN,KAAM,aACpCa,QAAS,SACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EACnClB,OAAQ,UAAWY,OAAQ,GAC3BD,GAAI,GAAIE,MAAO,cACf6E,OAAQ,CAAC,aAAc,eAAgBhF,MAAO,GAAID,GAAI,GACtD2D,MAAO,CACHirF,EAAAO,eAAe,EAAG,MAAO,UAE7BhrF,QAAS,CACL2qF,EAAW,MAAO,UAClBA,EAAW,SAAU,YACrBA,EAAW,QAAS,cAK5B,CACI5vH,KAAM,kBACN+sC,YAAY,EAAMvH,QAASpb,EAAApmB,QAAGsP,YAC9Bo5B,MAAOgjF,EAAAhjF,MAAM,OAAQ,SACrBzH,QAAS,CAAC,WAAY2qF,EAAW,MAAO,YAE5C,CACI5vH,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,kBACxCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOC,MAAO,IAC7CW,OAAQ,EAAGD,GAAI,EAAG78B,KAAM,UAE5B,CACInE,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,kBAClCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOC,MAAO,IAC7CW,OAAQ,EAAGD,GAAI,EAAGE,MAAO,SACzB+D,QAAS,CAAC,SAAU2qF,EAAW,MAAO,WACtCzrH,KAAM,UAEV,CACInE,KAAM,aAAc++B,KAAM,IAAKiN,KAAM,kBACrCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWC,MAAO,IACjDW,OAAQ,EAAGD,GAAI,GAAIE,MAAO,SAAU/8B,KAAM,UAE9C,CACInE,KAAM,eAAgB++B,KAAM,IAAKiN,KAAM,kBACvCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOW,GAAI,GACzDC,OAAQ,EAAG98B,KAAM,WAAY+8B,MAAOyuF,GAExC,CACI3vH,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,kBACtCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOW,GAAI,GACzDC,OAAQ,EAAG98B,KAAM,SACjB0/B,OAAQ,CAACO,SAAU,UAAW/D,OAAQ,MAAO7lB,KAAM,QAEvD,CACIxa,KAAM,cAAe++B,KAAM,IAAKiN,KAAM,kBACtCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOa,MAAO,SAC7CF,GAAI,GAAIC,OAAQ,EAAG98B,KAAM,UAE7B,CACInE,KAAM,iBAAkB++B,KAAM,IAAKiN,KAAM,kBACzCa,QAAS,YACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,UAC9Cl8B,KAAM,WACN88B,OAAQ,EAAGD,GAAI,GAAI+E,OAAQ,CAAC,aAAchF,MAAO,GAAID,GAAI,GACzDI,MAAO,eAEX,CACIlhC,KAAM,gBAAiB++B,KAAM,IAAKiN,KAAM,kBACxCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOC,MAAO,GAC5DW,OAAQ,EAAGD,GAAI,GAAI78B,KAAM,aAE7B,CACInE,KAAM,aAAcgsC,KAAM,kBAAmBjN,KAAM,IACnDr1B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9CW,GAAI,GAAIC,OAAQ,EAAG98B,KAAM,QACzBsgC,MAAO,CAAC,CAACQ,QAAS,WAAYb,SAAU,WAE5C,CACIpkC,KAAM,eAAgBgsC,KAAM,kBAAmBjN,KAAM,IACrDr1B,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACzDC,OAAQ,EAAGC,MAAO,SAClB+D,QAAS,CAAC,SAAU2qF,EAAW,MAAO,YAE1C,CACI5vH,KAAM,eAAgBgsC,KAAM,kBAAmBjN,KAAM,IACrDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWx0B,MAAO,EAAGm1B,GAAI,GACxDC,OAAQ,EAAGC,MAAO,SAAU/8B,KAAM,SAAUm8B,MAAO,KAEvD,CACItgC,KAAM,aAAcgsC,KAAM,kBAAmBjN,KAAM,IACnD56B,KAAM,WACNuF,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAAGm1B,GAAI,GACpDC,OAAQ,EAAG8E,OAAQ,CAAC,aAAchF,MAAO,GAAID,GAAI,GACjDI,MAAO,eAEX,CACIlhC,KAAM,eAAgBmE,KAAM,QAAS46B,KAAM,IAC3C8N,QAAS,YACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOx0B,MAAO,EAC5Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAt2BT,eAs2B4B8K,KAAM,mBAEjD,CACIhsC,KAAM,sBAAuBmE,KAAM,QAAS46B,KAAM,IAClD8N,QAAS,WACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOx0B,MAAO,EAC5Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAAO,cAAe8K,KAAM,kBAChDjG,OAAQ,CAAC,iBAAkBhF,MAAO,GAAID,GAAI,IAE9C,CACI9gC,KAAM,aAAcmE,KAAM,QAAS46B,KAAM,IACzC8N,QAAS,WACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOx0B,MAAO,EAC5Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAn3BT,eAm3B4B8K,KAAM,kBAC7CrD,MAAO,CAAC,yBAEZ,CACI3oC,KAAM,aAAcmE,KAAM,QAAS46B,KAAM,IACzCr1B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOx0B,MAAO,EAC5Dm1B,GAAI,GAAIC,OAAQ,GAAI+K,KAAM,kBAAmB9K,MAAO,cACpDJ,GAAI,GAAIC,MAAO,GAAIgF,OAAQ,CAAC,gBAEhC,CACI/lC,KAAM,YAAamE,KAAM,QAAS46B,KAAM,IACxCr1B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,QAASx0B,MAAO,EAC9Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MA/3BT,eA+3B4B8K,KAAM,mBAEjD,CACIhsC,KAAM,iBAAkBmE,KAAM,QAAS46B,KAAM,IAC7C8N,QAAS,YACTnjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,QAASx0B,MAAO,EAC9Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAr4BT,eAq4B4B8K,KAAM,mBAEjD,CACIhsC,KAAM,eAAgBmE,KAAM,QAAS46B,KAAM,IAC3C8N,QAAS,WACTnjC,OAAQ,GAAI02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,QAASx0B,MAAO,EAC/Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MA34BT,eA24B4B8K,KAAM,kBAC7CvH,MAAO,CAAC,CAACQ,QAAS,cAEtB,CACIjlC,KAAM,cAAemE,KAAM,QAAS46B,KAAM,IAC1Cr1B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,GAAIlB,OAAQ,MAAOx0B,MAAO,EAC7Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAj5BT,eAi5B4B8K,KAAM,kBAC7CvH,MAAO,CAAC,CAACQ,QAAS,OAAQb,SAAU,SAExC,CACIpkC,KAAM,oBAAqBmE,KAAM,QAAS46B,KAAM,IAChDr1B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAAIlB,OAAQ,MAAOx0B,MAAO,EAC/Dm1B,GAAI,GAAIC,OAAQ,GAAIC,MAAO,cAAe8K,KAAM,kBAChDvH,MAAO,CAAC,CAACQ,QAAS,aAAcc,OAAQ,CAAC,YACrC,mBACJjF,GAAI,GAAIC,MAAO,IAGnB,CACI/gC,KAAM,QAAS++B,KAAM,IAAK56B,KAAM,QAChC7B,UAAW,mBACXoH,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9Cx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAAGuE,QAAS,CAAC,QAAS,SAAU,SAC1DtE,MAAOyuF,GAEX,CACI3vH,KAAM,kBAAmBgsC,KAAM,QAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9Cx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAC1B0H,MAAO,CAAC,UAEZ,CACI3oC,KAAM,iBAAkBgsC,KAAM,QAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9Cx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAC1B0H,MAAO,CAAC,aAAc,iBAE1B,CACI3oC,KAAM,mBAAoBgsC,KAAM,QAChCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,OAC9Cx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAC1B0H,MAAO,CAAC,mBAAoB,mBAEhC,CACI3oC,KAAM,iBAAkBgsC,KAAM,QAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/Bx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAAGJ,SAAU,EACvC8H,MAAO,CAAC,iBAAkB,CAAC3oC,KAAM,aAAc2hB,MAAO,KAE1D,CACI3hB,KAAM,mBAAoBgsC,KAAM,QAChCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/Bx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAAGJ,SAAU,EACvC8H,MAAO,CAAC,QAAS,CAAC3oC,KAAM,eAAgB2hB,MAAO,MAEnD,CACI3hB,KAAM,gBAAiBgsC,KAAM,QAC7BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAC/Bx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAC1B0H,MAAO,CAAC,aAAc,iBAE1B,CACI3oC,KAAM,oBAAqBgsC,KAAM,QACjCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9Cx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,GAC1B0H,MAAO,CAAC,mBAAoB,iBAEhC,CACI3oC,KAAM,eAAgBgsC,KAAM,QAC5Ba,QAAS,MACTnjC,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAAIlB,OAAQ,UACjDx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,GAC1B0H,MAAO,CAAC,mBAGZ,CACI3oC,KAAM,QAAS++B,KAAM,IAAK56B,KAAM,QAChC7B,UAAW,mBACXoH,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/Bx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,EAC1BC,MAAOyuF,GAEX,CACI3vH,KAAM,YAAagsC,KAAM,QACzBtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/Bx0B,MAAO,EAAGm1B,GAAI,GAAIC,OAAQ,GAE9B,CACIjhC,KAAM,SAAUgsC,KAAM,QACtBtiC,OAAQ,EAAG02B,QAAS,EAAGa,OAAQ,EAC/BuE,QAAS,CAAC,WAEd,CACIxlC,KAAM,QAASgsC,KAAM,QACrBtiC,OAAQ,EAAGu3B,OAAQ,EAAGZ,OAAQ,MAAOsI,MAAO,CAAC,aAEjD,CACI3oC,KAAM,UAAWgsC,KAAM,QAAShL,GAAI,GACpCt3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BY,OAAQ,GAEZ,CACIjhC,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,QAAShL,GAAI,GAC/Ct3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAC/BY,OAAQ,GAEZ,CACIjhC,KAAM,UAAW++B,KAAM,IAAKiN,KAAM,QAAShL,GAAI,GAC/Ct3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAAGlB,OAAQ,MAChD/9B,UAAW,qBAAsB4tH,UAAU,EAC3CjvF,OAAQ,EAAGoH,IAAK,CAAC,CAACroC,KAAM,YAAa2hB,MAAO,KAC5CsjB,QAAS,WAEb,CACIjlC,KAAM,aAAc++B,KAAM,IAAKiN,KAAM,QAAShL,GAAI,GAClDt3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAAGlB,OAAQ,MAChD/9B,UAAW,wBAAyB4tH,UAAU,EAC9CjvF,OAAQ,EAAGoH,IAAK,CAAC,CAACroC,KAAM,YAAa2hB,MAAO,OAEhD,CACI3hB,KAAM,WAAY++B,KAAM,IAAKiN,KAAM,QAAShL,GAAI,GAChDt3B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAC9Ca,MAAO,cACP6E,OAAQ,CAAC,aAAchF,MAAO,GAAID,GAAI,GACtCG,OAAQ,IAIZ,CACIjhC,KAAM,WAAY++B,KAAM,IAAKz8B,UAAW,sBACxC6B,KAAM,WAAY+8B,MAAOyuF,EACzBjmH,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAC7Cm1B,GAAI,GAAIC,OAAQ,EAAGuE,QAAS,CAAC,SAAU,UAE3C,CACIxlC,KAAM,kBAAmBgsC,KAAM,WAAYjN,KAAM,IACjDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,EACtD0H,MAAO,CAAC,aAEZ,CACI3oC,KAAM,kBAAmBgsC,KAAM,WAAYjN,KAAM,IACjDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,EACtD0H,MAAO,CAAC,aAAc,CAAC3oC,KAAM,eAAgB2hB,MAAO,KACpDkrB,QAAS,SACT3L,MAAOyuF,GAEX,CACI3vH,KAAM,mBAAoBgsC,KAAM,WAAYjN,KAAM,IAClDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GAE1D,CACIjhC,KAAM,iBAAkBgsC,KAAM,WAAYjN,KAAM,IAChDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,OAAQW,GAAI,GAAIC,OAAQ,GAE3D,CACIjhC,KAAM,mBAAoBgsC,KAAM,WAAYjN,KAAM,IAClDr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,OAAQW,GAAI,GAAIC,OAAQ,EACvD4L,QAAS,eAEb,CACI7sC,KAAM,gBAAiBgsC,KAAM,WAAYjN,KAAM,IAC/Cr1B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,OAAQW,GAAI,GAAIC,OAAQ,GACvD4L,QAAS,OAIb,CACI7sC,KAAM,cAAe++B,KAAM,IAAKz8B,UAAW,qBAC3C6B,KAAM,UAAW4oC,YAAY,EAC7BrjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOx0B,MAAO,EAC5Dm1B,GAAI,GAAIC,OAAQ,EAAGuE,QAAS,CAAC,SAAU,QAAS,UAAW,YAC3DtE,MAAOyuF,GAEX,CACI3vH,KAAM,oBAAqBgsC,KAAM,cACjCtiC,OAAQ,EAAG02B,QAAS,EAAGY,GAAI,GAAIC,OAAQ,GAE3C,CACIjhC,KAAM,iBAAkBgsC,KAAM,cAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GAE1D,CACIjhC,KAAM,iBAAkBgsC,KAAM,cAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,EACtDC,MAAOyuF,EAAchnF,MAAO,CAAC,CAAC3oC,KAAM,YAAa2hB,MAAO,KAE5D,CACI3hB,KAAM,kBAAmBgsC,KAAM,cAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GAE1D,CACIjhC,KAAM,gBAAiBgsC,KAAM,cAC7BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,EACtDgE,QAAS,iBAEb,CACIjlC,KAAM,iBAAkBgsC,KAAM,cAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,EACtDC,MAAO,cACP6E,OAAQ,CAAC,eAAgBhF,MAAO,GAAID,GAAI,IAE5C,CACI9gC,KAAM,kBAAmBgsC,KAAM,cAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GAE1D,CACIjhC,KAAM,gBAAiBgsC,KAAM,cAC7BtiC,OAAQ,EAAG02B,QAAS,GAAIC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GACvD4L,QAAS,SAAU5H,QAAS,eAEhC,CACIjlC,KAAM,eAAgBgsC,KAAM,cAC5BtiC,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EACrClB,OAAQ,UAAWW,GAAI,GAAIC,OAAQ,GACnC4L,QAAS,OAIb,CACI7sC,KAAM,eAAgB+sC,YAAY,EAAM9L,OAAQ,EAChDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,EAC7C01B,WAAY,EACZj/B,UAAW,sBAAuBy8B,KAAM,IACxC56B,KAAM,WACNqhC,QAAS,CAAC,SAAU,QAAS,UAAW,UAAW,YACnDtE,MAAOyuF,GAEX,CACI3vH,KAAM,gBAAiBgsC,KAAM,eAAgB/K,OAAQ,EACrDD,GAAI,GACJt3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOx0B,MAAO,GAEjD,CACI7L,KAAM,iBAAkBgsC,KAAM,eAAgB/K,OAAQ,EACtDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,IAE9C,CACIhhC,KAAM,sBAAuBgsC,KAAM,eAAgB/K,OAAQ,EAC3Dv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAEhD,CACIhhC,KAAM,oBAAqBgsC,KAAM,eAAgB/K,OAAQ,EACzDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAEhD,CACIhhC,KAAM,gBAAiBgsC,KAAM,eAAgB/K,OAAQ,EACrDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,GAC5C+E,OAAQ,CAAC,cAAehF,MAAO,GAAID,GAAI,GACvCI,MAAO,eAEX,CACIlhC,KAAM,iBAAkBgsC,KAAM,eAAgB/K,OAAQ,EACtDv3B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,SAAUW,GAAI,GAC5DiE,QAAS,iBAEb,CACIjlC,KAAM,qBAAsBgsC,KAAM,eAAgB/K,OAAQ,EAC1Dv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,GAC5CiE,QAAS,eAEb,CACIjlC,KAAM,qBAAsBgsC,KAAM,eAAgB/K,OAAQ,GAC1Dv3B,OAAQ,GAAI02B,QAAS,EAAGC,OAAQ,SAAUW,GAAI,IAElD,CACIhhC,KAAM,gBAAiBgsC,KAAM,eAAgB/K,OAAQ,GACrDv3B,OAAQ,GAAI02B,QAAS,GAAIC,OAAQ,SAAUW,GAAI,IAInD,CACIhhC,KAAM,cAAe+sC,YAAY,EACjCzqC,UAAW,qBAAsBy8B,KAAM,IAAK56B,KAAM,UAClDo9B,WAAY,EACZiE,QAAS,CAAC,SAAU,UAAW,YAC/BtE,MAAOyuF,GAEX,CACI3vH,KAAM,mBAAoBgsC,KAAM,cAChCtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,UAAWW,GAAI,GAAIC,OAAQ,GAE9D,CACIjhC,KAAM,iBAAkBgsC,KAAM,cAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,MAAOW,GAAI,GAAIC,OAAQ,GAE1D,CACIjhC,KAAM,kBAAmBgsC,KAAM,cAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,GAAIC,OAAQ,EACxD0H,MAAO,CAAC,CAAC3oC,KAAM,eAAgB2hB,MAAO,KAE1C,CACI3hB,KAAM,kBAAmBgsC,KAAM,cAAe/K,OAAQ,EACtDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAEhD,CACIhhC,KAAM,qBAAsBgsC,KAAM,cAAe/K,OAAQ,EACzDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAEhD,CACIhhC,KAAM,gBAAiBgsC,KAAM,cAAe/K,OAAQ,EACpDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,GAC5CiE,QAAS,iBAEb,CACIjlC,KAAM,oBAAqBgsC,KAAM,cAAe/K,OAAQ,GACxDv3B,OAAQ,EAAG02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAEhD,CACIhhC,KAAM,eAAgBgsC,KAAM,cAAe/K,OAAQ,GACnD4L,QAAS,MAAOC,QAAS,QACzBpjC,OAAQ,GAAI02B,QAAS,EAAGC,OAAQ,QAASW,GAAI,IAIjD,CACIhhC,KAAM,aAAc++B,KAAM,IAAKz8B,UAAW,oBAC1C6B,KAAM,SAAU4oC,YAAY,EAC5B9H,QAAS,CAAC,YAAa/D,MAAO,UAElC,CACIlhC,KAAM,aAAcgsC,KAAM,aAC1BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,cAAegsC,KAAM,aAC3BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,cAAegsC,KAAM,aAC3BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,iBAAkBgsC,KAAM,aAC9BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,gBAAiBgsC,KAAM,aAC7BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,sBAAuBgsC,KAAM,aACnCzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,EAC3DlvF,OAAQ,GAEZ,CACIjhC,KAAM,iBAAkBgsC,KAAM,aAC9BzL,SAAU,EAAGC,SAAU,EAAGC,QAAS,EAAGC,UAAW,EAAGyvF,MAAO,GAC3DlvF,OAAQ,IAIZ,CACEjhC,KAAM,eAAgB+sC,YAAY,EAAMzqC,UAAW,mBACnDy8B,KAAM,IAAKyG,QAAS,CAAC,SAAU,QAAS,QAAS,UACjDnF,OAAQ,MACRl8B,KAAM,WAAY+8B,MAAOyuF,GAE3B,CACE3vH,KAAM,qBAAsBgsC,KAAM,eAClC3L,OAAQ,MACR32B,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,EAAGC,OAAQ,GAEvD,CACEjhC,KAAM,mBAAoBgsC,KAAM,eAChCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAAIC,OAAQ,EACtD0H,MAAO,CAAC,cAEV,CACE3oC,KAAM,mBAAoBgsC,KAAM,eAChCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAAIC,OAAQ,EACtD0H,MAAO,CAAC,eAAgB,UAE1B,CACE3oC,KAAM,kBAAmBgsC,KAAM,eAC/BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGlB,OAAQ,MAAOW,GAAI,GACzD2H,MAAO,CAAC,YAAa,CAAC3oC,KAAM,cAAe2hB,MAAO,KAAMsf,OAAQ,GAElE,CACEjhC,KAAM,iBAAkBgsC,KAAM,eAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAC1CC,OAAQ,EAAGF,MAAO,GAAID,GAAI,GAAII,MAAO,cACrC6E,OAAQ,CAAC,OAAQ,eAEnB,CACE/lC,KAAM,iBAAkBgsC,KAAM,eAC9BtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAAIE,MAAOyuF,EACrDpvF,SAAU,GACVoI,MAAO,CAAC,sBAAuB,eAAgB,gBAAiB1H,OAAQ,GAE1E,CACEjhC,KAAM,qBAAsBgsC,KAAM,eAClCtiC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGP,GAAI,GAAIE,MAAOyuF,EACrDpvF,SAAU,GACVoI,MAAO,CAAC,mBAAoB,eAAgB,gBAAiB1H,OAAQ,IAIvE,CACIjhC,KAAM,cAAekwH,UAAU,EAAM3pF,UAAW,YAChDwG,YAAY,GAEhB,CACE/sC,KAAM,OAAQsC,UAAW,kBAAmB0pC,KAAM,cAClDjN,KAAM,IAAK56B,KAAM,QAAS+8B,MAAO,QACjC+D,QAAS,CAAC,WAAY,cAClB,CAACzc,KAAM,WAAYzH,KAAM,CAAC+9E,cAAe10E,EAAApmB,QAAGoS,IAAIK,SAGtD,CACEzW,KAAM,YAAasC,UAAW,oBAAqB0pC,KAAM,cACzDjN,KAAM,IAAK56B,KAAM,QAAS+8B,MAAO,QACjC+D,QAAS,CAAC,WAAY,cAClB,CAACzc,KAAM,WAAYzH,KAAM,CAAC+9E,cAAe10E,EAAApmB,QAAGoS,IAAIO,OAEpD8tB,MAAO,CAAC,CAACQ,QAAS,WAAYb,SAAU,WAE1C,CACEpkC,KAAM,aAAcsC,UAAW,oBAAqB0pC,KAAM,cAC1DjN,KAAM,IAAK56B,KAAM,QAAS+8B,MAAO,QACjCwL,MAAOgjF,EAAAhjF,MAAM,QAAS,QACtBzH,QAAS,CAAC,WAAY,cAClB,CAACzc,KAAM,WAAYzH,KAAM,CAAC+9E,cAAe10E,EAAApmB,QAAGoS,IAAIa,UAEpD4sB,OAAQ,CAACO,SAAU,OAAQ/D,OAAQ,OAAQ7lB,KAAM,QAEnD,CACExa,KAAM,aAAcsC,UAAW,wBAC/B0pC,KAAM,cACNjN,KAAM,IAAK56B,KAAM,aAAc+8B,MAAO,cACtCZ,MAAO,EAAGU,GAAI,GAAIZ,QAAS,EAC3B6E,QAAS,CAAC,SAAU,cAAe,SAAU,YAAa,YACxD,CAACzc,KAAM,WAAYzH,KAAM,CACrB8uG,UAAWzlG,EAAApmB,QAAGoS,IAAIS,MAAOsiC,SAAU/uB,EAAApmB,QAAG4f,SAASI,UAIvD,CACIhkB,KAAM,aAAcsC,UAAW,kBAC/B0pC,KAAM,cAAejN,KAAM,IAAK56B,KAAM,MACtC8gC,QAAS,CAAC,YAAa/D,MAAO,WAAYF,GAAI,EAC9CV,MAAO,IAAKO,SAAU,EAAG0F,UAAW,YAIxC,CACIvmC,KAAM,aAAc+sC,YAAY,EAAMzqC,UAAW,oBACjD4tH,UAAU,EAAME,QAAQ,EAAMnrF,QAAS,CAAC,eACxCyH,MAAOgjF,EAAAhjF,MAAM,aAAc,UAE/B,CACI1sC,KAAM,qBAAsBgsC,KAAM,aAClCjN,KAAM,IAAKkC,OAAQ,IAAKuE,QAAS,CAAC,SAAUrhC,KAAM,YAClD4hC,OAAQ,CAAC,YAAa,eAAgB/E,GAAI,IAAKF,GAAI,IACnDI,MAAO,cAAeb,OAAQ,MAC9BE,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAChDoH,MAAO,CAAC,kBAAmB,mBAC3B1D,QAAS,CAAC,WAAY2qF,EAAW,MAAO,QAAS,gBAErD,CACI5vH,KAAM,wBAAyBgsC,KAAM,aACrCjN,KAAM,IAAKkC,OAAQ,IAAKuE,QAAS,CAAC,SAAUrhC,KAAM,YAClD68B,GAAI,IAAKF,GAAI,IAAKI,MAAOyuF,EACzBpvF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAChDlB,OAAQ,MACRsI,MAAO,CAAC,eAAgB,kBAAmB,iBACvC,CAAC3oC,KAAM,cAAe2hB,MAAO,MACjCsjB,QAAS,CAAC,WAAY2qF,EAAW,MAAO,QAAS,gBAGrD,CACI5vH,KAAM,eAAgBmE,KAAM,WAAY6nC,KAAM,aAC9CjN,KAAM,IAAKkC,OAAQ,IACnBZ,OAAQ,QAASW,GAAI,GAAIF,GAAI,GAAII,MAAO,cACxC6E,OAAQ,CAAC,YAAa,aACtBxF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAChDoH,MAAO,CAAC,oBAAqB,qBAC7B1D,QAAS,CAAC,WAAY2qF,EAAW,MAAO,QAAS,gBAGrD,CACI5vH,KAAM,uCAAwCmE,KAAM,UACpD6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,IACvCZ,OAAQ,UAAWW,GAAI,IAAKF,GAAI,GAAII,MAAO,cAC3C6E,OAAQ,CAAC,YAAa,SAAU,OAAQ,kBACxCxF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAChDoH,MAAO,CAAC,eAAgB,gBACxBlE,MAAO,CACH,CAACQ,QAAS,OAAQb,SAAU,YAEhCa,QAAS,CAAC,gBAEd,CACIjlC,KAAM,kCAAmCmE,KAAM,UAC/C6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCZ,OAAQ,UAAWW,GAAI,IAAKE,MAAOyuF,EACnCpvF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAChDoH,MAAO,CAAC,iBAAkB,mBAG9B,CACI3oC,KAAM,sCAAuCmE,KAAM,UACnD6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,IACvCZ,OAAQ,WAAYW,GAAI,IAAKF,GAAI,GAAII,MAAO,cAC5C6E,OAAQ,CAAC,gBAAiB,cAAe,aACzCxF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAChDoH,MAAO,CAAC,eAAgB,gBACxB1D,QAAS,CAAC,cAAe,gBAAiB,gBAI9C,CACIjlC,KAAM,gCAAiCmE,KAAM,SAC7C6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCyL,MAAO,CAACC,GAAI,MAAOC,GAAI,SAAUpH,QAASpb,EAAApmB,QAAGsP,YAC7C+sB,OAAQ,UAAWW,GAAI,GAAIF,GAAI,IAAKC,MAAO,IAAKG,MAAO,cACvDX,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAChDoH,MAAO,CAAC,cACRlE,MAAO,CACHirF,EAAAO,eAAe,EAAG,UAAW,UAEjClqF,OAAQ,CAAC,aAAc,YAAa,iBACpCd,QAAS,CAAC,gBAEd,CACIjlC,KAAM,2BAA4BmE,KAAM,SACxC6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCyL,MAAO,CAACC,GAAI,aAAcC,GAAI,SAAUpH,QAASpb,EAAApmB,QAAGsP,YACpD+sB,OAAQ,UAAWW,GAAI,IAAKF,GAAI,GAAIC,MAAO,GAAIG,MAAO,cACtDX,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAAIV,SAAU,EAC9D4D,MAAO,CACHirF,EAAAO,eAAe,EAAG,UAAW,UAEjClqF,OAAQ,CAAC,uBAAwB,aACjCd,QAAS,CAAC,gBAGd,CACIjlC,KAAM,sCAAuCmE,KAAM,WACnD6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCZ,OAAQ,UAAWW,GAAI,IAAKE,MAAOyuF,EACnCpvF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,GAChDoH,MAAO,CAAC,iBAAkB,kBAC1BlE,MAAO,CACHirF,EAAAO,eAAe,EAAG,MAAO,aACzB,CAAChrF,QAAS,OAAQb,SAAU,aAIpC,CACIpkC,KAAM,gCAAiCmE,KAAM,QAC7C6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCZ,OAAQ,UAAWW,GAAI,IAAKE,MAAOyuF,EACnCpvF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAChDV,SAAU,EACV8H,MAAO,CAAC,eAAgB,eAAgB,cACpC,kBAAmB,CAAC3oC,KAAM,YAAa2hB,MAAO,KAClDsjB,QAAS,CAAC,WAAY,gBAAiB,aAAc,gBAGzD,CACIjlC,KAAM,2CAA4CmE,KAAM,YACxD6nC,KAAM,aAAcjN,KAAM,IAAKkC,OAAQ,GACvCZ,OAAQ,UAAWW,GAAI,IAAKE,MAAOyuF,EACnCpvF,SAAU,GAAIC,SAAU,GAAIC,QAAS,GAAIC,UAAW,GAAIC,WAAY,GACpEC,MAAO,GAAIl3B,OAAQ,GAAI02B,QAAS,GAAImB,WAAY,EAChDV,SAAU,EACV8H,MAAO,CAAC,oBAAqB,iBAAkB,kBAC/C1D,QAAS,CAAC,SAAU,cAAe,mBAqB9B1lC,EAAA8wH,OAAc,GAG3B9wH,EAAA8wH,OAAOC,WAAa,SAASC,EAAYC,EAASznD,GAC9CwnD,EAAW9jH,QAAQJ,IACX+b,OAAOC,UAAUhc,EAAMmkH,MACvBnkH,EAAMmkH,GAAWlnH,KAAK4B,MAAM69D,EAAW18D,EAAMmkH,QAMzDjxH,EAAA8wH,OAAO31C,SAAW,SAAS61C,EAAYC,EAASC,GAC5CF,EAAW9jH,QAAQJ,IACX+b,OAAOC,UAAUhc,EAAMmkH,MACvBnkH,EAAMmkH,IAAYC,MAK9BlxH,EAAA8wH,OAAOK,MAAQ,CACXhnH,OAAQ,EACRu3B,OAAQ,EACRD,GAAI,KAIRzhC,EAAA8wH,OAAO3tG,IAAM,CACThZ,OAAQ,GAGZnK,EAAA8wH,OAAOM,UAAY,CACfD,MAAO,aACPhuG,IAAK,YAGTnjB,EAAA8wH,OAAOO,SAAW,CAAC,QAAS,OAMfrxH,EAAAivC,kBAAoB,EAAC+hF,EAAYzgE,EAAQvwD,EAAA8wH,OAAOO,YACzD9gE,EAAMrjD,QAAQi6C,IACV,MAAMhkB,EAAWnjC,EAAA8wH,OAAOM,UAAUjqE,GAClCvmD,OAAO6qB,KAAKzrB,EAAA8wH,OAAO3pE,IAAMj6C,QAAQvD,IAC7B3J,EAAA8wH,OAAO3tF,GAAU6tF,EAAYrnH,EAAM3J,EAAA8wH,OAAO3pE,GAAKx9C,UAK3D3J,EAAAqwH,aASArwH,EAAAuwH,gLCziDA,MAAA1lG,EAAAC,EAAAhrB,EAAA,IACAq3C,EAAAr3C,EAAA,GACAmtF,EAAAntF,EAAA,IACAk7F,EAAAl7F,EAAA,IACA2lG,EAAA3lG,EAAA,IAOaE,EAAAmzF,QAAe,GAE5BnzF,EAAAmzF,QAAQC,aAAe,SAASl7E,EAAc+V,GAC1C,MAAMilE,EAAc,GACpB,IAAK,IAAI7lF,EAAI,EAAGA,EAAI4gB,EAAM7pB,OAAQiJ,IAAK,CACnC,MAAM9M,EAAI0tB,EAAM5gB,GAChB,GAAI6K,EAAIwY,MAAMnwB,EAAEuY,EAAGvY,EAAEwY,GAAI,CACrB,MACMnU,EADWsT,EAAI65E,cAAcxxF,EAAEuY,EAAGvY,EAAEwY,GACpB1V,UAClBuB,EAAK0tB,MAAM,iBACXpa,EAAIugC,cAAcl4C,EAAEuY,EAAGvY,EAAEwY,EAAGo+B,EAAArE,KAAKG,QAE5B,iBAAmBvZ,KAAK90B,GAC7BsT,EAAIugC,cAAcl4C,EAAEuY,EAAGvY,EAAEwY,EAAGo+B,EAAArE,KAAKS,MAGjCr7B,EAAIugC,cAAcl4C,EAAEuY,EAAGvY,EAAEwY,EAAGo+B,EAAArE,KAAKU,MAErC0/C,EAAYzqF,KAAKlI,IAGzB,OAAO2yF,GAMXlzF,EAAAmzF,QAAQm+B,WAAa,SAAS12G,EAAc8U,GACxC,MAAMD,EAAoB,GACpBk2B,EAAQ/qC,EAAMyL,SAASvM,KAAO4V,EAAK6hG,SACnC3rE,EAAShrC,EAAMyL,SAAStM,KAAO2V,EAAK8hG,SAEpChrH,EAASoU,EAAMzN,YAAYwe,QAC3BllB,EAAQmU,EAAM2C,WAAWoO,QACzBzoB,EAAWsD,EAAOpC,OAAS,GAAKqC,EAAMrC,OAAS,EAErD,IAAK,IAAI0U,EAAI,EAAGA,EAAI4W,EAAK6hG,SAAUz4G,IAAK,CACpC,MAAM24G,EAAW,GACjB,IAAK,IAAI14G,EAAI,EAAGA,EAAI2W,EAAK8hG,SAAUz4G,IAAK,CACpC,IAAI24G,EAAW,KACf,GAAIxuH,EACAwuH,GAAW,IAAIjsB,EAAAtK,cAAeC,YAAY,QAASz1C,EAAOC,OAEzD,CACD8rE,EAAW,IAAI12B,EAAAzjD,MACf,MAAMo6E,EAAS1kC,EAAAuB,QAAQojC,mBAAmBjsE,EAAOC,GACjD8rE,EAASj2B,OAAOk2B,GAEpBF,EAAShpH,KAAKipH,GAElBjiG,EAAOhnB,KAAKgpH,GAGhB,MAAMI,EAAc,CAAC/4G,EAAGC,KACpB,MAAM+4G,EAAY/nH,KAAK4C,MAAMmM,EAAI6sC,GAC3BosE,EAAYhoH,KAAK4C,MAAMoM,EAAI6sC,GACjC,OAAOn2B,EAAOqiG,GAAWC,IAGvBC,EAAUl5G,GAAKA,EAAI6sC,EACnBssE,EAAUl5G,GAAKA,EAAI6sC,EAGnB1tC,EAAM0C,EAAMyL,SAClB,IAAK,IAAIvN,EAAI,EAAGA,EAAIZ,EAAI4B,KAAMhB,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAI6B,KAAMhB,IAAK,CAG/B,MAAM24G,EAAWG,EAAY/4G,EAAGC,GAE1Bm5G,EAAOF,EAAQl5G,GACfq5G,EAAOF,EAAQl5G,GAEjB7V,EACAwuH,EAASrrG,SAASoyB,cACdy5E,EAAMC,EAAMj6G,EAAI65E,cAAcj5E,EAAGC,IAGrC24G,EAASrrG,SAASmL,eAAe0gG,EAAMC,EACnCj6G,EAAIoZ,QAAQxY,EAAGC,IAwC/B,OAlCAvS,EAAO0G,QAAQJ,IACX,MAAMg7G,EAAKh7G,EAAM0R,OACXupG,EAAKj7G,EAAM+R,OACjB,GAAIjE,EAAM+V,YAAY7jB,GAAQ,CAC1B,MAAM4kH,EAAWG,EAAY/J,EAAIC,GAC3BmK,EAAOF,EAAQlK,GACfqK,EAAOF,EAAQlK,GACrB2J,EAAS9gG,SAAS9jB,EAAOolH,EAAMC,QAG/BtnG,EAAApmB,QAAG+C,KAAK,WAAY,sCACSka,KAAKC,UAAU7U,QAKpDrG,EAAMyG,QAAQvD,IACV,MAAMm+G,EAAKn+G,EAAK6U,OACVupG,EAAKp+G,EAAKkV,OAChBjE,EAAM+C,WAAWhU,EAAMm+G,EAAIC,GAE3B,MAAM2J,EAAWG,EAAY/J,EAAIC,GAC3BmK,EAAOF,EAAQlK,GACfqK,EAAOF,EAAQlK,GACrB2J,EAAS7gG,QAAQlnB,EAAMuoH,EAAMC,KAIlBv3G,EAAM29B,YACVn0C,OAAS,GAChBymB,EAAApmB,QAAG+C,KAAK,WAAY,aAChB,kDAGDioB,sKClIX,MAAA5E,EAAAC,EAAAhrB,EAAA,IACaE,EAAAoyH,SAAgB,GAE7BpyH,EAAAoyH,SAASC,OAAS,EAElB,MAAMC,EAAW,QACXC,EAAkB,UAClBC,EAAiB,UAEjBxrH,EAAQE,IACNlH,EAAAoyH,SAASC,QACThrH,QAAQU,IAAI,UAAYb,IA0HhC,SAASurH,EAAmBC,GACxB,MAAMC,EAAUD,EAAYtuH,OACtBwuH,EAAU,GACVC,EAAU,CAAC,GACjB,IAAIC,EAAW,GACXC,EAAW,GACXC,EAAU,EACd,IAAK,IAAIl6G,EAAI,EAAGA,EAAI65G,EAAS75G,IACzBi6G,EAAWL,EAAY55G,GACnBw5G,EAAS54F,KAAKq5F,GACVC,EAAU,EACNF,IAAaC,IACXC,GAGFJ,EAAQC,EAAQzuH,QAAU4uH,EAC1BH,EAAQpqH,KAAKuqH,GACbA,EAAU,KAIZA,EAGDA,EAAU,GAEfJ,EAAQC,EAAQzuH,QAAU4uH,EAC1BH,EAAQpqH,KAAKuqH,GACbH,EAAQpqH,KAAK,GACbuqH,EAAU,GAGVH,EAAQpqH,KAAK,GAEjBqqH,EAAWC,EAOf,OALIC,EAAU,IAEVJ,EAAQC,EAAQzuH,QAAU4uH,EAC1BH,EAAQpqH,KAAKuqH,IAEV,CACHC,OAAQL,EACRM,OAAQL,GAvJhB7yH,EAAAoyH,SAASe,eAAiB,SAAS3mH,GAC/B,MAAM4/C,EAAQ5/C,EAAI9E,MAAM,MACxB,IAAI0rH,EAAQ,EACRC,EAAWjnE,EAAM,GAGG,IAApBinE,EAASjvH,SAAeivH,EAAWjnE,IAAQgnE,IAE/C,MAAME,EAAU,GACVC,EAAc,GAGpB,KAAOF,GAAYA,EAASjvH,OAAS,GAAG,CACpC,GAAImuH,EAAgB74F,KAAK25F,GAAW,CAChC,MAAMG,EAAYH,EAAS3rH,MAAM6qH,GACjC,GAAyB,IAArBiB,EAAUpvH,OAAc,CACxB,MAAM3C,EAAM+xH,EAAU,GAChB7qH,EAAM6qH,EAAU,GAClB/xH,EAAI2C,SAAWuE,EAAIvE,OACnBkvH,EAAQE,EAAU,IAAMA,EAAU,GAGlC3oG,EAAApmB,QAAGK,IAAI,WAAY,wBACRrD,UAAYkH,8BAI9B,GAAI6pH,EAAe94F,KAAK25F,GAAW,CACpC,MAAMG,EAAYH,EAAS3rH,MAAM8qH,GACjC,GAAyB,IAArBgB,EAAUpvH,OAAc,CACxB,MAAM3C,EAAM+xH,EAAU,GAChB7qH,EAAM6qH,EAAU,GACtBD,EAAY9xH,GAAOkH,OAGnBkiB,EAAApmB,QAAG+C,KAAK,WAAY,wDACuB6rH,KAKnDA,EAAWjnE,IADTgnE,GAIFA,IAAUhnE,EAAMhoD,QAChBymB,EAAApmB,QAAGK,IAAI,WAAY,iBACf,wDAGNsuH,EACF,MAAMK,EAAa,GACnB,KAAOL,EAAQhnE,EAAMhoD,QACjBqvH,EAAWhrH,KAAK2jD,EAAMgnE,MACpBA,EAIN,IAAIV,EAAce,EAAW,GAAG/rH,MAAM,IACtC,MAAOurH,OAAQL,EAASM,OAAQL,GAAWJ,EAAmBC,GAC9D1rH,EAAM0a,KAAKC,UAAUixG,IACrB5rH,EAAM0a,KAAKC,UAAUkxG,IAErB,MAAMa,EAAW,GACX35G,EAAO,GACb,IAAIhB,EAAI,EACR,IAAK,IAAI7Y,EAAI,EAAGA,EAAIuzH,EAAWrvH,OAAQlE,IAAK,CACxC,IAAIoe,EAAO,EACPq1G,EAAU,EACd55G,EAAKtR,KAAK,IACViqH,EAAce,EAAWvzH,GAAGwH,MAAM,IAClCV,EAAM0a,KAAKC,gBAAgB5I,kBAAkB25G,MAC7CgB,EAASjrH,KAAKiqH,EAAY,IAE1B,IAAK,IAAIrlH,EAAI,EAAGA,EAAIwlH,EAAQzuH,OAAQiJ,IAAK,CACrC,MAAM2pB,EAAI67F,EAAQxlH,GACZyjB,EAAO4hG,EAAY/mG,MAAMrN,EAAMA,EAAO0Y,GAC5ChwB,QAAYsX,SAAY0Y,YAAYlG,KAChCA,IACA/W,EAAKhB,GAAG46G,GAAW7iG,GAEvBxS,GAAQ0Y,IACN28F,IAEJ56G,EAGNgB,EAAK7M,QAAQ,CAAClM,EAAGd,KACb8G,SAAa9G,OAAOwhB,KAAKC,UAAU3gB,QAGvCgG,EAAM,iBAAmB0a,KAAKC,UAAU+xG,IAExC,MAAOT,OAAQW,EAASV,OAAQW,GAAWpB,EAAmBiB,GAC9D1sH,EAAM,aAAe0a,KAAKC,UAAUiyG,IACpC5sH,EAAM,aAAe0a,KAAKC,UAAUkyG,IAEpC,MAAMnkG,EAAO,CACTkjG,UAASgB,UACTf,UAASgB,UACT95G,OACAu5G,WAGE5rE,EAAW,IAAI1nD,EAAA8zH,aAAapkG,GAElC,OADAg4B,EAASqsE,SAASR,GACX7rE,GAkDE1nD,EAAA8zH,aAAe,SAASpkG,GAkBjC,GAjBIA,IACA7sB,KAAKywH,QAAU5jG,EAAK4jG,QACpBzwH,KAAKmxH,MAAQpzH,OAAO6qB,KAAK5oB,KAAKywH,SAASlvH,OACvCvB,KAAKukB,MAAQsI,EAAKmjG,QAAQzuH,OAC1BvB,KAAKikB,MAAQ4I,EAAK3V,KAAK3V,OAEvBvB,KAAKgwH,QAAUnjG,EAAKmjG,QACpBhwH,KAAKgxH,QAAUnkG,EAAKmkG,QAGpBhxH,KAAK+vH,QAAUljG,EAAKkjG,QACpB/vH,KAAK+wH,QAAUlkG,EAAKkkG,SAExB/wH,KAAK0wH,YAAc,GACnB1wH,KAAKoxH,QAAU,GACfpxH,KAAKqxH,UAAY,GAEbxkG,EAAM,CAEN,IAAK,IAAI5W,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAAK,CACjCjW,KAAKoxH,QAAQn7G,GAAK,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IAC5BlW,KAAKoxH,QAAQn7G,GAAGC,GAAK2W,EAAK3V,KAAKhB,GAAGD,GAAGiO,KAAK,IAIlDnmB,OAAO6qB,KAAK5oB,KAAK+vH,SAAS1lH,QAAQ4L,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IAAK,CACjC,MAAMvM,EAAM3J,KAAKoxH,QAAQn7G,GAAGC,GAC5BlW,KAAKoxH,QAAQn7G,GAAGC,GAAK,IAAIo7G,EAAS3nH,MAK9C3J,KAAKkxH,SAAW,SAASrwH,GACrBb,KAAK0wH,YAAc7vH,GAGvBb,KAAKc,QAAU,SAASlD,GACpB,OAAOoC,KAAK0wH,YAAY9yH,IAI5BoC,KAAKqzG,OAAS,WACV,MAAM//F,EAAMtT,KAAKc,QAAQ,OACzB,OAAIwS,EACOA,EAAIzO,MAAM,IAAIsM,OAAO+S,KAAK,IAE9B,IAGXlkB,KAAK0vB,QAAU,SAAS9wB,EAAKkH,GACzB9F,KAAK0wH,YAAY9xH,GAAOkH,GAI5B9F,KAAKuxH,SAAW,SAASh7G,GACrB,GAAKA,GAMA,GAAIyP,OAAOC,UAAU1P,GAAM,CAC5B,MAAMzQ,EAAMyQ,EACZA,EAAM,GACN,IAAK,IAAIlZ,EAAI,EAAGA,EAAI2C,KAAKmxH,MAAO9zH,IAC5BkZ,EAAI3Q,KAAKE,QAVP,CACNyQ,EAAM,GACN,IAAK,IAAIlZ,EAAI,EAAGA,EAAI2C,KAAKmxH,MAAO9zH,IAC5BkZ,EAAI3Q,KAAK,GAWjB,KAAI2Q,EAAIhV,OAAS,GAAKgV,EAAIhV,OAASvB,KAAKmxH,OAInC,CACD,IAAIjyG,EAAQ,EACRsyG,GAAY,EAChB,MAAMC,EAAa,GACnB,IAAK,IAAIx7G,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAAK,CACjCw7G,EAAWx7G,GAAK,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IAC5B,GAAkC,iBAAvBlW,KAAKoxH,QAAQn7G,GAAGC,GAAiB,CACxC,MAAMpQ,EAAMyQ,EAAI2I,GAEhBuyG,EAAWx7G,GAAGC,GAAKlW,KAAKoxH,QAAQn7G,GAAGC,GAAGq7G,SAASzrH,GAC/C0rH,GAAY,OAGZC,EAAWx7G,GAAGC,GAAKlW,KAAKoxH,QAAQn7G,GAAGC,GAGvCs7G,MACEtyG,EACFsyG,GAAY,GAIpBxxH,KAAK0xH,gBAAgBD,GACrBttH,EAAM,mBAAqB0a,KAAKC,UAAU2yG,IAC1C,MAAME,EAAW3xH,KAAK4xH,mBAAmBH,GAGzC,GAFAttH,EAAM,sBAAwB0a,KAAKC,UAAU6yG,IAEzC5zH,OAAO6qB,KAAK5oB,KAAK+wH,SAASxvH,OAAS,EAAG,CACtC,MAAMswH,EAAa,GAEnB,IAAK,IAAI57G,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAAK,CACjC47G,EAAW57G,GAAK,GAChB,IAAIC,EAAI,EACJ47G,EAAQ,EAGZ9xH,KAAKgxH,QAAQ3mH,QAAQ8pB,IACjB09F,EAAW57G,GAAGC,GACVu7G,EAAWx7G,GAAG6S,MAAMgpG,EAAOA,EAAQ39F,KAErCje,EACF47G,GAAS39F,IAIjBhwB,EAAM,kBAAoB0a,KAAKC,UAAU+yG,IAGzC9zH,OAAO6qB,KAAK5oB,KAAK+wH,SAAS1mH,QAAQ0nH,IAC9B,IAAK,IAAI97G,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAC5B47G,EAAW57G,GAAG87G,GAAQ/xH,KAAKgyH,WAAWz7G,EAAI2I,GACtC2yG,EAAW57G,GAAG87G,MAEpB7yG,IAGN,MAAM+yG,EAAYjqG,EAAApmB,QAAG4iB,YAAYqtG,GACjC1tH,EAAM,mBAAqB0a,KAAKC,UAAUmzG,IAC1C,MAAMN,EAAW3xH,KAAK4xH,mBAAmBK,GAIzC,OAHA9tH,EAAM,mBAAqB0a,KAAKC,UAAU6yG,IAE1C3xH,KAAKkyH,gBAAgBP,GACdA,EAMP,OAHAxtH,EAAM,mBAAqB0a,KAAKC,UAAU2yG,IAC1CttH,EAAM,mBAAqB0a,KAAKC,UAAU6yG,IAEnCA,EAGf,OA3EI3pG,EAAApmB,QAAGK,IAAI,eAAgB,yCACWjC,KAAKmxH,UA0EpC,IAGXnxH,KAAKgyH,WAAa,EAAClsH,EAAKmoB,KACpB9pB,gBAAoB2B,QAAUmoB,KAC9B,MAAMkkG,EAAU,GAChB,IAAK,IAAI90H,EAAI,EAAGA,EAAIyI,EAAKzI,IACtB80H,EAAQvsH,KAAKqoB,GAEhB,OAAOkkG,IAIXnyH,KAAK0xH,gBAAkB,SAASn7G,GAC5B,MAAMgO,EAAQhO,EAAIhV,OAClBxD,OAAO6qB,KAAK5oB,KAAKywH,SAASpmH,QAAQgL,IAC9B,MAAM+8G,EAAQ,IAAI9iF,OAAOj6B,EAAK,KAC9B,IAAK,IAAIY,EAAI,EAAGA,EAAIsO,EAAOtO,IACvBM,EAAIN,GAAG,GAAKM,EAAIN,GAAG,GAAG04B,QAAQyjF,EAAOpyH,KAAKywH,QAAQp7G,OAO9DrV,KAAKkyH,gBAAkB,SAAS37G,GAC5B,IAAIs6G,EAAW,GACf,MAAM5sG,EAAQ1N,EAAI,GAAGhV,OACrB,IAAK,IAAI2U,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB26G,EAASjrH,KAAK2Q,EAAI,GAAGL,IAEzB/R,EAAM,oBAAsB0a,KAAKC,UAAU+xG,IAC3C,IAAIlnH,EAAMknH,EAAS3sG,KAAK,IACxBnmB,OAAO6qB,KAAK5oB,KAAKywH,SAASpmH,QAAQgL,IAC9B,MAAM+8G,EAAQ,IAAI9iF,OAAOj6B,EAAK,KAC9B1L,EAAMA,EAAIglC,QAAQyjF,EAAOpyH,KAAKywH,QAAQp7G,MAI1Cw7G,EAAWlnH,EAAI9E,MAAM,IACrBV,EAAM,iBAAmB0a,KAAKC,UAAU+xG,IAEpC1zH,EAAAoyH,SAASC,QACTxnG,EAAApmB,QAAGiiB,SAAStN,GAGhB,IAAK,IAAIL,EAAI,EAAGA,EAAI+N,EAAO/N,IACvBK,EAAI,GAAGL,GAAK26G,EAAS36G,IAM7BlW,KAAK4xH,mBAAqBr7G,KACtB,MAAMgO,EAAQhO,EAAIhV,OACZI,EAAM,GACZ,IAAI0wH,EAAQ,EACZ,IAAK,IAAIp8G,EAAI,EAAGA,EAAIsO,EAAOtO,IAAK,CAC5B,MAAMuvF,EAAMjvF,EAAIN,GACVq8G,EAAS9sB,EAAI,GAAGjkG,OACtB,GAAI+wH,EAAS,EAAG,CACZnuH,eAAmBmuH,aAAkB9sB,KACrC,IAAK,IAAItvF,EAAI,EAAGA,EAAIsvF,EAAIjkG,OAAQ2U,IAAK,CAElC,MAAMuO,EAAM+gF,EAAItvF,GAChB,IAAIq8G,EAAaF,EACjB5tG,EAAI5f,MAAM,IAAIwF,QAAQsyB,IACR,IAANzmB,GAEAvU,EAAIiE,KAAK,CAAC+2B,IACVx4B,EAAM,cAAgB0a,KAAKC,UAAUnd,MAIrCA,EAAI4wH,KAAc3sH,KAAK+2B,GACvBx4B,EAAM,iBAAmB0a,KAAKC,UAAUnd,OAInD0wH,GAASC,QAGPD,EACF1wH,EAAIiE,KAAK4/F,GAGjB,OAAO7jG,IAIX3B,KAAK2G,MAAQ,MACT,MAAMwrH,EAAU,IAAIh1H,EAAA8zH,aACduB,EAAW3zG,KAAKstB,MAAMttB,KAAKC,UAAU9e,OAU3C,OATAjC,OAAO6qB,KAAK4pG,GAAUnoH,QAAQzL,IAC1BuzH,EAAQvzH,GAAO4zH,EAAS5zH,KAE5Bb,OAAO6qB,KAAK5oB,KAAK+vH,SAAS1lH,QAAQooH,IAC9B,IAAK,IAAIv8G,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IAAK,CACjC,MAAMymB,EAAOw1F,EAAQf,QAAQqB,GAAMv8G,GAAGw8G,KACtCP,EAAQf,QAAQqB,GAAMv8G,GAAK,IAAIo7G,EAAS30F,MAGzCw1F,KAGfh1H,EAAAoyH,SAAS0B,aAAe9zH,EAAA8zH,aAExB,MAAMK,EAAW,SAAS3nH,GACtB,MAAMujC,EAAMvjC,EAAIpI,OAEhBvB,KAAKuB,OAAS,KAAM2rC,GAEpBltC,KAAKuxH,SAAW,EAAC7/G,EAAI,IAAM/H,EAAIkmD,OAAOn+C,IAEtC1R,KAAKymB,OAAS,MACH,CAACisG,KAAM/oH,MAItBxM,EAAAoyH,SAAS+B,SAAWA,EAapB,MAAMqB,EAAa,CAACjhH,EAAG,IAAKE,EAAG,IAAKD,EAAG,IAAKE,EAAG,KACzC+gH,EAAiB,CACnBC,SAAUF,EACVG,UAAWH,EACXI,UAAWJ,GAIfx1H,EAAAoyH,SAASyD,UAAY,SAASC,EAAOC,EAAUP,GAC3C,MAAMH,EAAWS,EAAMtsH,QACvBwsH,EAAWX,EAAUU,GACrB,MAAME,EAAU,GAChB,IAAIC,EAAWt1H,OAAO6qB,KAAK4pG,EAASzC,SAASxuH,OAC7C8xH,GAAYt1H,OAAO6qB,KAAK4pG,EAASzB,SAASxvH,OAC1C,IAAK,IAAIzC,EAAI,EAAGA,EAAIu0H,EAAUv0H,IAC1Bs0H,EAAQxtH,KAAK,GAEjB,MAAM0tH,EAAQd,EAASjB,SAAS6B,GAC1BnvG,EAAQqvG,EAAM,GAAG/xH,OACjBgyH,EAAU,IAAIhgH,MAAM0Q,GAC1B,IAAK,IAAI/N,EAAI,EAAGA,EAAI+N,EAAO/N,IACvBq9G,EAAQr9G,GAAK,GAGjB,IAAK,IAAID,EAAI,EAAGA,EAAIq9G,EAAM/xH,OAAQ0U,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvBq9G,EAAQtvG,EAAQ,EAAI/N,GAAGtQ,KAAK0tH,EAAMr9G,GAAGC,IAK7Cs8G,EAASzB,QAAUhzH,OAAO4kF,OAAO,GAAIswC,EAAMlD,SAC3C,MAAMyD,EAAWD,EAAQhyH,OAwBzB,OAtBAixH,EAASzC,QAAU,GACnBhyH,OAAO6qB,KAAKqqG,EAAMlC,SAAS1mH,QAAQ0nH,IAC/B,MAAM0B,EAAUD,EAAW,EAAIr9G,SAAS47G,EAAM,IAC9CS,EAASzC,QAAQ0D,GAAWR,EAAMlC,QAAQgB,KAG9CS,EAASpB,QAAUmC,EAEnBx1H,OAAO6qB,KAAK4pG,EAASzC,SAAS1lH,QAAQooH,IAClC,IAAK,IAAIv8G,EAAI,EAAGA,EAAIs8G,EAASvuG,MAAO/N,IAChC,IACIs8G,EAASpB,QAAQqB,GAAMv8G,GAAK,IAAIo7G,EAC5BkB,EAASpB,QAAQqB,GAAMv8G,IAE/B,MAAO0O,GAGH,MAFApgB,QAAQU,IAAI,YAAastH,EAAS1xH,QAAQ,SAC1C0D,QAAQU,IAAI,YAAastH,EAASzC,SAC5B,IAAIrrH,MAAMkgB,MAKrB4tG,GAIXr1H,EAAAoyH,SAASmE,WAAa,SAAST,EAAOC,EAAUP,GAC5C,MAAMH,EAAWr1H,EAAAoyH,SAASyD,UAAUC,EAAOC,GAC3C,OAAO/1H,EAAAoyH,SAASyD,UAAUR,EAAUU,IAGxC/1H,EAAAoyH,SAASoE,WAAa,SAASV,EAAOC,EAAUP,GAC5C,MAAMH,EAAWr1H,EAAAoyH,SAASmE,WAAWT,EAAOC,GAC5C,OAAO/1H,EAAAoyH,SAASyD,UAAUR,EAAUU,IAGxC,MAAMU,EAAiB,CAAChiH,EAAG,IAAKC,EAAG,KA0DnC,SAASshH,EAAWF,EAAOC,GACvB,MAAMW,EAASZ,EAAMnyH,QAAQ,OAC7B,GAAI+yH,EAAQ,CACR,MAAMvgH,EAAMugH,EAAOhvH,MAAM,IACzByO,EAAIjJ,QAAQ,CAACvE,EAAKzI,KACV61H,EAAQh0H,eAAe4G,KACvBwN,EAAIjW,GAAK61H,EAAQptH,MAGzBmtH,EAAMvjG,QAAQ,MAAOpc,EAAI4Q,KAAK,MA4EtC,SAAS4vG,EAAiBn1G,EAAMs0G,GAC5B,IAAIr1H,EAAOq1H,EAAMnyH,QAAQ,QACzB,OAAQ6d,GACJ,IAAK,YAAa/gB,GAAQ,OAAQ,MAClC,IAAK,aAAcA,GAAQ,QAAS,MACpC,IAAK,aAAcA,GAAQ,QAAS,MACpC,IAAK,UAAWA,GAAQ,QAG5Bq1H,EAAMvjG,QAAQ,OAAQ9xB,GAvJ1Bg1H,EAAUmB,QAAUH,EAGpBz2H,EAAAoyH,SAASwE,QAAU,SAASd,EAAOC,EAAUU,GACzC,MAAMpB,EAAWS,EAAMtsH,QAGvBwsH,EAAWX,EAAUU,GAErB,MAAME,EAAU,GAChB,IAAIC,EAAWt1H,OAAO6qB,KAAK4pG,EAASzC,SAASxuH,OAC7C8xH,GAAYt1H,OAAO6qB,KAAK4pG,EAASzB,SAASxvH,OAC1C,IAAK,IAAIzC,EAAI,EAAGA,EAAIu0H,EAAUv0H,IAC1Bs0H,EAAQxtH,KAAK,GAGjB,MAAM2e,EAAQiuG,EAASjuG,MACjByvG,EAAU,IAAIzgH,MAAMgR,GAC1B,IAAK,IAAItO,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB+9G,EAAQ/9G,GAAK,GAGjB,MAAMgO,EAAQuuG,EAASvuG,MACjBqvG,EAAQd,EAASjB,SAAS6B,GAGhC,IAAK,IAAIn9G,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB89G,EAAQzvG,EAAQ,EAAItO,GAAGC,GAAKo9G,EAAMr9G,GAAGC,GAI7C,MAAM+9G,EAAeD,EAAQzyH,OAsB7B,OApBAixH,EAASzC,QAAU,GACnBhyH,OAAO6qB,KAAKqqG,EAAMlD,SAAS1lH,QAAQooH,IAC/B,GAAIt8G,SAASs8G,EAAM,IAAOwB,EAAe,EAAI,CACzC,MAAMC,EAAUD,EAAe,EAAI99G,SAASs8G,EAAM,IAClDD,EAASzC,QAAQmE,GAAWjB,EAAMlD,QAAQ0C,OAEzC,CACD,MAAMyB,EAAUzB,EAChBD,EAASzC,QAAQmE,GAAWjB,EAAMlD,QAAQ0C,MAIlDD,EAASpB,QAAU4C,EAEnBj2H,OAAO6qB,KAAK4pG,EAASzC,SAAS1lH,QAAQooH,IAClC,IAAK,IAAIv8G,EAAI,EAAGA,EAAIs8G,EAASvuG,MAAO/N,IAChCs8G,EAASpB,QAAQqB,GAAMv8G,GAAK,IAAIo7G,EAASkB,EAASpB,QAAQqB,GAAMv8G,MAIjEs8G,GAyEXr1H,EAAAoyH,SAAS4E,cAxDT,SAAuBhiC,EAAWiiC,EAAYlB,GACtClrG,EAAApmB,QAAG6D,cAAc,CAAC0sF,KAClBnqE,EAAApmB,QAAGK,IAAI,WAAY,gBACf,gCAER,IAAIwG,EAAS,GAiDb,OA7CK2rH,IACDA,EAAa,CACTC,IAAK,IAAKN,QAAS,GAAIf,UAAW,GAAIU,WAAY,GAClDC,WAAY,KAKpB51H,OAAO6qB,KAAKwrG,GAAY/pH,QAAQsU,IAC5B,GAAa,QAATA,EAAgB,CAChB,MAAM21G,EAAU,GAEhB,IAAIC,EAAQH,EAAWz1G,IAEnB41G,EADmB,MAAnBH,EAAWC,IACHliC,EAAU98E,IAAI9W,GAAKA,EAAEuC,QAAQ,SAG7ByzH,EAAMljH,OAAO+iH,EAAWC,MAG9BhqH,QAAQzM,IACV,MAAMq1H,EAAQ9gC,EAAUjsE,KAAK3nB,GACzBA,EAAEuC,QAAQ,UAAYlD,GAG1B,GAAIq1H,EAAO,CACP,MAAM59G,EAAM69G,EAAUA,EAAQv0G,GAAQi0G,EAAUj0G,GAC1C6zG,EAAWr1H,EAAAoyH,SAAS5wG,GAAMs0G,EAAO59G,GACvCy+G,EAAiBn1G,EAAM6zG,GACvB8B,EAAQ1uH,KAAK4sH,GACA,YAAT7zG,GAqBxB,SAAsBy1G,EAAYx2H,GAC9B,MAAM2M,EAAQ,GAOd,MANkB,CAAC,YAAa,aAAc,cACpCF,QAAQmqH,KACVJ,EAAWI,GAAKz0G,QAAQniB,IAAS,GAAwB,MAAnBw2H,EAAWC,MACjD9pH,EAAM3E,KAAK4uH,KAGZjqH,EA5B+BkqH,CAAaL,EAAYx2H,GACjCyM,QAAQmqH,IACd,MAAMn/G,EAAM69G,EAAUA,EAAQsB,GAAO5B,EAAU4B,GACzCE,EAAWv3H,EAAAoyH,SAASiF,GAAKhC,EAAUn9G,GACzCy+G,EAAiBU,EAAKE,GACtBJ,EAAQ1uH,KAAK8uH,QAM7BjsH,EAASA,EAAO4I,OAAOijH,MAGxB7rH,sKC/oBX,MAAAuf,EAAAC,EAAAhrB,EAAA,IACAogC,EAAApgC,EAAA,GAKAE,EAAAw3H,eAAA,MAGItsG,cACIroB,KAAK40H,qBAAsB,EAMxBvsG,oBAAoBtQ,EAAc24C,EAAe+J,GACpD,GAAI/J,EAAO,CACP,MAAOyzC,EAAIC,GAAM1zC,EACXmkE,EAAiB,IAAIx3F,EAAAX,cAAc,KACzCm4F,EAAejpC,OAAO,eACtB7zE,EAAMoW,WAAW0mG,EAAgB1wB,EAAIC,GAGzC,GAAI3pC,EAAK,CACL,MAAO3iB,EAAIC,GAAM0iB,EACXq6D,EAAY,IAAIz3F,EAAAX,cAAc,KACpCo4F,EAAUlpC,OAAO,aACjB7zE,EAAMoW,WAAW2mG,EAAWh9E,EAAIC,IAMjC1vB,cAActQ,EAAc8U,GAC/B,IAAIkoG,EAAmB,CAAC,cAAe,YAAa,iBAChDloG,EAAKkoG,iBACLA,EAAmBA,EAAiB1jH,OAAOwb,EAAKkoG,mBAEjB,IAA1BloG,EAAKkoG,mBACVA,EAAmB,IAGlB/sG,EAAApmB,QAAG6D,cAAc,CAAConB,EAAK+nG,wBACxB50H,KAAK40H,oBAAsB/nG,EAAK+nG,qBAGhC50H,KAAK40H,qBACL78G,EAAMi9G,eAAepwG,IACjB,GAAIA,EAAE0kG,OAAQ,CACV,MAAM1sF,EAAMhY,EAAE0kG,SACd,GAAIyL,EAAiBh1G,QAAQ6c,GAAO,EAChC,OAAO,EAGf,OAAO,kVCxDvB,MAAA5U,EAAAC,EAAAhrB,EAAA,IAEA+/G,EAAA//G,EAAA,IAGAm7F,EAAAhkE,EAAAn3B,EAAA,KACAm5G,EAAAn5G,EAAA,IAEAoiH,EAAApiH,EAAA,IACAmiH,EAAAniH,EAAA,IACA2lG,EAAA3lG,EAAA,IAEAo3B,EAAAp3B,EAAA,GACAogB,EAAApgB,EAAA,GACAw5B,EAAArC,EAAAn3B,EAAA,IACAq3C,EAAAr3C,EAAA,GAEM8pB,EAAOsN,EAAArN,UAAUC,UAEjBwB,EAAMpL,EAAAC,OAAOC,SAEb03G,EAAW,SAASpoG,GACV,CAAC,gBAAiB,WAAY,QACtCxiB,QAAQvI,IACR,GAAKA,KAAQ+qB,EACT7sB,KAAK8B,GAAQ+qB,EAAK/qB,OAEjB,CACD,MAAMuC,KAASvC,kBACfkmB,EAAApmB,QAAGK,IAAI,WAAY,MAAOoC,OAKzBlH,EAAA+3H,QAAe,GAG5B/3H,EAAA+3H,QAAQC,aAAetoG,KACnB,MAAMuoG,EAAWvoG,GAAQ,GACnBzoB,EAAM,CACR89G,OAAQ,EACRnK,SAAU,CACNjxG,GAAQA,EAAK/E,OAAS0mB,EAAIjL,aAAawK,EAAApmB,QAAGoM,aAE9CgqG,SAAU,GAAIxkB,UAAW,SAG7B,OADez1F,OAAO4kF,OAAOv+E,EAAKgxH,KAYzBj4H,EAAAk4H,YAAc,WACvBr1H,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,eAC9Bz4F,KAAK2/G,WAAa,IAAIN,EAAAO,aACtB5/G,KAAK0/G,UAAY,IAAIN,EAAAlI,YACrBl3G,KAAKs1H,WAAa,IAAI1yB,EAAAtK,aAGtBt4F,KAAKu1H,UAAY99B,IACNzvE,EAAApmB,QAAG2zH,UAAU99B,IAIxBz3F,KAAKw1H,aAAe,EAAC53H,EAAMwG,IAAQpE,KAAK2/G,WAAW6V,aAAa53H,EAAMwG,IAGtEpE,KAAKirC,YAAc,EAACrtC,EAAMwG,EAAM,KAC5BpE,KAAK2/G,WAAW10E,YAAYrtC,EAAMwG,IAItCpE,KAAKg/B,YAAc,EAAC/0B,EAAO29B,IACvB5nC,KAAK2/G,WAAW3gF,YAAY/0B,EAAO29B,IAGvC5nC,KAAKy1H,YAAc73H,IAAQoC,KAAK2/G,WAAW8V,YAAY73H,IAEvDoC,KAAKwvB,cAAgB,CAACH,IAClB,GAAIilB,EAAAhC,SAASC,cAAcljB,GACvB,OAAOilB,EAAAhC,SAASC,cAAcljB,GAElC,OAAQA,GACJ,IAAK,OAAS,OAAO,IAAIoH,EAAQ2C,aAAY,GAC7C,IAAK,WAAa,OAAO,IAAI3C,EAAQ2C,aAAY,GACjD,QAAS,OAAO,QAIxBp5B,KAAK01H,gBAAkB,EAACz/G,EAAGC,IACvB,IAAI8mG,EAAAC,KAAKhnG,EAAGC,EAAG,IAAIugB,EAAQK,YAAY,WAE3C92B,KAAK21H,eAAiB,EAAC1/G,EAAGC,IACtB,IAAI8mG,EAAAC,KAAKhnG,EAAGC,EAAG,IAAIugB,EAAQkB,YAAY,UAG3C33B,KAAKu4F,YAAc,SAAS/E,EAAWv8E,EAAMC,EAAM2V,GAC/C,OAAO7sB,KAAKs1H,WAAW/8B,YAAY/E,EAAWv8E,EAAMC,EAAM2V,IAK9D7sB,KAAKq3G,cAAgB,EAACt/F,EAAOkX,EAAQpC,KACjC7sB,KAAKw4F,OAAOoB,WAAW,gBAAiB/sE,EAAM,CAAC,OAAQ,aAEhD7sB,KAAK0/G,UAAUrI,cAAct/F,EAAOkX,EAAQpC,KAKvD7sB,KAAK41H,eAAiB,EAAC79G,EAAOkX,EAAQpC,KAClC7sB,KAAKw4F,OAAOoB,WAAW,iBAAkB/sE,EACrC,CAAC,YAAa,mBAElB,MAAMrU,EAAYqU,EAAKrU,UAEjB7U,EAAS3D,KAAKyjH,gBAAgB52F,EAAKgpG,eAAgBhpG,EAAKlO,KAC1DnG,GACJ,OAAK7U,GAGLyyG,EAAAV,OAAOC,oBAAoB59F,EAAOpU,EAAQqkB,EAAApmB,QAAGiL,YACtClJ,EAAOpC,QAHH,IAMfvB,KAAK81H,UAAY7mG,KACbjvB,KAAK+1H,QAAU9mG,IAGnBjvB,KAAKyjH,gBAAkB,EAACzN,EAASr3F,EAAMnG,IAC5BxY,KAAK2/G,WAAW8D,gBAAgBzN,EAASr3F,EAAMnG,IAK1DxY,KAAK63G,cAAgB,EAAC9/F,EAAOkX,EAAQpC,KACjC7sB,KAAK0/G,UAAU7H,cAAc9/F,EAAOkX,EAAQpC,KAGhD7sB,KAAKg2H,gBAAkB,EAACj+G,EAAOkX,KAC3B,IAAK,IAAI/Y,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMggH,EAAQhnG,EAAOY,gBAAgB,SAAU,WAC/C9X,EAAMgW,SAASkoG,EAAOhgH,EAAI,EAAG,EAAIC,GAGrC,MAAMggH,EAAUjnG,EAAOY,gBAAgB,SAAU,WACjD9X,EAAMgW,SAASmoG,EAAS,GAAIhgH,EAAI,MAIxClW,KAAKm2H,gBAAkB,EAACp+G,EAAOkX,KAC3B,IAAK,IAAI/Y,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAI7Y,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAM+4H,EAAQnnG,EAAOY,gBAAgB,SAAU,gBAC/C9X,EAAMgW,SAASqoG,EAAO/4H,EAAI,GAAI,GAAK6Y,GACnC6Q,EAAKe,UAAUE,EAAApmB,QAAGoJ,kBAAmB,CAACf,MAAOmsH,EACzCr+G,QAAO1T,IAAK,kBAK5BrE,KAAKq2H,gBAAkB,SAASt+G,EAAOkX,GACnC,MAAMzE,EAAKzS,EAAMyL,SAASvM,KAAO,EAC3BwT,EAAK1S,EAAMyL,SAAStM,KAAO,EACjC,IAAK,IAAIhB,EAAIuU,EAAIvU,EAAIuU,EAAK,EAAGvU,IACzB,IAAK,IAAID,EAAIuU,EAAIvU,EAAIuU,EAAK,GAAIvU,IAAK,CAC/B,MAAMqgH,EAAQrnG,EAAOY,gBAAgB,SACjC,kBACE0mG,EAAOtgH,EAAI,GACXugH,EAAOtgH,EAAI,GACb6B,EAAMyL,SAASqK,MAAM0oG,EAAMC,IAC3Bz+G,EAAMgW,SAASuoG,EAAOC,EAAMC,GAC5BzvG,EAAKe,UAAUE,EAAApmB,QAAGoJ,kBAAmB,CAACf,MAAOqsH,EACzCv+G,QAAO1T,IAAK,gBAGhB2jB,EAAApmB,QAAG+C,KAAK,cAAe,yCACI4xH,MAASC,QAMpDx2H,KAAK81G,gBAAkB,EAAC/9F,EAAOuR,EAAMuD,KACjC,MAAMmpF,EAAUnpF,EAAKmpF,SAAW,GAC1Bx9F,UAACA,EAASmG,KAAEA,GAAQkO,EACpBlpB,EAAS3D,KAAKyjH,gBAAgBzN,EAASr3F,EAAMnG,GACnD49F,EAAAV,OAAOI,gBAAgB/9F,EAAOuR,EAAM3lB,KAIxC3D,KAAK+1G,eAAiB,EAACh+F,EAAOuR,EAAMuD,KAChC,MAAM0qF,EAAS1qF,EAAK0qF,QAAU,EAC9B,IAAI8I,EAAWtiH,OAAO4kF,OAAO,CAAC60B,cAAeD,GAAS1qF,GACtDwzF,EAAW,IAAI4U,EAAS5U,GACxB,MACMz8G,GADW,IAAIw7G,EAAAlI,aACEI,cAAc+I,GAC/B1pE,EAAY5+B,EAAMyL,SAASyyF,cAAc3sF,GAC/C8sF,EAAAV,OAAOE,gBAAgB79F,EAAO4+B,EAAW/yC,EAAOokB,EAAApmB,QAAGmL,0VC7M3D,MAAAib,EAAAC,EAAAhrB,EAAA,IACAw5H,EAAAx5H,EAAA,KACA2vH,EAAA3vH,EAAA,IAGMkH,EADMlH,EAAQ,EACNq3B,CAAI,sBAElB8jE,EAAAhkE,EAAAn3B,EAAA,KACAy5H,EAAAz5H,EAAA,IACA4lG,EAAAzuE,EAAAn3B,EAAA,KACA05H,EAAA15H,EAAA,IACA25H,EAAA35H,EAAA,IACA+yC,EAAA/yC,EAAA,GAEA45H,EAAA55H,EAAA,KACA65H,EAAA75H,EAAA,KACA85H,EAAA95H,EAAA,IACA+5H,EAAA/5H,EAAA,KAEAg6H,EAAAh6H,EAAA,IAEAi6H,EAAAj6H,EAAA,KAKMk8B,EAHN/E,EAAAn3B,EAAA,IAGuBg7B,cACjBk/F,EAAa,CAAC,OAAQ,WAAY,UAAW,cAsC7CC,EAAa,CACf1qE,KAAM,CACF2qE,MAAO,CAACphH,EAAG,GAAIC,EAAG,IAClBohH,OAAQ,CAACrhH,EAAG,GAAIC,EAAG,IACnBqhH,MAAO,CAACthH,EAAG,GAAIC,EAAG,IAClBshH,KAAM,CAACvhH,EAAG,IAAKC,EAAG,KAEtBi+E,SAAU,CACNkjC,MAAO,CAACphH,EAAG,GAAIC,EAAG,IAClBohH,OAAQ,CAACrhH,EAAG,GAAIC,EAAG,IACnBqhH,MAAO,CAACthH,EAAG,GAAIC,EAAG,IAClBshH,KAAM,CAACvhH,EAAG,IAAKC,EAAG,KAEtBu0F,QAAS,CACL4sB,MAAO,CAACphH,EAAG+R,EAAApmB,QAAGgf,cAAe1K,EAAG8R,EAAApmB,QAAGif,eACnCy2G,OAAQ,CAACrhH,EAAG+R,EAAApmB,QAAGwV,eAAgBlB,EAAG8R,EAAApmB,QAAGyV,gBACrCkgH,MAAO,CAACthH,EAAG+R,EAAApmB,QAAGkf,cAAe5K,EAAG8R,EAAApmB,QAAGmf,eACnCy2G,KAAM,CAACvhH,EAAG+R,EAAApmB,QAAGof,aAAc9K,EAAG8R,EAAApmB,QAAGqf,eAErC6pF,KAAM,CACFusB,MAAO,CAACphH,EAAG,GAAIC,EAAG,IAClBohH,OAAQ,CAACrhH,EAAG,GAAIC,EAAG,IACnBqhH,MAAO,CAACthH,EAAG,GAAIC,EAAG,IAClBshH,KAAM,CAACvhH,EAAG,IAAKC,EAAG,MAwzC1B,SAASuhH,EAAsB5qG,EAAM6qG,EAAW96F,GAC5C,GAAkB,eAAd/P,EAAKjvB,KAAuB,CAC5BoqB,EAAApmB,QAAGgD,KAAKg4B,EAAM,uCACd,MACM+6F,EADSD,EAAUE,iBACHztH,OAAOzM,GAAqB,aAAhBA,EAAEgE,WAEpC,GADAsmB,EAAApmB,QAAGgD,KAAK,mBAAqBia,KAAKC,UAAU64G,IACxCA,EAAOp2H,OAAS,EAAG,CACnB,MAAM6d,EAASu4G,EAAO,GAAGz+F,iBACzBlR,EAAApmB,QAAGgD,KAAK,gBAAkBwa,EAAO/I,YAAY3U,aAtzC5CvE,EAAA06H,aAAe,WACxB73H,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,gBAC9Bz4F,KAAK83H,SAAW,IAAIlB,EAAAmB,YAIpB/3H,KAAKuvG,gBAAiB,EACtBvvG,KAAKg4H,cAAgB,GAErBh4H,KAAKi4H,aAAe,GAEpBj4H,KAAKyrG,MAAQ,IAAIirB,EAAAwB,UAIjBl4H,KAAKm4H,SAAW,GAChBn4H,KAAKo4H,aAAc,EACnBp4H,KAAKq4H,UAAY,GAKjBr4H,KAAKs4H,OAAS,SAAShwG,GACnBtoB,KAAK83H,SAASQ,OAAOhwG,IAIzBtoB,KAAKu4H,gBAAkB,SAAS3rG,GAC5B5sB,KAAKi4H,aAAerrG,EACpB5sB,KAAKmE,MAAM,2BAMfnE,KAAKw4H,YAAc,SAASL,GACa,IAAjCp6H,OAAO6qB,KAAKuvG,GAAU52H,QACtBymB,EAAApmB,QAAG+C,KAAK,eAAgB,cACpB,0DAER3E,KAAKm4H,SAAWA,EAChBn4H,KAAKo4H,aAAc,EACnBp4H,KAAKmE,MAAM,yBAKfnE,KAAKy4H,UAAY,SAAS5rG,GACtB7sB,KAAKyrG,MAAMgtB,UAAU5rG,IAKzB7sB,KAAK04H,SAAW,SAAS7rG,GACrB7sB,KAAKyrG,MAAMitB,SAAS7rG,IAIxB7sB,KAAK24H,cAAgB,SAAS9rG,EAAY,IACtC,MAAM+rG,EAAY/rG,EAAK+rG,WAAa,SAC9BC,EAAchsG,EAAKgsG,aAAe7wG,EAAApmB,QAAG0f,iBACrCw3G,EAAyB,CAC3BF,YACAG,SAAU3B,EAAW3sB,QAAQmuB,GAAW3iH,EACxC+iH,SAAU5B,EAAW3sB,QAAQmuB,GAAW1iH,EACxC2iH,cACAI,WAAYpsG,EAAKosG,YAAcjxG,EAAApmB,QAAGuf,gBAClCwyC,KAAK,GAET3zD,KAAKyrG,MAAMktB,cAAcG,GACzB94H,KAAKmE,MAAM,qBAAuB0a,KAAKC,UAAUg6G,KAGrD94H,KAAKk5H,cAAgB,WACjB,OAAOl5H,KAAKyrG,MAAMytB,iBAItBl5H,KAAKssG,QAAU,SAAS1jF,GACpB,OAAO5oB,KAAKyrG,MAAMa,QAAQ1jF,IAG9B5oB,KAAKm5H,aAAe,SAASC,GACzBp5H,KAAKo5H,UAAYA,GAIrBp5H,KAAKq5H,YAAc,KAAMr5H,KAAKyrG,MAAM6tB,WAAWp1G,KAAK,MAGpDlkB,KAAKu5H,YAAc,SAAS1sG,GACxB7sB,KAAKw4F,OAAOoB,WAAW,cAAe/sE,EAAM,CAAC,OAAQ,WAChD7sB,KAAKk5H,gBAAgBvlE,KACtB3zD,KAAK24H,cAAc,IAEnB9rG,EAAK3tB,eAAe,oBACpBc,KAAKuvG,eAAiB1iF,EAAK0iF,eAC3BvvG,KAAKmE,MAAM,yBAA2BnE,KAAKuvG,iBAE/CvvG,KAAKy4H,UAAU5rG,GACf,MAAM2sG,EAAQ,IAAI32B,EAAMqM,SAASriF,EAAKjvB,MACtC47H,EAAMC,QAAQ5sG,GACd,IAAK,IAAIxvB,EAAI,EAAGA,EAAIwvB,EAAK2iF,OAAQnyG,IAAK,CAClC,MAAMqyG,EAAW7iF,EAAKkqC,KAAK15D,GACrB05D,EAAO/2D,KAAK05H,WAAWhqB,GACzBA,EAAShE,cACT1rG,KAAK25H,oBAAoBH,EAAOziE,EAAM24C,GAE1C8pB,EAAMI,QAAQ7iE,GACd/2D,KAAK65H,WAAWnqB,EAAU34C,GAI9B,OAFA/2D,KAAK04H,SAAS7rG,GACd7sB,KAAK65H,WAAWhtG,EAAM2sG,GACfA,GAKXx5H,KAAK05H,WAAa,SAAS7sG,GACvB7sB,KAAKw4F,OAAOoB,WAAW,aAAc/sE,EACjC,CAAC,OAAQ,OAAQ,SACrB7sB,KAAKy4H,UAAU5rG,GAEf,MAAMg5E,EAAW7lG,KAAKq5H,cAEtB,IAAIS,EAAa,KACb95H,KAAKo4H,YACL0B,EAAa95H,KAAK+5H,cAAcltG,IAGhCitG,EAAa95H,KAAKg6H,gBAAgBn0B,EAAUh5E,KACH,IAAtBitG,EAAWv4H,SAC1Bu4H,EAAa,MAIrB,MAAM/iE,EAAO,IAAI8rC,EAAMsI,KAAKt+E,EAAKjvB,KAAMivB,EAAKlC,KAAMkC,EAAKjC,KACnDiC,EAAK5V,KAAM4V,EAAK3V,KAAM4iH,GAa1B,OAZA/iE,EAAK0iE,QAAQ5sG,GACbkqC,EAAKkjE,YAAYj6H,KAAKq5H,eAGlBr5H,KAAKuvG,gBACLvvG,KAAKk6H,gBAAgBnjE,EAAMlqC,GAC3BkqC,EAAKojE,uBAGLn6H,KAAKmE,MAAM,uDAEfnE,KAAK04H,SAAS7rG,GACPkqC,GAGX/2D,KAAK25H,oBAAsB,EAACH,EAAiBziE,EAAY24C,KACrD3xG,OAAO6qB,KAAK8mF,EAAShE,cAAcrhG,QAAQ+vH,IACvC,MAAOC,EAAMC,GAAQF,EAAMv1H,MAAM,MAC1BoR,EAAGC,GAAK,CAACC,SAASkkH,EAAM,IAAKlkH,SAASmkH,EAAM,KAC/C5qB,EAAShE,aAAa0uB,KACtBp6H,KAAKmE,4CAA4C8R,KAAKC,KACtDlW,KAAKu6H,mBAAmBf,EAAOziE,EAAM9gD,EAAGC,QAMpDlW,KAAKu6H,mBAAqB,EAACf,EAAiBziE,EAAY9gD,EAAGC,KAEvD,GAAK6gD,EAAKyjE,oBAAoBvkH,EAAGC,GAqB7BlW,KAAKmE,cAAc8R,KAAKC,+BArBS,CACjClW,KAAKmE,uBAAuB8R,KAAKC,6BACjC,MAAMukH,EAAYjB,EAAMltB,UACxBtsG,KAAKy4H,UAAUgC,GACf,MAAM/qB,EAAW34C,EAAKu1C,UACtBtsG,KAAKy4H,UAAU/oB,GAEf1vG,KAAK06H,kBAAkB3jE,EAAM9gD,EAAGC,GAEhClW,KAAKk6H,gBAAgBnjE,EAAM24C,EAAUz5F,EAAGC,GACxC6gD,EAAK4jE,qBAAqB1kH,EAAGC,GAI7BlW,KAAK46H,aAAapB,EAAOziE,EAAM9gD,EAAGC,GAGlClW,KAAK04H,SAAShpB,GACd1vG,KAAK04H,SAAS+B,MAStBz6H,KAAK06H,kBAAoB,EAAC3jE,EAAY9gD,EAAGC,KACrC,MAAM2kH,EAAU3zH,KAAK4C,MAAMitD,EAAKqyC,WAAa,GACvC0xB,EAAU/jE,EAAKoyC,WAAa,EAC5Bl6E,EAAS+gB,EAAAvS,YAAYmO,YAErB7zB,EAAQg/C,EAAKgkE,UAAU9kH,EAAGC,GAAGxM,WAE7B4O,EAAQpR,KAAKiR,IAAI0iH,EAAU5kH,GAC3BsC,EAAQuiH,EAAU5kH,EAElBshG,EAAgB,EAAIl/F,EAAQ,EAAIC,EAChCs9G,EAA+B,IAAbt9G,EAAQ,GAAU,EAAID,EAAQ,GAEhD0iH,EAAO,IAAIrE,EAAAtB,YACjB2F,EAAKlF,UAAU7mG,GAEf,MAAMvW,EAAWsP,EAAApmB,QAAG6W,YAAYH,EAAOC,GACjCC,EAAYwP,EAAApmB,QAAGyW,aAAaC,EAAOC,GAEnC0iH,EAAuB,CACzBzjB,gBACA1wG,KAAMA,GACFA,EAAKxI,OAASoa,GACG,SAAd5R,EAAK/E,KAEZkI,MAAOA,GACHA,EAAM40B,QAAUrmB,EAEpBm3D,KAAM,KAAM,EACZrwC,KAAM,KAAM,EACZ5mB,WACAm9G,iBAAgBr9G,aAEpBxY,KAAKk7H,wBAAwBD,EAAWhlH,EAAGC,GAE3C+kH,EAAUt8G,KAAOs8G,EAAUn0H,KAC3Bk0H,EAAK3jB,cAAct/F,EAAOkX,EAAQgsG,GAClCA,EAAUt8G,KAAOs8G,EAAUhxH,MAC3B+wH,EAAKpF,eAAe79G,EAAOkX,EAAQgsG,KAGvCj7H,KAAKk6H,gBAAkB,EAACnjE,EAAMlqC,EAAMsuG,GAAK,EAAIC,GAAK,KAE9C,GADAp7H,KAAKmE,yBAAyBg3H,MAAOC,KAChCvuG,EAAKglE,MAIL,GAAIspC,EAAK,GAAKC,EAAK,EAGpBp7H,KAAKq7H,oBAAoBtkE,EAAMlqC,EAAMsuG,EAAIC,OAExC,CACD,MAAME,EAAezuG,EAAKglE,MAAMspC,GAAIC,GACpCp7H,KAAKu7H,oBAAoBxkE,EAAMukE,EAAcH,EAAIC,QATjDp7H,KAAKq7H,oBAAoBtkE,EAAMlqC,EAAMsuG,EAAIC,KAajDp7H,KAAKq7H,oBAAsB,EAACtkE,EAAYlqC,EAAMsuG,GAAK,EAAIC,GAAK,KACxDp7H,KAAKmE,6BAA6Bg3H,MAAOC,KACzCjE,EAAW9sH,QAAQtI,IACf,MAAMy5H,EAASz5H,EAAKwT,cACdklE,EAAa,SAAW14E,EAC9B,IAAI05H,EAAS,EACTloH,MAAMC,QAAQqZ,EAAK2uG,MACnBC,EAAS5uG,EAAK2uG,GAAQj6H,QAE1BvB,KAAKmE,mBAAmBpC,aAAgB05H,KAExC,IAAK,IAAIp+H,EAAI,EAAGA,EAAIo+H,EAAQp+H,IAAK,CAC7B,MAAMq+H,EAAW7uG,EAAK2uG,GAAQn+H,IACxB4Y,EAACA,EAACC,EAAEA,GAAKwlH,EAIf,MAAa,IAARP,GAAaA,IAAOllH,IAAe,IAARmlH,GAAaA,IAAOllH,GAAI,CAEpD,MAAMmtF,EAAOrjG,KAAKy6E,GAAYihD,GAC9Br4B,EAAKs4B,UAAU1lH,EAAGC,GAClB6gD,EAAK8uB,QAAQ9jF,EAAMshG,GACnBrjG,KAAK65H,WAAW6B,EAAUr4B,GACrBrjG,KAAKo4H,aACNp4H,KAAK47H,yBAAyB7kE,EAAMssC,EAAMq4B,SAU9D17H,KAAKu7H,oBAAsB,EAACxkE,EAAYukE,EAAcH,EAAIC,KACtDjE,EAAW9sH,QAAQtI,IACf,MAAMy5H,EAASz5H,EAAKwT,cACpB,IAAIkmH,EAAS,EACTloH,MAAMC,QAAQ8nH,EAAaE,MAC3BC,EAASH,EAAaE,GAAQj6H,QAElCvB,KAAKmE,YAAYg3H,MAAOC,eAAgBr5H,aAAgB05H,KACxD,IAAK,IAAIp+H,EAAI,EAAGA,EAAIo+H,EAAQp+H,IAAK,CAC7B,MAAMq+H,EAAWJ,EAAaE,GAAQn+H,GAChCo9E,EAAa,SAAW14E,GACxBkU,EAACA,EAACC,EAAEA,GAAKwlH,EAIf,MAAa,IAARP,GAAaA,IAAOllH,IAAe,IAARmlH,GAAaA,IAAOllH,GAAI,CACpD,MAAMmtF,EAAOrjG,KAAKy6E,GAAYihD,GAC9Br4B,EAAKs4B,UAAU1lH,EAAGC,GAClB6gD,EAAK8uB,QAAQ9jF,EAAMshG,GACnBrjG,KAAK65H,WAAW6B,EAAUr4B,GACrBrjG,KAAKo4H,aACNp4H,KAAK47H,yBAAyB7kE,EAAMssC,EAAMq4B,SAU9D17H,KAAK+5H,cAAgB,CAACltG,IAClB,MAAMD,EAAoB,GAsB1B,OArBIC,EAAKglE,MACLhlE,EAAKglE,MAAMxnF,QAAS+hG,IAChB,MAAMwiB,EAAoB,GAC1BxiB,EAAQ/hG,QAASqiD,IACb,MAAM30C,EAAe/X,KAAKm4H,SAASzrE,EAAK30C,OACpCA,EACA62G,EAAShpH,KAAKmS,GAGdiQ,EAAApmB,QAAGK,IAAI,eAAgB,+BACJyqD,EAAK30C,uBAGhC6U,EAAOhnB,KAAKgpH,KAIhB5mG,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,mDAGD2qB,IAGX5sB,KAAK67H,cAAgB,SAAShvG,GAC1B7sB,KAAKw4F,OAAOoB,WAAW,gBAAiB/sE,EACpC,CAAC,OAAQ,cACb7sB,KAAKy4H,UAAU5rG,GAEf,MAAM49E,EAAU,IAAI5H,EAAMntC,QAAQ7oC,EAAKjvB,MAGvC,GAFA6sG,EAAQwvB,YAAYj6H,KAAKq5H,eAErBxsG,EAAK67E,YAAc77E,EAAKq7E,OAAO3mG,OAAQ,CACvC,MAAM2rC,EAAMrgB,EAAKq7E,OAAO3mG,OACxBymB,EAAApmB,QAAGK,IAAI,gBAAiB,+CACWirC,SAAWrgB,EAAK67E,aAGvD,IAAK,IAAIrrG,EAAI,EAAGA,EAAIwvB,EAAK67E,UAAWrrG,IAAK,CACrC,MAAMy+H,EAAajvG,EAAKq7E,OAAO7qG,GACzB6qG,EAASloG,KAAK+7H,aAAaD,GACjCrxB,EAAQuxB,UAAU9zB,GAClBloG,KAAK65H,WAAWiC,EAAY5zB,GA8BhC,OA3BIr7E,EAAKm4E,UACLyF,EAAQzC,YAAYn7E,EAAKm4E,UAIxBhlG,KAAKo4H,aACFvrG,EAAK67E,UAAY,IACb77E,EAAKovG,cACLpvG,EAAKovG,cAAc5xH,QAAQmrC,IACH,IAAhBA,EAAKj0C,OAELkpG,EAAQ9D,mBAAmBnxD,GAG3BxtB,EAAApmB,QAAGK,IAAI,gBAAiB,gBACpB,uCAKZ+lB,EAAApmB,QAAGK,IAAI,gBAAiB,gBACpB,8CAKhBjC,KAAK04H,SAAS7rG,GACP49E,GAIXzqG,KAAK+7H,aAAe,SAASlvG,GACzB7sB,KAAKw4F,OAAOoB,WAAW,eAAgB/sE,EACnC,CAAC,OAAQ,YACb7sB,KAAKy4H,UAAU5rG,GAEf,MAAMq7E,EAAS,IAAIrF,EAAMiF,OAAOj7E,EAAKjvB,MAC/BioG,EAAW7lG,KAAKq5H,cACtBnxB,EAAO+xB,YAAYp0B,GAEnB,MAAMoyB,EAAej4H,KAAKg6H,gBAAgBn0B,EAAUh5E,GAEpD,IAAK,IAAIxvB,EAAI,EAAGA,EAAIwvB,EAAK82E,QAAStmG,IAAK,CACnC,MAAMmb,EAAYxY,KAAKssG,QAAQ,aACzB5zF,EAAW1Y,KAAKssG,QAAQ,YAExB2uB,EAAuB,CACzBhlH,EAAGjW,KAAKssG,QAAQ,YAChBp2F,EAAGlW,KAAKssG,QAAQ,YAChBusB,YAAa74H,KAAKssG,QAAQ,eAC1B2sB,WAAYj5H,KAAKssG,QAAQ,cACzB5zF,SAAUA,EAAYA,EAAe,GAAJrb,EAAU,IAAMA,EAAI,GACrDmb,UAAWA,EAAaA,EAAYnb,EAAM,EAAIA,EAC9C6b,OAAQ7b,GAGN6+H,EAAcl8H,KAAKssG,QAAQ,eAC7B4vB,IACAjB,EAAUiB,YAAcA,GAG5Bl8H,KAAKm8H,oBAAoBlB,GAGzB,IAAIljH,EAAQ/X,KAAKo8H,oBAAoB/+H,EAAG46H,GAGxC,GAAKlgH,EAmCI8U,EAAKwvG,oBAAsBxvG,EAAKluB,QACrCqB,KAAKs8H,iBAAiBj/H,EAAG0a,EAAOmwF,QAnChC,GAAIr7E,EAAKD,OACL7U,EAAQ/X,KAAKm4H,SAAStrG,EAAKD,OAAOvvB,QAEjC,CACD,MAAO4Z,EAAMC,GAAQ,CAAC+jH,EAAUhlH,EAAGglH,EAAU/kH,GAE7C,GADA+kH,EAAUlG,kBAAmB,EACzB,WAAal+F,KAAKqlG,GAAc,CAEhCnkH,GADiB,IAAIi/G,EAAAuF,gBACJ59H,OAAOsY,EAAMC,EAAM+jH,GACpCj7H,KAAK83H,SAAS0E,kBAAkBzkH,EAAOkjH,GACvCj7H,KAAK83H,SAAS2E,wBAAwB1kH,EAAOkjH,QAE5C,GAAI,OAASpkG,KAAKqlG,GAAc,CAEjCnkH,GADgB,IAAI++G,EAAA4F,eACJ/9H,OAAOsY,EAAMC,EAAM+jH,GACnCj7H,KAAK83H,SAAS0E,kBAAkBzkH,EAAOkjH,GACvCj7H,KAAK83H,SAAS2E,wBAAwB1kH,EAAOkjH,QAE5C,GAAI,gBAAgBpkG,KAAKqlG,GAAc,CAExCnkH,GADkB,IAAIg/G,EAAA4F,iBACJh+H,OAAOsY,EAAMC,EAAM+jH,OAEpC,CAEDljH,GADgB,IAAI8+G,EAAA+F,kBACJj+H,OAAOsY,EAAMC,EAAM+jH,GAGvCj7H,KAAKs8H,iBAAiBj/H,EAAG0a,EAAOmwF,GAChC,MAAM20B,EAAW,IAAI3F,EAAA4F,gBAAgB,WACjCz/H,IAAOwvB,EAAK82E,QAAU,GACtBk5B,EAASE,qBAAqB1/H,EAAG0a,EAAOkjH,GAQpD/yB,EAAO80B,SAASjlH,GAepB,OAXK/X,KAAKo4H,YAMDvrG,EAAK3tB,eAAe,aACzBgpG,EAAO+0B,oBAAoBpwG,EAAKm4E,WANhCkD,EAAO+zB,gBACHpvG,EAAK3tB,eAAe,kBACpBgpG,EAAOg1B,YAAYrwG,EAAKswG,gBAOhCn9H,KAAK04H,SAAS7rG,GACPq7E,GAKXloG,KAAKo8H,oBAAsB,EAAC/+H,EAAG46H,KAC3B,IAAImF,EAAa,KACjB,GAAInF,EAAa12H,OAAS,EAAG,CACzB,MAAM87H,EAAWpF,EAAa/xG,KAAK86E,GAAMA,EAAG9nF,SAAW7b,GACnDggI,IACAD,EAAaC,EAAStlH,OAG9B,OAAOqlH,IAGX,MAAME,EAAex3H,IACE,mBAARA,GACPkiB,EAAApmB,QAAGK,IAAI,UAAW,6DACgC6D,EAAI6C,eAM9D3I,KAAKm8H,oBAAsB,SAASlB,GAChC,MAAMlO,EAAa/sH,KAAKssG,QAAQ,cAC1BixB,EAAa,IAAI3Q,EAAAK,YACvB,GAAIF,EAAY,CACZ,MAAMlnB,EAAW7lG,KAAKq5H,cAEtB,GAAItM,EAAW9iH,MAAO,CAClBqzH,EAAavQ,EAAW9iH,OACxBgxH,EAAUhxH,MAAQszH,EAAWrQ,eAAeH,EAAW9iH,OACvD,MAAMN,EAAMkV,KAAKC,UAAUiuG,EAAW9iH,OACtCjK,KAAKmE,oCAAoC0hG,MAAal8F,KAE1D,GAAIojH,EAAWjmH,KAAM,CACjBw2H,EAAavQ,EAAWjmH,MACxBm0H,EAAUn0H,KAAOy2H,EAAWrQ,eAAeH,EAAWjmH,MACtD,MAAM6C,EAAMkV,KAAKC,UAAUiuG,EAAWjmH,MACtC9G,KAAKmE,mCAAmC0hG,MAAal8F,KAEzD,GAAIojH,EAAWztF,KAAM,CACjBg+F,EAAavQ,EAAWztF,MACxB27F,EAAU37F,KAAOi+F,EAAWrQ,eAAeH,EAAWztF,MACtD,MAAM31B,EAAMkV,KAAKC,UAAUiuG,EAAWztF,MACtCt/B,KAAKmE,mCAAmC0hG,MAAal8F,KAEzD,GAAIojH,EAAWp9C,KAAM,CACjB2tD,EAAavQ,EAAWp9C,MACxBsrD,EAAUtrD,KAAO4tD,EAAWrQ,eAAeH,EAAWp9C,MACtD,MAAMhmE,EAAMkV,KAAKC,UAAUiuG,EAAWp9C,MACtC3vE,KAAKmE,mCAAmC0hG,MAAal8F,KAEzD,GAAIojH,EAAW9pH,KAAM,CACjB,MAAM80G,EAAW,GACjBgV,EAAW9pH,KAAKoH,QAAQmzH,IACpBzlB,EAASnyG,KAAK23H,EAAWrQ,eAAesQ,MAE5CvC,EAAUljB,SAAWA,EACrB,MAAMpuG,EAAMkV,KAAKC,UAAUiuG,EAAW9pH,MACtCjD,KAAKmE,mCAAmC0hG,MAAal8F,KAEzD,GAAIojH,EAAW0Q,YAAa,CACX1Q,EAAW0Q,YACxBxC,EAAUwC,YAAc1Q,EAAW0Q,YAEvC,GAAI1Q,EAAWrI,YAAa,CACxB,MAAMA,YAACA,GAAeqI,EACtBkO,EAAUvW,YAAcA,GAIhC,MAAMgZ,EAAY19H,KAAKssG,QAAQ,aACzBqxB,EAAW39H,KAAKssG,QAAQ,YACxBsxB,EAAc59H,KAAKssG,QAAQ,eAC3BuxB,EAAY79H,KAAKssG,QAAQ,aACzBxgB,EAAW9rF,KAAKssG,QAAQ,YACxBvgB,EAAY/rF,KAAKssG,QAAQ,aACzBwxB,EAAa99H,KAAKssG,QAAQ,YAC5BoxB,IAAYzC,EAAUyC,UAAYA,GAClCC,IAAW1C,EAAU0C,SAAWA,GAChCC,IAAc3C,EAAU0C,SAAWC,GACnCC,IAAY5C,EAAU4C,UAAYA,GAClC/xC,IAAWmvC,EAAUnvC,SAAWA,GAChCC,IAAYkvC,EAAUlvC,UAAYA,GAClC+xC,IAAa7C,EAAU8C,UAAW,IAG1C/9H,KAAKg+H,sBAAwB,SAASjR,GAClC,MAAMnkG,EAAO,IAAIuxE,IAAI,CAAC,QAAS,OAAQ,OAAQ,OAAQ,OACnD,gBAEJp8F,OAAO6qB,KAAKmkG,GAAY1iH,QAAQzL,IAC5B,IAAKgqB,EAAK1f,IAAItK,GAAM,CAChB,MAAMggB,EAAOC,KAAKC,UAAUiuG,GAC5B/kG,EAAApmB,QAAGK,IAAI,gBAAiB,2CACDrD,QAAUggB,SAK7C5e,KAAKk7H,wBAA0B,SAASD,EAAWhW,EAAIC,GACnD,MAAMtmH,EAAMqmH,EAAK,IAAMC,EACjB+Y,EAAcj+H,KAAKssG,QAAQ,cACjC,GAAI2xB,GAAeA,EAAY/+H,eAAeN,GAAM,CAChD,MAAMiuB,EAAO,CACTjvB,KAAM,aAAegB,EAAM,IAC3BmuH,WAAYkR,EAAYr/H,IAE5BoB,KAAKy4H,UAAU5rG,GACf7sB,KAAKm8H,oBAAoBlB,GACzBj7H,KAAK04H,SAAS7rG,KAKtB7sB,KAAKs8H,iBAAmB,SAASpjH,EAAQnB,EAAOsrF,GAC5C,MAAM1kG,EAASqB,KAAKssG,QAAQ,UAG5B,GAAI3tG,GAAUA,EAAOsL,MAAO,CACHtL,EAAOsL,MACfI,QAAQ4gC,IACjB,GAAIA,EAAY/xB,SAAWA,EAAQ,CAC/B,MAAMyW,EAAYsb,EAAYrtC,KAC1BqtC,EAAY/rC,eAAe,YAC3BmkG,EAAK3hG,UAAcupC,EAAY7rB,QAC/Bpf,KAAK83H,SAASoG,gBAAgBvuG,EAAW5X,MAUzD,GAAIpZ,GAAUA,EAAO65B,OAAQ,CACJ75B,EAAO65B,OACfnuB,QAAQ8zH,IACjB,GAAIA,EAAMjlH,SAAWA,EAAQ,CACzB,MAAMjD,EAACA,EAACC,EAAEA,EAAC0pD,OAAEA,GAAUu+D,EAEjB3lG,EAAS,IAAIW,EADNymC,EAAS,aAAe,WACL7nD,GAChCA,EAAMk+B,UAAUzd,EAAQviB,EAAGC,QAO3ClW,KAAKg6H,gBAAkB,SAASn0B,EAAUu4B,GAGtC,MAAMnG,EAAej4H,KAAKssG,QAAQ,gBAClC,GAAI2rB,EAAc,CACd,MACMoG,EADQtgI,OAAO6qB,KAAKqvG,GACH/xG,KAAKpf,GACjB,IAAIwoC,OAAOxoC,EAAO,KAAK+vB,KAAKgvE,IAEvC,GAAIw4B,EACA,OAAOpG,EAAaoG,GAK5B,MACMC,EADOvgI,OAAO6qB,KAAK5oB,KAAKi4H,cACR/xG,KAAKpf,GAAQ,IAAIwoC,OAAOxoC,EAAO,KAAK+vB,KAAKgvE,IAC/D,GAAIy4B,EACA,OAAOt+H,KAAKi4H,aAAaqG,GAI7B,GAAIF,GAAeA,EAAY/B,mBAAoB,CAC/C,MAAMA,mBAACA,GAAsB+B,EAEvBxxG,EADY,IAAI6pG,EAAA8H,aAAav+H,MACVrB,OAAO09H,EAAmB/T,IAC/C+T,EAAmBl3H,MACvB,IAAKynB,EAAQ,CACT,IAAIvoB,EAAM,iDACVA,GAAO,UAAYwa,KAAKC,UAAUs/G,GAClCp2G,EAAApmB,QAAGK,IAAI,UAAW,kBAAmBoC,GAEzC,OAAOuoB,EAGX,MAAO,IAGX5sB,KAAKk5F,eAAiB,SAASrsE,GAC3B7sB,KAAKw4F,OAAOoB,WAAW,iBAAkB/sE,EACrC,CAAC,OAAQ,SAAU,SACvB7sB,KAAKy4H,UAAU5rG,GAEf,MAAMsnE,EAAW,IAAI0O,EAAMmG,SAASn8E,EAAKjvB,MAGzC,GAFAu2F,EAAS8lC,YAAYj6H,KAAKq5H,eAEtBxsG,EAAKghF,SAAWhhF,EAAKqgF,KAAK3rG,OAAQ,CAClC,MAAM2rC,EAAMrgB,EAAKqgF,KAAK3rG,OACtBymB,EAAApmB,QAAGK,IAAI,gBAAiB,8CACSirC,SAAWrgB,EAAKghF,UAIrD,IAAK,IAAIxwG,EAAI,EAAGA,EAAIwvB,EAAKghF,OAAQxwG,IAAK,CAClC,MAAMmhI,EAAW3xG,EAAKqgF,KAAK7vG,GACrBohI,EAAez+H,KAAK0+H,mBAAmBF,GAC7CrqC,EAAS8Y,WAAWwxB,GACpBz+H,KAAK65H,WAAW2E,EAAUC,GAI9B,IAAK,IAAIphI,EAAI,EAAGA,EAAIwvB,EAAKihF,SAAUzwG,IAAK,CACpC,MAAMshI,EAAa9xG,EAAKmgF,OAAO3vG,GACzBuhI,EAAiB5+H,KAAKm5F,aAAawlC,GACzCxqC,EAAS8Y,WAAW2xB,GACpB5+H,KAAK65H,WAAW8E,EAAYC,GA2BhC,OAxBK5+H,KAAKo4H,cACFvrG,EAAKghF,OAAS,GAAqB,IAAhBhhF,EAAKghF,QAAgBhhF,EAAKihF,SAAW,KACpDjhF,EAAKovG,eAAiBpvG,EAAKovG,cAAc16H,OAAS,EAClDsrB,EAAKovG,cAAc5xH,QAAQmrC,IACH,IAAhBA,EAAKj0C,OAEL4yF,EAASwS,mBAAmBnxD,GAG5BxtB,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,uCAOZ+lB,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,2CAKhBjC,KAAK04H,SAAS7rG,GACPsnE,GAGXn0F,KAAK0+H,mBAAqB,SAAS7xG,GAC3B7sB,KAAKo4H,YACLp4H,KAAKw4F,OAAOoB,WAAW,qBAAsB/sE,EACzC,CAAC,OAAQ,YAGb7sB,KAAKw4F,OAAOoB,WAAW,qBACnB/sE,EAAM,CAAC,OAAQ,UAAW,IAAK,MAGvC,MAAMgyG,EAAWhyG,EAAKjvB,KACtBoC,KAAKy4H,UAAU5rG,GACf,MAAMqgF,EAAO,IAAIrK,EAAMkL,aAAa8wB,GAC9BC,EAAa,CAAE7oH,EAAG4W,EAAK5W,EAAGC,EAAG2W,EAAK3W,GAExClW,KAAKm8H,oBAAoB2C,GAEzB,IAAK,IAAIzhI,EAAI,EAAGA,EAAIwvB,EAAK82E,QAAStmG,IAAK,CACnC,IAAI0a,EAAQ,KACZ,GAAK/X,KAAKo4H,YAGL,CACD,MAAMvhH,EAAKgW,EAAKD,OAAOvvB,GACvB0a,EAAQ/X,KAAKm4H,SAASthH,QAJtBkB,EAAQ/X,KAAK83H,SAASiH,oBAAoBD,GAM9C5xB,EAAK8vB,SAASjlH,GAKlB,OAFA/X,KAAKg/H,sBAAsB9xB,EAAMrgF,GACjC7sB,KAAK04H,SAAS7rG,GACPqgF,GAKXltG,KAAKm5F,aAAe,SAAStsE,GACzB7sB,KAAKw4F,OAAOoB,WAAW,eAAgB/sE,EAAM,CAAC,OAAQ,YACtD7sB,KAAKy4H,UAAU5rG,GACf,MAAMmgF,EAAS,IAAInK,EAAMmL,eAAenhF,EAAKjvB,MAEvCqhI,EAAkBlhI,OAAO4kF,OAAO,GAAI91D,GAC1C7sB,KAAKm8H,oBAAoB8C,GACzBj/H,KAAKk/H,sBAAsBD,GAE3B,IAAK,IAAI5hI,EAAI,EAAGA,EAAIwvB,EAAK82E,QAAStmG,IAAK,CACnC,IAAI0a,EAAQ,KACZ,GAAK/X,KAAKo4H,YAOL,CACD,MAAMvhH,EAAKgW,EAAKD,OAAOvvB,GACvB0a,EAAQ/X,KAAKm4H,SAASthH,OATH,CACnBkB,EAAQ/X,KAAK83H,SAASqH,kBAAkBF,GACxC,MAAMpC,EAAW,IAAI3F,EAAA4F,gBAAgB,YACjCz/H,IAAOwvB,EAAK82E,QAAU,GACtBk5B,EAASE,qBAAqB1/H,EAAG0a,EAAOknH,GAOhDjyB,EAAOgwB,SAASjlH,GAKpB,OAFA/X,KAAKg/H,sBAAsBhyB,EAAQngF,GACnC7sB,KAAK04H,SAAS7rG,GACPmgF,GAGXhtG,KAAKk/H,sBAAwB,SAASryG,GAIlC,GAHK7G,OAAOC,UAAU4G,EAAKrU,aACvBqU,EAAKrU,UAAYxY,KAAKssG,QAAQ,eAE7BtmF,OAAOC,UAAU4G,EAAKnU,UAAW,CAClC,MAAMA,EAAW1Y,KAAKssG,QAAQ,YAC1B5zF,IACAmU,EAAKnU,SAAWA,KAK5B1Y,KAAKg/H,sBAAwB,SAAS54B,EAA0Bv5E,GACxDA,EAAK3tB,eAAe,iBACpBknG,EAAQ82B,YAAYrwG,EAAKswG,eAEpBtwG,EAAK3tB,eAAe,aACzBknG,EAAQ62B,oBAAoBpwG,EAAKm4E,WAKzChlG,KAAKo/H,WAAa,SAASvyG,GACvB7sB,KAAKw4F,OAAOoB,WAAW,aACnB/sE,EAAM,CAAC,OAAQ,cACnB7sB,KAAKy4H,UAAU5rG,GAEf,MAAMi+E,EAAO,IAAIjI,EAAMoG,KAAKp8E,EAAKjvB,MAGjC,GAFAktG,EAAKmvB,YAAYj6H,KAAKq5H,eAElBxsG,EAAKiiF,YAAcjiF,EAAKohF,QAAQ1sG,OAAQ,CACxC,MAAM2rC,EAAMrgB,EAAKohF,QAAQ1sG,OACzBymB,EAAApmB,QAAGK,IAAI,gBAAiB,6CACYirC,SAAWrgB,EAAKiiF,aAGxD,IAAK,IAAIzxG,EAAI,EAAGA,EAAIwvB,EAAKiiF,UAAWzxG,IAAK,CACrC,MAAMgiI,EAAQxyG,EAAKohF,QAAQ5wG,GACrB4wG,EAAUjuG,KAAKs/H,kBAAkBD,GACvCv0B,EAAKmC,WAAWgB,GAChBjuG,KAAK65H,WAAWwF,EAAOpxB,GAI3B,IAAKjuG,KAAKo4H,aACFvrG,EAAKiiF,UAAY,EACjB,GAAIjiF,EAAKovG,cACLpvG,EAAKovG,cAAc5xH,QAAQmrC,IACH,IAAhBA,EAAKj0C,OAGLupG,EAAKy0B,gBAAgB/pF,GAGrBxtB,EAAApmB,QAAGK,IAAI,gBAAiB,aACpB,2CAIX,CACD,IAAIoC,EAAM,4CACVA,gBAAoBwa,KAAKC,UAAU+N,KACnC7E,EAAApmB,QAAGK,IAAI,gBAAiB,aAAcoC,GAMlD,OADArE,KAAK04H,SAAS7rG,GACPi+E,GAIX9qG,KAAKs/H,kBAAoB,SAASzyG,GAC9B7sB,KAAKw4F,OAAOoB,WAAW,oBACnB/sE,EAAM,CAAC,OAAQ,YACnB7sB,KAAKy4H,UAAU5rG,GAEf,MAAMohF,EAAU,IAAIpL,EAAMkM,YAAYliF,EAAKjvB,MACrCioG,EAAW7lG,KAAKq5H,cACtBprB,EAAQgsB,YAAYp0B,GAEpB,MAAMoyB,EAAej4H,KAAKg6H,gBAAgBn0B,EAAUh5E,GAE9C2yG,EAAgB,CAClBvpH,EAAG4W,EAAK5W,GAAK,GAAIC,EAAG2W,EAAK3W,GAAK,GAC9BgsG,OAAQr1F,EAAKq1F,QAAU,EACvBnK,SAAUlrF,EAAK5pB,MACX,CAAC6D,GAASA,EAAKxI,OAAU,GAAK,GAAKuuB,EAAK82E,UAE5B,IAAhB92E,EAAKq1F,SAAesd,EAActd,OAAS,GAI/CliH,KAAKm8H,oBAAoBqD,GAEzB,IAAK,IAAIniI,EAAI,EAAGA,EAAIwvB,EAAK82E,QAAStmG,IAAK,CACnC,IAAI0a,EAAQ/X,KAAKo8H,oBAAoB/+H,EAAG46H,GAExC,GAAKlgH,EAWA,GAAIA,EAAM0nH,KAAM,EAEjB1nH,EADkB,IAAI0+G,EAAA8H,aAAav+H,MACjBrB,OAAOoZ,EAAMuwG,IAAKvwG,EAAM5S,QAEtC6iB,EAAApmB,QAAGK,IAAI,UAAW,oBACd,sCAEJkC,EAAM0xB,SACN71B,KAAKmE,MAAM,4BACP0a,KAAKC,UAAU/G,EAAM0nH,YAGxB5yG,EAAKwvG,oBAAsBxvG,EAAKluB,OACrCqB,KAAKs8H,iBAAiBj/H,EAAG0a,EAAOk2F,GAGhCjuG,KAAKmE,qBAAqB0hG,KAAYxoG,4BAzBtC,GAAK2C,KAAKo4H,YAIL,CACD,MAAMvhH,EAAKgW,EAAKD,OAAOvvB,GACvB0a,EAAQ/X,KAAKm4H,SAASthH,QALtBkB,EAAQ/X,KAAK83H,SAAS4H,gBAAgBriI,EAAGmiI,GACzCx/H,KAAKs8H,iBAAiBj/H,EAAG0a,EAAOk2F,GA2BxC,IAAKjuG,KAAKo4H,aACFrgH,EAAMisF,YAAa,CACnB,MAAM1sD,EAASv/B,EAAMksF,YACjB1wF,MAAMC,QAAQ8jC,EAAO23D,QACrB33D,EAAO23D,MAAM5kG,QAAQpH,IACjBgrG,EAAQ0xB,QAAQ18H,KAKhCgrG,EAAQ+uB,SAASjlH,GAkCrB,OA/BK/X,KAAKo4H,aACNnqB,EAAQguB,gBAGZj8H,KAAKg/H,sBAAsB/wB,EAASphF,GAGhCA,EAAK3tB,eAAe,UACpB2tB,EAAKoiF,MAAM5kG,QAAQpH,IACf,MAAMk/G,EAAU,IAAItf,EAAMgN,UAI1B,GAHAsS,EAAQprE,SAAS/2C,KAAKm4H,SAASl1H,EAAK8U,QACpCoqG,EAAQY,SAAS9/G,EAAKmoB,OACtB+2F,EAAQznF,aAAez3B,EAAK83B,aACvB93B,EAAK83B,YAAa,CACnB,MAAMJ,EAAS36B,KAAKq4H,UAAUp1H,EAAKi4B,YACnC,GAAIP,EACAwnF,EAAQjS,cAAcv1E,OAErB,CACD,MAAM9jB,EAAK5T,EAAKi4B,WAEVvxB,mBADM5L,OAAO6qB,KAAK5oB,KAAKq4H,aAE7BrwG,EAAApmB,QAAGK,IAAI,UAAW,iDACe4U,MAAOlN,MAGhDskG,EAAQ0xB,QAAQxd,KAIxBniH,KAAK04H,SAAS7rG,GACPohF,GAGXjuG,KAAK4/H,iBAAmB/yG,KACpB7sB,KAAKy4H,UAAU5rG,GACf,MAAMgzG,EAAa,IAAIh9B,EAAMqG,WAAWr8E,EAAKjvB,MACxCoC,KAAKo4H,aACNpwG,EAAApmB,QAAGK,IAAI,UAAW,mBACd,8CAER,IAAK,IAAI5E,EAAI,EAAGA,EAAIwvB,EAAK82E,QAAStmG,IAAK,CACnC,MAAMwZ,EAAKgW,EAAKD,OAAOvvB,GACjB0a,EAAQ/X,KAAKm4H,SAASthH,GACxBkB,EACA8nH,EAAW7C,SAASjlH,GAGpBiQ,EAAApmB,QAAGK,IAAI,UAAW,2CACU4U,oBAIpC,OADA7W,KAAK04H,SAAS7rG,GACPgzG,IAMX7/H,KAAK8/H,kBAAoB,SAASjzG,EAAMkzG,EAAUvnG,GAC9C,IAAI56B,EAAO,GACX,GAAiB,SAAbmiI,EACAniI,EAAO,OACHivB,EAAK6wG,WACkB,SAAnB7wG,EAAK6wG,YACL9/H,EAAO,iBAId,GAAiB,aAAbmiI,EAA0BniI,EAAO,gBACrC,GAAI2V,MAAMC,QAAQglB,GAAS,CAE5B56B,GADgB46B,EAAO,GAAGonC,SACV,aAAe,eAE9B,CAEDhiE,GADgB46B,EAAOonC,SACP,aAAe,WAEnC,OAAOhiE,GAIXoC,KAAKggI,gBAAkB,EAACjoH,EAAO8U,KAC3B,IAAKozG,EAAKC,GAAO,CAACrzG,EAAKszG,OAAQtzG,EAAKuzG,QAEpC,GADep4G,EAAApmB,QAAG6D,cAAc,CAACw6H,EAAKC,IAC1B,CACR,MAAMG,EAAetoH,EAAMuoH,mBAC3BL,EAAMI,EAAa1kH,OACnBukH,EAAMG,EAAarkH,OAGvB,IAAIlc,EAAOiY,EAAMyL,SAASiL,QAAQwxG,EAAKC,GACnCrvC,EAAW7oE,EAAApmB,QAAG2M,SAClB,KAAOzO,EAAKg2C,iBAAiB,CACzB,MAAMuqF,EAAetoH,EAAMuoH,mBAI3B,GAHAL,EAAMI,EAAa1kH,OACnBukH,EAAMG,EAAarkH,OACnBlc,EAAOiY,EAAMyL,SAASiL,QAAQwxG,EAAKC,KAC7BrvC,GAAY,EAAI,MAG1B,MAAO,CAACovC,EAAKC,KAGjBlgI,KAAKugI,eAAiB,EAACC,EAAYC,EAAaC,KAG5C,GAAIA,EAAWn/H,OAAS,EAAG,CACvB,MAAM4iG,EAAKs8B,EAAY9kH,OACjByoF,EAAKq8B,EAAYzkH,OASvB,OANIwkH,EAAW7yG,cAAc5N,QAAQ0gH,IAAgB,IAC5CD,EAAWtyG,cAAcuyG,EAAat8B,EAAIC,IAC3Cp8E,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,8BAGLy+H,EAEX,OAAOD,IAMXzgI,KAAK2gI,kBAAoB,EAACnrF,EAAM6tD,EAAMq0B,KAClC,MAAMx+G,EAASs8B,EAAKt8B,OACdjD,EAAIu/B,EAAK2qF,OACTjqH,EAAIs/B,EAAK4qF,OACTxiI,EAAO43C,EAAK53C,KAClBoC,KAAKmE,mCAAmCvG,MAASqY,KAAKC,KAEtD,MAAM0qH,EAAYv9B,EAAKD,UAAUxlG,EAAMsb,GACvC,GAAI0nH,EAAW,CAIX,IAAIF,EAAalrF,EAAKhd,QAAU,KAIhC,GAAIkoG,IAAe14G,EAAApmB,QAAG6D,cAAc,CAACi7H,EAAWhrF,YAAa,CACzD,MAAMmrF,EAAcH,EAAWhrF,UAE/B,GADAgrF,EAAaE,EAAUlrF,YAAYmrF,GAO/B7gI,KAAKmE,MAAM,2CANE,CACb,IAAIE,6BAAiCw8H,IACrCx8H,cAAkBwa,KAAKC,UAAU8hH,EAAUlrF,eAC3C1tB,EAAApmB,QAAGK,IAAI,gBAAiB,oBAAqBoC,IAOrD,GAAKq8H,GAGA,GAAsC,mBAA3BA,EAAWjoG,YAA4B,CACnD,MAAM7Z,EAAOC,KAAKC,UAAU4hH,GAC5B14G,EAAApmB,QAAGK,IAAI,gBAAiB,6DACqB2c,WAL7C8hH,EAAa1gI,KAAK8gI,sBAAsBz9B,EAAMu9B,GAUlD,IAAIG,EAAW,aACQ,SAAnB19B,EAAK7iG,UAAuBugI,EAAW,OACf,aAAnB19B,EAAK7iG,YAA2BugI,EAAW,YACpD,MAAMC,EAAa,IAAI7nG,EAAO4nG,EAAUrJ,EAAWkJ,GACnDlJ,EAAUzhF,UAAU+qF,EAAY/qH,EAAGC,GAInC,IACI8qH,EAAW7sE,QAAQusE,GAEvB,MAAO97G,GACHpgB,QAAQC,MAAMmgB,GAEd,IAAIvgB,gBADYwa,KAAKC,UAAU8hH,EAAW,KAAM,KAEhDv8H,sBAA0Bwa,KAAKC,UAAU4hH,KACzC14G,EAAApmB,QAAGK,IAAI,gBAAiB,2BACpBoC,QAGP,CACD,IAAIA,sBAA0Bwa,KAAKC,UAAU02B,KAC7CnxC,YAAgBwa,KAAKC,UAAUukF,KAC/Br7E,EAAApmB,QAAGK,IAAI,gBAAiB,8CACDoC,QAO/BrE,KAAK8gI,sBAAwB,EAACz9B,EAAMu9B,KAChC,IAAIF,EAAa,KAYjB,MAXuB,YAAnBr9B,EAAK7iG,UACLkgI,EAAa1gI,KAAKihI,yBAAyB59B,EAAMu9B,GAEzB,SAAnBv9B,EAAK7iG,UACVkgI,EAAa1gI,KAAKkhI,sBAAsB79B,EAAMu9B,GAEtB,aAAnBv9B,EAAK7iG,YACVR,KAAKmE,MAAM,0CACXu8H,EAAa79B,EAAMoC,eAAe27B,EAC9B,UAAW,SAAS,IAErBF,IAIX1gI,KAAKihI,yBAA2B,EAAC59B,EAAMu9B,KACnC5gI,KAAKmE,MAAM,+BACX,IAAIggG,EAAK,EACLC,EAAK,EACT,GAAIw8B,EAAU58B,YAAa,CACvB,MAAM1sD,EAASspF,EAAU38B,YACzB,GAAI3sD,EAAOitD,YACNJ,EAAIC,GAAM9sD,EAAOitD,gBAEjB,GAAIjtD,EAAO6pF,aACZ,OAAOnhI,KAAKkhI,sBAAsB79B,EAAMu9B,OAG3C,CACD,MAAMxT,EAAWwT,EAAUn9B,mBAC1BU,EAAIC,GAAMgpB,EAASxxG,QAExB,MAAM8kH,EAAa,IAAIvnG,EAAO,WAAYynG,GAE1C,OADAA,EAAU3qF,UAAUyqF,EAAYv8B,EAAIC,GAC7Bs8B,IAGX1gI,KAAKkhI,sBAAwB,EAAC79B,EAAMu9B,KAChC,IAAIF,EAAa,KACjB1gI,KAAKmE,MAAM,qCACX,IAAIi9H,EAAe,GAanB,GAZAp5G,EAAApmB,QAAG0P,aAAajH,QAAQiJ,IACpB,IAAKuvF,EAAM8C,mBAAmBi7B,EAAWttH,GAAM,CAC3C,MAAM+tH,EAAQx+B,EAAMoC,eAAe27B,EAC/B,UAAWttH,GACX+tH,EAAM9/H,OAAS,IACf6/H,EAAeA,EAAa/vH,OAAOgwH,OAOrB,KAH1BX,EAAaU,GAGE7/H,OAAc,CAEzB,MAAM6rH,EAAWwT,EAAUn9B,kBACrB69B,EAAQlU,EAASzxG,OACjB4lH,EAAQnU,EAASpxG,OACvB0kH,EAAa,IAAIvnG,EAAO,WAAYynG,GACpCA,EAAU3qF,UAAUyqF,EAAYY,EAAOC,GACvCb,EAAa,CAACA,GAEd1gI,KAAKmE,MAAM,6CAEf,OAAOu8H,IAGX1gI,KAAKwhI,oBAAsB,EAACzB,EAAUS,KAClC,GAAIr8H,EAAM0xB,SAAwB,SAAbkqG,EAAqB,CACtC,MAAM0B,EAAQjB,EAAW5I,iBACzB,IAAI5rF,EAAUntB,KAAKC,UAAU2iH,EAAM,GAAI,KAAM,GACzCA,EAAMlgI,OAAS,IACfyqC,GAAWntB,KAAKC,UAAU2iH,EAAMA,EAAMlgI,OAAS,GAAI,KAAM,IAE7DvB,KAAKmE,0BAA0B6nC,KAC/BhsC,KAAKmE,4BAA4Bs9H,EAAMlgI,aAK/CvB,KAAK65H,WAAa,SAAShtG,EAAM60G,GAC1B15G,EAAApmB,QAAG6D,cAAc,CAAConB,EAAKhW,MACxB6qH,EAAUhhE,MAAM7zC,EAAKhW,IAEzB7W,KAAKg4H,cAAc0J,EAAU5qH,SAAW4qH,GAI1C1hI,KAAK46H,aAAe,SAASpB,EAAOziE,EAAM9gD,EAAGC,IACtB,IAAI+gH,EAAA0K,eACZ/G,aAAapB,EAAOziE,EAAM9gD,EAAGC,KAchD/Y,EAAA06H,aAAa54H,UAAU28H,yBAA2B,SAC9C7kE,EAAMssC,EAAMx2E,GAEZ7sB,KAAKw4F,OAAOoB,WAAW,2BAA4B/sE,EAAM,CAAC,IAAK,MAC/D7sB,KAAKmE,MAAM,kCAEX,MAAM8R,EAACA,EAACC,EAAEA,GAAK2W,EAET6qG,EADO3gE,EAAKgkE,UAAU9kH,EAAGC,GACRxM,WACvB+tH,EAAsB5qG,EAAM6qG,EAAW,WAEN,mBAAtBr0B,EAAKu+B,cAEZ55G,EAAApmB,QAAGK,IAAI,gBAAiB,2BACpB,oCAGR,MAAM4kG,EAAYxD,EAAKu+B,eACvB,GAAI/6B,EAAUtlG,OAAS,EAAG,CACtB,IAAIk/H,EAAsB55B,EAAU,GACpC,MAAM25B,EAAoBC,EAAYhoG,cAChCsnG,EAAmB18B,EAAK7iG,UAE9BR,KAAKmE,MAAM,oCAEX,IAAIs9H,EAAQ,KACZ,GAAI1B,EAAStwG,MAAM,oBAAsB5C,EAAKs0G,aAAc,CAEpDh9H,EAAM0xB,UACN4rG,EAAQjB,EAAW5I,iBACnB53H,KAAKmE,6BAA6Bs9H,EAAMlgI,WAG5C,MAAMm/H,EAAgC1gI,KAAK8gI,sBAAsBz9B,EAC7Dm9B,GACJC,EAAczgI,KAAKugI,eAAeC,EAAYC,EAC1CC,GAGR,MAAMK,EAAW/gI,KAAK8/H,kBAAkBjzG,EAAMkzG,EAAUU,GAExDhJ,EAAsB5qG,EAAM6qG,EAAW,WACvC,MAAMsJ,EAAa,IAAI7nG,EAAO4nG,EAAUrJ,EAAW8I,IAC5CqB,EAAQC,GAAU9hI,KAAKggI,gBAAgBtI,EAAW7qG,GACzD,IACI6qG,EAAUzhF,UAAU+qF,EAAYa,EAAQC,GACxCd,EAAW7sE,QAAQssE,GAEvB,MAAO77G,GAEH,MADAoD,EAAApmB,QAAGsD,IAAI,eAAiB2Z,KAAKC,UAAU+N,IACjCjI,EAGV5kB,KAAKwhI,oBAAoBzB,EAAUS,QAElC,IAAK3zG,EAAK3tB,eAAe,mBAAoB,CAC9C,MAAMmF,qBAAyBg/F,EAAKg2B,iBACpCrxG,EAAApmB,QAAGK,IAAI,gBAAiB,8BACjBoC,8BAKX,GAAIwoB,EAAK3tB,eAAe,mBAAoB,CAClB2tB,EAAKk1G,gBACb13H,QAAQmrC,IAClBx1C,KAAK2gI,kBAAkBnrF,EAAM6tD,EAAMq0B,OAQ/Cv6H,EAAA06H,aAAa54H,UAAUkF,MAAQ,SAASE,GACpC,GAAIF,EAAM0xB,QAAS,CACf,IAAImsG,EAAQhiI,KAAKq5H,cACZ2I,IAAQA,EAAQ,SACrB79H,MAAU69H,MAAU39H,mVC54C5B,MAAA2jB,EAAAC,EAAAhrB,EAAA,IACA+yC,EAAA/yC,EAAA,GACAglI,EAAAhlI,EAAA,GAEAktB,EAAAiK,EAAAn3B,EAAA,IAEMgyB,EAAS+gB,EAAAvS,YAAYmO,YAwb3B,SAASs2F,EAAS99H,GACd4jB,EAAApmB,QAAGwlB,SAAShjB,GApbhBjH,EAAAglI,YAAA,cAAiCF,EAAA1tG,WAGtBlM,qBAAqBzC,EAAKkiE,EAAS4B,EAAWvkF,EAAO,IACxD,MAAMi9H,EAAS,IAAIj4G,EAAUs/D,iBAC7B24C,EAAO1hD,QAAQv7E,GACfi9H,EAAOC,aAAa34C,GACpB04C,EAAOz4C,cAAc7B,GACrBliE,EAAItF,IAAI8hH,GAKZ/5G,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIa,MAAOwS,EAAWC,GAC/Bv1B,KAAKy1B,cAAe,EAEpBz1B,KAAKsiI,YAAc,CACfC,OAAQviI,KAAKwiI,cAAgBxiI,KAAKwiI,cAAc3jI,KAAKmB,MACrDi+B,OAAQj+B,KAAKyiI,cAAgBziI,KAAKyiI,cAAc5jI,KAAKmB,MACrD0iI,OAAQ1iI,KAAK2iI,cAAgB3iI,KAAK2iI,cAAc9jI,KAAKmB,MACrD9B,IAAK8B,KAAK4iI,WAAa5iI,KAAK4iI,WAAW/jI,KAAKmB,MAC5C6iI,KAAM7iI,KAAK8iI,YAAc9iI,KAAK8iI,YAAYjkI,KAAKmB,MAC/C+iI,KAAM/iI,KAAKgjI,YAAchjI,KAAKgjI,YAAYnkI,KAAKmB,MAC/CijI,KAAMjjI,KAAKkjI,YAAcljI,KAAKkjI,YAAYrkI,KAAKmB,MAC/CmjI,OAAQnjI,KAAKojI,cAAgBpjI,KAAKojI,cAAcvkI,KAAKmB,MACrDqjI,KAAMrjI,KAAKsjI,YAActjI,KAAKsjI,YAAYzkI,KAAKmB,MAC/CujI,OAAQvjI,KAAKwjI,cAAgBxjI,KAAKwjI,cAAc3kI,KAAKmB,OAItDqoB,aAAazC,GAChB,GAAIA,EAAI1c,IAAI,aAAc,CACtB,MAAMu6H,EAAW79G,EAAI1nB,IAAI,aACzB8B,KAAK0jI,qBAAqB99G,EAAK69G,GAC/B79G,EAAI8T,OAAO+pG,GAEf,GAAI79G,EAAI1c,IAAI,kBAAmB,CAC3B,MAAMy6H,EAAY/9G,EAAI1nB,IAAI,kBAC1B8B,KAAK4jI,iBAAiBh+G,EAAK+9G,GAC3B/9G,EAAI8T,OAAOiqG,GAEf,GAAI/9G,EAAI1c,IAAI,oBAAqB,CAC7B,MAAMk5H,EAASx8G,EAAI1nB,IAAI,oBACvB8B,KAAK6jI,kBAAkBj+G,EAAKw8G,GAC5Bx8G,EAAI8T,OAAO0oG,IAKZ/5G,qBAAqBzC,EAAKQ,GAC7B,MAAMuiE,EAAQviE,EAAK09G,WACbC,EAAYp7C,EAAMzqF,IAAI,cAC5B,GAAI6lI,EAAUC,mBACV,OAEJ,MAAM18C,EAAey8C,EAAUE,kBACzBC,EAAY,IAAI/5G,EAAUu+D,MAChCw7C,EAAUC,WAAWJ,EAAUj7C,cAEH,IAAxBxB,EAAa/lF,QACbymB,EAAApmB,QAAGK,IAAI,cAAe,uDACc0mF,EAAMjnF,WAG9C4lF,EAAaj9E,QAAQ+U,IACjB,MAAMglH,EAAcrmI,OAAO4kF,OAAO,GAAIvjE,GACtCglH,EAAYl8C,aAAc,EAC1Bg8C,EAAU9pG,UAAUgqG,KAGxBL,EAAUr8C,UAAU9hE,GACpBs+G,EAAUG,SAAS,CAACzmI,KAAM+qF,EAAMjnF,UAAWmV,GAAI8xE,EAAM7xE,UACrDotH,EAAUI,SAASP,EAAUQ,YAC7B3+G,EAAItF,IAAI4jH,GACRlkI,KAAKwkI,mBAAmB5+G,EAAKs+G,GAK1B77G,mBAAmBzC,EAAKs+G,GAC3B,MAAM5pD,EAAW10D,EAAIlc,WACf+6H,EAAaP,EAAU/+E,MAAM,YAEnC,IAAI9gD,+BADc6/H,EAAUJ,WAAWlmI,QAEnC6mI,IACInqD,EAASxjE,UAAY2tH,EAAW5tH,IAChCxS,GAAO,+CACPrE,KAAK0kI,mBAAmBD,EAAYP,IAGpC7/H,GAAO,sDAGf69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAI5BgkB,iBAAiBzC,EAAKQ,GACzB,MAAMuiE,EAAQviE,EAAK09G,WACb38C,EAAUwB,EAAMzqF,IAAI,cAAc4qF,aAKxC,GAJeljE,EAAIwvF,QAAQ,SAEDlvF,KAAKy+G,GAASA,EAAM77C,eAAiB3B,GAEhDe,cAAe,CAC1B,MAAM67C,EAAYp7C,EAAMzqF,IAAI,cAEtB0mI,EAAWb,EAAUE,kBAAkB1iI,OAEvC41E,EAAY4sD,EAAUc,YAAcD,EACpChgD,EAAU,IAAIz6D,EAAU+sD,UAAUC,GACxCvxD,EAAItF,IAAIskE,GAGR5kF,KAAK8kI,gBAAgBl/G,EAAKm+G,QAG1B/7G,EAAApmB,QAAG4lB,WAAW,CAAC1nB,KAAM8lB,EAAI6I,UAAWpqB,IAAK,4BAK1CgkB,gBAAgBzC,EAAKQ,GACxB,GAAIA,EAAKqhE,YACL,GAAKrhE,EAAK2+G,oBAiBL,CACD,MAAM1gI,EAAM,iCACZ69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,YAnBJ,CAC3B+hB,EAAK4+G,mBAAkB,GACvB,MAAM59C,EAAShhE,EAAK6+G,YAGpB,GAAoB,SAAhB79C,EAAOrlF,KAAiB,CACxB,MAAMmjI,EAAa99C,EAAOxpF,KAEpBkJ,EAAOmoB,EAAO+b,WAAWk6F,GAC/B,GAAIp+H,EAAM,CACN,IAAIzC,KAASuhB,EAAIlkB,sBAAsBoF,EAAKpF,eAC5C2C,GAAO,qCACP69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAC/BuhB,EAAIne,WAAWgT,eAAeuT,QAAQlnB,MAWnDuhB,kBAAkBzC,EAAKw8G,GAC1B,MAAM58C,EAAa48C,EAAO+C,eACpBC,EAASx/G,EAAIwvF,QAAQ,SAI3B,GAA4C,mBAAjCp1G,KAAKsiI,YAAY98C,GACxB4/C,EAAO/6H,QAAQ65H,KAkR3B,SAAkC9B,EAAQ8B,GACtC,MAAMp8C,EAAUs6C,EAAOiD,gBACvB,OAAOnB,EAAUt7C,cAAcd,IAnRfw9C,CAAyBlD,EAAQ8B,IACjClkI,KAAKsiI,YAAY98C,GAAY5/D,EAAKw8G,EAAQ8B,SAIjD,CACD,MAAMt7G,EAAO7qB,OAAO6qB,KAAK5oB,KAAKsiI,aAC9Bt6G,EAAApmB,QAAGK,IAAI,cAAe,uCACCujF,2BAAoC58D,MAK5DP,cAAczC,EAAKw8G,EAAQ8B,GAC9B,MAAM/+H,EAAOi9H,EAAO3hD,UACdqH,EAAUs6C,EAAOiD,gBACjBttH,EAAQ+vE,EAAQoB,YAChB1D,EAAasC,EAAQy9C,gBACrB/uH,EAyPd,SAAqB0tH,EAAW1tH,GAG5B,OAFqB0tH,EAAUD,kBACD/9G,KAAK9hB,GAAOA,EAAIyS,KAAOL,EAAUM,SA3PzC0uH,CAAYtB,EAAWnsH,GAEzC,GAAmB,cAAfytE,GACA,GAAIrgF,EAAK49E,MAAO,CACZ/iF,KAAK0kI,mBAAmBluH,EAAW0tH,GACnC,IAAI7/H,KAASuhB,EAAIlkB,iCACjB2C,GAAO,wBACP69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,cAGlC,GAAmB,iBAAfmhF,EAA+B,CAEpCxlF,KAAK0kI,mBAAmBluH,EAAW0tH,GACnC,IAAI7/H,KAASuhB,EAAIlkB,sCACjB2C,GAAO,wBACP69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,SAIhCgkB,cAAczC,EAAKw8G,EAAQ8B,GAC9B,MACMuB,EADUrD,EAAOiD,gBACGn8C,YAEpB1yE,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAO4uH,EAAU3uH,SAChE9W,KAAK0kI,mBAAmBluH,EAAW0tH,GACnC,IAAI7/H,KAASuhB,EAAIlkB,4CACjB2C,gBAAoBohI,EAAUC,cAC9BxD,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAI5BgkB,cAAczC,EAAKw8G,EAAQ8B,GAC9B,MACMj6H,EADUm4H,EAAOiD,gBACDn8C,YAEhB1yE,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAO5M,EAAM6M,SAG5D9W,KAAK0kI,mBAAmBluH,EAAW0tH,GAEnC,IAAIyB,EAAY,GAChB,MAAMC,EAAQhgH,EAAIlc,WAAWm8H,gBACzBD,IACAD,EAAY,OAASC,EAAMlkI,WAG/B,IAAI2C,KAASuhB,EAAIlkB,0BAA0BuI,EAAMvI,aACjD2C,iBAAqBshI,0BACrBzD,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAG5BgkB,WAAWzC,EAAKw8G,EAAQ8B,GAC3B,MACMp9H,EADUs7H,EAAOiD,gBACFn8C,YAEf1yE,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAO/P,EAAKgQ,SAC3D9W,KAAK0kI,mBAAmBluH,EAAW0tH,GAEnC,IAAI7/H,KAASuhB,EAAIlkB,uBAAuBoF,EAAKpF,aAC7C2C,GAAO,wBACP69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAG5BgkB,YAAYzC,EAAKw8G,EAAQ8B,GAC5B1/H,QAAQU,IAAI,0BACZ,MAAMC,EAAOi9H,EAAO3hD,WACdx2E,MAACA,EAAKnD,KAAEA,GAAQ3B,EAEhBqR,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAO5M,EAAM6M,SAE5D9W,KAAK0kI,mBAAmBluH,EAAW0tH,GACnC,IAAI7/H,KAASuhB,EAAIlkB,uBAAuBoF,EAAKpF,aAC7C2C,SAAa4F,EAAMvI,gCACnBwgI,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAG5BgkB,YAAYzC,EAAKw8G,EAAQ8B,GAC5B,MACMnsH,EADaqqH,EAAOiD,gBACDn8C,YAEnB1yE,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAOkB,EAAMjB,SAC5D9W,KAAK0kI,mBAAmBluH,EAAW0tH,GAEnC,MAAM7/H,KAASuhB,EAAIlkB,oDACnBwgI,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAI5BgkB,YAAYzC,EAAKw8G,EAAQ8B,GAC5B,MAAM/+H,EAAOi9H,EAAO3hD,UACpB,GAAIt7E,GAAQA,EAAKtB,OAAQ,CACrB,MACMoG,EADam4H,EAAOiD,gBACDn8C,YACzBlpF,KAAK8lI,oBAAoB77H,EAAO9E,EAAKtB,QAErC,MACM2S,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAChCA,EAAIyS,KAAO5M,EAAM6M,SACrB9W,KAAK0kI,mBAAmBluH,EAAW0tH,GAEnC,IAAI7/H,KAASuhB,EAAIlkB,gDACjB2C,OAAW4F,EAAMvI,aACjBwgI,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,aAG/B2jB,EAAApmB,QAAGK,IAAI,cAAe,kDACkB4c,KAAKC,UAAU3Z,MAIxDkjB,cAAczC,EAAKw8G,EAAQ8B,GAC9B,MAAM/+H,EAAOi9H,EAAO3hD,UACpB,GAAIt7E,GAAQA,EAAKF,KAAM,CACnB,MAAMA,EAAOE,EAAKF,KAAK8gI,UACjB97H,EAAQ9E,EAAKqW,IACnBoK,EAAItF,IAAInb,EAAKF,KAAK0B,SAElB,MAAMq/H,EAAW/7H,EAAM6M,QAEjBN,EADe0tH,EAAUD,kBACA/9G,KAAK9hB,GAAOA,EAAIyS,KAAOmvH,GACtDhmI,KAAK0kI,mBAAmBluH,EAAW0tH,GAGnChC,EAAS,CAAC79H,OADK4F,EAAMvI,yBAAyBuD,IAC/BnF,KAAM8lB,EAAI6I,iBAGzBzG,EAAApmB,QAAGK,IAAI,cAAe,kDACgB4c,KAAKC,UAAU3Z,MAItDkjB,YAAYzC,EAAKw8G,EAAQ8B,GAC5B,MACM+B,EADa7D,EAAOiD,gBACIn8C,YACxB5B,EAAe48C,EAAUD,kBACzBztH,EAAY8wE,EAAaphE,KAAK9hB,GAChCA,EAAIyS,KAAOovH,EAAWnvH,SAC1B9W,KAAK0kI,mBAAmBluH,EAAW0tH,GAEnC,MAAMgC,EAAYD,EAAWE,YAAY,SACzC,GAAID,EAAW,CACX,MAAME,EAAWF,EAAU,GAC3B,GAAIE,EAASjkD,UAAYv8D,EAAIlc,WAAWoN,QAAS,CAE7C,MAAMuvH,EAAY/+C,EAAaphE,KAAK9hB,GAChCA,EAAIyS,KAAOuvH,EAASjkD,UAAY/9E,EAAI8jF,aAExCloF,KAAK0kI,mBAAmB2B,EAAWnC,OAElC,CACD,IAAI7/H,KAASuhB,EAAIlkB,iCACjB2C,MAAU+hI,EAAST,kCACnBzD,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,UAKpCgkB,cAAczC,EAAKw8G,EAAQ8B,GAC9B,MAAM58C,EAAe48C,EAAUD,kBACzBp7C,EAAau5C,EAAOiD,gBACpBiB,EAAez9C,EAAWK,YAC1Bq9C,EAAQD,EAAa5kI,UAE3B,IAAI8kI,GAAW,EACf,GAAIF,EAAap9H,IAAI,eAAgB,CACjC,MAAMu9H,EAAaH,EAAapoI,IAAI,eAC9BwoI,EAAYtE,EAAO3hD,UAAUx7E,KAEnC,GAAIyhI,EACA,GAAID,EAAWE,sBAAwBD,EAAUE,aAC7CJ,GAAW,MAEV,CACD,MAAMniI,KAASkiI,mCACfrE,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,aAG9B6/H,EAAUj7C,gBAAgBJ,KAM/B29C,EAHqBl/C,EAAan9E,OAAO/F,GACrCA,EAAIyS,KAAOyvH,EAAaxvH,SAEJkyE,OAAO,CAACn/E,EAAKzF,IAAQyF,GAAOzF,EAAI8jF,aACpD,IAIZ,GAAIs+C,EAAU,CACV,MAAMK,EAAkBv/C,EAAaphE,KAAK9hB,GACtCA,EAAIyS,KAAOyvH,EAAaxvH,SAEtBzS,KAASuhB,EAAIlkB,6BAA6B6kI,IAChDrE,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAC/BrE,KAAK0kI,mBAAmBmC,EAAiB3C,IAK1C77G,oBAAoBy+G,EAAQC,GAC/B,IACI,MAAMj/C,EAAUg/C,EAAO5oI,IAAI,eAC3B4pF,EAAQ6T,aAAaorC,GACrBj/C,EAAQk/C,gBAAe,GACvBl/C,EAAQtD,UAAUuiD,GAEtB,MAAOniH,GACHpgB,QAAQU,IAAI,YAAa4hI,GACzBtiI,QAAQU,IAAI0f,EAAEmhB,UAIf1d,mBAAmB7R,EAAW0tH,GACjC,MAAMt+G,EAAMs+G,EAAUhvD,YACtB,IAA8B,IAA1B1+D,EAAU0xE,YACV1xE,EAAU0xE,aAAc,MAEvB,CACD,IAAItpE,EAAO,cAAgBC,KAAKC,UAAUtI,GAC1CoI,GAAQ,gBAAkBC,KAAKC,UAAUolH,GACzCl8G,EAAApmB,QAAGK,IAAI,cAAe,qBAClB,oDAAsD2c,GAG9D,GAAIslH,EAAUh8C,cAAe,CACzB,IAAI7jF,KAASuhB,EAAIlkB,mCACjB2C,GAAO,4CACP69H,EAAS,CAACpiI,KAAM8lB,EAAI6I,UAAWpqB,QAC/BrE,KAAKinI,wBAAwBrhH,EAAKs+G,IAMnC77G,wBAAwBzC,EAAKs+G,GAChC,MAAM/8C,EAAU+8C,EAAUp7C,aACRljE,EAAIwvF,QAAQ,SACpB/qG,QAAQs6H,IACIA,EAAM57C,iBAAiB,YAC/B1+E,QAAQ68H,IACVA,EAAMr/C,aAAeV,IACrB+/C,EAAMh/C,aAAc,4KCzaxC,MAAAlgE,EAAAC,EAAAhrB,EAAA,IACAirB,EAAAD,EAAAhrB,EAAA,KAGaE,EAAAszG,KAAY,GAGzBtzG,EAAAszG,KAAK02B,KAAOj/G,EAAAtmB,QAAI05C,KAAO,GACvBn+C,EAAAszG,KAAK22B,KAAOl/G,EAAAtmB,QAAI25C,KAAO,GACvBp+C,EAAAszG,KAAK42B,KAAOn/G,EAAAtmB,QAAI45C,KAAO,GACvBr+C,EAAAszG,KAAK62B,KAAOp/G,EAAAtmB,QAAI65C,KAAO,GACvBt+C,EAAAszG,KAAK82B,KAAOr/G,EAAAtmB,QAAI85C,KAAO,GACvBv+C,EAAAszG,KAAK+2B,KAAOt/G,EAAAtmB,QAAI+5C,KAAO,GACvBx+C,EAAAszG,KAAKg3B,KAAOv/G,EAAAtmB,QAAIg6C,KAAO,GACvBz+C,EAAAszG,KAAKi3B,KAAOx/G,EAAAtmB,QAAIi6C,KAAO,GACvB1+C,EAAAszG,KAAKk3B,KAAOz/G,EAAAtmB,QAAIk6C,KAAO,GACvB3+C,EAAAszG,KAAKm3B,KAAO1/G,EAAAtmB,QAAIm6C,KAAO,GACvB5+C,EAAAszG,KAAKo3B,KAAO3/G,EAAAtmB,QAAIo6C,KAAO,GACvB7+C,EAAAszG,KAAKq3B,KAAO5/G,EAAAtmB,QAAIq6C,KAAO,GACvB9+C,EAAAszG,KAAKs3B,KAAO7/G,EAAAtmB,QAAIs6C,KAAO,GACvB/+C,EAAAszG,KAAKu3B,KAAO9/G,EAAAtmB,QAAIu6C,KAAO,GACvBh/C,EAAAszG,KAAKw3B,KAAO//G,EAAAtmB,QAAIw6C,KAAO,GACvBj/C,EAAAszG,KAAKy3B,KAAOhgH,EAAAtmB,QAAIy6C,KAAO,GACvBl/C,EAAAszG,KAAK03B,KAAOjgH,EAAAtmB,QAAI06C,KAAO,GACvBn/C,EAAAszG,KAAK23B,KAAOlgH,EAAAtmB,QAAI26C,KAAO,GACvBp/C,EAAAszG,KAAK43B,KAAOngH,EAAAtmB,QAAI46C,KAAO,GACvBr/C,EAAAszG,KAAK63B,KAAOpgH,EAAAtmB,QAAI66C,KAAO,GACvBt/C,EAAAszG,KAAK83B,KAAOrgH,EAAAtmB,QAAI86C,KAAO,GACvBv/C,EAAAszG,KAAK+3B,KAAOtgH,EAAAtmB,QAAI+6C,KAAO,GACvBx/C,EAAAszG,KAAKg4B,KAAOvgH,EAAAtmB,QAAIg7C,KAAO,GACvBz/C,EAAAszG,KAAKi4B,KAAOxgH,EAAAtmB,QAAIi7C,KAAO,GACvB1/C,EAAAszG,KAAKk4B,KAAOzgH,EAAAtmB,QAAIk7C,KAAO,GACvB3/C,EAAAszG,KAAKm4B,KAAO1gH,EAAAtmB,QAAIm7C,KAAO,GAGvB5/C,EAAAszG,KAAK7vD,SAAW,GAChBzjD,EAAAszG,KAAK5vD,UAAY,GACjB1jD,EAAAszG,KAAKo4B,MAAQ,GACb1rI,EAAAszG,KAAKq4B,MAAQ,GAGb3rI,EAAAszG,KAAKD,OAAS,CAEVu4B,WAAY,GAGZ1gH,UACIroB,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIg3B,QAAU,EACnChpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIi3B,SAAW,EACpCjpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIk3B,QAAU,EACnClpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIm3B,SAAW,EACpCnpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIo3B,QAAU,EACnCppI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIq3B,SAAW,EACpCrpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIs3B,QAAU,EACnCtpI,KAAK+oI,WAAW5rI,EAAAszG,KAAKuB,IAAIu3B,SAAW,EAEpCvpI,KAAK+oI,WAAW7gH,EAAAtmB,QAAIi5C,MAAQ,EAC5B76C,KAAK+oI,WAAW7gH,EAAAtmB,QAAIk5C,MAAQ,EAC5B96C,KAAK+oI,WAAW7gH,EAAAtmB,QAAI+4C,MAAQ,EAC5B36C,KAAK+oI,WAAW7gH,EAAAtmB,QAAI44C,MAAQ,EAC5Bx6C,KAAK+oI,WAAW7gH,EAAAtmB,QAAI24C,MAAQ,EAC5Bv6C,KAAK+oI,WAAW7gH,EAAAtmB,QAAI04C,MAAQ,EAC5Bt6C,KAAK+oI,WAAW7gH,EAAAtmB,QAAI64C,MAAQ,EAC5Bz6C,KAAK+oI,WAAW7gH,EAAAtmB,QAAIg5C,MAAQ,GAGhCvyB,cAAcqpF,GACV,OAAO1xG,KAAK+oI,WAAW7pI,eAAewyG,IAG1C83B,OAAQ93B,GAASA,IAASv0G,EAAAszG,KAAK43B,MAAQ32B,IAASv0G,EAAAszG,KAAK5vD,UACrD4oF,SAAU/3B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI/iG,OACpCy6H,YAAah4B,GACTA,IAASv0G,EAAAszG,KAAKuB,IAAI23B,iBAAmBj4B,IAASv0G,EAAAszG,KAAKuB,IAAI43B,cAE3DC,OAAQn4B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI1vF,KAClCwnH,aAAcp4B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI+3B,IACxCC,YAAat4B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIi4B,MACvCC,OAAQx4B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIm4B,KAClCC,OAAQ14B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIq4B,KAClCC,OAAQ54B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIjjG,KAClCw7H,aAAc74B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIw4B,MACxCC,OAAQ/4B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI04B,KAClCC,OAAQj5B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI44B,KAClCC,WAAYn5B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI84B,UACtC73B,aAAcvB,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI6B,KACxCX,aAAcxB,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI+B,KACxCg3B,OAAQr5B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIg5B,KAClCC,UAAWv5B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI7iG,IACrCsjG,SAAUf,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIk5B,OACpCt4B,YAAalB,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIm5B,WACvCC,aAAc15B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAImB,OACxCk4B,aAAc35B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIs5B,KACxCC,WAAY75B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAIw5B,MACtCC,aAAc/5B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI05B,QACxCC,eAAgBj6B,GAAQA,IAASv0G,EAAAszG,KAAKuB,IAAI45B,MAI1CvjH,QAAQqpF,EAAcz7F,EAAWC,GAC7B,GAAIlW,KAAK+oI,WAAW7pI,eAAewyG,GAAO,CACtC,MAAMx1E,EAAOhU,EAAAtmB,QAAIumB,KAAK,GAAGnoB,KAAK+oI,WAAWr3B,IAGzC,MAAO,CAFMz7F,EAAIimB,EAAK,GACThmB,EAAIgmB,EAAK,IAGrB,OAAIw1E,IAASv0G,EAAAszG,KAAK43B,KACZ,CAACpyH,EAAGC,GAGJ,MAKfmS,OAAOqpF,GACH,OAAI1xG,KAAK+oI,WAAW7pI,eAAewyG,GACxBxpF,EAAAtmB,QAAIumB,KAAK,GAAGnoB,KAAK+oI,WAAWr3B,IAE9B1xG,KAAKwpI,OAAO93B,GACV,CAAC,EAAG,GAER,MAIXrpF,aAAawjH,EAAOC,GAEhB,IAAIj4H,EAAKg4H,EACL/3H,EAAKg4H,EAOT,OANIv4H,MAAMC,QAAQq4H,KACdh4H,EAAKg4H,EAAM,GACX/3H,EAAK+3H,EAAM,IAEJ,IAAPh4H,IAAWA,GAAU3M,KAAKiR,IAAItE,IACvB,IAAPC,IAAWA,GAAU5M,KAAKiR,IAAIrE,IAC1BD,GACJ,KAAM,EACF,OAAQC,GACJ,KAAM,EAAG,OAAO3W,EAAAszG,KAAKuB,IAAIu3B,QACzB,KAAK,EAAG,OAAOpsI,EAAAszG,KAAKuB,IAAIs3B,OACxB,KAAK,EAAG,OAAOnsI,EAAAszG,KAAKuB,IAAIq3B,QACxB,QAASrhH,EAAApmB,QAAGK,IAAI,cAAe,sBACpB4R,KAAMC,mBAErB,MACJ,KAAK,EACD,OAAQA,GACJ,KAAM,EAAG,OAAO3W,EAAAszG,KAAKuB,IAAIg3B,OACzB,KAAK,EAAG,OAAO7rI,EAAAszG,KAAKuB,IAAI9iG,KACxB,KAAK,EAAG,OAAO/R,EAAAszG,KAAKuB,IAAIo3B,OACxB,QAASphH,EAAApmB,QAAGK,IAAI,cAAe,sBACpB4R,KAAMC,mBAErB,MACJ,KAAK,EACD,OAAQA,GACJ,KAAM,EAAG,OAAO3W,EAAAszG,KAAKuB,IAAIi3B,QACzB,KAAK,EAAG,OAAO9rI,EAAAszG,KAAKuB,IAAIk3B,OACxB,KAAK,EAAG,OAAO/rI,EAAAszG,KAAKuB,IAAIm3B,QACxB,QAASnhH,EAAApmB,QAAGK,IAAI,cAAe,sBACpB4R,KAAMC,mBAErB,MACJ,QAASkU,EAAApmB,QAAGK,IAAI,cAAe,sBACpB4R,KAAMC,mBAErB,OAAO,MAGXuU,qBAAqBqpF,GACjB,OAAQA,GACJ,KAAKv0G,EAAAszG,KAAKuB,IAAIu3B,QAAS,MAAO,KAC9B,KAAKpsI,EAAAszG,KAAKuB,IAAIs3B,OAAQ,MAAO,IAC7B,KAAKnsI,EAAAszG,KAAKuB,IAAIq3B,QAAS,MAAO,KAC9B,KAAKlsI,EAAAszG,KAAKuB,IAAIg3B,OAAQ,MAAO,IAC7B,KAAK7rI,EAAAszG,KAAKuB,IAAI9iG,KAAM,MAAO,OAC3B,KAAK/R,EAAAszG,KAAKuB,IAAIo3B,OAAQ,MAAO,IAC7B,KAAKjsI,EAAAszG,KAAKuB,IAAIi3B,QAAS,MAAO,KAC9B,KAAK9rI,EAAAszG,KAAKuB,IAAIk3B,OAAQ,MAAO,IAC7B,KAAK/rI,EAAAszG,KAAKuB,IAAIm3B,QAAS,MAAO,KAC9B,QAAS,MAAO,MAM5BhsI,EAAAszG,KAAKM,YAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IACvE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,KAET5zG,EAAAszG,KAAKs7B,WAAa5uI,EAAAszG,KAAKM,YAAYhxF,QAAQ,KAG3C5iB,EAAAszG,KAAKu7B,eAAiBt6B,KAClB,MAAMxyF,EAAQ/hB,EAAAszG,KAAKO,YAAYU,GAC/B,OAAOv0G,EAAAszG,KAAKM,YAAY7xF,KAG5B,MAAM+sH,EAAW,QACXC,EAAW,QAIjB/uI,EAAAszG,KAAK07B,kBAAoBC,KACrB,MAAMC,EAAalvI,EAAAszG,KAAKM,YAAYvkF,UAAU1mB,GAAOA,IAAQsmI,GAC7D,GAAIC,GAAc,EAAG,CACjB,GAAIA,GAAc,GAAKA,GAAc,EACjC,OAAOnkH,EAAAtmB,QAAIy4C,KAAOgyF,EAEjB,GAAIJ,EAASp1G,KAAKu1G,GAAY,CAC/B,MAAME,EAAYD,EAAalvI,EAAAszG,KAAKM,YAAYhxF,QAAQ,KACxD,OAAO5iB,EAAAszG,KAAK02B,KAAOmF,EAElB,GAAIJ,EAASr1G,KAAKu1G,GAAY,CAC/B,MAAME,EAAYD,EAAalvI,EAAAszG,KAAKM,YAAYhxF,QAAQ,KACxD,OAAOmI,EAAAtmB,QAAI05C,KAAOgxF,GAK1B,OAFAtkH,EAAApmB,QAAGK,IAAI,KAAM,0CACamqI,OAClB,IAKZjvI,EAAAszG,KAAKO,YAAc,CAACU,GACZA,GAAQxpF,EAAAtmB,QAAIy4C,MAAQq3D,GAAQxpF,EAAAtmB,QAAIk5C,KACzB42D,EAAOxpF,EAAAtmB,QAAIy4C,KAEbq3D,GAAQv0G,EAAAszG,KAAK02B,MAAQz1B,GAAQv0G,EAAAszG,KAAKm4B,KAChCl3B,EAAOv0G,EAAAszG,KAAK02B,KAAOhqI,EAAAszG,KAAKM,YAAYhxF,QAAQ,KAE9C2xF,GAAQxpF,EAAAtmB,QAAI05C,MAAQo2D,GAAQxpF,EAAAtmB,QAAIm7C,KAC9B20D,EAAOxpF,EAAAtmB,QAAI05C,KAAOn+C,EAAAszG,KAAKM,YAAYhxF,QAAQ,MAE9C,GAIZ5iB,EAAAszG,KAAK87B,UAAYC,IACNA,GAAWtkH,EAAAtmB,QAAIy4C,MAAQmyF,GAAWtkH,EAAAtmB,QAAIk5C,MAGjD39C,EAAAszG,KAAKuB,IAAM,GAGX70G,EAAAszG,KAAKuB,IAAIg3B,OAAS9gH,EAAAtmB,QAAIg7C,KAAO,GAC7Bz/C,EAAAszG,KAAKuB,IAAIi3B,QAAU/gH,EAAAtmB,QAAI85C,KAAO,GAC9Bv+C,EAAAszG,KAAKuB,IAAIk3B,OAAShhH,EAAAtmB,QAAI65C,KAAO,GAC7Bt+C,EAAAszG,KAAKuB,IAAIm3B,QAAUjhH,EAAAtmB,QAAI45C,KAAO,GAC9Br+C,EAAAszG,KAAKuB,IAAIo3B,OAASlhH,EAAAtmB,QAAIi7C,KAAO,GAC7B1/C,EAAAszG,KAAKuB,IAAIq3B,QAAUnhH,EAAAtmB,QAAIm7C,KAAO,GAC9B5/C,EAAAszG,KAAKuB,IAAIs3B,OAASphH,EAAAtmB,QAAI05C,KAAO,GAC7Bn+C,EAAAszG,KAAKuB,IAAIu3B,QAAUrhH,EAAAtmB,QAAI06C,KAAO,GAE9Bn/C,EAAAszG,KAAKuB,IAAI05B,QAAUvuI,EAAAszG,KAAKo3B,KACxB1qI,EAAAszG,KAAKuB,IAAI1vF,KAAO4F,EAAAtmB,QAAI45C,KACpBr+C,EAAAszG,KAAKuB,IAAIy6B,OAASvkH,EAAAtmB,QAAI65C,KACtBt+C,EAAAszG,KAAKuB,IAAIs5B,KAAOpjH,EAAAtmB,QAAIw6C,KAAO,GAC3Bj/C,EAAAszG,KAAKuB,IAAIi4B,MAAQ/hH,EAAAtmB,QAAI+5C,KAAO,GAC5Bx+C,EAAAszG,KAAKuB,IAAIm4B,KAAOjiH,EAAAtmB,QAAIg6C,KACpBz+C,EAAAszG,KAAKuB,IAAIq4B,KAAOltI,EAAAszG,KAAKg3B,KACrBtqI,EAAAszG,KAAKuB,IAAIjjG,KAAO5R,EAAAszG,KAAKm3B,KACrBzqI,EAAAszG,KAAKuB,IAAI04B,KAAOxiH,EAAAtmB,QAAIq6C,KAAO,GAC3B9+C,EAAAszG,KAAKuB,IAAI44B,KAAOztI,EAAAszG,KAAK22B,KACrBjqI,EAAAszG,KAAKuB,IAAI45B,MAAQ1jH,EAAAtmB,QAAI63C,SACrBt8C,EAAAszG,KAAKuB,IAAI6B,KAAO12G,EAAAszG,KAAKu3B,KACrB7qI,EAAAszG,KAAKuB,IAAI84B,UAAY5iH,EAAAtmB,QAAIi6C,KAAO,GAChC1+C,EAAAszG,KAAKuB,IAAIw4B,MAAQtiH,EAAAtmB,QAAIw6C,KACrBj/C,EAAAszG,KAAKuB,IAAI/iG,OAAS9R,EAAAszG,KAAK7vD,SACvBzjD,EAAAszG,KAAKuB,IAAIw5B,MAAQtjH,EAAAtmB,QAAIy6C,KAAO,GAC5Bl/C,EAAAszG,KAAKuB,IAAI+B,KAAO7rF,EAAAtmB,QAAIy6C,KAAO,GAC3Bl/C,EAAAszG,KAAKuB,IAAIC,UAAY90G,EAAAszG,KAAK03B,KAC1BhrI,EAAAszG,KAAKuB,IAAIg5B,KAAO9iH,EAAAtmB,QAAI26C,KACpBp/C,EAAAszG,KAAKuB,IAAI9iG,KAAOgZ,EAAAtmB,QAAI46C,KAAO,GAC3Br/C,EAAAszG,KAAKuB,IAAI7iG,IAAM+Y,EAAAtmB,QAAI26C,KAAO,GAC1Bp/C,EAAAszG,KAAKuB,IAAIk5B,OAAS/tI,EAAAszG,KAAK43B,KACvBlrI,EAAAszG,KAAKuB,IAAIm5B,WAAajjH,EAAAtmB,QAAI05C,KAC1Bn+C,EAAAszG,KAAKuB,IAAImB,OAASh2G,EAAAszG,KAAK63B,KACvBnrI,EAAAszG,KAAKuB,IAAI06B,YAAcvvI,EAAAszG,KAAKo3B,KAC5B1qI,EAAAszG,KAAKuB,IAAI23B,gBAAkBxsI,EAAAszG,KAAKq4B,MAChC3rI,EAAAszG,KAAKuB,IAAI43B,cAAgBzsI,EAAAszG,KAAKo4B,MAC9B1rI,EAAAszG,KAAKuB,IAAI+3B,IAAM7hH,EAAAtmB,QAAIk7C,KAAO,GAC1B3/C,EAAAszG,KAAKD,OAAOm8B,UAEZxvI,EAAAszG,KAAKuB,IAAIpB,UAAY1oF,EAAAtmB,QAAI23C,aAGzBp8C,EAAAszG,KAAKm8B,IAAM,GACXzvI,EAAAszG,KAAKm8B,IAAIC,SAAW3kH,EAAAtmB,QAAIk6C,KACxB3+C,EAAAszG,KAAKm8B,IAAIE,KAAO3vI,EAAAszG,KAAKuB,IAAIq4B,KACzBltI,EAAAszG,KAAKm8B,IAAIG,KAAO7kH,EAAAtmB,QAAIi6C,KACpB1+C,EAAAszG,KAAKm8B,IAAII,IAAM7vI,EAAAszG,KAAKk3B,KACpBxqI,EAAAszG,KAAKm8B,IAAIK,KAAO9vI,EAAAszG,KAAKq3B,KACrB3qI,EAAAszG,KAAKm8B,IAAI77E,IAAM5zD,EAAAszG,KAAKs3B,KACpB5qI,EAAAszG,KAAKm8B,IAAIM,MAAQhlH,EAAAtmB,QAAIs6C,KACrB/+C,EAAAszG,KAAKm8B,IAAIO,IAAMhwI,EAAAszG,KAAK83B,KAEpBprI,EAAAszG,KAAK28B,WAAaZ,KACd,IAAIjiI,GAAQ,EAKZ,OAJAxM,OAAO6qB,KAAKzrB,EAAAszG,KAAKuB,KAAK3nG,QAAQzL,IAC1B2L,EAAQA,GAASpN,EAAAszG,KAAKuB,IAAIpzG,KAAS4tI,IAEvCjiI,EAAQA,GAASpN,EAAAszG,KAAKD,OAAOgC,cAAcg6B,KAK/CrvI,EAAAszG,KAAKnuG,QAAUkqI,IACJ,IAAM3+F,OAAOggB,aAAa2+E,GAAW,wKC1ThD,MAAAxkH,EAAAC,EAAAhrB,EAAA,IAOMowI,EAAY,KAGlBlwI,EAAAuoH,UAAA,MAKIr9F,YAAYpe,GACJ+d,EAAApmB,QAAG6D,cAAc,CAACwE,KAClB+d,EAAApmB,QAAGK,IAAI,gBAAiB,cACpB,2BAERjC,KAAKgmH,OAAS/7G,EACdjK,KAAKq7F,MAAQ,KAGVhzE,SAASpe,GAAyBjK,KAAKgmH,OAAS/7G,EAChDoe,WAAuB,OAAOroB,KAAKgmH,OACnC39F,UAAmB,OAAOroB,KAAKq7F,MAC/BhzE,QAAQtmB,GAAqB/B,KAAKq7F,MAAQt5F,EAE1CsmB,YAAqB,OAAOglH,EAC5BhlH,eAAwB,MAAO,GAC/BA,cAAcne,GAA0B,OAAO,KAC/Cme,eAAene,GAA0B,OAAO,KAChDme,eAAepS,EAAGC,GAAa,OAAO,EACtCmS,YAAYpe,GAAiB,OAAO,EACpCoe,iBAA+B,MAAO,GACtCA,iBAA+B,MAAO,GAEtCA,iBAAiBjkB,GAGpB,OAFA4jB,EAAApmB,QAAGK,IAAI,YAAa,mBAChB,wCACG,KAGJomB,SACH,MAAO,CACHtmB,KAAM/B,KAAKq7F,qVC9CvB,MACMl3F,EADN8jB,EAAAhrB,EAAA,IACc2E,QAAI,aAElBomB,EAAAC,EAAAhrB,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAEAmgC,EAAAngC,EAAA,IACAotF,EAAAptF,EAAA,IAQMwrB,EAPNxrB,EAAA,GAOYqgB,OAAOC,SAcnB,IAAY+vH,EAbCnwI,EAAA07G,KAAY,GACzB17G,EAAA07G,KAAK00B,aAAe,GAKpBpwI,EAAA07G,KAAK20B,cAAgB,CACjBj0H,EAAG,cACHC,EAAG,iBACHC,EAAG,gBACHC,EAAG,eAGP,SAAY4zH,GACRA,IAAA,mBAAYA,IAAA,eAAMA,IAAA,eAAMA,IAAA,eAAMA,IAAA,2BADlC,CAAYA,EAAAnwI,EAAAmwI,WAAAnwI,EAAAmwI,SAAQ,KAGpBnwI,EAAA07G,KAAK6B,MAAQ4yB,EAEb,MAAMG,EAAe,KAErB,IAAYC,GAAZ,SAAYA,GACRA,IAAA,6BACAA,IAAA,mCACAA,IAAA,iCACAA,IAAA,6BAJJ,CAAYA,EAAAvwI,EAAAuwI,aAAAvwI,EAAAuwI,WAAU,KAOtB,IAAIC,EAAM,EAMV,MAAaC,EASTvlH,YAAYpe,GACRjK,KAAK6tI,SAAWJ,EAChBztI,KAAKiK,MAAQA,EACbjK,KAAKgjF,OAAS0qD,EAAWI,cACzB9tI,KAAK+B,KAAO,GACZ/B,KAAK+tI,SAAWT,EAASU,OAEzBhuI,KAAKiuI,UAAY,KAGd5lH,IAAIhkB,GACP,GAAIF,EAAM0xB,QAAS,CACf,IAAIq4G,GAAY,EAEhB,GADK/wI,EAAA07G,KAAK00B,eAAeW,GAAY,IAChCA,EAAW,CAEZA,EADgB,IAAI5+F,OAAOnyC,EAAA07G,KAAK00B,cACZ12G,KAAK72B,KAAKiK,MAAMvI,WAGxC,GAAIwsI,EAAW,CACX,MAAMC,EAAM,KAAKt+E,OAAO89E,GAClB/vI,EAAOoC,KAAKiK,MAAMvI,UAClBshF,EAuzCtB,SAAwBA,GACpB,OAAO7lF,EAAA07G,KAAKu1B,aAAaprD,GAxzCEqrD,CAAeruI,KAAKgjF,QAC7BsrD,MAAkBtuI,KAAKQ,cAAcwiF,IAC3Cx+E,QAAQU,OAAOipI,IAAMG,KAAe1wI,KAAQyG,OAKjDgkB,YAAY0lH,GACf/tI,KAAK+tI,SAAWA,EAGb1lH,cACH,OAAOroB,KAAK+tI,SAGT1lH,QAAQtmB,GACX/B,KAAK+B,KAAOA,EAGTsmB,UACH,OAAOroB,KAAK+B,KAGTsmB,WACH,OAA0B,OAAnBroB,KAAKiuI,UAGT5lH,WAAY,OAAOroB,KAAKiuI,UAExB5lH,WAGH,MAAM,IAAI3jB,MAAM,uBAGb2jB,qBACCroB,KAAKuuI,eACLvuI,KAAKs0B,IAAI,uBACTt0B,KAAKwuI,YAINnmH,qBACCroB,KAAKyuI,cACLzuI,KAAKs0B,IAAI,wBACTt0B,KAAKgjF,OAAS0qD,EAAWI,eAI1BzlH,UACH,GAAI9U,MAAMC,QAAQxT,KAAK6tI,UAAW,CAE9B,OADe7tI,KAAK6tI,SAAS,GAAG//F,UAGpC,OAAO9tC,KAAKgjF,OAGT36D,YACHroB,KAAKs0B,IAAI,oBACTt0B,KAAKgjF,OAAS0qD,EAAWgB,eAGtBrmH,UAAUjkB,GACTmP,MAAMC,QAAQxT,KAAK6tI,WACnB7tI,KAAK6tI,SAAS7tI,KAAK6tI,SAAStsI,OAAS,GAAGotI,UAAUvqI,GAInDikB,oBACDslH,EACF,IAAI3qD,EAAS0qD,EAAWkB,YAGxB,GAFA5uI,KAAKs0B,IAAI,4BAEL/gB,MAAMC,QAAQxT,KAAK6tI,UAuBlB,CACD,MAAMjwI,EAAOoC,KAAKiK,MAAMvI,UAClB2C,WAAerE,KAAK+B,gBAAgBnE,IAC1C,MAAM,IAAI8G,SAASL,gCAvBnB,GADArE,KAAK6uI,yBACD7uI,KAAK6tI,SAAStsI,OAAS,EAAG,CAC1B,MAAMutI,EAAU9uI,KAAK6tI,SAAS,IAC9B7qD,EAAS8rD,EAAQhhG,aAEF4/F,EAAWgB,gBAAkB1uI,KAAK6tI,SAAStsI,OAAS,EAE/DyhF,EAAS0qD,EAAWqB,YAEf/rD,IAAW0qD,EAAWkB,aAAeE,EAAQE,aAClDhvI,KAAK6tI,SAAS,GAAKiB,EAAQG,WAE3BjvI,KAAK6tI,SAAS,GAAGh0G,QAAQi1G,EAAQtuI,WACjCwiF,EAAS0qD,EAAWqB,kBAKxB/rD,EAAS0qD,EAAWgB,eAc5B,QALEf,EACF3tI,KAAKs0B,yCAAyC0uD,KAC1C7+E,EAAM0xB,SACN71B,KAAKs0B,wBAAwBt0B,KAAK6tI,SAASx4H,IAAI+xD,GAAKA,EAAE5mE,cAEnDwiF,EAGJ36D,yBACHroB,KAAK6tI,SAAW7tI,KAAK6tI,SAAS1jI,OAAOivG,IAChCA,EAAKlxB,gBAAkBkxB,EAAKq1B,aAI9BpmH,oBACC9U,MAAMC,QAAQxT,KAAK6tI,YACnB7tI,KAAK6tI,SAASxjI,QAAQ+uG,IAASA,EAAK81B,cACpClvI,KAAK6tI,SAAW,IAEpB7tI,KAAKs0B,IAAI,wBAINjM,qBAAqBtmB,GACxB,IAAI2rC,EAAW,EACf,GAAIn6B,MAAMC,QAAQxT,KAAK6tI,UAAW,CAC9B,IAAI3uH,EAAQlf,KAAK6tI,SAASrhH,UAAU46C,GAAKA,EAAErlE,OAASA,GACpD,KAAOmd,GAAS,GACZlf,KAAK6tI,SAAS3uH,GAAOgwH,YACrBlvI,KAAK6tI,SAASnhH,OAAOxN,EAAO,KAC1BwuB,EACFxuB,EAAQlf,KAAK6tI,SAASrhH,UAAU46C,GAAKA,EAAErlE,OAASA,GAGxD,OAAO2rC,EAGJrlB,cAAe,OAAOroB,KAAK6tI,SAG3BxlH,YAAYtmB,GACf,GAAIwR,MAAMC,QAAQxT,KAAK6tI,UAAW,CAC9B,GAAI9rI,EAAM,CAEN,OADc/B,KAAK6tI,SAASrhH,UAAU46C,GAAKA,EAAErlE,OAASA,IACtC,EAGhB,OAAO/B,KAAK6tI,SAAStsI,OAAS,EAGtC,OAAO,EAGJ8mB,WAAW+wF,GAKd,GAJK7lG,MAAMC,QAAQxT,KAAK6tI,YACpB7tI,KAAK6tI,SAAW,IAEpB7tI,KAAK6tI,SAASzoF,QAAQg0D,GAClBj1G,EAAM0xB,QAAS,CACf71B,KAAKs0B,qBAAqB8kF,EAAK54G,aAC/B,MAAM2uI,EAASnvI,KAAK6tI,SAASx4H,IAAI+xD,GAAKA,EAAE5mE,WACxCR,KAAKs0B,4BAA4B66G,MAIlC9mH,aACH,OAAOroB,KAAKgjF,SAAW0qD,EAAWI,cAG/BzlH,WACH,OAAOroB,KAAKgjF,SAAW0qD,EAAWqB,YAG/B1mH,YACH,OAAOroB,KAAKgjF,SAAW0qD,EAAWkB,YAG/BvmH,cACH,OAAOroB,KAAKgjF,SAAW0qD,EAAWgB,eAK/BrmH,cAAc+mH,GACjB,GAAI77H,MAAMC,QAAQxT,KAAK6tI,UAAW,CAC9B,MAAMz0B,EAAOp5G,KAAK6tI,SAAS3nH,KAAKkhD,GAAKA,EAAE5mE,YAAc4uI,GACrD,GAAIh2B,IAAUA,EAAKq1B,cAAgBr1B,EAAKlxB,cAKpC,OAJI/jF,EAAM0xB,UACN71B,KAAKs0B,eAAe86G,sBACpBpvI,KAAKs0B,yBAAyB8kF,EAAKp2B,YAEhC,EAGf,OAAO,GAnOf7lF,EAAAywI,WAsOAzwI,EAAA07G,KAAKnhF,KAAOk2G,EAKZ,MAAayB,UAAuBzB,EAKhCvlH,YAAYpe,EAAOqhB,GACf4L,MAAMjtB,GACNjK,KAAK65B,QAAQ,kBACb75B,KAAKy5E,KAAO,GACZz5E,KAAKsrB,GAAKA,EAIPjD,WACH,MAAOpS,EAAGC,GAAKlW,KAAKsrB,IACb25F,EAAIC,GAAM,CAACllH,KAAKiK,MAAM0R,OAAQ3b,KAAKiK,MAAM+R,QAChDhc,KAAKs0B,iBAAiB2wF,KAAMC,QAASjvG,KAAKC,KAC1C,MAAMb,EAAMrV,KAAKiK,MAAMP,WAAW8Z,SAC5Bi2D,EAAO4Q,EAAAzX,KAAKijB,qBAAqBxgF,EAAK4vG,EAAIC,EAAIjvG,EAAGC,GACvDlW,KAAKy5E,KAAOA,EACZz5E,KAAKgjF,OAAS0qD,EAAWqB,YACzB/uI,KAAKs0B,+BAA+Bt0B,KAAKy5E,KAAKl4E,UAI3C8mB,UAEH,OADAroB,KAAKsvI,qBACDtvI,KAAKy5E,KAAKl4E,OAAS,EACZvB,KAAKuvI,cAEhBvvI,KAAKs0B,IAAI,2CACTt0B,KAAKgjF,OAAS0qD,EAAWgB,eAClBhB,EAAWgB,gBAGfrmH,aACH,MAAMtQ,EAAQ/X,KAAKiK,MAAMP,YAClBu7G,EAAIC,GAAMllH,KAAKiK,MAAM2R,SACtB3F,EAACA,EAACC,EAAEA,GAAKlW,KAAKy5E,KAAK,IAClB+1D,EAAOC,GAAS,CAACx5H,EAAGC,GACrBpX,EAAIkB,KAAKy5E,KAAKl4E,OAGpB,GADAvB,KAAKs0B,8BAA8B2wF,KAAMC,QAASjvG,KAAKC,WAAWpX,MAC9DiZ,EAAMyL,SAASkyE,WAAW85C,EAAOC,GAAQ,CACzC,MAAM57H,EAAK3M,KAAKiR,IAAI8sG,EAAKhvG,GACnBnC,EAAK5M,KAAKiR,IAAI+sG,EAAKhvG,GAEzB,GAAIrC,GAAM,GAAKC,GAAM,EAAG,CACpB,MAAM+yG,EAAU,IAAI18F,EAAU2uD,SAAS02D,EAAOC,EAAO13H,GAGrD,OAFA/X,KAAKiK,MAAMqW,IAAIumG,GACf7mH,KAAKy5E,KAAKrnD,QACe,IAArBpyB,KAAKy5E,KAAKl4E,QACVvB,KAAKs0B,yCAAyCx1B,KAC9CkB,KAAKgjF,OAAS0qD,EAAWgB,eAClBhB,EAAWgB,iBAEtB1uI,KAAKs0B,qDAAqDx1B,KAC1DkB,KAAKgjF,OAAS0qD,EAAWqB,YAClBrB,EAAWqB,aAMlB,OAHA/uI,KAAKs0B,8DAA8Dx1B,KAEnEkB,KAAKgjF,OAAS0qD,EAAWkB,YAClBlB,EAAWkB,YAMtB,OAFA5uI,KAAKs0B,IAAI,8DACTt0B,KAAKgjF,OAAS0qD,EAAWkB,YAClBlB,EAAWkB,aAtE9BzxI,EAAAkyI,iBA4EAlyI,EAAA07G,KAAK62B,WAAaL,EAYlB,MAAaM,UAA2B/B,EAKpCvlH,YAAYpe,EAAOqJ,GACf4jB,MAAMjtB,GACNjK,KAAK65B,QAAQ,sBACb75B,KAAKsT,IAAMA,EAGR+U,WACHroB,KAAK6mB,QAAU,IACf7mB,KAAKgjF,OAAS0qD,EAAWqB,YAGtB1mH,UACHroB,KAAKsvI,qBACL,MAAMxwG,EAAQ9+B,KAAKiK,MAAMq5B,WACnBp5B,EAAY40B,EAAM22D,eAClB+jB,EAAY16E,EAAM26E,cAAcvvG,IAE/BslI,EAAOC,GAhCtB,SAAsBxlI,EAAOqJ,GACzB,MAAO2C,EAAGC,GAAKjM,EAAM2R,QACrB,MAAO,CAAC3F,EAAI3C,EAAI,GAAI4C,EAAI5C,EAAI,IA8BDs8H,CAAa5vI,KAAKiK,MAAOjK,KAAKsT,KAC/C+B,EAAMrV,KAAKiK,MAAMP,WAAW8Z,SAElC,GAAIg2F,EAAW,CACX,MAAO1hE,EAAIC,GAAM,CAACyhE,EAAU79F,OAAQ69F,EAAUx9F,QAC1C7X,EAAM0xB,SACN71B,KAAKs0B,sCAAsCwjB,KAAMC,KAErD/3C,KAAKgjF,OAAS0qD,EAAWgB,oBAExB,GAAIr5H,EAAImoG,YAAYgyB,EAAOC,GAC5BzvI,KAAKgjF,OAAS0qD,EAAWkB,YACrBzqI,EAAM0xB,SAAU71B,KAAKs0B,IAAI,6BAE5B,GAAqB,IAAjBt0B,KAAK6mB,QACV7mB,KAAKgjF,OAAS0qD,EAAWkB,YACrBzqI,EAAM0xB,SAAU71B,KAAKs0B,IAAI,wBAE5B,GAAIjf,EAAIqgF,WAAW85C,EAAOC,GAAQ,CACnC,MAAM13H,EAAQ/X,KAAKiK,MAAMP,WACnBm9G,EAAU,IAAI18F,EAAU2uD,SAAS02D,EAAOC,EAAO13H,GACrD/X,KAAKiK,MAAMqW,IAAIumG,GAEf,MAAMjpH,EAAOoC,KAAKiK,MAAMvI,UACpByC,EAAM0xB,SACN71B,KAAKs0B,cAAc12B,QAAW4xI,KAASC,KAM/C,QAFEzvI,KAAK6mB,QAEA7mB,KAAKgjF,QArDpB7lF,EAAAwyI,qBAyDAxyI,EAAA07G,KAAKg3B,eAAiBF,EAItB,MAAaG,UAAsBT,EAK/BhnH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,EAAO,CAAC,EAAG,IACjBjK,KAAK65B,QAAQ,iBACb75B,KAAKsrB,GAAKszD,EAAYhjE,QACtB5b,KAAK4+E,YAAcA,EACnB5+E,KAAKo2F,SAAW/L,EAAAzX,KAAKgjB,oBAIlBvtE,WACH,MAAMoxD,EAAOz5E,KAAK+vI,UAClB/vI,KAAKs0B,+BAA+BmlD,EAAKl4E,UACzCvB,KAAKy5E,KAAOA,EACZz5E,KAAKgjF,OAAS0qD,EAAWqB,YACzB/uI,KAAKs0B,+BAA+Bt0B,KAAKy5E,KAAKl4E,UAG3C8mB,UACH,MAAMhT,EAAMrV,KAAKiK,MAAMP,WAAW8Z,UAC3BvN,EAAGC,GAAKlW,KAAKsrB,IACb25F,EAAIC,GAAM,CAACllH,KAAKiK,MAAM0R,OAAQ3b,KAAKiK,MAAM+R,QAEhD,OADAhc,KAAKs0B,OAAOt0B,KAAKQ,aAAaykH,KAAMC,QAASjvG,KAAKC,KAC3Cm0E,EAAAzX,KAAKgjB,oBAAoBvgF,EAAK4vG,EAAIC,EAAIjvG,EAAGC,GAG7CmS,UACHroB,KAAKsvI,qBACL,MAAOU,EAAIC,GAAM,CAACjwI,KAAK4+E,YAAYjjE,OAAQ3b,KAAK4+E,YAAY5iE,SACrD/F,EAAGC,GAAKlW,KAAKsrB,GACdzX,EAAK3M,KAAKiR,IAAI63H,EAAK/5H,GACnBnC,EAAK5M,KAAKiR,IAAI83H,EAAK/5H,GAGzB,OAAIrC,EAAK,GAAKC,EAAK,GACf9T,KAAKuvI,aACLvvI,KAAKgjF,OAAS0qD,EAAWkB,YAClBlB,EAAWkB,aAEb5uI,KAAKy5E,KAAKl4E,OAAS,EACjBvB,KAAKuvI,cAEhBvvI,KAAKs0B,IAAI,2CACTt0B,KAAKgjF,OAAS0qD,EAAWgB,eAClBhB,EAAWgB,iBAhD1BvxI,EAAA2yI,gBAoDA3yI,EAAA07G,KAAKq3B,UAAYJ,EAIjB,MAAaK,UAA0BL,EAEnCznH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,EAAO20E,GACb5+E,KAAK65B,QAAQ,qBAGVxR,UACH,MAAMhT,EAAMrV,KAAKiK,MAAMP,WAAW8Z,UAC3BvN,EAAGC,GAAKlW,KAAKsrB,GACpB,OAAO++D,EAAAzX,KAAK4iB,oBAAoBx1F,KAAKiK,MAAOoL,EAAKY,EAAGC,IAV5D/Y,EAAAgzI,oBAcAhzI,EAAA07G,KAAKu3B,cAAgBD,EAGrB,MAAaE,UAAkBzC,EAM3BvlH,YAAYpe,EAAOqhB,EAAYlS,EAAO,GAClC8d,MAAMjtB,GACNjK,KAAK65B,QAAQ,aACb75B,KAAKoZ,KAAOA,EACZpZ,KAAKiW,EAAIqV,EAAG,GACZtrB,KAAKkW,EAAIoV,EAAG,GACZtrB,KAAK6tI,SAAW,GAGbxlH,WAEHroB,KAAKswI,wBAGFjoH,UAGH,GAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACfvwI,KAAK6tI,SAAStsI,OAAS,EAAG,CACRvB,KAAK6tI,SAAS,GAClBY,aACVzuI,KAAKswI,6BAITtwI,KAAKswI,wBAET,OAAOtwI,KAAKgjF,OAGT36D,wBAGH,MAAOxU,EAAIC,GAAMkU,EAAApmB,QAAGqa,QAAQ,CAACjc,KAAKiW,EAAGjW,KAAKkW,GAAIlW,KAAKiK,MAAM2R,UAErD/H,EAAK7T,KAAKoZ,MAAQtF,EAAK9T,KAAKoZ,OAC5BpZ,KAAKwwI,WAAW,IAAInB,EAAervI,KAAKiK,MAAO,CAACjK,KAAKiW,EAAGjW,KAAKkW,MAzCzE/Y,EAAAkzI,YAgDAlzI,EAAA07G,KAAKnpG,MAAQ2gI,EAIb,MAAaI,UAAmB7C,EAO5BvlH,YAAYpe,EAAOqrF,GACfp+D,MAAMjtB,GACNjK,KAAK65B,QAAQ,cAEb75B,KAAKs1F,OAASA,EACVt1F,KAAKs1F,OAAO/zF,OAAS,GACrBymB,EAAApmB,QAAGK,IAAI,aAAc,yDAC0BqzF,KAEnDt1F,KAAK0wI,UAAY,EACjB1wI,KAAK2wI,WAAar7C,EAAOt1F,KAAK0wI,WAC9B1wI,KAAK4wI,WAAa,EAIfvoH,WAEHroB,KAAKs0B,OAAOt0B,KAAKQ,wBACjBR,KAAK6wI,sBAGFxoH,UACHroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACnBvwI,KAAKs0B,4CAA4Ct0B,KAAKgjF,UACtD,MAAM8tD,EAAY9wI,KAAK6tI,SAAS,GAChC,GAAIiD,EAAU5oD,cACVloF,KAAK+wI,uBAEJ,GAAID,EAAUrC,YAAa,CAC5BzuI,KAAKs0B,OAAOt0B,KAAKQ,mCACjB,MAAOyV,EAAGC,GAAKlW,KAAKiK,MAAM2R,SACnBo1H,EAASC,GAAWjxI,KAAK2wI,WACnBtmD,EAAAzX,KAAKqjB,aAAahgF,EAAGC,EAAG86H,EAASC,IAElCjxI,KAAK4wI,WACb5wI,KAAK+wI,kBAGL/wI,KAAK6wI,2BAIT7wI,KAAKs0B,OAAOt0B,KAAKQ,2BAGrB,OAAOR,KAAKgjF,OAGT36D,oBACDroB,KAAK0wI,UACH1wI,KAAK0wI,WAAa1wI,KAAKs1F,OAAO/zF,SAC9BvB,KAAK0wI,UAAY,GAErB1wI,KAAK2wI,WAAa3wI,KAAKs1F,OAAOt1F,KAAK0wI,WACnC1wI,KAAKwwI,WAAW,IAAInB,EAAervI,KAAKiK,MAAOjK,KAAK2wI,aACpD3wI,KAAKs0B,OAAOt0B,KAAKQ,+BAA+BR,KAAK2wI,cACrD3wI,KAAKgjF,OAAS0qD,EAAWqB,YAGtB1mH,sBACHroB,KAAKwwI,WAAW,IAAInB,EAAervI,KAAKiK,MAAOjK,KAAK2wI,aACpD3wI,KAAKs0B,OAAOt0B,KAAKQ,gCAAgCR,KAAK2wI,cACtD3wI,KAAKgjF,OAAS0qD,EAAWqB,aAtEjC5xI,EAAAszI,aA0EAtzI,EAAA07G,KAAKjpG,OAAS6gI,EAKd,MAAaS,UAAwBtD,EAKjCvlH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,GACNjK,KAAK65B,QAAQ,mBACb75B,KAAK4+E,YAAcA,EAGhBv2D,WACHroB,KAAKs0B,IAAI,qBAGTt0B,KAAKmxI,gBACAnxI,KAAKkoF,gBACNloF,KAAKgjF,OAAS0qD,EAAWqB,aAI1B1mH,UACHroB,KAAKsvI,qBAIL,MAAMxwG,EAAQ9+B,KAAKiK,MAAMq5B,WACnBp5B,EAAY40B,EAAM22D,eAClB+jB,EAAY16E,EAAM26E,cAAcvvG,GACtC,GAAIsvG,EAAW,CACX,MAAMvvG,EAAQuvG,EAAUlvG,YAAY,GACpC,GAAItK,KAAK4+E,YAAY9nE,UAAY7M,EAAM6M,QAAS,CAC5C,GAAI9W,KAAKoxI,MAAO,CACZ,MAAMxzI,EAAOoC,KAAKiK,MAAMvI,UAClBijE,EAAM3kE,KAAK4+E,YAAYl9E,UACvB2vI,EAAUpnI,EAAMvI,UACtBsmB,EAAApmB,QAAGsD,OAAOtH,qBAAwB+mE,QAAU0sE,KAEhDrxI,KAAK4+E,YAAc30E,EACnB60B,EAAM89E,YAAY00B,gBAAgBrnI,GAClCjK,KAAKmxI,sBAITnxI,KAAKuxI,oBAKT,OAHKvxI,KAAKkoF,eAAkBloF,KAAKyuI,cAC7BzuI,KAAKgjF,OAAShjF,KAAKuwI,mBAEhBvwI,KAAKgjF,OAGT36D,YACHroB,KAAKs0B,IAAI,2CACTt0B,KAAKgjF,OAAS0qD,EAAWgB,eAGtBrmH,mBACH,MAAOyvB,EAAIC,GAAM/3C,KAAK4+E,YAAYhjE,SAC3BqpG,EAAIC,GAAMllH,KAAKiK,MAAM2R,QACtB5S,EAAOhJ,KAAKiK,MAAMxC,WAAW4B,eAAes/G,QAAQ,WAC1D,GAAI3/G,EAAM,CACN,MAAMS,EAAQue,EAAApmB,QAAG4H,gBAAgBxJ,KAAKiK,MAAOjB,GAE7C,GADgBqhF,EAAAzX,KAAKqjB,aAAan+C,EAAIC,EAAIktE,EAAIC,IAC/Bz7G,EAAQ,OAAO,EAGlC,OAAO,EAGJ4e,gBACH,MAAMyW,EAAQ9+B,KAAKiK,MAAMq5B,WAEzB,GADAtjC,KAAKuxI,qBACAvxI,KAAKkoF,cAAe,CACrB,MAAOpwC,EAAIC,GAAM/3C,KAAK4+E,YAAYhjE,QAIlC,GAAIkjB,EAAM4nF,eAAe5uE,EAAIC,GAAK,CAC9B/3C,KAAKwxI,oBACLxxI,KAAKs0B,IAAI,uBACT,MAAMm9G,EAAU,IAAIC,EAAa1xI,KAAKiK,MAAOjK,KAAK4+E,aAClD5+E,KAAKwwI,WAAWiB,QAEf,GAAIzxI,KAAK2xI,mBAAoB,CAC9B3xI,KAAKwxI,oBACLxxI,KAAKs0B,IAAI,yBACT,MAAM8kF,EAAO,IAAIw4B,EAAe5xI,KAAKiK,MAAOjK,KAAK4+E,aACjD5+E,KAAKwwI,WAAWp3B,QAGf,GAAIt6E,EAAM+yG,YAAY7xI,KAAK4+E,aAAc,CAC1C5+E,KAAKwxI,oBACLxxI,KAAKs0B,IAAI,qCAET,MAAM8kF,EAAO,IAAI+2B,EAAkBnwI,KAAKiK,MACpCjK,KAAK4+E,aACT5+E,KAAKwwI,WAAWp3B,OAGf,CACDp5G,KAAKwxI,oBACLxxI,KAAKs0B,IAAI,sCACT,MAAM8kF,EAAO,IAAI02B,EAAc9vI,KAAKiK,MAAOjK,KAAK4+E,aAChD5+E,KAAKwwI,WAAWp3B,KAMrB/wF,oBACH,MAAMypH,EAAa9xI,KAAK4+E,YAAY1gF,IAAI,UACxC,IAAK4zI,EAAY,CACb,MAAMlzH,EAAOC,KAAKC,UAAU9e,KAAK4+E,aAC3BmzD,EAAWlzH,KAAKC,UAAU9e,KAAKiK,OACrC+d,EAAApmB,QAAGsD,IAAI,aAAe6sI,GACtB/pH,EAAApmB,QAAGK,IAAI,kBAAmB,oBACtB,yBAA2B2c,GAG/BkzH,EAAWz7D,UACXr2E,KAAKwxI,oBACLxxI,KAAKgjF,OAAS0qD,EAAWgB,eACzB1uI,KAAKs0B,IAAI,kCAEHtM,EAAApmB,QAAGqjB,YAAYjlB,KAAKiK,MAAOjK,KAAK4+E,eACtC5+E,KAAKwxI,oBACLxxI,KAAKgjF,OAAS0qD,EAAWgB,eACzB1uI,KAAKs0B,IAAI,6CAhIrBn3B,EAAA+zI,kBAqIA/zI,EAAA07G,KAAKe,YAAcs3B,EAOnB,MAAaQ,UAAqB9D,EAG9BvlH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,GACNjK,KAAK65B,QAAQ,gBACb75B,KAAK4+E,YAAcA,EAGhBv2D,WACH,MAAMtQ,EAAQ/X,KAAKiK,MAAMP,YAClBu7G,EAAIC,GAAMllH,KAAK4+E,YAAYhjE,QAE5BwD,EADOrH,EAAMyL,SAASiL,QAAQw2F,EAAIC,GACpBpkH,QAAQ,UAAU,GAChC6lH,EAAa,IAAIx8F,EAAU0uD,OAAO,CAACz5D,WACzCpf,KAAKiK,MAAMqW,IAAIqmG,GACf3mH,KAAKs0B,OAAOt0B,KAAKQ,+BACjBR,KAAKgjF,OAAS0qD,EAAWqB,YAGtB1mH,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAS0qD,EAAWgB,eAClB1uI,KAAKgjF,QAvBpB7lF,EAAAu0I,eA+BA,MAAaE,UAAuBhE,EAGhCvlH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,GACNjK,KAAK65B,QAAQ,kBACb75B,KAAK4+E,YAAcA,EAGhBv2D,WACH,MACM2pH,EADQhyI,KAAKiK,MAAMxC,WACFwqI,kBAAkB,UAAW,EAAG,GAEvD,IAAKD,EACD,OAGJ,MAAOl6F,EAAIC,GAAM/3C,KAAK4+E,YAAYhjE,QAC5Bs2H,EAAQ,IAAI/nH,EAAU0a,QAAQ7kC,KAAKiK,OACzCioI,EAAMp4D,YAAYhiC,EAAIC,GACtBm6F,EAAMC,UAAUnqH,EAAApmB,QAAGuH,iBAAiBnJ,KAAKiK,MAAO+nI,IAChDE,EAAMt0H,UAAUoK,EAAApmB,QAAGwH,iBAAiBpJ,KAAKiK,MAAO+nI,IAChDE,EAAME,SAASpqH,EAAApmB,QAAG4H,gBAAgBxJ,KAAKiK,MAAO+nI,IAC9CA,EAAS1xH,IAAI4xH,GAEblyI,KAAKs0B,OAAOt0B,KAAKQ,gCACjBR,KAAKgjF,OAAS0qD,EAAWqB,YAGtB1mH,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAS0qD,EAAWgB,eAClB1uI,KAAKgjF,QAhCpB7lF,EAAAy0I,iBAwCA,MAAaS,UAAoBzE,EAO7BvlH,YAAYpe,EAAO06E,GAAM,GACrBztD,MAAMjtB,GACNjK,KAAK65B,QAAQ,eACb75B,KAAK2kF,IAAMA,EAGRt8D,WACHroB,KAAKsyI,oBACLtyI,KAAKs0B,+BAA+Bt0B,KAAK6T,MAAM7T,KAAK8T,MACpD9T,KAAKgjF,OAAS0qD,EAAWqB,YAItB1mH,YAAY2G,GACfhvB,KAAKuyI,UAAYvjH,EAGd3G,oBACH,IAAImqH,EAAW,GACV3+H,EAAIC,GAAM2U,EAAIqoE,aACnB,KAAO0hD,EAAW,IAAMxyI,KAAKyyI,cAAc5+H,EAAIC,KAC1CD,EAAIC,GAAM2U,EAAIqoE,eACb0hD,EAENxyI,KAAK6T,GAAKA,EACV7T,KAAK8T,GAAKA,EAKPuU,cAAcxU,EAAIC,GACrB,MAAOmxG,EAAIC,GAAMllH,KAAKiK,MAAM2R,QACtBid,EAAOosF,EAAKpxG,EACZilB,EAAOosF,EAAKpxG,EAClB,OAAO9T,KAAKiK,MAAMP,WAAW8Z,SAASkyE,WAAW78D,EAAMC,GAGpDzQ,aAAahT,EAAKY,EAAGC,GACxB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GAC5B,QAAIpW,EAAK41F,eACG51F,EAAK4yI,cAKdrqH,UACHroB,KAAKsvI,qBACLtvI,KAAK2yI,mBACH3yI,KAAK2kF,IACP,MAAOsgC,EAAIC,GAAMllH,KAAKiK,MAAM2R,QACtBid,EAAOosF,EAAKjlH,KAAK6T,GACjBilB,EAAOosF,EAAKllH,KAAK8T,GACjBiE,EAAQ/X,KAAKiK,MAAMP,WACnB2L,EAAM0C,EAAMyL,SAClB,GAAInO,EAAIwY,MAAMgL,EAAMC,GAChB,GAAI94B,KAAK4yI,aAAav9H,EAAKwjB,EAAMC,GAAO,CACpC,MAAM+tF,EAAU,IAAI18F,EAAU2uD,SAASjgD,EAAMC,EAAM/gB,GACnD/X,KAAKiK,MAAMqW,IAAIumG,QAET7mH,KAAK6yI,cAAcx9H,EAAKwjB,EAAMC,IACpC94B,KAAKsyI,yBAITtyI,KAAKsyI,oBAQT,OANiB,IAAbtyI,KAAK2kF,MACL3kF,KAAKgjF,OAAS0qD,EAAWgB,gBAEzB1uI,KAAKuyI,WACLvyI,KAAKuyI,UAAU15G,EAAMC,GAElB94B,KAAKgjF,OAGT36D,cAAchT,EAAKY,EAAGC,GACzB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GAC5B,GAAIpW,EAAKk2F,UAAW,CAChB,MAAMtyF,EAAO5D,EAAKmgB,YAAY,QAAQ,GACtC,GAAIvc,EAAKyjH,YAAa,CAClB,MAAM/gG,EAAO,IAAI+D,EAAU66D,SAG3B,OAFA5+D,EAAKghG,QAAQ1jH,GACb1D,KAAKiK,MAAMqW,IAAI8F,IACR,GAGf,OAAO,EAIJiC,iBACH,MAAMyqH,EAAYrqH,EAAI9C,aACtB,GAAImtH,GAAa,IAAM,CACnB,MAAMC,EAAQ/yI,KAAK8yI,UAAU9yI,KAAK6T,IAC9B7T,KAAKyyI,cAAcM,EAAO/yI,KAAK8T,MACjB,IAAVi/H,GAA2B,IAAZ/yI,KAAK8T,KACpB9T,KAAK6T,GAAKk/H,SAIjB,GAAID,GAAa,IAAM,CACxB,MAAME,EAAQhzI,KAAK8yI,UAAU9yI,KAAK8T,IAC9B9T,KAAKyyI,cAAczyI,KAAK6T,GAAIm/H,KACd,IAAVA,GAA2B,IAAZhzI,KAAK6T,KACpB7T,KAAK8T,GAAKk/H,KAMnB3qH,UAAU/U,GACb,OAAQA,GACJ,KAAK,EAAG,OAAOmV,EAAIjL,aAAa,EAAE,EAAG,IACrC,KAAK,EACL,KAAM,EAAG,OAAO,EAChB,QAAS,OAAOlK,GAIjB+U,YACHroB,KAAKgjF,OAAS0qD,EAAWgB,gBA/HjCvxI,EAAAk1I,cAmIAl1I,EAAA07G,KAAKrpG,QAAU6iI,EAKf,MAAaY,UAA0BrF,EAGnCvlH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,GACNjK,KAAK65B,QAAQ,qBACb75B,KAAK4+E,YAAcA,EAGhBv2D,WACH,MACMne,EADQlK,KAAKiK,MAAMq5B,WACDmyD,eAClBy9C,EAAa91G,EAAAyK,MAAMq8E,oBAAoBlkH,KAAKiK,MAAOC,GAEzD,IAAIipI,EAAY,KAYhB,GAXAD,EAAW7oI,QAAQvK,IACf,MAAM6D,EAAS7D,EAAKwK,YAChB3G,GACAA,EAAO0G,QAAQJ,IACPA,EAAM6M,UAAY9W,KAAK4+E,YAAY9nE,UACnCq8H,EAAYrzI,OAMxBqzI,EAAW,CACX,MAAM9rB,EAAQrnH,KAAKiK,MAAM0R,OACnB2rG,EAAQtnH,KAAKiK,MAAM+R,OACnBpI,EAAOoU,EAAApmB,QAAGsa,SAASlc,KAAKiK,MAAOjK,KAAK4+E,aACpC/lD,EAAOwuF,EAAQzzG,EAAK,GACpBklB,EAAOwuF,EAAQ1zG,EAAK,GACpBmE,EAAQ/X,KAAKiK,MAAMP,WAEnB0pI,EAAc,CAAC,CAACv6G,EAAMC,GAAO,CAACuuF,EAAOvuF,GAAO,CAACD,EAAMyuF,IACzD7+F,EAAIie,QAAQ0sG,GACZ,IAAK,IAAI/1I,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAO4Y,EAAGC,GAAKk9H,EAAY/1I,GAC3B,GAAI0a,EAAMyL,SAASkyE,WAAWz/E,EAAGC,GAAI,CACjC,MAAM2wG,EAAU,IAAI18F,EAAU2uD,SAAS7iE,EAAGC,EAAG6B,GAC7C/X,KAAKs0B,OAAOt0B,KAAKQ,wBAAwByV,KAAKC,KAC9ClW,KAAKiK,MAAMqW,IAAIumG,GACf7mH,KAAKgjF,OAAS0qD,EAAWgB,eACzB,OAIJ1uI,KAAKgjF,SAAW0qD,EAAWgB,iBAC3B1uI,KAAKgjF,OAAS0qD,EAAWkB,YACzB5uI,KAAKiuI,UAAY,IAAI9wI,EAAA07G,KAAKe,YAAY55G,KAAKiK,MACvCjK,KAAK4+E,mBAIb5+E,KAAKgjF,OAAS0qD,EAAWkB,YAI1BvmH,UAEH,OADAroB,KAAKsvI,qBACEtvI,KAAKgjF,QA5DpB7lF,EAAA81I,oBAgEA91I,EAAA07G,KAAKuB,cAAgB64B,EAIrB,MAAaI,UAAsBzF,EAK/BvlH,YAAYpe,EAAO25B,EAAO03E,GACtBpkF,MAAMjtB,GACNjK,KAAK65B,QAAQ,iBACb75B,KAAK4jC,MAAQA,EACb5jC,KAAKs7G,UAAYA,EAGdjzF,WACcroB,KAAK4jC,MAAM0vG,YAAYtzI,KAAKiK,MAAOjK,KAAKs7G,UACzDi4B,GACAvzI,KAAKgjF,OAAS0qD,EAAWgB,eAGtBrmH,UAEH,OADAroB,KAAKsvI,qBACEtvI,KAAKgjF,QApBpB7lF,EAAAk2I,gBAuBAl2I,EAAA07G,KAAKwC,UAAYg4B,EAKjB,MAAaG,UAAmB5F,EAG5BvlH,YAAYpe,EAAO20E,GACf1nD,MAAMjtB,GACNjK,KAAK65B,QAAQ,cACb75B,KAAK4+E,YAAcA,EAGhBv2D,WACCroB,KAAKiK,MAAMq5B,WAAWuuG,YAAY7xI,KAAK4+E,eACvC5+E,KAAKgjF,OAAS0qD,EAAWqB,aAI1B1mH,UACHroB,KAAKsvI,qBACL,MAAMxwG,EAAQ9+B,KAAKiK,MAAMq5B,YAClBrtB,EAAGC,GAAKlW,KAAKiK,MAAM2R,QAE1B,GAAIkjB,EAAM+yG,YAAY7xI,KAAK4+E,aAAc,CACrC,MAAO60D,EAAKC,GAAO1rH,EAAApmB,QAAGsa,SAASlc,KAAK4+E,YAAa5+E,KAAKiK,QAC/C0mB,EAAIC,GAAM5I,EAAApmB,QAAGgS,KAAK5T,KAAK4+E,YAAa5+E,KAAKiK,OAChD,IAAI4uB,EAAO5iB,EAAIw9H,EACX36G,EAAO5iB,EAAIw9H,EACf,MAAM37H,EAAQ/X,KAAK4+E,YAAYl1E,WACzB2L,EAAM0C,EAAMyL,SAElB,GAAItc,KAAKiR,IAAIwY,IAAO,GAAKzpB,KAAKiR,IAAIyY,IAAO,EAErC5wB,KAAKgjF,OAAS0qD,EAAWqB,iBAExB,GAAI15H,EAAIqgF,WAAW78D,EAAMC,GAAO,CACjC,MAAM+tF,EAAU,IAAI18F,EAAU2uD,SAASjgD,EAAMC,EAAM/gB,GACnD/X,KAAKiK,MAAMqW,IAAIumG,OAEd,CACD,MAAOmpB,EAAIC,GAAMjwI,KAAK4+E,YAAYhjE,QAC5B69D,EAAO4Q,EAAAzX,KAAKgjB,oBAAoBvgF,EAAKY,EAAGC,EAAG85H,EAAIC,GACrD,GAAIx2D,EAAKl4E,OAAS,EAEd,IADCs3B,EAAMC,GAAQ,CAAC2gD,EAAK,GAAGxjE,EAAGwjE,EAAK,GAAGvjE,GAC/Bb,EAAIqgF,WAAW78D,EAAMC,GAAO,CAC5B,MAAM+tF,EAAU,IAAI18F,EAAU2uD,SAC1BjgD,EAAMC,EAAM/gB,GAChB/X,KAAKiK,MAAMqW,IAAIumG,QAGf7mH,KAAKgjF,OAAS0qD,EAAWkB,iBAI7B5uI,KAAKgjF,OAAS0qD,EAAWkB,kBAKjC5uI,KAAKgjF,OAAS0qD,EAAWkB,YAE7B,OAAO5uI,KAAKgjF,QA1DpB7lF,EAAAq2I,aA8DAr2I,EAAA07G,KAAK86B,OAASH,EAGd,MAAaI,UAAoBhG,EAG7BvlH,YAAYpe,EAAO4pI,GACf38G,MAAMjtB,GACNjK,KAAK65B,QAAQ,eACb75B,KAAK6zI,WAAaA,EAGfxrH,WAGH,MAAMyrH,EAAS9zI,KAAK6zI,WAAW/8H,QAEzB5M,EADQlK,KAAKiK,MAAMq5B,WACDmyD,eAGxB,IAAI09C,EAAY,KAWhB,GAVAjpI,EAAUG,QAAQvK,IACd,GAAIA,EAAKwiG,WAAY,CACHxiG,EAAK4a,WACAwL,KAAK7oB,GAAKA,EAAEyZ,UAAYg9H,KAEvCX,EAAYrzI,MAKpBqzI,EAAW,CACX,MAAOl9H,EAAGC,GAAKlW,KAAKiK,MAAM2R,SACnBm4H,EAAIC,GAAMb,EAAUv3H,QAE3B,GAAI3F,IAAM89H,GAAM79H,IAAM89H,EAAI,CACtB,MAAMz9F,EAAS,IAAIpsB,EAAUqsB,OAC7Bx2C,KAAKiK,MAAMqW,IAAIi2B,GACfv2C,KAAKgjF,OAAS0qD,EAAWgB,mBAExB,CACD,MAAMt1B,EAAO,IAAIi2B,EAAervI,KAAKiK,MAAO,CAAC8pI,EAAIC,IACjDh0I,KAAKwxI,oBACLxxI,KAAKwwI,WAAWp3B,GAChBp5G,KAAKgjF,OAAShjF,KAAKuwI,wBAIvBvwI,KAAKgjF,OAAS0qD,EAAWkB,YAI1BvmH,UAKH,OAJAroB,KAAKsvI,qBACDtvI,KAAKi0I,gBACLj0I,KAAKgjF,OAAShjF,KAAKuwI,mBAEhBvwI,KAAKgjF,QAtDpB7lF,EAAAy2I,cA0DAz2I,EAAA07G,KAAKq7B,QAAUN,EAIf,MAAaO,UAAmBvG,EAE5BvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,cAGVxR,WACHroB,KAAKgjF,OAAS0qD,EAAWqB,YAGtB1mH,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,QAdpB7lF,EAAAg3I,aAkBAh3I,EAAA07G,KAAKkC,OAASo5B,EAGd,MAAaC,UAAuBxG,EAKhCvlH,YAAYpe,EAAOgM,EAAGC,GAClBghB,MAAMjtB,GACNjK,KAAK65B,QAAQ,kBACb75B,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,EACTlW,KAAKq0I,YAAa,EAClBr0I,KAAK6tI,SAAW,GAGbxlH,WACHroB,KAAKgjF,OAAS0qD,EAAWqB,YAEzB,MAAMjvI,EAAOE,KAAKiK,MAAMwkB,UACxB,GAAI3uB,EAAKw0I,UAIL,GAAItsH,EAAApmB,QAAG8jB,UAAU,IACb6uH,EAAgBv0I,KAAKiK,YAEpB,GAAKjK,KAAKq0I,WAMLv0I,EAAKwiG,eANY,CACvB,MAAMkyC,EAAO,IAAIrqH,EAAUuwD,cAC3B85D,EAAK75D,OAAO,CAACn/D,IAAKxb,KAAKiK,MACnBlI,KAAM,QAAS0yI,MAAO,qBAC1Bz0I,KAAKiK,MAAMqW,IAAIk0H,OAMlB,CAED,MAAMp7B,EAAO,IAAIi2B,EAAervI,KAAKiK,MAAO,CAACjK,KAAKiW,EAAGjW,KAAKkW,IAE1DlW,KAAKwwI,WAAWp3B,GAChBp5G,KAAKgjF,OAAShjF,KAAKuwI,mBAIpBloH,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,QA/CpB7lF,EAAAi3I,iBAmDAj3I,EAAA07G,KAAK32B,WAAakyD,EAGlB,MAAaM,UAAmB9G,EAM5BvlH,YAAYpe,EAAOgM,EAAGC,EAAGkD,GACrB8d,MAAMjtB,GACNjK,KAAK65B,QAAQ,cACb75B,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,EACTlW,KAAK20I,QAAUv7H,EACfpZ,KAAK6tI,SAAW,GAChB7tI,KAAK40I,eAAiBnsH,EAAIM,cAAc,IAAK,KAG1CV,WACHroB,KAAKgjF,OAAS0qD,EAAWqB,YACzB,MAAMjvI,EAAOE,KAAKiK,MAAMwkB,UAExB,GADAzuB,KAAK40I,iBACgC,eAAjC90I,EAAKS,cAAcC,UACnB,GAAIwnB,EAAApmB,QAAG8jB,UAAU,KAAO,CACpB,MAAM8uH,EAAO,IAAIrqH,EAAUuwD,cAC3B85D,EAAK75D,OAAO,CAACn/D,IAAKxb,KAAKiK,MACnBlI,KAAM,QAAS0yI,MAAO,qBAC1Bz0I,KAAKiK,MAAMqW,IAAIk0H,QAGfD,EAAgBv0I,KAAKiK,YAGxB,GAAI+d,EAAApmB,QAAGua,YAAYnc,KAAK20I,QAAS,CAAC30I,KAAKiW,EAAGjW,KAAKkW,GAAIlW,KAAKiK,OACzDsqI,EAAgBv0I,KAAKiK,YAEpB,GAAIjK,KAAK40I,gBAAkB,EAAG,CAC/B,MAAMx7B,EAAO,IAAIi2B,EAAervI,KAAKiK,MAAO,CAACjK,KAAKiW,EAAGjW,KAAKkW,IAC1DlW,KAAKwwI,WAAWp3B,GAChBp5G,KAAKgjF,OAAShjF,KAAKuwI,kBACnBvwI,KAAK40I,eAAiBnsH,EAAIM,cAAc,IAAK,UAI7CwrH,EAAgBv0I,KAAKiK,OAItBoe,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,QAOpB,SAASuxD,EAAgBtqI,GACrB,MAAM8N,EAAQ9N,EAAMP,WACd2L,EAAM0C,EAAMyL,SAElB,IAAIlQ,EAAMmV,EAAIqoE,aACVxlE,EAAKtD,EAAApmB,QAAG2Z,aAAajI,EAAKrJ,GAC1B4qI,EAAQ,GACZ,MAAQx/H,EAAIwY,MAAMvC,EAAG,GAAIA,EAAG,MACxBhY,EAAMmV,EAAIqoE,aACVxlE,EAAKtD,EAAApmB,QAAG2Z,aAAajI,EAAKrJ,GACV,KAAV4qI,KAEV,GAAIA,EAAQ,EAAG,CACX,MAAMhuB,EAAU,IAAI18F,EAAU2uD,SAASxtD,EAAG,GAAIA,EAAG,GAAIvT,GACrD9N,EAAMqW,IAAIumG,IAtElB1pH,EAAAu3I,aAqDAv3I,EAAA07G,KAAKuD,OAASs4B,EAqBdv3I,EAAA07G,KAAK07B,gBAAkBA,EAUvBp3I,EAAA07G,KAAKi8B,YARL,SAAqB7qI,EAAsBnK,GACvC,MAAMwrB,EAAKxrB,EAAK8b,QACV7D,EAAQ9N,EAAMP,WACpB,GAAIqO,EAAMyL,SAASkyE,WAAWpqE,EAAG,GAAIA,EAAG,IAAK,CACzC,MAAMu7F,EAAU,IAAI18F,EAAU2uD,SAASxtD,EAAG,GAAIA,EAAG,GAAIvT,GACrD9N,EAAMqW,IAAIumG,KAOlB,MAAakuB,EAGT1sH,YAAY+wF,GACRp5G,KAAKo5G,KAAOA,GAJpBj8G,EAAA43I,cAQA53I,EAAA07G,KAAKm8B,QAAUD,EAEf,MAAaE,UAAwBrH,EAEjCvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,mBAGVxR,WACHroB,KAAKk1I,qBAGF7sH,UAEH,OADAroB,KAAKsvI,qBACE5B,EAAWgB,eAGfrmH,qBACH,MAAMyW,EAAQ9+B,KAAKiK,MAAMq5B,WACnBq5E,EAAiB79E,EAAM89E,YACvBx5E,EAAUu5E,EAAOw4B,iBACjBjrI,EAAY40B,EAAM22D,eAElBonB,EADa/9E,EAAM49E,eAAexyG,GACTI,YAAY,GAErC8qI,EAAU,IAAIjrH,EAAUuwD,cACxBr2E,EAAM,CAACtC,KAAM,UAAWqhC,UAAS5nB,IAAKxb,KAAKiK,OACjDmrI,EAAQz6D,OAAOt2E,GAEfw4G,EAAYv8F,IAAI80H,GAChBz4B,EAAO04B,qBAAqBx4B,IA7BpC1/G,EAAA83I,kBAiCA93I,EAAA07G,KAAKkE,YAAck4B,8UC72CnB,MAAAjtH,EAAAC,EAAAhrB,EAAA,IACAszG,EAAAtzG,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAEAogB,EAAApgB,EAAA,GAEAqgC,EAAArgC,EAAA,IACA+yC,EAAA/yC,EAAA,GACAmgC,EAAAngC,EAAA,IACAm3E,EAAAn3E,EAAA,GACAotF,EAAAptF,EAAA,IACAq4I,EAAAr4I,EAAA,IAKMwrB,EAAMpL,EAAAC,OAAOC,UACbizF,OAACA,GAAUD,EAAAE,KAEX9xG,EAASwrB,EAAUxrB,OAKZxB,EAAAsmC,MAAa,GA4B1BtmC,EAAAsmC,MAAM8xG,gBATkB,EAACtrI,EAAOuR,KAC5B,MAAMy7D,EAAWz7D,EAAItd,IAAI,cAAcoe,cACjC6B,EAAS,IAAImf,EAAAwE,KAAK,EAAGm1C,EAAU/vE,KAAKC,KAAK8vE,EAAW,IAC1D,IAAI7+D,EAAO,IAAO6+D,EACd7+D,GAAQ,KAAMA,EAAO,IACzB,MACMusE,EADS,IAAIrnD,EAAAwE,KAAK,EAAGm1C,EAAW,EAAG/vE,KAAKC,KAAK8vE,EAAW,IAC3CQ,OACnB+9D,EAAYvrI,EAAOuR,EAAKmpE,EAAKxmE,EAAQ/F,KAIzC,MAAMo9H,EAAc,CAACvrI,EAAOuR,EAAKmpE,EAAKxmE,EAAQ/F,KAC1C,MAAMspB,EAAa,IAAIvX,EAAUwX,OACjCD,EAAWG,aAAa1jB,GAExB,MAAM6W,EAAa,IAAI7K,EAAU8K,WACjCD,EAAWE,UAAUwM,EAAYijD,GAGjCjjD,EAAWrM,UAAU7Z,GAErBkmB,EAAWE,QAAQxpB,GACnBnO,EAAMqW,IAAIohB,GACVz3B,EAAMqW,IAAI0U,IAGRygH,EAAuB,CAACxrI,EAAOnK,EAAY8jC,KAC7C,MAAM8xG,EAAS9xG,EAAM+xG,YACPD,EAAOhsI,WACfqkB,SAAS9jB,EAAOnK,EAAK6b,OAAQ7b,EAAKkc,QAExC,MAAM45H,EAAa,IAAIzrH,EAAU67D,OAC3BhkD,EAAW4B,EAAM8oF,cACvBkpB,EAAWvlF,YAAYruB,GACvB/3B,EAAMqW,IAAIs1H,GAEV,MAAMthB,EAAU,IAAInqG,EAAUgxD,QAC9Bm5C,EAAQl5C,WAAWs6D,GACnBzrI,EAAMqW,IAAIg0G,IAEdn3H,EAAAsmC,MAAMgyG,qBAAuBA,EAI7B,MAAMI,EAAkB,CAAC5rI,EAAOmV,EAAQ4P,KACpC,MAAM1b,EAAM,CAAC8L,EAAOzD,OAAS1R,EAAM0R,OAC/ByD,EAAOpD,OAAS/R,EAAM+R,QAG1BgT,EAAG/kB,EADa,CAACqJ,MAAKkI,IAAKvR,KAG/B9M,EAAAsmC,MAAMoyG,gBAAkBA,EAsCxB14I,EAAAsmC,MAAMqyG,iBA/BmB,EAAC3wI,EAAM6pB,KAC5B,MAAM/kB,MAACA,EAAKyxG,iBAAEA,GAAoBv2G,EAClC,IAAI4wI,EAAY,KAuBhB,OAtBAr6B,EAAiBrxG,QAASvK,IACPA,EAAKwK,YACbD,QAAQ2rI,IACX,GAAI/rI,EAAMQ,QAAQurI,GAAa,CAC3B,MAAMh8B,EAASg8B,EAAW93I,IAAI,UACzB63I,EAGI5wI,EAAK8wI,SACN9wI,EAAK8wI,SAASF,EAAWC,KACzBD,EAAYC,GAIFh8B,EAAO/8F,WACP84H,EAAU73I,IAAI,UAAU+e,aAClB84H,EAAYC,GAVhCD,EAAYC,SAgBxBD,IACAF,EAAgB5rI,EAAO8rI,EAAW/mH,IAC3B,KA0Cf7xB,EAAAsmC,MAAMyyG,kBAhCoB,EAAC/wI,EAAM6pB,KAC7B,MAAM/kB,MAACA,EAAKyxG,iBAAEA,GAAoBv2G,EAClC,IAAIgxI,EAAW,KAwBf,OAvBAz6B,EAAiBrxG,QAASvK,IACPA,EAAKwK,YACbD,QAAQ2rI,IACX,GAAI/rI,EAAM46G,SAASmxB,GACf,GAAKG,EAGA,GAAIhxI,EAAK8wI,SACN9wI,EAAK8wI,SAASE,EAAUH,KACxBG,EAAWH,OAGd,CACD,MAAMI,EAAKD,EAASj4I,IAAI,UACb83I,EAAW93I,IAAI,UACnBo4E,SAAW8/D,EAAG9/D,WACjB6/D,EAAWH,QAXfG,EAAWH,QAkBvBG,IACAN,EAAgB5rI,EAAOksI,EAAUnnH,IAC1B,KAwBf7xB,EAAAsmC,MAAM4yG,gBAjBkB,EAAClxI,EAAM6pB,KAC3B,MAAM/kB,MAACA,GAAS9E,EAChB,IAAImxI,GAAa,EAajB,OAZInxI,EAAK8wI,WAEDK,IADAnxI,EAAK8wI,SAAShsI,IAQlBqsI,GACAT,EAAgB5rI,EAAOA,EAAO+kB,GAE3BsnH,IAKXn5I,EAAAsmC,MAAM8yG,uBAAyB,EAAC3yG,EAAO35B,KAQnC,MAPa,KACT,MAAMusI,EAAY,IAAIrsH,EAAUw2D,UAChC61D,EAAUnhH,UAAUprB,GACpBusI,EAAUh2D,SAAS58C,GACnB4yG,EAAU91D,QAAQ,CAACllE,IAAKvR,IACxBA,EAAMqW,IAAIk2H,MAMlBr5I,EAAAsmC,MAAMgzG,sBAAwB,EAAC7yG,EAAO35B,EAAO5F,KACzC2jB,EAAApmB,QAAGslB,QAAQ7iB,GACJ,CAEH2uG,OAAStB,IACL,MAAMvsG,EAAY,CACdmO,IAAKk9F,EAAO6C,OAAO3B,IAEvB,OAAIvsG,EAAKmO,KACLnO,EAAKqW,IAAMvR,EACJ,KACH,MAAMusI,EAAY,IAAIrsH,EAAUw2D,UAChC61D,EAAUnhH,UAAUprB,GACpBusI,EAAUh2D,SAAS58C,GACnB4yG,EAAU91D,QAAQv7E,GAClB8E,EAAMqW,IAAIk2H,KAGX,MAEXE,SAAU,KAAM,KAgCxB,MAAMC,EAAkB,SAAS/yG,EAAOz+B,GAQpC,MANY,CACRwvD,KAFQxvD,EAAKqW,IAEHI,QACVtI,IAAKnO,EAAKmO,IACVswB,QACApoB,IAAKrW,EAAKqW,MAIlBre,EAAAsmC,MAAMkzG,gBAAkBA,EAQxB,MAAajzG,EAITrb,YAAYpe,GACRjK,KAAKgmH,OAAS/7G,EACdjK,KAAK42I,QAAU,GACX5uH,EAAApmB,QAAG6D,cAAc,CAACzF,KAAKgmH,UACvBh+F,EAAApmB,QAAGK,IAAI,kBAAmB,MACtB,wBAILomB,WACH,OAAOroB,KAAKgmH,OAGT39F,SAASub,GACZ5jC,KAAK42I,QAAQhxI,KAAKg+B,GAClBA,EAAMizG,UAAU72I,KAAKmtH,YAGlB9kG,YACH,OAAOroB,KAAK42I,QAGTvuH,OAAOsvD,GACV,MAAMm/D,EAAYn/D,EAAI4jC,YACtB,IAAIp1G,GAAS,EAOb,OANAnG,KAAK42I,QAAQvsI,QAAQ,CAACu5B,EAAOvmC,MACzB8I,EAASA,GAAUy9B,EAAMz9B,OAAO2wI,EAAUz5I,MAEtCmH,QAAQU,IAAI,QAAS0+B,EAAMliC,UAAW,mBAGvCyE,EAKJkiB,qBACH,MAAM0uH,EAAuB/2I,KAAK42I,QAClC,MAAO,CACH5jC,OAAStB,IACL,MAAMN,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,OAAIN,EAAY2lC,EAAYx1I,OACjBw1I,EAAY3lC,GAAW4lC,mBAAmBh3I,KAAKgmH,QAEnD,MAEXtR,QAAS,KACL1sF,EAAApmB,QAAGslB,QAAQ,kCACX,MAAM+vH,EAAU1mC,EAAAE,KAAKM,YAAYjoF,MAAM,EAAG9oB,KAAK42I,QAAQr1I,QACjD6C,EAAM,CACRmtG,IAAK,CAAC,mCAKV,OAHAwlC,EAAY1sI,QAAQ,CAACu5B,EAAO1kB,KACxB9a,EAAI6yI,EAAQ/3H,IAAU0kB,EAAMj7B,aAEzBvE,GAEXsyI,SAAU,KAAM,GAIjBruH,SACH,MAAO,CACHsb,OAAQ3jC,KAAK42I,QAAQvhI,IAAIuuB,GAASA,EAAMnd,YAgkBpD,SAASywH,EAAkB/xI,EAAM6pB,EAAI4U,GACjC,MAAM35B,MAACA,EAAK2xG,MAAEA,GAASz2G,EACvB,IAAKy2G,EAAQ,OAAO,EAEpB,GADgBx+E,EAAAyK,MAAMi9E,YAAY76G,EAAO2xG,IAC1Bh4E,EAAMuzG,WAAY,CAG7B,OADAnoH,EAAG/kB,EADe,CAACmV,OAAQw8F,EAAOpgG,IAAKvR,KAEhC,EAEX,OAAO,EA5oBX9M,EAAAumC,YAwEAvmC,EAAAsmC,MAAMC,UAAYA,EAMLvmC,EAAAijF,UAAY,SAASxiF,EAAcmwH,GAC5C/tH,KAAKo3B,MAAQx5B,EACboC,KAAKo3I,OAASrpB,GAAS,EACvB/tH,KAAKq3I,QAAU,KACfr3I,KAAKu3F,MAAQ,GACbv3F,KAAKs3I,OAAS,EACdt3I,KAAK88F,QAAQl/F,IAGjBT,EAAAijF,UAAUnhF,UAAU43I,UAAY,SAASnB,GACtC11I,KAAKq3I,QAAU3B,GAGlBv4I,EAAAijF,UAAUnhF,UAAU02I,UAAY,WAC5B,OAAO31I,KAAKq3I,SAGhBl6I,EAAAijF,UAAUnhF,UAAU69F,QAAU,SAASl/F,GACnC,MAAM25I,EAAY35I,EAAKiH,MAAM,OACvB2yI,EAAW,GACjBD,EAAUltI,QAAQotI,IACdD,EAAS5xI,KAAK6xI,EAAM36G,gBAExB98B,KAAK03I,KAAOF,EAAStzH,KAAK,KAG9B/mB,EAAAijF,UAAUnhF,UAAUyC,QAAU,WAC1B,OAAO1B,KAAKo3B,OAGhBj6B,EAAAijF,UAAUnhF,UAAU04I,SAAW,WAC3B,OAAO33I,KAAKo3I,QAGhBj6I,EAAAijF,UAAUnhF,UAAU+gF,QAAU,WAG1B,OAFmBhgF,KAAKq3I,QAAQn5I,IAAI,cACds9G,SACTx7G,KAAKy7G,mBAKtBt+G,EAAAijF,UAAUnhF,UAAUw8G,gBAAkB,WAClC,IAAIm8B,EAAY53I,KAAKo3I,OACrB,MAAMngE,EAAWj3E,KAAKq3I,QAAQn5I,IAAI,cAAcoe,cAEhD,GADAs7H,GAAa1wI,KAAKC,KAAK8vE,EAAW,GAC9Bj3E,KAAKq3I,QAAQnuI,IAAI,UAAW,CAC5B,MACM2uI,EADS73I,KAAKq3I,QAAQn5I,IAAI,UACPwL,SAAS,gBAClCkuI,GAAa1wI,KAAKC,KAAK0wI,EAAY,GAIvC,MAAMC,EAAY5wI,KAAK4B,MAAM,GAAO9I,KAAKo3I,QACzC,OAAIQ,EAAYE,EAAmBA,EAC5BF,GAGXz6I,EAAAijF,UAAUnhF,UAAUk4I,SAAW,WAC3B,OAAOn3I,KAAKs3I,QAGhBn6I,EAAAijF,UAAUnhF,UAAUmzI,SAAW,SAAS3oI,GACpCzJ,KAAKs3I,OAAS7tI,GAGlBtM,EAAAijF,UAAUnhF,UAAUytH,YAAc,SAASqrB,EAAW,GAClD,IAAIpzD,EAAM,EAIV,GAHI3kF,KAAKu3F,MAAMv1D,WACX2iD,EAAM3kF,KAAKu3F,MAAMv1D,SAASy1C,QAE1BsgE,EAAW,EAAG,CACd,MAAM9gE,EAAWj3E,KAAKq3I,QAAQn5I,IAAI,cAAcoe,cAChDqoE,GAAOz9E,KAAK4B,MAAMmuE,EAAW8gE,GAEjC,OAAOpzD,GAGXxnF,EAAAijF,UAAUnhF,UAAUymI,UAAY,SAASqS,EAAW,GAChD,IAAI95G,EAAS,EACTj+B,KAAKu3F,MAAMt5D,SACXA,EAASj+B,KAAKu3F,MAAMt5D,OAAOw5C,QAE/B,MAAMR,EAAWj3E,KAAKq3I,QAAQn5I,IAAI,cAAcoe,cAEhD,OADA2hB,GAAU/2B,KAAK4B,MAAMmuE,EAAW8gE,IAIpC56I,EAAAijF,UAAUnhF,UAAU+4I,SAAW,SAASjqB,GAAgB/tH,KAAKo3I,OAASrpB,GAItE5wH,EAAAijF,UAAUnhF,UAAUq0I,YAAc,SAASrpI,EAAO9E,GAC9C,OAAIA,EAAKmO,KAAOnO,EAAKia,QAAUja,EAAKqW,KAChCrW,EAAKqW,IAAMvR,EACJ,KACH,MAAMusI,EAAY,IAAIrsH,EAAUw2D,UAChC61D,EAAUnhH,UAAUprB,GACpBusI,EAAUh2D,SAASxgF,MACnBw2I,EAAU91D,QAAQv7E,GAClB8E,EAAMqW,IAAIk2H,KAGX,MAGXr5I,EAAAijF,UAAUnhF,UAAU0J,SAAW,WAC3B,MAAMivI,EAAY53I,KAAKy7G,kBACvB,IAAI9xG,KAAS3J,KAAK0B,eAAek2I,MAQjC,OAPI53I,KAAKu3F,MAAMt5D,SACXt0B,YAAgB3J,KAAKu3F,MAAMt5D,OAAOt1B,cAElC3I,KAAKu3F,MAAMv1D,WACXr4B,YAAgB3J,KAAKu3F,MAAMv1D,SAASr5B,cAEpC3I,KAAKs3I,OAAS,IAAI3tI,UAAc3J,KAAKm3I,cAClCxtI,GAGXxM,EAAAijF,UAAUnhF,UAAUg5I,kBAAoB,SAAS/9B,GAC7C,MAAMjjC,EAAWj3E,KAAK21I,YAAYz3I,IAAI,cAAcoe,cACpD,OAAOpV,KAAK4B,MAAMmuE,EAAWijC,IAGjC/8G,EAAAijF,UAAUnhF,UAAUi5I,mBAAqB,SACrC7/D,EAAkB6hC,GAElB,MAAMr8G,EAAS,MAAQw6E,EAASv7C,aAE1Bq7G,EADSn4I,KAAK21I,YACK93I,KACzB,OAAOqJ,KAAK4B,MAAMqvI,EAAYj+B,IAGlC/8G,EAAAijF,UAAUnhF,UAAUkH,OAAS,SAASwxE,GAClC,IAAIxxE,EAASnG,KAAK0B,YAAci2E,EAAIj2E,UAWpC,OATAyE,GADAA,EAASA,GAAUnG,KAAK23I,aAAehgE,EAAIggE,aACxB33I,KAAKm3I,aAAex/D,EAAIw/D,WAC3Cp5I,OAAO6qB,KAAK5oB,KAAKu3F,OAAOltF,QAAQzL,IAExBuH,IADAwxE,EAAI4f,MAAM34F,KACDuH,GAAUnG,KAAKu3F,MAAM34F,GAAKuH,OAAOwxE,EAAI4f,MAAM34F,OAMrDuH,GAGXhJ,EAAAijF,UAAUnhF,UAAUmf,QAAU,SAASxgB,EAAcy5F,GAC7B,iBAATA,EACPr3F,KAAKu3F,MAAM35F,GAAQ0/B,EAAAwE,KAAKnjC,OAAO04F,GAE1BA,EAAK5f,OACVz3E,KAAKu3F,MAAM35F,GAAQy5F,IAI3Bl6F,EAAAijF,UAAUnhF,UAAUof,QAAU,SAASzgB,GACnC,OAAOoC,KAAKu3F,MAAM35F,IAGtBT,EAAAijF,UAAUnhF,UAAUm5I,QAAU,SAASx6I,GACnC,SAAIoC,KAAKu3F,MAAMr4F,eAAetB,KAASoC,KAAKu3F,MAAM35F,KAMtDT,EAAAijF,UAAUnhF,UAAUo5I,WAAa,SAASz6I,GACtCoC,KAAKu3F,MAAM35F,GAAQ,MAGvBT,EAAAijF,UAAUnhF,UAAUq5I,SAAW,SAAS16I,GACpC,OAAIoC,KAAKu3F,MAAM35F,GACJoC,KAAKu3F,MAAM35F,GAAM65E,QAE5BzvD,EAAApmB,QAAGK,IAAI,YAAa,gCACKrE,WAClB,IAGXT,EAAAijF,UAAUnhF,UAAU48G,kBAAoB,SAAS12G,EAAM6pB,GACnD,OAAO,GAGX7xB,EAAAijF,UAAUnhF,UAAUwnB,OAAS,WACzB,MAAM4wE,EAAO,GAMb,OALAt5F,OAAO6qB,KAAK5oB,KAAKu3F,OAAOltF,QAAQzL,IACvBopB,EAAApmB,QAAG6D,cAAc,CAACzF,KAAKu3F,MAAM34F,OAC9By4F,EAAKz4F,GAAOoB,KAAKu3F,MAAM34F,GAAK6nB,YAG7B,CACH7oB,KAAMoC,KAAK0B,UACX4mH,IAAKtoH,KAAK03I,KACV3pB,MAAO/tH,KAAK23I,WACZtgD,OACA5tF,MAAOzJ,KAAKs3I,SAQpBn6I,EAAAsmC,MAAM80G,aAAe,SAAS36I,EAAMmwH,GAChC5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAKw4I,UAAY,GACjBx4I,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,YAGtCqpB,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAM80G,aAAcp7I,EAAAijF,WAE/BjjF,EAAAsmC,MAAM80G,aAAat5I,UAAUoxD,YAAc,SAASooF,GAChDz4I,KAAKu3F,MAAMv1D,SAAWy2G,GAG1Bt7I,EAAAsmC,MAAM80G,aAAat5I,UAAUy5I,YAAc,SAAS96I,GAChDoC,KAAKw4I,UAAY56I,GAGrBT,EAAAsmC,MAAM80G,aAAat5I,UAAU05I,YAAc,WACvC,OAAO34I,KAAKw4I,WAGhBr7I,EAAAsmC,MAAM80G,aAAat5I,UAAU25I,KAAO,SAASzzI,GACzC,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAEvC0zI,EAAYl6I,EAAOqB,KAAKw4I,WAK9B,GAJIK,EAAUxjH,WACVwjH,EAAUxjH,UAAUlwB,EAAKqW,KAE7BpX,EAAIy+B,QAAU,CAACzc,KAAMyyH,GACjB74I,KAAKo4I,QAAQ,YAAa,CAC1B,MAAMzzD,EAAM3kF,KAAKs4I,SAAS,YAC1Bl0I,EAAIy+B,QAAQb,SAAW2iD,EAG3B,MAAMm0D,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB37I,EAAAsmC,MAAM80G,aAAat5I,UAAU+3I,mBAAqB,SAAS/sI,GAEvD,OAAO9M,EAAAsmC,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,sCAQhB9M,EAAAsmC,MAAMs1G,gBAAkB,SAASn7I,EAAMmwH,GACnC5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAKg5I,WAAa,GAElBh5I,KAAKi5I,aAAe74H,KAEZpgB,KAAKg5I,WADY,iBAAV54H,EACW,CAACA,GAGDA,IAG1BpgB,KAAKk5I,aAAe,KAAMl5I,KAAKg5I,YAE/Bh5I,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAI+0I,WAAan5I,KAAKg5I,WAEtB,MAAMF,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAO9M,EAAAsmC,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,uCAKpB+d,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMs1G,gBAAiB57I,EAAAijF,WAKlCjjF,EAAAsmC,MAAM21G,OAAS,SAASx7I,EAAMmwH,GAC1B5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAKu3F,MAAMt5D,OAASX,EAAAwE,KAAKnjC,OAAO,WAChCqB,KAAKs3I,OAAS,GAGlBtvH,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAM21G,OAAQj8I,EAAAijF,WAEzBjjF,EAAAsmC,MAAM41G,SAAW,SAASz7I,EAAMmwH,GAC5B5wH,EAAAsmC,MAAM21G,OAAO57I,KAAKwC,KAAMpC,EAAMmwH,GAC9B/tH,KAAKs5I,WAAY,EAEjBt5I,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAI66B,WAAaj/B,KAAKi/B,WACtB76B,EAAI65B,OAASj+B,KAAKs4I,SAAS,UAC3B,MAAMiB,EAAU,IAAIpvH,EAAUy2D,SAC9B24D,EAAQ74D,QAAQt8E,GAChBe,EAAKqW,IAAI8E,IAAIi5H,IAGjBv5I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OADA+d,EAAApmB,QAAGslB,QAAQ,kCACJ,CACH8rF,OAAStB,IACL,MAAMp+F,EAAMk9F,EAAO6C,OAAO3B,GAC1B,OAAO1xG,KAAKszI,YAAYrpI,EAAO,CAACqJ,SAEpCojI,SAAU,KAAM,IAIxB12I,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,KAC5B,MAAM/kB,MAACA,EAAK2xG,MAAEA,GAASz2G,EACvB,IAAKy2G,EAAQ,OAAO,EAEpB,MAAOpxF,EAAIC,GAAM,CAACxgB,EAAM0R,OAAQ1R,EAAM+R,SAC/B4P,EAAIC,GAAM,CAAC+vF,EAAMjgG,OAAQigG,EAAM5/F,QAChCw9H,EAASplE,EAAA7pD,SAAS2G,gBAAgB1G,EAAIC,EAAImB,EAAIC,GACpD,GAAI2tH,EAAOj4I,OAAS,EAAG,CACnB,MAEMu6G,EAAU,CAACxoG,IAAK,CAFXkmI,EAAO,GAAG,GAAKA,EAAO,GAAG,GACzBA,EAAO,GAAG,GAAKA,EAAO,GAAG,KASpC,MAPkB,mBAAPxqH,EACPA,EAAG/kB,EAAO6xG,GAGV9zF,EAAApmB,QAAGK,IAAI,iBAAkB,oBACrB,gCAED,EAEX,OAAO,KAGf+lB,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAM41G,SAAUl8I,EAAAsmC,MAAM21G,QAKjCj8I,EAAAsmC,MAAMg2G,WAAa,SAAS77I,EAAMmwH,GAC9B5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAK05I,WAAa,GAClB15I,KAAKg2G,QAAU,EACfh2G,KAAK25I,WAAa,KAElB35I,KAAK45I,cAAgB73I,KACjB/B,KAAK05I,WAAa33I,IAGtB/B,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GACvC6wG,EAAU14E,EAAAwE,KAAK5nB,SAASla,KAAKg2G,SAGnC5xG,EAAI8sD,SAAWpxD,KACX,GAAgB,IAAZk2G,EACIl2G,EAAK8vB,UACL5vB,KAAK65I,mBAAmB/5I,EAAMqF,OAGjC,CACD,MAAMuwI,EAASvwI,EAAKqW,IACdnG,EAAMqgI,EAAOhsI,WAAW8Z,UACvByP,EAAIC,GAAMwiH,EAAO95H,QAClBwP,EAAQgpD,EAAA7pD,SAAS05F,aAAahxF,EAAIC,EAAI,GAC5C,IAAI4mH,EAAU,EACVjpD,EAAW,GAEf,KAAOipD,EAAU9jC,GAAS,CACtB,MAAO//F,EAAGC,GAAKuS,EAAIjL,aAAa4N,GAChC,GAAI/V,EAAIwY,MAAM5X,EAAGC,GAAI,CACjB,MAAMqxG,EAAUlyG,EAAIoZ,QAAQxY,EAAGC,GAC3BqxG,EAAQ33F,WACR5vB,KAAK65I,mBAAmBtyB,EAASpiH,KAC/B20I,GAGV,GAAmB,KAAbjpD,EAAiB,MAG3B,GAAIipD,EAAU9jC,EAAS,CACnB,MAAM3xG,KAASqxI,EAAOh0I,mCACtBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM41I,EAAOjnH,UAAWpqB,YAKhD,MAAMy0I,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAO9M,EAAAsmC,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,sCAIhBjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,KAC5B,MAAM/kB,MAACA,EAAK2xG,MAAEA,GAASz2G,EAEvB,GAAuB,IADPi4B,EAAAyK,MAAM+8E,qBAAqB36G,GAC/B1I,OACR,GAAkB,mBAAPytB,EAAmB,CAC1B,MAAM+qH,EAAa9vI,EAAMq5B,WAAW02G,0BACpC,GAAID,EAGA,OAFA50I,EAAKmO,IAAM0U,EAAApmB,QAAGgS,KAAKmmI,EAAY9vI,GAC/B+kB,EAAG/kB,EAAO9E,IACH,OAIX6iB,EAAApmB,QAAGK,aAAajC,KAAK0B,YAAa,0DACQk6G,KAGlD,OAAO,IAGX57G,KAAK65I,mBAAqB,EAAC/5I,EAAMqF,KAC7B,MAAO8Q,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,QAC5B05H,EAASvwI,EAAKqW,IACdzD,EAAQ29H,EAAOhsI,WAGfulB,EAAS+gB,EAAAvS,YAAYmO,YAE3B,IAAIquG,EAAS,KASb,GARwB,KAApBj6I,KAAK05I,WACLO,EAAShrH,EAAOgc,YAAYjrC,KAAK05I,YAE5B15I,KAAK25I,aACVM,EAAShrH,EAAOsc,kBAAkB,CAAC5sB,KAAM3e,KAAK25I,cAI9CM,EAAQ,CACRliI,EAAMgW,SAASksH,EAAQhkI,EAAGC,GAC1B+jI,EAAO32G,WAAWs5E,YAAYs9B,eAAexE,GAC7CuE,EAAOl0B,UAAU2vB,GACjBA,EAAO3vB,UAAUk0B,GAEjB,MAEM51I,KAFaqxI,EAAOh0I,qBACPu4I,EAAOv4I,aAE1BsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,QACqB,mBAA5BrE,KAAKm6I,oBACZn6I,KAAKm6I,mBAAmBr6I,EAAMqF,EAAM80I,OAGvC,CACD,IAAI51I,mCAAuCrE,KAAK05I,cAChD,GAAI15I,KAAK25I,WAAY,CAEjBt1I,gBADgBrE,KAAK25I,WAAWhxI,4BAGpCqf,EAAApmB,QAAG+C,KAAK,mBAAoB,kBAAmBN,OAK3D2jB,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMg2G,WAAYt8I,EAAAijF,WAG7BjjF,EAAAsmC,MAAMoB,QAAU,SAASjnC,EAAMmwH,GAC3B5wH,EAAAsmC,MAAM21G,OAAO57I,KAAKwC,KAAMpC,EAAMmwH,GAC9B/tH,KAAKo6I,SAAW,IAEpBpyH,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMoB,QAAS1nC,EAAAsmC,MAAM21G,QAEhCj8I,EAAAsmC,MAAMoB,QAAQ5lC,UAAUo7I,YAAc,WAClC,OAAOr6I,KAAKo6I,UAGhBj9I,EAAAsmC,MAAMoB,QAAQ5lC,UAAU25I,KAAO,SAASzzI,GACpC,MAAO8Q,EAAGC,GAAK,CAAC/Q,EAAKqW,IAAIG,OAAQxW,EAAKqW,IAAIQ,QACpC5X,EAAiB,CACnBuwD,KAAM,CAAC1+C,EAAGC,GACVkJ,OAAQja,EAAKia,OACbwkB,MAAO5jC,KACPwb,IAAKrW,EAAKqW,IACVq5C,GAAI,CAAC1vD,EAAKia,OAAOzD,OAAQxW,EAAKia,OAAOpD,SAEzC5X,EAAI66B,WAAaj/B,KAAKi/B,WACtB76B,EAAI65B,OAASj+B,KAAK0lI,YAClB,MAAM4U,EAAW,IAAInwH,EAAU02D,aAC/By5D,EAAS55D,QAAQt8E,GACjBe,EAAKqW,IAAI8E,IAAIg6H,IAGjBn9I,EAAAsmC,MAAMoB,QAAQ5lC,UAAU+3I,mBAAqB,SAAS/sI,GAElD+d,EAAApmB,QAAGslB,QADS,kDAEZjd,EAAMq5B,WAAWqwE,iBAGjB,MAYM4mC,EAAW,CACb,CAAC37I,IAAK2xG,EAAAE,KAAKuB,IAAImB,OAAQx0F,KAbX,KACZ,MAAMS,EAASnV,EAAMq5B,WAAW4lD,YAChC,GAAI9pE,EAAQ,CACR5a,QAAQU,IAAI,gBAAiBka,GAC7B,MAAMo3H,EAAY,IAAIrsH,EAAUw2D,UAChC61D,EAAUnhH,UAAUprB,GACpBusI,EAAUh2D,SAASxgF,MACnBw2I,EAAU91D,QAAQ,CAACllE,IAAKvR,EAAOmV,WAC/BnV,EAAMqW,IAAIk2H,GACVvsI,EAAMq5B,WAAWk3G,sBAMzB,OAAO,IAAIlF,EAAA/hC,kBAAkBgnC,EAAUtwI,IAG3C9M,EAAAsmC,MAAMoB,QAAQ5lC,UAAU48G,kBAAoB,SAAS12G,EAAM6pB,GACvD,MAAM/kB,MAACA,EAAK2xG,MAAEA,GAASz2G,EACvB,GAAIy2G,EAAO,CACP,MAAO9jE,EAAIC,GAAM6jE,EAAMhgG,SAChBqpG,EAAIC,GAAMj7G,EAAM2R,QAEvB,GADgByuE,EAAAzX,KAAKqjB,aAAan+C,EAAIC,EAAIktE,EAAIC,IAC/BllH,KAAKm3I,WAAY,CAG5B,OADAnoH,EAAG/kB,EADe,CAACmV,OAAQw8F,EAAOpgG,IAAKvR,KAEhC,GAGf,OAAO,GAGX9M,EAAAsmC,MAAMg3G,SAAW,SAAS78I,EAAMmwH,GAC5B5wH,EAAAsmC,MAAM21G,OAAO57I,KAAKwC,KAAMpC,EAAMmwH,GAE9B/tH,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAO9M,EAAAsmC,MAAM8yG,uBAAuBv2I,KAAMiK,IAG9CjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBkoH,EAAkB/xI,EAAM6pB,EAAIhvB,OAGvCA,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiB,CACnBoX,IAAKrW,EAAKqW,IAAK/R,MAAOzJ,KAAKm3I,WAC3BvzG,MAAO5jC,MAEXoE,EAAI66B,WAAaj/B,KAAKi/B,WACtB76B,EAAI65B,OAASj+B,KAAK0lI,YAClB,MAAMoT,EAAY,IAAI3uH,EAAU42D,UAChC+3D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,GAEb,MAAM4B,EAAUv1I,EAAKqW,IAAI9Z,UACnB2C,UAAcrE,KAAK0B,2BAA2Bg5I,IACpD1yH,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,KAAMqF,EAAKqW,IAAIiT,cAIxCzG,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMg3G,SAAUt9I,EAAAsmC,MAAM21G,QAgBjCj8I,EAAAsmC,MAAMk3G,SAAW,SAAS/8I,EAAMmwH,GAC5B5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAClCqB,KAAKs3I,OAAS,EACdt3I,KAAK46I,cAAgB,OAErB56I,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAI8sD,SAAWlxD,KAAK66I,aAAah8I,KAAKmB,MAEtC,MAAM84I,EAAY,IAAI3uH,EAAU62D,UAChC83D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAO9M,EAAAsmC,MAAM8yG,uBAAuBv2I,KAAMiK,IAG9CjK,KAAK66I,aAAe,MAChB,MAAM5rH,EAAS+gB,EAAAvS,YAAYmO,YACrB8pG,EAAS11I,KAAKq3I,QAENj6G,EAAAyK,MAAMi8E,oBAAoB4xB,EAAQ11I,KAAKs3I,QAC/CjtI,QAAQvK,IACV,GAAIA,EAAK41F,cAAgB51F,EAAKsK,YAAa,CACvC,MAAM0wI,EAAO7rH,EAAOgc,YAAYjrC,KAAK46I,eACrCnF,EAAqBqF,EAAMh7I,EAAME,WAK7CA,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBkoH,EAAkB/xI,EAAM6pB,EAAIhvB,QAG3CgoB,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMk3G,SAAUx9I,EAAAijF,WAK3BjjF,EAAAsmC,MAAMs3G,WAAa,SAASn9I,EAAMmwH,GAC9B5wH,EAAAijF,UAAU5iF,KAAKwC,KAAMpC,EAAMmwH,GAC3B/tH,KAAK42I,QAAU,IAEnB5uH,EAAApmB,QAAG0D,QAAQnI,EAAAsmC,MAAMs3G,WAAY59I,EAAAijF,WAE7BjjF,EAAAsmC,MAAMs3G,WAAW97I,UAAU+kC,SAAW,SAASJ,GAC3C5jC,KAAK42I,QAAQhxI,KAAKg+B,IAGtBzmC,EAAAsmC,MAAMs3G,WAAW97I,UAAU+7I,aAAe,WACtCh7I,KAAK42I,QAAU,IAGnBz5I,EAAAsmC,MAAMs3G,WAAW97I,UAAU+gF,QAAU,WAGjC,OAFmBhgF,KAAKq3I,QAAQn5I,IAAI,cACds9G,SACTx7G,KAAKy7G,mBAGtBt+G,EAAAsmC,MAAMs3G,WAAW97I,UAAU25I,KAAO,SAASzzI,GACvCnF,KAAK42I,QAAQvsI,QAAQu5B,IACjBA,EAAMg1G,KAAKzzI,MAInBhI,EAAAsmC,MAAMs3G,WAAW97I,UAAUw8G,gBAAkB,WACzC,OAAOz7G,KAAK42I,QAAQvhI,IAAIuuB,GAASA,EAAM63E,mBAClCzyB,OAAO,CAACn/E,EAAKkqD,IAAQlqD,EAAMkqD,EAAK,IAGzC52D,EAAAsmC,MAAMs3G,WAAW97I,UAAU04I,SAAW,WAClC,OAAO33I,KAAK42I,QAAQvhI,IAAIuuB,GAASA,EAAM+zG,YAClC3uD,OAAO,CAACn/E,EAAKkqD,IAAQlqD,EAAMkqD,EAAK,IAGzC52D,EAAAsmC,MAAMs3G,WAAW97I,UAAU48G,kBAAoB,SAAS12G,EAAM6pB,GAC1D,IAAIqyC,GAAK,EAIT,OAHArhE,KAAK42I,QAAQvsI,QAAQu5B,IACjBy9B,EAAKA,GAAMz9B,EAAMi4E,kBAAkB12G,EAAM6pB,KAEtCqyC,GAGXlkE,EAAAsmC,MAAMs3G,WAAW97I,UAAUkH,OAAS,SAASwxE,GACzC,IAAKA,EAAIi/D,QAAU,OAAO,EAC1B,GAAIj/D,EAAIi/D,QAAQr1I,SAAWvB,KAAK42I,QAAQr1I,OACpC,OAAO,EAGX,IAAI8/D,GAAK,EAOT,OANArhE,KAAK42I,QAAQvsI,QAAQ,CAACu5B,EAAOvmC,MACzBgkE,EAAKA,GAAMz9B,EAAMz9B,OAAOwxE,EAAIi/D,QAAQv5I,MAEhCmH,QAAQU,IAAI,QAAS0+B,EAAMliC,UAAW,mBAGvC2/D,GAGXlkE,EAAAsmC,MAAMs3G,WAAW97I,UAAUwnB,OAAS,WAChC,MAAM7H,EAAOzhB,EAAAijF,UAAUnhF,UAAUwnB,OAAOjpB,KAAKwC,MAE7C,OADA4e,EAAK+kB,OAAS3jC,KAAK42I,QAAQvhI,IAAIuuB,GAASA,EAAMnd,UACvC7H,GAGXzhB,EAAAsmC,MAAMs3G,WAAW97I,UAAU43I,UAAY,SAASnB,GAC5C11I,KAAK42I,QAAQvsI,QAAQu5B,IACjBA,EAAMizG,UAAUnB,MAKxBv4I,EAAAsmC,MAAMw3G,YAAc,SAASr9I,EAAcs9I,GACvC,MAAMC,EAAY,cAAcD,EAC5B7yH,eAAeljB,GACX+xB,MAAMt5B,EAAM,GACRoC,KAAKy1E,OAA+B,mBAAfz1E,KAAKy1E,OAC1Bz1E,KAAKy1E,SAAStwE,KAM1B,OADAhI,EAAAsmC,MAAM7lC,GAAQu9I,EACPA,GAGXh+I,EAAAsmC,MAAM23G,cAAgB,SAASx9I,UACpBT,EAAAsmC,MAAM7lC,mFC5jCjB,MAAAyf,EAAApgB,EAAA,GACAo+I,EAAAp+I,EAAA,IACAq+I,EAAAr+I,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SAENpgB,EAAA80F,OAAc,GAE3B90F,EAAA80F,OAAOspD,gBAAkB,GACzBp+I,EAAA80F,OAAOJ,MAAQ,GAGf10F,EAAA80F,OAAOJ,MAAM2pD,OAAS,CACtB,sGAcA,uGAcA,sGAcA,sGAcA,uGAgBAr+I,EAAA80F,OAAOJ,MAAM4pD,KAAO,CACpB,kGAcA,kGAcA,kGAcA,mGAgBAt+I,EAAA80F,OAAOJ,MAAMmT,SAAW,CACxB,wGAcA,wGAcA,wGAcA,yGAgBA7nG,EAAA80F,OAAOJ,MAAM6pD,aAAe,CAC5B,wGAcA,wGAcA,wGAcA,yGAgBAv+I,EAAA80F,OAAOJ,MAAMx2B,SAAW,CACxB,0GAcA,0GAcA,2GAcA,4GAiBAl+D,EAAA80F,OAAOJ,MAAM8pD,iBAAmB,CAChC,0GAcA,0GAcA,2GAcA,4GAgBAx+I,EAAA80F,OAAOJ,MAAMqW,OAAS,CACtB,0GAcA,0GAcA,0GAcA,2GAeA/qG,EAAA80F,OAAOJ,MAAM+pD,WAAa,CAC1B,uGAcA,uGAcA,uGAcA,wGAgBAz+I,EAAA80F,OAAOJ,MAAMgqD,YAAc,CAC3B,8FAaA,sGAcA,sGAcA,qGAcA,2GAcA,yGAcA,0GAcA,4GAiBA1+I,EAAA80F,OAAOJ,MAAMoB,YAAc,2FAa3B91F,EAAA80F,OAAOJ,MAAMiqD,WAAa,2FAe1B3+I,EAAA80F,OAAOS,cAAgB,WACnB,MAAM1mE,EAAO9kB,KAAK4C,MAAM9J,KAAKixF,OAAS,GAGtC,IAAIgiC,EAAQ,KACR/8G,EAAI,EASR,OAZcuS,EAAI9C,cAAgB,GAM9BstG,EAAQjzH,KAAK+7I,aAAa,CAACn+I,KAAM,gBAGjCq1H,EAAQjzH,KAAK+7I,aAAa,CAACn+I,KAAM,eACjCsY,EAAIlW,KAAKkxF,OAAS,GAEf,CACHj7E,EAAG+V,EAAM9V,IAAG07C,KAAMqhE,IAI1B91H,EAAA80F,OAAO+pD,mBAAqB,WAI1B,MAAO,CACH/lI,EAHM/O,KAAK4C,MAAM9J,KAAKixF,OAAS,GAG5B/6E,EAJG,EAIA07C,KAFI5xD,KAAK+7I,aAAa,CAACn+I,KAAM,iBAMzCT,EAAA80F,OAAOgqD,mBAAqB,WAC1B,MAAM/lI,EAAIlW,KAAKkxF,OAAS,EAGxB,MAAO,CACHj7E,EAHM/O,KAAK4C,MAAM9J,KAAKixF,OAAS,GAG5B/6E,IAAG07C,KAFI5xD,KAAK+7I,aAAa,CAACn+I,KAAM,iBAMzCT,EAAA80F,OAAOiqD,kBAAoB,WAIzB,MAAO,CACHjmI,EAHM,EAGHC,EAJGhP,KAAK4C,MAAM9J,KAAKkxF,OAAS,GAIzBt/B,KAFI5xD,KAAK+7I,aAAa,CAACn+I,KAAM,iBAMzCT,EAAA80F,OAAOkqD,kBAAoB,WACzB,MAAMjmI,EAAIhP,KAAK4C,MAAM9J,KAAKkxF,OAAS,GAGnC,MAAO,CACHj7E,EAHMjW,KAAKixF,OAAS,EAGjB/6E,IAAG07C,KAFI5xD,KAAK+7I,aAAa,CAACn+I,KAAM,iBAOzCT,EAAA80F,OAAOQ,kBAAoB,WACzB,MAAMzmE,EAAO9kB,KAAK4C,MAAM9J,KAAKixF,OAAS,GAChCmrD,EAAQp8I,KAAK+7I,aAAa,CAACn+I,KAAM,eACjCy+I,EAAQr8I,KAAK+7I,aAAa,CAACn+I,KAAM,eAIvC,OAFAoC,KAAKi4D,QAAQmkF,EAAOpwH,EAAM,GAEnB,CACL/V,EAAG+V,EAAM9V,EAAGlW,KAAKkxF,OAAS,EAAGt/B,KAAMyqF,IAKvCl/I,EAAA80F,OAAOqqD,mBAAqB,WAC1B,MAAMtwH,EAAO9kB,KAAK4C,MAAM9J,KAAKixF,OAAS,GAChC7jE,EAAOlmB,KAAK4C,MAAM9J,KAAKkxF,OAAS,GAEhCkrD,EAAQp8I,KAAK+7I,aAAa,CAACn+I,KAAM,eACjCy+I,EAAQr8I,KAAK+7I,aAAa,CAACn+I,KAAM,eACjC2+I,EAAQv8I,KAAK+7I,aAAa,CAACn+I,KAAM,eACjC4+I,EAAQx8I,KAAK+7I,aAAa,CAACn+I,KAAM,eAMvC,OAJAoC,KAAKi4D,QAAQmkF,EAAOpwH,EAAM,GAC1BhsB,KAAKi4D,QAAQskF,EAAOv8I,KAAKixF,OAAS,EAAG7jE,GACrCptB,KAAKi4D,QAAQukF,EAAO,EAAGpvH,GAEhB,CACLnX,EAAG+V,EAAM9V,EAAGlW,KAAKkxF,OAAS,EAAGt/B,KAAMyqF,IAKvCl/I,EAAA80F,OAAOU,eAAiB,SAAS18E,EAAGC,EAAGumI,GAGnC,GAAU,IAANxmI,GAAiB,IAANC,EACX,OAAOlW,KAAK+7I,aAAa,CAACn+I,KAAM,cAEpC,GAAU,IAANqY,GAAWC,IAAMlW,KAAKkxF,OAAS,EAC/B,OAAOlxF,KAAK+7I,aAAa,CAACn+I,KAAM,cAEpC,GAAIqY,IAAMjW,KAAKixF,OAAS,GAAW,IAAN/6E,EACzB,OAAOlW,KAAK+7I,aAAa,CAACn+I,KAAM,cAEpC,GAAIqY,IAAMjW,KAAKixF,OAAS,GAAK/6E,IAAMlW,KAAKkxF,OAAS,EAC7C,OAAOlxF,KAAK+7I,aAAa,CAACn+I,KAAM,cAIpC,GAAU,IAANsY,EAAU,CACV,MAAMwmI,EAAK18I,KAAK+7I,aAAa,CAACn+I,KAAM,mBAC9B++I,EAAM38I,KAAK+7I,aAAa,CAACn+I,KAAM,iBACrC,GAAI++I,EAAK,CACL,GAAiB,MAAbF,EACA,OAAOE,EAEX,GAAIl0H,EAAI9C,aAAexoB,EAAA80F,OAAOspD,gBAC1B,OAAOoB,EAGf,OAAOD,EAGN,GAAIxmI,IAAMlW,KAAKkxF,OAAS,EAAG,CAC5B,MAAMwrD,EAAK18I,KAAK+7I,aAAa,CAACn+I,KAAM,mBAC9Bg/I,EAAU58I,KAAK+7I,aAAa,CAACn+I,KAAM,iBACzC,GAAIg/I,EAAS,CACT,GAAiB,MAAbH,EACA,OAAOG,EAEX,GAAIn0H,EAAI9C,aAAexoB,EAAA80F,OAAOspD,gBAC1B,OAAOqB,EAGf,OAAOF,EAIX,GAAU,IAANzmI,EAAS,CACT,MAAM4mI,EAAS78I,KAAK+7I,aAAa,CAACn+I,KAAM,kBAClCk/I,EAAU98I,KAAK+7I,aAAa,CAACn+I,KAAM,iBACzC,GAAIk/I,EAAS,CACT,GAAiB,MAAbL,EACA,OAAOK,EAEX,GAAIr0H,EAAI9C,aAAexoB,EAAA80F,OAAOspD,gBAC1B,OAAOuB,EAGf,OAAOD,EAGN,GAAI5mI,IAAMjW,KAAKixF,OAAS,EAAG,CAC5B,MAAM4rD,EAAS78I,KAAK+7I,aAAa,CAACn+I,KAAM,kBAClCm/I,EAAU/8I,KAAK+7I,aAAa,CAACn+I,KAAM,iBACzC,GAAIm/I,EAAS,CACT,GAAiB,MAAbN,EACA,OAAOM,EAEX,GAAIt0H,EAAI9C,aAAexoB,EAAA80F,OAAOspD,gBAC1B,OAAOwB,EAGf,OAAOF,EAEX,OAAO,MAGX1/I,EAAA80F,OAAOX,WAAa,EAEpBn0F,EAAA80F,OAAOI,OAAS,GAEhBl1F,EAAA80F,OAAOI,OAAOC,KAAO,GAChBjhF,OAAOlU,EAAA80F,OAAOJ,MAAMqW,QACpB72F,OAAOlU,EAAA80F,OAAOJ,MAAM2pD,QACpBnqI,OAAOlU,EAAA80F,OAAOJ,MAAM4pD,MACpBpqI,OAAOlU,EAAA80F,OAAOJ,MAAMmT,UACpB3zF,OAAOlU,EAAA80F,OAAOJ,MAAMx2B,UACpBhqD,OAAOlU,EAAA80F,OAAOJ,MAAM+pD,YACpBvqI,OAAOiqI,EAAA0B,MAAMnrD,MAAMorD,OACnB5rI,OAAOiqI,EAAA0B,MAAMnrD,MAAM2pD,QAExBr+I,EAAA80F,OAAOI,OAAOwpD,YAAc1+I,EAAA80F,OAAOJ,MAAMgqD,YAAYxqI,OAAOlU,EAAA80F,OAAOI,OAAOC,MAE1En1F,EAAA80F,OAAOI,OAAOU,UAAY,GACrB1hF,OAAOlU,EAAA80F,OAAOJ,MAAM6pD,cACpBrqI,OAAOlU,EAAA80F,OAAOJ,MAAM2pD,QACpBnqI,OAAOlU,EAAA80F,OAAOJ,MAAMx2B,UACpBhqD,OAAOlU,EAAA80F,OAAOJ,MAAM8pD,kBAEzBx+I,EAAA80F,OAAOE,UAAY,GACnBh1F,EAAA80F,OAAOE,UAAUkiC,IAAMl3H,EAAA80F,OAAOI,OAAOC,KAAKj9E,IAAIq3C,GAC1C2uF,EAAA9rB,SAASe,eAAe5jE,IAE5B,IAAIwwF,EAAc7B,EAAA9rB,SAAS4E,cAAch3H,EAAA80F,OAAOE,UAAUkiC,KAC1Dl3H,EAAA80F,OAAOE,UAAUkiC,IAAMl3H,EAAA80F,OAAOE,UAAUkiC,IAAIhjH,OAAO6rI,GAEnD//I,EAAA80F,OAAOE,UAAUgrD,WAAahgJ,EAAA80F,OAAOJ,MAAMgqD,YAAYxmI,IAAIq3C,GACvD2uF,EAAA9rB,SAASe,eAAe5jE,IAE5BwwF,EAAc7B,EAAA9rB,SAAS4E,cAAch3H,EAAA80F,OAAOE,UAAUgrD,YACtDhgJ,EAAA80F,OAAOE,UAAUgrD,WAAahgJ,EAAA80F,OAAOE,UAAUgrD,WAAW9rI,OAAO6rI,GACjE//I,EAAA80F,OAAOE,UAAU0pD,YAAc1+I,EAAA80F,OAAOE,UAAUgrD,WAAW9rI,OACvDlU,EAAA80F,OAAOE,UAAUkiC,wKCt0BRl3H,EAAAigJ,MAAa,GAC1B,MAAAp1H,EAAAC,EAAAhrB,EAAA,IAGMwrB,EAFNxrB,EAAA,GAEYqgB,OAAOC,SAUnBpgB,EAAAigJ,MAAMC,MAAQ,GAGdlgJ,EAAAigJ,MAAMC,MAAMC,QAAU,CAClBp1C,OAAQ,CACJ,OAAQ,OAAQ,QAAS,SAE7BuC,QAAS,CACL,QAAS,YAAa,QACtB,UAAW,QACX,OAAQ,SAAU,SAAU,OAI5B,aAGJtW,SAAU,CACN,SAAU,UAAW,OAAQ,QAC7B,QAAS,YAAa,WAAY,OAAQ,SAAU,QACpD,UAGJ+Y,KAAM,CACF,OAAQ,WAAY,QAAS,WAAY,OAAQ,QAAS,QAC1D,QAAS,MAAO,OAAQ,QAAS,QAAS,aAG9CqwC,OAAQ,CACJ,QAAS,QAAS,YAAa,aAAc,SAAU,SACvD,QAAS,UAAW,SAGxBzyC,KAAM,CACF,OAAQ,UACR,OAEA,QAGJ0yC,KAAM,CACF,QAAS,OAAQ,YAAa,SAAU,QAAS,SAAU,SAC3D,OAAQ,UAAW,OAAQ,WAAY,OAAQ,QAAS,UAG5DvvC,QAAS,CACL,SAAU,SACV,QAAS,MAAO,QAAS,OAAQ,OACjC,SAAU,OACV,SAAU,aAAc,WACxB,UAAW,SACX,QAAS,OAAQ,SACjB,QAAS,WAAY,YAEzBl3C,KAAM,IAMV55D,EAAAigJ,MAAMC,MAAMrvB,OAAS,CACjBljB,KAAM,CACF3lD,MAAO,CACH,OAAQ,QAAS,MAAO,OAAQ,OAAQ,SAAU,QAClD,SAAU,OAAQ,SAAU,OAAQ,QAAS,MAAO,QACpD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,UAChD,UAAW,UAAW,QAAS,OAAQ,OAAQ,QAAS,OACxD,QAAS,QAAS,SAAU,SAAU,QAAS,QAAS,QACxD,QAAS,SAAU,QAAS,QAAS,SAAU,SAEnDs4F,OAAQ,CACJ,QAAS,QAAS,OAAQ,OAAQ,SAAU,QAAS,OACrD,UAAW,UAAW,QAAS,QAAS,QAAS,OAAQ,SACzD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OACzD,OAAQ,SAAU,UAK9BtgJ,EAAAigJ,MAAMC,MAAMrvB,OAAO75B,SAAW,CAC1BhvC,MAAOhoD,EAAAigJ,MAAMC,MAAMrvB,OAAOljB,KAAK3lD,MAC/Bs4F,OAAQtgJ,EAAAigJ,MAAMC,MAAMC,QAAQnpD,SAAS9+E,IAAIzX,GAAQ,IAAMA,EAAK2X,gBAEhEpY,EAAAigJ,MAAMC,MAAMrvB,OAAOvjB,QAAU,CACzBtlD,MAAOhoD,EAAAigJ,MAAMC,MAAMrvB,OAAOljB,KAAK3lD,MAC/Bs4F,OAAQtgJ,EAAAigJ,MAAMC,MAAMC,QAAQ7yC,QAAQp1F,IAAIzX,GAAQ,IAAMA,EAAK2X,gBAG/DpY,EAAAigJ,MAAMnzI,MAAQ,GAId9M,EAAAigJ,MAAMt2I,KAAO,CACT42I,MAAO,CACHC,UAAW,CACP,UAAW,YAAa,SAAU,SAAU,SAAU,OAAQ,WAElEC,YAAa,CACT,OAAQ,SAAU,QAAS,OAAQ,UAEvCjhH,KAAM,CACFkhH,KAAM,IAAKC,OAAQ,IAAKC,MAAO,IAAKC,KAAM,IAAKC,OAAQ,MAK/DC,OAAQ,CACJP,UAAW,GAEXC,YAAa,KAKrBzgJ,EAAAigJ,MAAMe,mBAAqB,MACvB,MAAM5pB,EAAQp3H,EAAAigJ,MAAMt2I,KAAK42I,MACnBv4F,EAAgB18B,EAAIjL,aAAa+2G,EAAMopB,WACvCF,EAAiBh1H,EAAIjL,aAAa+2G,EAAMqpB,aAC9C,OAAOz4F,EAAMroB,aAAe,IAAM2gH,IAGtCtgJ,EAAAigJ,MAAMgB,gBAAkB,MACpB,MAAM7pB,EAAQp3H,EAAAigJ,MAAMt2I,KAAKo3I,OACnB/4F,EAAgB18B,EAAIjL,aAAa+2G,EAAMopB,WACvCF,EAAiBh1H,EAAIjL,aAAa+2G,EAAMqpB,aAC9C,OAAOz4F,EAAMroB,aAAe,IAAM2gH,IAGtCtgJ,EAAAigJ,MAAMiB,eAAiB,KACZ51H,EAAIjL,aAAa,CAAC,UAAW,SAAU,OAAQ,cAG1DrgB,EAAAigJ,MAAMkB,YAAc,IAAInkD,IAAI,CAAC,KAE7Bh9F,EAAAigJ,MAAMmB,cAAgBx8I,KAClB,MAAMwyH,EAAQp3H,EAAAigJ,MAAMC,MAAMrvB,OAAOjsH,GACjC,GAAIwyH,EAAO,CACP,IAAIiqB,EAAW,GACf,KAAOrhJ,EAAAigJ,MAAMkB,YAAYp1I,IAAIs1I,IAAW,CAGpCA,EAFsB/1H,EAAIjL,aAAa+2G,EAAMpvE,OACtB18B,EAAIjL,aAAa+2G,EAAMkpB,QAGlD,OAAOe,EAMX,OAHIx2H,EAAApmB,QAAGK,IAAI,cAAe,kDACQF,KAE3B,KAGX5E,EAAAigJ,MAAMqB,oBAAsB,CAAC18I,IACzB,MAAMwU,EAAMpZ,EAAAigJ,MAAMC,MAAMC,QAAQv7I,GAChC,OAAO0mB,EAAIjL,aAAajH,KAG5BpZ,EAAAigJ,MAAMsB,WAAa,EACnBvhJ,EAAAigJ,MAAMuB,aAAe,MACjB,IAAIH,EAAW,YAAcrhJ,EAAAigJ,MAAMsB,aACnC,KAAOvhJ,EAAAigJ,MAAMkB,YAAYp1I,IAAIs1I,IACzBA,EAAW,YAAcrhJ,EAAAigJ,MAAMsB,aAEnC,OAAOF,IAGX,MAAMI,EACM,CACJ,MAAO,UAAW,QAAS,OAAQ,iBAAkB,QACrD,QAAS,QAAS,QAHpBA,EAKO,CACL,eAAgB,cAAe,UAAW,aAC1C,eAAgB,YAAa,YAAa,WAAY,QACtD,WAAY,YAAa,aAAc,YARzCA,EAUW,CACT,OAAQ,OAAQ,QAAS,QAAS,OAAQ,WAC1C,SAAU,WAAY,WAAY,UAAW,aAC7C,UAAW,cAInBzhJ,EAAAigJ,MAAMyB,YAAc,MAChB,IAAIL,EAAW,GACf,KAAOrhJ,EAAAigJ,MAAMkB,YAAYp1I,IAAIs1I,IAAW,CACpC,IAAIM,EAASr2H,EAAIjL,aAAaohI,GAI9BJ,KAHAM,EAASA,EAAOhiH,gBACArU,EAAIjL,aAAaohI,MACnBn2H,EAAIjL,aAAaohI,KAGnC,OAAOJ,uKCjNX,MAAAx2H,EAAAC,EAAAhrB,EAAA,IAEaE,EAAA4hJ,GAAU,GAOvB5hJ,EAAA4hJ,GAAGC,MAAQ,IACX7hJ,EAAA4hJ,GAAGE,MAAQ,IAGX9hJ,EAAA4hJ,GAAGG,MAAQ,IACX/hJ,EAAA4hJ,GAAGI,MAAQ,IACXhiJ,EAAA4hJ,GAAGK,MAAQ,IACXjiJ,EAAA4hJ,GAAGM,MAAQ,IAGXliJ,EAAA4hJ,GAAGO,GAAK,IACRniJ,EAAA4hJ,GAAGQ,MAAQ,IAIXpiJ,EAAA4hJ,GAAGS,KAAO,IACVriJ,EAAA4hJ,GAAGU,KAAO,IACVtiJ,EAAA4hJ,GAAGW,KAAO,IACVviJ,EAAA4hJ,GAAGY,KAAO,IACVxiJ,EAAA4hJ,GAAGa,KAAO,IAGVziJ,EAAA4hJ,GAAGc,SAAW,IACd1iJ,EAAA4hJ,GAAGe,SAAW,IACd3iJ,EAAA4hJ,GAAGgB,OAAS,IACZ5iJ,EAAA4hJ,GAAGiB,OAAS,IACZ7iJ,EAAA4hJ,GAAGkB,SAAW,IACd9iJ,EAAA4hJ,GAAGmB,SAAW,IAEd/iJ,EAAA4hJ,GAAGoB,SAAW,IACdhjJ,EAAA4hJ,GAAGqB,SAAW,IAEdjjJ,EAAA4hJ,GAAGsB,QAAU,IACbljJ,EAAA4hJ,GAAGuB,QAAU,IACbnjJ,EAAA4hJ,GAAGwB,MAAQ,IAEXpjJ,EAAA4hJ,GAAGyB,cAAgB,IAEnBrjJ,EAAA4hJ,GAAG0B,aAAe,CACdC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,MAAO,EACPtD,OAAQ,EACRuD,UAAW,GAGf,MAAMC,EAAa/4H,EAAApmB,QAAGnB,WAAWC,SAEjCvD,EAAA4hJ,GAAGiC,WAAa,CACd34H,CAAClrB,EAAA4hJ,GAAGa,MAAOmB,EAAWj3I,MACtBue,CAAClrB,EAAA4hJ,GAAGmB,UAAWa,EAAWE,SAE1B54H,CAAClrB,EAAA4hJ,GAAGC,OAAQ+B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGE,OAAQ8B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGG,OAAQ6B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGI,OAAQ4B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGK,OAAQ2B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGM,OAAQ0B,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGO,IAAKyB,EAAW5sD,SACpB9rE,CAAClrB,EAAA4hJ,GAAGS,MAAQuB,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGU,MAAQsB,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGW,MAAQqB,EAAW5sD,SACvB9rE,CAAClrB,EAAA4hJ,GAAGY,MAAQoB,EAAW5sD,SACvBvyF,QAAS,mBAIXzE,EAAA4hJ,GAAGmC,MAAQ,GACX/jJ,EAAA4hJ,GAAGmC,MAAMC,OAAS,SAClBhkJ,EAAA4hJ,GAAGmC,MAAME,OAAS,SAClBjkJ,EAAA4hJ,GAAGmC,MAAMG,OAAS,SAClBlkJ,EAAA4hJ,GAAGmC,MAAMI,MAAQ,QAEjBnkJ,EAAA4hJ,GAAGwC,aAAe,EAClBpkJ,EAAA4hJ,GAAGyC,SAAW,cAGdrkJ,EAAA4hJ,GAAG0C,WAAa,CACZtkJ,EAAA4hJ,GAAGO,GAAIniJ,EAAA4hJ,GAAGS,KAAMriJ,EAAA4hJ,GAAGW,KAAMviJ,EAAA4hJ,GAAGY,KAAMxiJ,EAAA4hJ,GAAGG,MAAO/hJ,EAAA4hJ,GAAGK,MAAOjiJ,EAAA4hJ,GAAGC,OAG7D7hJ,EAAA4hJ,GAAG2C,WAAa,CACZvkJ,EAAA4hJ,GAAGO,GAAIniJ,EAAA4hJ,GAAGU,KAAMtiJ,EAAA4hJ,GAAGW,KAAMviJ,EAAA4hJ,GAAGY,KAAMxiJ,EAAA4hJ,GAAGI,MAAOhiJ,EAAA4hJ,GAAGM,MAAOliJ,EAAA4hJ,GAAGC,OAG7D7hJ,EAAA4hJ,GAAG4C,WAAa,CACZxkJ,EAAA4hJ,GAAGO,GAAIniJ,EAAA4hJ,GAAGY,KAAMxiJ,EAAA4hJ,GAAGS,KAAMriJ,EAAA4hJ,GAAGU,KAAMtiJ,EAAA4hJ,GAAGK,MAAOjiJ,EAAA4hJ,GAAGM,MAAOliJ,EAAA4hJ,GAAGE,OAG7D9hJ,EAAA4hJ,GAAG6C,WAAa,CACZzkJ,EAAA4hJ,GAAGO,GAAIniJ,EAAA4hJ,GAAGW,KAAMviJ,EAAA4hJ,GAAGS,KAAMriJ,EAAA4hJ,GAAGU,KAAMtiJ,EAAA4hJ,GAAGG,MAAO/hJ,EAAA4hJ,GAAGI,MAAOhiJ,EAAA4hJ,GAAGE,OAE7D9hJ,EAAA4hJ,GAAG8C,SAAW,CAAC1kJ,EAAA4hJ,GAAGC,MAAO7hJ,EAAA4hJ,GAAGW,MAC5BviJ,EAAA4hJ,GAAG+C,SAAW,CAAC3kJ,EAAA4hJ,GAAGC,MAAO7hJ,EAAA4hJ,GAAGY,MAC5BxiJ,EAAA4hJ,GAAGgD,SAAW,CAAC5kJ,EAAA4hJ,GAAGE,MAAO9hJ,EAAA4hJ,GAAGU,MAC5BtiJ,EAAA4hJ,GAAGiD,SAAW,CAAC7kJ,EAAA4hJ,GAAGE,MAAO9hJ,EAAA4hJ,GAAGS,MAE5BriJ,EAAA4hJ,GAAGkD,UAAY,CACX9kJ,EAAA4hJ,GAAGO,GAAIniJ,EAAA4hJ,GAAGW,KAAMviJ,EAAA4hJ,GAAGY,KAAMxiJ,EAAA4hJ,GAAGU,KAAMtiJ,EAAA4hJ,GAAGS,KACrCriJ,EAAA4hJ,GAAGK,MAAOjiJ,EAAA4hJ,GAAGG,MAAO/hJ,EAAA4hJ,GAAGM,MAAOliJ,EAAA4hJ,GAAGI,MACjChiJ,EAAA4hJ,GAAGC,MAAO7hJ,EAAA4hJ,GAAGE,OAGjB9hJ,EAAA4hJ,GAAGmD,cAAgB,GACnB/kJ,EAAA4hJ,GAAGkD,UAAU53I,QAAQqiD,IAASvvD,EAAA4hJ,GAAGmD,cAAcx1F,GAAQA,IAOvDvvD,EAAA4hJ,GAAGoD,eAAiB,CAChB95H,CAAClrB,EAAA4hJ,GAAGC,OAAQ,GACZ32H,CAAClrB,EAAA4hJ,GAAGW,MAAO,EACXr3H,CAAClrB,EAAA4hJ,GAAGY,MAAO,EACXt3H,CAAClrB,EAAA4hJ,GAAGO,IAAK,GAKbniJ,EAAA4hJ,GAAGqD,eAAiB,CAChB/5H,CAAClrB,EAAA4hJ,GAAGE,OAAQ,GACZ52H,CAAClrB,EAAA4hJ,GAAGU,MAAO,EACXp3H,CAAClrB,EAAA4hJ,GAAGS,MAAO,EACXn3H,CAAClrB,EAAA4hJ,GAAGO,IAAK,GAObniJ,EAAA4hJ,GAAGsD,YAAc,CACbh6H,CAAClrB,EAAA4hJ,GAAGC,OAAQ,CACRttI,EAAG,GAGHC,EAAG,GAGHC,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGE,OAAQ,CACRvtI,EAAGvU,EAAA4hJ,GAAG4C,WAGNhwI,EAAGxU,EAAA4hJ,GAAG6C,WAENhwI,EAAG,GACHC,EAAG,IAIPwW,CAAClrB,EAAA4hJ,GAAGG,OAAQ,CACRxtI,EAAGvU,EAAA4hJ,GAAG4C,WAENhwI,EAAG,GACHC,EAAG,GACHC,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGI,OAAQ,CACRztI,EAAGvU,EAAA4hJ,GAAG4C,WACNhwI,EAAG,GACHC,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG,IAEPwW,CAAClrB,EAAA4hJ,GAAGK,OAAQ,CACR1tI,EAAG,GACHC,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAG,GACHC,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGM,OAAQ,CACR3tI,EAAG,GACHC,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG,IAGPwW,CAAClrB,EAAA4hJ,GAAGO,IAAK,CACL5tI,EAAGvU,EAAA4hJ,GAAG4C,WACNhwI,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGQ,OAAQ,CACR7tI,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAGPwW,CAAClrB,EAAA4hJ,GAAGS,MAAO,CACP9tI,EAAGvU,EAAA4hJ,GAAG4C,WACNhwI,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAG,GACHC,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGU,MAAO,CACP/tI,EAAGvU,EAAA4hJ,GAAG4C,WACNhwI,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG,IAEPwW,CAAClrB,EAAA4hJ,GAAGW,MAAO,CACPhuI,EAAGvU,EAAA4hJ,GAAG4C,WACNhwI,EAAG,GACHC,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGY,MAAO,CACPjuI,EAAG,GACHC,EAAGxU,EAAA4hJ,GAAG6C,WACNhwI,EAAGzU,EAAA4hJ,GAAG0C,WACN5vI,EAAG1U,EAAA4hJ,GAAG2C,YAEVr5H,CAAClrB,EAAA4hJ,GAAGa,MAAO,CACPluI,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,wKCvOX,MAAAmW,EAAAC,EAAAhrB,EAAA,IACAqgC,EAAArgC,EAAA,IAGaE,EAAAq5B,MAAa,GAG1B,MAAakB,GAAbv6B,EAAAu6B,OACAv6B,EAAAq5B,MAAMkB,KAAOA,EAOAv6B,EAAA45B,MAAQmkH,KAAc,cAAcA,EAE7C7yH,YAAYljB,GACJ+1I,GAAahkH,MAAM/xB,GACvBnF,KAAK+B,KAAOoD,EAAKpD,MAAQ,GACzB/B,KAAKsiJ,UAAYn9I,EAAKxE,UAAY,GAG/B0nB,cAAuB,OAAOroB,KAAKsiJ,UACnCj6H,UAAmB,OAAOroB,KAAK+B,KAE/BsmB,YAAY1nB,GACDqnB,EAAApmB,QAAG6V,WAAWsI,QAAQpf,IACvB,EACTX,KAAKsiJ,UAAY3hJ,EAGjBqnB,EAAApmB,QAAGK,IAAI,eAAgB,cACnB,uBAAyBtB,EAAW,KAIzC0nB,QAAQtmB,GACX/B,KAAK+B,KAAOA,EACZimB,EAAApmB,QAAGiE,iBAAiB,wBAAyB,aAAc9D,OAatD5E,EAAA+6B,UAAYgjH,KAAc,cAAcA,EAMjD7yH,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAKs9G,GAAK,KACVt9G,KAAKu9G,GAAK,KACVv9G,KAAK+oG,OAAS,KAGX1gF,KAAKpS,GAAIjW,KAAKs9G,GAAKrnG,EACnBoS,KAAKnS,GAAIlW,KAAKu9G,GAAKrnG,EACnBmS,OAAQ,OAAOroB,KAAKs9G,GACpBj1F,OAAQ,OAAOroB,KAAKu9G,GAEpBl1F,OAAOpS,EAAGC,GACb,OAAOD,IAAMjW,KAAKs9G,IAAMpnG,IAAMlW,KAAKu9G,GAGhCl1F,QACH,MAAO,CAACroB,KAAKs9G,GAAIt9G,KAAKu9G,IAInBl1F,MAAMpS,EAAGC,GACZlW,KAAKs9G,GAAKrnG,EACVjW,KAAKu9G,GAAKrnG,EAIPmS,UACH,OAAOroB,KAAK+oG,OAAOvlF,SAASiL,QAAQzuB,KAAKs9G,GAAIt9G,KAAKu9G,IAI/Cl1F,SAAStQ,GACZ/X,KAAK+oG,OAAShxF,EACdiQ,EAAApmB,QAAGiE,iBAAiB,4BAA6B,cAAekS,GAI7DsQ,aACCroB,KAAK+oG,OACL/oG,KAAK+oG,OAAS,KAGd/gF,EAAApmB,QAAGK,IAAI,kBAAmB,aACtB,uCAILomB,WACH,OAAOroB,KAAK+oG,OAIT1gF,YACH,OAAoB,OAAZroB,KAAKs9G,IAA6B,OAAZt9G,KAAKu9G,IACX,OAAhBv9G,KAAK+oG,WAMR5rG,EAAAw+E,WAAa,CAACu/D,IAAe,cAAcA,EAIpD7yH,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAKw3E,UAAYl6C,EAAAwE,KAAKnjC,OAAO,OAG1B0pB,aACH,GAAIroB,KAAKk1E,YAAYh2E,eAAe,aAAc,CAC9C,MAAM8I,EAAShI,KAAKk1E,YAAYjtE,YAChC,GAAe,OAAXD,EAAkB,OAAOA,EAAOjB,aAExC,OAAO/G,KAAKw3E,UAAUC,OAGnBpvD,eACH,OAAOroB,KAAKw3E,UAGTnvD,aAAaqvD,GAEZ13E,KAAKw3E,UADe,iBAAbE,EACUp6C,EAAAwE,KAAKnjC,OAAO+4E,GAGZA,EAIlBrvD,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAKw3E,UAAYG,EAAIjvE,eAAe/B,QAGjC0hB,SACH,MAAMjkB,EAAM8yB,MAAMzQ,SAElB,OADAriB,EAAIy9B,aAAe7hC,KAAKw3E,UAAU7uE,WAC3BvE,MAMFjH,EAAAu+E,aAAcw/D,KAAc,cAAcA,EAEnD7yH,YAAYljB,GACR+xB,MAAM/xB,GAGHkjB,eACH,OAAOroB,KAAKgiC,SAASy1C,OAGlBpvD,eAAeqvD,GAEd13E,KAAKgiC,SADe,iBAAb01C,EACSp6C,EAAAwE,KAAKnjC,OAAO+4E,GAGZA,EAIjBrvD,iBACH,OAAOroB,KAAKgiC,SAGT3Z,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAKgiC,SAAW21C,EAAI4qE,iBAAiB57I,QAGlC0hB,SACH,MAAMjkB,EAAM8yB,MAAMzQ,SAElB,OADAriB,EAAI69B,eAAiBjiC,KAAKgiC,SAASr5B,WAC5BvE,MAKFjH,EAAA8gG,QAASi9C,KAAc,cAAcA,EAM9C7yH,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAKwiJ,QAAU,EACfxiJ,KAAKyiJ,SAAW,EAChBziJ,KAAK0iJ,YAAc,EAGhBr6H,YAAa,OAAOroB,KAAKwiJ,QAEzBn6H,UAAU/gB,GACbtH,KAAKwiJ,QAAUl7I,EAIZ+gB,aAAe,OAAOroB,KAAKyiJ,SAE3Bp6H,WAAW2V,GACdh+B,KAAKyiJ,SAAWzkH,EAGb3V,gBACH,OAAOroB,KAAK0iJ,YAGTr6H,cAAcrK,GACjBhe,KAAK0iJ,YAAc1kI,EAGhBqK,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK4d,UAAU+5D,EAAIpwE,aACnBvH,KAAK8d,WAAW65D,EAAI55D,cACpB/d,KAAKke,cAAcy5D,EAAI15D,iBAGpBoK,OAAOsvD,GACV,IAAIh2E,EAAMu1B,MAAM/wB,OAAOwxE,GAMvB,OALIh2E,IACAA,EAAM3B,KAAKuH,cAAgBowE,EAAIpwE,aAC3BvH,KAAK+d,eAAiB45D,EAAI55D,cAC1B/d,KAAKie,kBAAoB05D,EAAI15D,iBAE9Btc,EAGJ0mB,WACH,IAAIhkB,EAAM6yB,MAAMvuB,WAGhB,OAFAtE,UAAcrE,KAAKuH,mBAAmBvH,KAAK+d,iBAC3C1Z,UAAcrE,KAAKie,oBAIhBoK,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAInB,OAHA7H,EAAKhB,UAAY5d,KAAKuH,YACtBqX,EAAKd,WAAa9d,KAAK+d,aACvBa,EAAKV,cAAgBle,KAAKie,gBACnBW,MAUFzhB,EAAAs5E,OAAQykE,KAAc,cAAc/9I,EAAA8gG,QAAQi9C,IAErD7yH,YAAYljB,GACR+xB,MAAM/xB,GACNnF,KAAK2iJ,WAAa,IAAIrlH,EAAAwE,KAAK,EAAG,EAAG,GACjC9hC,KAAKs3I,OAAS,EAGXjvH,eAAe5e,GAAQzJ,KAAKs3I,OAAS7tI,EACrC4e,iBAAkB,OAAOroB,KAAKs3I,OAE9BjvH,aACH,GAAIroB,KAAKd,eAAe,aAAc,CAClC,MAAM8I,EAAShI,KAAKiI,YACpB,IAAK+f,EAAApmB,QAAG6D,cAAc,CAACuC,IACnB,OAAOA,EAAOjB,aAGtB,OAAO/G,KAAK2iJ,WAAWlrE,OAGpBpvD,eAAsB,OAAOroB,KAAK2iJ,WAElCt6H,aAAau6H,GACI,iBAATA,EACP5iJ,KAAK2iJ,WAAarlH,EAAAwE,KAAKnjC,OAAOikJ,GAET,iBAATA,IACZ5iJ,KAAK2iJ,WAAaC,GAInBv6H,KAAKsvD,GACRzgD,MAAM5S,KAAKqzD,GACX33E,KAAK6iJ,eAAelrE,EAAI5vE,kBACxB,MAAM0wI,EAAM9gE,EAAIjvE,eAAe/B,QAC/B3G,KAAK6hC,aAAa42G,GAGfpwH,OAAOsvD,GACV,IAAIh2E,EAAMu1B,MAAM/wB,OAAOwxE,GAKvB,OAJIh2E,IAEAA,GADAA,EAAM3B,KAAK0I,eAAevC,OAAOwxE,EAAIjvE,kBACxB1I,KAAK+H,mBAAqB4vE,EAAI5vE,kBAExCpG,EAGJ0mB,WACH,IAAIhkB,EAAM6yB,MAAMvuB,WAGhB,OAFAtE,GAAO,QAAUrE,KAAK0I,eAAeC,WACrCtE,GAAO,OAASrE,KAAK+H,iBAIlBsgB,SACH,MAAMzJ,EAAOsY,MAAMzQ,SAGnB,OAFA7H,EAAKikI,eAAiB7iJ,KAAK+H,iBAC3B6W,EAAKijB,aAAe7hC,KAAK0I,eAAeC,WACjCiW,qFC1Uf,MAAMkkI,EAAc,KAYpB,MAAa/tC,EAIF1sF,mBAAmB06H,EAAOv0G,EAAWw0G,EAAW,IACnD,MAAM5+I,EAAM,IAAIoqC,EAAUu0G,EAAME,QAChC,IAAK,MAAMrkJ,KAAOmkJ,EACd,GAAIA,EAAM7jJ,eAAeN,GAAM,CAC3B,MAAMN,EAAQykJ,EAAMnkJ,GACpB,GAAIm2G,EAAWmuC,YAAY5kJ,GACvB8F,EAAIxF,GAAON,OAEV,GAAIiV,MAAMC,QAAQlV,GAAQ,CAC3B,MAAMiY,EAAM,GACZnS,EAAIiG,QAAQvE,IACRyQ,EAAI3Q,KAAKmvG,EAAWouC,YAAYr9I,EAAK0oC,EAAWw0G,MAEpD5+I,EAAIxF,GAAO2X,OAENjY,EAAMyY,OACNisI,EAAS9jJ,eAAeZ,EAAMyY,QAI/B3S,EAAIxF,GAAOokJ,EAAS1kJ,EAAMyY,QAH1B3S,EAAIxF,GAAOm2G,EAAWouC,YAAY7kJ,EAAOkwC,EAAWw0G,GAOxD5+I,EAAIxF,GAAON,EAMvB,cAFO8F,EAAI6+I,OAEJ7+I,EAGJikB,aAAa+6H,GAChB,OAAIA,EACOA,EAAO9kJ,MAEXwkJ,EAGJz6H,wBACH,OAAO0sF,EAAWE,KAGf5sF,oBAAoBjkB,GACvB,OAAOrG,OAAOslJ,eAAej/I,GAAKmhD,YAAY3nD,KAG3CyqB,mBAAmBjkB,GACtB,MAAsB,iBAARA,EAGXikB,iBAAiBjkB,GACpB,GAAI2wG,EAAWmuC,YAAY9+I,GACvB,OAAOA,EAEN,GAAImP,MAAMC,QAAQpP,GAAM,CACzB,MAAMmS,EAAM,GAIZ,OAHAnS,EAAIiG,QAAQvE,IACRyQ,EAAI3Q,KAAKmvG,EAAWuuC,UAAUx9I,MAE3ByQ,EAEN,OAAInS,EAAI2S,OACF3S,EAAIk/I,YAENl/I,EAAIqiB,OACFriB,EAAIqiB,SAENriB,EAAIwS,QACF,CAACA,QAASxS,EAAI9F,MAAMwY,SAGpB1S,EAMfikB,cACIroB,KAAK+W,OAASg+F,EAAWE,KAGtB5sF,QAAiB,OAAOroB,KAAK+W,OAC7BsR,MAAMxR,GAAmB7W,KAAK+W,OAASF,EAEvCwR,YACH,MAAO,CACHzR,QAAS,CACL7U,KAAM,SACN8U,GAAI7W,KAAK+W,SAKdsR,eACH,MAAMk7H,EAAiBvjJ,KAAKyW,YAE5B,OADA8sI,EAAOjlJ,MAAQ0B,KACRujJ,GAtGfpmJ,EAAA43G,aAwHAA,EAAWE,GAAK,qKCpIhB,MAAAjtF,EAAAC,EAAAhrB,EAAA,IAKMumJ,EAA6B,GAQ7BC,EAAe,KAIrBtmJ,EAAA0oH,OAAA,MAOIx9F,cACIroB,KAAKusH,QAAU,GACfvsH,KAAK0jJ,YAAc,GACnB1jJ,KAAK2jJ,gBAAkB,GACvB3jJ,KAAK4jJ,gBAAkBH,EAKpBp7H,aAAatmB,GAChB/B,KAAK0jJ,YAAY3hJ,IAAQ,EAItBsmB,gBAAgBtmB,GACf/B,KAAK0jJ,YAAY3hJ,WACV/B,KAAK0jJ,YAAY3hJ,GAKzBsmB,QAAQpe,GACX,GAAIjK,KAAKusH,QAAQrtH,eAAe,YACdc,KAAKusH,QAAQnpF,QAAQrjB,QAAQ9V,IAC9B,EAAI,OAAO,EAG5B,IAAKjK,KAAK6kH,SAAS56G,GAAQ,CACvB,GAAIjK,KAAK0jJ,YAAYz5I,EAAMzJ,WACvB,OAAO,EAEX,GAAIyJ,EAAM8S,WACN,OAAO/c,KAAK0jJ,YAAY3/I,OAGhC,OAAO,EAIJskB,SAASpe,GACZ,QAAIjK,KAAKusH,QAAQrtH,eAAe,YACdc,KAAKusH,QAAQvF,QAAQjnG,QAAQ9V,IAC3B,EAMjBoe,UAAUpe,GACTjK,KAAKyK,QAAQR,IACbjK,KAAK6jJ,YAAY55I,GAEhBjK,KAAKusH,QAAQrtH,eAAe,aAC7Bc,KAAKusH,QAAQvF,QAAU,IAEtBhnH,KAAK6kH,SAAS56G,IACfjK,KAAKusH,QAAQvF,QAAQphH,KAAKqE,GAI3Boe,iBAAiBpe,GACfjK,KAAKusH,QAAQznG,OAAO9kB,KAAKusH,QAAQznG,KAAO,IAC7C9kB,KAAKusH,QAAQznG,KAAK7a,EAAM6M,SAAW,CAACb,EAAGhM,EAAM0R,OAAQzF,EAAGjM,EAAM+R,OAC1DjE,MAAO9N,EAAMP,WAAWoN,SAGzBuR,QAAQxR,GACX,SAAI7W,KAAKusH,QAAQznG,OAAQ9kB,KAAKusH,QAAQznG,KAAKjO,IAMxCwR,YAAYpe,GACf,OAAIjK,KAAKusH,QAAQznG,KAAK7a,EAAM6M,SACjB9W,KAAKusH,QAAQznG,KAAK7a,EAAM6M,SAE5B,KAIJuR,SAASpe,GACZ,IAAK+d,EAAApmB,QAAGoe,QAAQ/V,GAAQ,CACpB,MAAM2U,EAAOC,KAAKC,UAAU7U,GAC5B+d,EAAApmB,QAAGK,IAAI,SAAU,WACb,kCAAoC2c,GAEvC5e,KAAKyK,QAAQR,KACVjK,KAAK6kH,SAAS56G,IACdjK,KAAK8jJ,aAAa75I,GAEjBjK,KAAKusH,QAAQrtH,eAAe,aAC7Bc,KAAKusH,QAAQnpF,QAAU,IAE3BpjC,KAAKusH,QAAQnpF,QAAQx9B,KAAKqE,GACtBjK,KAAK2jJ,gBAAgBpiJ,OAAS,IAC9BvB,KAAK2jJ,gBAAkB,KAK5Bt7H,YAAYpe,GACf,GAAIjK,KAAKusH,QAAQrtH,eAAe,WAAY,CACxC,MAAMggB,EAAQlf,KAAKusH,QAAQnpF,QAAQrjB,QAAQ9V,GACvCiV,GAAS,GACTlf,KAAKusH,QAAQnpF,QAAQ1W,OAAOxN,EAAO,IAKxCmJ,aAAape,GAChB,GAAIjK,KAAKusH,QAAQrtH,eAAe,WAAY,CACxC,MAAMggB,EAAQlf,KAAKusH,QAAQvF,QAAQjnG,QAAQ9V,GACvCiV,GAAS,GACTlf,KAAKusH,QAAQvF,QAAQt6F,OAAOxN,EAAO,IAKxCmJ,iBACH,OAAOroB,KAAKusH,QAAQnpF,SAAWogH,EAG5Bn7H,kBACH,OAAOroB,KAAKusH,QAAQvF,SAAWw8B,EAK5Bn7H,eAAepe,GAClB,MAAM0yG,EAAiB1yG,EAAMq5B,WAAWs5E,YAClCx5E,EAAUu5E,EAAOw4B,iBAAiBrsH,QACxC9oB,KAAKusH,QAAQnpF,QAAUA,EACvB,MAAM4jF,EAAUrK,EAAOonC,kBAAkBj7H,QACzC9oB,KAAKusH,QAAQvF,QAAUA,EACvBhnH,KAAK0jJ,YAAc3lJ,OAAO4kF,OAAO,GAAIg6B,EAAO+mC,aAIzCr7H,qBAAqBpe,GACnBjK,KAAK88G,oBAAoB7yG,IAC1BjK,KAAK2jJ,gBAAgB/9I,KAAKqE,GAI3Boe,gBAAgBpe,GACnB,OAAOjK,KAAK4jJ,kBAAoB35I,EAAM6M,QAKnCuR,gBAAgBpe,GAEfjK,KAAK4jJ,gBADL35I,EACuBA,EAAM6M,QAKN2sI,EAKxBp7H,oBAAoBpe,GAEvB,OAAkB,IADJjK,KAAK2jJ,gBAAgB5jI,QAAQ9V,GAIxCoe,SACH,MAAMjkB,EAAW,CACb4/I,WAAYjmJ,OAAO6qB,KAAK5oB,KAAK0jJ,cAcjC,OAZI1jJ,KAAKusH,QAAQrtH,eAAe,aAC5BkF,EAAIg/B,QAAUpjC,KAAKusH,QAAQnpF,QAAQ/tB,IAAIumG,GAASA,EAAM9kG,UAEtD9W,KAAKusH,QAAQrtH,eAAe,aAC5BkF,EAAI4iH,QAAUhnH,KAAKusH,QAAQvF,QAAQ3xG,IAAIumG,GAASA,EAAM9kG,UAEtD9W,KAAK4jJ,iBAAmB,IACxBx/I,EAAI6/I,eAAiBjkJ,KAAK4jJ,iBAE1B5jJ,KAAKusH,QAAQrtH,eAAe,UAC5BkF,EAAI0gB,KAAO9kB,KAAKusH,QAAQznG,MAErB1gB,gVChNf,MAAA4jB,EAAAC,EAAAhrB,EAAA,IACAq4I,EAAAr4I,EAAA,IACAszG,EAAAtzG,EAAA,IAEAinJ,EAAA9vH,EAAAn3B,EAAA,KACAknJ,EAAA/vH,EAAAn3B,EAAA,MACAktB,EAAAiK,EAAAn3B,EAAA,KAEAogB,EAAApgB,EAAA,GACAm3E,EAAAn3E,EAAA,GAGAmgC,EAAAngC,EAAA,IACA0mH,EAAA1mH,EAAA,IAQMwrB,EAAMpL,EAAAC,OAAOC,SACbizF,EAASD,EAAAE,KAAKD,QAEdoT,oBACFA,EAAmBwgC,mBACnBA,GAAuBD,EAErBE,EACF,8DACEC,EACF,kEAEEC,EAAgBxgJ,IAGlB,OADAikB,EAAApmB,QAAGslB,QADS,kCAEL,CACH8rF,OAAQtB,IACJ,MAAMvsG,EAAO,CACTmO,IAAKk9F,EAAO6C,OAAO3B,GACnBl2F,IAAK,MAET,OAAIrW,EAAKmO,KACLnO,EAAKqW,IAAMzX,EACJ,KACH,MAAMygJ,EAAW,IAAIr6H,EAAU4uD,KAC/ByrE,EAAS9jE,QAAQv7E,GACjBpB,EAAOuc,IAAIkkI,KAGZ,MAEX9N,SAAU,KAAM,IAMxB,MAAa+N,UAAqB9gC,EAAAkC,OAI9Bx9F,YAAYtkB,GACRmzB,QACAl3B,KAAK4jJ,gBAAkB,KACvB5jJ,KAAK0kJ,QAAU3gJ,EAIZskB,gBAAgBpe,GACf+b,OAAOC,UAAUhc,GACjBjK,KAAK4jJ,gBAAkB35I,EAElBA,IACLjK,KAAK4jJ,gBAAmB35I,EAAoB6M,SAI7CuR,kBACH,OAAOroB,KAAK4jJ,gBAITv7H,gBAAgBpe,GACnB,OAAOjK,KAAK4jJ,kBAAoB35I,EAAM6M,QAInCuR,QAAQpe,GACX,OAAIA,EAAM8S,cAGN9S,EAAMf,IAAI,gBACPe,EAAMq5B,WAAWs5E,YAAYnyG,QAAQzK,KAAK0kJ,UAG9Cr8H,SACH,MAAMzJ,EAAY,GAIlB,OAHKoJ,EAAApmB,QAAG6D,cAAc,CAACzF,KAAK4jJ,oBACxBhlI,EAAK0yH,gBAAkBtxI,KAAK4jJ,iBAEzBhlI,GA3CfzhB,EAAAsnJ,eAiDA,MAAME,EAAS,SACTC,EAAc,cACdC,EAAY,YAEZC,EAAe,IACfC,EAAoB,KAG1B,MAAMC,EAQF38H,YAAYyW,GACR9+B,KAAKioH,OAASnpF,EACd9+B,KAAKilJ,YAAc,GACnBjlJ,KAAKklJ,aAAe,EACpBllJ,KAAKmlJ,OAASR,EAGXt8H,WACH,OAAOroB,KAAKioH,OAAOjC,OAGhB39F,cACH,OAAOroB,KAAKmlJ,SAAWP,EAGpBv8H,YACH,OAAOroB,KAAKmlJ,SAAWN,EAGpBx8H,aACCroB,KAAKolJ,iBACHplJ,KAAKklJ,YACHllJ,KAAKklJ,aAAellJ,KAAKilJ,YAAY1jJ,SACrCvB,KAAKklJ,YAAc,GAEvBllJ,KAAKqlJ,iBAAiBrlJ,KAAKilJ,YAAYjlJ,KAAKklJ,eAI7C78H,aACCroB,KAAKolJ,iBACHplJ,KAAKklJ,YACHllJ,KAAKklJ,YAAc,IACnBllJ,KAAKklJ,YAAcllJ,KAAKilJ,YAAY1jJ,OAAS,GAEjDvB,KAAKqlJ,iBAAiBrlJ,KAAKilJ,YAAYjlJ,KAAKklJ,eAI7C78H,eACHroB,KAAKmlJ,OAASN,EAGXx8H,cACHroB,KAAKmlJ,OAASR,EACd3kJ,KAAKslJ,cAAgBP,EAGlB18H,iBACHroB,KAAKmlJ,OAASP,EACd5kJ,KAAKilJ,YAAcjlJ,KAAKulJ,gBACxBvlJ,KAAKklJ,YAAcllJ,KAAKwlJ,qBAAqBxlJ,KAAKilJ,aAClDjlJ,KAAKqlJ,iBAAiBrlJ,KAAKilJ,YAAYjlJ,KAAKklJ,cAGzC78H,kBACHroB,KAAKilJ,YAAc,GACnBjlJ,KAAKmlJ,OAASR,EACd3kJ,KAAKslJ,cAAgBP,EACrB/kJ,KAAKklJ,aAAe,EAGjB78H,gBACH,MAAMo9H,EAAQ,GACRtuG,EAAen3C,KAAKioH,OAAOxyB,eAC3BxrF,EAAQjK,KAAKioH,OAAOjC,OAM1B,OALmBh+F,EAAApmB,QAAGoI,sBAClBC,EAAOktC,GACA9sC,QAAQvK,IACf2lJ,EAAM3lJ,EAAK6b,OAAS,IAAM7b,EAAKkc,QAAUlc,IAEtC/B,OAAOutC,OAAOm6G,GAIlBp9H,iBAAiB+5D,GACpB,GAAIA,EACA,GAAK7uE,MAAMC,QAAQ4uE,GAefpiF,KAAKslJ,cAAgBljE,MAfE,CACvB,MAAMtiF,EAAOsiF,EAEb,GADApiF,KAAKslJ,cAAgB,CAACxlJ,GAClBE,KAAK0lJ,cAAe,CACpB,MAAMz7I,EAAQjK,KAAKmtH,YACZgO,EAAIC,GAAM,CAACt7H,EAAK6b,OAAQ7b,EAAKkc,SAC7B2pI,EAAIC,GAAM,CAAC37I,EAAM0R,OAAQ1R,EAAM+R,QAEhC8qG,EADO1yC,EAAA7pD,SAASuJ,aAAa6xH,EAAIC,EAAIzqB,EAAIC,GACxB/lH,IAAIiW,GACvBrhB,EAAMP,WAAW8Z,SAASiL,QAAQnD,EAAG,GAAIA,EAAG,KAEhDtrB,KAAKslJ,cAAgBtlJ,KAAKslJ,cAAcj0I,OAAOy1G,KASxDz+F,mBACH,OAAOroB,KAAKslJ,cAGTj9H,YACH,OAAIroB,KAAK6lJ,aAAe7lJ,KAAK0lJ,gBACrB1lJ,KAAKslJ,eAAiBtlJ,KAAKslJ,cAAc/jJ,OAAS,EAC3CvB,KAAKslJ,cAAc,GAG3BtlJ,KAAKslJ,cAGTj9H,gBACH,OAAIroB,KAAKslJ,cAAc/jJ,OAAS,EACrBvB,KAAKslJ,cAAc,GAEvB,KAGJj9H,qBAAqB+5D,GACxB,MACM0jE,EADS9lJ,KAAKioH,OAAOrL,YACLmpC,kBACtB,IAAK,IAAI1oJ,EAAI,EAAGA,EAAI+kF,EAAM7gF,OAAQlE,IAAK,CACnC,MAAMsG,EAASy+E,EAAM/kF,GAAGyD,QAAQ,UAChC,IAAK,IAAI0J,EAAI,EAAGA,EAAI7G,EAAOpC,OAAQiJ,IAC/B,GAAI7G,EAAO6G,GAAGsM,UAAYgvI,EACtB,OAAOzoJ,EAInB,OAAO,EAGJgrB,WAAWqpF,GACd,MAAMznG,EAAQjK,KAAKioH,OAAOjC,OACpB7uE,EAAen3C,KAAKioH,OAAOxyB,eACjC,GAAIztE,EAAApmB,QAAG6D,cAAc,CAACisG,IAClB1xG,KAAKqlJ,iBAAiBp7I,EAAMwkB,gBAE3B,GAAIijF,IAASnB,EAAAE,KAAKuB,IAAIm5B,WAAY,CACnC,MAAMnkB,EAAU5pF,EAAAyK,MAAM08E,qBAAqBt6G,EACvCktC,GACJn3C,KAAKqlJ,iBAAiBr+B,OAErB,CACD,MAAMlnH,EAAOE,KAAKslJ,cAAc,GAC1BjwI,EAAMpL,EAAMP,WAAW8Z,UACtBvN,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,SAC3B6c,EAAMC,GAAQ03E,EAAOw1C,QAAQt0C,EAAMz7F,EAAGC,GAI7C,GAHIb,EAAIwY,MAAMgL,EAAMC,IAChB94B,KAAKqlJ,iBAAiBhwI,EAAIoZ,QAAQoK,EAAMC,IAExC94B,KAAK6lJ,YAAa,CAClB,MAAMI,EAAcjmJ,KAAKkpF,YACnBhqE,EAAQi4B,EAAap3B,QAAQkmI,GACnC,IAAI5hJ,EAAM,wBACV,GAAI6a,GAAS,EAAG,CACZ,MAAMq1G,EAAQ0xB,EAAMC,eACpB7hJ,EAAM,GACNkwH,EAAMlqH,QAAQzM,IACVyG,cAAkBzG,QAEtBoqB,EAAApmB,QAAGslB,QAAQ7iB,QAGX2jB,EAAApmB,QAAGslB,QAAQ7iB,KAOpBgkB,oBACH,QAAIroB,KAAKslJ,iBAGAtlJ,KAAKilJ,aACHjlJ,KAAKolJ,aAKb/8H,aACH,OAAOroB,KAAKilJ,YAAY1jJ,OAAS,EAG9B8mB,WAAWqpF,GACd,GAAIlB,EAAO46B,aAAa15B,GAAO,CAC3B,GAAI1xG,KAAK0lJ,cAAe,CACpB,MAAM5lJ,EAAOE,KAAKkpF,YAElB,OADAlpF,KAAKw6I,kBACD16I,EACOE,KAAKioH,OAAOk+B,cACf,CAAC9mI,IAAK,UAAWD,OAAQtf,KAEjCkoB,EAAApmB,QAAGslB,QAAQ,+BACJlnB,KAAKioH,OAAOm+B,YAInB,OADApmJ,KAAK2zG,iBACE3zG,KAAKioH,OAAOm+B,WAGtB,OAAIpmJ,KAAK0lJ,eACNl1C,EAAOyC,aAAavB,GACpB1xG,KAAK8zG,aAEAtD,EAAO0C,aAAaxB,GACzB1xG,KAAKg0G,aAGLh0G,KAAKw6I,kBAEFx6I,KAAKioH,OAAOm+B,YAEhBtB,EAIJz8H,kBACH,MAAMvoB,EAAOE,KAAKkpF,YACZj/E,EAAQjK,KAAKioH,OAAOjC,OAC1B,GAAIlmH,GAAQA,EAAK6b,KAAM,CACnB,MAAOw/G,EAAIC,GAAM,CAACt7H,EAAK6b,OAAQ7b,EAAKkc,SAC7B2pI,EAAIC,GAAM,CAAC37I,EAAM0R,OAAQ1R,EAAM+R,QAChCy9D,EAAOrF,EAAA7pD,SAASuJ,aAAa6xH,EAAIC,EAAIzqB,EAAIC,GAGzC5zH,EADQyC,EAAMxC,WACEqhH,YAAY,WAClC,GAAIthH,EAAS,CACT,MAAM6+I,EAAYr+H,EAAApmB,QAAG4H,gBAAgBS,EAAOzC,GAC5C,GAAKiyE,EAAKl4E,OAAS,GAAM8kJ,EACrB,OAAO,GAInB,OAAO,GAYf,MAAMC,EAMFj+H,YAAYyW,GACR9+B,KAAKioH,OAASnpF,EACd9+B,KAAKgmH,OAASlnF,EAAMknF,OACpBhmH,KAAKumJ,OAAS,GAMXl+H,QAAQuU,GACX,MAAO3mB,EAAGC,GAAKlW,KAAKgmH,OAAOpqG,QAErB/E,EADQ7W,KAAKgmH,OAAOt8G,WACToN,QACX0vI,EAAsB,CAAC3vI,KAAIZ,IAAGC,KAChC0mB,IAAM4pH,EAAQ5pH,IAAMA,GACnB58B,KAAKumJ,OAAO1vI,KAAM7W,KAAKumJ,OAAO1vI,GAAM,IACpC7W,KAAKymJ,WAAW5vI,EAAIZ,EAAGC,KACxBlW,KAAKumJ,OAAO1vI,GAAIjR,KAAK4gJ,GACrBx+H,EAAApmB,QAAGslB,QAAQ,0CAKZmB,UACH,MAAMxR,EAAK7W,KAAKgmH,OAAOt8G,WAAWoN,QAC5B4vI,EAAW1mJ,KAAKumJ,OAAO1vI,IAAO,GAC9B8vI,EAAiBD,EAASrxI,IAAIuxI,IAChC,MAAM3wI,EAACA,EAACC,EAAEA,GAAK0wI,EAKTC,EAFS7mJ,KAAKioH,OAAO6+B,cAAczc,KAEhBxrI,KAAK,KAAM0xG,EAAAE,KAAKuB,IAAIq4B,KAAMp0H,EAAGC,GAGtD,MAAO,CADSlW,KAAK+mJ,eAAeH,GACnBC,KAGfG,EAAiBN,EAASrxI,IAAIuxI,IAChC,MAAM3wI,EAACA,EAACC,EAAEA,GAAK0wI,EACTK,EAASL,EAAK/vI,GAGpB,MAAO,CAFS7W,KAAK+mJ,eAAeH,GAClB5mJ,KAAKknJ,WAAWroJ,KAAKmB,KAAMinJ,EAAQhxI,EAAGC,MAItD+6F,EAAO,IAAIqkC,EAAA5kC,KAAKmE,UAOtB,OANA5D,EAAKjjF,QAAQuiF,EAAAE,KAAKuB,IAAIy6B,OAAQ,CAAC,cAAe6I,EAAA5kC,KAAKG,aAEnDI,EAAKk2C,SAAS,GAAIR,GAClB11C,EAAKk2C,SAAS,SAAUH,GACxB/1C,EAAKm2C,cAAc,SAAU72C,EAAAE,KAAKuB,IAAIy6B,QACtCx7B,EAAK0D,OAAO,0BAA2B,UAChC1D,EAIJ5oF,WAAWxR,EAAIZ,EAAGC,GACrB,GAAIlW,KAAKumJ,OAAO1vI,GAAK,CACjB,MAAMqI,EAAQlf,KAAKumJ,OAAO1vI,GAAI2V,UAAUpoB,GACpCA,EAAIyS,KAAOA,GAAMzS,EAAI6R,IAAMA,GAAK7R,EAAI8R,IAAMA,GAE1CgJ,GAAS,GACTlf,KAAKumJ,OAAO1vI,GAAI6V,OAAOxN,EAAO,IAKnCmJ,QAAQg/H,GACX,MAAMnoI,EAAQqxF,EAAAE,KAAKO,YAAYq2C,GAC/B,OAAIrnJ,KAAKumJ,OAAOhlJ,QAAU2d,EACflf,KAAKumJ,OAAOrnI,GAEhB,KAGJmJ,eAAeu+H,GAClB,MAAM3wI,EAACA,EAACC,EAAEA,GAAK0wI,EACf,IAAIU,KAAarxI,MAAMC,IACvB,GAAI0wI,EAAKhqH,IAAM0qH,OAAeV,EAAKhqH,UAC9B,CAED,MAAM98B,EAAOE,KAAKgmH,OAAOt8G,WAAW8Z,SAASiL,QAAQxY,EAAGC,GACxD,GAAIpW,EAAKk+G,cAAe,CAGpB,GADAspC,GAAW,IADExnJ,EAAK6tB,cAAc,GACVjsB,UAClB5B,EAAKg2C,gBAAiB,CACtB,MACM1d,EADOt4B,EAAKi2C,gBACO7c,iBACzB,GAAId,EAAa,CACb,MAAM7S,EAAS6S,EAAY/hB,YACvBkP,IACA+hI,GAAW,MAAQ/hI,EAAO7jB,kBAKjC5B,EAAKwiG,aACVglD,GAAW,IAAMxnJ,EAAK4a,WAAW,GAAGhZ,WAG5C,OAAO4lJ,EAGJj/H,WAAWxR,EAAIZ,EAAGC,GAKrB,OAJiBlW,KAAKumJ,OAAO1vI,GACN2V,UAAU/uB,GAC7BA,EAAEwY,IAAMA,GAAKxY,EAAEyY,IAAMA,IAET,EAGbmS,SACH,OAAOroB,KAAKumJ,OAGTl+H,SAASzJ,GACZ5e,KAAKumJ,OAAS3nI,GAKtB,MAAM2oI,EAAgB,KAItBpqJ,EAAA+rH,YAAA,cAAiC9rF,EAAAuoF,cA2B7Bt9F,YAAYpe,GACRitB,MAAMjtB,GAlBFjK,KAAAwnJ,iBAAmB,KAmBvBxnJ,KAAK8mJ,cAAgB,GACrB9mJ,KAAKq7F,MAAQ,SACbr7F,KAAK4lH,QAAU,IAAI6+B,EAAax6I,GAChCjK,KAAK4O,OAAS,EAEd5O,KAAKwnJ,iBAAmB,KACxBxnJ,KAAKynJ,cAAe,EACpBznJ,KAAK0nJ,eAAiB,EAEtB1nJ,KAAK2nJ,gBAAiB,EACtB3nJ,KAAK4nJ,iBAAmB,KACxB5nJ,KAAK6nJ,iBAAkB,EAEvB7nJ,KAAK8nJ,WAAa9/H,EAAApmB,QAAGiO,aAErB7P,KAAK+nJ,KAAO,IAAI/C,EAAahlJ,MAC7BA,KAAKgoJ,UAAY,IAAI1B,EAAStmJ,MAE9BA,KAAKmoC,OAAS,CAACrjB,KAAMyiI,GAGrBvnJ,KAAKioJ,YAAc,CACfrwE,WAAY,CACRh6D,UAAW,EACXE,WAAY,EACZI,cAAe,GAEnBw6D,UAAW,CACPP,SAAU,EACVL,YAAa,EACbG,aAAc,EACdD,YAAa,EACbD,WAAY,EACZK,SAAU,IAKf/vD,UAAW,OAAOroB,KAAKq7F,MACvBhzE,QAAQtmB,IAERsmB,WACH,OAAOroB,KAAKgmH,OAGT39F,SAASpe,GACZjK,KAAKgmH,OAAS/7G,EAKXoe,eAAeqpF,EAAMxgD,GACxBlxD,KAAK8mJ,cAAcp1C,GAAQxgD,EAGxB7oC,YAAa,OAAOroB,KAAK4lH,QAGzBv9F,oBACHroB,KAAK6nJ,iBAAkB,EACnB7nJ,KAAKgmH,OAAO98G,IAAI,cAChBlJ,KAAKgmH,OAAO9nH,IAAI,aAAai6E,SAAS,GAKvC9vD,mBAAoB,OAAOroB,KAAK6nJ,gBAEhCx/H,eAAehkB,GAGlB,OAFArE,KAAK4O,OAAS,EACdoZ,EAAApmB,QAAG2lB,SAASljB,GACL+/I,EAIJ/7H,cACH,QAAIroB,KAAK4nJ,kBACE5nJ,KAAK4nJ,iBAAiBlR,WAM9BruH,UACH,OAAIroB,KAAK4nJ,kBACD5nJ,KAAK4nJ,iBAAiBlR,WACf12I,KAAK4nJ,iBAAiBlzC,UAG9B,KAIJrsF,WAEH,OADAroB,KAAK4O,OAAS,EACPw1I,EAIJ/7H,eAAwB,OAAOroB,KAAK8nJ,WAGpCz/H,gBACH,GAAIroB,KAAK6nJ,gBACL7nJ,KAAKkoJ,wBAEJ,CACDloJ,KAAK6nJ,iBAAkB,EACvB,MAAMM,EAAYnoJ,KAAKgmH,OAAO9nH,IAAI,SAAS+xD,WACrCm4F,EAAalhJ,KAAK4C,MAAM,GAAMq+I,GACpCnoJ,KAAKgmH,OAAO9nH,IAAI,aAAai6E,SAASiwE,IAKvC//H,kBACHroB,KAAK8nJ,YAAc,EACf9nJ,KAAK8nJ,YAAc9/H,EAAApmB,QAAG8V,OAAOnW,SAC/BvB,KAAK8nJ,WAAa9/H,EAAApmB,QAAGiO,cAMpBwY,0BAA0BqJ,GAC7B,MAAM40F,EAAU50F,EAAS5wB,QAAQ,SAAS,GACpC0hH,EAAW9wF,EAASzR,YAAY,QAAQ,GACxCooI,EAAS7lC,EAAS8lC,sBAAsBhiC,GAS9CtmH,KAAK0nJ,eAAiB,EACtB1nJ,KAAKynJ,cAAe,EACpBznJ,KAAKwnJ,iBATmB,MACpB,MAAMe,EAAQ,IAAIp+H,EAAUm4D,YAC5BimE,EAAM7nE,QAAQ,CAAC55E,KAAMw/G,EAASkiC,MAAOxoJ,KAAKgmH,OACxC/iH,KAAMu/G,EAAUimC,OAAQjmC,EAASkmC,kBACnC1oJ,KAAKgmH,OAAO1lG,IAAIioI,KAMpBvgI,EAAApmB,QAAGslB,QAAQ,oBAAwBo/F,EAAQ5kH,UAAY,QACnD2mJ,EAAS,eAIVhgI,kBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SACxByqJ,EAAS3oJ,KAAKgmH,OAAO9nH,IAAI,UAC/B,IAAIkqJ,EAAa,EACbQ,EAAc,EACdC,EAAc,EAEd7oJ,KAAK8nJ,aAAe9/H,EAAApmB,QAAGkO,YACvBs4I,EAAalhJ,KAAK4B,MAAM,GAAMq3F,EAAMlwC,YAEpC24F,GADAA,GAAe1hJ,KAAK4B,MAAM,GAAM6/I,EAAOphJ,eACV,GAAK,EAAIqhJ,EACtCC,GAAe,GAEV7oJ,KAAK8nJ,aAAe9/H,EAAApmB,QAAGmO,aAC5Bq4I,GAAclhJ,KAAK4B,MAAM,GAAMq3F,EAAMlwC,YAErC24F,EAA8B,KAD9BA,EAAc1hJ,KAAK4B,MAAM,GAAM6/I,EAAOphJ,cACJ,EAAIqhJ,EACtCC,EAAc,GAElB7oJ,KAAKgmH,OAAO9nH,IAAI,aAAai6E,SAASiwE,GACtCpoJ,KAAKgmH,OAAO9nH,IAAI,cAAc0f,UAAUgrI,GACxC5oJ,KAAKgmH,OAAO9nH,IAAI,cAAci0I,UAAU0W,GAKrCxgI,cAAcjkB,GAEjB,OADApE,KAAKkoJ,oBACG9jJ,EAAIib,KACR,IAAK,SAAU,OAAO,IAAI8kI,EAAI2E,UAAU9oJ,MAAM+oJ,QAAQ3kJ,GACtD,IAAK,UAAW,OAAO,IAAI+/I,EAAI6E,WAAWhpJ,MAAM+oJ,QAAQ3kJ,GACxD,IAAK,MAAO,OAAO,IAAI+/I,EAAI8E,WAAWjpJ,MAAM+oJ,QAAQ3kJ,GACpD,IAAK,OAAQ,OAAO,IAAI+/I,EAAI+E,YAAYlpJ,MAAM+oJ,QAAQ3kJ,GACtD,IAAK,QAAS,OAAO,IAAI+/I,EAAIgF,aAAanpJ,MAAM+oJ,QAAQ3kJ,GACxD,IAAK,UACD,OAAO,IAAI+/I,EAAIiF,eAAeppJ,MAAM+oJ,QAAQ3kJ,GAChD,IAAK,cACD,OAAO,IAAI+/I,EAAIkF,cAAcrpJ,MAAM+oJ,QAAQ3kJ,GAC/C,QAAS,MAAO,QAKjBikB,cACHroB,KAAK4O,OAAS,EACd,IAAK,MAAM42B,KAAYxlC,KAAKioJ,YACxB,GAAIziH,EAAU,CACV,MAAM8jH,EAAUtpJ,KAAKioJ,YAAYziH,GACjC,IAAK,MAAM+jH,KAAWD,EAClB,GAAIC,EAAS,CACT,MAAMC,EAAcF,EAAQC,GACxBvpJ,KAAKgmH,OAAO98G,IAAIs8B,IAChBxlC,KAAKgmH,OAAO9nH,IAAIsnC,GAAU+jH,GAASC,KAUpDnhI,kBACH,MACMohI,EADsBrsH,EAAAyK,MAAMi8E,oBAAoB9jH,KAAKgmH,QACrB77G,OAAOzM,GAAKA,EAAEs4F,WACpD,GAAyB,IAArByzD,EAAUloJ,OACV,OAAOvB,KAAK0pJ,iBAAiBD,EAAU,IAEtC,GAAIA,EAAUloJ,OAAS,EAAG,CAE3B,MAAM6gH,EAAW35F,EAAIjL,aAAaisI,GAClC,OAAOzpJ,KAAK0pJ,iBAAiBtnC,GAGjC,OAAOpiH,KAAK2pJ,eAAe,uCAGxBthI,iBAAiB+5F,GACpB,GAAIA,EAAU,CACV,MAAM1+G,EAAO0+G,EAASniG,YAAY,QAAQ,GAC1C,GAAIvc,EAAM,CACN,MAAM0iB,EAAO,IAAI+D,EAAU66D,SAG3B,OAFA5+D,EAAKghG,QAAQ1jH,GACb1D,KAAKgmH,OAAO1lG,IAAI8F,GACTw9F,GAGf,OAAO5jH,KAAK2pJ,eAAe,uCAIxBthI,eACH,GAAIroB,KAAKmoC,OAAOrjB,OAASyiI,EAAe,CACpC,IAAInlE,EAAQpiF,KAAKgmH,OAAOt8G,WAAWkgJ,aAAa5pJ,KAAKgmH,QACrD,GAAIhmH,KAAKgmH,OAAO98G,IAAI,aAAc,CAC9B,MAAMm8G,EAAerlH,KAAKgmH,OAAOt8G,WAAWoN,QACvB9W,KAAKgmH,OAAO5Q,QAAQ,aAC5B/qG,QAAQk7G,IACjB,MAAMnmG,EAASmmG,EAASr8B,YAClB9wD,EAAchZ,EAAO1V,WAC3B,GAAIse,EAAApmB,QAAG2e,cAAcnB,IACbgZ,EAAYthB,UAAYuuG,EAAc,CACtC,MAAMG,EAAWptF,EAAYwxH,aAAaxqI,GAC1CgjE,EAAQA,EAAM/wE,OAAOm0G,MAKrCxlH,KAAKmoC,OAAOrjB,KAAOs9D,EAEvB,OAAOpiF,KAAKmoC,OAAOrjB,KAIhBuD,iBACH,MAAMwhI,EAAc7pJ,KAAKkpF,YACzB,GAAI31E,MAAMC,QAAQq2I,GAAc,CAC5B,MAAMznE,EAAQynE,EACd,GAAIznE,EAAM7gF,OAAS,EACf,OAAO6gF,EAAM,GAAG27B,qBAGnB,GAAI8rC,EAAY9rC,cACjB,OAAO8rC,EAAY9rC,gBAEvB,OAAO,KAKJ11F,mBAAmBjkB,GACtBpE,KAAK2nJ,gBAAiB,EACtB3nJ,KAAK4nJ,iBAAmBxjJ,EAGrBikB,gBACHroB,KAAK2nJ,gBAAiB,EACtB3nJ,KAAK4nJ,iBAAmB,KAKrBv/H,iBAAiBjkB,GAItB,GAHApE,KAAKmoC,OAAOrjB,KAAOyiI,EAGfnjJ,EAAIlF,eAAe,OAErB,OADAc,KAAK8pJ,cACE9pJ,KAAKmmJ,cAAc/hJ,GAG5B,MAAMstG,EAAOttG,EAAIstG,KAOjB,GANI1pF,EAAApmB,QAAG6D,cAAc,CAACisG,KACpB1pF,EAAApmB,QAAGK,IAAI,eAAgB,+DACuB4c,KAAKC,UAAU1a,MAI3DpE,KAAKynJ,cAA0C,OAA1BznJ,KAAKwnJ,iBAC1B,OAAOxnJ,KAAK+pJ,eAAer4C,GAI/B,GAAI1xG,KAAK2nJ,eACL,OAAO3nJ,KAAKgqJ,qBAAqBt4C,GAGrC,MAAMu4C,EAAWjqJ,KAAK+nJ,KAAKmC,WAAWx4C,GACtC,GAAIu4C,IAAanF,EACb,OAAOmF,EAIX,GAAIz5C,EAAOm6B,OAAOj5B,GAEd,OADA1xG,KAAKgoJ,UAAUmC,UACRnqJ,KAAKomJ,WAEX,GAAI51C,EAAO45B,OAAO14B,GAEnB,OADA1xG,KAAKoqJ,mBAAmBpqJ,KAAKgoJ,UAAUtzC,WAChC10G,KAAKomJ,WAIhB,GAAIpmJ,KAAK8mJ,cAAc5nJ,eAAewyG,GACpC,OAAO1xG,KAAK8mJ,cAAcp1C,GAAMA,GAIlC,GAAIlB,EAAOy6B,UAAUv5B,GAEnB,OADA1xG,KAAKqqJ,gBACErqJ,KAAKomJ,WAId,GAAI51C,EAAOw5B,YAAYt4B,GAErB,OADA1xG,KAAKsqJ,kBACEtqJ,KAAKomJ,WAGd,GAAI51C,EAAO+5B,aAAa74B,GAEpB,OADA1xG,KAAKuqJ,gBACEvqJ,KAAKomJ,WAGhB,GAAI51C,EAAOi6B,OAAO/4B,GAEd,OADA1xG,KAAKwqJ,UACExqJ,KAAKomJ,WAGhB,GAAI51C,EAAO85B,OAAO54B,GAEd,OADA1xG,KAAKyqJ,UACEzqJ,KAAKomJ,WAGhB,GAAI51C,EAAOi7B,aAAa/5B,GAEpB,OADA1xG,KAAK0qJ,aACE1qJ,KAAKomJ,WAGhB,GAAI51C,EAAO05B,OAAOx4B,GAEd,OADA1xG,KAAK2qJ,UACE3qJ,KAAKomJ,WAIhB,MAAMruI,EAAQ/X,KAAKgmH,OAAOt8G,WAC1B,IAAIuM,EAAIjW,KAAKgmH,OAAOrqG,OAChBzF,EAAIlW,KAAKgmH,OAAOhqG,OACpB,MAAM4uI,EAAU7yI,EAAMyL,SAChBkO,EAAWk5H,EAAQn8H,QAAQxY,EAAGC,GAGpC,GAAIs6F,EAAOq6B,WAAWn5B,GAEpB,OA4gBR,SAA0B5xG,GACtB,GAAIA,EAAKwiG,WAAY,CACjB,MAAM1+F,EAAQ9D,EAAK4a,WACnB,IAAI9c,EAAOgG,EAAM,GAAGlC,UACpB,GAAIkC,EAAMrC,OAAS,EAAG,CAClB,MAAMspJ,EAAYjnJ,EAAMwuB,QACxBxuB,EAAMgC,KAAKilJ,GACXjtJ,EAAOgG,EAAM,GAAGlC,UAChBsmB,EAAApmB,QAAGslB,QAAQ,eAAiBtpB,EAAO,6BAGnCoqB,EAAApmB,QAAGslB,QAAQ,gBAAkBtpB,EAAO,cAIxCoqB,EAAApmB,QAAGslB,QAAQ,2CA5hBX4jI,CAAiBp5H,GACV1xB,KAAKomJ,WAGd,IAAI2E,EAAU,OACd,GAAIv6C,EAAOgC,cAAcd,GAAO,CAC9B,MAAMs5C,EAASx6C,EAAOw1C,QAAQt0C,EAAMz7F,EAAGC,GACvCD,EAAI+0I,EAAO,GACX90I,EAAI80I,EAAO,GACXD,EAAU,YAGV/qJ,KAAKkoJ,oBAGP,GAAgB,SAAZ6C,EAAoB,CAKtB,GAJA/qJ,KAAK8pJ,cAEDt5C,EAAOg5B,OAAO93B,KAAQq5C,EAAU,QAEhCv6C,EAAOi5B,SAAS/3B,GAElB,OADAq5C,EAAU,SACNr5H,EAAS9wB,QAAQ,SACf8wB,EAAS4iH,UACE5iH,EAASs+E,UACZj1E,eAKR/6B,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOK,OACjB,KACL,MAAMsnC,EAAS,IAAIpsB,EAAUqsB,OAC7Bx2C,KAAKgmH,OAAO1lG,IAAIi2B,MAPlBv2C,KAAKirJ,0BAA0Bv5H,GACxB1xB,KAAKomJ,aAWdpmJ,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOK,OACjB,KACL,MAAMsnC,EAAS,IAAIpsB,EAAUqsB,OAC7Bx2C,KAAKgmH,OAAO1lG,IAAIi2B,KAKbv2C,KAAK2pJ,eACV,kCAIN,GAAIn5C,EAAOk5B,YAAYh4B,GAErB,OADAq5C,EAAU,SACNr5H,EAASokB,gBACJ,KACH,MAAMo1G,EAAa,IAAI/gI,EAAUs7D,UACjCzlF,KAAKgmH,OAAO1lG,IAAI4qI,IAIblrJ,KAAK2pJ,eACV,wCAIN,GAAIn5C,EAAO66B,aAAa35B,GACtB,OAAO1xG,KAAKmrJ,kBAGd,GAAI36C,EAAO+6B,WAAW75B,GAUpB,OATI1xG,KAAKorJ,aACLprJ,KAAK2nJ,gBAAiB,EACtB3nJ,KAAK4nJ,iBACH5nJ,KAAKgmH,OAAOjiF,UAAUizG,qBACxBhvH,EAAApmB,QAAGslB,QAAQ,mCAGXc,EAAApmB,QAAGslB,QAAQ,8BAERlnB,KAAKomJ,WAQd,GALI51C,EAAOq5B,OAAOn4B,KAChB1xG,KAAK2nJ,gBAAiB,EACtB3nJ,KAAK4nJ,iBAAmBrD,EAAcvkJ,KAAKgmH,SAGzCxV,EAAOu6B,OAAOr5B,GAAO,CACrB,MAAM25C,EAAW,IAAIlhI,EAAU86D,KAE/B,OADAjlF,KAAKgmH,OAAO1lG,IAAI+qI,GACTznC,GAIb,MAAgB,SAAZmnC,EACO/qJ,KAAKsrJ,QAAQvzI,EAAO6yI,EAAS30I,EAAGC,GAEtB,SAAZ60I,GACP/qJ,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOM,KACxBlP,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUg7D,MACvBy+B,GAGF5jH,KAAKomJ,WAGP/9H,YACH,QAASroB,KAAKgmH,OAAOjiF,UAIlB1b,eAAeqpF,GAElB,OADA1xG,KAAKynJ,cAAe,EAChBj3C,EAAOs5B,aAAap4B,IACtB1xG,KAAK4O,OAAS5O,KAAK0nJ,eAEZ1nJ,KAAKwnJ,mBAEdx/H,EAAApmB,QAAGslB,QAAQ,0BACJlnB,KAAKomJ,YAGT/9H,qBAAqBqpF,GAExB,GAAI4jC,EAAA5kC,KAAKW,WAAWrxG,KAAK4nJ,kBAAmB,CACtC5nJ,KAAK4nJ,iBAAiB2D,SACtBvrJ,KAAK4nJ,iBAAiB2D,UAE1B,MAAMn6C,EAAYpxG,KAAK4nJ,iBAAiB50C,OAAOtB,GAE/C,GAAI4jC,EAAA5kC,KAAKS,gBAAgBC,GAEvB,OADApxG,KAAKwrJ,gBACEp6C,EAEJ,GAAIkkC,EAAA5kC,KAAKW,WAAWD,GAAY,CACnCpxG,KAAK4nJ,iBAAmBx2C,EACxB,MAAMq6C,EAASr6C,EACf,OAAIq6C,EAAOv6C,YACTlxG,KAAKwrJ,gBACEC,EAAOv6C,cAETlxG,KAAKomJ,YAKhB,OAFApmJ,KAAKwrJ,gBACLxjI,EAAApmB,QAAGslB,QAAQ,0BACJlnB,KAAKomJ,WAIT/9H,QAAQtQ,EAAO6yI,EAAS30I,EAAGC,GAC9B,IAAK00I,EAAQ/8H,MAAM5X,EAAGC,GAAI,CACxB,GAAIlW,KAAKgmH,OAAOv3F,UAAUi9H,aAAc,CACpC,MAAM18H,EAAK,KACP,MAAMk8H,EAAa,IAAI/gI,EAAUs7D,UACjCzlF,KAAKgmH,OAAO1lG,IAAI4qI,IAEd7mJ,EAAM,oCAEZ,OADArE,KAAK2rJ,eAAe3jI,EAAApmB,QAAGgN,OAAOI,KAAMggB,EAAI3qB,GACjCrE,KAAKomJ,WAEX,CACD,MAAM/hJ,EAAM,yBACZ,OAAOrE,KAAK2pJ,eAAetlJ,IAMjC,GAAIumJ,EAAQl1D,WAAWz/E,EAAGC,GACxB,OAAOlW,KAAK4rJ,WAAW31I,EAAGC,EAAG6B,GAE1B,GAAI6yI,EAAQn8H,QAAQxY,EAAGC,GAAG21I,gBAC7B,OAAO7rJ,KAAKmrJ,kBAET,GAAIP,EAAQn8H,QAAQxY,EAAGC,GAAG9L,YAAa,CAC1CpK,KAAKkoJ,oBACL,MAAM9oI,EAmVhB,SAAyB/J,EAAKY,EAAGC,GAC7B,MAAM41I,EAAUz2I,EAAIoZ,QAAQxY,EAAGC,GAAGpV,QAAQ,UAC1C,IAAK,IAAIzD,EAAI,EAAGA,EAAIyuJ,EAAQvqJ,OAAQlE,IAChC,IAAKyuJ,EAAQzuJ,GAAG6L,IAAI,YAAc,OAAO4iJ,EAAQzuJ,GAErD,OAAO,KAxVc0uJ,CAAgBnB,EAAS30I,EAAGC,GAE5B,OAAXkJ,GACF4I,EAAApmB,QAAGK,IAAI,eAAgB,mBACrB,+BAAiCgU,EAAI,IAAMC,GAG/C,MAAM81I,EAAiB,KACrBhsJ,KAAKisJ,kBACL,MAAMtlC,EAAa,IAAIx8F,EAAU0uD,OAAO,CAACz5D,WACzCpf,KAAKgmH,OAAO1lG,IAAIqmG,IAGlB,GAAIvnG,EAAO3U,QAAQzK,KAAKgmH,QAEtB,OADAhmH,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOC,OACjBm9I,EAEJ,CACH,MAAM3nJ,qCAAyC+a,EAAO1d,YAEtD,OADA1B,KAAK2rJ,eAAe3jI,EAAApmB,QAAGgN,OAAOC,OAAQm9I,EAAgB3nJ,GAC/CrE,KAAKomJ,YAGX,GAAIpmJ,KAAKgmH,OAAO98G,IAAI,WAAa0hJ,EAAQntC,gBAAgBxnG,EAAGC,GAE/D,OADAlW,KAAKkoJ,oBACEloJ,KAAK4rJ,WAAW31I,EAAGC,EAAG6B,GAE1B,CACH,MAAM1T,EAAM2jB,EAAApmB,QAAGwjB,iBAAiBplB,KAAKgmH,OACnC4kC,EAAQn8H,QAAQxY,EAAGC,GAAI,OACzB,OAAOlW,KAAK2pJ,eAAetlJ,IAI1BgkB,WAAWpS,EAAGC,EAAG6B,GAOpB,OANI/X,KAAK6nJ,gBAAkB7nJ,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOO,KAEjDnP,KAAK8pJ,cACL9pJ,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOI,MAGnB,KACL,MAAM63G,EAAU,IAAI18F,EAAU2uD,SAAS7iE,EAAGC,EAAG6B,GAC7C/X,KAAKgmH,OAAO1lG,IAAIumG,IAIfx+F,eAAezZ,EAAQsiD,EAAU7sD,GACpCrE,KAAK0nJ,eAAiB94I,EACtB5O,KAAKynJ,cAAe,EACpBznJ,KAAKwnJ,iBAAmBt2F,EACpB7sD,GAAM2jB,EAAApmB,QAAGslB,QAAQ7iB,GAGlBgkB,gBACH,MAAM6jI,EAAgB,CAClB,CAAC,YAAalsJ,KAAKmsJ,UAAUttJ,KAAKmB,KAAM,WACxC,CAAC,eAAgBA,KAAKmsJ,UAAUttJ,KAAKmB,KAAM,WAC3C,CAAC,iBAAkBA,KAAKmsJ,UAAUttJ,KAAKmB,KAAM,WAC7C,CAAC,mBAAoBA,KAAKmsJ,UAAUttJ,KAAKmB,KAAM,YAE7CosJ,EAAuB,IAAI9W,EAAA5kC,KAAKyB,SAAS+5C,GAC/CE,EAAqBl6C,OAASlyG,KAAKw6I,gBAAgB37I,KAAKmB,MACxD,MAAMqsJ,EAAe,CAEjB,CAACztJ,IAAK2xG,EAAAE,KAAKuB,IAAIk5B,OAAQj6B,KAAMm7C,IAGjCpkI,EAAApmB,QAAGslB,QAAQm9H,GAEX,MAAMiI,EAAsB,IAAIhX,EAAA5kC,KAAKmC,WAAWw5C,GAChDC,EAAoBC,kBACpBD,EAAoB54C,YAAY1zG,KAAKwzG,WAAW30G,KAAKmB,OACrDA,KAAKoqJ,mBAAmBkC,GACxBtsJ,KAAKwzG,aAGFnrF,UACH,MAAMgkI,EAAe,CAEjB,CAACztJ,IAAK2xG,EAAAE,KAAKuB,IAAIk5B,OACXh6B,WAAYlxG,KAAKwsJ,qBAAqB3tJ,KAAKmB,QAGnDgoB,EAAApmB,QAAGslB,QAAQo9H,GACX,MAAMgI,EAAsB,IAAIhX,EAAA5kC,KAAKmC,WAAWw5C,GAChDC,EAAoB54C,YAAY1zG,KAAKwzG,WAAW30G,KAAKmB,OACrDA,KAAKoqJ,mBAAmBkC,GACxBtsJ,KAAK+nJ,KAAK0E,eACVzsJ,KAAKwzG,aAGFnrF,UACH,MAAM4oF,EAAO,IAAIqkC,EAAA5kC,KAAK4C,UACtBrC,EAAKyC,YAAY1zG,KAAK0sJ,aAAa7tJ,KAAKmB,OACxCA,KAAKoqJ,mBAAmBn5C,GACxBjpF,EAAApmB,QAAGslB,QAAQ,8CAGRmB,aAAazU,GAChB,MAAOo8H,EAAIC,GAAMjoH,EAAApmB,QAAG2Z,aAAa3H,EAAM5T,KAAKgmH,QACtClmH,EAAOE,KAAKgmH,OAAOt8G,WAAW8Z,SAASiL,QAAQuhH,EAAIC,GACzD,GAAInwI,EAAKsK,YAAa,CAClB,MAAMH,EAAQnK,EAAKi+G,gBAEb4uC,EADQ3sJ,KAAKgmH,OAAOv+G,WAAWgT,eAAeC,WACxBrF,IAAIvO,GAAQ,CAEhCA,EAAK6B,WACL3I,KAAK4sJ,gBAAgB/tJ,KAAKmB,KAAM8G,EAAMmD,KAGxC4iJ,EAAW,IAAIvX,EAAA5kC,KAAKyB,SAASw6C,GACnCE,EAASl4C,OAAO,2BAChB30G,KAAKoqJ,mBAAmByC,QAGxB7kI,EAAApmB,QAAG4lB,WAAW,yBAIfa,gBAAgBvhB,EAAMmD,GACzB,MAAMw5H,EAAW,IAAIt5G,EAAU06D,KAC/B4+C,EAASqpB,cAAc7iJ,GACvBw5H,EAASllC,QAAQz3F,GACjB9G,KAAKgmH,OAAO1lG,IAAImjH,GAGbp7G,UACH,MAAM4oF,EAAO,IAAIqkC,EAAA5kC,KAAK4C,UACtBrC,EAAKyC,YAAY1zG,KAAK+sJ,aAAaluJ,KAAKmB,OACxCA,KAAKoqJ,mBAAmBn5C,GACxBjpF,EAAApmB,QAAGslB,QAAQ,mCAGRmB,aAAazU,GAChB5T,KAAK4O,OAASoZ,EAAApmB,QAAGgN,OAAOG,KACxB,MAAOkH,EAAGC,GAAKtC,EACTo5I,EAAU,IAAI7iI,EAAU46D,KAC9BioE,EAAQ13E,KAAKr/D,GACb+2I,EAAQz3E,KAAKr/D,GACblW,KAAKgmH,OAAO1lG,IAAI0sI,GAGb3kI,UAAU4kI,GACb,MAAM7qE,EAAQpiF,KAAKkpF,YACnB9G,EAAM/3E,QAAQvK,IACV,GAAIA,EAAKsK,YAAa,CAClB,MAAMgV,EAAStf,EAAKwK,YAAY,GAC1Bw0B,EAAQ1f,EAAOkkB,WACrB,GAAIlkB,GAAU0f,EAAMq6E,QAChB,OAAQ8zC,GACJ,IAAK,SAAUjtJ,KAAKktJ,gBAAgB9tI,GAAS,MAC7C,IAAK,SAAUpf,KAAKmtJ,aAAa/tI,GAAS,MAC1C,IAAK,SAAUpf,KAAKotJ,gBAAgBhuI,GAAS,MAC7C,IAAK,SAAUpf,KAAKqtJ,gBAAgBjuI,SAKtB,IAAjBgjE,EAAM7gF,QACXymB,EAAApmB,QAAG4lB,WAAW,oCAGtBxnB,KAAKqlJ,iBAAiB,MAGnBh9H,gBAAgBjJ,GACnB,MAAMxhB,EAAOwhB,EAAO1d,UACdyD,EAAO,CAACm0G,KAAM,GAAK99F,IAAKxb,KAAKgmH,QACnCk+B,EAAYgJ,gBAAgB9tI,EAAQja,GACpC6iB,EAAApmB,QAAGslB,oBAAoBtpB,mBAGpByqB,aAAajJ,GAChB,MAAMja,EAAO,CAACm0G,KAAM,GAAK99F,IAAKxb,KAAKgmH,QACnCk+B,EAAYoJ,gBAAgBluI,EAAQja,GACpC6iB,EAAApmB,QAAGslB,oBAAoBtpB,8BAGpByqB,gBAAgBjJ,GACnB,MAAM+3B,EAAen3C,KAAKy1F,eACpBrT,EAAQp6D,EAAApmB,QAAGoI,sBACbhK,KAAKgmH,OAAQ7uE,GACjB,GAAqB,IAAjBirC,EAAM7gF,OAEN,YADAymB,EAAApmB,QAAGslB,QAAQ,gCAIf,MACMsyF,EAAYp3B,EADApiF,KAAKwlJ,qBAAqBpjE,IAG5C,GAAIo3B,EAAW,CACX,MAAM57G,EAAOwhB,EAAO1d,UACdk6G,EAAQpC,EAAUlvG,YAAY,GAC9BijJ,EAAY3xC,EAAMl6G,UAClByD,EAAO,CAACm0G,KAAMt5G,KAAKwtJ,eAAgB5xC,QAAOpgG,IAAKxb,KAAKgmH,QAC1Dk+B,EAAYuJ,gBAAgBruI,EAAQja,GACpC6iB,EAAApmB,QAAGslB,oBAAoBtpB,eAAkB2vJ,UAGzCvlI,EAAApmB,QAAGslB,QAAQ,gCAIZmB,gBAAgBjJ,GACnB,MAAMtY,EAAO9G,KAAK0tJ,iBACZ9vJ,EAAOwhB,EAAO1d,UACpB,GAAIoF,EAAM,CACN,MAAMgpB,EAAWhpB,EAAKpF,UAChByD,EAAO,CAACm0G,KAAMt5G,KAAKwtJ,eAAgB1mJ,OAAM0U,IAAKxb,KAAKgmH,QACzDk+B,EAAYyJ,gBAAgBvuI,EAAQja,GACpC6iB,EAAApmB,QAAGslB,oBAAoBtpB,eAAkBkyB,UAGzC9H,EAAApmB,QAAGslB,kCAAkCtpB,eAItCyqB,eACH,OAAIroB,KAAKgmH,OAAO98G,IAAI,UAAmB,EACnClJ,KAAKgmH,OAAO98G,IAAI,aAAsB,IACnC,GAGJmf,aACH,GAAIroB,KAAKgmH,OAAO98G,IAAI,aAAc,CAC9B,MAAM+nG,EAAOjxG,KAAKgmH,OAAO9nH,IAAI,aAAa0vJ,aAC1C5tJ,KAAKoqJ,mBAAmBn5C,QAGxBjpF,EAAApmB,QAAGslB,QAAQ,gCAKZmB,QAAQuU,GACX58B,KAAKgoJ,UAAUmC,QAAQvtH,GAIpBvU,iBACH,MACMwlI,EADY7tJ,KAAKy1F,eACKtrF,OAAOrK,GAAQA,EAAKwiG,YAChD,OAAIurD,EAAUtsJ,OAAS,EACAknB,EAAIjL,aAAaqwI,GAClBnzI,WAAW,GAE1B,KAGJ2N,SACH,MAAO,CACHtmB,KAAM/B,KAAKQ,UACXm8G,OAAQ38G,KAAK4lH,QAAQn/F,SACrBigI,SAAU1mJ,KAAKgoJ,UAAUvhI,UAM1B4B,YACAA,aAQAA,oBACH,OAAOroB,KAAK+nJ,KAAKn0C,oBAGdvrF,iBACHroB,KAAK+nJ,KAAKp0C,iBAIPtrF,aACHroB,KAAK+nJ,KAAKj0C,aAGPzrF,gBACH,OAAOroB,KAAK+nJ,KAAKxC,gBAGdl9H,mBACH,OAAOroB,KAAK+nJ,KAAK+F,mBAGdzlI,aACHroB,KAAK+nJ,KAAK/zC,aAIP3rF,YACH,OAAOroB,KAAK+nJ,KAAK7+D,YAId7gE,kBACH,OAAOroB,KAAK+nJ,KAAKgG,kBAGd1lI,kBACHroB,KAAK+nJ,KAAKvN,kBAGPnyH,cACH,OAAOroB,KAAK+nJ,KAAKrC,cAIdr9H,qBAAqB+5D,GACxB,OAAOpiF,KAAK+nJ,KAAKvC,qBAAqBpjE,GAGnC/5D,iBAAiB+5D,GACfA,EAIDpiF,KAAK+nJ,KAAK1C,iBAAiBjjE,GAH3BpiF,KAAKw6I,kBAONnyH,WAAWqpF,GACd1xG,KAAK+nJ,KAAKv0C,WAAW9B,GAGlBrpF,uBAGHroB,KAAK+nJ,KAAKiG,mLCz4ClB,MAAAhmI,EAAAC,EAAAhrB,EAAA,IAIA,MAAagxJ,EAQT5lI,YAAYtmB,EAAcmsJ,GACtBluJ,KAAKq7F,MAAQt5F,EACb/B,KAAKmuJ,MAAQ,KACbnuJ,KAAKouJ,UAAW,EAChBpuJ,KAAKquJ,YAAc,KACnBruJ,KAAKsuJ,UAAW,EACXtmI,EAAApmB,QAAG6D,cAAc,CAACyoJ,MAAYluJ,KAAKsuJ,SAAWJ,GAGhD7lI,YACH,OAAOroB,KAAKsuJ,SAGTjmI,gBAAkC,OAAOroB,KAAKquJ,YAG9ChmI,UACH,OAAIroB,KAAKouJ,SAAkBpuJ,KAAKmuJ,MACzB,KAGJ9lI,UACH,OAAOroB,KAAKouJ,SAIT/lI,UAAUvhB,GACb,QAAI9G,KAAKuuJ,SAASznJ,KACT9G,KAAKsuJ,UAAatuJ,KAAKouJ,SAKnBpmI,EAAApmB,QAAGoE,gBAAgBhG,KAAKmuJ,MAAOrnJ,KACpC9G,KAAKouJ,UAAW,IALhBtnJ,EAAKi4F,SAAS/+F,MACdA,KAAKmuJ,MAAQrnJ,EACb9G,KAAKouJ,UAAW,GAKbpuJ,KAAKouJ,UAMb/lI,YAAYvpB,GACf,GAAIkB,KAAKouJ,SAAU,CACf,IAAKpuJ,KAAKsuJ,SAGN,OAFAtuJ,KAAKouJ,UAAW,EAChBpuJ,KAAKquJ,YAAcruJ,KAAKmuJ,OACjB,EAEN,GAAIrvJ,EAAI,EAYT,OAXU,IAANA,GAAqC,IAA1BkB,KAAKmuJ,MAAM9nJ,YACtBrG,KAAKouJ,UAAW,EAChBpuJ,KAAKquJ,YAAcruJ,KAAKmuJ,OAEnBrvJ,IAAMkB,KAAKmuJ,MAAM9nJ,YACtBrG,KAAKouJ,UAAW,EAChBpuJ,KAAKquJ,YAAcruJ,KAAKmuJ,OAGxBnuJ,KAAKquJ,YAAcrmI,EAAApmB,QAAG2E,mBAAmBvG,KAAKmuJ,MAAOrvJ,IAElD,EAGf,OAAO,EAGJupB,SAASvhB,GACZ,OAAK9G,KAAKouJ,YAGDpuJ,KAAKsuJ,UAEHxnJ,EAAKX,OAAOnG,KAAKmuJ,QAjFpChxJ,EAAA8wJ,YA2FA,MAAMO,EAAuB,CAAC,aAAc,YAAa,gBACrD,YAAYn9I,OAAO2W,EAAApmB,QAAGgU,WAG1BzY,EAAAsxJ,UAAA,MAKIpmI,YAAYpe,GACRjK,KAAKgmH,OAAS/7G,EAEdjK,KAAK0uJ,OAAS,CACVC,MAAO,IAAIV,EAAU,SACrBW,KAAM,IAAIX,EAAU,QACpBY,KAAM,IAAIZ,EAAU,QACpBa,KAAM,IAAIb,EAAU,QACpBzmJ,QAAS,IAAIymJ,EAAU,WAAW,GAClC1uH,cAAe,IAAI0uH,EAAU,iBAC7Bc,KAAM,IAAId,EAAU,QACpBplC,OAAQ,IAAIolC,EAAU,UACtB/pJ,UAAW,IAAI+pJ,EAAU,cAK7B,IAAK,IAAI5wJ,EAAI,EAAGA,EAAImxJ,EAAWjtJ,OAAQlE,IAAK,CAGxC,MAAM2xJ,EAAU,IACL,IAAMhvJ,KAAKivJ,YAAYT,EAAWnxJ,IAE7C2C,KAAKwuJ,EAAWnxJ,IAAM2xJ,KAKvB3mI,QAAQ6mI,EAAkBC,GAC7B,GAAInvJ,KAAKovJ,SAASF,GACd,GAAI37I,MAAMC,QAAQxT,KAAK0uJ,OAAOQ,IACzBlvJ,KAAK0uJ,OAAOQ,GAA0BtpJ,KAAKupJ,OAE3C,CACD,MAAME,EAAuB,CAACrvJ,KAAK0uJ,OAAOQ,IAC1CG,EAAQzpJ,KAAKupJ,GACbnvJ,KAAK0uJ,OAAOQ,GAAYG,OAI5BrvJ,KAAK0uJ,OAAOQ,GAAYC,EAMzB9mI,YACH,IAAIklC,EAAQ,EACZ,MAAM+hG,EAAkBtvJ,KAAKuvJ,mBAC7B,IAAK,IAAIlyJ,EAAI,EAAGA,EAAIiyJ,EAAS/tJ,OAAQlE,IACjCkwD,GAAS+hG,EAASjyJ,GAAG4J,YAAcqoJ,EAASjyJ,GAAGgJ,WAKnD,OAHIrG,KAAKgmH,OAAO98G,IAAI,oBAChBqkD,GAASvtD,KAAKgmH,OAAO9nH,IAAI,kBAAkBsxJ,aAExCjiG,EAIJllC,YAAY6mI,GACf,OAAIlvJ,KAAKovJ,SAASF,GACV37I,MAAMC,QAAQxT,KAAK0uJ,OAAOQ,IAClBlvJ,KAAK0uJ,OAAOQ,GAA0B3tJ,OAE3C,EAEJ,EAGJ8mB,eACH,OAAOtqB,OAAO6qB,KAAK5oB,KAAK0uJ,QAGrBrmI,SAAS6mI,GACZ,OAAIlvJ,KAAKovJ,SAASF,GACV37I,MAAMC,QAAQxT,KAAK0uJ,OAAOQ,IAClBlvJ,KAAK0uJ,OAAOQ,GAEjB,CAAClvJ,KAAK0uJ,OAAOQ,IAEjBlvJ,KAAKuvJ,mBAITlnI,cAAc6mI,EAAkBhwI,GACnC,GAAIlf,KAAKovJ,SAASF,GAAW,CACzB,MAAMvvI,EAAyB3f,KAAK0uJ,OAAOQ,GAC3C,OAAI37I,MAAMC,QAAQmM,GACPA,EAAKT,GAAOuwI,gBAGXzvJ,KAAK0uJ,OAAOQ,GAAwBO,gBAOpD,OAHIznI,EAAApmB,QAAGK,IAAI,YAAa,gBAChB,iBAAmBitJ,GAEpB,KAIJ7mI,QAAQ6mI,GACX,GAAIlvJ,KAAKovJ,SAASF,GAAW,CACzB,MAAMvvI,EAAyB3f,KAAK0uJ,OAAOQ,GAC3C,OAAI37I,MAAMC,QAAQmM,GACPA,EAAKtK,IAAIq6I,GAAYA,EAAS/mC,WAEjC3oH,KAAK0uJ,OAAOQ,GAAwBvmC,UAEhD,OAAO,KAKJtgG,UAAUvhB,GACb,OAAIA,EAAKs3F,cACEp+F,KAAK2vJ,iBAAiB7oJ,EAAKs3F,gBAAiBt3F,GAG9C,mBAAmB+vB,KAAK/vB,EAAKtG,aACdR,KAAK0uJ,OAAOlnJ,QAChBooJ,UAAU9oJ,GAIF,kBAAnBA,EAAKtG,UACHR,KAAK2vJ,iBAAiB,gBAAiB7oJ,GAGvC9G,KAAK2vJ,iBAAiB,OAAQ7oJ,GAKtCuhB,iBAAiB6mI,EAAUpoJ,GAC9B,MAAM6Y,EAAO3f,KAAK0uJ,OAAOQ,GACzB,GAAI37I,MAAMC,QAAQmM,IACd,IAAK,IAAItiB,EAAI,EAAGA,EAAIsiB,EAAKpe,OAAQlE,IAC7B,GAAIsiB,EAAKtiB,GAAGuyJ,UAAU9oJ,GAClB,OAAO,OAId,GAAI6Y,EAAKiwI,UAAU9oJ,GACpB,OAAO,EAEX,OAAO,EAIJuhB,WAAWvhB,GAGd,OAAkB,IAFD9G,KAAK0a,WACCqF,QAAQjZ,GAI5BuhB,YAAY6mI,GACf,OAAOlvJ,KAAK2oH,QAAQumC,GAGjB7mI,mBACH,MAAMzkB,EAAQ,GAad,OAZA7F,OAAOutC,OAAOtrC,KAAK0uJ,QAAQrkJ,QAASsV,IAC5BpM,MAAMC,QAAQmM,GACdA,EAAKtV,QAAQwlJ,IACLA,EAAQ3kH,WACRtnC,EAAMgC,KAAKiqJ,EAAQlnC,aAItBhpG,EAAKurB,WACVtnC,EAAMgC,KAAK+Z,EAAKgpG,aAGjB/kH,EAIJykB,YAAY6mI,EAAkBpwJ,EAAWogB,GAC5C,GAAIlf,KAAKovJ,SAASF,GAAW,CACzB,MAAMvvI,EAAO3f,KAAK0uJ,OAAOQ,GACzB,IAAI37I,MAAMC,QAAQmM,GAed,OAAQ3f,KAAK0uJ,OAAOQ,GAAwBY,YAAYhxJ,GAdxD,GAAIogB,GAAS,GACT,GAAIS,EAAKT,GAAO4wI,YAAYhxJ,GACxB,OAAO,OAIX,IAAK,IAAIzB,EAAI,EAAGA,EAAIsiB,EAAKpe,OAAQlE,IAC7B,GAAIsiB,EAAKtiB,GAAGyyJ,YAAYhxJ,GACpB,OAAO,MAStB,CACD,MAAMuF,EAAM,0BAA4B6qJ,EACxClnI,EAAApmB,QAAGK,IAAI,YAAa,cAAeoC,GAEvC,OAAO,EAGJgkB,SACH,MAAMzJ,EAAO,GACP0wI,EAAWtvJ,KAAKuvJ,mBACtB,IAAK,IAAIlyJ,EAAI,EAAGA,EAAIiyJ,EAAS/tJ,OAAQlE,IACjCuhB,EAAKhZ,KAAK0pJ,EAASjyJ,GAAGopB,UAE1B,OAAO7H,EAKHyJ,YAAY0nI,GAChB,IAAItnJ,EAAS,EAcb,OAbiB1K,OAAO6qB,KAAK5oB,KAAK0uJ,QACzBrkJ,QAAQ2lJ,IAEb,IAAIC,EADYjwJ,KAAK0uJ,OAAOsB,GAEvBz8I,MAAMC,QAAQy8I,KACfA,EAAQ,CAACA,IAGbA,EAAM5lJ,QAAQsV,IACV,MAAM7Y,EAAO6Y,EAAKgpG,UAClBlgH,GAAUuf,EAAApmB,QAAGmZ,YAAYg1I,EAAUjpJ,OAGpC2B,EAIH4f,SAAS6mI,GACb,OAAOlvJ,KAAK0uJ,OAAOxvJ,eAAegwJ,iQCrV1C,MAAA9xH,EAAAngC,EAAA,IACAymH,EAAAzmH,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KAIAE,EAAAi3C,aAAA,cAAkCsvE,EAAAgC,UAI9Br9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,WACb75B,KAAKkwJ,WAAa,GAGf7nI,iBAAiBjkB,KAClBpE,KAAKkwJ,WACP,MAAMn4I,EAAQ/X,KAAKgmH,OAAOt8G,WAC1B,GAAwB,IAApB1J,KAAKkwJ,YAAoBn4I,EAAM7O,IAAI,WAAY,CAC/C,MACMinJ,EADUp4I,EAAM7Z,IAAI,WACJkyJ,iBAChBC,EAAU,IAAIlmI,EAAU0/D,cAC9BwmE,EAAQC,cAAcH,GACtBnwJ,KAAKgmH,OAAO1lG,IAAI+vI,GAChBrwJ,KAAKkwJ,WAAa,GAEtB,OAAO9yH,EAAAwmF,yLC5Bf,MAAA57F,EAAAC,EAAAhrB,EAAA,IAcAE,EAAA8vH,YAAA,MAEW5kG,eAAekoI,GAClB,GAAIh9I,MAAMC,QAAQ+8I,GAAa,CAC3B,MAAM9xI,EAAQ8xI,EAAWl7I,IAAIm7I,GACzBxwJ,KAAKgvJ,QAAQwB,EAAOC,GAAID,EAAO1uJ,KAAM0uJ,EAAOlyJ,QAE1CoyJ,EAAgB,SAAStsJ,GAC3B,IAAIzC,GAAM,EAEV,OADA8c,EAAMpU,QAAQo2B,IAAM9+B,EAAMA,GAAO8+B,EAAEr8B,KAC5BzC,GAGX,OADA+uJ,EAAS3jC,WAAawjC,EACfG,EAEN,GAA0B,iBAAfH,EAAyB,CACrC,MAAME,GAACA,EAAE3uJ,KAAEA,EAAIxD,MAAEA,GAASiyJ,EAC1B,OAAOvwJ,KAAKgvJ,QAAQyB,EAAI3uJ,EAAMxD,GAE7B,CACD,MAAM+F,sCAA0CksJ,IAChDvoI,EAAApmB,QAAGK,IAAI,aAAc,iBAAkBoC,GAE3C,OAAO,KAGJgkB,QAAQooI,EAAY3uJ,EAAcxD,GACrC,GAAIiV,MAAMC,QAAQlV,GAAQ,CACtB,MAAMmgB,EAAQngB,EAAM+W,IAAIvP,GACpB9F,KAAKgvJ,QAAQyB,EAAI3uJ,EAAMgE,IAErB4qJ,EAAgB,SAAStsJ,GAC3B,IAAIzC,GAAM,EAEV,OADA8c,EAAMpU,QAAQo2B,IAAM9+B,EAAMA,GAAO8+B,EAAEr8B,KAC5BzC,GAGX,OADA+uJ,EAAS3jC,WAAa,CAAC0jC,KAAI3uJ,OAAMxD,SAC1BoyJ,EAEN,CACD,IAAI/xI,EAAY,KAAM,EACtB,OAAQ8xI,GACJ,IAAK,KACL,IAAK,MACL,IAAK,KAAM9xI,EAAOva,IAAOA,EAAItC,KAAUxD,GAAO,MAC9C,IAAK,KACL,IAAK,MACL,IAAK,MAAOqgB,EAAOva,IAAOA,EAAItC,KAAUxD,GAAO,MAC/C,IAAK,KACL,IAAK,MAAOqgB,EAAOva,IAAOA,EAAItC,IAASxD,GAAO,MAC9C,IAAK,KACL,IAAK,MAAOqgB,EAAOva,IAAOA,EAAItC,IAASxD,GAAO,MAC9C,IAAK,IACL,IAAK,KAAMqgB,EAAOva,IAAOA,EAAItC,GAAQxD,GAAO,MAC5C,IAAK,IACL,IAAK,KAAMqgB,EAAOva,IAAOA,EAAItC,GAAQxD,GAAO,MAC5C,IAAK,QACDqgB,EAAOva,IAAO,IAAIkrC,OAAOhxC,GAAOu4B,KAAKzyB,EAAItC,KAAQ,MACrD,QAASkmB,EAAApmB,QAAGK,IAAI,cAAe,4BACTwuJ,WAG1B,OADA9xI,EAAKouG,WAAa,CAAC0jC,KAAI3uJ,OAAMxD,SACtBqgB,wKC1EnB,MAAAqJ,EAAAC,EAAAhrB,EAAA,IAEaE,EAAA0wH,eAAiB,EAACzlH,EAAKu8E,EAAK5uE,KAC9B,CACH8sB,QAAS,eAAgBlkB,KAAM,CAC3B,CAACmkB,OAAQ,YAAaxkC,MAAO8J,GAC7B,CAAC06B,OAAQ,gBAAiBxkC,MAAO0pB,EAAApmB,QAAGoS,IAAI+B,IACxC,CAAC+sB,OAAQ,iBAAkBxkC,MAAO0pB,EAAApmB,QAAGoS,IAAIU,QAE7CstB,SAAU2iD,KAILxnF,EAAAmtC,MAAQ,SAASC,EAAIC,GAC9B,MAAO,CAACD,KAAIC,OAIhB,MAAMmmH,EAAmB,IAAIx2D,IACzB,CAAC,UAAW,SAAU,MAAO,UAG3By2D,EAAkB,IAAIz2D,IACxB,CAAC,KAAM,QAAS,KAAM,QAAS,UAC3B,aAAc,SAAU,SAAU,SAErC9oF,OAAO2W,EAAApmB,QAAGwT,WAyBf,SAASy7I,EAAa1xJ,EAAG8gC,EAAO6wH,EAAUjkI,GAClC8jI,EAAiBznJ,IAAI/J,GACjB2xJ,EAAS5xJ,eAAeC,GACxB2xJ,EAAS3xJ,GAAK2xJ,EAAS3xJ,GAAGkS,OAAO4uB,EAAM9gC,IAGvC2xJ,EAAS3xJ,GAAK8gC,EAAM9gC,GAAG2pB,QAIvBvV,MAAMC,QAAQysB,EAAM9gC,IACpB2xJ,EAAS3xJ,GAAK8gC,EAAM9gC,GAAG2pB,QAEE,iBAAbmX,EAAM9gC,GAClB2xJ,EAAS3xJ,GAAK0f,KAAKstB,MAAMttB,KAAKC,UAAUmhB,EAAM9gC,KAG1CyxJ,EAAgB1nJ,IAAI/J,GAWpC,SAAuBA,EAAG8gC,EAAO6wH,GACzBA,EAAS5xJ,eAAeC,GACxB2xJ,EAAS3xJ,IAAM8gC,EAAM9gC,GAGrB2xJ,EAAS3xJ,GAAK8gC,EAAM9gC,GAfZ4xJ,CAAc5xJ,EAAG8gC,EAAO6wH,GAGxBA,EAAS3xJ,GAAK8gC,EAAM9gC,GAlCvBhC,EAAA6zJ,YAAc,SAASC,EAAepkI,GAC/C,MAAMikI,EAAW,GAQjB,OAPAG,EAAO5mJ,QAAQ41B,IACX,IAAK,MAAM9gC,KAAK8gC,EACRA,EAAM/gC,eAAeC,IACrB0xJ,EAAa1xJ,EAAG8gC,EAAO6wH,EAAUjkI,KAItCikI,sKC/CX,MAAA9oI,EAAAC,EAAAhrB,EAAA,IACA07G,EAAA17G,EAAA,IACAogB,EAAApgB,EAAA,GAGAkiH,EAAAliH,EAAA,IACAi0J,EAAAj0J,EAAA,IACMkH,EAAQlH,EAAQ,EAARA,CAAiB,mBAEzByxI,eACFA,EAAcZ,cACdA,EAAac,YACbA,GACAj2B,EAAA+0B,WAEEjlH,EAAMpL,EAAAC,OAAOC,SAENpgB,EAAAg0J,SAAgB,GAQ7B,MAAaC,UAAgBz4C,EAAAE,KAAKnhF,KAE9BrP,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,WACb75B,KAAKqxJ,WAAa,GAGfhpI,mBACHroB,KAAKqxJ,WAAa,GAGfhpI,aAAawyF,GAChB76G,KAAKqxJ,WAAWzrJ,KAAKi1G,GAGlBxyF,WACHroB,KAAKsxJ,YAGFjpI,aAAatmB,GAChB,OAAO/B,KAAKqxJ,WAAWnrI,KAAKtB,GAAKA,EAAEpkB,YAAcuB,GAG9CsmB,YACHroB,KAAKs0B,IAAI,uBACsB,IAA3Bt0B,KAAKqxJ,WAAW9vJ,QAChBymB,EAAApmB,QAAGK,IAAI,UAAW,gCACMjC,KAAKQ,mBAAmBR,KAAKiK,SAEzD,IAAIsnJ,EAAY,EACZC,EAAa,KAEjBxxJ,KAAKqxJ,WAAWhnJ,QAAQwwG,IACpB,MAAM42C,EAAe52C,EAAU62C,sBAAsB1xJ,KAAKiK,QACtDsnJ,EAAYE,GAA+B,OAAfD,KAC5BA,EAAa32C,EACb02C,EAAYE,KAIhBD,EACAA,EAAW73C,aAAa35G,KAAKiK,OAG7B+d,EAAApmB,QAAGK,IAAI,UAAW,YACd,sBAERjC,KAAKs0B,IAAI,wBAGNjM,UACHroB,KAAKsvI,qBACL,MAAMtsD,EAAShjF,KAAKuwI,kBACpB,OAAIvtD,IAAW0rD,GAAkB1rD,IAAW4rD,EACjCd,GAEX9tI,KAAK6uI,yBACL7uI,KAAKs0B,4BAA4B0uD,KAC1BA,GAGJ36D,QAAQspI,GACX5zJ,OAAO6qB,KAAK+oI,GAAQtnJ,QAAQivG,IACxB,MAAMuB,EAAY76G,KAAKqxJ,WAAWnrI,KAAKtB,GAAKA,EAAEpkB,YAAc84G,GAC5D,GAAIuB,EACAA,EAAU+2C,QAAQD,EAAOr4C,QAExB,CACD,MAAMvzG,EAAO/F,KAAKqxJ,WAAWh8I,IAAIuP,GAAKA,EAAEpkB,WAClC6D,UAAci1G,iCAAoCvzG,IACxDiiB,EAAApmB,QAAG+C,KAAK,UAAW,UAAWN,MAKnCgkB,SACH,MAAMwpI,EAAQ,GASd,OARA7xJ,KAAKqxJ,WAAWhnJ,QAAQynJ,IAIC,UAAjBA,EAAGtxJ,WACHqxJ,EAAMjsJ,KAAKksJ,EAAGrrI,YAGf,CACH1kB,KAAM/B,KAAKQ,UACX6wJ,WAAYQ,IAxFxB10J,EAAAi0J,UA6FAj0J,EAAAg0J,SAASY,IAAMX,EAMf,MAAaY,UAAmBZ,EAE5B/oI,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,cACb,MAAOo4H,EAAUC,GAAW,CAAC,GAAK,KAElClyJ,KAAKs5G,KAAO,CACRhyG,OAAQmhB,EAAI0pI,gBAAgBF,EAAUC,GACtCE,QAASpqI,EAAApmB,QAAGyN,KAAKG,QACjB6iJ,KAAMrqI,EAAApmB,QAAGyN,KAAKI,KACdi+C,MAAO1lC,EAAApmB,QAAGyN,KAAKM,MACf2iJ,OAAQtqI,EAAApmB,QAAGyN,KAAKO,QAGpB5P,KAAKuyJ,mBAGFlqI,mBACHroB,KAAKwyJ,mBACLxyJ,KAAKqxJ,WAAWzrJ,KAAK,IAAIu5G,EAAApG,UAAUa,YAAY55G,KAAKs5G,KAAKhyG,SACzDtH,KAAKqxJ,WAAWzrJ,KAAK,IAAIu5G,EAAApG,UAAUtpG,KAAKzP,KAAKs5G,KAAK+4C,OAClDryJ,KAAKqxJ,WAAWzrJ,KAAK,IAAIu5G,EAAApG,UAAUvpG,QAAQxP,KAAKs5G,KAAK84C,UAKlD/pI,WAAWwyF,GAEd76G,KAAKs0B,IAAI,sBAAuBumF,GAChC76G,KAAK4gH,aAAa/F,GAKfxyF,cACYroB,KAAKqxJ,WAAWlnJ,OAAO2nJ,GAAMA,EAAGW,WACxCpoJ,QAAQqjD,IACPA,EAAM0rD,KAAKs5C,YACXhlG,EAAM0rD,KAAK81B,YAEf,MAAMhwH,EAAQlf,KAAKqxJ,WAAWtxI,QAAQ2tC,GACtC1tD,KAAKqxJ,WAAW3kI,OAAOxN,EAAO,KAI/BmJ,QAAQ+wF,GACX,MAAMr3G,EAAOq3G,EAAK54G,UAClBR,KAAKs0B,iBAAiBvyB,KACjB/B,KAAK2yJ,cAAc5wJ,KACpB/B,KAAK4yJ,qBAAqB7wJ,GAC1B/B,KAAKwwI,WAAWp3B,GACZj1G,EAAM0xB,SACN7N,EAAApmB,QAAGsD,IAAI,2BACDlF,KAAK6tI,SAASx4H,IAAI+xD,GAAKA,EAAE5mE,cAtD/CrD,EAAA60J,aA4DA70J,EAAAg0J,SAASa,WAAaA,EAGtB,MAAaa,UAAyBb,EAElC3pI,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,oBAEb75B,KAAKs5G,KAAKw5C,UAAY,EACtB9yJ,KAAKqxJ,WAAWzrJ,KAAK,IAAIu5G,EAAApG,UAAUsC,UAAUr7G,KAAKs5G,KAAKw5C,aAP/D31J,EAAA01J,mBAWA11J,EAAAg0J,SAAS0B,iBAAmBA,EAG5B,MAAaE,UAAuBf,EAEhC3pI,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,kBAEb75B,KAAKs5G,KAAKhyG,OAAS,GACnBtH,KAAKs5G,KAAK05C,UAAY,GACtBhzJ,KAAKs5G,KAAK25C,QAAU,GACpBjzJ,KAAKuyJ,mBAGFlqI,mBACH6O,MAAMq7H,mBACN,MAAMW,EAAgB,IAAIhC,EAAAiC,iBAAiBC,UACvCpzJ,KAAKs5G,KAAK05C,WACdhzJ,KAAKqxJ,WAAWzrJ,KAAKstJ,GAErB,MAAMG,EAAc,IAAInC,EAAAiC,iBAAiBG,QAAQtzJ,KAAKs5G,KAAK25C,SAC3DjzJ,KAAKqxJ,WAAWzrJ,KAAKytJ,IAnB7Bl2J,EAAA41J,iBAuBA51J,EAAAg0J,SAAS4B,eAAiBA,8UClO1B,MAAA/qI,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACAyzG,EAAAt8E,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,KAIMwrB,EAAMpL,EAAAC,OAAOC,SAGNpgB,EAAAo2J,QAAe,GAI5B,MAAaC,EAITnrI,YAAYzqB,GACRoC,KAAKpC,KAAOA,EAGTyqB,UACH,OAAOroB,KAAKpC,KAGTyqB,cACH,MAAO,CACHroB,KAAK0B,UACL1B,KAAKwuI,SAAS3vI,KAAKmB,OAIpBqoB,SAASjkB,GACZ,MAAMxG,EAAOoC,KAAK0B,UAClBsmB,EAAApmB,QAAGK,IAAI,eAAgB,cAChBrE,kCAtBfT,EAAAq2J,cA0BAr2J,EAAAo2J,QAAQ77H,KAAO87H,EAMf,MAAaC,UAAaD,EAEtBnrI,YAAYzqB,GACRs5B,MAAM,QAGH7O,cACH,MAAO,CACHroB,KAAK0B,UACL1B,KAAKwuI,SAAS3vI,KAAKmB,QAT/B7C,EAAAs2J,OAaAt2J,EAAAo2J,QAAQE,KAAOA,EAEf,MAAaz0E,UAAmBw0E,EAE5BnrI,YAAYzqB,GACRs5B,MAAM,cAGH7O,WACWroB,KAAKiK,MACbqW,IAAI,IAAI6J,EAAU60D,aARhC7hF,EAAA6hF,aAaA7hF,EAAAo2J,QAAQv0E,WAAaA,EAIR7hF,EAAAu2J,UAAY,WACrBv2J,EAAAo2J,QAAQ77H,KAAKl6B,KAAKwC,KAAMpC,OAE5BoqB,EAAApmB,QAAG0D,QAAQnI,EAAAu2J,UAAWv2J,EAAAo2J,QAAQ77H,MAIjBv6B,EAAAguG,KAAO,WAChBhuG,EAAAo2J,QAAQ77H,KAAKl6B,KAAKwC,KAAMpC,OAG5BoqB,EAAApmB,QAAG0D,QAAQnI,EAAAguG,KAAMhuG,EAAAo2J,QAAQ77H,MAIzB,MAAawF,UAAas2H,EAEtBnrI,YAAYzqB,GACRs5B,MAAMt5B,GAGHyqB,SAASvhB,GACZ,MAAM8X,EAAOC,KAAKC,UAAUhY,GAC5BkhB,EAAApmB,QAAGK,IAAI,eAAgB,WACnB,yCAA2C2c,GAI5CyJ,cACH,MACMskI,EADQ3sJ,KAAKiK,MAAMxC,WAAWgT,eAAeC,WACvBrF,IAAIvO,GAAQ,CAEhCA,EAAK6B,WACL3I,KAAKwuI,SAAS3vI,KAAKmB,KAAM8G,KAG3B+lJ,EAAW,IAAIn8C,EAAKoB,aAAa66C,GAEvC,OADAE,EAASl4C,OAAO,8BACT,CACH30G,KAAK0B,UACLmrJ,IAzBZ1vJ,EAAA+/B,OA8BA//B,EAAAo2J,QAAQr2H,KAAOA,EAIf,MAAa+/C,UAAkB9/E,EAAAo2J,QAAQr2H,KAEnC7U,cACI6O,MAAM,aAGH7O,SAASvhB,GACZ,MAAMlJ,EAAOkJ,EAAKpF,UAClB,GAAKoF,EAAKoC,IAAI,aAcV8e,EAAApmB,QAAGslB,WAAWtpB,qCAbd,GAAIkJ,EAAK4B,aAAc,CACnB5B,EAAKwZ,IAAI,IAAI6J,EAAU+yD,WACvB,MAAMy2E,EAAWlrI,EAAIM,cAAc,EAAG,GAChC5K,EAASrX,EAAK4B,eACpByV,EAAOG,OAAOH,EAAOI,SAAWo1I,GAChC7sJ,EAAKsT,SAAStT,EAAKoT,WAAwB,GAAXy5I,GAChC3rI,EAAApmB,QAAGslB,uBAAuBtpB,UAG1BoqB,EAAApmB,QAAGslB,mCAAmCtpB,MAlBtDT,EAAA8/E,YA2BA9/E,EAAAo2J,QAAQt2E,UAAYA,EAGpB,MAAa5yD,EAKThC,YAAYpe,GACRjK,KAAKiK,MAAQA,EACbjK,KAAK4zJ,UAAY,GAGdvrI,UACH,MAAMmsF,EAAWz2G,OAAOutC,OAAOtrC,KAAK4zJ,WAAWv+I,IAAIw+I,GAC/CA,EAAKC,eAEH7iD,EAAO,IAAIP,EAAKoB,aAAa0C,GAGnC,OAFAvD,EAAKnU,QAAQ,iBACbmU,EAAK0D,OAAO,6BACL1D,EAGJ5oF,WAAW0rI,GACd/zJ,KAAK4zJ,UAAUG,EAAQryJ,WAAaqyJ,EACpCA,EAAQ9pJ,MAAQjK,KAAKiK,MAGlBoe,SACH,OAAOtqB,OAAO6qB,KAAK5oB,KAAK4zJ,YA1BhCz2J,EAAAktB,YA8BAltB,EAAAo2J,QAAQlpI,UAAYA,8UC3LpB,MAAArC,EAAAC,EAAAhrB,EAAA,IACAq4I,EAAAr4I,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACAsgC,EAAAtgC,EAAA,IACAogB,EAAApgB,EAAA,GACA+2J,EAAA/2J,EAAA,IACAg3J,EAAAh3J,EAAA,IAEA+yC,EAAA/yC,EAAA,IAEMotB,UAACA,GAAa2pI,EAAAT,QAEd9qI,EAAMpL,EAAAC,OAAOC,SAENpgB,EAAAsgF,WAAkB,GAG/BtgF,EAAAsgF,WAAW9+E,OAAS,SAASf,EAAM2oB,GAC/B,GAAIppB,EAAAsgF,WAAWv+E,eAAetB,GAAO,CAEjC,OADmB,IAAIT,EAAAsgF,WAAW7/E,GAAM2oB,GAS5C,OALIyB,EAAApmB,QAAGgD,KAAK,uBACRojB,EAAApmB,QAAGgD,KAAK2hB,GACRyB,EAAApmB,QAAGK,IAAI,aAAc,qBACLrE,mBAEb,MAKXT,EAAAsgF,WAAWy2E,iBAAmB,SAASn8I,EAAO+lE,GAC1C,MAAM2tE,EAAS,IAAInW,EAAA1jC,aACb3nG,EAAQ6zE,EAAWqvC,WACnBjtH,EAAY49E,EAAWh6E,eACvBqwJ,EAAWr2E,EAAWs2E,cAAcr8I,GACpC1T,KAAS4F,EAAMvI,0BAA0BqW,KAAS7X,IAGxD,OAFAurJ,EAAO92C,OAAO,qBAAqBtwG,MACnConJ,EAAO92C,OAAOw/C,GACP1I,GAKXtuJ,EAAAsgF,WAAW42E,WAAa,SAASC,EAAUrqJ,GACvC,IAAI2pJ,EAAY,KAOhB,GAFIA,EAJC3pJ,EAAMf,IAAI,aAICe,EAAM/L,IAAI,aAAa01J,UAHvB,IAAIvpI,EAKhB2pI,EAAAT,QAAQr0J,eAAeo1J,GAAW,CAClC,MAAMT,EAAO,IAAIG,EAAAT,QAAQe,GACzBV,EAAUS,WAAWR,QAGrB7rI,EAAApmB,QAAGK,IAAI,aAAc,oCACMqyJ,cA6CnCn3J,EAAAsgF,WAAW82E,cA/B0B,CACjCC,SAAU,CACN,CAAC52J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,OAAQ2hB,MAAO,GACtB,CAACZ,KAAM7X,GAAsB,YAAdA,EAAK/E,KAAoBwd,MAAO,IAEnDk1I,WAAY,CACR,CAAC72J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,iBAAkB2hB,MAAO,GAChC,CAACZ,KAAM7X,GAAsB,WAAdA,EAAK/E,KAAmBwd,MAAO,IAElDm1I,WAAY,CACR,CAAC92J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,kBAAmB2hB,MAAO,IAErCo1I,SAAU,CACN,CAAC/2J,KAAM,SAAU2hB,MAAO,IAE5Bq1I,YAAa,CACT,CAACh3J,KAAM,SAAU2hB,MAAO,IAE5Bs1I,cAAe,CACX,CAACj3J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,uBACP,CAACA,KAAM,0BAEXk3J,YAAa,CACT,CAACl3J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,kBAAmB2hB,MAAO,KAqCzCpiB,EAAAsgF,WAAWgsC,UAhCsB,CAC7B+qC,SAAU,CACN,CAAC52J,KAAM,SAAU2hB,MAAO,GACxB,CAAC3hB,KAAM,eAAgB2hB,MAAO,IAElCk1I,WAAY,CACR,CAAC72J,KAAM,cAAe2hB,MAAO,GAC7B,CAAC3hB,KAAM,iBAAkB2hB,MAAO,IAEpCm1I,WAAY,CACR,CAAC92J,KAAM,OAAQ2hB,MAAO,GACtB,CAAC3hB,KAAM,eAAgB2hB,MAAO,IAElCo1I,SAAU,CACN,CAAC/2J,KAAM,iBAAkB2hB,MAAO,GAChC,CAAC3hB,KAAM,aAAc2hB,MAAO,GAC5B,CAAC3hB,KAAM,eAAgB2hB,MAAO,KAElCq1I,YAAa,CACT,CAACh3J,KAAM,YAAa2hB,MAAO,GAC3B,CAAC3hB,KAAM,eAAgB2hB,MAAO,GAC9B,CAAC3hB,KAAM,eAAgB2hB,MAAO,IAElCs1I,cAAe,CACX,CAACj3J,KAAM,OAAQ2hB,MAAO,GACtB,CAAC3hB,KAAM,OAAQ2hB,MAAO,IAE1Bu1I,YAAa,CACT,CAACl3J,KAAM,aAAc2hB,MAAO,GAC5B,CAAC3hB,KAAM,iBAAkB2hB,MAAO,KAKxCpiB,EAAAsgF,WAAWp0E,aAAe,SAASzL,GAG/B,OADem3J,EADD53J,EAAAsgF,WAAWgsC,UAAU7rH,KAKvCT,EAAAsgF,WAAWu3E,iBAAmB,SAASp3J,GAGnC,OADem3J,EADD53J,EAAAsgF,WAAW82E,cAAc32J,KAO3C,MAAaq3J,EAQT5sI,YAAYpe,EAAOrM,GACfoC,KAAKgmH,OAAS/7G,EACdA,EAAM4zE,cAAc79E,MACpBA,KAAK29E,WAAa//E,EAGfyqB,WAAY,OAAOroB,KAAKgmH,OAExB39F,eACH,OAAOroB,KAAK29E,WAGTt1D,cAActQ,GACjB,IAAI1T,EAAM,GAKV,OAJIrE,KAAKk1J,UAAUh2J,eAAe6Y,KAC9B1T,GAAOrE,KAAKk1J,UAAUn9I,IAE1B1T,QAAYrE,KAAKm1J,iBAMd9sI,eACH,MAAMhN,EAAWrb,KAAKgmH,OAAO9nH,IAAI,cAAcoe,cAC/C,GAAItc,KAAKk1J,UAAUh2J,eAAemc,GAAW,CACzC,MAAMvb,EAAOE,KAAKgmH,OAAOv3F,UACrB3uB,GACAkoB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,IAAKrE,KAAKk1J,UAAU75I,KAG1Crb,KAAKo1J,UAAUl2J,eAAemc,IAC9Brb,KAAKo1J,UAAU/5I,KAEnBrb,KAAKq1J,UAAUh6I,GAGZgN,UAAUhN,GACb,MAAMpR,EAAQjK,KAAKgmH,OACnBhmH,KAAKm1J,eAAiB,GAEtB,MAAMt4I,EAAQ5S,EAAM/L,IAAI,UAClB4e,EAAO5V,KAAKC,KAAK8C,EAAM1B,cAAgB,GAI7C,GAHAsU,EAAMG,SAASH,EAAMI,WAAaH,GAClCD,EAAMK,MAAML,EAAMM,QAAUL,GAExB7S,EAAMf,IAAI,cAAe,CACzB,MAAMosJ,EAASpuJ,KAAKC,KAAK8C,EAAMwuE,WAAa,GACtC88E,EAAStrJ,EAAM/L,IAAI,cACzBq3J,EAAOC,SAASD,EAAO9qC,WAAa6qC,GACpCC,EAAO11E,MAAMy1E,GAIjB,MAAMj9E,EAAW5vD,EAAIjL,aAAawK,EAAApmB,QAAGuT,OACrCnV,KAAKm1J,kBAAoB98E,kBACzBpuE,EAAM/L,IAAI,SAASuf,SAAS46D,EAAU,GAEtCrwD,EAAApmB,QAAGgb,mBAAmB3S,EAAOoR,IAlErCle,EAAA83J,iBA0EA,MAAaT,UAAiBS,EAC1B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,YACb,MAAMrM,EAAOqM,EAAMvI,UACnB1B,KAAKk1J,UAAY,CACbx7I,KAAM9b,uCACN86C,KAAM96C,+CACN63J,MAAO73J,6CAEXoC,KAAKo1J,UAAY,CACb77I,EAAG,OAEHG,EAAG,KACC1Z,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU00D,UAElCnmC,EAAG,KACC14C,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU20D,SAElC22E,GAAI,KACAt4J,EAAAsgF,WAAW42E,WAAW,aAAcr0J,KAAKgmH,SAE7C0vC,GAAI,OAEJC,GAAI,OAEJC,GAAI,OAEJC,GAAI,OAEJC,GAAI,QAMLztI,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,aAAc,GAC7B0iF,EAAM1iF,SAAS,UAAW,GAC1B0iF,EAAM1iF,SAAS,SAAU,GAGtB4K,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,aAAc,GAC7Bzd,KAAKm1J,gBAAkB,+BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,UAAW,GAC1Bzd,KAAKm1J,gBAAkB,6BAnDnCh4J,EAAAq3J,WAyDAr3J,EAAAsgF,WAAW+2E,SAAWA,EAKtB,MAAaC,UAAmBQ,EAE5B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,cACb,MAAMrM,EAAOqM,EAAMvI,UACnB1B,KAAKk1J,UAAY,CACbx7I,qCAAsC9b,KAE1CoC,KAAKo1J,UAAY,CACb77I,EAAG,KACC,MAAMknF,EAAO,IAAIljE,EAAAkG,MAAMC,UAAU1jC,KAAKgmH,QACtChmH,KAAKgmH,OAAOxiF,QAAQi9D,IAExB/mF,EAAG,KACC1Z,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU+2D,gBAOnC74D,eACH6O,MAAMxa,eACN,MAAMrB,EAAWrb,KAAKgmH,OAAO9nH,IAAI,cAAcoe,cAC/C,GAAIjB,EAAW,GAAM,IAAMrb,KAAKo1J,UAAUl2J,eAAemc,GAAW,CAChE,MAAMnb,EA6aPuoB,EAAIjL,aAAargB,EAAA44J,sBA5aVj4E,EAAa,IAAI3gF,EAAAsgF,WAAWv9E,GAAWF,KAAKmtH,YAClDrvC,EAAWphE,eAEX1c,KAAKk1J,UAAU75I,GAAYyiE,EAAWo3E,UAAU75I,IAIjDgN,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9B,IAAK,IAAIb,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIg7E,EAAmB5vD,EAAIjL,aAAawK,EAAApmB,QAAGuT,OAC3CkjE,EAAWA,EAAS9iE,cACpB4qF,EAAM1iF,SAAS46D,EAAU5vD,EAAIM,cAAc,EAAG,KAI/CV,UAAUhN,GACb6b,MAAMm+H,UAAUh6I,GAChB,MAAMg9D,EAAW5vD,EAAIjL,aAAawK,EAAApmB,QAAGuT,OACrCnV,KAAKm1J,qBAAuB98E,mBAC5Br4E,KAAKgmH,OAAO9nH,IAAI,SAASuf,SAAS46D,EAAU,IA9CpDl7E,EAAAs3J,aAkDAt3J,EAAAsgF,WAAWg3E,WAAaA,EAKxB,MAAaG,UAAoBK,EAE7B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,eACb,MAAMmtB,EAAQntB,EAAMvI,UAEpB1B,KAAKk1J,UAAY,CACbx7I,KAAM0d,4CACNshB,KAAMthB,iDACNq+H,MAAOr+H,6CACPs+H,MAAOt+H,qCACPu+H,MAAOv+H,mCACPw+H,MAAOx+H,qCACPy+H,MAAOz+H,kDACP0+H,MAAO1+H,mCAGXp3B,KAAKo1J,UAAY,CACb77I,EAAG,OAGHG,EAAG,KACC1Z,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU6zD,WAElCtlC,EAAG,KACC14C,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU8zD,WAElCw3E,GAAI,KACAz1J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUq0D,iBAElCk3E,GAAI,KACA11J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU+zD,cAElCy3E,GAAI,KACA31J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAU8yD,WAC9B9/E,EAAAsgF,WAAW42E,WAAW,YAAar0J,KAAKgmH,SAE5C4vC,GAAI,KACA51J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUk0D,gBAElCw3E,GAAI,KACA71J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUg0D,gBAElC23E,GAAI,KACA91J,KAAKgmH,OAAO9nH,IAAI,UAAU2kJ,eAAe,GACzC7iJ,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUm0D,aAKnCj2D,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,WAAY,GAC3B0iF,EAAM1iF,SAAS,SAAU,GAGtB4K,cAActQ,GAEjB,OADYmf,MAAMk9H,cAAcr8I,GAI7BsQ,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,WAAY,GAC3Bzd,KAAKm1J,gBAAkB,6BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,WAAY,GAC3Bzd,KAAKm1J,gBAAkB,8BAtEnCh4J,EAAAy3J,cA2EAz3J,EAAAsgF,WAAWm3E,YAAcA,EAKzB,MAAaF,UAAmBO,EAE5B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,cACb,MAAMmtB,EAAQntB,EAAMvI,UAEpB1B,KAAKk1J,UAAY,CACbx7I,KAAM0d,8BACNshB,KAAMthB,mDACNq+H,MAAOr+H,uCACPs+H,MAAOt+H,oCACPu+H,MAAOv+H,4CACPw+H,MAAOx+H,wCACPy+H,MAAOz+H,kCACP0+H,MAAO1+H,yDAGXp3B,KAAKo1J,UAAY,CACb77I,EAAG,KAEC,MAAMknF,EAAO,IAAIljE,EAAAkG,MAAMC,UAAU1jC,KAAKgmH,QAChCgwC,EAAQ,IAAIz4H,EAAAkG,MAAMwyH,cACxBx1D,EAAKz8D,SAASgyH,GACdh2J,KAAKgmH,OAAOxiF,QAAQi9D,IAExB/mF,EAAG,KACC1Z,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMyyH,YAE7Cx9G,EAAG,KACC14C,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM0yH,YAE7CV,GAAI,KACAz1J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM2yH,YAE7CV,GAAI,KACA11J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM4yH,kBAE7CV,GAAI,KACA31J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMy8C,aAE7C01E,GAAI,KACA51J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM6yH,WAE7CT,GAAI,KACA71J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMrZ,cAE7C0rI,GAAI,KACA91J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM8yH,YAK9CluI,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,YAAa,GAC5B0iF,EAAM1iF,SAAS,QAAS,GAGrB4K,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,QAAS,GACxBzd,KAAKm1J,gBAAkB,0BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,YAAa,GAC5Bzd,KAAKm1J,gBAAkB,+BAnEnCh4J,EAAAu3J,aAyEAv3J,EAAAsgF,WAAWi3E,WAAaA,EAKxB,MAAaC,UAAiBM,EAE1B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,YACb,MAAMmtB,EAAQntB,EAAMvI,UAEpB1B,KAAKk1J,UAAY,CACbx7I,KAAM0d,kCACNshB,KAAMthB,yCACNq+H,MAAOr+H,2CACPs+H,MAAOt+H,yCACPu+H,MAAOv+H,2BACPw+H,MAAOx+H,6BACPy+H,MAAOz+H,iCACP0+H,MAAO1+H,gCAGXp3B,KAAKo1J,UAAY,CACb77I,EAAG,OAGHG,EAAG,KACC1Z,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUg1D,WAElCzmC,EAAG,KACC14C,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUi1D,aAElCq2E,GAAI,KACAz1J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUk1D,cAElCq2E,GAAI,KACA11J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUm1D,YAElCq2E,GAAI,KACA31J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUo1D,gBAElCq2E,GAAI,KACA51J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUq1D,gBAElCq2E,GAAI,KACA71J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUs1D,eAElCq2E,GAAI,KACA91J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUu1D,cAKnCr3D,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,WAAY,GAC3B0iF,EAAM1iF,SAAS,aAAc,GAC7B0iF,EAAM1iF,SAAS,SAAU,GAGtB4K,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,WAAY,GAC3Bzd,KAAKm1J,gBAAkB,6BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,aAAc,GAC7Bzd,KAAKm1J,gBAAkB,+BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,UAAW,GAC1Bzd,KAAKm1J,gBAAkB,6BApEnCh4J,EAAAw3J,WAyEAx3J,EAAAsgF,WAAWk3E,SAAWA,EAKtB,MAAaG,UAAoBG,EAE7B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,eACb,MAAMmtB,EAAQntB,EAAMvI,UAEpB1B,KAAKk1J,UAAY,CACbx7I,KAAM0d,2BACNshB,KAAMthB,oBACNq+H,MAAOr+H,0BACPs+H,MAAOt+H,6BACPu+H,MAAOv+H,oCACPw+H,MAAOx+H,+BACPy+H,MAAOz+H,8CACP0+H,MAAO1+H,qCAGXp3B,KAAKo1J,UAAY,CACb77I,EAAG,KACC,MAAMknF,EAAO,IAAIljE,EAAAkG,MAAMC,UAAU1jC,KAAKgmH,QACtChmH,KAAKgmH,OAAOxiF,QAAQi9D,GACpBzgG,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM+yH,aAE7C98I,EAAG,KACC1Z,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMgzH,eAE7C/9G,EAAG,KACC14C,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMizH,OAE7CjB,GAAI,KACAz1J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMq5C,SAE7C44E,GAAI,KACA11J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMy3C,YAE7Cy6E,GAAI,KACA31J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMkzH,iBAE7Cf,GAAI,KACA,MAAMgB,EAAW,IAAIr5H,EAAAkG,MAAMozH,mBAC3B72J,KAAKgmH,OAAOjiF,UAAUC,SAAS4yH,IAEnCf,GAAI,KACA71J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMqzH,YAE7ChB,GAAI,KACA91J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMszH,aAK9C1uI,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,aAAc,GAC7B0iF,EAAM1iF,SAAS,QAAS,GAGrB4K,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,QAAS,GACxBzd,KAAKm1J,gBAAkB,0BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,aAAc,GAC7Bzd,KAAKm1J,gBAAkB,gCAlEnCh4J,EAAA23J,cAuEA33J,EAAAsgF,WAAWq3E,YAAcA,EAKzB,MAAaD,UAAsBI,EAE/B5sI,YAAYpe,GACRitB,MAAMjtB,EAAO,iBACb,MAAMmtB,EAAQntB,EAAMvI,UAEpB1B,KAAKk1J,UAAY,CACbx7I,KAAM0d,gCACNshB,KAAMthB,8CACNq+H,MAAOr+H,4CACPs+H,MAAOt+H,gCACPu+H,MAAOv+H,sCACPw+H,MAAOx+H,+BACPy+H,MAAOz+H,oBACP0+H,MAAO1+H,uCAGXp3B,KAAKo1J,UAAY,CACb77I,EAAG,KACC,MAAMknF,EAAO,IAAIljE,EAAAkG,MAAMC,UAAU1jC,KAAKgmH,QACtChmH,KAAKgmH,OAAOxiF,QAAQi9D,IAExB/mF,EAAG,KACY1Z,KAAKmtH,WAAW1lH,WAAW4B,eACnC2tJ,QAAQ,YAAa,IAAI/C,EAAAhG,UAAU,eAE1Cv1G,EAAG,KACC14C,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMwzH,cAE7CxB,GAAI,KACAz1J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAMyzH,aAE7CxB,GAAI,KACW11J,KAAKmtH,WAAW1lH,WAAW4B,eACnC2tJ,QAAQ,YAAa,IAAI/C,EAAAhG,UAAU,eAG1C0H,GAAI,KACA31J,KAAKgmH,OAAO1lG,IAAI,IAAI6J,EAAUo3D,oBAElCq0E,GAAI,KACA51J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM0zH,aAE7CtB,GAAI,KACA71J,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM2zH,cAE7CtB,GAAI,KACW91J,KAAKmtH,WAAW1lH,WAAW4B,eACnC2tJ,QAAQ,YAAa,IAAI/C,EAAAhG,UAAU,cACtCjuJ,KAAKgmH,OAAOjiF,UAAUC,SAAS,IAAIzG,EAAAkG,MAAM4zH,gBAO9ChvI,mBACH,MAAM83E,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9BiiG,EAAM1iF,SAAS,YAAa,GAC5B0iF,EAAM1iF,SAAS,QAAS,GAGrB4K,UAAUhN,GACb,MAAM8kF,EAAQngG,KAAKgmH,OAAO9nH,IAAI,SAC9Bg5B,MAAMm+H,UAAUh6I,GACZA,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,YAAa,GAC5Bzd,KAAKm1J,gBAAkB,8BAEvB95I,EAAW,GAAM,IACjB8kF,EAAM1iF,SAAS,QAAS,GACxBzd,KAAKm1J,gBAAkB,2BAmBnC,SAASJ,EAAsBnxJ,GAC3B,MAAMqrB,EAAS+gB,EAAAvS,YAAYmO,YACrBnjC,EAAS,GAmBf,OAlBA7E,EAAMyG,QAAQvD,IACV,GAAoB,mBAATA,EAAqB,CAC5B,MAAMqxG,EAAclpF,EAAOyc,iBAAiB5kC,GAC5C2B,EAAO7C,KAAK,CAAChI,KAAMu6G,EAAYz2G,UAAW6d,MAAO,SAEhD,GAAIzY,EAAK6X,KAAM,CAChB,MAAMw5F,EAAclpF,EAAOyc,iBAAiB5kC,EAAK6X,MAC7C7X,EAAKyY,MACL9W,EAAO7C,KAAK,CAAChI,KAAMu6G,EAAYz2G,UAAW6d,MAAOzY,EAAKyY,QAGtD9W,EAAO7C,KAAK,CAAChI,KAAMu6G,EAAYz2G,UAAW6d,MAAO,SAIrD9W,EAAO7C,KAAKkB,KAGb2B,EA/GXtL,EAAA03J,gBA4EA13J,EAAAsgF,WAAWo3E,cAAgBA,EAEd13J,EAAAm6J,cAAgB,CACzB,aAAc,cAAe,WAAY,gBACzC,aAAc,WAAY,eAGjBn6J,EAAA44J,qBAAuB54J,EAAAm6J,cAAcntJ,OAAOotJ,GAC9C,eAAPA,sKCruBJ,MAAAvvI,EAAAC,EAAAhrB,EAAA,IACAo3B,EAAAp3B,EAAA,GAGAq3C,EAAAr3C,EAAA,GAGMkH,EADNlH,EAAA,EACcq3B,CAAI,oBAEZvN,EAAOsN,EAAArN,UAAUC,UAmBvB9pB,EAAAq6J,KAAA,MASInvI,YAAYzqB,GACRoC,KAAKo3B,MAAQx5B,EACboC,KAAKusH,QAAU,GAEfvsH,KAAKy3J,QAAU,KACfz3J,KAAK03J,YAAc,EACnB13J,KAAK23J,iBAAmB,EACxB33J,KAAK01B,WAAY,EACjB3O,EAAK4O,YAAY3N,EAAApmB,QAAGqJ,iBAAkBjL,MAGnCqoB,UACH,OAAOroB,KAAKo3B,MAGT/O,mBAAmBi7F,GACtBtjH,KAAK23J,iBAAmBr0C,EAIrBj7F,aACH,OAAIroB,KAAKusH,QAAQhrH,QAAUvB,KAAK23J,iBAM7BtvI,UAAUk6G,GAASviI,KAAKy3J,QAAUl1B,EAElCl6G,YACH,OAAOroB,KAAKy3J,QAGTpvI,gBACH,OAAOroB,KAAK03J,YAGTrvI,YACH,OAAOroB,KAAKusH,QAAQzjG,QAGjBT,SAASolB,GACZ,MAAM52B,EAAK42B,EAAO32B,QAElB,OADc9W,KAAKusH,QAAQ//F,UAAUviB,GAASA,EAAM6M,UAAYD,IAChD,EAIbwR,SAASpe,GACZ,OAAKjK,KAAK43J,SAAS3tJ,IAKf+d,EAAApmB,QAAGK,IAAI,YAAa,WAChB,yBAA2BjC,KAAK0B,YAEjC,IAPH1B,KAAKusH,QAAQ3mH,KAAKqE,IACX,GAURoe,YAAYpe,GACf,MAAMiV,EAAQlf,KAAKusH,QAAQ//F,UACvBrG,GAAKA,EAAErP,UAAY7M,EAAM6M,SAE7B,OAAIoI,GAAS,IACTlf,KAAKusH,QAAQ7/F,OAAOxN,EAAO,IACpB,GAORmJ,kBAAmBroB,KAAKusH,QAAU,GAGlClkG,OAAOyN,EAASzxB,GACnB,GAAIyxB,IAAY9N,EAAApmB,QAAGqJ,iBAAkB,CACjC9G,KAASnE,KAAKo3B,8BACd,MAAMntB,EAAQ5F,EAAI4F,MAClB,GAAIjK,KAAK43J,SAAS3tJ,GACd,GAAKjK,KAAK8tB,YAAY7jB,GAMjB,GACCjK,KAAK03J,YAEP,IAAIhwI,aADU1nB,KAAK63J,YAAYn2J,mBACQ1B,KAAKo3B,QAC5C1P,cAAqBzd,EAAM6M,UAE3B3S,mBAAuBnE,KAAK03J,eAAehwI,KAC3C,MAAMowI,EAAU,CACZ/1J,KAAM,eAAgBg2J,KAAM/3J,MAGhCmE,KAASnE,KAAKo3B,6BACdrQ,EAAKe,UAAUE,EAAApmB,QAAGsK,eAAgB4rJ,GACN,IAAxB93J,KAAKusH,QAAQhrH,SACb4C,EAAM,YAAcnE,KAAKo3B,MAAQ,cACjCjzB,mBAAuBnE,KAAK03J,eAC5B3wI,EAAKqmB,eAAeptC,WAtBE,CAE1B,IAAI0nB,EAAS,WADC1nB,KAAK63J,YAAYn2J,UAE/BgmB,GAAU,6BAAgCzd,EAAMvI,UAChDsmB,EAAApmB,QAAGK,IAAI,YAAa,SAAUylB,KA0BvCW,SACH,MAAO,CACHzqB,KAAMoC,KAAKo3B,MACXzzB,OAAQ3D,KAAKusH,QAAQl3G,IAAIpL,GAASA,EAAM6M,SACxCkhJ,gBAAiBh4J,KAAK23J,oBAOlCx6J,EAAA86J,OAAA,MAWI5vI,YAAYzqB,GACRoC,KAAKo3B,MAAQx5B,EACboC,KAAKk4J,QAAU,GACfl4J,KAAK+oG,OAAS,KACd/oG,KAAKm4J,UAAW,EAIhBn4J,KAAKo4J,OAAS,CACVp2H,SAAU,EACVq2H,WAAY,EACZC,UAAW,GAEft4J,KAAK01B,WAAY,EACjB3O,EAAK4O,YAAY3N,EAAApmB,QAAGsK,eAAgBlM,MAGjCqoB,UACH,MAAO,SAGJA,YACH,OAAOroB,KAAKk4J,QAAQpvI,QAGjBT,UAAUkwI,GACbv4J,KAAKk4J,QAAUK,EACfv4J,KAAKk4J,QAAQ7tJ,QAAQ0tJ,IACjBA,EAAKS,UAAUx4J,QAIhBqoB,UACH,OAAOroB,KAAKo3B,MAGT/O,SAAStQ,GACZ/X,KAAK+oG,OAAShxF,EACd/X,KAAK+oG,OAAO1C,UAAUrmG,MAEnBqoB,WACH,OAAOroB,KAAK+oG,OAGT1gF,WACH,OAAOroB,KAAKo4J,OAGT/vI,SAAS83E,GAAQngG,KAAKo4J,OAASj4D,EAE/B93E,QAAQ0vI,EAAM9hJ,EAAGC,EAAG2W,GACvB,MAAM4rI,IAAa5rI,EAAK4rI,WAClBC,EAAU7rI,EAAK6rI,QAAU,EAAI7rI,EAAK6rI,QAAU,EAElD,GAAK1wI,EAAApmB,QAAG6D,cAAc,CAACzF,KAAK+oG,SA2BxB/gF,EAAApmB,QAAGK,IAAI,cAAe,UAClB,4CA5B8B,CAClCjC,KAAKk4J,QAAQtyJ,KAAKmyJ,GAClB,MAAMp0J,EAASo0J,EAAKztJ,YACdquJ,EAAezxJ,KAAKC,KAAKxD,EAAOpC,OAASm3J,GAE/C,GAAID,EAAY,CACZ,IAAIp7J,EAAI,EACR,IAAK,IAAIonB,EAAM,EAAGA,EAAMi0I,EAASj0I,IAC7B,IAAK,IAAIguG,EAAO,EAAGA,EAAOkmC,EAAclmC,IAChCp1H,EAAIsG,EAAOpC,QACXvB,KAAK+tB,SAASpqB,EAAOtG,KAAM4Y,EAAIw8G,EAAMv8G,EAAIuO,OAKpD,CACD,IAAIpnB,EAAI,EACR,IAAK,IAAIonB,EAAM,EAAGA,EAAMi0I,EAASj0I,IAC7B,IAAK,IAAIstG,EAAO,EAAGA,EAAO4mC,EAAc5mC,IAChC10H,EAAIsG,EAAOpC,QACXvB,KAAK+tB,SAASpqB,EAAOtG,KAAM4Y,EAAIwO,EAAKvO,EAAI67G,IAU5DgmC,EAAKS,UAAUx4J,MAKZqoB,SAASpe,EAAOgM,EAAGC,GACtB,MAAMpW,EAAOE,KAAK+oG,OAAOvlF,SAASiL,QAAQxY,EAAGC,GAExCpW,EAAK41F,cACN51F,EAAK4uB,YAAY4lB,EAAArE,KAAKsB,OAErBvxC,KAAK+oG,OAAOh7E,SAAS9jB,EAAOgM,EAAGC,IAChC8R,EAAApmB,QAAGK,IAAI,cAAe,yBACJgI,QAAYgM,KAAKC,KAIpCmS,iBAAiB0vI,GAEpB,OADc/3J,KAAKk4J,QAAQn4I,QAAQg4I,IACnB,EAIb1vI,SACH,GAAIroB,KAAKk4J,QAAQ32J,OAAS,EAAG,CACzB,IAAIq3J,EAAY,EAMhB,GALA54J,KAAKk4J,QAAQ7tJ,QAAQ0tJ,IACZA,EAAKc,gBACJD,IAGNA,GAAa,EACb,OAAO,OAIX5wI,EAAApmB,QAAGK,IAAI,cAAe,SAAU,mCAEpC,OAAO,EAGJomB,OAAOyN,EAASzxB,GACnB,GAAIyxB,IAAY9N,EAAApmB,QAAGsK,eAAgB,CAC/B,MAAM29B,EAAQ7pC,KAAK0B,UACnByC,KAAS0lC,wBACT,MAAM9nC,KAACA,EAAIg2J,KAAEA,GAAQ1zJ,EACrB,GAAIrE,KAAK84J,iBAAiBf,IAAkB,iBAATh2J,IAC1B/B,KAAKm4J,UAAYn4J,KAAK+4J,SAAU,CACjC50J,aAAiB0lC,eACjB1lC,EAAM,kCACN4iB,EAAKqmB,eAAeptC,MACpB,MAAMoE,EAAM,CAACm+H,OAAQviI,MACrBmE,KAAS0lC,0BACT9iB,EAAKe,UAAUE,EAAApmB,QAAGqK,gBAAiB7H,GACnCpE,KAAKm4J,UAAW,IAOzB9vI,SACH,MAAO,CACH2vB,QAAQ,EACRp6C,KAAMoC,KAAKo3B,MACXrf,MAAO/X,KAAK+oG,OAAOjyF,QACnByhJ,OAAQv4J,KAAKk4J,QAAQ7iJ,IAAI0iJ,GAAQA,EAAKtxI,UACtC05E,MAAOngG,KAAKo4J,OACZD,SAAUn4J,KAAKm4J,UAIhB9vI,kBACHroB,KAAKk4J,QAAQ7tJ,QAAQ0tJ,IACjBhxI,EAAKqmB,eAAe2qH,KAExBhxI,EAAKqmB,eAAeptC,uFC1U5B,MAAAg5J,EAAA/7J,EAAA,IACAi7F,EAAAj7F,EAAA,IACAo7F,EAAAp7F,EAAA,IACAogB,EAAApgB,EAAA,GACAk7F,EAAAl7F,EAAA,IACAq3C,EAAAr3C,EAAA,GACAogC,EAAApgC,EAAA,GAEMwrB,EAAMpL,EAAAC,OAAOC,SAGnB,MAAa07I,UAAsBD,EAAArkC,eAK/BtsG,cACI6O,QACAl3B,KAAK44D,UAAW,EAChB54D,KAAK40H,qBAAsB,EAGxBvsG,OAAOpR,EAAMC,EAAM2V,GACtB,MAAM9U,EAAQ/X,KAAKu4F,YAAYthF,EAAMC,EAAM2V,GAI3C,OAFA7sB,KAAKk5J,kBAAkBnhJ,EAAO8U,GAEvB9U,EAIJsQ,YAAYpR,EAAMC,EAAM2V,GAC3B,MAAMmkE,EAAS,IAAIkH,EAAA/M,aACnB,IAAIwG,EAAS,KAGTA,EADA9kE,EAAKssI,QACInoE,EAAOgI,mBAAmB/hF,EAAMC,EAAM2V,GAGtCmkE,EAAO4C,cAAc38E,EAAMC,EAAM2V,GAG9C,MAAM9U,EAAQ,IAAIogF,EAAAzjD,MAMlB,OALA38B,EAAM6gF,OAAOjH,EAAOt8E,KAEpB0C,EAAMgiF,UAAU,SAAUpI,EAAO/D,QACjC5tF,KAAK64F,oBAAoB9gF,GACzB/X,KAAKo5J,gBAAgBrhJ,EAAO45E,EAAOrD,QAC5Bv2E,EAGJsQ,oBAAoBtQ,GACvB,MAAM61E,EAAS71E,EAAMksF,YAAYrW,OACjC,IAAK,IAAIvwF,EAAI,EAAGA,EAAIuwF,EAAOrsF,OAAQlE,IAAK,CACpC,MAAMglF,EAASuL,EAAOvwF,GAAGqG,KACnBA,EAAO,IAAI25B,EAAAjE,aAAY,GAC7BrhB,EAAMoW,WAAWzqB,EAAM2+E,EAAO,GAAIA,EAAO,KAI1Ch6D,gBAAgBtQ,EAAcshJ,GACjC,MAAMhkJ,EAAM0C,EAAMyL,SACZ81I,EAAQ,CAAChlH,EAAArE,KAAKK,MAAOgE,EAAArE,KAAKmB,KAAMkD,EAAArE,KAAKh7B,OAC3CokJ,EAAMhvJ,QAAQ0sD,IACV,MAAMk4B,EAAWxmE,EAAIjL,aAAa87I,GAClC,IAAInlI,EAACA,EAACq9B,EAAEA,GAAKuF,EACb,MAAM9gD,EAACA,EAACC,EAAEA,GAAK6gD,EACf5iC,GAAK,EACLq9B,GAAK,EACL,IAAK,IAAIn0D,EAAI4Y,EAAG5Y,GAAK4Y,EAAIke,EAAG92B,IACxB,IAAK,IAAImN,EAAI0L,EAAG1L,GAAK0L,EAAIs7C,EAAGhnD,IACxB6K,EAAIugC,cAAcv4C,EAAGmN,EAAGykF,KAMjC5mE,kBAAkBtQ,EAAc8U,GACnC,IAAI+gE,EAAS71E,EAAMksF,YAAYrW,OAC/B,MAAMiM,EAAY,IAAIxB,EAAAyB,gBAAgBjtE,GAEhCk1F,EAAaloB,EAAUf,YAAY/gF,EAAO8U,GAChD+gE,EAASA,EAAOzjF,OAAOgkF,GAAS4zB,EAAWhiG,QAAQouE,GAAS,GAE5D,MAAMorE,EAAgB1/D,EAAUd,eAAehhF,EAAO8U,GACtD+gE,EAASA,EAAOzjF,OAAOgkF,GAASorE,EAAcx5I,QAAQouE,GAAS,GAE/Dp2E,EAAMgiF,UAAU,SAAUnM,GAC1B5tF,KAAKw5J,gBAAgBzhJ,EAAO8U,GAGzBxE,gBAAgBtQ,EAAc8U,GACjC,MAAMgtE,EAAY,IAAIxB,EAAAyB,gBAAgBjtE,GACvB9U,EAAMksF,YAAYrW,OAC1BvjF,QAAQ8jF,IACX0L,EAAU4/D,cAAc1hJ,EAAOo2E,EAAOthE,MApFlD1vB,EAAA87J,gBAyFAA,EAAc5yG,QAAU,CACpBqzG,QAAS,CACL7jC,eAAgB,GAChBr9G,UAAW,EACXmhJ,eAAgB,GAEpBC,QAAS,GAGTC,WAAY,GAGZC,KAAM,iJClHV9vI,EAAA/sB,EAAA,KACA+sB,EAAA/sB,EAAA,KACA+sB,EAAA/sB,EAAA,KACA+sB,EAAA/sB,EAAA,kVCCA,MAAA+qB,EAAAC,EAAAhrB,EAAA,IACAirB,EAAAD,EAAAhrB,EAAA,KAEAw5B,EAAArC,EAAAn3B,EAAA,IACA+7J,EAAA/7J,EAAA,IACAi7F,EAAAj7F,EAAA,IACAk7F,EAAAl7F,EAAA,IACAo7F,EAAAp7F,EAAA,IACAytF,EAAAztF,EAAA,IACA88J,EAAA98J,EAAA,KACAmiH,EAAAniH,EAAA,IACAm5G,EAAAn5G,EAAA,IACAogB,EAAApgB,EAAA,GACAm3E,EAAAn3E,EAAA,GAEMwrB,EAAMpL,EAAAC,OAAOC,SACb+4C,EAAOpuC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAmB7B,MAAaqmE,UAAwBq8B,EAAArkC,eAE1BtsG,oBACH,MAAO,CACH2xI,UAAU,EACV1oE,WAAY,EACZozB,YAAa,CACThzG,EAAG,YACHC,EAAG,OACHC,EAAG,QACHC,EAAG,OACHG,GAAI,QACJD,GAAI,SAERkoJ,UAAW,GACXC,UAAW,GACXxhJ,SAAU,IACV06E,iBAAiB,GAQzB/qE,cACI6O,QACAl3B,KAAK44D,UAAW,EAChB54D,KAAK40H,qBAAsB,EAC3B50H,KAAKm6J,YAAc,EAIhB9xI,OAAOpR,EAAMC,EAAM2V,GACtB,IAAIutI,EAAcp6J,KAAKu4F,YAAYthF,EAAMC,EAAM2V,GAa/C,OAZAA,EAAKumE,iBAAkB,EACvBpzF,KAAKq6J,cAAcD,EAAavtI,GAE5BA,EAAKmtI,WACLh6J,KAAKm6J,YAAcn6J,KAAKs6J,iBAAiBF,EAAavtI,IAGtDA,EAAK63F,cACL01C,EAAcp6J,KAAKu6J,yBAAyBH,EAAavtI,IAItDutI,EAIJ/xI,YACHpR,EAAcC,EAAc2V,GAE5B,MAAMouG,EAAiBl9H,OAAO4kF,OAAO,CACjCu5C,YAAa,SACb9oC,iBAAiB,EACjBtH,SAAU,cACPj/D,GAED6rE,EAAS,IAAIR,EAAA/M,aAGbqvE,EAgMd,SAA4B3tI,GACxB,GAAIA,EAAK63F,YAAa,CAClB,MAAMA,YAACA,GAAe73F,EACtB,IAAK4tI,EAAY/1C,EAAYhzG,GACzB,OAAOg5E,EAAAuH,OAAO+pD,mBAEb,IAAKye,EAAY/1C,EAAY/yG,GAC9B,OAAO+4E,EAAAuH,OAAOgqD,mBAEb,IAAKwe,EAAY/1C,EAAY9yG,GAC9B,OAAO84E,EAAAuH,OAAOkqD,kBAEb,IAAKse,EAAY/1C,EAAY7yG,GAC9B,OAAO64E,EAAAuH,OAAOiqD,kBAGtB,OAAO,KAhNcwe,CAAmB7tI,GAChC2tI,IACAv/B,EAAUvoC,cAAgB8nE,GAG9B,MAAM7oE,EAAS+G,EAAOY,aAAariF,EAAMC,EAAM+jH,GAEzCljH,EAAQ,IAAIogF,EAAAzjD,MAKlB,OAJA38B,EAAM6gF,OAAOjH,EAAOt8E,KACpBrV,KAAK26J,oBAAoB5iJ,EAAO45E,EAAOE,OAEvC7xF,KAAK46J,qBAAqB7iJ,GACnBA,EAGJsQ,iBAAiBtQ,EAAc8U,GAElC,IAAIguI,EAAS,EACb,MAAMvjH,EAASv/B,EAAMksF,YACf23C,EAAatkG,EAAOwjH,WACpBpiJ,SAACA,GAAYmU,EAIbwzF,EAAW,CACb1hG,KAJa7X,GACZA,EAAKxI,OAAU,EAAIoa,GAAe5R,EAAKxI,OAASoa,EAGjCA,WAAU6+F,OAAQ,GAEhCwjD,EAAW,IAAI37C,EAAAlI,YAQrB,GAPA0kC,EAAWvxI,QAAQunD,IACf,MAAMopG,EAAcD,EAASzjD,cAAc+I,GAC3CjK,EAAAV,OAAOG,eAAe99F,EAAO65C,EAAMopG,GACnCH,GAAUG,EAAYz5J,SAItBymB,EAAApmB,QAAG8jB,UAAUu1I,GAAoB,CACjC,MAAMC,EAAWzyI,EAAIjL,aAAao+H,GAC5Buf,EAAS1yI,EAAIM,cAAc,EAAG,GAC9B6uF,EAAYmjD,EAAStjD,aAAa,CAACC,MAAO,EAAGx+F,OAAQiiJ,IAC3D/kD,EAAAV,OAAOG,eAAe99F,EAAOmjJ,EAAUtjD,GACvCijD,GAAUjjD,EAAUr2G,OAGxB,MAAM65J,EAAc9jH,EAAOsa,KAQ3B,OAPAyuD,EAAS9I,OAAS6jD,EAAY75J,OAChBw5J,EAASzjD,cAAc+I,GAC/Bh2G,QAAQvD,IACV,MAAM8qD,EAAOnpC,EAAIjL,aAAa49I,GAC9BhlD,EAAAV,OAAOG,eAAe99F,EAAO65C,EAAM,CAAC9qD,IACpC+zJ,GAAU,IAEPA,EAGJxyI,oBAAoBtQ,EAAc85E,GAQrC95E,EAAM4hF,UAPS,CACXt+B,SAAU,GACV2pC,SAAU,GACVpzC,KAAM,GACNkpG,UAAW,GACX7d,MAAO,KAIXl/I,OAAOutC,OAAOumD,GAAOxnF,QAASqiD,IACtB2uG,EAAGP,UAAUjkI,KAAK61B,EAAK9uD,MACvBoC,KAAKs7J,YAAYvjJ,EAAO20C,EAAM,aAEzB2uG,EAAGpe,MAAMpmH,KAAK61B,EAAK9uD,MACxBoC,KAAKs7J,YAAYvjJ,EAAO20C,EAAM,SAEzB2uG,EAAGr2D,SAASnuE,KAAK61B,EAAK9uD,MAC3BoC,KAAKs7J,YAAYvjJ,EAAO20C,EAAM,YAEzB2uG,EAAGhgG,SAASxkC,KAAK61B,EAAK9uD,MAC3BoC,KAAKs7J,YAAYvjJ,EAAO20C,EAAM,YAG9B1sD,KAAKs7J,YAAYvjJ,EAAO20C,EAAM,UAKnCrkC,YAAYtQ,EAAc20C,EAAM9uD,GACnC,MAAM0rB,EAAO8qD,EAAA7pD,SAASM,YAAY6hC,GACpB30C,EAAMyL,SAASyyF,cAAc3sF,GACrCjf,QAAQvK,IACV,MAAOmW,EAAGC,GAAKpW,EAAK8b,QACd9Y,EAAS,IAAI2zB,EAAQiG,cAAc6+H,EAAQ39J,IACjDkF,EAAO8oF,OAAOhuF,GACdma,EAAMoW,WAAWrrB,EAAQmT,EAAGC,KAEhC,MAAM07C,EAAO,IAAI0E,EAAKhtC,EAAKC,IAAKD,EAAKE,IAAKF,EAAKG,IAAKH,EAAKI,KAC1C3R,EAAMksF,YACbrmG,GAA2BgI,KAAKgsD,GAIrCvpC,qBAAqBtQ,GACxB,MAAM1C,EAAgB0C,EAAMyL,SACtB4+D,EAAgB/sE,EAAI+sF,WACpBo5D,EAAU,GACVC,EAAS,GAEfr5E,EAAM/3E,QAAQvK,IACV,GAAIA,EAAKk+G,cAAe,CAEpB,MAAO/nG,EAAGC,GAAKpW,EAAK8b,QACpB,GAAI9b,EAAK47J,UAAU,aAAc,CAC7B,MAAMh4J,EAAO,IAAI+yB,EAAQmD,iBACzBvkB,EAAIoZ,QAAQxY,EAAGC,GAAGylJ,YAAY3zI,EAAApmB,QAAGkL,WACjCiL,EAAMoW,WAAWzqB,EAAMuS,EAAGC,GAC1BslJ,EAAQ17J,EAAK+xB,YAAcnuB,OAE1B,GAAI5D,EAAK47J,UAAU,SAAU,CAC9B,MAAM/4J,EAAQ,IAAI8zB,EAAQwD,aAC1B5kB,EAAIoZ,QAAQxY,EAAGC,GAAGylJ,YAAY3zI,EAAApmB,QAAGkL,WACjCiL,EAAMoW,WAAWxrB,EAAOsT,EAAGC,GAC3BulJ,EAAO71J,KAAKjD,QAEX,GAAI7C,EAAK47J,UAAU,QAAS,CAC7B,MAAMh4J,EAAO,IAAI+yB,EAAQ2C,aAAY,GACrC/jB,EAAIoZ,QAAQxY,EAAGC,GAAGylJ,YAAY3zI,EAAApmB,QAAGkL,WACjCiL,EAAMoW,WAAWzqB,EAAMuS,EAAGC,OAMtCulJ,EAAOpxJ,QAAQ1H,IACX,MAAOsT,EAAGC,GAAKvT,EAAMiZ,QACJw4D,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAAG,GACpC7L,QAAQihB,IACb,MAAM8uG,EAAQ9uG,EAAG,GAAK,IAAMA,EAAG,GAC/B,GAAIkwI,EAAQphC,GAAQ,CAChB,IAAI12H,EAAY2R,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,IAAIrL,YAAY,aAClDvc,EAAOA,EAAOA,EAAK,GAEnBskB,EAAApmB,QAAGK,IAAI,kBAAmB,kDACCgU,KAAKC,KAEpCvT,EAAMy3B,UAAU12B,QAQzB2kB,mBAAmBtQ,EAAc8U,GACpC,MAAMgtE,EAAY,IAAIxB,EAAAyB,gBAClBjtE,EAAK0zF,WACL1mB,EAAU+hE,aAAa/uI,EAAK0zF,WAEhC,MAAM/nG,EAAYqU,EAAKrU,UACjB8+B,EAASv/B,EAAMksF,YACrB,GAAI3sD,EAAOwjH,UAAW,CACCxjH,EAAOwjH,UACfzwJ,QAASunD,IAChB,MAAMiqG,EAAiBjqG,EAAKiI,YAC5BggC,EAAUymB,iBAAiBvoG,EAAO8jJ,EAAQrjJ,MAK/C6P,yBAAyBtQ,EAAO8U,GAEnC,OADsB,IAAIktI,EAAA+B,mBACLC,SAAShkJ,EAAO8U,IAtO7C1vB,EAAAw/H,kBA0OA30G,EAAApmB,QAAG0D,QAAQq3H,EAAiBq8B,EAAArkC,gBAE5B,MAAMsmC,EAAoB,GAEpBI,EAAK,CACPhgG,SAAU,oBACV2pC,SAAU,WACV81D,UAAW,YACX7d,MAAO,SAGLse,EAAU,CACZlgG,SAAU,IACVzJ,KAAM,IACNozC,SAAU,IACV81D,UAAW,IACX7d,MAAO,KAwBX,SAASwd,EAAY14J,GACjB,OAAQA,GACJ,IAAK,YACL,IAAK,QAAS,OAAO,EACrB,QAAS,OAAO,uKC1TxB,MAAAimB,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACA++J,EAAA/+J,EAAA,IAGMwrB,EAAMpL,EAAAC,OAAOC,SAIb0+I,EAAc,CAChBzzI,KAAM,EAENwhE,WAAY,SACZpmF,MAAO,SACPs4J,SAAU,SAEVC,UAAW,SACXl8C,SAAU,SAGVm8C,QAAS,SACTC,UAAW,SACXC,aAAc,SACdC,WAAY,SACZC,YAAa,SACbC,YAAa,SACbC,WAAY,SACZC,SAAU,SACV7wI,KAAM,SACN6oE,MAAO,UAILioE,EAAiB,CACnBvlC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,KAAM,GAGJqlC,EAAoB,CACtBxlC,MAAO,GACPC,OAAQ,EACRwlC,KAAM,IACNtlC,KAAM,KAIJulC,EAAe,CACjB1lC,MAAO,CAACphH,EAAG,EAAGC,EAAG,GACjBohH,OAAQ,CAACrhH,EAAG,EAAGC,EAAG,GAClBqhH,MAAO,CAACthH,EAAG,EAAGC,EAAG,GACjBshH,KAAM,CAACvhH,EAAG,EAAGC,EAAG,IAmBP/Y,EAAA6/J,UAAiB,GAE9B7/J,EAAA6/J,UAAUC,UAAY,GAEtB,MAAMl0I,EAAgB,CAAClR,EAAKC,IAAQ2Q,EAAIM,cAAclR,EAAKC,GAE3D3a,EAAA6/J,UAAUE,YAAcn7J,KACpB,IAAIujB,EAAO,KACX,OAAQvjB,GACJ,IAAK,SAAUujB,EAAOnoB,EAAA6/J,UAAUG,yBAA0B,MAC1D,IAAK,OACD73I,EAAO,CACH1nB,KAAM,OAAQkxG,UAAW,EACzBb,QAAS,CAAC9wG,EAAA6/J,UAAUI,4BAExB,MAEJ,IAAK,UACD93I,EAAO,CACH1nB,KAAM,UAAW8qG,UAAW,EAC5BR,OAAQ,CAAC/qG,EAAA6/J,UAAUG,2BAEvB,MAEJ,IAAK,OAAQ73I,EAAOnoB,EAAA6/J,UAAUK,uBAAwB,MACtD,IAAK,WACD/3I,EAAO,CACH1nB,KAAM,WAAYiwG,OAAQ,EAC1BX,KAAM,CAAC/vG,EAAA6/J,UAAUK,yBAErB,MAEJ,IAAK,UAAW/3I,EAAOnoB,EAAA6/J,UAAUI,0BAA2B,MAC5D,QAAS54J,QAAQU,IAAI,8BAEzB,OAAOogB,IAIXnoB,EAAA6/J,UAAUM,yBAA2BC,KACjC,GAAqB,IAAjBA,EAAMh8J,OAAe,OAAO,KAChC,MAAMy6D,EAAc,GACpB,IAAK,IAAI3+D,EAAI,EAAGA,EAAIkgK,EAAMh8J,OAAQlE,IAAK,CACnC,MAAMmgK,EAAKD,EAAMlgK,EAAI,GACf6wG,EAAKqvD,EAAMlgK,GAEjB,IAAIogK,EAAKh1I,EAAIi1I,kBAAkBF,EAAG75D,QAAU,GAC5C,MAAMh3E,EAAK,EAEP3E,EAAApmB,QAAG6D,cAAc,CAACg4J,MAClBA,EAAKD,EAAG75D,QAAU,GAEtB,MAAMxvC,EAAU,CAACqpG,EAAG5/J,KAAMswG,EAAGtwG,KAAM6/J,EAAI9wI,GACvCqvC,EAAYp2D,KAAKuuD,GAErB,OAAO6H,IAIX7+D,EAAA6/J,UAAUW,sBAAwB,EAAC57J,EAAMw7J,KACrC,GAAqB,IAAjBA,EAAMh8J,OAAe,OAAO,KAChC,MAAMy6D,EAAc,GACpB,IAAK,IAAI3+D,EAAI,EAAGA,EAAIkgK,EAAMh8J,OAAQlE,IAAK,CACnC,MAAMugK,EAAKL,EAAMlgK,EAAI,GACfwgK,EAAKN,EAAMlgK,GAEjB,IAAIogK,EAAKh1I,EAAIi1I,kBAAkBE,EAAGj6D,QAAU,GAC5C,MAAMh3E,EAAK,EAEP3E,EAAApmB,QAAG6D,cAAc,CAACg4J,MAClBA,EAAKG,EAAGj6D,QAAU,GAGtB,MAAMxvC,EAAU,CAACypG,EAAGhgK,KAAMigK,EAAGjgK,KAAM6/J,EAAI9wI,GACvCqvC,EAAYp2D,KAAKuuD,GAErB,OAAO6H,IAKX7+D,EAAA6/J,UAAUc,wBAA0B,EAAC/7J,EAAMw7J,KACvC,GAAqB,IAAjBA,EAAMh8J,OAAe,OAAO,KAChC,MAAMy6D,EAAc,GACpB,IAAK,IAAI3+D,EAAI,EAAGA,EAAIkgK,EAAMh8J,OAAQlE,IAAK,CACnC,MAAM0gK,EAAMR,EAAMlgK,EAAI,GAChB2gK,EAAMT,EAAMlgK,GAElB,IAAIogK,EAAKh1I,EAAIi1I,kBAAkBK,EAAIp6D,QAAU,GAC7C,MAAMh3E,EAAK,EAEP3E,EAAApmB,QAAG6D,cAAc,CAACg4J,MAClBA,EAAKM,EAAIp6D,QAAU,GAGvB,MAAMxvC,EAAU,CAAC4pG,EAAIngK,KAAMogK,EAAIpgK,KAAM6/J,EAAI9wI,GACzCqvC,EAAYp2D,KAAKuuD,GAErB,OAAO6H,IAIX7+D,EAAA6/J,UAAUiB,iBAAmB,EAACC,EAAUxuD,KACpC,MAAMpiF,EAASpmB,KAAK4C,MAAM4lG,EAAS/kF,KAAO,GACpC4C,EAASmiF,EAAS9kF,KACxBszI,EAASC,MAAQj3J,KAAKiR,IAAI+lJ,EAASjoJ,EAAIqX,GACvC4wI,EAASE,MAAQl3J,KAAKiR,IAAI+lJ,EAAShoJ,EAAIqX,GACvC2wI,EAASG,QAAUn3J,KAAKykD,KACpBzkD,KAAKizG,IAAI+jD,EAASC,MAAO,GAAKj3J,KAAKizG,IAAI+jD,EAASE,MAAO,MAK/DjhK,EAAA6/J,UAAUsB,eAAiB,EAACC,EAAwB1xI,KAChD,MAAMjC,EAAO2zI,EAAU3zI,KAAO,EACxBoB,EAAO9kB,KAAK4C,MAAMy0J,EAAU5zI,KAAO,GACzC,MAAO,CACH0yH,MAAOxwH,EAAKjvB,KACZqY,EAAG+V,EAAM9V,EAAG0U,KAKpBztB,EAAA6/J,UAAUwB,YAAc,CAAC9uD,IAAuC,CAC5Dz5F,EAAG8S,EAAc,EAAG2mF,EAAS/kF,KAAO,GACpCzU,EAAG6S,EAAc,EAAG2mF,EAAS9kF,KAAO,MAKxCztB,EAAA6/J,UAAUyB,eAAiB,EAACC,EAAa7xI,KACrC,OAAQA,EAAK2vI,aACT,IAAK,QAAS,OAAO,EACrB,IAAK,SAAU,OAAOzzI,EAAc,EAAG,GACvC,IAAK,QAAS,OAAOA,EAAc,EAAG,GACtC,IAAK,OAAQ,OAAOA,EAAc,EAAG,GACrC,QAAS,OAAO,KAIxB5rB,EAAA6/J,UAAU2B,eAAiB,EAACC,EAAU/xI,KAClC,OAAQA,EAAK8vI,UACT,IAAK,QAAS,OAAO,EACrB,IAAK,SAAU,OAAO5zI,EAAc,EAAG,GACvC,IAAK,QAAS,OAAOA,EAAc,EAAG,GACtC,IAAK,OAAQ,OAAOA,EAAc,EAAG,GACrC,QAAS,OAAO,KAIxB5rB,EAAA6/J,UAAU6B,YAAc,EAACC,EAAWjyI,KAChC,OAAQA,EAAKyvI,cACT,IAAK,QAAS,OAAO,EACrB,IAAK,SAAU,OAAOvzI,EAAc,EAAG,GACvC,IAAK,QAAS,OAAOA,EAAc,EAAG,GACtC,IAAK,OAAQ,OAAOA,EAAc,EAAG,GACrC,QAAS,OAAO,KAKxB5rB,EAAA6/J,UAAU+B,aAAeh9J,KACrB,OAAQA,GACJ,IAAK,UACD,OAAOgnB,EAAc,EAAG,IAE5B,IAAK,OAGL,IAAK,WACD,OAAOA,EAAc,EAAG,GAE5B,QAAS,OAAO,KAMxB5rB,EAAA6/J,UAAUgC,iBAAmB,EAACj9J,EAAM8qB,KAChC,OAAQ9qB,GACJ,IAAK,UACD,OAAO86J,EAAkBhwI,EAAK0vI,YAElC,IAAK,WACD,OAAOM,EAAkBhwI,EAAKwvI,WAElC,IAAK,OACD,OAAOQ,EAAkBhwI,EAAK6vI,YAElC,QAAS10I,EAAApmB,QAAGK,IAAI,UAAW,wCACFF,KAE7B,OAAO,IAKX5E,EAAA6/J,UAAUiC,eAAiB,EAACl9J,EAAc2tG,EAAU7iF,KAChD,IAAIqyI,GAAaxvD,EAAS/kF,KAAO,IAAM+kF,EAAS9kF,KAAO,GAIvD,OAHAs0I,EAAYh4J,KAAKC,KAAK+3J,EAAY/hK,EAAA6/J,UAAUgC,iBAAiBj9J,EAAM8qB,IAEnEqyI,EAAYz2I,EAAIS,UAAUg2I,EAAW/hK,EAAA6/J,UAAUC,UAAYiC,KAS/D/hK,EAAA6/J,UAAUmC,mBAAqB,EAACzvD,EAAU7iF,KACtC,MAAM29E,EAAYrtG,EAAA6/J,UAAUiC,eAAe,UAAWvvD,EAAU7iF,GAC1DuyI,EAAW,GACjB,IAAK,IAAI/hK,EAAI,EAAGA,EAAImtG,EAAWntG,IAAK,CAChC,MAAMotG,EAAUttG,EAAA6/J,UAAUqC,wBAAwB3vD,EAAU7iF,GAC5DuyI,EAASx5J,KAAK6kG,GAElB,OAAO20D,IAKXjiK,EAAA6/J,UAAUqC,wBAA0B,EAAC3vD,EAAU7iF,KAC3C,MAAMvB,EAAkBnuB,EAAA6/J,UAAUwB,YAAY9uD,GACxCgvD,EAAc3gK,OAAO4kF,OAAO,GAAI+sB,GACtCgvD,EAAYzoJ,EAAIqV,EAAGrV,EACnByoJ,EAAYxoJ,EAAIoV,EAAGpV,EAEnB/Y,EAAA6/J,UAAUiB,iBAAiBS,EAAahvD,GAExC,MAAM4vD,EAAWniK,EAAA6/J,UAAUuC,mBAAmBb,EAAa7xI,GACrDsnC,EAAUh3D,EAAA6/J,UAAUc,wBAAwB,SAAUwB,GAEtDl7J,EAAsB,CACxBxG,KAAMo+J,EAAA5e,MAAMqB,oBAAoB,WAChCxoI,EAAGqV,EAAGrV,EACNC,EAAGoV,EAAGpV,EACNwyF,UAAW42D,EAAS/9J,OACpB2mG,OAAQo3D,GAGZ,OADInrG,IAAU/vD,EAAI63H,cAAgB9nE,GAC3B/vD,IAKXjH,EAAA6/J,UAAUuC,mBAAqB,EAACb,EAAa7xI,KACzC,MAAM67E,EAAYvrG,EAAA6/J,UAAUyB,eAAeC,EAAa7xI,GAClDyyI,EAAW,GACjB,IAAK,IAAIjiK,EAAI,EAAGA,EAAIqrG,EAAWrrG,IAAK,CAChC,MAAM6qG,EAAS/qG,EAAA6/J,UAAUG,yBACzBmC,EAAS15J,KAAKsiG,GAGJ,IAAN7qG,IACA6qG,EAAOi1B,cAAgB,GAG/B,OAAOmiC,IAGXniK,EAAA6/J,UAAUG,uBAAyB,MAC/B,MAAMx5D,EAAUxmG,EAAA6/J,UAAU+B,aAAa,WACvC,MAAO,CACHhmC,SAAU,GACVC,SAAU,GACVC,WAAY,GACZJ,YAAa,GACbrgH,UAAW,EACXE,SAAU,IACVwjH,YAAa,SACbt+H,KAAMo+J,EAAA5e,MAAMqB,oBAAoB,UAChC96C,aASRxmG,EAAA6/J,UAAUI,wBAA0B,MAEhC,MAAO,CACHz5D,QAFYxmG,EAAA6/J,UAAU+B,aAAa,QAGnCnhK,KAAMo+J,EAAA5e,MAAMqB,oBAAoB,cAQxCthJ,EAAA6/J,UAAUK,qBAAuB,MAC7B,MAAM15D,EAAUxmG,EAAA6/J,UAAU+B,aAAa,YACvC,MAAO,CACH9oJ,EAAG,IACHC,EAAG,IACHtY,KAAMo+J,EAAA5e,MAAMqB,oBAAoB,QAChC96C,aASR,MAAa67D,EAKTn3I,cACIroB,KAAKy/J,SAAW,GAUbp3I,gBAAgBwE,GACdA,EAAKjvB,MACNoqB,EAAApmB,QAAGK,IAAI,UAAW,kBACd,gCAIRlE,OAAO6qB,KAAKqzI,GAAa5xJ,QAAQzL,IACxBiuB,EAAK3tB,eAAeN,KACrBiuB,EAAKjuB,GAAOq9J,EAAYr9J,MAIhCoB,KAAK0/J,KAAO,IAAIriJ,EAAAC,OAChBtd,KAAK0/J,KAAKh3I,QAAQmE,EAAKrE,MAEvB,MAAM6wI,EAAQr5J,KAAK2/J,gBAAgB9yI,GAC7B+yI,EAAcziK,EAAA6/J,UAAUsB,eAAejF,EAAM,GAAIxsI,GACvD,MAAO,CACHjvB,KAAMivB,EAAKjvB,KACX4xG,OAAQ6pD,EAAM93J,OACdw1D,KAAMsiG,EACNuG,eAQDv3I,gBAAgBwE,GACnB,MAAM2iF,EAASotD,EAAe/vI,EAAKsvI,WAC7B9C,EAAQ,GACd,IAAK,IAAIh8J,EAAI,EAAGA,EAAImyG,EAAQnyG,IAAK,CAC7B,MAAMqyG,EAAW1vG,KAAK6/J,qBAAqBxiK,EAAGwvB,GAC9CwsI,EAAMzzJ,KAAK8pG,GAEf,OAAO2pD,EAKJhxI,qBAAqBy3I,EAASjzI,GACjC,MAAMozF,EAAW88C,EAAalwI,EAAKozF,UAC7Bt1F,EAAOkC,EAAKlC,MAAQs1F,EAAShqG,EAC7B2U,EAAOiC,EAAKjC,MAAQq1F,EAAS/pG,EAI7Bw5F,EAAW,CACb/kF,OAAMC,OAAMk1I,WAIVV,EAAWjiK,EAAA6/J,UAAUmC,mBAAmBzvD,EAAU7iF,GAClDkzI,EAAS//J,KAAKggK,iBAAiBtwD,EAAU7iF,GACzCozI,EAAYjgK,KAAKkgK,oBAAoBxwD,EAAU7iF,GAErD,MAAO,CACHjvB,KAAMoC,KAAK0B,QAAQ,QACnBipB,OACAC,OACA4/E,UAAW40D,EAAS79J,OACpBspG,QAASk1D,EAAOx+J,OAChBopG,WAAYs1D,EAAU1+J,OACtBkpG,QAAS20D,EACTt0D,KAAMi1D,EACN5rE,SAAU8rE,GASX53I,iBAAiBqnF,EAAU7iF,GAC9B,MAAMg+E,EAAU1tG,EAAA6/J,UAAUiC,eAAe,OAAQvvD,EAAU7iF,GACrDkzI,EAAS,GACf,IAAK,IAAI1iK,EAAI,EAAGA,EAAIwtG,EAASxtG,IAAK,CAC9B,MAAMytG,EAAO9qG,KAAKmgK,qBAAqBzwD,EAAU7iF,GACjDkzI,EAAOn6J,KAAKklG,GAEhB,OAAOi1D,EAGJ13I,qBAAqBqnF,EAAU7iF,GAClC,MAAMvB,EAAKnuB,EAAA6/J,UAAUwB,YAAY9uD,GAC3BkvD,EAAW7gK,OAAO4kF,OAAO,GAAI+sB,GACnCkvD,EAAS3oJ,EAAIqV,EAAGrV,EAChB2oJ,EAAS1oJ,EAAIoV,EAAGpV,EAEhB/Y,EAAA6/J,UAAUiB,iBAAiBW,EAAUlvD,GAErC,MAAM0wD,EAAWpgK,KAAKqgK,mBAAmBzB,EAAU/xI,GAC7CsnC,EAAUh3D,EAAA6/J,UAAUM,yBAAyB8C,GAE7Ch8J,EAAmB,CACrBxG,KAAM,GACNqY,EAAGqV,EAAGrV,EACNC,EAAGoV,EAAGpV,EACN44F,UAAWsxD,EAAS7+J,OACpB0sG,QAASmyD,GAGb,OADIjsG,IAAU/vD,EAAI63H,cAAgB9nE,GAC3B/vD,EAIJikB,mBAAmBu2I,EAAU/xI,GAChC,MAAMiiF,EAAY3xG,EAAA6/J,UAAU2B,eAAeC,EAAU/xI,GAC/CuzI,EAAW,GACjB,IAAK,IAAI/iK,EAAI,EAAGA,EAAIyxG,EAAWzxG,IAAK,CAChC,MAAM4wG,EAAU9wG,EAAA6/J,UAAUI,0BAChB,IAAN//J,IACA4wG,EAAQkvB,cAAgB,GAE5BijC,EAASx6J,KAAKqoG,GAElB,OAAOmyD,EAQJ/3I,oBAAoBqnF,EAAU7iF,GACjC,MAAM89E,EAAaxtG,EAAA6/J,UAAUiC,eAAe,WAAYvvD,EAAU7iF,GAC5DozI,EAAY,GAClB,IAAK,IAAI5iK,EAAI,EAAGA,EAAIstG,EAAYttG,IAAK,CACjC,MAAM82F,EAAWn0F,KAAKsgK,yBAAyB5wD,EAAU7iF,GACzDozI,EAAUr6J,KAAKuuF,GAEnB,OAAO8rE,EAGJ53I,yBAAyBqnF,EAAU7iF,GACtC,MAAMvB,EAAKnuB,EAAA6/J,UAAUwB,YAAY9uD,GAC3BovD,EAAY/gK,OAAO4kF,OAAO,GAAI+sB,GACpCovD,EAAU7oJ,EAAIqV,EAAGrV,EACjB6oJ,EAAU5oJ,EAAIoV,EAAGpV,EAEjB/Y,EAAA6/J,UAAUiB,iBAAiBa,EAAWpvD,GAEtC,MAAM9C,EAAQ5sG,KAAKugK,gBAAgBzB,EAAWjyI,GACxCsnC,EAAUh3D,EAAA6/J,UAAUW,sBAAsB,WAAY/wD,GAEtDxoG,EAAuB,CACzBxG,KAAM,GACNqY,EAAGqV,EAAGrV,EACNC,EAAGoV,EAAGpV,EACN23F,OAAQjB,EAAMrrG,OACd2rG,KAAMN,GAGV,OADIz4C,IAAU/vD,EAAI63H,cAAgB9nE,GAC3B/vD,EAGJikB,gBAAgBy2I,EAAWjyI,GAC9B,MAAMghF,EAAS1wG,EAAA6/J,UAAU6B,YAAYC,EAAWjyI,GAC1C+/E,EAAQ,GACd,IAAK,IAAIvvG,EAAI,EAAGA,EAAIwwG,EAAQxwG,IAAK,CAC7B,MAAM6vG,EAAO/vG,EAAA6/J,UAAUK,uBACvBzwD,EAAMhnG,KAAKsnG,GAGD,IAAN7vG,IACA6vG,EAAKiwB,cAAgB,GAG7B,OAAOvwB,EAQJvkF,QAAQtmB,GAKX,OAJK/B,KAAKy/J,SAASvgK,eAAe6C,KAC9B/B,KAAKy/J,SAAS19J,GAAQ,GAE1B/B,KAAKy/J,SAAS19J,IAAS,KACbA,KAAQ/B,KAAKy/J,SAAS19J,MAxMxC5E,EAAAqiK,eA6MAriK,EAAA6/J,UAAUt/H,QAAU8hI,qKCtkBpB,MACMr7J,EADNlH,EAAA,EACcq3B,CAAI,WAElBtM,EAAAC,EAAAhrB,EAAA,IAGAmtF,EAAAntF,EAAA,IACAm3E,EAAAn3E,EAAA,GAEAujK,EAAAvjK,EAAA,IACAogB,EAAApgB,EAAA,GACAwjK,EAAAxjK,EAAA,IACAyjK,EAAAzjK,EAAA,IACAogC,EAAApgC,EAAA,GAIMsgB,EAASF,EAAAC,OAAOC,OA+BtB,MAAaojJ,EAsBTt4I,cACIroB,KAAK4gK,SAAW,GAChB5gK,KAAK69G,UAAY,GACjB79G,KAAK6gK,WAAa,GAElB7gK,KAAK8gK,QAAU,GACf9gK,KAAK+gK,QAAU,GAEf/gK,KAAKq2D,UAAY,GACjBr2D,KAAKghK,aAAe,GACpBhhK,KAAKihK,cAAgB,GAErBjhK,KAAKkhK,UAAY,GAEjBlhK,KAAKmhK,SAAW,KAGb94I,YACH,MAAO,CAACroB,KAAKopG,WAAYppG,KAAKmpG,YAG3B9gF,aACH,OAAOnhB,KAAK4B,MAAM9I,KAAKopG,WAAa,GAGjC/gF,aACH,OAAOnhB,KAAK4B,MAAM9I,KAAKmpG,WAAa,GAGjC9gF,WAAWpS,EAAGC,GACjB,MAAMw2C,EAAO1sD,KAAK4gK,SAAS3qJ,GAAGC,GAC9B,OAAOsqJ,EAAAzhB,GAAGmD,cAAchjJ,eAAewtD,GAGpCrkC,SAASqkC,GACZ,IAAI00G,EAAW,EACf,MAAO78I,EAAON,GAASjkB,KAAKqhK,YAC5B,IAAK,IAAIprJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACnBlW,KAAK4gK,SAAS3qJ,GAAGC,KAAOw2C,KACtB00G,EAId,OAAOA,EAGJ/4I,eACH,IAAIi5I,EAAW,EACf,MAAO/8I,EAAON,GAASjkB,KAAKqhK,YAC5B,IAAK,IAAIprJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACnBlW,KAAKuhK,WAAWtrJ,EAAGC,MACjBorJ,EAId,OAAOA,EAGJj5I,cACH,OAAOroB,KAAKkhK,UAGT74I,SAASpS,EAAGC,GACf,MAAMtX,EAAMqX,EAAI,IAAMC,EACtB,OAAIlW,KAAKkhK,UAAUhiK,eAAeN,GACvBoB,KAAKkhK,UAAUjrJ,EAAI,IAAMC,IAGhC8R,EAAApmB,QAAGK,IAAI,QAAS,mCACYgU,KAAKC,KAE9B,IAGJmS,SACH,OAAOroB,KAAK4gK,SAGTv4I,QAAQiD,GACX,OAAOtrB,KAAK4gK,SAASt1I,EAAG,IAAIA,EAAG,IAG5BjD,YACH,OAAOroB,KAAK8gK,QAAQv/J,OAGjB8mB,YACH,OAAOroB,KAAK+gK,QAAQx/J,OAGjB8mB,YACH,OAAOroB,KAAK8gK,QAGTz4I,YACH,OAAOroB,KAAK+gK,QAGT14I,OAAOhT,GACV,MAAMkP,EAAQlP,EAAI9T,OAClBvB,KAAK4gK,SAAWvrJ,EAChB,IAAK,IAAIY,EAAI,EAAGA,EAAIsO,EAAOtO,IACvBjW,KAAK6gK,WAAW5qJ,GAAK,GAItBoS,WAAWm5I,GACdxhK,KAAKmhK,SAAWK,EAGbn5I,aACH,OAAOroB,KAAKmhK,SAGT94I,SAASpS,EAAWC,EAAWurJ,GAClC,MAAM7iK,EAAMqX,EAAI,IAAMC,EACtBlW,KAAKkhK,UAAUtiK,GAAO6iK,EAGnBp5I,SAASjlB,GACZA,EAAKrB,KAAO,WACZ/B,KAAK+gK,QAAQn7J,KAAKxC,GAGfilB,SAASjlB,GACZA,EAAKrB,KAAO,aACZ/B,KAAK8gK,QAAQl7J,KAAKxC,GAGfilB,WAAWiD,EAAYvpB,GAC1B,MAAMq4H,EAAQ9uG,EAAG,GAAK,IAAMA,EAAG,GAC1BtrB,KAAKq2D,UAAUn3D,eAAe6C,KAC/B/B,KAAKq2D,UAAUt0D,GAAQ,IAEtB/B,KAAKihK,cAAc/hK,eAAek7H,KACnCp6H,KAAKihK,cAAc7mC,GAAS,IAEhCp6H,KAAKq2D,UAAUt0D,GAAM6D,KAAK0lB,GAC1BtrB,KAAKihK,cAAc7mC,GAAOx0H,KAAK7D,GAG5BsmB,eAAeiD,EAAY3G,GAC9B,MAAMy1G,EAAQ9uG,EAAG,GAAK,IAAMA,EAAG,GAC1BtrB,KAAKghK,aAAa9hK,eAAek7H,KAClCp6H,KAAKghK,aAAa5mC,GAAS,IAE/Bp6H,KAAKghK,aAAa5mC,GAAOx0H,KAAK+e,GAG3B0D,kBAAkBtmB,GACrB,OAAK/B,KAAKq2D,UAAUn3D,eAAe6C,GAG5B/B,KAAKq2D,UAAUt0D,GAFX,GAKRsmB,gBAAgBiD,GACnB,MAAM8uG,EAAQ9uG,EAAG,GAAK,IAAMA,EAAG,GAC/B,OAAOtrB,KAAKihK,cAAc7mC,GAGvB/xG,YAAYiD,EAAYvT,GAC3B/X,KAAK6gK,WAAWv1I,EAAG,IAAIA,EAAG,IAAMvT,EAG7BsQ,YAAYiD,GACf,OAAOtrB,KAAK6gK,WAAWv1I,EAAG,IAAIA,EAAG,IAG9BjD,iBACHroB,KAAK6gK,WAAa,GAGfx4I,wBAAwBtmB,GAE3B,OADe/B,KAAK0hK,kBAAkB3/J,GACxBsT,IAAIiW,GAAMtrB,KAAKgvH,YAAY1jG,IAGtCjD,YACH,OAAOroB,KAAKopG,WAAappG,KAAKmpG,WAG3B9gF,WACH,OAAOroB,KAAK4gK,SAASr/J,OAGlB8mB,WACH,OAAIroB,KAAK4gK,SAAS,GAAGr/J,OAAS,EACnBvB,KAAK4gK,SAAS,GAAGr/J,QAGxBymB,EAAApmB,QAAG+C,KAAK,QAAS,WACb,6CACG,GAIR0jB,YAAYiD,GACftrB,KAAK69G,UAAUvyF,EAAG,GAAK,IAAMA,EAAG,KAAM,EAGnCjD,WAAWiD,GACd,OAAOtrB,KAAK69G,UAAUvyF,EAAG,GAAK,IAAMA,EAAG,IAGpCjD,SACH,MAAMzJ,EAAY,CACd+iJ,QAAS3hK,KAAK4gK,SACdgB,SAAU5hK,KAAKkhK,UACfW,SAAU7hK,KAAKq2D,UACfyrG,aAAc9hK,KAAKihK,cACnBc,OAAQ/hK,KAAK+gK,QACbiB,OAAQhiK,KAAK8gK,QACbziD,SAAUr+G,KAAK69G,WAQnB,OANI79G,KAAKiiK,WACLrjJ,EAAKqjJ,SAAWjiK,KAAKiiK,SAASx7I,UAE9BzmB,KAAKmhK,WACLviJ,EAAK4iJ,QAAUxhK,KAAKmhK,SAAS16I,UAE1B7H,EAGJyJ,SAAS65I,GAAc,GAC1B,MAAM7sJ,EAAMwJ,KAAKstB,MAAMttB,KAAKC,UAAU9e,KAAK4gK,WACrC38I,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAUlB,GANAxD,OAAO6qB,KAAK5oB,KAAKq2D,WAAWhsD,QAAQtI,IAChC/B,KAAKq2D,UAAUt0D,GAAMsI,QAAQihB,IACzBjW,EAAIiW,EAAG,IAAIA,EAAG,IAAMvpB,MAIxBmgK,EACF,IAAK,IAAIjsJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACpBlW,KAAK69G,UAAU5nG,EAAI,IAAMC,KAC5Bb,EAAIY,GAAGC,GAAK,KAKpB,OAAOb,EAKJgT,cACH,MAAMhT,EAAMrV,KAAKmiK,WACXl+I,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAEZ6gK,EAAW,IAAIh4E,EAAAuB,QAAQpnE,EAAON,GACpC,IAAK,IAAIhO,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,MAAMpT,EAAS,IAAIu6B,EAAAX,cAAcrnB,EAAIY,GAAGC,IACpCsqJ,EAAAzhB,GAAGiC,WAAW3rI,EAAIY,GAAGC,IACrBpT,EAAO86E,aAAa4iF,EAAAzhB,GAAGiC,WAAW3rI,EAAIY,GAAGC,KAGzCpT,EAAO86E,aAAa4iF,EAAAzhB,GAAGiC,WAAWp/I,SAEtCwgK,EAAS1yI,QAAQzZ,EAAGC,EAAG8R,EAAApmB,QAAGkL,UAAWhK,GAI7C,OAAOs/J,EAIJ/5I,YAAY65I,GAAc,GAC7B,MAAM7sJ,EAAMrV,KAAKmiK,SAASD,GACpBj+I,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAEZgoD,EAAQ,GACd,IAAK,IAAIrzC,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,MAAMmsJ,EAAO,GACb,IAAK,IAAIpsJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvBosJ,EAAKz8J,KAAKyP,EAAIY,GAAGC,IAErBqzC,EAAM3jD,KAAKy8J,GAEf,OAAO94G,EAAMl0C,IAAIgtJ,GAAQA,EAAKn+I,KAAK,KAIhCmE,mBACH,MAAM9D,EAAQvkB,KAAKopG,WAAa,EAC1BnlF,EAAQjkB,KAAKmpG,WAAa,EAG1BvgF,EAAO7qB,OAAO6qB,KAAK43I,EAAAzhB,GAAG0B,cACtB6hB,EAAW,GACXC,EAAS35I,EAAKvT,IAAI,CAACzW,EAAKsgB,KAC1BojJ,EAAS1jK,GAAO,GAAKsgB,KACXA,OAAWtgB,MAGzB,IAAI6J,EAAS,GACb,IAAK,IAAIyN,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,IAAIssJ,EAAS,GACb,IAAK,IAAIvsJ,EAAI,EAAGA,EAAIsO,EAAOtO,IAAK,CAC5B,MAAMrX,EAAMqX,EAAI,IAAMC,EACtBssJ,GAAU,IAAMF,EAAStiK,KAAKkhK,UAAUtiK,IAG5C6J,GADA+5J,GAAU,KAId,OADA/5J,GAAU,KAAO85J,EAAOr+I,KAAK,OA2GrC,SAASu+I,EAA4BC,EAAIxsJ,EAAGb,EAAKstJ,GAAa,GAC1D,MAAMp+I,EAAQlP,EAAI9T,OAClB,IAAIqhK,GAAgB,EACpB,MAAMx/J,EAAO,CAAC8S,IAAGD,EAAG,CAAC,IACrBZ,EAAI,GAAGa,GAAKsqJ,EAAAzhB,GAAGS,KACVmjB,IAAattJ,EAAIkP,EAAQ,GAAGrO,GAAKsqJ,EAAAzhB,GAAGU,MACzC,IAAK,IAAIxpI,EAAI,EAAGA,EAAIsO,EAAQ,EAAGtO,IACtB2sJ,IACGvtJ,EAAIY,GAAGC,KAAOsqJ,EAAAzhB,GAAGQ,MACZojB,GAIDC,GAAgB,EAChBvtJ,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGU,KACfr8I,EAAK6S,EAAErQ,KAAKqQ,IALZZ,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGO,GASnBjqI,EAAIY,GAAGC,GAAKqH,IAASyrB,YAAYw3H,EAAAzhB,GAAGoD,iBAI3CygB,IACGD,IACAttJ,EAAIkP,EAAQ,GAAGrO,GAAKsqJ,EAAAzhB,GAAGU,MAE3Br8I,EAAK6S,EAAErQ,KAAK2e,EAAQ,IAExBm+I,EAAGG,SAASz/J,GAIhB,SAAS0/J,EAA4BJ,EAAIzsJ,EAAGZ,EAAKstJ,GAAa,GAC1D,MAAM1+I,EAAQ5O,EAAI,GAAG9T,OACrB,IAAIqhK,GAAgB,EACpB,MAAMx/J,EAAO,CAAC6S,IAAGC,EAAG,CAAC,IACrBb,EAAIY,GAAG,GAAKuqJ,EAAAzhB,GAAGW,KACVijB,IAAattJ,EAAIY,GAAGgO,EAAQ,GAAKu8I,EAAAzhB,GAAGY,MACzC,IAAK,IAAIzpI,EAAI,EAAGA,EAAI+N,EAAQ,EAAG/N,IACtB0sJ,IACGvtJ,EAAIY,GAAGC,KAAOsqJ,EAAAzhB,GAAGQ,MACZojB,GAIDC,GAAgB,EAChBvtJ,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGY,KACfv8I,EAAK8S,EAAEtQ,KAAKsQ,IALZb,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGO,GASnBjqI,EAAIY,GAAGC,GAAKqH,IAASyrB,YAAYw3H,EAAAzhB,GAAGqD,iBAI3CwgB,IACGD,IACAttJ,EAAIY,GAAGgO,EAAQ,GAAKu8I,EAAAzhB,GAAGY,MAE3Bv8I,EAAK8S,EAAEtQ,KAAKqe,EAAQ,IAExBy+I,EAAGK,SAAS3/J,GAiEhB,SAAS4/J,EAAiB/sJ,EAAGC,EAAGb,GAC5B,GAAIA,EAAIY,GAAGC,KAAOsqJ,EAAAzhB,GAAGQ,MAAO,CACxB,MACM0jB,EAkBd,SAA4BhtJ,EAAGC,EAAGb,GAC9B,MAAM4O,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OACZswF,EAAQ,GAEd,GAAI37E,EAAI,EAAG,CACP,MAAMs/B,EAAOgrH,EAAAzhB,GAAGsD,YAAYhtI,EAAIY,GAAGC,EAAI,IAAIxE,EAC3CmgF,EAAMjsF,KAAK,CAACyP,EAAIY,GAAGC,EAAI,GAAIs/B,IAG/B,GAAIt/B,EAAI+N,EAAQ,EAAG,CACf,MAAMuxB,EAAOgrH,EAAAzhB,GAAGsD,YAAYhtI,EAAIY,GAAGC,EAAI,IAAIvE,EAC3CkgF,EAAMjsF,KAAK,CAACyP,EAAIY,GAAGC,EAAI,GAAIs/B,IAG/B,GAAIv/B,EAAIsO,EAAQ,EAAG,CACf,MAAMixB,EAAOgrH,EAAAzhB,GAAGsD,YAAYhtI,EAAIY,EAAI,GAAGC,IAAItE,EAC3CigF,EAAMjsF,KAAK,CAACyP,EAAIY,EAAI,GAAGC,GAAIs/B,IAG/B,GAAIv/B,EAAI,EAAG,CACP,MAAMu/B,EAAOgrH,EAAAzhB,GAAGsD,YAAYhtI,EAAIY,EAAI,GAAGC,IAAIrE,EAC3CggF,EAAMjsF,KAAK,CAACyP,EAAIY,EAAI,GAAGC,GAAIs/B,IAE/B,OAAOq8C,EA3CgBqxE,CAAmBjtJ,EAAGC,EAAGb,GACTlL,OAAOrL,GACtCA,EAAE,KAAO0hK,EAAAzhB,GAAGQ,OAASzgJ,EAAE,KAAO0hK,EAAAzhB,GAAGa,MAEN,IAA3BqjB,EAAgB1hK,QACZ0hK,EAAgB,GAAG,GAAG1hK,OAAS,EAC/B8T,EAAIY,GAAGC,GAAKqH,IAASC,aAAaylJ,EAAgB,GAAG,IAOzD5tJ,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGa,MA2C3B,SAASujB,EAAqBT,EAAW71I,GACrC,MAEMkqC,EAFQ2rG,EAAGt5D,WACHs5D,EAAGv5D,WAGXi6D,EAAeV,EAAGW,SAAS7C,EAAAzhB,GAAGa,MAC9B0jB,EAAeZ,EAAGY,eAElBC,EAAiB12I,EAAK02I,gBAAkBr8J,KAAK4C,MAAMw5J,EAAe,IAClEE,EAAkB32I,EAAK22I,iBACzBt8J,KAAK4C,MAAMw5J,EAAe,IACxBG,EAAiB52I,EAAK42I,gBAAkBv8J,KAAK4C,MAAMw5J,EAAe,IAElEI,EAAkB72I,EAAK62I,iBAAmBx8J,KAAK4C,MAAMitD,EAAO,IAC5D4sG,EAAmB92I,EAAK82I,kBAAoBz8J,KAAK4C,MAAMitD,EAAO,IAC9D6sG,EAAkB/2I,EAAK+2I,iBAAmB18J,KAAK4C,MAAMitD,EAAO,KAqEtE,SAA+B2rG,EAAWmB,EAAKC,EAAQ/hK,GACnD,MAAMsT,EAAMqtJ,EAAGl/I,SACTS,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAElB,IAAI+pB,EAAKy4I,EAAWF,EAAKC,EAAQv/I,EAAON,GACpC4sE,EAAW,IACf,KAAOx7E,EAAIiW,EAAG,IAAIA,EAAG,MAAQk1I,EAAAzhB,GAAGa,MAAM,CAElC,GADAt0H,EAAKy4I,EAAWF,EAAKC,EAAQv/I,EAAON,GACnB,IAAb4sE,EAAgB,CAChB7oE,EAAApmB,QAAG+C,KAAK,YAAa,aACjB,wBAA0B5C,EAAO,KAAO8hK,GAC5C,QAEFhzE,EAIN6xE,EAAGsB,WAAW14I,EAAIvpB,GApFlBkiK,CAAsBvB,EAAI,KAAM,GAAKlC,EAAAzhB,GAAGgB,QACxC,MAAMmkB,EAAcxB,EAAGyB,YAOvB,GAJID,EAAc,IACdE,EAAiB1B,EAAIA,EAAG5B,QAAQ,GAAIN,EAAAzhB,GAAGc,UACvCukB,EAAiB1B,EAAIA,EAAG5B,QAAQ,GAAIN,EAAAzhB,GAAGiB,SAEvCkkB,EAAc,EACd,IAAK,IAAI7mK,EAAI,EAAGA,EAAI6mK,EAAa7mK,IAC7B+mK,EAAiB1B,EAAIA,EAAG5B,QAAQzjK,GAAImjK,EAAAzhB,GAAGsB,SAI/C,MAAMgkB,EAAc3B,EAAG4B,YACnBD,EAAc,IACdD,EAAiB1B,EAAIA,EAAG3B,QAAQsD,EAAc,GAAI7D,EAAAzhB,GAAGgB,QACrDqkB,EAAiB1B,EAAIA,EAAG3B,QAAQsD,EAAc,GAAI7D,EAAAzhB,GAAGe,WAGzD,MAAMykB,EAAmB,CAACruJ,EAAG,CAACw6C,MAAO,CAAC,OAAQ,GAAI+J,IAAK,CAAC,OAAQ,KAC1D+pG,EAAoB,CAACtuJ,EAAG,CAACw6C,MAAO,IAAK+J,IAAK,SAC1CgqG,EAAkB,CAACvuJ,EAAG,CAACw6C,MAAO,CAAC,OAAQ,GAAI+J,IAAK,MAGtDiqG,EAAoBhC,EAAI8B,EAAmBhE,EAAAzhB,GAAGmC,MAAMC,QACpDujB,EAAoBhC,EAAI,CAACzsJ,EAAG,CAACy6C,MAAO,CAAC,OAAQ,GAAI+J,IAAK,MAClD+lG,EAAAzhB,GAAGmC,MAAME,QACbsjB,EAAoBhC,EAAI6B,EAAkB/D,EAAAzhB,GAAGmC,MAAMG,QACnDqjB,EAAoBhC,EAAI+B,EAAiBjE,EAAAzhB,GAAGmC,MAAMI,OAMlDqjB,EAAuBjC,EAAIa,EAAgBkB,GAC3CE,EAAuBjC,EAAIc,EAAiBe,GAC5CI,EAAuBjC,EAAIe,EAAgBe,GAE3C,MAAMI,EAAa19J,KAAK4C,MAAqB,GAAfs5J,EAAqB,IAC7CyB,EAAc39J,KAAK4C,MAAqB,GAAfs5J,EAAqB,KAC9C0B,EAAa59J,KAAK4C,MAAqB,GAAfs5J,EAAqB,IAGnD2B,EAAwBrC,EAAIkB,EAAiBa,GAC7CM,EAAwBrC,EAAIiB,EAAkBY,GAC9CQ,EAAwBrC,EAAIgB,EAAiBc,GAMxC33I,EAAKm4I,iBA/Ed,SAAoCtC,EAAI71I,GACpC,MAAMo4I,WAACA,EAAUpqC,QAAEA,EAAOC,QAAEA,GAAWjuG,EACjCq4I,EAAOzE,EAAA0E,aAAaxmK,OAAO+jK,EAAIuC,EAAY,CAACpqC,EAASC,IAC3D4nC,EAAG0C,WAAWF,GAkFVG,CAA2B3C,EAAI71I,GA0FvC,SAAqC61I,GACjC,MAEM4C,EAAU5C,EAAG6C,aACblwJ,EAAMiwJ,EAAQ9hJ,SAEpBwE,EAAApmB,QAAGuiB,UAAU9O,EAAK,CAACY,EAAWC,KAC1B,MAAMoV,EAAK,CAACrV,EAAGC,GACTtY,EAAO0nK,EAAQE,SAASl6I,GAE9B,GAAIg6I,EAAQG,SAASn6I,GACjB,GAAItD,EAAApmB,QAAG8jB,UAVE,KAUmB,CACxBggJ,EAAiBhD,EAAIp3I,GACrB,MAAMq6I,EAAW/nK,EAAO,QACxB8kK,EAAGkD,eAAet6I,EAAI,CAACvpB,KAAM4jK,QAE5B,CACD,MAAME,EAAgBzxF,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAAG,GAClD,IAAI4vJ,GAAS,EACbD,EAAIx7J,QAAS07J,IACT,IAAKD,GAAUpD,EAAGnB,WAAWwE,EAAI,GAAIA,EAAI,KACjC/9I,EAAApmB,QAAG8jB,UAnBV,KAmB+B,CACxBg9I,EAAGsB,WAAW+B,EAAKvF,EAAAzhB,GAAGwB,OACtB,MAAMolB,EAAW/nK,EAAO,QACxB8kK,EAAGkD,eAAeG,EAAK,CAAChkK,KAAM4jK,IAC9BG,GAAS,QAlH7BE,CAA4BtD,KAN5BuD,EAAuBvD,EAAIkC,EAAYH,GACvCwB,EAAuBvD,EAAImC,EAAaN,GACxC0B,EAAuBvD,EAAIoC,EAAYN,IAiC/C,SAASJ,EAAiB1B,EAAWt/J,EAAMrB,GACvC,MAAMsT,EAAMqtJ,EAAGl/I,SACf,IAAI8H,EAAK,KAET,GAAkB,eAAdloB,EAAKrB,KAAuB,CAC5B,MAAMwnB,EAAMnmB,EAAK6S,EAAE,GACbwT,EAAMrmB,EAAK6S,EAAE7S,EAAK6S,EAAE1U,OAAS,GACnC+pB,EAAK46I,EAAoB7wJ,EAAK8wJ,EAAK58I,EAAKnmB,EAAK8S,EAAGuT,EAAKrmB,EAAK8S,GAAIsqJ,EAAAzhB,GAAGC,OAErE,GAAkB,aAAd57I,EAAKrB,KAAqB,CAC1B,MAAMynB,EAAMpmB,EAAK8S,EAAE,GACbwT,EAAMtmB,EAAK8S,EAAE9S,EAAK8S,EAAE3U,OAAS,GACnC+pB,EAAK46I,EAAoB7wJ,EAAK8wJ,EAAK/iK,EAAK6S,EAAGuT,EAAKpmB,EAAK6S,EAAGyT,GAAM82I,EAAAzhB,GAAGE,OAGrE96I,oBAAwBpC,QAAWupB,KACnCo3I,EAAGsB,WAAW14I,EAAIvpB,GAKtB,SAAS2iK,EAAoBhC,EAAWrjJ,EAAKoiJ,GACzC,MAAMn4I,EAAO88I,EAAe1D,EAAIrjJ,GAEhC,IAAK,IAAIpJ,EAAIqT,EAAKC,IAAKtT,GAAKqT,EAAKG,IAAKxT,IAClC,IAAK,IAAIC,EAAIoT,EAAKE,IAAKtT,GAAKoT,EAAKI,IAAKxT,IAClCwsJ,EAAG2D,SAASpwJ,EAAGC,EAAGurJ,GAM9B,SAASkD,EAAuBjC,EAAWl4D,EAAWnrF,GAClD,MAAMiK,EAAO88I,EAAe1D,EAAIrjJ,GAChC,IAAK,IAAIhiB,EAAI,EAAGA,EAAImtG,EAAWntG,IAAK,CAChC,MAAMiuB,EAAK46I,EAAoBxD,EAAGl/I,SAAU8F,EAAMk3I,EAAAzhB,GAAGkD,WACrDygB,EAAGsB,WAAW14I,EAAIk1I,EAAAzhB,GAAGkB,WAI7B,SAAS8kB,EAAwBrC,EAAW/3D,EAAYtrF,GACpD,MAAMiK,EAAO88I,EAAe1D,EAAIrjJ,GAChC,IAAK,IAAIhiB,EAAI,EAAGA,EAAIstG,EAAYttG,IAAK,CACjC,MAAMiuB,EAAK46I,EAAoBxD,EAAGl/I,SAAU8F,EAAM,CAACk3I,EAAAzhB,GAAGa,OACtD8iB,EAAGsB,WAAW14I,EAAIk1I,EAAAzhB,GAAGmB,WAM7B,SAAS+lB,EAAuBvD,EAAW4D,EAAWjnJ,GAClD,MAAMiK,EAAO88I,EAAe1D,EAAIrjJ,GAChC,IAAK,IAAIhiB,EAAI,EAAGA,EAAIipK,EAAWjpK,IAAK,CAChC,MAAMiuB,EAAK46I,EAAoBxD,EAAGl/I,SAAU8F,EAAM,CAACk3I,EAAAzhB,GAAGa,OACtD8lB,EAAiBhD,EAAIp3I,IAwC7B,SAASo6I,EAAiBhD,EAAWp3I,GAC7BtD,EAAApmB,QAAG8jB,UAAU86I,EAAAzhB,GAAGyB,eAChBkiB,EAAGsB,WAAW14I,EAAIk1I,EAAAzhB,GAAGoB,UAGrBuiB,EAAGsB,WAAW14I,EAAIk1I,EAAAzhB,GAAGqB,UAM7B,SAASmmB,EAAYxkK,EAAcykK,GAC/B,IAAIzgK,EAAOygK,EAKX,MAJyB,iBAAdA,IACPzgK,EAAO,CAACygK,IAEKzgK,EAAKga,QAAQygJ,EAAAzhB,GAAGyC,WACjB,GAEGz7I,EAAKga,QAAQhe,IACX,EAKzB,SAASmkK,EAAoB7wJ,EAAiBiU,EAAYk9I,GACtD,MAAMj9I,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAOJ,EAE7B,IAAIrT,EAAIsT,IAAQE,EAAMF,EAAMhM,IAASwL,cAAcQ,EAAKE,GACpDvT,EAAIwT,IAAQF,EAAME,EAAMnM,IAASwL,cAAcS,EAAKE,GACpDmnE,EAAW,KAAOpnE,EAAMF,EAAM,IAAMG,EAAMF,EAAM,GAEhDiG,EAAQ82I,EAAYlxJ,EAAIY,GAAGC,GAAIswJ,GACnC,MAAQ/2I,GAAO,CAIX,GAHAxZ,EAAIsT,IAAQE,EAAMF,EAAMhM,IAASwL,cAAcQ,EAAKE,GACpDvT,EAAIwT,IAAQF,EAAME,EAAMnM,IAASwL,cAAcS,EAAKE,GACpD+F,EAAQ82I,EAAYlxJ,EAAIY,GAAGC,GAAIswJ,GACd,IAAb31E,EAAgB,CAChB,MAAMg1E,MAAUt8I,KAAOG,UAAYD,KAAOD,KAC1CxB,EAAApmB,QAAG+C,KAAK,YAAa,0CACG6hK,QAAgBX,KACxC,QAEFh1E,EAEN,MAAO,CAAC56E,EAAGC,GAMf,SAAS6tJ,EAAWF,EAAKC,EAAQv/I,EAAON,GACpC,IAAIsF,EAAM,EACNG,EAAM,EACND,EAAM,EACND,EAAM,EAsBV,OAnBIq6I,EAAIp0I,MAAM,OACVjG,EAAM,EACNE,EAAMxiB,KAAK4C,MAAe,IAATg6J,EAAgB7/I,IAEjC4/I,EAAIp0I,MAAM,OACV/F,EAAMzF,EAAQ,EACduF,EAAM,IAAOvF,EACbuF,EAAMtiB,KAAK4C,MAAM0f,GAAO,EAAIs6I,IAAWp6I,EAAMF,KAE7Cq6I,EAAIp0I,MAAM,OACVhG,EAAMlF,EAAQ,EACdgF,EAAM,IAAOhF,EACbgF,EAAMriB,KAAK4C,MAAMyf,GAAO,EAAIu6I,IAAWr6I,EAAMF,KAE7Cs6I,EAAIp0I,MAAM,OACVlG,EAAM,EACNE,EAAMviB,KAAK4C,MAAe,IAATg6J,EAAgBv/I,IAG9B,CACHhH,IAASwL,cAAcQ,EAAKE,GAC5BlM,IAASwL,cAAcS,EAAKE,IAKpC,SAASy8I,EAAK58I,EAAKG,EAAKD,EAAKD,GAKzB,OAJIxB,EAAApmB,QAAG6D,cAAc,CAAC8jB,EAAKG,EAAKD,EAAKD,KACjCxB,EAAApmB,QAAGK,IAAI,mBAAoB,oCACMsnB,KAAOG,KAAOD,KAAOD,KAEnD,CAACi9I,OAAO,EAAMl9I,MAAKG,MAAKD,MAAKD,OASxC,SAAS48I,EAAe1D,EAAIrjJ,GACxB,GAAIA,EAAIonJ,MACJ,OAAOpnJ,EAGX,IAAIqnJ,EAAS,EACTC,EAAOjE,EAAGt5D,WAAa,EACvBw9D,EAAS,EACTC,EAAOnE,EAAGv5D,WAAa,EAE3B,GAAI9pF,EAAIpJ,EAAG,CACP,MAAMy6C,EAAQrxC,EAAIpJ,EAAEy6C,MACd+J,EAAMp7C,EAAIpJ,EAAEwkD,IAGlB,GAAc,MAAV/J,EAAgBg2G,EAAS,OACxB,GAAc,SAAVh2G,EAAkB,CACvB,MAAMwB,EAAQwwG,EAAGoE,YACb50G,EAAM3wD,OAAS,IACfmlK,EAASx0G,EAAM,GAAGj8C,QAGrB,GAAI1C,MAAMC,QAAQk9C,IACF,SAAbA,EAAM,GAAe,CACrB,MAAMwB,EAAQwwG,EAAGoE,YACb50G,EAAM3wD,OAASmvD,EAAM,KACrBg2G,EAASx0G,EAAMxB,EAAM,IAAIz6C,GAMrC,GAAY,MAARwkD,EAAcksG,EAAOjE,EAAGt5D,WAAa,OACpC,GAAY,SAAR3uC,EAAgB,CACrB,MAAMvI,EAAQwwG,EAAGoE,YACb50G,EAAM3wD,OAAS,IACfolK,EAAOz0G,EAAM,GAAGj8C,QAGnB,GAAI1C,MAAMC,QAAQinD,IACJ,SAAXA,EAAI,GAAe,CACnB,MAAMvI,EAAQwwG,EAAGoE,YACb50G,EAAM3wD,OAASk5D,EAAI,KACnBksG,EAAOz0G,EAAMuI,EAAI,IAAIxkD,IAMrC,GAAIoJ,EAAInJ,EAAG,CACP,MAAMw6C,EAAQrxC,EAAInJ,EAAEw6C,MACd+J,EAAMp7C,EAAInJ,EAAEukD,IAGlB,GAAc,MAAV/J,EAAgBk2G,EAAS,OACxB,GAAc,SAAVl2G,EAAkB,CAEvB,MAAMwB,EAAQwwG,EAAGqE,YACb70G,EAAM3wD,OAAS,IACfqlK,EAAS10G,EAAM,GAAGh8C,QAGrB,GAAI3C,MAAMC,QAAQk9C,IACF,SAAbA,EAAM,GAAe,CACrB,MAAMwB,EAAQwwG,EAAGqE,YACb70G,EAAM3wD,OAASmvD,EAAM,KACrBk2G,EAAS10G,EAAMxB,EAAM,IAAIx6C,GAMrC,GAAY,MAARukD,EAAcosG,EAAOnE,EAAGv5D,WAAa,OACpC,GAAY,SAAR1uC,EAAgB,CACrB,MAAMvI,EAAQwwG,EAAGqE,YACb70G,EAAM3wD,OAAS,IACfslK,EAAO30G,EAAM,GAAGh8C,QAGnB,GAAI3C,MAAMC,QAAQinD,IACJ,SAAXA,EAAI,GAAe,CACnB,MAAMvI,EAAQwwG,EAAGqE,YACb70G,EAAM3wD,OAASk5D,EAAI,KACnBosG,EAAO30G,EAAMuI,EAAI,IAAIvkD,IAOrC,MAAO,CACHqT,IAAKm9I,EAAQj9I,IAAKk9I,EAClBn9I,IAAKo9I,EAAQl9I,IAAKm9I,GA3/B1B1pK,EAAAwjK,QAkgCAA,EAAMqG,gBAAkB,SAASn6I,EAAkB,IAC/C,MAAMo6I,OAAgC,IAAhBp6I,EAAKo6I,QAAyBp6I,EAAKo6I,OAEnDC,OAA0C,IAArBr6I,EAAKq6I,aAC1Br6I,EAAKq6I,YAELC,OAA0C,IAArBt6I,EAAKs6I,aAC1Bt6I,EAAKs6I,YAGLC,EAAWv6I,EAAKu6I,UAAY,GAC5BC,EAAWx6I,EAAKw6I,UAAY,GAC5BjuC,EAAY,IAAIunC,EAEhB2G,EArrBV,SAAwB/iJ,EAAON,GAC3B,MAAM5O,EAAM,GACZ,IAAK,IAAIY,EAAI,EAAGA,EAAIsO,EAAOtO,IAAK,CAC5BZ,EAAIY,GAAK,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvBb,EAAIY,GAAGC,GAAKsqJ,EAAAzhB,GAAGQ,MAGvB,OAAOlqI,EA6qBOsjF,CAAeyuE,EAAUC,GAyBvC,OAhsBJ,SAA0BhyJ,GACtB,MAAM4O,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAGlB8T,EAAI,GAAG,GAAKmrJ,EAAAzhB,GAAGG,MACf7pI,EAAI,GAAG4O,EAAQ,GAAKu8I,EAAAzhB,GAAGK,MACvB/pI,EAAIkP,EAAQ,GAAGN,EAAQ,GAAKu8I,EAAAzhB,GAAGM,MAC/BhqI,EAAIkP,EAAQ,GAAG,GAAKi8I,EAAAzhB,GAAGI,MAGvB,IAAK,IAAIlpI,EAAI,EAAGA,EAAIsO,EAAQ,EAAGtO,IAC3BZ,EAAIY,GAAG,GAAKsH,IAASC,aAAagjJ,EAAAzhB,GAAG8C,UAIzC,IAAK,IAAI5rI,EAAI,EAAGA,EAAIsO,EAAQ,EAAGtO,IAC3BZ,EAAIY,GAAGgO,EAAQ,GAAK1G,IAASC,aAAagjJ,EAAAzhB,GAAG+C,UAIjD,IAAK,IAAI5rI,EAAI,EAAGA,EAAI+N,EAAQ,EAAG/N,IAC3Bb,EAAIkP,EAAQ,GAAGrO,GAAKqH,IAASC,aAAagjJ,EAAAzhB,GAAGgD,UAIjD,IAAK,IAAI7rI,EAAI,EAAGA,EAAI+N,EAAQ,EAAG/N,IAC3Bb,EAAI,GAAGa,GAAKqH,IAASC,aAAagjJ,EAAAzhB,GAAGiD,UA6oBzCulB,CAAiBD,GAvoBrB,SAAuB5E,EAAIrtJ,EAAKwX,GAC5B,MAAM5I,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAElB,IAAIimK,OAAkC,IAAjB36I,EAAK26I,QACpB36I,EAAK26I,QAAU,CAAC,GAAK,IACvBC,OAAkC,IAAjB56I,EAAK46I,QACpB56I,EAAK46I,QAAU,GACrB,MAAM9E,OAAwC,IAApB91I,EAAK81I,YACzB91I,EAAK81I,WAGX,GAAI38I,OAAOC,UAAU4G,EAAK26I,SAAU,CAChCA,EAAU,GACV,IAAK,IAAInqK,EAAI,EAAGA,EAAIwvB,EAAK26I,QAASnqK,IAAK,CACnC,MAAMqqK,EAAMnqJ,IAASwL,cAAc,EAAG,IACtCy+I,EAAQ5hK,KAAW,IAAN8hK,GAEjBF,EAAUA,EAAQr2J,OAEtB,GAAI6U,OAAOC,UAAU4G,EAAK46I,SAAU,CAChCA,EAAU,GACV,IAAK,IAAIpqK,EAAI,EAAGA,EAAIwvB,EAAK46I,QAASpqK,IAAK,CACnC,MAAMqqK,EAAMnqJ,IAASwL,cAAc,EAAG,IACtC0+I,EAAQ7hK,KAAW,IAAN8hK,GAEjBD,EAAUD,EAAQr2J,OAItB,IAAK,IAAI9T,EAAI,EAAGA,EAAImqK,EAAQjmK,OAAQlE,IAAK,CACrC,IAAIsqK,EAAOhF,EACQ,WAAfA,IACAgF,EAAOpqJ,IAASoI,cAAgB,IAEpC88I,EAA4BC,EACxBx7J,KAAK4C,MAAMma,EAAQujJ,EAAQnqK,IAAKgY,EAAKsyJ,GAE7C,IAAK,IAAItqK,EAAI,EAAGA,EAAIoqK,EAAQlmK,OAAQlE,IAAK,CACrC,IAAIsqK,EAAOhF,EACQ,WAAfA,IACAgF,EAAOpqJ,IAASoI,cAAgB,IAEpCm9I,EAA4BJ,EACxBx7J,KAAK4C,MAAMya,EAAQkjJ,EAAQpqK,IAAKgY,EAAKsyJ,IA4lB7CC,CAAcxuC,EAAWkuC,EAAOz6I,GArhBpC,SAA6BusG,EAAW/jH,EAAKwX,GACzC,MAAM5I,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAEZ+V,EAAQuV,EAAKg7I,gBAAkB,IAC/BC,EAAS5gK,KAAK4C,MAAMya,EAAQN,EAAQ3M,GAE1C,IAAK,IAAIja,EAAI,EAAGA,EAAIyqK,EAAQzqK,IAAK,CAC7B,MAAM4Y,EAAIsH,IAASwL,cAAc,EAAGxE,EAAQ,GACtCrO,EAAIqH,IAASwL,cAAc,EAAG9E,EAAQ,GACxC5O,EAAIY,GAAGC,KAAOsqJ,EAAAzhB,GAAGQ,QACjBlqI,EAAIY,GAAGC,GAAKqH,IAASC,aAAagjJ,EAAAzhB,GAAGkD,aA4gB7C8lB,CAAoB3uC,EAAWkuC,EAAOz6I,GAElCq6I,EAtgBR,SAAqC7xJ,EAAK4xJ,GAAS,GAC/C,MAAMhjJ,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAElB,GAAI0lK,EACA,IAAK,IAAIhxJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB8sJ,EAAiB/sJ,EAAGC,EAAGb,QAK/B,IAAK,IAAIa,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB,IAAK,IAAID,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB+sJ,EAAiB/sJ,EAAGC,EAAGb,GAyf/B2yJ,CAA4BV,EAAOL,GAhf3C,SAAqC5xJ,EAAK4xJ,GAAS,GAC/C,MAAMhjJ,EAAQ5O,EAAI,GAAG9T,OACfgjB,EAAQlP,EAAI9T,OAElB,GAAI0lK,EACA,IAAK,IAAIhxJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI+N,EAAQ,EAAG/N,GAAK,EAAGA,IAC5B8sJ,EAAiB/sJ,EAAGC,EAAGb,QAK/B,IAAK,IAAIa,EAAI+N,EAAQ,EAAG/N,GAAK,EAAGA,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB+sJ,EAAiB/sJ,EAAGC,EAAGb,GAqe/B4yJ,CAA4BX,EAAOL,GAGnCp6I,EAAKs6I,aACLn/I,EAAApmB,QAAGiiB,SAASyjJ,GAEhBluC,EAAUxgC,OAAO0uE,GAEjBnE,EAAqB/pC,EAAWvsG,GAI5Bs6I,GACAn/I,EAAApmB,QAAGsD,IAAI,KAAMk0H,EAAU8uC,cAAchkJ,KAAK,OAEvCk1G,GAGXunC,EAAM7hD,SAAW,SAASlgG,GACtB,MAAM8jJ,EAAK,IAAI/B,EAWf,OAVA+B,EAAG9pE,OAAOh6E,EAAK+iJ,SACfe,EAAGrsG,UAAYz3C,EAAKijJ,SACpBa,EAAGzB,cAAgBriJ,EAAKkjJ,aACxBY,EAAG3B,QAAUniJ,EAAKmjJ,OAClBW,EAAG5B,QAAUliJ,EAAKojJ,OAClBU,EAAGxB,UAAYtiJ,EAAKgjJ,SACpBc,EAAG7kD,UAAYj/F,EAAKy/F,SAChBz/F,EAAK4iJ,UACLkB,EAAGvB,SAAWT,EAAAyH,UAAUrpD,SAASlgG,EAAK4iJ,UAEnCkB,sKCtlCX,MAAA16I,EAAAC,EAAAhrB,EAAA,IACA++J,EAAA/+J,EAAA,IACAmrK,EAAAnrK,EAAA,KACAotF,EAAAptF,EAAA,IACAstF,EAAAttF,EAAA,IACAi7F,EAAAj7F,EAAA,IACAorK,EAAAprK,EAAA,IACAujK,EAAAvjK,EAAA,IACAq3C,EAAAr3C,EAAA,GACAogB,EAAApgB,EAAA,GACA2lG,EAAA3lG,EAAA,IACAm3E,EAAAn3E,EAAA,GAKMkH,EADNlH,EAAA,EACcq3B,CAAI,kBAaLn3B,EAAAmrK,UAAiB,GAE9B,MAAMC,EAAc,6CACdC,EAAoB,wCAEpBC,EAAgBn0H,EAAArE,KAAKkC,WAAW3xC,UAGhCkoK,EAAe,IAGfC,EAAc,EACdC,EAAc,EACdC,GAAkB,EAIxB,IAAIC,GAAe,EAEnB,MAAMvrJ,EAASF,EAAAC,OAAOC,OAEtBpgB,EAAAmrK,UAAUS,YAAc,IACxB5rK,EAAAmrK,UAAUU,YAAc,IACxB,MAAMD,YAACA,EAAWC,YAAEA,GAAe7rK,EAAAmrK,UAKnC,MAAaW,EAIT5gJ,YAAYtmB,GACR/B,KAAK+B,KAAOA,EACZ/B,KAAKorB,MAAQ,GAGV/C,aAAaqkC,GAChB1sD,KAAKorB,MAAMxlB,KAAK8mD,GAGbrkC,WAAWvpB,GACd,OAAOkB,KAAKorB,MAAMtsB,GAIfupB,aACH,MAAkB,aAAdroB,KAAK+B,KACE/B,KAAKorB,MAAM,GAAG,GAAG,GAEV,eAAdprB,KAAK+B,KACE/B,KAAKorB,MAAM,GAAG,GAAG,GAErBo1I,EAAAzhB,GAAGwC,YAGPl5H,eACH,MAAkB,aAAdroB,KAAK+B,KACE/B,KAAKorB,MAAM,GAAG,GAAG,GAEV,eAAdprB,KAAK+B,KACE/B,KAAKorB,MAAM,GAAG,GAAG,GAErBo1I,EAAAzhB,GAAGwC,YAGPl5H,aACH,MAAM6gJ,EAAOlpK,KAAKorB,MAAM7pB,OAAS,EACjC,MAAkB,aAAdvB,KAAK+B,KACE/B,KAAKorB,MAAM89I,GAAM,GAAG,GAEb,eAAdlpK,KAAK+B,KACE/B,KAAKorB,MAAM89I,GAAM,GAAG,IAEvB,EAGL7gJ,WACH,IAAI1e,WAAe3J,KAAK+B,QAIxB,OAHA4H,cAAkB3J,KAAKorB,MAAM7pB,WAC7BoI,aAAiB3J,KAAKmpK,uBAAuBnpK,KAAKopK,iBAClDz/J,aAAiBkV,KAAKC,UAAU9e,KAAKorB,UArD7CjuB,EAAA8rK,SA+DA,MAAaI,EAMThhJ,YAAYtmB,EAAcqpB,GACtBprB,KAAK+B,KAAOA,EACZ/B,KAAKorB,MAAQA,EACbprB,KAAK0kH,YAAc,KAEfnxG,MAAMC,QAAQ4X,GACO,IAAjBA,EAAM7pB,OACNymB,EAAApmB,QAAGK,IAAI,eAAgB,MACnB,mBAEEsR,MAAMC,QAAQ4X,EAAM,KAC1BpD,EAAApmB,QAAGK,IAAI,eAAgB,MACnB,mCAIR+lB,EAAApmB,QAAGK,IAAI,eAAgB,MACnB,2BAILomB,eACH,OAAIroB,KAAKorB,MAAM7pB,OAAS,EACbvB,KAAKorB,MAAMprB,KAAKorB,MAAM7pB,OAAS,GAEnC,EAAE,GAAI,IA/BrBpE,EAAAksK,eA0CA,MAAaC,EASTjhJ,YAAYtQ,GACR/X,KAAK+oG,OAAShxF,EACd/X,KAAK8gK,QAAU,GACf9gK,KAAK+gK,QAAU,GACf/gK,KAAKupK,MAAQxxJ,EAAMyL,SAAStM,KAC5BlX,KAAKwpK,MAAQzxJ,EAAMyL,SAASvM,KAG5BjX,KAAKq2D,UAAY,GAGjBr2D,KAAKihK,cAAgB,GAGlB54I,cACH,OAAOroB,KAAKq2D,UAGThuC,UACH,OAAOroB,KAAKupK,MAGTlhJ,UACH,OAAOroB,KAAKwpK,MAGTnhJ,QAAQjlB,GACO,aAAdA,EAAKrB,KACL/B,KAAK+gK,QAAQn7J,KAAKxC,GAEC,eAAdA,EAAKrB,MACV/B,KAAK8gK,QAAQl7J,KAAKxC,GAKnBilB,UACH,MAAMohJ,EAAOzpK,KAAK8gK,QAAQv/J,OACpBmoK,EAAO1pK,KAAK+gK,QAAQx/J,OAC1B,OAAa,IAATkoK,GAAuB,IAATC,EAAoB,KACzB,IAATD,EAAoBzpK,KAAK+gK,QAAQ,GACxB,IAAT2I,EAAoB1pK,KAAK8gK,QAAQ,IACrC94I,EAAApmB,QAAG+C,KAAK,aAAc,oDACwB+kK,YAAeD,KACtDzpK,KAAK8gK,QAAQ,IAGjBz4I,WAAW+vC,GACd,MAAMr2D,EAAOq2D,EAAQr2D,KAChB/B,KAAKq2D,UAAUn3D,eAAe6C,KAC/B/B,KAAKq2D,UAAUt0D,GAAQ,IAE3B/B,KAAKq2D,UAAUt0D,GAAM6D,KAAKwyD,GAE1BA,EAAQhtC,MAAM/gB,QAAQihB,IAClB,MAAM8uG,EAAQ9uG,EAAG,GAAK,IAAMA,EAAG,GAC/BtrB,KAAKihK,cAAc7mC,GAASr4H,IAI7BsmB,kBAAkBtmB,GACrB,OAAI/B,KAAKq2D,UAAUn3D,eAAe6C,GACvB/B,KAAKq2D,UAAUt0D,GAEnB,IAzEf5E,EAAAmsK,aAiFA,MAAaK,EAQTthJ,YAAYljB,EAAY,IAEpBnF,KAAK4pK,UAAYzkK,EAAKykK,WAAa,EACnC5pK,KAAK6pK,UAAY1kK,EAAK0kK,WAAa,EAGnC7pK,KAAK8pK,QAAU3kK,EAAK2kK,SAAW,EAC/B9pK,KAAK+pK,QAAU5kK,EAAK4kK,SAAW,EAG/B/pK,KAAKgqK,KAAO7kK,EAAK6kK,MAAQ,EACzBhqK,KAAKiqK,KAAO9kK,EAAK8kK,MAAQ,EAGtB5hJ,SAAS2hJ,EAAcC,GAC1BjqK,KAAKgqK,KAAOA,EACZhqK,KAAKiqK,KAAOA,EAGT5hJ,mBACH,OAAOroB,KAAK4pK,UAAY5pK,KAAK8pK,QAG1BzhJ,mBACH,OAAOroB,KAAK6pK,UAAY7pK,KAAK+pK,QAG1B1hJ,YAAY6hJ,EAAmBC,GAGlC,MAAO,CAFGD,EAAU,GAAKlqK,KAAKgqK,KAAOG,EAAW,GACtCD,EAAU,GAAKlqK,KAAKgqK,KAAOG,EAAW,IAS7C9hJ,WAAW+hJ,EAAgBC,GAC9B,MAAM/gJ,EAAOtpB,KAAKsqK,4BAA4BF,EAAO,GAAIA,EAAO,IAChE,MAAO,CACH9gJ,EAAKC,IAAMriB,KAAK4C,MAAMugK,EAAY,GAAKrqK,KAAKgqK,MAC5C1gJ,EAAKE,IAAMtiB,KAAK4C,MAAMugK,EAAY,GAAKrqK,KAAKiqK,OAM7C5hJ,sBAAsBkiJ,EAAaC,GACtC,MAAO,CACHtjK,KAAK4C,MAAMygK,EAAMvqK,KAAKgqK,MACtB9iK,KAAK4C,MAAM0gK,EAAMxqK,KAAKiqK,OAIvB5hJ,4BAA4B48F,EAAYC,GAC3C,OAAIl/F,OAAOC,UAAUg/F,IAAOj/F,OAAOC,UAAUi/F,GAClC,CACH37F,IAAM07F,EAAK8jD,EAAe/oK,KAAKgqK,KAC/BxgJ,IAAM07F,EAAK8jD,EAAehpK,KAAKiqK,KAC/BxgJ,KAAOw7F,EAAK,GAAK8jD,EAAe/oK,KAAKgqK,KAAO,EAC5CtgJ,KAAOw7F,EAAK,GAAK8jD,EAAehpK,KAAKiqK,KAAO,IAGpDjiJ,EAAApmB,QAAGK,IAAI,qBAAsB,8DACOgjH,MAAOC,KACpC,MAGJ78F,SACH,MAAO,CACHuhJ,UAAW5pK,KAAK4pK,UAChBC,UAAW7pK,KAAK6pK,UAChBC,QAAS9pK,KAAK8pK,QACdC,QAAS/pK,KAAK+pK,QACdC,KAAMhqK,KAAKgqK,KACXC,KAAMjqK,KAAKiqK,OAqFvB,SAASQ,EAAe/H,EAAW6H,EAAKC,EAAKR,EAAMC,GAC/C,MACMloK,EADoB2gK,EAAGl/I,SACF+mJ,GAAKC,GAC1B/I,EAAoBiB,EAAGgI,SAASH,EAAKC,GAErCn7C,EAAO26C,EACP16C,EAAO26C,EAEPp7C,GADY,IAAIjsB,EAAAtK,cACKC,YAAYvwE,EAAApmB,QAAG6M,YAAa4gH,EAAMC,IAejE,SAAkCmyC,EAAmB5yC,GACjD,MAAM53G,EAAO43G,EAASrrG,SAASvM,KACzBC,EAAO23G,EAASrrG,SAAStM,KACzByzJ,EAAWptJ,IAASoI,aAE1B,GAAkB,WAAd87I,EACAvpE,EAAA/M,aAAa4I,cAAc86B,EAASrrG,SAAU,QAE7C,GAAkB,WAAdi+I,GAEL,GADAvpE,EAAA/M,aAAa4I,cAAc86B,EAASrrG,SAAU,IAC1CmnJ,EAAW,GAAK,CAChB,MAAM35E,EAAS,IAAIkH,EAAA/M,aACnB6F,EAAOnC,OAAO,QAAS53E,EAAMC,GAC7B,MAAM0zJ,EAAW,CAACtzJ,MAAO,IAAMo3E,UAAU,GACzCsC,EAAOpC,cAAcigC,EAASrrG,SAAUonJ,SAG3C,GAAkB,WAAdnJ,GAGL,GAFAvpE,EAAA/M,aAAa4I,cAAc86B,EAASrrG,SAAU,IAE1CmnJ,EAAW,GAAK,CAChB,MAAM35E,EAAS,IAAIkH,EAAA/M,aACnB6F,EAAOnC,OAAO,QAAS53E,EAAMC,GAC7B,MAAM0zJ,EAAW,CAACtzJ,MAAO,GAAKo3E,UAAU,GACxCsC,EAAOpC,cAAcigC,EAASrrG,SAAUonJ,SAG3C,GAAkB,UAAdnJ,GAAuC,WAAdA,EAAwB,CACtD,MAAM31D,EAAa,CACfx0F,MAAO,GAAKo3E,UAAU,GAEpBsC,EAAS,IAAIkH,EAAA/M,aAKnB,GAJA6F,EAAOnC,OAAO,SAAU53E,EAAMC,GAC9B85E,EAAOvC,eAAeogC,EAASrrG,SAAUsoF,GAGrC6+D,EAAW,GAAK,CAChB35E,EAAOnC,OAAO,QAAS53E,EAAMC,GAC7B,MAAM0zJ,EAAW,CAACtzJ,MAAO,GAAKo3E,UAAU,GACxCsC,EAAOpC,cAAcigC,EAASrrG,SAAUonJ,SAG3C,GAAkB,cAAdnJ,EAA2B,CAChC,MAAM50I,EAAO,CAACvV,MAAO,IACf05E,EAAS,IAAIkH,EAAA/M,aACnB6F,EAAOnC,OAAO,SAAU53E,EAAMC,GAC9B85E,EAAOvC,eAAeogC,EAASrrG,SAAUqJ,IA5D7Cg+I,CAAyBpJ,EAAW5yC,GAEpC,MAAMi8C,EAAa,IAAIxB,EAAWz6C,GAQlC,OAPA6zC,EAAGqI,YAAY,CAACR,EAAKC,GAAMM,GAgE/B,SAA0B/oK,EAAc+oK,EAAwBj8C,GAC5D,MAAMx5G,EAAMw5G,EAASrrG,SAEfwnJ,EAAkBxK,EAAAzhB,GAAG4C,WAAWn1H,UAAU1lB,GAAQA,IAAS/E,IAAS,EACpEkpK,EAAkBzK,EAAAzhB,GAAG6C,WAAWp1H,UAAU1lB,GAAQA,IAAS/E,IAAS,EACpEmpK,EAAiB1K,EAAAzhB,GAAG0C,WAAWj1H,UAAU1lB,GAAQA,IAAS/E,IAAS,EACnEopK,EAAiB3K,EAAAzhB,GAAG2C,WAAWl1H,UAAU1lB,GAAQA,IAAS/E,IAAS,EAEnEstH,EAAOh6G,EAAI4B,KACXq4G,EAAOj6G,EAAI6B,KAEX8U,EAAO9kB,KAAK4C,MAAMulH,EAAO,GACzBjiG,EAAOlmB,KAAK4C,MAAMwlH,EAAO,GAK/B,IAAIxsE,EAAQ,KAERv1B,GAAU,EACViB,GAAQ,EACRw8I,GAAmBC,GACnB19I,EAAS,EACTiB,EAAO8gG,EAAO,GAET07C,GACLz9I,EAAS,EACTiB,EAAOpB,EAAO,GAET69I,IACL19I,EAASH,EACToB,EAAO8gG,EAAO,GAGlB,IAAIe,EAAS+6C,EAAkB58I,EAAO,EApBtB,EAEC,EAkB2C6gG,EAAM,GAElE,GAAI27C,GAAmBC,EAAiB,CACpC,MAAM7nK,EAAO,IAAI6lK,EAAO,YACxB,IAAK,IAAI/yJ,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAAK,CACjC4sC,EAAQutE,EAAOn6G,EAAIqX,GACnB,MAAMm/B,EAAO,GACC,IAAV5J,IAAcA,EA3BV,GA4BR,IAAK,IAAI7sC,EAAI+V,GAAQ82B,EAAQ,GAAI7sC,GAAK+V,GAAQ82B,EAAQ,GAAI7sC,IACtDZ,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKkC,YAC7Bua,EAAK9mD,KAAK,CAACqQ,EAAGC,IAGlB9S,EAAKioK,aAAa3+G,GAEtBo+G,EAAWQ,QAAQloK,GAGvB,IAAIkqB,GAAU,EACViB,GAAQ,EACR28I,GAAkBC,GAClB79I,EAAS,EACTiB,EAAO8gG,EAAO,GAET67C,GACL59I,EAAStB,EACTuC,EAAO8gG,EAAO,GAET87C,IACL79I,EAAS,EACTiB,EAAOvC,EAAO,GAIlB,GADAqkG,EAAS+6C,EAAkB78I,EAAO,EApDlB,EACC,EAmDuC8gG,EAAM,GAC1D67C,GAAkBC,EAAgB,CAClC,MAAM/nK,EAAO,IAAI6lK,EAAO,cACxB,IAAK,IAAIhzJ,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAAK,CACjC6sC,EAAQutE,EAAOp6G,EAAIqX,GACnB,MAAMo/B,EAAO,GACC,IAAV5J,IAAcA,EA1DV,GA2DR,IAAK,IAAI5sC,EAAIkX,GAAQ01B,EAAQ,GAAI5sC,GAAKkX,GAAQ01B,EAAQ,GAAI5sC,IACtDb,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKkC,YAC7Bua,EAAK9mD,KAAK,CAACqQ,EAAGC,IAGlB9S,EAAKioK,aAAa3+G,GAEtBo+G,EAAWQ,QAAQloK,IA/IvBmoK,CAAiBxpK,EAAM+oK,EAAYj8C,GAuMvC,SACI6zC,EAAW6H,EAAaC,EAAa37C,GAErC,MAAMvjG,EAAa,CAACi/I,EAAKC,GACnBM,EAAapI,EAAG1zC,YAAY1jG,GAC5Bu2I,EAAqBa,EAAG8I,gBAAgBlgJ,GACxCse,EAAe84H,EAAGj0I,QAAQnD,GAEhC,IAAKu2I,EAAW,OAEhB,IAAI4J,EAAa,EACjB5J,EAASx3J,QAASib,IACVA,IAASk7I,EAAAzhB,GAAGc,SACZ6rB,EAA0BpmJ,EAAMwlJ,EAAYj8C,GAmCxD,SAAwBjlF,EAActkB,GAClC,QAAQskB,IAAS42H,EAAAzhB,GAAGC,OAASp1G,IAAS42H,EAAAzhB,GAAGE,OACpC35H,IAASk7I,EAAAzhB,GAAGgB,QAAUz6H,IAASk7I,EAAAzhB,GAAGiB,QAnC1B2rB,CAAe/hI,EAAMtkB,GAC1BomJ,EAA0BpmJ,EAAMwlJ,EAAYj8C,GAEvCvpG,IAASk7I,EAAAzhB,GAAGgB,QAAUz6H,IAASk7I,EAAAzhB,GAAGiB,OA+DnD,SACI16H,EAAcwlJ,EAAwBj8C,GAEtC,IAAIi3C,GAAS,EACb,MACM8F,EADY/8C,EAASrrG,SAASozB,UACDvhC,IAAIvV,GAAQA,EAAK8b,SACpD,IAAIwP,EAAQ,GAERylE,EAAW63E,EACf,KAAwB,IAAjBt9I,EAAM7pB,SACL6yE,EAAA7pD,SAASshJ,YAAYD,EAAQ,EAAG,EAAGxgJ,KACnC06I,GAAS,GAET16I,EAAM7pB,OAAS,IACf4C,EAAM,iDACN2hK,GAAS,EACT16I,EAAQ,QAENylE,GAAY,MAKtB,MAAM9uF,EAAOujB,IAASk7I,EAAAzhB,GAAGgB,OAAS,aAAe,aAEjD,GAAI+lB,EAAQ,CACR3hK,EAAM,uCACF0a,KAAKC,UAAUsM,IACnByjG,EAASrrG,SAASsoJ,aAAa1gJ,EAAOkpB,EAAArE,KAAKoC,MAC3C,MAAM05H,EAAQ,IAAI1C,EAAatnK,EAAMqpB,GACrC2gJ,EAAMluC,UAAYmuC,EAAa1mJ,GAC/BwlJ,EAAW9G,WAAW+H,IA7FlBE,CAAmB3mJ,EAAMwlJ,EAAYj8C,GAEhCvpG,IAASk7I,EAAAzhB,GAAGkB,SA+G7B,SAA8B6qB,EAAwBj8C,GAClD,MAAMzjG,EAAQ8gJ,EAA2Br9C,GACzC,GAAIzjG,GAASA,EAAM7pB,OAAS,EAAG,CAC3B,MAAMkpG,EAAU,IAAI4+D,EAAa,UAAWj+I,GAC5C0/I,EAAW9G,WAAWv5D,IAlHlB0hE,CAAqBrB,EAAYj8C,GAE5BvpG,IAASk7I,EAAAzhB,GAAGqB,SAmP7B,SAA8B96H,EAAMwlJ,EAAwBj8C,GACxD,MACMl4E,EADek4E,EAASrrG,SACA4oJ,mBAE9B,GAAIz1H,EAAUp1C,OAAS,EAAG,CACtB,MAAMqqK,EAAmBj1H,EAAUthC,IAAIvV,GAAQA,EAAK8b,SAC9CwP,EAAgB7N,IAASC,aAAaouJ,GACtClS,EAAU,IAAI2P,EAAa,UAAW,CAACj+I,IAC7CsuI,EAAQ77B,UAAYmuC,EAAa1mJ,GACjCwlJ,EAAW9G,WAAWtK,QAGtB1xI,EAAApmB,QAAGK,IAAI,eAAgB,uBACnB,qCA/PAoqK,CAAqB/mJ,EAAMwlJ,EAAYj8C,GAElCvpG,IAASk7I,EAAAzhB,GAAGmB,SAsM7B,SAA+B4qB,EAAwBj8C,GACnD,IAAIi3C,GAAS,EACb,MAEM8F,EAFM/8C,EAASrrG,SACC4oJ,mBACG/2J,IAAIvV,GAAQ,CAACA,EAAK6b,OAAQ7b,EAAKkc,SAGxD,GAAsB,IAAlB4vJ,EAAOrqK,OACP,OAGJ,IAAI6pB,EAAQ,GACRylE,EAAW,GAAK63E,EACpB,MAAQ5C,GAAQ,CACZ,MAAMx6I,EAAK/N,IAASC,aAAaouJ,GAGjC,GAFAxgJ,EAAQ,CAACE,GACTw6I,GAAS,IACHj1E,GAAY,EACd,MAIR,GAAIi1E,EAAQ,CACR,MAAM3xE,EAAW,IAAIk1E,EAAa,WAAYj+I,GAC9C0/I,EAAW9G,WAAW7vE,IA7NlBm4E,CAAsBxB,EAAYj8C,GAE7BvpG,IAASk7I,EAAAzhB,GAAGsB,QAkO7B,SAAiCyqB,EAAYj8C,GACzC,MAAMx5G,EAAMw5G,EAASrrG,SACfvM,EAAO5B,EAAI4B,KACXs1J,EAAUhvJ,IAASwL,cAAc,EAAG9R,EAAO,GACjD,IAAK,IAAIf,EAAI,EAAGA,EAAIb,EAAI6B,KAAMhB,IAC1Bb,EAAIugC,cAAc22H,EAASr2J,EAAGo+B,EAAArE,KAAKsB,OAtO/Bi7H,CAAwB1B,EAAYj8C,GAE/BvpG,IAASk7I,EAAAzhB,GAAGwB,MA2G7B,SAA2BuqB,EAAwBj8C,GAC/C,MAAMzjG,EAAkB8gJ,EAA2Br9C,GAAU,GAC7D,GAAIzjG,GAASA,EAAM7pB,OAAS,EAAG,CAC3B,MAAO0U,EAAGC,GAAKkV,EAAM,GACf44F,EAAwB5vC,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAAG,GACpDb,EAAMw5G,EAASrrG,SACfkhG,EAAsBrvG,EAAIo3J,kBAAkBzoD,GAE5C81C,EAAO,IAAIuP,EAAa,OAAQj+I,GAChCshJ,EAAU,GAChBhoD,EAAYr6G,QAAQ3M,IAChB,MAAMkW,EAAOoU,EAAApmB,QAAGsa,SAASxe,EAAG0tB,EAAM,IAC5B9X,EAAM0U,EAAApmB,QAAG+R,UAAUC,GACzB84J,EAAQp5J,GAAO5V,EAAE6C,cAAcC,YAEnCs5J,EAAKp1C,YAAcgoD,EACnB5B,EAAW9G,WAAWlK,IA1HlB6S,CAAkB7B,EAAYj8C,IAI9B1qH,EAAM,qCADeylC,MAAStkB,OAE5BmmJ,KAINA,EAAa,GACbtnK,aAAiBsnK,qCAhPrBmB,CAAoBlK,EAAI6H,EAAKC,EAAK37C,GAE3BA,EA+IX,SAASg+C,EAAa7jJ,EAAMC,EAAQ6jJ,GAChC,IAAIhqH,EAAQ57C,KAAK4C,MAAMyT,IAAS2L,UAAUF,EAAMC,IAShD,OANI65B,EAAQgqH,EAAU,EAClBhqH,EAAQgqH,EAAU,EAAI,EAEjBhqH,EAAQ,IACbA,EAAQ,GAELA,EAIX,SAASsoH,EAAkB2B,EAAO/jJ,EAAMC,EAAQ6jJ,EAASE,GACrD,MAAMC,EAAa,GACnB,IAAK,IAAI5vK,EAAI,EAAGA,EAAI0vK,EAAO1vK,IACvB4vK,EAAWrnK,KAAKinK,EAAa7jJ,EAAMC,EAAQ6jJ,IAG/C,MAAMI,EAAW,GACjB,IAAK,IAAI7vK,EAAI,EAAGA,EAAI2vK,EAAS3vK,IACzB6vK,EAAStnK,KAAKqnK,EAAW5vK,IAI7B,IAAK,IAAIA,EAAI2vK,EAAS3vK,EAAK0vK,EAAQC,EAAU3vK,IAAK,CAC9C,MAAM8vK,EAAUC,EAAYH,EAAY5vK,EAAG2vK,GAC3CE,EAAStnK,KAAKunK,GAGlB,IAAK,IAAI9vK,EAAK0vK,EAAQC,EAAU3vK,EAAI0vK,EAAO1vK,IAEnC6vK,EAAS3rK,OAAS0rK,EAAW1rK,QAC7B2rK,EAAStnK,KAAKqnK,EAAW5vK,IAIjC,OAAO6vK,EAGX,SAASE,EAAY72J,EAAKlZ,EAAG2vK,GACzB,MAAMtlG,EAAM,EAAIslG,EAAU,EAC1B,IAAI5tE,EAAM,EACV,IAAK,IAAItgG,EAAIzB,EAAI2vK,EAASluK,GAAKzB,EAAI2vK,EAASluK,IACxCsgG,GAAO7oF,EAAIzX,GAEf,OAAOoI,KAAK4C,MAAMs1F,EAAM13B,GA2D5B,SAASgkG,EACLpmJ,EAAcwlJ,EAAwBj8C,GAEtC,MAAMzrH,EAAO0nK,EAAWuC,UAClB38G,EAAQttD,EAAK+lK,eACb1uG,EAAMr3D,EAAKgmK,aACXkE,EAAU/vJ,IAASwL,cAAc2nC,EAAO+J,GACxCrvC,EAAQhoB,EAAKmqK,WAAWD,GAE9B,IAAIvrK,EAAO,KACX,OAAQujB,GACJ,KAAKk7I,EAAAzhB,GAAGiB,OAAQj+I,EAAO,eAAgB,MACvC,KAAKy+J,EAAAzhB,GAAGgB,OAAQh+I,EAAO,iBAAkB,MACzC,KAAKy+J,EAAAzhB,GAAGc,SAAU99I,EAAO,UAAW,MACpC,KAAKy+J,EAAAzhB,GAAGe,SAAU/9I,EAAO,YAAa,MACtC,QAASimB,EAAApmB,QAAGK,IAAI,eAAgB,oCACpBqjB,mBAIhBupG,EAASrrG,SAASsoJ,aAAa1gJ,EAAOkpB,EAAArE,KAAKoC,MAC3C,MAAMynH,EAAO,IAAIuP,EAAatnK,EAAMqpB,GACpC0uI,EAAKj8B,UAAYmuC,EAAa1mJ,GAC9BwlJ,EAAW9G,WAAWlK,GAwC1B,SAASkS,EAAa1mJ,GAClB,OAAQA,GACJ,KAAKk7I,EAAAzhB,GAAGe,SACR,KAAK0gB,EAAAzhB,GAAGgB,OACR,KAAKygB,EAAAzhB,GAAGoB,SAAU,OAAOn4H,EAAApmB,QAAGkP,WAC5B,KAAK0vJ,EAAAzhB,GAAGc,SACR,KAAK2gB,EAAAzhB,GAAGiB,OACR,KAAKwgB,EAAAzhB,GAAGqB,SAAU,OAAOp4H,EAAApmB,QAAGiP,WAC5B,QAAS,OAAOmX,EAAApmB,QAAGmP,eAkC3B,SAASm7J,EAA2Br9C,EAAiB2+C,GAAQ,GACzD,IAAI1H,GAAS,EACb,MAAMzwJ,EAAMw5G,EAASrrG,SAErB,IAAIooJ,EADcv2J,EAAIuhC,UACCvhC,IAAIvV,GAAQA,EAAK8b,SAExC,IAAK4xJ,EAAO,CACR,MAAMv2J,KAACA,EAAIC,KAAEA,GAAQ7B,EACrBu2J,EAASA,EAAOzhK,OAAOmhB,GACR,IAAVA,EAAG,IAAYA,EAAG,KAAQrU,EAAO,GACvB,IAAVqU,EAAG,IAAYA,EAAG,KAAQpU,EAAO,GAK1C,GAAsB,IAAlB00J,EAAOrqK,OACP,OAAO,KAGX,IAAI6pB,EAAQ,GACRylE,EAAW,GAAK63E,EACpB,MAAQ5C,GAAQ,CACZ,MAAM2H,EAASlwJ,IAASC,aAAaouJ,GACrC,IAAI/F,EAAgB,GACpB,IACIA,EAAMzxF,EAAA7pD,SAAS05F,aAAawpD,EAAO,GAAIA,EAAO,GAAI,GAEtD,MAAO7oJ,GACHoD,EAAApmB,QAAGgD,KAAKggB,GACRoD,EAAApmB,QAAGgD,KAAKgnK,GACRv2J,EAAIghC,oBAGR,IAAKm3H,EAAO,CACR,MAAMv2J,KAACA,EAAIC,KAAEA,GAAQ7B,EACrBwwJ,EAAMA,EAAI17J,OAAOmhB,GACF,IAAVA,EAAG,IAAYA,EAAG,KAAQrU,EAAO,GACvB,IAAVqU,EAAG,IAAYA,EAAG,KAAQpU,EAAO,GAmB1C,GAdA2uJ,EAAIx7J,QAASqjK,IACT,IAAK5H,GACGzwJ,EAAIwY,MAAM6/I,EAAM,GAAIA,EAAM,IAAK,CAClBr4J,EAAI65E,cAAcw+E,EAAM,GAAIA,EAAM,IACtCltK,YAAcioK,IACnBr9I,EAAQ,CAACsiJ,GACT5H,GAAS,EACTzwJ,EAAIugC,cAAc83H,EAAM,GAAIA,EAAM,GAAIp5H,EAAArE,KAAKsB,aAOrDs/C,GAAY,EACd,MAGR,OAAOzlE,EAyNX,SAASuiJ,EAAqBC,EAAYC,EAAYnyC,GAClD,MAAMzlH,EAACA,EAACC,EAAEA,GAAKwlH,EACT7nH,EAAK3M,KAAKiR,IAAIy1J,EAAK33J,GACnBnC,EAAK5M,KAAKiR,IAAI01J,EAAK33J,GACzBwlH,EAASljH,UAAYwP,EAAApmB,QAAGyW,aAAaxE,EAAIC,GACzC4nH,EAAShjH,SAAWsP,EAAApmB,QAAG6W,YAAY5E,EAAIC,GAEnCyJ,IAASoI,cAAgBqC,EAAApmB,QAAG4O,YAC5BkrH,EAASoyC,QAAS,EAClBpyC,EAASljH,WAAa,EACtBkjH,EAAShjH,UAAY,GAU7B,SAASutD,EAAKhwD,EAAW83J,EAAaC,GAClC,GAAIhoJ,OAAOC,UAAUhQ,GAAI,CACrB,MAAMtU,EAAMsU,EAAI83J,EAAMC,EAItB,OAHIrsK,GAAOonK,GACPvkK,QAAQG,sBAAsBhD,MAAQsU,MAAM83J,MAAQC,KAEjDrsK,EAMX,OAHIqmB,EAAApmB,QAAGK,IAAI,eAAgB,qCACWgU,KAE/B,KAOX,SAASiwD,EAAKhwD,EAAG+3J,EAAKC,GAClB,OAAIloJ,OAAOC,UAAU/P,GACVA,EAAI+3J,EAAMC,GAGjBlmJ,EAAApmB,QAAGK,IAAI,eAAgB,qCACWiU,KAE/B,MAGX,SAASi4J,EAAqB7oJ,EAAoB8oJ,EAAU1+D,GACxD,MACMkvD,EAAwB,CAC1BhhK,KAAM,YACNkxG,UAAW,EACXb,QAAS,CAAC,CAACrwG,KAAM,eAAgB+lG,QAAS,IAC1C4mE,IAAK6D,EAASn4J,EACdu0J,IAAK4D,EAASl4J,EAGlB+hH,aAAwB,CACpBo2C,yBAA0B,CAAC,CAACn1J,OAAQ,EAAGnB,MAVtB,CAAC0nH,MAAM,EAAMnX,IAAK,UAAWnjH,KAAM,CAAC,IAAK,IAAK,SAYnEmpK,EAAsBhpJ,EAAM8oJ,EAAUxP,GAEtC,MAAM2P,EAAW,CACb3wK,KAAM,eACNuiI,OAAQy+B,EAASz+B,OACjBC,OAAQw+B,EAASx+B,OACjBlnH,OAAQ,EACRsf,OAAQ,CAACkd,UAAW,IAGxBkpH,EAAS78B,gBAAgB,GAAGvpG,OAAS,CAACkd,UAAW,GACjDkpH,EAAS78B,gBAAgBn8H,KAAK2oK,GAC9B7+D,EAAS7E,SAAW,EACpB6E,EAAS5E,KAAKllG,KAAKg5J,GAGvB,SAAS4P,EAAyBlpJ,EAAoB8oJ,EAAU1+D,GAC5D,MACM++D,EAAc,CAAChvC,MAAM,EAAMnX,IAAK,cAClCnjH,KAAM,CAAC,IAAK,IAFC,KAGXy5J,EAAwB,CAC1BhhK,KAAM,eACNkxG,UAAW,EACXb,QAAS,CAAC,CAACrwG,KAAM,kBAAmB+lG,QAAS,IAC7C4mE,IAAK6D,EAASn4J,EACdu0J,IAAK4D,EAASl4J,GAElB0oJ,EAAS3mC,aAAe,CACpBy2C,+BAAgC,CAAC,CAACx1J,OAAQ,EAAGnB,MAAO02J,KAGxDH,EAAsBhpJ,EAAM8oJ,EAAUxP,GACtC,MAAM2P,EAAW,CACb3wK,KAAM,kBACNuiI,OAAQy+B,EAASz+B,OACjBC,OAAQw+B,EAASx+B,OACjBlnH,OAAQ,EACRsf,OAAQ,CAACkd,UAAW,IAGxBkpH,EAAS78B,gBAAgB,GAAGvpG,OAAS,CAACkd,UAAW,GACjDkpH,EAAS78B,gBAAgBn8H,KAAK2oK,GAC9B7+D,EAAS7E,SAAW,EACpB6E,EAAS5E,KAAKllG,KAAKg5J,GAGvB,SAAS+P,EAAuBrpJ,EAAoB8oJ,EAAU1+D,GAC1D,MACMk/D,EAAY,CAACnvC,MAAM,EAAMnX,IAAK,gBAChCnjH,KAAM,CAAC,IAAK,IAFC,KAGXy5J,EAAwB,CAC1BhhK,KAAM,iBACNkxG,UAAW,EACXb,QAAS,CAAC,CAACrwG,KAAM,oBAAqB+lG,QAAS,IAC/C4mE,IAAK6D,EAASn4J,EACdu0J,IAAK4D,EAASl4J,GAGlB0oJ,EAAS3mC,aAAe,CACpB42C,mCAAoC,CAAC,CAAC31J,OAAQ,EAAGnB,MAAO62J,KAE5DN,EAAsBhpJ,EAAM8oJ,EAAUxP,GAAU,GAChD,MAAM2P,EAAW,CACb3wK,KAAM,oBACNuiI,OAAQy+B,EAASz+B,OACjBC,OAAQw+B,EAASx+B,OACjBlnH,OAAQ,EACRsf,OAAQ,CAACkd,UAAW,IAGxBkpH,EAAS78B,gBAAgB,GAAGvpG,OAAS,CAACkd,UAAW,GACjDkpH,EAAS78B,gBAAgBn8H,KAAK2oK,GAC9B7+D,EAAS7E,SAAW,EACpB6E,EAAS5E,KAAKllG,KAAKg5J,GAKvB,SAASkQ,EAAkBxpJ,EAAoB8oJ,EAAU1+D,GACvCpqF,EAAK8F,MAAnB,MAIMppB,EAAQg6J,EAAA5e,MAAMmB,cAAc,QAC5BqgB,EAAWwJ,EAAA2G,SAASC,YAAYhtK,EAAOsjB,GAC7Cs5I,EAAS2L,IAAM6D,EAASn4J,EACxB2oJ,EAAS4L,IAAM4D,EAASl4J,EAExB0oJ,EAASlhC,UAAYp4G,EAAKvjB,KAC1BusK,EAAsBhpJ,EAAM8oJ,EAAUxP,GACtCA,EAAS/gC,UAAYv4G,EAAKu4G,WACnBtgH,IAASC,aAAawK,EAAApmB,QAAG+V,YAE5B2N,EAAKo/F,cACAk6C,EAAS7xC,aAAa6xC,EAAS7xC,WAAa,IACjD6xC,EAAS7xC,WAAWrI,YAAcp/F,EAAKo/F,aAG3ChV,EAAS7E,SAAW,EACpB6E,EAAS5E,KAAKllG,KAAKg5J,GAMvB,SAAS0P,EAAsBhpJ,EAAM8oJ,EAAU1yC,EAAUuzC,GAAO,GAC5D,MAAMlB,IAACA,EAAGE,IAAEA,EAAGhpD,GAAEA,EAAEC,GAAEA,EAAEmK,KAAEA,EAAIC,KAAEA,GAAQ8+C,EACjChjJ,EAAQ9F,EAAK8F,MAEb8jJ,EADU9jJ,EAAM7pB,OACM,EAG5B,IAAI4tK,EAAQlpG,EAAK76C,EAAM8jJ,GAAW,GAAInB,EAAK1+C,GACvC+/C,EAAQlpG,EAAK96C,EAAM8jJ,GAAW,GAAIjB,EAAK3+C,GAY3C,GAXK2/C,IACHE,EAAQlpG,EAAK76C,EAAM,GAAG,GAAI2iJ,EAAK1+C,GAAQ,EACvC+/C,EAAQlpG,EAAK96C,EAAM,GAAG,GAAI6iJ,EAAK3+C,IAE7B8/C,GAASpG,IAEToG,GAAS,GAKT5G,EAAkB3xI,KAAKvR,EAAKvjB,MAAO,CACnC,IAAIstK,EAAQppG,EAAK76C,EAAM,GAAG,GAAI2iJ,EAAK1+C,GAC/BigD,EAAQppG,EAAK96C,EAAM,GAAG,GAAI6iJ,EAAK3+C,GAC9B2/C,IACHI,EAAQppG,EAAK76C,EAAM8jJ,GAAW,GAAInB,EAAK1+C,GAAQ,EAC/CigD,EAAQppG,EAAK96C,EAAM8jJ,GAAW,GAAIjB,EAAK3+C,IAEzC,MAAMigD,EAAQ7zC,EAAS5sB,UAAY,EAEnC4sB,EAASqG,gBAAkB,CAAC,CACxBnkI,KAAM89H,EAASztB,QAAQshE,GAAO3xK,KAC9BuiI,OAAQkvC,EACRjvC,OAAQkvC,EACRp2J,OAAQ,IAIhBwiH,EAASzlH,EAAIgvG,EACbyW,EAASxlH,EAAIgvG,EACbwW,EAASyE,OAASgvC,EAClBzzC,EAAS0E,OAASgvC,EAClBjrK,WAAemhB,EAAKvjB,SAASkjH,KAAMC,OAAQiqD,KAASC,KAKxD,SAASI,EAAwBlqJ,EAAM8oJ,EAAU1+D,GAC7C,MAAMq+D,IAACA,EAAGE,IAAEA,EAAGhpD,GAAEA,EAAEC,GAAEA,EAAEmK,KAAEA,EAAIC,KAAEA,GAAQ8+C,EAGjC9iJ,EAFQhG,EAAK8F,MAEF,GACjB,GAAIpD,EAAApmB,QAAG6D,cAAc,CAAC6lB,IAAM,CACxB,MAAMjnB,EAAM,wBAA0Bwa,KAAKC,UAAUwG,GACrD0C,EAAApmB,QAAGK,IAAI,eAAgB,0BAA2BoC,GAEtD,MAAM8qK,EAAQlpG,EAAK36C,EAAG,GAAIyiJ,EAAK1+C,GACzB+/C,EAAQlpG,EAAK56C,EAAG,GAAI2iJ,EAAK3+C,GAGzBovC,EAAc0J,EAAA2G,SAASU,eAFf,qBAGV5G,GACA1kK,EAAM,2CAmCd,SAA6Bu3H,EAAU0yC,GACnC,MAAO37C,EAAMV,GAAQ29C,EAAkBtB,GACvCrwK,OAAO4kF,OAAO+4C,EACV,CAACzlH,EAAGw8G,EAAMv8G,EAAG67G,EAAMoO,OAAQwoC,EAAavoC,OAAQwoC,IACpDpkK,QAAQU,IAAI,+BAAgCutH,EAAMV,GAClDvtH,QAAQU,IAAI,oCAAqCyjK,EAAaC,GAvC1D+G,CAAoBjR,EAAa0P,IAGjCrwK,OAAO4kF,OAAO+7E,EACV,CAACzoJ,EAAGgvG,EAAI/uG,EAAGgvG,EAAIib,OAAQgvC,EAAO/uC,OAAQgvC,IAE9CjrK,iBAAqB8gH,KAAMC,UAAWiqD,KAASC,KAE/C1Q,EAAYv9B,cAAe,EAC3Bu9B,EAAYx2D,OAAO,GAAGi1B,cAAgB,EACtCuhC,EAAYx2D,OAAO,GAAGvE,QAAU,EAChC,MAAMisE,EAAalR,EAAYx2D,OAAO,GAAGvE,QAAU,EACnD+6D,EAAYx2D,OAAO,GAAGm0B,mBAAqB,CACvC/T,IAAK,aACLnjH,KAAM,CAAC,IAAK,KAGhBu5J,EAAYx2D,OAAO,GAAGvpG,OAAS,CAC3BsL,MAAO,CACH,CACIrM,KAAM,qBACNsb,OAAQ02J,GAEZ,CACIhyK,KAAM,wBACNsb,OAAQ02J,KAIpBlgE,EAASlF,WAAa,EACtBkF,EAASjF,QAAQ7kG,KAAK84J,GAc1B,SAASgR,EAAkBtB,GACvB,MAAMpE,KAACA,EAAIC,KAAEA,EAAI4F,YAAEA,EAAWC,YAAEA,GAAe1B,EAG/C,MAAO,CAFMlnK,KAAK4C,MAAM+lK,EAAc7F,EAAO,GAChC8F,EAAc7F,EAAO,GAyBtC,SAAS8F,EAAqB95J,EAAGC,EAAG8zJ,EAAMC,GACtC,MAAM+F,EAAK/5J,EAAI+zJ,EAETpsG,EAAK1nD,EAAI+zJ,EAEf,MAAO,CAAC+F,EADGpyG,EAAKqsG,EAAO,EAFZ+F,EAAKhG,EAAO,EAGHpsG,GAGxB,SAASqyG,EAAW3kJ,GAChB,IAAKrV,EAAGC,GAAKoV,EAKb,OAJU,IAANrV,IAAUA,EAAI,GACdA,IAAM8yJ,EAAc,IAAI9yJ,GAAK,GACvB,IAANC,IAAUA,EAAI,GACdA,IAAM8yJ,EAAc,IAAI9yJ,GAAK,GAC1B,CAACD,EAAGC,GA/mCf/Y,EAAAwsK,WAyFAxsK,EAAAmrK,UAAUqB,SAAWA,EAUrBxsK,EAAAmrK,UAAUtB,gBAAkB,EAACn6I,EAAO,MAEhC,MAAMusG,EAAYivC,EAAA1H,MAAMqG,gBAAgBn6I,GAExC,OAAO1vB,EAAAmrK,UAAU4H,qBAAqB92C,EAAWvsG,KAOrD1vB,EAAAmrK,UAAU4H,qBAAuB,EAAC92C,EAAWvsG,KACzC,MAAMo1I,EAAW,IAAI0H,EAerB,OAdA1H,EAAS2H,UAAY/8I,EAAKsjJ,QAAU,IACpClO,EAAS4H,UAAYh9I,EAAKujJ,QAAU,IAEpCnO,EAAS6H,QAAUj9I,EAAKi9I,SAAW7H,EAAS2H,UAAYb,EACxD9G,EAAS8H,QAAUl9I,EAAKk9I,SAAW9H,EAAS4H,UAAYb,EAExD/G,EAAS+H,KAAO9iK,KAAK4C,MAAMm4J,EAAS2H,UAAYxwC,EAAUhwB,YAC1D64D,EAASgI,KAAO/iK,KAAK4C,MAAMm4J,EAAS4H,UAAYzwC,EAAUjwB,YAE1DiwB,EAAU6oC,SAAWA,EAErB6G,EAAej8I,EAAKi8I,cAAgBA,EAWxC,SAAuBpG,EAAIT,GACvB,MAAM2H,UAACA,EAASC,UAAEA,EAASG,KAAEA,EAAIC,KAAEA,EAAIH,QAAEA,EAAOC,QAAEA,GAAW9H,EAEvD19I,EAAQm+I,EAAGt5D,WACXnlF,EAAQy+I,EAAGv5D,WAEXknE,GADY,IAAIztE,EAAAtK,cACIC,YAAYvwE,EAAApmB,QAAG6M,YAAam7J,EAAWC,GASjE,IAAK,IAAI5zJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,MAAM24G,EAAW47C,EAAe/H,EAAIzsJ,EAAGC,EAAG8zJ,EAAMC,GAC1Cz/I,EAAKvU,EAAI+zJ,EACTv/I,EAAKvU,EAAI+zJ,EACf71F,EAAA7pD,SAAS0C,YAAYojJ,EAASxhD,EAAUrkG,EAAIC,GAKpD,MAAMoC,EAAkB1vB,EAAAmrK,UAAUgI,gBAAgB5N,EAC9Cn+I,EAAON,EAAO6lJ,EAASC,GAK3B,OA88BJ,SAA2BrH,EAAI2N,EAAgBxjJ,EAAMo1I,GAEjD,MAAOsO,EAAcC,GAoDzB,SAA2B9N,EAAIT,GAC3B,MAAMsO,EAAerpK,KAAK4C,MAAM44J,EAAGt5D,WAAa,EAAI,GAAK2/D,EACnDyH,EAAevO,EAAS4H,UAAY3iK,KAAK4C,MAAMk/J,EAAc,GACnE,MAAO,CAACuH,EAAcC,GAvDeC,CAAkB/N,EAAIT,GAGrDyO,EAAehO,EAAGhB,kBAAkBlB,EAAAzhB,GAAGc,UAAU,GAEjD8wB,EADWjO,EAAG1zC,YAAY0hD,GACPhP,kBAAkB,WAAW,GAChDyI,EAAawG,EAAQC,gBACpBC,EAAMC,GAAQ7O,EAAS8O,YAAYL,EAAcvG,GAQxD,GAAIrB,EAAc,CAKd,MAAMrvF,EAAO4Q,EAAAzX,KAAKgkB,uBAAuBy5E,EAAQ7sJ,SAC7C+sJ,EAAcC,EAAcK,EAAMC,EAPzB,GASO,IAAhBr3F,EAAKl4E,QACLymB,EAAApmB,QAAGK,IAAI,eAAgB,oBACnB,mCAERsoF,EAAA+F,QAAQC,aAAa8/E,EAAQ7sJ,SAAUi2D,GAI3C,MAAMu3F,EAAYL,EAAQvlJ,MAAM,GAC1B6lJ,EAAmBhP,EAAS8O,YAAYL,EAAcM,GACtDE,EAAkBxO,EAAGhB,kBAAkBlB,EAAAzhB,GAAGiB,QAAQ,GAGlDmxB,EAFczO,EAAG1zC,YAAYkiD,GACJxP,kBAAkB,gBAAgB,GAC7BkP,eAC9BQ,EAAgBnP,EAAS8O,YAAYG,EACvCC,GAEJ,GAAIrI,EAAc,CAId,MAAMuI,EAAgBhnF,EAAAzX,KAAKgkB,uBAAuBy5E,EAAQ7sJ,SACtDytJ,EAAiB,GAAIA,EAAiB,GACtCG,EAAc,GAAIA,EAAc,GAhCvB,GAiCb7mF,EAAA+F,QAAQC,aAAa8/E,EAAQ7sJ,SAAU6tJ,IAjgC3CC,CAAkB5O,EAAI2N,EAASxjJ,EAAMo1I,GAE9B,CAACoO,EAASxjJ,GAxCS0kJ,CAAcn4C,EAAW6oC,KAqiBvD9kK,EAAAmrK,UAAUgI,gBAAkB,SACxB5N,EAAImN,EAAaC,EAAahG,EAASC,GAEvC,MAAMtvC,EAAY,CACd78H,KAAM,YACN4xG,OAAQ,EACRz4C,KAAM,CAAC,CACHn5D,KAAM,qBACN+sB,KAAMm/I,EAASl/I,KAAMm/I,EACrByH,MAAO,GACP/mE,QAAS,GACTtW,SAAU,GACV2W,KAAM,GACNN,UAAW,EACXG,WAAY,EACZE,QAAS,KAGX6E,EAAW+qB,EAAU1jE,KAAK,GAIhC,IAAK84G,IAAgBC,EAAa,CAC9B,MAAMzrK,kBAAsBwrK,SAAmBC,IAC/C9nJ,EAAApmB,QAAGK,IAAI,YAAa,+CACaoC,KAGrC,MAAM2lK,EAAO6F,EAAc/F,EACrBG,EAAO6F,EAAc/F,EAE3B5lK,kBAAsB0rK,eAAyB/F,KAC/C3lK,kBAAsB2rK,eAAyB/F,KAC/C5lK,WAAe6lK,wBACf7lK,WAAe8lK,wBAIVjkJ,OAAOC,UAAU+jJ,IAClBhiJ,EAAApmB,QAAGK,IAAI,YAAa,mCACC+nK,gBACP6F,eAAyB/F,KAEtC9jJ,OAAOC,UAAUgkJ,IAClBjiJ,EAAApmB,QAAGK,IAAI,YAAa,mCACCgoK,gBACP6F,eAAyB/F,KAM3C,IAAK,IAAI9zJ,EAAI,EAAGA,EAAI45J,EAAa55J,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAI45J,EAAa55J,IAAK,CAGlC,MAAM63J,EAAM93J,EAAI+zJ,EACViE,EAAM/3J,EAAI+zJ,EAGVhlD,EAAK/9G,KAAK4C,MAAMmM,EAAI+zJ,GACpB9kD,EAAKh+G,KAAK4C,MAAMoM,EAAI+zJ,GAEpBp7C,EAAW6zC,EAAG1zC,YAAY,CAAC/4G,EAAGC,IAC9Bm5G,EAAOR,EAASM,UAChBG,EAAOT,EAASO,UAEhBg/C,EAAW,CAACpE,OAAMC,OAAM4F,cAAaC,cACvC75J,IAAGC,IAAG63J,MAAKE,MAAKhpD,KAAIC,KAAI2J,WAAUQ,OAAMC,SAErCs+C,EAAIC,GAAM6B,EAAkBtB,GAC7BvM,EAAyBhzC,EAAS4iD,cAExC1zK,OAAO6qB,KAAKi5I,GAAUx3J,QAAQtI,IACW8/J,EAAS9/J,GACjCsI,QAASib,IAQlB,GAPwBA,EAAK8F,OAGzBpD,EAAApmB,QAAGK,IAAI,YAAa,6CACW4c,KAAKC,UAAUwG,MAGhC,YAAdA,EAAKvjB,KACLosK,EAAqB7oJ,EAAM8oJ,EAAU1+D,QAEpC,GAAkB,iBAAdpqF,EAAKvjB,KACVysK,EAAyBlpJ,EAAM8oJ,EAAU1+D,QAExC,GAAkB,mBAAdpqF,EAAKvjB,KACV4sK,EAAuBrpJ,EAAM8oJ,EAAU1+D,QAEtC,GAAkB,cAAdpqF,EAAKvjB,KACV+sK,EAAkBxpJ,EAAM8oJ,EAAU1+D,QAEjC,GAAI64D,EAAY1xI,KAAKvR,EAAKvjB,MAC3B+sK,EAAkBxpJ,EAAM8oJ,EAAU1+D,QAEjC,GAAkB,YAAdpqF,EAAKvjB,KAAoB,CAC9B,MAAM2vK,EAASpsJ,EAAK8F,MAEpB,IAAI+jJ,EAAQlpG,EAAKyrG,EAAO,GAAG,GAAI3D,EAAK1+C,GAChC+/C,EAAQlpG,EAAKwrG,EAAO,GAAG,GAAIzD,EAAK3+C,IACnC6/C,EAAOC,GAASa,EAAW,CAACd,EAAOC,IACpC,MAAMuC,EAAQ3V,EAAA5e,MAAMqB,oBAAoB,WAElCigB,EAAc0J,EAAA2G,SAASU,eAAekC,GAC5C5zK,OAAO4kF,OAAO+7E,EACV,CAACzoJ,EAAGgvG,EAAI/uG,EAAGgvG,EAAIib,OAAQgvC,EAAO/uC,OAAQgvC,EAClC7E,IAAKt0J,EAAGu0J,IAAKt0J,IACrBw5F,EAASlF,WAAa,EACtBmjE,EAAqBC,EAAIC,EAAInP,GAC7BhvD,EAASjF,QAAQ7kG,KAAK84J,QAErB,GAAkB,aAAdp5I,EAAKvjB,KAAqB,CAC/B,MAAM6vK,EAAStsJ,EAAK8F,MAEd+jJ,EAAQlpG,EAAK2rG,EAAO,GAAG,GAAI7D,EAAK1+C,GAChC+/C,EAAQlpG,EAAK0rG,EAAO,GAAG,GAAI3D,EAAK3+C,GAChCuiD,EAAQ7V,EAAA5e,MAAMmB,cAAc,YAE5BugB,EAAYsJ,EAAA2G,SAAS+C,gBAAgBD,GAC3C9zK,OAAO4kF,OAAOm8E,EACV,CAAC7oJ,EAAGgvG,EAAI/uG,EAAGgvG,EAAIib,OAAQgvC,EAAO/uC,OAAQgvC,EAClC7E,IAAKt0J,EAAGu0J,IAAKt0J,IAErBy3J,EAAqBC,EAAIC,EAAI/O,GAC7BpvD,EAAS/E,YAAc,EACvB+E,EAASvb,SAASvuF,KAAKk5J,OAEJ,eAAdx5I,EAAKvjB,OACVoC,EAAM,+BACNqrK,EAAwBlqJ,EAAM8oJ,EAAU1+D,QAQ5D,OA+RJ,SAA2BgzD,EAAIhzD,GAC3B,MAAMqiE,EAAUrP,EAAGt5D,WACb4oE,EAAUtP,EAAGv5D,WACb6gE,EAAO+H,EAAUriE,EAAS/kF,KAC1Bs/I,EAAO+H,EAAUtiE,EAAS9kF,KAEhC,IAAK,IAAI3U,EAAI,EAAGA,EAAIy5F,EAAS/kF,KAAM1U,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIw5F,EAAS9kF,KAAM1U,IAAK,CACpC,MAAMoT,EAAOymJ,EAAqB95J,EAAGC,EAAG8zJ,EAAMC,GACxCrrK,EAAMqX,EAAI,IAAMC,EAChBurJ,EAAYiB,EAAGgI,SAASphJ,EAAK,GAAIA,EAAK,IAC5ComF,EAAS8hE,MAAM5yK,GAAO6iK,GA3S9BwQ,CAAkBvP,EAAIhzD,GACf+qB,+UCxjCX,MAAAzyG,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GAEAqgC,EAAArgC,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACAq3C,EAAAr3C,EAAA,GACA+yC,EAAA/yC,EAAA,GACAogC,EAAApgC,EAAA,GAEMi1K,EAAe,CACjBC,SAAS,EACTC,iBAAiB,EACjBC,WAAW,EACXC,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,YAAY,GAMhB,IAAIC,EAAe30K,OAAO6qB,KAAKspJ,GAE/B,MAAaS,UAAsB1wC,EAAA1tG,WAcxBlM,iBAAiBuqJ,EAAiBj0J,GACrC,IAAKuzJ,EAAahzK,eAAe0zK,GAAU,CACvC,MAAMC,EAAc,SAAWD,EAAQ91I,aAIvC,OAHA61I,EAAc1zK,UAAU4zK,GAAel0J,EACvCuzJ,EAAaU,IAAW,EACxBF,EAAe30K,OAAO6qB,KAAKspJ,IACpB,EAMX,OAHIlqJ,EAAApmB,QAAGK,IAAI,gBAAiB,sBACV2wK,sBAEX,EAMJvqJ,uBAAuB+e,GAC1B,MAAM0rI,EAAY1rI,EAAQhoB,OAC1B,IAAK0zJ,EAAW,CACZ,MAAMzuK,EAAM,uCACZ2jB,EAAApmB,QAAGK,IAAI,oBAAqB,sDACYoC,KAE5C,OAAOsuK,EAAcI,iBAAiBD,EAAW1rI,EAAQo+C,YAGtDn9D,wBAAwByqJ,EAAWE,GACtC,IAAIF,EAAU5zK,eAAe,UAkBzB,OAAO4zK,EAlB6B,CACpC,MAAMhzK,EAAOgzK,EAAU1zJ,OACvB,IAAIomE,EAAawtF,EACZxtF,IACDA,EAAa,CAAC,SAAU,QAAS,WAAY,aAE5CjyE,MAAMC,QAAQgyE,KAAcA,EAAa,CAACA,IAE/C,IAAK,IAAInoF,EAAI,EAAGA,EAAImoF,EAAWjkF,OAAQlE,IAAK,CACxC,GAAIyC,EAAKc,QAAQ4kF,EAAWnoF,IACxB,OAAOyC,EAAKgB,QAAQ0kF,EAAWnoF,IAAI,GAElC,GAAI,OAAOw5B,KAAK2uD,EAAWnoF,IAC5B,OAAOyC,EAAKS,eAOxB,OAAO,KAKX8nB,YAAYiN,EAAqBC,GAC7B2B,MAAMlP,EAAApmB,QAAGqgB,IAAIgxJ,QAAS39I,EAAWC,GACjCv1B,KAAKkzK,QAAU,GACfn1K,OAAO6qB,KAAKspJ,GAAc7nK,QAAQuoK,IAC9B,GAAIV,EAAaU,GAAU,CACvB,MAAMC,EAAc,SAAWD,EAAQ91I,aACvC98B,KAAKkzK,QAAQN,GAAW5yK,KAAK6yK,GAAah0K,KAAKmB,SAKpDqoB,aAAazC,GACFA,EAAIwvF,QAAQ,WACpB/qG,QAAQ8oK,IACV,MAAMC,EAAUD,EAAQE,gBACxB,GAAID,GAAuB,KAAZA,EACX,GAAIpzK,KAAKkzK,QAAQh0K,eAAek0K,GAAU,CACtCpzK,KAAKszK,oBAAoB1tJ,EAAKutJ,GAC9B,MAAM9xG,EAAKrhE,KAAKkzK,QAAQE,GAASxtJ,EAAKutJ,GACtCnzK,KAAKuzK,kBAAkB3tJ,EAAKutJ,EAAS9xG,QAGrCr5C,EAAApmB,QAAGK,IAAI,gBAAiB,0BACbmxK,2BAAiCV,UAIhD1qJ,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,kCAER2jB,EAAI8T,OAAOy5I,KAIZ9qJ,oBAAoBzC,EAAKutJ,GAC5B,MAAM/rI,EAAU+rI,EAAQ1yF,UACpBr5C,EAAQosI,UACRxrJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,IAAK+iC,EAAQosI,WAI/CnrJ,kBAAkBzC,EAAKutJ,EAAS9xG,GACnC,MAAMj6B,EAAU+rI,EAAQ1yF,UACpBr5C,EAAQqsI,QACRzrJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,IAAK+iC,EAAQqsI,SAE9CpyG,GAAMj6B,EAAQssI,YACd1rJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,IAAK+iC,EAAQssI,cAE7CryG,GAAMj6B,EAAQusI,YACf3rJ,EAAApmB,QAAG2lB,SAAS,CAACznB,KAAM8lB,EAAI6I,UAAWpqB,IAAK+iC,EAAQusI,aAUhDtrJ,cAAcy+G,EAAQqsC,GACzB,MAAM/rI,EAAU+rI,EAAQ1yF,UAClBglD,EAAYktC,EAAciB,gBAAgBxsI,GAC1C5B,EAAWmzG,EAAYvxG,EAASq+F,GAEtC,IAAIoT,EAAY,KAMhB,GALI1uH,EAAUjrB,eAAesmC,KACzBqzG,EAAY,IAAI1uH,EAAUqb,IAI1B4B,EAAQkiH,QAAS,CACjB,MAAMA,EAAUliH,EAAQkiH,QACxBvrJ,OAAO6qB,KAAK0gI,GAASj/I,QAAQk/I,IACzB,GAAkC,mBAAvB1Q,EAAU0Q,GAAyB,CAC1C,MAAMsqB,EAAavqB,EAAQC,GACrBuqB,EAAWC,EAAqBF,GACtCh7B,EAAU0Q,GAASuqB,OAElB,CACD,MAAMl1J,EAAOC,KAAKC,UAAU+5H,GAC5B7wH,EAAApmB,QAAGK,IAAI,YAAa,gBACVsnJ,aAAmB3qI,QAKrCi6H,GAAaA,EAAUxjH,WACvBwjH,EAAUxjH,UAAUyxG,GAGxB,MAAMniD,EAAMrnD,EAAAwE,KAAK5nB,SAASktB,EAAQpF,UAC5BgyI,EAAW5sI,EAAQ8+C,UAEzB,OADA/7D,EAAUu6D,oBAAoB+gD,EAAWoT,EAAWl0D,EAAKqvF,IAClD,EAIJ3rJ,iBAAiBy+G,EAAQqsC,GAC5B,MAAM/rI,EAAU+rI,EAAQ1yF,UAClB3gF,EAAOm0K,EAAoB7sI,GAE5BA,EAAQ8sI,aACTlsJ,EAAApmB,QAAGK,IAAI,iBAAkB,mBACrB,oCAAsC4c,KAAKC,UAAUsoB,IAG7D,IAAI+qF,EAAU90F,EAAA5G,QAAQ93B,OAAOyoC,EAAQ8sI,aACrC,IAAK/hD,EAAS,CAIVA,EADeniF,EAAAvS,YAAYmO,YACVd,aAAa1D,EAAQ8sI,aAG1C,GAAI/hD,EAAS,CACT,MAAOl8G,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,QAC5BjE,EAAQ+uH,EAAOp9H,WACfyqK,EAAgBr0K,EAAKmgB,YAAYkyG,EAAQ3xH,WAC/C,QAAK2zK,GAAiBA,EAAc5yK,OAAS6lC,EAAQgtI,cAC5Cr8J,EAAMoW,WAAWgkG,EAASl8G,EAAGC,IAIC,mBAAxBi8G,EAAQkiD,aACfliD,EAAQkiD,YAAYv0K,IAEjB,IANH0E,QAAQC,MAAM,yBAA2B2iC,EAAQ8sI,cAC1C,IAWd,CACD,MAAM7vK,EAAM,0BAA4Bwa,KAAKC,UAAUsoB,GACvDpf,EAAApmB,QAAGK,IAAI,iBAAkB,mBAAoBoC,GAEjD,OAAO,EAIJgkB,oBAAoBy+G,EAAQqsC,GAC/B,MAAM/rI,EAAU+rI,EAAQ1yF,UAClB3gF,EAAOm0K,EAAoB7sI,GAE5BA,EAAQ8sI,aACTlsJ,EAAApmB,QAAGK,IAAI,iBAAkB,sBACrB,oCAAsC4c,KAAKC,UAAUsoB,IAG7D,MAAMktI,EAAax0K,EAAKmgB,YAAYmnB,EAAQ8sI,aAC5C,GAAII,EAAW/yK,OAAS,EAAG,CACvB,MAAMgzK,EAAYD,EAAW,IACtBr+J,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,QAElC,GADc8qH,EAAOp9H,WACXwkB,cAAcqmJ,EAAWt+J,EAAGC,GAIlC,MAHwC,mBAA7Bq+J,EAAUC,gBACjBD,EAAUC,eAAe10K,IAEtB,EAGf,OAAO,EAIJuoB,sBAAsBy+G,EAAQqsC,GACjC,MAAM/rI,EAAU+rI,EAAQ1yF,UAClBglD,EAAYktC,EAAciB,gBAAgBxsI,GAC1C5B,EAAWmzG,EAAYvxG,EAASq+F,GAEtC,GAAIA,GACIA,EAAUv8H,IAAIs8B,GAAW,CACzB,MAAMpf,EAAOq/G,EAAUvnI,IAAIsnC,GACrBvrB,EAAYmM,EAAKghB,EAAQlpC,OACzBI,EAAQ8oC,EAAQ9oC,MAChBw1K,EAAWC,EAAqBz1K,GAEtC,OADA8nB,EAAKghB,EAAQusB,KAAK15C,EAAY65J,IACvB,EAGf,OAAO,EAIJzrJ,gBAAgBy+G,EAAQqsC,GAC3B,MAAM/rI,EAAU+rI,EAAQ1yF,UAClB3gF,EAAOm0K,EAAoB7sI,GAG3B7gB,EADSypB,EAAAvS,YAAYmO,YACLd,aAAa1D,EAAQqtI,YAE3C,GAAIluJ,EAAQ,CACR,MAAOtQ,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,QAElC,GADc8qH,EAAOp9H,WACXssB,UAAUzP,EAAQtQ,EAAGC,GAAI,CAC/B,GAAIkxB,EAAQpF,SAAU,CAClB,MAAM4zG,EAAa,IAAIzrH,EAAU67D,QAC3BhkD,SAACA,GAAYoF,EACnBwuG,EAAWvlF,YAAYruB,GACvBzb,EAAOjG,IAAIs1H,GAIf,MAAM8+B,EAAc,IAAIvqJ,EAAUgxD,QAGlC,OAFAu5F,EAAYt5F,WAAW0rD,GACvBvgH,EAAOjG,IAAIo0J,IACJ,GAGf,OAAO,EAGJrsJ,oBAAoBy+G,EAAQqsC,GAC/B,MAAM/rI,EAAU+rI,EAAQ1yF,UAClB3gF,EAAOm0K,EAAoB7sI,GAC3ButI,EAAWvtI,EAAQutI,SACnBC,EAASxtI,EAAQwtI,QAAUtgI,EAAArE,KAAKsB,MACtC,OAAIzxC,EAAKS,cAAcC,YAAcm0K,IACjC70K,EAAK4uB,YAAYkmJ,IACV,GAKRvsJ,iBAAiBy+G,EAAQqsC,GAC5B,MAAM/rI,EAAU+rI,EAAQ1yF,UAClBglD,EAAYktC,EAAciB,gBAAgBxsI,GAC1C5B,EAAWmzG,EAAYvxG,EAASq+F,GAEtC,QAAIA,EAAUv8H,IAAIs8B,KACV4B,EAAQitF,IACRoR,EAAUpwB,UAAU7vE,GAGpBigG,EAAU/rG,OAAO8L,IAEd,IAWnB,SAASmzG,EAAYvxG,EAASq+F,GAC1B,MAAMjgG,EAAW4B,EAAQxpC,KACzB,IAAK4nC,EAAU,CAEX,IAAI87D,EAAW,gCADFziF,KAAKC,UAAUsoB,GAExBq+F,IAAYnkC,GAAY,cAAgBziF,KAAKC,UAAU2mH,IAC3Dz9G,EAAApmB,QAAGK,IAAI,gBAAiB,wBACpBq/F,GAER,OAAO97D,EAAS1I,aArUpB3/B,EAAAw1K,gBAsTAA,EAAcT,aAAeA,EA2C7B,MAAM6B,EAAuB,SAASc,GAClC,GAAI7uJ,OAAOC,UAAU4uJ,GACjB,OAAOA,EAEN,GAA2B,iBAAhBA,EAA0B,CACtC,MAAMC,EAAQ9uJ,OAAO+uJ,WAAWF,GAChC,IAAK7uJ,OAAOgvJ,MAAMF,GACd,OAAOA,EAGf,OAAOD,GAGX,SAASZ,EAAoB7sI,GACzB,GAAIA,EAAQhoB,OAAQ,CAChB,MAAM5I,EAAY4wB,EAAQhoB,OAC1B,GAAI5I,EAAU4I,OACV,OAAO5I,EAAU4I,OAGzB,MAAMR,EAAOC,KAAKC,UAAUsoB,GAG5B,OAFApf,EAAApmB,QAAGK,IAAI,oBAAqB,sBACxB,qCAAuC2c,GACpC,kVC9YX,MAAAoJ,EAAAC,EAAAhrB,EAAA,IACAszG,EAAAtzG,EAAA,IACAyzG,EAAAt8E,EAAAn3B,EAAA,KACAigC,EAAA9I,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,KAKaE,EAAA47E,KAAY,GACzB,MAAMonB,EAAQn4E,EAAApmB,QAAGuT,MAEXw7F,EAAYD,EAAKA,KAAKC,UAEtBskE,EAAiB,CACnBr3K,KAAM,cACN6pC,OAAQkpE,GAaZxzG,EAAA47E,KAAKm8F,sBAAwB,EAACC,EAAIC,EAAWC,KACzC,MAAMhtB,EAASrgI,EAAApmB,QAAG4Y,eAAe26J,GAC3BG,EAAQ,IAAIp4I,EAAKyH,SACjB4wI,EAAgBvtJ,EAAApmB,QAAG+Y,aAAay6J,EAAW/sB,GACjDitB,EAAM1uK,SAAS2uK,GACfF,EAAQ5tK,WAAWumB,QAAQsnJ,KAM/B,MAAaE,EASTntJ,cACIroB,KAAKqmD,QAAU,GACfrmD,KAAKulB,OAAS,KAIlB8C,KAAIzqB,KAACA,EAAI6pC,OAAEA,IACPznC,KAAKqmD,QAAQzgD,KAAK,CAAChI,OAAM6pC,WACrBA,GAAUA,EAAO4+D,WACjB5+D,EAAO4+D,UAAUrmG,MAIzBqoB,eACIroB,KAAKqmD,QAAU,GAGnBh+B,UAAU9C,GACNvlB,KAAKulB,OAASA,EAGlB8C,YACI,OAAOroB,KAAKulB,OAGhB8C,qBA+BI,MA9B0B,CACtBquH,SAAU,KAAM,EAChBhiC,QAAS,KACL,MAAM+gE,EAAU,CAAClkE,IAAK,GAAIC,KAAM,IAWhC,OAVAxxG,KAAKqmD,QAAQh8C,QAAQ,CAACqrK,EAAKr4K,KACvBo4K,EAAQllE,EAAAE,KAAKM,YAAY1zG,IAAMq4K,EAAI93K,OAEnCoC,KAAKuxG,MACLkkE,EAAQlkE,IAAMvxG,KAAKuxG,KAEnBvxG,KAAKwxG,OACLikE,EAAQjkE,KAAOxxG,KAAKwxG,MAExBikE,EAAW,EAAIR,EAAer3K,KACvB63K,GAEXziE,OAAQtB,IACJ,MAAMN,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,GAAIN,EAAYpxG,KAAKqmD,QAAQ9kD,OAAQ,CACjC,MAAMjD,EAAQ0B,KAAKqmD,QAAQ+qD,GAAW3pE,OACtC,OAAInpC,IAAUqyG,GACNryG,EAAM04I,mBACC14I,EAAM04I,qBAGd14I,EAEX,OAAOqyG,KA9DvBxzG,EAAAq4K,WAqEAr4K,EAAA47E,KAAKy8F,SAAWA,EAGhB,MAAajuF,UAAkBiuF,EAI3BntJ,cACI6O,QACA,MAAMy+I,EAAY,CACd/3K,KAAM,mBACN6pC,OAAQznC,KAAK41K,cAAc/2K,KAAKmB,OAE9B61K,EAAY,CACdj4K,KAAM,mBACN6pC,OAAQkpE,GAEZ3wG,KAAKsgB,IAAIq1J,GACT31K,KAAKsgB,IAAIu1J,GAGbxtJ,cAAcsgE,GACV3oF,KAAK81K,WAAantF,EAGtBtgE,UAAUjJ,GACN,MAAMupE,EAAQ3oF,KAAK81K,WACnB91K,KAAK+1K,QAAU32J,EACf,MACM2kH,EAAY/jI,KAAK81K,WAAW53K,IAAI,cACtC,GAAK6lI,EAAUC,mBAOV,CACDhkI,KAAKuxG,IAAM,IACJ5oB,EAAMjnF,6CACNqiI,EAAUQ,aACb,2BAEJvkI,KAAKg2K,eACL,MAAMC,EAAY,CACdr4K,KAAM,mBACN6pC,OAAQznC,KAAKk2K,eAAer3K,KAAKmB,OAErCA,KAAKsgB,IAAI21J,QAjBTj2K,KAAKuxG,IAAM,IACJ5oB,EAAMjnF,+CACNqiI,EAAUQ,aACb,2BAkBZl8G,gBACQL,EAAApmB,QAAG6D,cAAc,CAACzF,KAAK+1K,QAAS/1K,KAAK81K,cACrC9tJ,EAAApmB,QAAGK,IAAI,YAAa,gBAChB,yCAER,MAAMk0K,EAAgB,IAAIhsJ,EAAUq/D,UACpC2sF,EAAc3xF,UAAUxkF,KAAK+1K,SAC7BI,EAAc9xC,SAASrkI,KAAK81K,YAC5B91K,KAAK+1K,QAAQz1J,IAAI61J,GAGrB9tJ,iBACI,MAAM+tJ,EAAa,IAAIjsJ,EAAUo/D,eACjC6sF,EAAW/xC,SAASrkI,KAAK81K,YACzB91K,KAAK+1K,QAAQz1J,IAAI81J,IA/DzBj5K,EAAAoqF,YAmEApqF,EAAA47E,KAAK2P,MAAQnB,EAGb,MAAapO,UAAoBq8F,EAK7BntJ,cACI6O,QACAl3B,KAAKq2K,gBAAkB,CACnB3/B,SAAU,KAAM,EAChBnlC,IAAK,CAAC,kCACNmD,QAAS,KAEL,MAAMuiC,EAAU1mC,EAAAE,KAAKM,YAAYjoF,MAAM,EAAG,GACpC2sJ,EAAU,GAKhB,OAJAt1E,EAAM91F,QAAQ,CAACiL,EAAM4J,KACjBu2J,EAAQx+B,EAAQ/3H,IAAUihF,EAAMjhF,GAChCu2J,EAAQx+B,EAAQ/3H,UAAgBlf,KAAKs2K,MAAMp3J,aAExCu2J,GAGXziE,OAAQtB,IACJ,MAAMN,EAAYb,EAAAE,KAAKO,YAAYU,GACnC,GAAIN,EAAYjR,EAAM5+F,OAAQ,CAC1B,MAAMg1K,EAAUp2E,EAAMiR,GAChBolE,EAAOx2K,KAAKs2K,MAAMllE,GACxB,OAAOpxG,KAAKy2K,cAAcF,EAASC,GAEvC,OAAO,OAGfx2K,KAAKy2K,cAAgBz2K,KAAKy2K,cAAc53K,KAAKmB,MAIjDqoB,WAAW46F,GACPjjH,KAAKijH,QAAUA,EAKnB56F,UAAUjJ,GACNpf,KAAK+1K,QAAU32J,EACfpf,KAAKs2K,MAAQ,GACbn2E,EAAM91F,QAAQiL,IACV,MAAM05I,EAAU,MAAQ15I,EACxBtV,KAAKs2K,MAAM1wK,KAAK,IAAMwZ,EAAOlhB,IAAI,SAAS8wJ,QAIlD3mI,qBACI,OAAOroB,KAAKq2K,gBAGhBhuJ,cAAckuJ,EAASC,GAiCnB,MAhCW,KACP,MAAMrB,EAAKntJ,EAAApmB,QAAGgY,kBAAkB48J,GAC1BE,EAAS12K,KAAK+1K,QAAQr0K,UAE5B,IAAKsmB,EAAApmB,QAAGyY,cAAcra,KAAK+1K,QAASZ,GAAK,CACrC,MAAM9wK,KAASqyK,+BAEf,YADA1uJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAME,KAAK+1K,QAAQtnJ,UAAWpqB,QAI1ClH,EAAA47E,KAAKm8F,sBAAsBC,EAAIn1K,KAAK+1K,QAAS/1K,KAAKijH,SAGtD,MAAM0zD,EAAc32K,KAAK+1K,QAAQ73K,IAAI,SAC/B04K,EAAe52K,KAAKijH,QAAQ/kH,IAAI,SAChC8wJ,EAAU,MAAQunB,EAClBhtB,EAAU,MAAQgtB,EAClBM,EAAYF,EAAY3nB,KACxB8nB,EAAaF,EAAa5nB,KAE1B+nB,EAAS/2K,KAAKijH,QAAQvhH,UAC5B,GAAIm1K,EAAYC,EAAY,CACxB,MAAME,EAAeH,EAAY,EACjCF,EAAYptB,GAASytB,GACrB,MAAM3yK,KAAS0yK,YAAiBR,QAAcG,IAC9C1uJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAME,KAAK+1K,QAAQtnJ,UAAWpqB,YAEzC,CACD,MAAMA,KAAS0yK,0CACf/uJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAME,KAAK+1K,QAAQtnJ,UAAWpqB,WApF1DlH,EAAAg8E,cA2FAh8E,EAAA47E,KAAKC,QAAUG,EAGf,MAAa89F,UAAmBzB,EAK5BntJ,cACI6O,QACAl3B,KAAKs2K,MAAQ,CACTh9J,EAAG,GACHC,EAAG,GACHC,EAAG,IAEPxZ,KAAKq2K,gBAAkB,CACnB3/B,SAAU,KAAM,EAEhBhiC,QAAS,KACL1sF,EAAApmB,QAAGslB,QAAQ,2CACX,MACMgwJ,EADal3K,KAAKm3K,OAAOj5K,IAAI,cACTs9G,QACpBi6D,EAAU,GACZyB,GAAU,KACVzB,EAAQ,GAAK,gCAEbyB,GAAU,KACVzB,EAAQ,GAAK,gCAEbyB,GAAU,KACVzB,EAAQ,GAAK,2CAGrBziE,OAAQtB,IACJ,MAAMN,EAAoBb,EAAAE,KAAKO,YAAYU,GAC3C,OAAO1xG,KAAKo3K,eAAehmE,KAGnCpxG,KAAKo3K,eAAiBp3K,KAAKo3K,eAAev4K,KAAKmB,MAInDqoB,UAAU8uJ,GACNn3K,KAAKm3K,OAASA,EAGlB9uJ,qBACI,OAAOroB,KAAKq2K,gBAGhBhuJ,eAAenJ,GACX,MAAMs3J,EAAex2K,KAAKs2K,MAAMp3J,GAahC,MAZW,KACP,GAAK8I,EAAApmB,QAAGyY,cAAcra,KAAK+1K,QAASS,GAGpC,OAAQt3J,GACJ,KAAK,EAAGlf,KAAKq3K,UAAU,IAAK,MAC5B,KAAK,EAAGr3K,KAAKq3K,UAAU,IAAK,MAC5B,KAAK,EAAGr3K,KAAKs3K,2BAQzBjvJ,UAAUkvJ,GACav3K,KAAKm3K,OAAOj5K,IAAI,cACxB4hF,OAAOy3F,GACDv3K,KAAK+1K,QAAQ73K,IAAI,cACzB2hF,MAAM03F,GAGnBlvJ,yBAGkBroB,KAAK+1K,QAAQzyI,WACrB8mH,mBAFS,KAzEvBjtJ,EAAA85K,aA+EA95K,EAAA47E,KAAKy+F,OAASP,qKCrWd,MAAAjvJ,EAAAC,EAAAhrB,EAAA,IACA8sB,EAAA9sB,EAAA,IACAmgC,EAAAngC,EAAA,IAIaE,EAAAitB,YAAc,WACvBL,EAAA8qD,cAAcr3E,KAAKwC,KAAM,eAEzB,IAAI47E,EAAO,KACP67F,EAAe,KACnBz3K,KAAKm1B,UAAY,KAAMymD,GACvB57E,KAAKq1B,UAAY7Z,KAAQogE,EAAOpgE,IAoBhCxb,KAAKo5E,YAAY,QAlBF,KACX,MAAMxzD,EAAM5lB,KAAKk1E,YACjBuiG,EAAe7xJ,EAAI0d,WACftjC,KAAKm1B,YAAYpY,WACjB6I,EAAI8xJ,eAAc,GAGlB9xJ,EAAI+xJ,SAAS,IAAIv6I,EAAAw6I,iBAAiBhyJ,MAY1C5lB,KAAKo5E,YAAY,WARC,KACVp5E,KAAKm1B,YAAYpY,YACjB/c,KAAKk1E,YAAYwiG,eAAc,GAEnC13K,KAAKk1E,YAAYyiG,SAASF,MAOlCzvJ,EAAApmB,QAAG0D,QAAQnI,EAAAitB,YAAaL,EAAA8qD,eAExB13E,EAAAitB,YAAYnrB,UAAUwnB,OAAS,WAC3B,MAAMriB,EAAM2lB,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAIhD,OAHIgoB,EAAApmB,QAAG2e,cAAcvgB,KAAKm1B,eACtB/wB,EAAIixB,UAAYrN,EAAApmB,QAAG6U,UAAU,SAAUzW,KAAKm1B,cAEzC/wB,+UCzCX,MAAA4jB,EAAAC,EAAAhrB,EAAA,IACA07G,EAAA17G,EAAA,IACAkiH,EAAAliH,EAAA,IACA46K,EAAA56K,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KAIM8xI,YAACA,EAAWL,eAAEA,GAAkB/1B,EAAA+0B,WAEzBvwI,EAAA+mJ,YAAmB,GAEnB/mJ,EAAA26K,cAAgB,EAAC7tK,EAAkB7F,KAC5C,MAAMk1G,KAACA,GAAQl1G,EACT2zK,EAAY,IAAI54D,EAAApG,UAAUgC,OAAOzB,GAEvC,GADAy+D,EAAUr3F,QAAQ,CAAC85B,SAAUp2G,EAAIoX,IAAK49F,KAAMh1G,EAAIg1G,OAC3CnvG,EAAM8S,WAYN,CACD,MAAMi7J,EAAY,IAAI7tJ,EAAU+4D,YAC1B/9E,EAAO,CACTq1G,SAAUp2G,EAAIoX,KAElBw8J,EAAUt3F,QAAQv7E,GAClB8E,EAAMqW,IAAI03J,OAlBS,CACnB,MAAMl5I,EAAQ70B,EAAMq5B,WACpB,GAA+B,mBAAnBxE,EAAa,QAAkB,CACvC,MAAMo6E,EAAUp6E,EAAMq6E,UACtBD,EAAQ++D,cACR/+D,EAAQg/D,WAAWH,OAElB,CACD,MAAM1zK,EAAM,0BAA4Bwa,KAAKC,UAAU7U,GACvD+d,EAAApmB,QAAG+C,KAAK,kBAAmB,gBAAiBN,OAYxDlH,EAAA+mJ,YAAY4zB,cAAgB36K,EAAA26K,cAEf36K,EAAAg7K,gBAAkB,EAAC/4J,EAAuBg6F,EAAgBj0G,KACnE,GAAI0yK,EAAArsD,WAAWpsG,GAAS,CACpB,MAAM24J,EAAY,IAAI54D,EAAApG,UAAUgC,OAAO51G,EAAKm0G,MAC5Cy+D,EAAUr3F,QAAQ,CAAC85B,SAAUr1G,EAAKqW,IAAK49F,SACvC,MACMF,EADQ95F,EAAOkkB,WACC61E,UACtBD,EAAQ++D,cACR/+D,EAAQg/D,WAAWH,MAId56K,EAAA+vJ,gBAAkB,EAAC9tI,EAAmBja,KAC/C,GAAI0yK,EAAArsD,WAAWpsG,GAAS,CACpB,MAAMg6F,EAAO,IAAIT,EAAAE,KAAK86B,OAAOv0H,EAAQja,EAAKqW,KAC1Cre,EAAAg7K,gBAAgB/4J,EAAQg6F,EAAMj0G,MAGtChI,EAAA+mJ,YAAYgJ,gBAAkB/vJ,EAAA+vJ,gBAEjB/vJ,EAAAswJ,gBAAkB,EAACruI,EAAmBja,KAC/C,GAAI0yK,EAAArsD,WAAWpsG,GAAS,CACpB,MAAMg6F,EAAO,IAAIT,EAAAE,KAAKe,YAAYx6F,EAAQja,EAAKy2G,OAC/Cz+G,EAAAg7K,gBAAgB/4J,EAAQg6F,EAAMj0G,MAGtChI,EAAA+mJ,YAAYuJ,gBAAkBtwJ,EAAAswJ,gBAEjBtwJ,EAAAwwJ,gBAAkB,EAACvuI,EAAmBja,KAC/C,GAAI0yK,EAAArsD,WAAWpsG,GAAS,CACpB,MAAMg6F,EAAO,IAAIT,EAAAE,KAAKq7B,QAAQ90H,EAAQja,EAAK2B,MAC3C3J,EAAAg7K,gBAAgB/4J,EAAQg6F,EAAMj0G,MAGtChI,EAAA+mJ,YAAYyJ,gBAAkBxwJ,EAAAwwJ,gBAGjBxwJ,EAAAmwJ,gBAAkB,EAACluI,EAAmBja,KAC/C,GAAI0yK,EAAArsD,WAAWpsG,GAAS,CACpB,MAAM5D,IAACA,GAAOrW,EACd,IAAKia,EAAO3U,QAAQ+Q,GAAM,CACR4D,EAAOkkB,WACC61E,UACd8+D,kBAIpB96K,EAAA+mJ,YAAYoJ,gBAAkBnwJ,EAAAmwJ,gBAM9B,MAAa8qB,UAAsBz/D,EAAAi1B,SAE/BvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,iBAGVxR,WAEH,MAAMyW,EAAQ9+B,KAAKiK,MAAMq5B,WACnBp5B,EAAY40B,EAAM22D,eACV32D,EAAM26E,cAAcvvG,IAM9BlK,KAAKwwI,WAAW,IAAI6nC,EAAgBr4K,KAAKiK,QACzCjK,KAAKs0B,IAAI,uCALTt0B,KAAKwwI,WAAW,IAAI8nC,EAAkBt4K,KAAKiK,QAC3CjK,KAAKs0B,IAAI,wCAMbt0B,KAAKgjF,OAAS+rD,EAGX1mH,UAIH,OAHAroB,KAAKs0B,IAAI,mBACTt0B,KAAKsvI,qBACLtvI,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,QA3BpB7lF,EAAAi7K,gBA+BAj7K,EAAA+mJ,YAAYkP,UAAYglB,EAOxB,MAAaG,UAAuB5/D,EAAAi1B,SAEhCvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,kBAGVxR,YAQAA,UAGH,OAFAroB,KAAKsvI,qBACLtvI,KAAKgjF,OAAS0rD,EACP1uI,KAAKgjF,QAlBpB7lF,EAAAo7K,iBAqBAp7K,EAAA+mJ,YAAYs0B,WAAaD,EAIzB,MAAaE,EAUTpwJ,YAAYtQ,EAAOiyJ,EAAMC,GACrB,MAAM50J,EAAM0C,EAAMyL,UACXvM,EAAMC,GAAQ,CAAC7B,EAAI4B,KAAM5B,EAAI6B,MAEpC,IAAIwhK,EAAWxxK,KAAK4C,MAAMmN,EAAO+yJ,GAC7B2O,EAAWzxK,KAAK4C,MAAMoN,EAAO+yJ,GAC7BhzJ,EAAO+yJ,GAAS,KAAM0O,EACtBxhK,EAAO+yJ,GAAS,KAAM0O,EAE1B34K,KAAK44K,KAAO,GACZ,IAAK,IAAI3iK,EAAI,EAAGA,EAAIyiK,EAAUziK,IAAK,CAC/BjW,KAAK44K,KAAK3iK,GAAK,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIyiK,EAAUziK,IAC1BlW,KAAK44K,KAAK3iK,GAAGC,GAAK,CAACyO,KAAM,CAAC1O,EAAGC,IAIrClW,KAAK04K,SAAWA,EAChB14K,KAAK24K,SAAWA,EAChB34K,KAAKgqK,KAAOA,EACZhqK,KAAKiqK,KAAOA,EACZjqK,KAAK64K,SAAW3xK,KAAK4C,MAAMkgK,EAAO,GAClChqK,KAAK84K,SAAW5xK,KAAK4C,MAAMmgK,EAAO,GAG/B5hJ,iBAAiB0wJ,GACpB,MAAOC,EAAOC,GAASF,EAGvB,MAAO,CAFGC,EAAQh5K,KAAKgqK,KAAOhqK,KAAK64K,SACzBI,EAAQj5K,KAAKiqK,KAAOjqK,KAAK84K,UAMhCzwJ,UAAU6wJ,GACb,MAAOjjK,EAAGC,GAAKgjK,EAGf,MAAO,CAFOhyK,KAAK4C,MAAMmM,EAAIjW,KAAKgqK,MACpB9iK,KAAK4C,MAAMoM,EAAIlW,KAAKiqK,OAI/B5hJ,eAAeiD,EAAI1sB,EAAK+lB,GAC3B,MAAOq0J,EAAOC,GAASj5K,KAAKm5K,UAAU7tJ,GACtCtrB,KAAK44K,KAAKI,GAAOC,GAAOr6K,GAAO+lB,EAG5B0D,cAAc0wJ,EAAQn6K,EAAK+lB,GAC9B,MAAOq0J,EAAOC,GAASF,EACvB/4K,KAAK44K,KAAKI,GAAOC,GAAOr6K,GAAO+lB,EAG5B0D,OAAO0wJ,EAAQn6K,GAClB,MAAOo6K,EAAOC,GAASF,EACvB,OAAwC,IAAjC/4K,KAAK44K,KAAKI,GAAOC,GAAOr6K,GAG5BypB,QAAQ0wJ,EAAQn6K,GACnB,MAAOo6K,EAAOC,GAASF,EACvB,OAAO/4K,KAAK44K,KAAKI,GAAOC,GAAO/5K,eAAeN,GAG3CypB,cAAc0wJ,GACjB,MAAOC,EAAOC,GAASF,EACvB,OAAO/4K,KAAK44K,KAAKI,GAAOC,GAGrB5wJ,eAAeiD,GAClB,MAAO0tJ,EAAOC,GAASj5K,KAAKm5K,UAAU7tJ,GACtC,OAAOtrB,KAAK44K,KAAKI,GAAOC,GAGrB5wJ,aACH,IAAK,IAAInS,EAAI,EAAGA,EAAIlW,KAAK24K,SAAUziK,IAAK,CACpC,IAAIuO,EAAM,KACV,IAAK,IAAIxO,EAAI,EAAGA,EAAIjW,KAAK04K,SAAUziK,IAC/BwO,GAAO5F,KAAKC,UAAU9e,KAAK44K,KAAK3iK,GAAGC,IAAM,MAE7C8R,EAAApmB,QAAGgD,KAAK6f,GACRuD,EAAApmB,QAAGgD,KAAK,IAAIirD,OAAOprC,EAAIljB,WAxFnCpE,EAAAs7K,YAiGA,MAAaH,UAA0B3/D,EAAAi1B,SAKnCvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,qBAEb,MAAM9hB,EAAQ9N,EAAMP,WACpB1J,KAAKo5K,SAAW,IAAIX,EAAU1gK,EAAO,GAAI,IACzC,MAAO9B,EAAGC,GAAKlW,KAAKiK,MAAM2R,QAC1B5b,KAAKo5K,SAASC,eAAe,CAACpjK,EAAGC,GAAI,QAAQ,GAG7ClW,KAAKs5K,WAAa,GAGfjxJ,WACHroB,KAAKu5K,kBACLv5K,KAAKgjF,OAAS+rD,EAGX1mH,UAUH,OATAroB,KAAKsvI,qBACDtvI,KAAKs5K,WAAa,IAChBt5K,KAAKs5K,YAGPt5K,KAAKu5K,kBACLv5K,KAAKs5K,WAAa,IAEtBt5K,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,OAIT36D,kBACH,MAAMyW,EAAQ9+B,KAAKiK,MAAMq5B,WAEnBk2I,EAAS,CAAC,EAAG,GACbzhK,EAAQ/X,KAAKiK,MAAMP,YAClBuM,EAAGC,GAAKlW,KAAKiK,MAAM2R,QAEpBsR,EAAUnV,EAAMyL,SAASvM,KAAO,EAChCkW,EAAUpV,EAAMyL,SAAStM,KAAO,EAElCjB,EAAIiX,EAAUssJ,EAAO,GAAK,EACrBvjK,EAAIiX,IAAUssJ,EAAO,IAAM,GAChCtjK,EAAIiX,EAAUqsJ,EAAO,GAAK,EACrBtjK,EAAIiX,IAAUqsJ,EAAO,IAAM,GAEpCx5K,KAAKs0B,+BAA+BklJ,KAGpC,MAAM71K,EAASm7B,EAAM26I,iBACrBz5K,KAAKs0B,OAAO3wB,EAAOpC,oCACnBoC,EAAO0G,QAAQJ,IACX,MAAMmvG,EAAO,IAAIT,EAAAE,KAAKg3B,eAAe5lI,EAAOuvK,GAC5Cr8K,EAAA26K,cAAc7tK,EAAO,CAACuR,IAAKxb,KAAKiK,MAAOqvG,KAAM,EAAKF,WAGtDp5G,KAAKs0B,IAAI,wBAA0B3wB,EAAOpC,OAAS,WAEnD,MAAMm4K,EAAW,IAAI/gE,EAAAE,KAAKg3B,eAAe7vI,KAAKiK,MAAOuvK,GACrDx5K,KAAKwxI,oBACLxxI,KAAKwwI,WAAWkpC,IAlExBv8K,EAAAm7K,oBAsEAn7K,EAAA+mJ,YAAYy1B,cAAgBrB,EAG5B,MAAaD,UAAwB1/D,EAAAi1B,SAGjCvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,mBAGVxR,WAEHroB,KAAKs0B,IAAI,2BACT,MAAMwK,EAAQ9+B,KAAKiK,MAAMq5B,WACnBF,EAAUtE,EAAMi7E,iBAEtB,GAAuB,IAAnB32E,EAAQ7hC,OAAe,OAEZu9B,EAAM26I,iBACdpvK,QAAQJ,IACX,MAAM2vK,EAAY,IAAIjhE,EAAAE,KAAKe,YAAY3vG,EAAOm5B,EAAQ,IACtDjmC,EAAA26K,cAAc7tK,EAAO,CAACuR,IAAKxb,KAAKiK,MAAOqvG,KAAM,EAAKF,KAAMwgE,MAG5D55K,KAAK47G,MAAQx4E,EAAQ,GACrB,MAAMg2E,EAAO,IAAIT,EAAAE,KAAKe,YAAY55G,KAAKiK,MAAOm5B,EAAQ,IACtDpjC,KAAKwwI,WAAWp3B,GAIhBp5G,KAAKgjF,OAAS+rD,EAGX1mH,UAIH,OAHAroB,KAAKsvI,qBACLtvI,KAAKs0B,IAAI,0BACTt0B,KAAKgjF,OAAShjF,KAAKuwI,kBACZvwI,KAAKgjF,QAnCpB7lF,EAAAk7K,kBAuCAl7K,EAAA+mJ,YAAY21B,YAAcxB,EAI1B,MAAayB,UAAyBnhE,EAAAi1B,SAElCvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,qBAJrB18B,EAAA28K,mBAiBA38K,EAAA+mJ,YAAY61B,aAAeD,EAG3B,MAAaE,UAAoBrhE,EAAAi1B,SAE7BvlH,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,gBAJrB18B,EAAA68K,cAQA78K,EAAA+mJ,YAAYoP,QAAU0mB,8UC5YtB,MAAAhyJ,EAAAC,EAAAhrB,EAAA,IACAg9K,EAAAh9K,EAAA,IA+hCQE,EAAAsmC,MA/hCAw2I,EAAAx2I,MACR,MAAAtZ,EAAAiK,EAAAn3B,EAAA,IACAqgC,EAAArgC,EAAA,IACA+yC,EAAA/yC,EAAA,GACAmgC,EAAAngC,EAAA,IACAogB,EAAApgB,EAAA,GACAw5B,EAAArC,EAAAn3B,EAAA,IAKMwrB,EAAMpL,EAAAC,OAAOC,UAEbo5H,gBAACA,EAAeb,iBAAEA,EAAgBI,kBAAEA,EAAiBG,gBACvDA,EAAed,gBAAEA,EAAeE,qBAAEA,EAAoBI,gBACtDA,GAAmBokC,EAAAx2I,MAIvBw2I,EAAAx2I,MAAMy2I,YAAc,WAChBD,EAAAx2I,MAAMs1G,gBAAgBv7I,KAAKwC,KAAM,cAAe,GAChDA,KAAKi5I,aAAa,aAGtBjxH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMy2I,YAAaD,EAAAx2I,MAAMs1G,iBAEpCkhC,EAAAx2I,MAAMk7C,MAAQ,WACVs7F,EAAA75F,UAAU5iF,KAAKwC,KAAM,SACrBA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,aAEtCqpB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMk7C,MAAOs7F,EAAA75F,WAExB65F,EAAAx2I,MAAMk7C,MAAM1/E,UAAU25I,KAAO,SAASzzI,GAClC,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GACvC2zI,EAAY,IAAI3uH,EAAU22D,UAChC18E,EAAI8sD,SAAWlxD,KAAKm6K,cAAct7K,KAAKmB,MACvC84I,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjBmhC,EAAAx2I,MAAMk7C,MAAM1/E,UAAUk7K,cAAgB,SAASr6K,GAC3C,MAAM6D,EAAS7D,EAAK67B,oBACpB,GAAIh4B,GAAUA,EAAOpC,OAAS,EAAG,CAC7B,MAAMq9E,EAAcj7E,EAAO,GAC3B,IAAIy2K,EAAa,EAAIp6K,KAAKi4I,kBAAkB,GAC5CmiC,GAAcp6K,KAAKk4I,mBAAmB,YAAa,GAEnD,MAAMmiC,EAAY,IAAIlwJ,EAAUw0D,MAChC07F,EAAUC,eAAe17F,EAAY9nE,SACrCujK,EAAUtjI,SAASqjI,GAEnB,MAAMz1F,EAAM3kF,KAAK0sH,cACjBviG,EAAUu6D,oBAAoB1kF,KAAK21I,YAAa0kC,EAAW11F,GAE3D,MAAM+wD,EAAS11I,KAAK21I,YACdtxI,KAASqxI,EAAOh0I,oBAAoBk9E,EAAYl9E,YACtDsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM41I,EAAOjnH,UAAWpqB,UAI5C41K,EAAAx2I,MAAMk7C,MAAM1/E,UAAU+3I,mBAAqB,SAAS/sI,GAEhD,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,qCAIhBgwK,EAAAx2I,MAAMk7C,MAAM1/E,UAAU48G,kBAAoB,SAAS12G,EAAM6pB,GACrD,OAAO8mH,EAAiB3wI,EAAM6pB,IAIlCirJ,EAAAx2I,MAAMwyH,cAAgB,WAClBgkB,EAAA75F,UAAU5iF,KAAKwC,KAAM,mBACrBA,KAAKu3F,MAAMt5D,OAASX,EAAAwE,KAAKnjC,OAAO,YAEpCqpB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMwyH,cAAegkB,EAAA75F,WAEhC65F,EAAAx2I,MAAMwyH,cAAch3J,UAAU25I,KAAO,SAASzzI,GAC1C,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAI66B,WAAajX,EAAApmB,QAAGoS,IAAIO,IACxBnQ,EAAI65B,OAASj+B,KAAK0lI,YAClB,MAAMoT,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjBmhC,EAAAx2I,MAAMwyH,cAAch3J,UAAU+3I,mBAAqB,SAAS/sI,GAExD,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,qCAIhBgwK,EAAAx2I,MAAMwyH,cAAch3J,UAAU48G,kBAAoB,SAAS12G,EAAM6pB,GAC7D,OAAO8mH,EAAiB3wI,EAAM6pB,IAOlCirJ,EAAAx2I,MAAM82I,YAAc,WAChBN,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,cAAe,GAC7CA,KAAK04I,YAAY,iBACV14I,KAAKu3F,MAAMv1D,UAGtBha,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM82I,YAAaN,EAAAx2I,MAAM80G,cAEpC0hC,EAAAx2I,MAAM82I,YAAYt7K,UAAU25I,KAAO,SAASzzI,GACxC80K,EAAAx2I,MAAM80G,aAAat5I,UAAU25I,KAAKp7I,KAAKwC,KAAMmF,GAC7C,MAAMqW,IAACA,GAAOrW,EACIqW,EAAItd,IAAI,aACEuiF,UAElBvvB,SAAWlxD,KAAKw6K,gBAAgB37K,KAAKmB,OAGnDi6K,EAAAx2I,MAAM82I,YAAYt7K,UAAUu7K,gBAAkB,SAAS16K,GACnD,MAAMw1B,EAAY,CAAC,QAAS,QAAS,SAAU,cACzCogH,EAAS11I,KAAK21I,YACpB,IAAK71I,EAAKwiG,WAAa,OAEvB,MAEMz+F,EAFQ/D,EAAK4a,WACMwL,KAAK7oB,GAAK,SAASw5B,KAAKx5B,EAAEqE,YAGnD,GAAImC,EAAOqF,IAAI,UAAf,CACI,MAAM7E,KAASqxI,EAAOh0I,8CACtBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM41I,EAAOjnH,UAAWpqB,aAIxC,GAAIR,EAAQ,CACR,MACMoG,EADS+lC,EAAAvS,YAAYmO,YACNX,YAAYpnC,EAAO86I,gBACxC10I,EAAMqW,IAAI,IAAI6J,EAAU4yD,QACxBznD,EAAUjrB,QAAQ2xF,IACd,MAAM51E,EAAOviB,EAAO3F,IAAI89F,GACxB/xF,EAAMyvB,OAAOsiE,GACb51E,EAAKu1E,aAAa1xF,KAItBA,EAAM/L,IAAI,SAASq9E,QAAQ,WAC3BvzD,EAAApmB,QAAGC,aAAammB,EAAApmB,QAAGiL,WAAY5C,EAAM/L,IAAI,SAASwD,UAC9C,qBAEJ,MAAOuU,EAAGC,GAAKrS,EAAO+X,QAChB7D,EAAQ29H,EAAOhsI,WACfgrK,EAAc,IAAIvqJ,EAAUgxD,QAClCu5F,EAAYt5F,WAAWs6D,GACvBzrI,EAAMqW,IAAIo0J,GACVzqK,EAAMqW,IAAI,IAAI6J,EAAU4yD,QAEpBhlE,EAAM+C,WAAWjX,EAAQoS,EAAGC,KAC5B6B,EAAMgW,SAAS9jB,EAAOgM,EAAGC,GACzBjM,EAAM87G,UAAU2vB,MAK5BukC,EAAAx2I,MAAM82I,YAAYt7K,UAAU48G,kBAAoB,EAAC12G,EAAM6pB,KACnD,MAAM0mH,EAASvwI,EAAK8E,MAEdwwK,EADQr9I,EAAAyK,MAAMi8E,oBAAoB4xB,GACNvrI,OAAOzM,GACrCA,EAAE4kG,YAAc5kG,EAAEgd,WAAWwL,KAAK7oB,GACd,WAAhBA,EAAEmD,YAIV,GAA2B,IAAvBi6K,EAAYl5K,OAAe,OAAO,EACtC,MAAMzB,EAAO2oB,EAAIjL,aAAai9J,GAE9B,OADA5kC,EAAgBH,EAAQ51I,EAAMkvB,IACvB,IAOXirJ,EAAAx2I,MAAMq5C,OAAS,WACXm9F,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,SAAU,GACxCA,KAAK04I,YAAY,UACjB14I,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,YAElCqB,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBknH,EAAkB/wI,EAAM6pB,KAGvChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMq5C,OAAQm9F,EAAAx2I,MAAM80G,cAM/B0hC,EAAAx2I,MAAM8gD,UAAY,WACd01F,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,YAAa,GAC3CA,KAAK04I,YAAY,aACjB14I,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,cAElCqB,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,KAC5B,IAAIrtB,EAAMu0I,EAAkB/wI,EAAM6pB,GAIlC,OAHKrtB,IACDA,EAAMm0I,EAAiB3wI,EAAM6pB,IAE1BrtB,KAGfqmB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM8gD,UAAW01F,EAAAx2I,MAAM80G,cAKlC0hC,EAAAx2I,MAAM8gD,UAAUtlF,UAAU25I,KAAO,SAASzzI,GACtC80K,EAAAx2I,MAAM80G,aAAat5I,UAAU25I,KAAKp7I,KAAKwC,KAAMmF,GAC7C,MAAMqW,IAACA,GAAOrW,EACd,GAAIqW,EAAK,CACL,MACM8/F,EADY9/F,EAAItd,IAAI,aACEuiF,WACtB59C,QAACA,GAAWy4E,EACZo/D,EAAkB73I,EAAQzc,KAEhC,GAAkC,cAA9Bs0J,EAAgBl6K,UAA2B,CAC3C,MAAMwhC,SAACA,GAAYa,EACb83I,EAAeD,EAAgB/zK,QAErC,IAAIm1G,EAAqB,CACrBxoG,IAAK,CAAC,EAAG,GAAIkI,IAAKxb,KAAKq3I,QAASzzG,MAAO,OAE3Ck4E,EAAU66B,EAAgB32I,KAAM87G,IACxBj5E,QAAU,CAACzc,KAAMu0J,EAAc34I,YACvCs5E,EAAUs/D,aAAe96K,KACrB46K,EAAgBrlJ,UAAU7Z,GAC1Bk/J,EAAgBl2F,UAAU1kF,EAAK67B,oBAAoB,MAEvDmgF,EAAQ8+D,aAAe,MACnBD,EAAatlJ,UAAUqlJ,EAAgBvlJ,aACvCwlJ,EAAan2F,UAAUk2F,EAAgBxxF,eAG3C,MAAM4vD,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQo7B,GAClB32G,EAAKqW,IAAI8E,IAAIw4H,QAGhB,CACD,MAAMl6H,EAAOC,KAAKC,UAAU3Z,GAC5B6iB,EAAApmB,QAAGK,IAAI,kBAAmB,OACtB,yBAA2B2c,KAQvCq7J,EAAAx2I,MAAMy3C,UAAY,WACd++F,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,YAAa,GAC3CA,KAAK04I,YAAY,aACjB14I,KAAKqwD,YAAY/yB,EAAAwE,KAAKnjC,OAAO,YAE7BqB,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrB8mH,EAAiB3wI,EAAM6pB,KAGtChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMy3C,UAAW++F,EAAAx2I,MAAM80G,cAElC0hC,EAAAx2I,MAAMo3I,cAAgB,WAClBZ,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,gBAAiB,GAC/CA,KAAK04I,YAAY,QACjB14I,KAAKqwD,YAAY/yB,EAAAwE,KAAKnjC,OAAO,YAE7BqB,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrB8mH,EAAiB3wI,EAAM6pB,KAGtChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMo3I,cAAeZ,EAAAx2I,MAAM80G,cAMtC0hC,EAAAx2I,MAAM0zH,WAAa,WACf8iB,EAAAx2I,MAAM80G,aAAa/6I,KAAKwC,KAAM,aAAc,IAC5CA,KAAK04I,YAAY,YACjB14I,KAAKqwD,YAAY/yB,EAAAwE,KAAKnjC,OAAO,YAE7BqB,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBknH,EAAkB/wI,EAAM6pB,KAGvChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM0zH,WAAY8iB,EAAAx2I,MAAM80G,cAGnC0hC,EAAAx2I,MAAM0yH,UAAY,WACd8jB,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,aAAc,GACxCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIO,KAE7ByT,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM0yH,UAAW8jB,EAAAx2I,MAAM41G,UAGlC4gC,EAAAx2I,MAAMq3I,cAAgB,WAClBb,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,iBAAkB,GAC5CA,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIQ,UACzBxU,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,aAEvCqpB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMq3I,cAAeb,EAAAx2I,MAAM41G,UAGtC4gC,EAAAx2I,MAAMs3I,cAAgB,WAClBd,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,iBAAkB,GAC5CA,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIU,MACzB1U,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,aAEvCqpB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMs3I,cAAed,EAAAx2I,MAAM41G,UAGtC4gC,EAAAx2I,MAAMs3I,cAAc97K,UAAUojC,MAAQ,SAASp4B,EAAOuR,GAClD+5H,EAAgBtrI,EAAOuR,IAG3By+J,EAAAx2I,MAAMu3I,UAAY,WACdf,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,aAAc,GACxCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIW,OAE7BqT,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMu3I,UAAWf,EAAAx2I,MAAM41G,UAElC4gC,EAAAx2I,MAAMqzH,UAAY,WACdmjB,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,aAAc,IACxCA,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIQ,UACzBxU,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YAEnCqB,KAAK44I,KAAO,SAASzzI,GACjB,MAAM81K,EAAY91K,EAAKmO,IACvB,IAAIs/C,EAAO5qC,EAAApmB,QAAGsQ,SACO,IAAjB+oK,EAAU,IAA6B,IAAjBA,EAAU,KAChCroH,EAAO5qC,EAAApmB,QAAGuQ,UAEdygD,EAAKvoD,QAAQuJ,IACT,MAAMkoG,EAAU/9G,OAAO4kF,OAAO,GAAIx9E,GAClC22G,EAAQxoG,IAAMM,EACd,MAAMxP,EAAiBuyI,EAAgB32I,KAAM87G,GAC7C13G,EAAI66B,WAAaj/B,KAAKi/B,WACtB76B,EAAI65B,OAASj+B,KAAKs4I,SAAS,UAC3B,MAAMiB,EAAU,IAAIpvH,EAAUy2D,SAC9B24D,EAAQ74D,QAAQt8E,GAChBe,EAAKqW,IAAI8E,IAAIi5H,OAKzBvxH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMqzH,UAAWmjB,EAAAx2I,MAAM41G,UAGlC4gC,EAAAx2I,MAAMy3I,aAAe,WACjBjB,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,eAAgB,GAC1CA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIa,OACzB7U,KAAKg2G,QAAU,EACfh2G,KAAKs5I,WAAY,EACjBt5I,KAAK46I,cAAgB,aACrB56I,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,YAEtCqpB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMy3I,aAAcjB,EAAAx2I,MAAM41G,UAErC4gC,EAAAx2I,MAAMy3I,aAAaj8K,UAAUojC,MAAQ,SAASp4B,EAAOuR,GACjD+5H,EAAgBtrI,EAAOuR,GACvB,MAAMyT,EAAS+gB,EAAAvS,YAAYmO,YACrBw2C,EAAgBhlD,EAAAyK,MAAMi8E,oBAAoB75G,EAAO,GAEvD,IAAK,IAAI5M,EAAI,EAAGA,EAAI2C,KAAKg2G,QAAS34G,IAAK,CACnC,MAAMyC,EAAO2oB,EAAIjL,aAAa4kE,GAC9B,GAAItiF,EAAK41F,cAAgB51F,EAAKsK,YAAa,CACvC,MAAM+wK,EAAQlsJ,EAAOgc,YAAYjrC,KAAK46I,eACtCnF,EAAqB0lC,EAAOr7K,EAAME,OAG1C,MAAMqE,gDAAoDmX,EAAI9Z,YAC9DsmB,EAAApmB,QAAG0lB,YAAY,CAACxnB,KAAMmK,EAAMwkB,UAAWpqB,SAG3C41K,EAAAx2I,MAAM23I,UAAY,WACdnB,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,YAAa,IACvCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIiB,OAE7B+S,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM23I,UAAWnB,EAAAx2I,MAAM41G,UAGlC4gC,EAAAx2I,MAAM43I,UAAY,WACdpB,EAAAx2I,MAAM41G,SAAS77I,KAAKwC,KAAM,YAAa,IACvCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIe,MACzB/U,KAAKs5I,WAAY,GAErBtxH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM43I,UAAWpB,EAAAx2I,MAAM41G,UAElC4gC,EAAAx2I,MAAM43I,UAAUp8K,UAAUojC,MAAQ,SAASp4B,EAAOuR,GAC9C,MAAMzD,EAAQ9N,EAAMP,WACN0zB,EAAAyK,MAAMi8E,oBAAoB75G,EAAO,GACzCI,QAAQvK,IACV,GAAIA,EAAK41F,cAAgB51F,EAAKsK,YAAa,CACvC,MAAMkxK,EAAQ,IAAI7kJ,EAAQ2F,aAC1BrkB,EAAMoW,WAAWmtJ,EAAOx7K,EAAK6b,OAAQ7b,EAAKkc,WAGlD/R,EAAMqW,IAAI,IAAI6J,EAAUyR,WACxB,MAAMv3B,+BAAmCmX,EAAI9Z,YAC7CsmB,EAAApmB,QAAG0lB,YAAY,CAACxnB,KAAMmK,EAAMwkB,UAAWpqB,SAI3C41K,EAAAx2I,MAAMyyH,UAAY,WACd+jB,EAAA75F,UAAU5iF,KAAKwC,KAAM,aAAc,GAEnCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,YAClCqB,KAAKu3F,MAAMv5D,QAAUV,EAAAwE,KAAKnjC,OAAO,WAEjCqB,KAAK44I,KAAOzzI,KACR,MAAM8E,EAAQ9E,EAAKqW,IACbmpE,EAAM3kF,KAAK0sH,cACX6uD,EAAa,IAAIpxJ,EAAUytD,WACjC2jG,EAAWz9J,WAAW9d,KAAKs4I,SAAS,YACpCnuH,EAAUu6D,oBAAoBz6E,EAAOsxK,EAAY52F,GACjD38D,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMmK,EAAMwkB,UACpBpqB,OAAQ4F,EAAMvI,gDAGtB1B,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAOgwK,EAAAx2I,MAAM8yG,uBAAuBv2I,KAAMiK,IAG9CjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBknH,EAAkB/wI,EAAM6pB,KAIvChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMyyH,UAAW+jB,EAAA75F,WAE5B65F,EAAAx2I,MAAMyyH,UAAUj3J,UAAU0J,SAAW,WACjC,IAAIgB,EAAMswK,EAAA75F,UAAUnhF,UAAU0J,SAASnL,KAAKwC,MAE5C,OADA2J,YAAgB3J,KAAKu3F,MAAMv5D,QAAQr1B,cAKvCsxK,EAAAx2I,MAAM+yH,WAAa,WACfyjB,EAAA75F,UAAU5iF,KAAKwC,KAAM,aAAc,GAEnCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,YAClCqB,KAAKu3F,MAAMp4D,WAAa7B,EAAAwE,KAAKnjC,OAAO,WAEpCqB,KAAK44I,KAAOzzI,KACR,MAAM8E,EAAQ9E,EAAKqW,IACb5d,EAAOqM,EAAMvI,UACb85K,EAAU,CACZp8J,OAAQnV,EACRrM,KAAM,aACN0rJ,QAAS,CACLprI,cAAele,KAAKs4I,SAAS,eAEjCt2G,SAAUhiC,KAAKu3F,MAAMv1D,SACrBwxI,YAAa51K,uCACbsoF,6CAA8CtoF,KAE5Cu1K,EAAU,IAAIhpJ,EAAU4hB,QAAQyvI,GACtCrI,EAAQ7iB,cAAc,WACtBrmJ,EAAMqW,IAAI6yJ,KAGdnzK,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAOgwK,EAAAx2I,MAAM8yG,uBAAuBv2I,KAAMiK,IAG9CjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBknH,EAAkB/wI,EAAM6pB,KAIvChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM+yH,WAAYyjB,EAAA75F,WAE7B65F,EAAAx2I,MAAM+yH,WAAWv3J,UAAU0J,SAAW,WAClC,IAAIgB,EAAMswK,EAAA75F,UAAUnhF,UAAU0J,SAASnL,KAAKwC,MAE5C,OADA2J,YAAgB3J,KAAKu3F,MAAMp4D,WAAWx2B,cAK1CsxK,EAAAx2I,MAAM2yH,UAAY,WACd6jB,EAAA75F,UAAU5iF,KAAKwC,KAAM,aAAc,IACnCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,WAElCqB,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GACvCw/E,EAAM3kF,KAAK0sH,cAEX+uD,EAAY,IAAItxJ,EAAU+wD,UAChCugG,EAAUpmJ,UAAUlwB,EAAKqW,KACzBpX,EAAIy+B,QAAU,CAACzc,KAAMq1J,EAAWz5I,SAAU2iD,GAE1C,MAAMm0D,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,oCAIhBjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrB8mH,EAAiB3wI,EAAM6pB,KAItChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM2yH,UAAW6jB,EAAA75F,WAG5B65F,EAAAx2I,MAAM4yH,gBAAkB,WACpB4jB,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,kBAAmB,IAC/CA,KAAK05I,WAAa,cAGtB1xH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM4yH,gBAAiB4jB,EAAAx2I,MAAMg2G,YAGxCwgC,EAAAx2I,MAAMozH,mBAAqB,WACvBojB,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,qBAAsB,IAClDA,KAAK25I,WAAa1vI,IACQ,kBAAfA,EAAMrM,OAGrBoqB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMozH,mBAAoBojB,EAAAx2I,MAAMg2G,YAE3CwgC,EAAAx2I,MAAMi4I,qBAAuB,WACzBzB,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,uBAAwB,IACpDA,KAAKg2G,QAAU,UACfh2G,KAAK25I,WAAa1vI,IACQ,mBAAfA,EAAMrM,OAGrBoqB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMi4I,qBAAsBzB,EAAAx2I,MAAMg2G,YAG7CwgC,EAAAx2I,MAAMgzH,aAAe,WACjBwjB,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,eAAgB,IAE5CA,KAAK25I,WAAa1vI,KACd,MAAM0xK,EAAc37K,KAAK21I,YAAYz3I,IAAI,cAAcoe,cACvD,IAAIs/J,EAAY10K,KAAK4B,MAAM6yK,EAAc,IAAM,EAC3CC,EAAY,KAAKA,EAAY,IAEjC,MAAMpjK,EAAYtR,KAAK4B,MAAM6yK,EAAc,GAC3C,MAAuB,WAAf1xK,EAAMlI,MACTkI,EAAM40B,QAAU+8I,GAAa3xK,EAAM40B,QAAUrmB,KAK1DwP,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMgzH,aAAcwjB,EAAAx2I,MAAMg2G,YAGrCwgC,EAAAx2I,MAAMo4I,WAAa,WACf5B,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,aAAc,IAC1CA,KAAKg2G,QAAU,EACfh2G,KAAK25I,WAAa1vI,IACS,WAAfA,EAAMlI,MACVkI,EAAMrM,OAASoC,KAAK21I,YAAYj0I,YAG5CsmB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMo4I,WAAY5B,EAAAx2I,MAAMg2G,YAGnCwgC,EAAAx2I,MAAMq4I,cAAgB,WAClB7B,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,gBAAiB,IAC7CA,KAAKg2G,QAAU,UAEfh2G,KAAK25I,WAAa1vI,KACd,MAAM26E,EAAU5kF,KAAK21I,YAAYz3I,IAAI,cAC/B2gC,EAAS+lD,EAAQigD,YACjB5tD,EAAW2N,EAAQtoE,cACnBy/J,EAAcl9I,EAAS33B,KAAK4B,MAAMmuE,EAAW,GACnD,MAAQ,SAASpgD,KAAK5sB,EAAMrM,OACxBqM,EAAM40B,QAAUk9I,KAI5B/zJ,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMq4I,cAAe7B,EAAAx2I,MAAMg2G,YAGtCwgC,EAAAx2I,MAAMu4I,UAAY,WACd/B,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,YAAa,IAEzCA,KAAK25I,WAAa1vI,KACd,MAAMgyK,EAAaj8K,KAAK21I,YAAYn1I,UAC9BokF,EAAU5kF,KAAK21I,YAAYz3I,IAAI,cAC/B2gC,EAAS+lD,EAAQigD,YACjB5tD,EAAW2N,EAAQtoE,cACnBy/J,EAAcl9I,EAAS33B,KAAK4B,MAAMmuE,EAAW,GACnD,OAAQhtE,EAAMlI,OAASk6K,GACnBhyK,EAAM40B,QAAUk9I,KAG5B/zJ,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMu4I,UAAW/B,EAAAx2I,MAAMg2G,YAGlCwgC,EAAAx2I,MAAMy4I,iBAAmB,WACrBjC,EAAAx2I,MAAMg2G,WAAWj8I,KAAKwC,KAAM,mBAAoB,GAChDA,KAAK05I,WAAa,aAClB15I,KAAKg2G,QAAU,UACfh2G,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,aAElCqB,KAAKm6I,mBAAqB,EAACr6I,EAAMqF,EAAM80I,KAEnC,MAAMrE,EAAa,IAAIzrH,EAAU67D,OAC3BhkD,EAAWhiC,KAAK0sH,cACtBkpB,EAAWvlF,YAAYruB,GACvBi4G,EAAO35H,IAAIs1H,GAGX,MAAMumC,EAAiB,IAAIhyJ,EAAUo6D,UACrC43F,EAAe33F,UAAUy1D,GACzBkiC,EAAe9mJ,UAAUr1B,KAAKq3I,SAC9B,MAAM+kC,EAAcD,EAAex1K,QACnCwjB,EAAUu6D,oBAAoBu1D,EAAQkiC,EAAgBn6I,GACtD7X,EAAUu6D,oBAAoB1kF,KAAKq3I,QAAS+kC,EAAap6I,KAI7DhiC,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,KAC5B,MAAM/kB,MAACA,GAAS9E,EAChB,OAAK8E,EAAMf,IAAI,eACX/D,EAAKmO,IAAM,CAAC,EAAG,GACf0b,EAAG/kB,EAAO9E,IACH,MAMnB6iB,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMy4I,iBAAkBjC,EAAAx2I,MAAMg2G,YAIzCwgC,EAAAx2I,MAAMy8C,WAAa,WACf+5F,EAAA75F,UAAU5iF,KAAKwC,KAAM,aAAc,IACnCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,aAElCqB,KAAK44I,KAAOzzI,KACR,MAAM8E,EAAQ9E,EAAKqW,IACbmpE,EAAM3kF,KAAK0sH,cACX2vD,EAAY,IAAIlyJ,EAAU+1D,WAChC/1D,EAAUu6D,oBAAoBz6E,EAAOoyK,EAAW13F,GAChD38D,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMmK,EAAMwkB,UACtBpqB,OAAQ4F,EAAMvI,6CAGpB1B,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAOgwK,EAAAx2I,MAAM8yG,uBAAuBv2I,KAAMiK,IAG9CjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,KAC5BhvB,KAAKs8K,aAAe,CAAC1gE,MAAOz2G,EAAKy2G,OACjCz2G,EAAK8wI,SAAWj2I,KAAKu8K,WAAW19K,KAAKmB,MAC9Bq2I,EAAgBlxI,EAAM6pB,KAGjChvB,KAAKu8K,WAAatyK,KACd,MAAM2xG,MAACA,GAAS57G,KAAKs8K,aACrB,QAAK1gE,KAEA3xG,EAAMf,IAAI,gBACP0yG,EAAM1yG,IAAI,kBAS1B8e,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMy8C,WAAY+5F,EAAA75F,WAK7B65F,EAAAx2I,MAAM6yH,SAAW,WACb2jB,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,WAAY,IACrCA,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIO,IACzBvU,KAAKo6I,SAAW,aAEpBpyH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM6yH,SAAU2jB,EAAAx2I,MAAMoB,SAKjCo1I,EAAAx2I,MAAMkzH,eAAiB,WACnBsjB,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,iBAAkB,IAC3CA,KAAKoyI,SAAS,GACdpyI,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIQ,UACzBxU,KAAKo6I,SAAW,mBAEpBpyH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMkzH,eAAgBsjB,EAAAx2I,MAAMoB,SAKvCo1I,EAAAx2I,MAAMwzH,YAAc,WAChBgjB,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,cAAe,GACxCA,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAII,OACzBpU,KAAKo6I,SAAW,gBAEpBpyH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMwzH,YAAagjB,EAAAx2I,MAAMoB,SAMpCo1I,EAAAx2I,MAAM+4I,YAAc,WAChBvC,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,cAAe,IACxCA,KAAKoyI,SAAS,IACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIa,OACzB7U,KAAKo6I,SAAW,gBAEpBpyH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM+4I,YAAavC,EAAAx2I,MAAMoB,SAEpCo1I,EAAAx2I,MAAM+4I,YAAYv9K,UAAU25I,KAAO,SAASzzI,GACxC80K,EAAAx2I,MAAMoB,QAAQ5lC,UAAU25I,KAAKp7I,KAAKwC,KAAMmF,GACvBA,EAAKqW,IAAItd,IAAI,gBACrBmkC,MAAQriC,KAAKqiC,MAAMxjC,KAAKmB,OAGrCi6K,EAAAx2I,MAAM+4I,YAAYv9K,UAAUojC,MAAQ,SAASp4B,GACzC,MAAMuR,EAAMxb,KAAKq3I,QACjB9B,EAAgBtrI,EAAOuR,IAI3By+J,EAAAx2I,MAAMg5I,YAAc,WAChBxC,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,cAAe,IACxCA,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIY,OACzB5U,KAAKo6I,SAAW,iBAEpBpyH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMg5I,YAAaxC,EAAAx2I,MAAMoB,SAEpCo1I,EAAAx2I,MAAMg5I,YAAYx9K,UAAU25I,KAAO,SAASzzI,GACxC80K,EAAAx2I,MAAMoB,QAAQ5lC,UAAU25I,KAAKp7I,KAAKwC,KAAMmF,GACvBA,EAAKqW,IAAItd,IAAI,gBACrBmkC,MAAQriC,KAAKqiC,MAAMxjC,KAAKmB,OAGrCi6K,EAAAx2I,MAAMg5I,YAAYx9K,UAAUojC,MAAQ,SAASp4B,GACzC,MAAMuR,EAAMxb,KAAKq3I,QAGXmkC,EAAU,CACZp8J,OAAQ,CAACA,OAAQnV,EAAMwkB,WACvB+2D,WAAY,CAAC,QACb0uF,YAAa,MAAO1wF,WAAY,aAChC4wF,WAAY,GAEVjB,EAAU,IAAIhpJ,EAAU4hB,QAAQyvI,GAEtChgK,EAAI8E,IAAI6yJ,IAMZ8G,EAAAx2I,MAAMszH,UAAY,WACdkjB,EAAAx2I,MAAMoB,QAAQrnC,KAAKwC,KAAM,YAAa,IACtCA,KAAKoyI,SAAS,GACdpyI,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIU,MACzB1U,KAAKo6I,SAAW,YAEhBp6I,KAAK44I,KAAO,SAASzzI,GACjB,MAAO8Q,EAAGC,GAAK,CAAC/Q,EAAKqW,IAAIG,OAAQxW,EAAKqW,IAAIQ,QAC1Cje,OAAOutC,OAAOtjB,EAAApmB,QAAG6P,KAAKpH,QAAQuJ,IAC1B,MAAMo8H,EAAK/5H,EAAIjW,KAAKm3I,WAAavjI,EAAK,GAChCq8H,EAAK/5H,EAAIlW,KAAKm3I,WAAavjI,EAAK,GAChCxP,EAAiB,CACnBuwD,KAAM,CAAC1+C,EAAGC,GACV0tB,MAAO5jC,KACPwb,IAAKrW,EAAKqW,IACVq5C,GAAI,CAACm7E,EAAIC,IAEb7rI,EAAI66B,WAAaj/B,KAAKi/B,WACtB76B,EAAI65B,OAASj+B,KAAK0lI,YAClBthI,EAAIs4K,aAAc,EAClB,MAAMpiC,EAAW,IAAInwH,EAAU02D,aAC/By5D,EAAS55D,QAAQt8E,GACjBe,EAAKqW,IAAI8E,IAAIg6H,MAIrBt6I,KAAKg3I,mBAAqB,SAAS/sI,GAC/B,OAAOgwK,EAAAx2I,MAAM8yG,uBAAuBv2I,KAAMiK,KAGlD+d,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMszH,UAAWkjB,EAAAx2I,MAAMoB,SAGlCo1I,EAAAx2I,MAAMrZ,YAAc,WAChB6vJ,EAAA75F,UAAU5iF,KAAKwC,KAAM,cAAe,IACpCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,WAElCqB,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GACvCw/E,EAAM3kF,KAAK0sH,cAEXiwD,EAAc,IAAIxyJ,EAAUC,YAClCuyJ,EAAYtnJ,UAAUlwB,EAAKqW,KAC3BpX,EAAIy+B,QAAU,CAACzc,KAAMu2J,EAAa36I,SAAU2iD,GAE5C,MAAMm0D,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,gCAIhBjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrB8mH,EAAiB3wI,EAAM6pB,KAItChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMrZ,YAAa6vJ,EAAA75F,WAG9B65F,EAAAx2I,MAAM8yH,SAAW,WACb0jB,EAAAx2I,MAAMg3G,SAASj9I,KAAKwC,KAAM,WAAY,IACtCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAIO,IACzBvU,KAAKoyI,SAAS,IAElBpqH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM8yH,SAAU0jB,EAAAx2I,MAAMg3G,UAEjCw/B,EAAAx2I,MAAM8yH,SAASt3J,UAAUojC,MAAQ,SAASp4B,GACtCA,EAAMqW,IAAI,IAAI6J,EAAU4xD,WAG5Bk+F,EAAAx2I,MAAM2zH,YAAc,WAChB6iB,EAAAx2I,MAAMg3G,SAASj9I,KAAKwC,KAAM,cAAe,IACzCA,KAAKoe,QAAQ,SAAUkf,EAAAwE,KAAKnjC,OAAO,YACnCqB,KAAKi/B,WAAajX,EAAApmB,QAAGoS,IAAII,QAE7B4T,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM2zH,YAAa6iB,EAAAx2I,MAAMg3G,UAGpCw/B,EAAAx2I,MAAMizH,KAAO,WACTujB,EAAA75F,UAAU5iF,KAAKwC,KAAM,OAAQ,GAC7BA,KAAKu3F,MAAMqlF,QAAUt/I,EAAAwE,KAAKnjC,OAAO,OAEjCqB,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAIykF,WAAa,SACjBzkF,EAAIuvD,IAAM,QACVvvD,EAAI9F,MAAQ0B,KAAKu3F,MAAMqlF,QAAQnlG,OAC/B,MAAMqhE,EAAY,IAAI3uH,EAAU22D,UAChCg4D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,oCAIhBjK,KAAK67G,kBAAoB,EAAC12G,EAAM6pB,IACrBknH,EAAkB/wI,EAAM6pB,KAIvChH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMizH,KAAMujB,EAAA75F,WAEvB65F,EAAAx2I,MAAMo5I,WAAa,WACf5C,EAAAx2I,MAAMk3G,SAASn9I,KAAKwC,KAAM,aAAc,IACxCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAClCqB,KAAKs3I,OAAS,EACdt3I,KAAK46I,cAAgB,QAEzB5yH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMo5I,WAAY5C,EAAAx2I,MAAMk3G,UAEnCs/B,EAAAx2I,MAAMq5I,YAAc,WAChB7C,EAAAx2I,MAAMk3G,SAASn9I,KAAKwC,KAAM,cAAe,IACzCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAClCqB,KAAKs3I,OAAS,EACdt3I,KAAK46I,cAAgB,aAEzB5yH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMq5I,YAAa7C,EAAAx2I,MAAMk3G,UAEpCs/B,EAAAx2I,MAAM4zH,aAAe,WACjB4iB,EAAAx2I,MAAMk3G,SAASn9I,KAAKwC,KAAM,eAAgB,IAC1CA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAClCqB,KAAKs3I,OAAS,EACdt3I,KAAK46I,cAAgB,cAEzB5yH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAM4zH,aAAc4iB,EAAAx2I,MAAMk3G,UAErCs/B,EAAAx2I,MAAMs5I,YAAc,WAChB9C,EAAAx2I,MAAMk3G,SAASn9I,KAAKwC,KAAM,cAAe,IACzCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAClCqB,KAAKs3I,OAAS,EACdt3I,KAAK46I,cAAgB,cAEzB5yH,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMs5I,YAAa9C,EAAAx2I,MAAMk3G,UAEpCs/B,EAAAx2I,MAAMyzH,WAAa,WACf+iB,EAAA75F,UAAU5iF,KAAKwC,KAAM,aAAc,GACnCA,KAAKu3F,MAAMv1D,SAAW1E,EAAAwE,KAAKnjC,OAAO,SAElCqB,KAAK44I,KAAO,SAASzzI,GACjB,MAAMf,EAAiBuyI,EAAgB32I,KAAMmF,GAC7Cf,EAAI8sD,SAAWlxD,KAAK66I,aAAah8I,KAAKmB,KAAMmF,GAE5C,MAAM2zI,EAAY,IAAI3uH,EAAU62D,UAChC83D,EAAUp4D,QAAQt8E,GAClBe,EAAKqW,IAAI8E,IAAIw4H,IAGjB94I,KAAKg3I,mBAAqB,SAAS/sI,GAE/B,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,2CAIhBjK,KAAK66I,aAAe,CAAC11I,IACjB,MAAM8pB,EAAS+gB,EAAAvS,YAAYmO,YAErB7zB,EADS/X,KAAKq3I,QACC3tI,YACf4J,IAACA,GAAOnO,GACPyoK,EAAIC,GAAM7tK,KAAKq3I,QAAQz7H,SACvBo0H,EAAIC,GAAM,CAAC29B,EAAKt6J,EAAI,GAAIu6J,EAAKv6J,EAAI,IAE1BtT,KAAKg9K,cAAcjlK,EAAMyL,SAAUlQ,EAAK08H,EAAIC,GACpD5lI,QAAQvK,IACV,GAAIA,EAAK41F,eAAiB51F,EAAKsK,YAAa,CACxC,MAAM6yK,EAAahuJ,EAAOgc,YAAY,cACtClzB,EAAMgW,SAASkvJ,EAAYn9K,EAAK6b,OAAQ7b,EAAKkc,QAC7C,MAAM45H,EAAa,IAAIzrH,EAAU67D,OAC3BhkD,EAAWhiC,KAAK0sH,cACtBkpB,EAAWvlF,YAAYruB,GACvBi7I,EAAW38J,IAAIs1H,QAK3B51I,KAAKg9K,cAAgB,SAAS3nK,EAAK/B,EAAK08H,EAAIC,GACxC,OAAe,IAAX38H,EAAI,GACG,CACH+B,EAAIoZ,QAAQuhH,EAAK,EAAGC,GACpB56H,EAAIoZ,QAAQuhH,EAAIC,GAChB56H,EAAIoZ,QAAQuhH,EAAK,EAAGC,IAGR,IAAX38H,EAAI,GACF,CACH+B,EAAIoZ,QAAQuhH,EAAIC,EAAK,GACrB56H,EAAIoZ,QAAQuhH,EAAIC,GAChB56H,EAAIoZ,QAAQuhH,EAAIC,EAAK,KAGR,IAAZ38H,EAAI,GACF,CACH+B,EAAIoZ,QAAQuhH,EAAK,EAAGC,GACpB56H,EAAIoZ,QAAQuhH,EAAIC,GAChB56H,EAAIoZ,QAAQuhH,EAAIC,EAAK38H,EAAI,KAItB,CACH+B,EAAIoZ,QAAQuhH,EAAK,EAAGC,GACpB56H,EAAIoZ,QAAQuhH,EAAIC,GAChB56H,EAAIoZ,QAAQuhH,EAAIC,EAAK38H,EAAI,OAKzC0U,EAAApmB,QAAG0D,QAAQ20K,EAAAx2I,MAAMyzH,WAAY+iB,EAAA75F,WAgB7B65F,EAAAx2I,MAAMy5I,SAdN,cAAuBjD,EAAAx2I,MAAMs3G,WAEzB1yH,cACI6O,MAAM,WAAY,GAClBl3B,KAAK42I,QAAQhxI,KAAK,IAAIq0K,EAAAx2I,MAAMwyH,eAC5Bj2J,KAAK42I,QAAQhxI,KAAK,IAAIq0K,EAAAx2I,MAAMq5I,aAGzBz0J,mBAAmBpe,GAEtB,OAAOgwK,EAAAx2I,MAAMgzG,sBAAsBz2I,KAAMiK,EAD7B,sCAOpBgwK,EAAAx2I,MAAM05I,aAAe18E,KACjBA,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM82I,aACxB95E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMg5I,aACxBh8E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM8yH,UACxB91D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMk7C,OACxB8hB,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMqzH,WACxBr2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy2I,aACxBz5E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMwzH,aACxBx2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMq5C,QACxB2jB,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMyzH,YACxBz2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM0yH,WACxB11D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMwyH,eACxBx1D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMizH,MACxBj2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM6yH,UACxB71D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMyyH,WACxBz1D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM2yH,WACxB31D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy5I,UACxBz8E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMkzH,gBACxBl2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMq3I,eACxBr6E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM+yH,YACxB/1D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMrZ,aACxBq2E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy3C,WACxBulB,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM+4I,aACxB/7E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy3I,cACxBz6E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMs5I,aACxBt8E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy8C,YACxBugB,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM4zH,cACxB52D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMo5I,YACxBp8E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMq5I,aACxBr8E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMszH,WACxBt2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM43I,WACxB56E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM0zH,YACxB12D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMozH,oBACxBp2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMgzH,cACxBh2D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMo4I,YACxBp7E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMy4I,kBACxBz7E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM4yH,iBACxB51D,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMu4I,WACxBv7E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAMi4I,sBACxBj7E,EAAKz8D,SAAS,IAAIi2I,EAAAx2I,MAAM8gD,yVC9hC5B,MAAAv8D,EAAAC,EAAAhrB,EAAA,IACAk0J,EAAA/8H,EAAAn3B,EAAA,KACAmgC,EAAAngC,EAAA,IAIAkiH,EAAAliH,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KAKMwrB,EAJNxrB,EAAA,GAIYqgB,OAAOC,SAEbsqB,EAAa,GAGnB,MAAayL,UAA0BlW,EAAAuoF,cAGnCt9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,gBACb75B,KAAKo5G,KAAO,IAAI+3C,EAASa,WAAW/nJ,GAGjCoe,UAA6B,OAAOroB,KAAKo5G,KACzC/wF,QAAQ+wF,GAAOp5G,KAAKo5G,KAAOA,EAG3B/wF,mBAIH,OAHAroB,KAAKmoC,OAAOrjB,KAAO,KACnB9kB,KAAKo5G,KAAKtrE,UACV9tC,KAAKmoC,OAAOrjB,KAAO,KACZsY,EAAAwmF,oBAGJv7F,SACH,MAAMzJ,EAAYsY,MAAMzQ,SAExB,OADA7H,EAAKw6F,KAAOp5G,KAAKo5G,KAAK3yF,SACf7H,GAvBfzhB,EAAAm2C,oBA0BAzL,EAAMwL,aAAeC,EAIrB,MAAaE,UAAyBF,EAClCjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,eACb75B,KAAKo5G,KAAO,IAAI+3C,EAAS0B,iBAAiB5oJ,GAC1CjK,KAAKo5G,KAAKw4C,QAAQ,CAACv2C,UAAW,EAAKzB,YAAa,KAC9B55G,KAAKo5G,KAAKgkE,aAAa,aAC/BC,sBAAsB,KAPxClgL,EAAAq2C,mBAUA3L,EAAM0L,YAAcC,EAEpB,MAAaJ,UAAsBE,EAC/BjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,YACb75B,KAAKo5G,KAAKo5C,mBACVxyJ,KAAKo5G,KAAKwH,aAAa,IAAIzB,EAAApG,UAAUvpG,UAL7CrS,EAAAi2C,gBAQAvL,EAAMsL,SAAWC,EAEjB,MAAaM,UAAoBJ,EAC7BjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,UACb75B,KAAKo5G,KAAKo5C,mBACVxyJ,KAAKo5G,KAAKwH,aAAa,IAAIzB,EAAApG,UAAUvpG,UAL7CrS,EAAAu2C,cAQA7L,EAAM4L,OAASC,EAEf,MAAaE,UAAmBN,EAC5BjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,SACb75B,KAAKo5G,KAAKwH,aAAa,IAAIzB,EAAApG,UAAUplE,MAAM,MAC3C3zC,KAAKo5G,KAAKw4C,QAAQ,CAACj+G,MAAO,IAAKimE,YAAa,MALpDz8G,EAAAy2C,aAQA/L,EAAM8L,MAAQC,EAGd,MAAaZ,UAAoBM,EAC7BjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,UACb75B,KAAKo5G,KAAO,IAAI+3C,EAASa,WAAW/nJ,GACpCjK,KAAK4lH,QAAQriF,aAAa,UAC1BvjC,KAAK4lH,QAAQriF,aAAa,SAC1BvjC,KAAKm5G,QAAU,KAAMn5G,KAAKo5G,MAC1Bp5G,KAAKs9K,QAAUlkE,KAASp5G,KAAKo5G,KAAOA,IAIjC/wF,mBAIH,OAHAroB,KAAKmoC,OAAOrjB,KAAO,KACnB9kB,KAAKo5G,KAAKtrE,UACV9tC,KAAKmoC,OAAOrjB,KAAO,KACZsY,EAAAwmF,qBAhBfzmH,EAAA61C,cAmBAnL,EAAMkL,OAASC,EAGf,MAAaE,UAAuBI,EAChCjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,aACb75B,KAAKo5G,KAAO,IAAI+3C,EAAS4B,eAAe9oJ,GAIrCoe,mBAIH,OAHAroB,KAAKmoC,OAAOrjB,KAAO,KACnB9kB,KAAKo5G,KAAKtrE,UACV9tC,KAAKmoC,OAAOrjB,KAAO,KACZsY,EAAAwmF,qBAZfzmH,EAAA+1C,iBAeArL,EAAMoL,UAAYC,EAIlB,MAAaY,UAAmB1W,EAAAuoF,cAC5Bt9F,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,SAGVxR,mBAYH,OAXaroB,KAAKgmH,OAAOv3F,UACLnkB,YACbD,QAAQJ,IACX,MAAMszK,EAAWv9K,KAAKmtH,WAAWjvH,IAAI,YACrC,GAAIq/K,EAAU,CACV,MAAMC,EAAY,IAAIrzJ,EAAU0pB,MAChC2pI,EAAUnoJ,UAAUr1B,KAAKgmH,QACzBw3D,EAAU9gF,cAAc6gF,EAAS5gF,iBACjC1yF,EAAMqW,IAAIk9J,MAGXpgJ,EAAAwmF,qBAlBfzmH,EAAA22C,aAqBAjM,EAAMgM,MAAQC,EAId,MAAaE,UAAmBF,EAG5BzrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,SACb75B,KAAKy9K,aAAe,GAGjBp1J,mBACH,GAAII,EAAI9C,cAAgB3lB,KAAKy9K,aAAc,CACvC,MAAMnqK,EAAMmV,EAAIqoE,cACTj4D,EAAMC,GAAQ9Q,EAAApmB,QAAG2Z,aAAajI,EAAKtT,KAAKgmH,QACzCjuG,EAAQ/X,KAAKgmH,OAAOt8G,WAE1B,GADYqO,EAAMyL,SACVqK,MAAMgL,EAAMC,GAAO,CACvB,MAAM+tF,EAAU,IAAI18F,EAAU2uD,SAASjgD,EAAMC,EAAM/gB,GACnD/X,KAAKgmH,OAAO1lG,IAAIumG,IAGxB,OAAO3vF,MAAMixF,iBAAiB3qH,KAAKwC,OApB3C7C,EAAA62C,aAuBAnM,EAAMkM,MAAQC,EAId,MAAa4jI,UAAyBtkI,EAClCjrB,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,eACb75B,KAAKo5G,KAAO,IAAI+3C,EAASa,WAAW/nJ,GAEpCjK,KAAKm5G,QAAU,KAAMn5G,KAAKo5G,MAC1Bp5G,KAAKs9K,QAAUlkE,KAASp5G,KAAKo5G,KAAOA,IAGjC/wF,mBAGH,OAAO+U,EAAAwmF,qBAbfzmH,EAAAy6K,mBAgBA/vI,EAAMzd,YAAcwtJ,iFCrMpB,MAAA8F,EAAAzgL,EAAA,IACAkiH,EAAAliH,EAAA,IAEaE,EAAAg2J,iBAAwB,GAOrC,MAAawqB,UAA2Bx+D,EAAApG,UAAUrhF,KAE9CrP,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK+B,KAAO,YAGhBsmB,sBAAsBpe,GAClB,OAAIA,EAAMf,IAAI,YAGHlJ,KAAKi5G,UAETkG,EAAApG,UAAUxpG,aAGrB8Y,aAAape,GACT,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIskE,EAAAx5B,YAAYkP,UAAUnpJ,GACvCivG,EAAQG,QAAQD,IAnBxBj8G,EAAAwgL,qBAsBAxgL,EAAAg2J,iBAAiBC,UAAYuqB,EAG7B,MAAaC,UAAyBz+D,EAAApG,UAAUrhF,KAE5CrP,YAAY4wF,GACR/hF,MAAM+hF,GACNj5G,KAAK69K,SAAW,EAChB79K,KAAK+B,KAAO,UAGhBsmB,wBACI,OAAsB,IAAlBroB,KAAK69K,SAGE79K,KAAKi5G,aAGVj5G,KAAK69K,SAEJ,GAGXx1J,aAAape,GACT,MAAMivG,EAAUjvG,EAAMq5B,WAAW61E,UAC3BC,EAAO,IAAIskE,EAAAx5B,YAAYoP,QAAQrpJ,GACrCivG,EAAQG,QAAQD,IAvBxBj8G,EAAAygL,mBA0BAzgL,EAAAg2J,iBAAiBG,QAAUsqB,8PC/D3B,MAAArqB,EAAAn/H,EAAAn3B,EAAA,KACA8sB,EAAA9sB,EAAA,IAEMq3E,EAAsBvqD,EAAAI,UAAUmqD,oBAGzBn3E,EAAAktB,UAAYiqD,EAAoB,YAAa,IAE1Dn3E,EAAAktB,UAAUprB,UAAUw2E,MAAQ,WAaxBz1E,KAAKo5E,YAAY,QAZF,KACX,MAAMw6E,EAAY,IAAIL,EAAQlpI,UAAUrqB,KAAKk1E,aAEzC3hE,MAAMC,QAAQxT,KAAK4zJ,YACnB5zJ,KAAK4zJ,UAAUvpJ,QAAQzM,IACnB,MAAMi2J,EAAO,IAAIN,EAAQ31J,GACzBg2J,EAAUS,WAAWR,KAG7B7zJ,KAAK4zJ,UAAYA,EACjB5zJ,KAAK4mF,gBAAgB,YAK7BzpF,EAAAktB,UAAUprB,UAAU6+K,aAAe,SAASC,GACxC/9K,KAAK4zJ,UAAYmqB,GAGrB5gL,EAAAktB,UAAUprB,UAAU2uJ,WAAa,WAC7B,OAAO5tJ,KAAK4zJ,UAAUl/C,WAG1Bv3G,EAAAktB,UAAUprB,UAAUo1J,WAAa,SAASN,GACtC/zJ,KAAK4zJ,UAAUS,WAAWN,IAG9B52J,EAAAktB,UAAUprB,UAAUwnB,OAAS,WACzB,MAAM7H,EAAOmL,EAAA8qD,cAAc51E,UAAUwnB,OAAOjpB,KAAKwC,MAEjD,OADA4e,EAAKk/J,aAAe99K,KAAK4zJ,UAAUntI,SAC5B7H,sKCvCX,MAAAoJ,EAAAC,EAAAhrB,EAAA,IAIAq3C,EAAAr3C,EAAA,IAGM4P,WAACA,EAAUE,UAAEA,EAASD,UAAEA,GAAakb,EAAApmB,QAyB3CzE,EAAA8/G,KAAA,MAYI50F,YAAYpS,EAAWC,EAAW+X,GAE9BjuB,KAAKg+K,UAAY/vJ,EACjBjuB,KAAKs9G,GAAKrnG,EACVjW,KAAKu9G,GAAKrnG,EACVlW,KAAK69G,WAAY,EAEjB79G,KAAK60C,GAAK,GAEV70C,KAAKkjE,cAAej1C,GAAOA,EAAKivF,cAChCl9G,KAAKi+K,aAAchwJ,GAAOA,EAAKynE,aAG5BrtE,OAAgB,OAAOroB,KAAKs9G,GAC5Bj1F,OAAgB,OAAOroB,KAAKu9G,GAC5Bl1F,QAAiB,MAAO,CAACroB,KAAKs9G,GAAIt9G,KAAKu9G,IACvCl1F,KAAKpS,GAAYjW,KAAKs9G,GAAKrnG,EAC3BoS,KAAKnS,GAAYlW,KAAKu9G,GAAKrnG,EAC3BmS,MAAMiD,GAAatrB,KAAKs9G,GAAKhyF,EAAG,GAAItrB,KAAKu9G,GAAKjyF,EAAG,GAEjDjD,OAAOpS,EAAWC,GACrB,OAAOD,IAAMjW,KAAKs9G,IAAMpnG,IAAMlW,KAAKu9G,GAGhCl1F,WACH,OAAOroB,KAAKs9G,GAAK,IAAMt9G,KAAKu9G,GAIzBl1F,YAAY4F,GACfjuB,KAAKg+K,UAAY/vJ,EACjBjuB,KAAKkjE,aAAej1C,EAAKivF,cACzBl9G,KAAKi+K,YAAchwJ,EAAKynE,aAGrBrtE,cAAqC,OAAOroB,KAAKg+K,UAGjD31J,QAAQvmB,GACX,OAAO9B,KAAK60C,GAAG31C,eAAe4C,GAK3BumB,QAAQvmB,GACX,OAAI9B,KAAK60C,GAAG31C,eAAe4C,GAChB9B,KAAK60C,GAAG/yC,GAEZ,KAIJumB,cACH,OAAOroB,KAAKY,QAAQkM,GAGjBub,cACH,OAAOroB,KAAKc,QAAQgM,GAIjBub,YACH,OAAOroB,KAAKY,QAAQiM,GAGjBwb,YACH,OAAQroB,KAAKc,QAAQ+L,GAGlBwb,gBACH,MAAM1kB,EAAS3D,KAAKc,QAAQ+L,GAC5B,OAAIlJ,GAAUA,EAAOpC,OAAS,EACnBoC,EAAO,GAEX,KAGJ0kB,oBACH,MAAM1kB,EAAS3D,KAAKsK,YACpB,OAAI3G,EACOA,EAAOwG,OAAOF,IAChBA,EAAMf,IAAI,gBAGZ,GAGJmf,WAAqB,OAAOroB,KAAKY,QAAQmM,GACzCsb,WACH,OAAQroB,KAAKc,QAAQiM,GAIlBsb,UAAUuU,GACb,GAAI58B,KAAKg+G,cAAe,CACpB,MAAMs7C,EAAQt5J,KAAK2tB,cACnB,IAAK,IAAItwB,EAAI,EAAGA,EAAIi8J,EAAM/3J,OAAQlE,IAC9B,GAA2B,WAAvBi8J,EAAMj8J,GAAGmD,WACL84J,EAAMj8J,GAAGisH,WAAa1sF,EACtB,OAAO,EAKvB,OAAO,EAIJvU,WACH,OAAOtqB,OAAO6qB,KAAK5oB,KAAK60C,IAAItzC,OAAS,EAIlC8mB,YACH,MAAM1nB,EAAWX,KAAK+1C,gBACtB,GAAIp1C,EAAU,CACV,MAAM/C,EAAO+C,EAASe,UACtB,MAAO,kBAAoBm1B,KAAKj5B,GAEpC,OAAO,EAIJyqB,aACH,MAAM1nB,EAAWX,KAAK+1C,gBACtB,QAAIp1C,GAAyC,YAAvBA,EAASe,UAI5B2mB,UACH,OAAOroB,KAAKk+K,YAAY,QAGrB71J,UAEH,OADcroB,KAAKigB,YAAY,QAAQ,GAIpCoI,UACH,OAAOroB,KAAKk+K,YAAY,QAGrB71J,gBACH,GAAIroB,KAAKg2F,UAEL,OADsBh2F,KAAKigB,YAAY,QAAQ,GACzBpd,WAIvBwlB,gBACH,OAAOroB,KAAKk+K,YAAY,cAGrB71J,WACH,MAAoC,eAA7BroB,KAAKg+K,UAAUx9K,UAGnB6nB,kBAAkBtmB,GACrB,QAAI/B,KAAK81C,iBACc91C,KAAK+1C,gBACNr0C,YAAcK,EAKjCsmB,UACH,OAAOroB,KAAKm+K,kBAAkB,QAG3B91J,YACH,OAAOroB,KAAKm+K,kBAAkB,UAG3B91J,cACH,OAAOroB,KAAKm+K,kBAAkB,YAI3B91J,YACH,OAAIroB,KAAK6/D,YACE7/D,KAAK+1C,gBAET,KAGJ1tB,gBACH,OAAIroB,KAAKk+K,YAAY,cACHl+K,KAAKigB,YAAY,cAAc,GAG1C,KAIJoI,aACH,OAAIroB,KAAK0rJ,aACE1rJ,KAAK+1C,gBAET,KAIJ1tB,cAEH,IAAKroB,KAAKkjE,aAAe,OAAO,EAEhC,MAAMo2F,EAAQt5J,KAAK60C,GAAG/nC,GACtB,GAAIwsJ,EACA,GAAqB,IAAjBA,EAAM/3J,QACN,GAAI+3J,EAAM,GAAGpwJ,IAAI,UAAY,OAAO,OAGpC,IAAK,IAAI7L,EAAI,EAAGA,EAAIi8J,EAAM/3J,OAAQlE,IAC9B,GAAIi8J,EAAMj8J,GAAG6L,IAAI,UACb,OAAO,EAKvB,OAAO,EAGJmf,aAAuB,OAAOroB,KAAK4vB,SAEnCvH,kBACH,OAAOroB,KAAKg+K,UAAUvgE,kBAGnBp1F,cACH,GAAIroB,KAAK60C,GAAGhoC,GAAa,CACrB,MAAMlJ,EAAS3D,KAAKc,QAAQ+L,GAC5B,GAAIlJ,EACA,OAAOA,EAAO,GAAGuF,IAAI,YAG7B,OAAO,EAGJmf,cACH,OAAOroB,KAAKg+K,UAAUI,aAGnB/1J,kBACH,OAAOroB,KAAKg+K,UAAUK,kBAGnBh2J,cAAeroB,KAAK69G,WAAY,EAChCx1F,aAAuB,OAAOroB,KAAK69G,UAGnCx1F,OAAOuxD,GAAW,GAErB,IAAKA,IAAa55E,KAAKi+K,YAAc,OAAO,EAE5C,GAAIj+K,KAAKY,QAAQiM,GAAa,CAC1B,IAAK,IAAIxP,EAAI,EAAGA,EAAI2C,KAAK60C,GAAGlxC,OAAOpC,OAAQlE,IACvC,IAAK2C,KAAK60C,GAAGlxC,OAAOtG,GAAG6L,IAAI,YAAc,OAAO,EAEpD,OAAO,EAEN,GAAIlJ,KAAKY,QAAQkM,GAAY,CAC9B,GAAI9M,KAAKk+K,YAAY,QAEjB,OADal+K,KAAKs+K,UACNxkJ,SAEX,GAAI95B,KAAKk+K,YAAY,aAEtB,OADkBl+K,KAAKu+K,eACNzkJ,SAKzB,OAAI8/C,GACO55E,KAAKg+K,UAAUvgE,kBAOvBp1F,UACH,OAAIroB,KAAKk+K,YAAY,QACJl+K,KAAKigB,YAAY,QAAQ,GAGnC,KAGJoI,eACH,OAAIroB,KAAKk+K,YAAY,aACJl+K,KAAKigB,YAAY,aAAa,GAGxC,KAIJoI,QAAQvmB,EAAcsC,GACzB,GAAsB,eAAlBA,EAAI5D,WAA8BR,KAAK81C,gBAAiB,CACxD,IAAIzxC,KAASrE,KAAKs9G,MAAMt9G,KAAKu9G,KAC7Bl5G,kBAAsBwa,KAAKC,UAAU9e,KAAK+1C,mBAC1C1xC,sBAA0Bwa,KAAKC,UAAU1a,KACzC4jB,EAAApmB,QAAGK,IAAI,OAAQ,0CACqBoC,KAEnCrE,KAAK60C,GAAG31C,eAAe4C,GAKnBA,IAAS+K,EACTzI,EAAI8E,IAAI,gBAAmB9E,EAAI8E,IAAI,YAIpClJ,KAAK60C,GAAG/yC,GAAM8D,KAAKxB,GAHnBpE,KAAK60C,GAAG/yC,GAAMsjD,QAAQhhD,GAO1BpE,KAAK60C,GAAG/yC,GAAM8D,KAAKxB,IAbnBpE,KAAK60C,GAAG/yC,GAAQ,GAChB9B,KAAK60C,GAAG/yC,GAAM8D,KAAKxB,IAelBA,EAAiByyC,WACjBzyC,EAAiB26F,SAAS/+F,MAI5BqoB,YAAY1nB,UACRX,KAAK60C,GAAGl0C,GAIZ0nB,WAAWvmB,EAAcsC,GAC5B,GAAIpE,KAAKY,QAAQkB,GAAO,CACpB,MACMod,EADQlf,KAAK60C,GAAG/yC,GACFie,QAAQ3b,GAC5B,OAAe,IAAX8a,IACJlf,KAAK60C,GAAG/yC,GAAM4qB,OAAOxN,EAAO,GACC,IAAzBlf,KAAK60C,GAAG/yC,GAAMP,eACPvB,KAAK60C,GAAG/yC,IAEZ,GAEX,OAAO,EAIJumB,WACH,IAAI1e,EAAM,YAAc3J,KAAKs9G,GAAK,KAAOt9G,KAAKu9G,GAc9C,OAbA5zG,GAAO,cAAgB3J,KAAK69G,UAC5Bl0G,GAAO,kBAAoB3J,KAAKk9G,cAChCn/G,OAAO6qB,KAAK5oB,KAAK60C,IAAIxqC,QAAQvI,IACzB,MAAM08K,EAAWx+K,KAAK60C,GAAG/yC,GACzB,IAAK,IAAIzE,EAAI,EAAGA,EAAImhL,EAASj9K,OAAQlE,IAC7BmhL,EAASnhL,GAAG6B,eAAe,YAC3ByK,GAAO60K,EAASnhL,GAAGsL,WAEd61K,EAASnhL,GAAG6B,eAAe,YAChCyK,GAAOkV,KAAKC,UAAU0/J,EAASnhL,GAAGopB,aAIvC9c,EAIJ0e,YACH,MAAMixI,EAAQt5J,KAAKc,QAAQknB,EAAApmB,QAAGkL,WAC9B,GAAIwsJ,EACA,IAAK,IAAIj8J,EAAI,EAAGA,EAAIi8J,EAAM/3J,OAAQlE,IAC9B,GAAIi8J,EAAMj8J,GAAG88B,MACT,OAAO,EAInB,OAAO,EAGJ9R,SACH,MAAMzJ,EAAiB,CACnBrgB,EAAG+1C,EAAAhC,SAASE,gBAAgBxyC,KAAKg+K,UAAUx9K,YAG/C,OADIR,KAAK69G,YAAYj/F,EAAK2/F,GAAK,GACxB3/F,EAKJyJ,eACH,MAAM5f,EAAS,CAACzI,KAAKg+K,UAAUx9K,WAQ/B,OAPazC,OAAO6qB,KAAK5oB,KAAK60C,IACzBxqC,QAAQ1J,IACKX,KAAKc,QAAQH,GACrB0J,QAAQvI,IACV2G,EAAO7C,KAAK9D,EAAKJ,eAGlB+G,EAOJ4f,YAAY1nB,GACf,GAAIX,KAAKg+K,UAAUx9K,YAAcG,EAAW,OAAO,EAEnD,MAAMioB,EAAO7qB,OAAO6qB,KAAK5oB,KAAK60C,IAC9B,IAAK,IAAIx3C,EAAI,EAAGA,EAAIurB,EAAKrnB,OAAQlE,IAAK,CAClC,MAAMyE,EAAO8mB,EAAKvrB,GACZmhL,EAAWx+K,KAAK60C,GAAG/yC,GACzB,IAAK,IAAI0I,EAAI,EAAGA,EAAIg0K,EAASj9K,OAAQiJ,IACjC,GAAIg0K,EAASh0K,GAAGhK,YAAcG,EAC1B,OAAO,EAInB,OAAO,EAIJ0nB,YAAY1nB,GACf,MAAME,EAAQ,GACd,OAAIb,KAAKg+K,UAAUx9K,YAAcG,EAAkB,CAACX,KAAKg+K,YACzDjgL,OAAO6qB,KAAK5oB,KAAK60C,IAAIxqC,QAAQvI,IACzB,MAAM08K,EAAWx+K,KAAK60C,GAAG/yC,GACzB,IAAK,IAAIzE,EAAI,EAAGA,EAAImhL,EAASj9K,OAAQlE,IAC7BmhL,EAASnhL,GAAGmD,YAAcG,GAC1BE,EAAM+E,KAAK44K,EAASnhL,MAIzBwD,GAIJwnB,QAAQrJ,GACX,MAAMvW,EAAS,GASf,OARA1K,OAAO6qB,KAAK5oB,KAAK60C,IAAIxqC,QAAQ1J,IACXX,KAAK60C,GAAGl0C,GAChB0J,QAAQ7I,IACNwd,EAAWxd,IACXiH,EAAO7C,KAAKpE,OAIjBiH,EAGJ4f,aACH,OAAQroB,KAAKg+K,UAAU90K,IAAI,+KCxenC,MAAAgf,EAAAD,EAAAhrB,EAAA,KAEaE,EAAA4vF,IAAW,GAExB,MAAM0xF,EAAO,CACTC,gBAAgB,EAChBC,OAAQ,IACRC,OAAQ,IACRC,UAAW,GACXC,UAAW,EACXC,UAAW,EACXC,eAAe,EACfC,SAAU,EACVC,SAAU,GAGd,MAAaC,EAMT92J,YAAYmlE,GACRxtF,KAAKwtF,KAAOA,EACZxtF,KAAKo/K,OAAS,KACdp/K,KAAKq/K,OAAS,KAGXh3J,WACH,OAAoB,OAAhBroB,KAAKo/K,QAAmC,OAAhBp/K,KAAKq/K,OACtB,CAACr/K,KAAKwtF,MAGN,GAAGn8E,OAAOrR,KAAKo/K,OAAO7xF,WACzBvtF,KAAKq/K,OAAO9xF,YAIjBllE,SAAStQ,EAAOunK,GAgBnB,OAfKA,IACDA,EAAQ,IAGE,IAAVvnK,EACAunK,EAAM15K,KAAK5F,OAGS,OAAhBA,KAAKo/K,QACLp/K,KAAKo/K,OAAO11K,SAASqO,EAAQ,EAAGunK,GAEhB,OAAhBt/K,KAAKq/K,QACLr/K,KAAKq/K,OAAO31K,SAASqO,EAAQ,EAAGunK,IAGjCA,GAtCfniL,EAAAgiL,OA0CAhiL,EAAA4vF,IAAIoyF,KAAOA,EAEX,MAAMI,EAAQ,SAAStpK,EAAGC,GACtBlW,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,GAIPk3E,EAAY,SAASn3E,EAAGC,EAAGie,EAAGq9B,GAChCxxD,KAAKiW,EAAIA,EACTjW,KAAKkW,EAAIA,EACTlW,KAAKm0B,EAAIA,EACTn0B,KAAKwxD,EAAIA,EACTxxD,KAAK45D,OAAS,IAAI2lH,EACdv/K,KAAKiW,EAAI/O,KAAK4C,MAAM9J,KAAKm0B,EAAI,GAC7Bn0B,KAAKkW,EAAIhP,KAAK4C,MAAM9J,KAAKwxD,EAAI,KAGrCr0D,EAAA4vF,IAAIK,UAAYA,EAKhB,MAAa92B,EAQTjuC,YAAYm3J,GASR,OARAx/K,KAAKiW,EAAIupK,EAAUvpK,EAAIqgD,EAAKhuC,IAAIS,cAAc,EAAG7hB,KAAK4C,MAAM01K,EAAUrrJ,EAAI,IAC1En0B,KAAKkW,EAAIspK,EAAUtpK,EAAIogD,EAAKhuC,IAAIS,cAAc,EAAG7hB,KAAK4C,MAAM01K,EAAUhuH,EAAI,IAC1ExxD,KAAKm0B,EAAIqrJ,EAAUrrJ,GAAKn0B,KAAKiW,EAAIupK,EAAUvpK,GAAK,EAChDjW,KAAKwxD,EAAIguH,EAAUhuH,GAAKxxD,KAAKkW,EAAIspK,EAAUtpK,GAAK,EAChDlW,KAAKm0B,GAAKmiC,EAAKhuC,IAAIS,cAAc,EAAG/oB,KAAKm0B,EAAI,GAC7Cn0B,KAAKwxD,GAAK8E,EAAKhuC,IAAIS,cAAc,EAAG/oB,KAAKwxD,EAAI,GACzCxxD,KAAKm0B,EAAIsqJ,EAAKQ,WAAWj/K,KAAKm0B,EAAIsqJ,EAAKQ,UACvCj/K,KAAKwxD,EAAIitH,EAAKS,WAAWl/K,KAAKwxD,EAAIitH,EAAKS,UACpCl/K,KAIJqoB,WACH,MAAM+C,EAAQ,GACRkC,EAASttB,KAAKiW,EACdsY,EAAOjB,GAAUttB,KAAKm0B,EAAI,GAC1B5G,EAASvtB,KAAKkW,EACdsY,EAAOjB,GAAUvtB,KAAKwxD,EAAI,GAChC,IAAK,IAAIv7C,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5B,IAAK,IAAIC,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5BkV,EAAMxlB,KAAK,CAACqQ,EAAGC,IAGvB,OAAOkV,EAIJ/C,iBACH,MAAOmC,EAAIC,GAAM,CAACzqB,KAAKiW,EAAI,EAAGjW,KAAKkW,EAAI,IAChCyU,EAAMC,GAAQ,CAAC5qB,KAAKiW,EAAIjW,KAAKm0B,EAAI,EAAGn0B,KAAKkW,EAAIlW,KAAKwxD,EAAI,GAC7D,OAAOrmC,EAAaX,EAAIC,EAAIE,EAAMC,GAI/BvC,iBACH,MAAOmC,EAAIC,GAAM,CAACzqB,KAAKiW,EAAGjW,KAAKkW,IACxByU,EAAMC,GAAQ,CAAC5qB,KAAKiW,EAAIjW,KAAKm0B,EAAI,EAAGn0B,KAAKkW,EAAIlW,KAAKwxD,EAAI,GAC7D,OAAOrmC,EAAaX,EAAIC,EAAIE,EAAMC,IAO1C,SAASO,EAAaX,EAAIC,EAAIE,EAAMC,GAChC,MAAMjpB,EAAM,GACZ,IAAK,IAAIsU,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACxB,IAAK,IAAIC,EAAIuU,EAAIvU,GAAK0U,EAAM1U,IACnBA,IAAMuU,GAAMvU,IAAM0U,GAAQ3U,IAAMuU,GAAMvU,IAAM0U,GAC7ChpB,EAAIiE,KAAK,CAACqQ,EAAGC,IAIzB,OAAOvU,EA9DXxE,EAAAm5D,OAiDAA,EAAKhuC,IAAMJ,EAAAtmB,QAAI6mB,IAEftrB,EAAA4vF,IAAIz2B,KAAOA,EAgBX,MAAa02B,EAKT3kE,YAAYo3J,EAAO,IACfz/K,KAAK0/K,MAAQjB,EACb1gL,OAAO6qB,KAAK62J,GAAMp1K,QAAQzL,IAClBoB,KAAK0/K,MAAMxgL,eAAeN,KAC1BoB,KAAK0/K,MAAM9gL,GAAO6gL,KAG1Bz/K,KAAKsoB,IAAMtoB,KAAK0/K,MAAMp3J,KAAOJ,EAAAtmB,QAAI6mB,IAI9BJ,WAAWsD,EAAIkD,GAClB,MAAM4qD,EAAO,GACP3f,EAAUnuC,EAAGiuC,OACbG,EAAUlrC,EAAG+qC,OACnB,GAAIE,EAAQ7jD,IAAM8jD,EAAQ9jD,EAAG,CACzB,MAAMsX,EAASusC,EAAQ5jD,EAAI6jD,EAAQ7jD,EAAI6jD,EAAQ7jD,EAAI4jD,EAAQ5jD,EACrDsY,EAAOsrC,EAAQ5jD,EAAI6jD,EAAQ7jD,EAAI6jD,EAAQ7jD,EAAI4jD,EAAQ5jD,EAEzD,IAAK,IAAIA,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5BujE,EAAK7zE,KAAK,CAACk0D,EAAQ7jD,EAAGC,QAGzB,CACD,MAAMoX,EAASwsC,EAAQ7jD,EAAI8jD,EAAQ9jD,EAAI8jD,EAAQ9jD,EAAI6jD,EAAQ7jD,EACrDsY,EAAOurC,EAAQ7jD,EAAI8jD,EAAQ9jD,EAAI8jD,EAAQ9jD,EAAI6jD,EAAQ7jD,EAEzD,IAAK,IAAIA,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAC5BwjE,EAAK7zE,KAAK,CAACqQ,EAAG6jD,EAAQ5jD,IAG9B,OAAOujE,EAGJpxD,eAAem3J,EAAWG,GAC7B,MAAMC,EAAO,IAAIT,EAAKK,GACtB,GAAIx/K,KAAK6/K,cAAcL,IACN,IAATG,EAAY,CACZ,MAAMG,EAAK9/K,KAAK+/K,YAAYP,GAC5BI,EAAKR,OAASp/K,KAAKstF,eAAewyF,EAAG,GAAIH,EAAO,GAChDC,EAAKP,OAASr/K,KAAKstF,eAAewyF,EAAG,GAAIH,EAAO,GAGxD,OAAOC,EAGJv3J,cAAc23J,GACjB,OAAIhgL,KAAK0/K,MAAMV,eACJgB,EAAK7rJ,GAAKn0B,KAAK0/K,MAAMZ,WAAakB,EAAKxuH,GAAKxxD,KAAK0/K,MAAMX,UAK/D12J,YAAYm3J,GACf,IAAIS,EACAC,EACJ,GAAIlgL,KAAKsoB,IAAI3C,cAAgB3lB,KAAK0/K,MAAMb,WAWpC,GATAoB,EAAK,IAAI7yF,EACLoyF,EAAUvpK,EAAGupK,EAAUtpK,EACvBlW,KAAKsoB,IAAIS,cAAc,EAAGy2J,EAAUrrJ,GAAIqrJ,EAAUhuH,GAEtD0uH,EAAK,IAAI9yF,EACLoyF,EAAUvpK,EAAIgqK,EAAG9rJ,EAAGqrJ,EAAUtpK,EAC9BspK,EAAUrrJ,EAAI8rJ,EAAG9rJ,EAAGqrJ,EAAUhuH,GAG9BxxD,KAAK0/K,MAAMhB,gBACP1+K,KAAKmgL,iBAAiBF,EAAIC,GAC1B,OAAOlgL,KAAK+/K,YAAYP,QAehC,GATAS,EAAK,IAAI7yF,EACLoyF,EAAUvpK,EAAGupK,EAAUtpK,EACvBspK,EAAUrrJ,EAAGn0B,KAAKsoB,IAAIS,cAAc,EAAGy2J,EAAUhuH,IAErD0uH,EAAK,IAAI9yF,EACLoyF,EAAUvpK,EAAGupK,EAAUtpK,EAAI+pK,EAAGzuH,EAC9BguH,EAAUrrJ,EAAGqrJ,EAAUhuH,EAAIyuH,EAAGzuH,GAG9BxxD,KAAK0/K,MAAMhB,gBACP1+K,KAAKogL,iBAAiBH,EAAIC,GAC1B,OAAOlgL,KAAK+/K,YAAYP,GAIpC,MAAO,CAACS,EAAIC,GAGT73J,iBAAiB43J,EAAIC,GACxB,MAAMG,EAAWJ,EAAG9rJ,EAAI8rJ,EAAGzuH,EACrB8uH,EAAWJ,EAAG/rJ,EAAI+rJ,EAAG1uH,EAC3B,OAAO6uH,EAAWrgL,KAAK0/K,MAAMd,QAAU0B,EAAWtgL,KAAK0/K,MAAMd,OAG1Dv2J,iBAAiB43J,EAAIC,GACxB,MAAMK,EAAWN,EAAGzuH,EAAIyuH,EAAG9rJ,EACrBqsJ,EAAWN,EAAG1uH,EAAI0uH,EAAG/rJ,EAC3B,OAAOosJ,EAAWvgL,KAAK0/K,MAAMf,QAAU6B,EAAWxgL,KAAK0/K,MAAMf,OAM1Dt2J,gBAAgBpR,EAAMC,EAAMyoK,EAAO,GACtC,MAAMxyF,EAAgB,IAAIC,EAAU,EAAG,EAAGn2E,EAAMC,GAC1CupK,EAAgBzgL,KAAKstF,eAAeH,EAAewyF,GAEnDe,EAAQD,EAAclzF,WACtB5zB,EAAQ,GASd,OARA+mH,EAAMr2K,QAAQmjF,IACV7zB,EAAM/zD,KAAK,IAAI0wD,EAAKk3B,MAGxBxtF,KAAK2gL,UAAY,CACblsF,KAAMgsF,EAAe9mH,SAGlB,CAAC8mH,EAAe9mH,GAGpBtxC,wBAAwBpR,EAAMC,EAAMyoK,EAAO,GAC9C,MAAMxyF,EAAgB,IAAIC,EAAU,EAAG,EAAGn2E,EAAMC,GAC1CupK,EAAgBzgL,KAAKstF,eAAeH,EAAewyF,GAEnDe,EAAQD,EAAclzF,WACtB5zB,EAAQ,GACd+mH,EAAMr2K,QAAQmjF,IACV7zB,EAAM/zD,KAAK,IAAI0wD,EAAKk3B,MAGxB,MAAMkC,EAAQ,GAMd,OALA1vF,KAAK4gL,YAAYH,EAAe/wF,GAEhC1vF,KAAK2gL,UAAY,CACblsF,KAAMgsF,EAAe9mH,QAAO+1B,SAEzB,CAAC+wF,EAAe9mH,EAAO+1B,GAM3BrnE,YAAYosE,EAAM/E,GACrB,GAAoB,OAAhB+E,EAAK2qF,QAAmC,OAAhB3qF,EAAK4qF,OAC7B,MAAO,GAEX,MAAM5lG,EAAOz5E,KAAK6gL,WAAWpsF,EAAK2qF,OAAO5xF,KAAMiH,EAAK4qF,OAAO7xF,MAM3D,OALI/T,EAAKl4E,OAAS,GACdmuF,EAAM9pF,KAAK6zE,GAEfz5E,KAAK4gL,YAAYnsF,EAAK2qF,OAAQ1vF,GAC9B1vF,KAAK4gL,YAAYnsF,EAAK4qF,OAAQ3vF,GACvBA,EAGJrnE,IAAIvmB,GACP,OAAI9B,KAAK2gL,UAAUzhL,eAAe4C,GACvB9B,KAAK2gL,UAAU7+K,GAEnB,MAzKf3E,EAAA6vF,SA6KA7vF,EAAA4vF,IAAIC,OAASA,qKCvUb,MAAAhlE,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACAo+I,EAAAp+I,EAAA,IACAwtF,EAAAxtF,EAAA,IAEAA,EAAA,IAEA,MACMkH,EADNlH,EAAA,EACcq3B,CAAI,sBAEZwsJ,EAAcr2F,EAAA2G,MAAMS,MAAMkvF,OAC1Bt4J,EAAMpL,EAAAC,OAAOC,SAEbyjK,EAAmB,OACnBC,EAAiB,GA2BvB9jL,EAAAg0F,cAAA,MAoCI9oE,YAAY4oE,EAAQC,GAChBlxF,KAAKixF,OAASA,EACdjxF,KAAKkxF,OAASA,EAGdlxF,KAAKqxF,UAAY,CAAC,EAAG,EAAG,EAAG,GAE3BrxF,KAAKsxF,UAAY,GAEjBtxF,KAAK6yF,UAAY,CACbquF,UAAWF,GAGfhhL,KAAK+gL,OAAS1lC,EAAA9rB,SAASe,eAAewwD,GACtC9gL,KAAKmyF,UAAY,GAGjBnyF,KAAKmhL,oBAAqB,EAI1BnhL,KAAKohL,oBAAqB,EAM1BphL,KAAKqhL,KAAO,EAEZrhL,KAAKshL,aAAe,GACpBthL,KAAKuhL,WAAa,GAElBvhL,KAAKwhL,oBAAsB,CAAC,IAAK,IAAK,IAAK,KAE3CxhL,KAAKyhL,cAAgB,CACjB/vK,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IAI5B7R,KAAK0hL,oBAAsB,GAI/Br5J,UAAUy4J,GACqB,iBAAhBA,GACP9gL,KAAK+gL,OAAS1lC,EAAA9rB,SAASe,eAAewwD,GACtC9gL,KAAK+gL,OAAOrxJ,QAAQ,OAAQ,YAG5B1vB,KAAK+gL,OAASD,EAAYn6K,QAC1B3G,KAAK+gL,OAAOrxJ,QAAQ,OAAQ,WAKpCrH,aAAas5J,GACT3hL,KAAKmyF,UAAY,GACY,iBAAlBwvF,EAAW,GAClB3hL,KAAKmyF,UAAYwvF,EAAWtsK,IAAI9W,GAAK88I,EAAA9rB,SAASe,eAAe/xH,IAG7DyB,KAAKmyF,UAAYwvF,EAKzBt5J,YAAYu5J,GACiB,iBAAdA,EACL5hL,KAAKmyF,UAAUvsF,KAAKy1I,EAAA9rB,SAASe,eAAesxD,IAEzCA,aAAqBvmC,EAAA9rB,SAAS0B,cACnCjxH,KAAKmyF,UAAUvsF,KAAKg8K,GAK5Bv5J,aAAa9R,GACTvW,KAAKqxF,UAAY96E,EAKrB8R,aAAa9I,GACTvf,KAAKsxF,UAAY/xE,EAMrB8I,kBAAkB1J,GACd3e,KAAK2yF,eAAiBh0E,EAAK9f,KAAKmB,MAKpCqoB,iBAAiB1J,GACb3e,KAAK0yF,cAAgB/zE,EAAK9f,KAAKmB,MAInCqoB,YAAYzqB,EAAMoxB,GACVhvB,KAAK6yF,UAAU3zF,eAAetB,GACZ,mBAAPoxB,EACPhvB,KAAK6yF,UAAUj1F,GAAQoxB,EAGvBhH,EAAApmB,QAAGK,IAAI,gBAAiB,mDACiB+sB,KAI7ChH,EAAApmB,QAAGK,IAAI,gBAAiB,iCACDrE,KAK/ByqB,IAAIjkB,GACmB,CAAC,iBAAkB,gBAAiB,YACvD,aACWiG,QAAQlL,IACXiF,EAAIlF,eAAeC,IAEnBa,KADe,MAAQb,EAAE29B,cACZ14B,EAAIjF,MAIrBiF,EAAIytF,OAASztF,EAAIytF,MAAMkvF,QACvB/gL,KAAKgzF,UAAU5uF,EAAIytF,MAAMkvF,QAGzB38K,EAAIiuF,QAAUjuF,EAAIiuF,OAAOzwF,SACzB5B,KAAKoyF,aAAahuF,EAAIiuF,OAAOzwF,SAMrCymB,SACkC,IAA1BroB,KAAKmyF,UAAU5wF,QACfymB,EAAApmB,QAAGK,IAAI,gBAAiB,SACpB,wDAGRjC,KAAK6hL,+BAGL7hL,KAAK8hL,0BAEL,IAAIC,GAAe,EACfC,EAAgB,GAEpB,KAAOD,GAAc,GACf/hL,KAAKqhL,KACPrhL,KAAKs0B,sCAAsC0tJ,QAC3ChiL,KAAKiiL,kBAEL,IAAI3wF,EAAY,EAChB,MAAM4wF,EAAYliL,KAAKsxF,UACvB,IAAIxqE,EAAW,EACXq7J,GAAW,EAEf,KAAOr7J,EAAW,KAAQq7J,GAAU,CAGhC,MAAMvwH,EAAO5xD,KAAKoiL,0BAClB,GAAa,OAATxwH,EAAe,CACfuwH,GAAW,EACX,MAGJ,MAAMlsK,EAACA,EAACC,EAAEA,GAAK07C,EACf5xD,KAAKs0B,uBAAuBre,KAAKC,KACjC,MAAMmrH,EAAQrhI,KAAKqiL,cAAczwH,GACjC5xD,KAAKs0B,0BAA0B+sG,KAG/B,MAAMihD,EAAS75J,EAAIjL,aAAa6jH,GAChCrhI,KAAKs0B,mBAAmBguJ,mBAGxB,MAAM7lC,EAAWz8I,KAAKuiL,gBAAgBD,GAChCzpJ,EAAO74B,KAAKwiL,SAASvsK,EAAGwmI,GACxB3jH,EAAO94B,KAAKyiL,SAASvsK,EAAGumI,GAE9B,GAAI5jH,IAAS5iB,GAAK6iB,IAAS5iB,EAAG,CAC1B,IAAI7R,aAAiB4R,KAAKC,QAAQ2iB,KAAQC,IAC1Cz0B,qBAAyBi+K,QAAa7lC,IACtCz0H,EAAApmB,QAAGK,IAAI,gBAAiB,SAAUoC,GAItC,MAAMq+K,EAAa1iL,KAAK2iL,iBAAiB9pJ,EAAMC,EAAM2jH,GAarD,GAVIz8I,KAAK4iL,aAAa/pJ,EAAMC,KACxB94B,KAAK6iL,WACD5sK,EAAGC,EAAGosK,EAAQzpJ,EAAMC,EAAM2jH,EAAUimC,KACtCpxF,EACFtxF,KAAKs0B,IAAI,6BAA+Bg9D,MAI1CxqE,GAEiB,IAAfo7J,GAAoB5wF,GAAa4wF,EAAW,CAC5CH,GAAe,EACf,OAIR,GAAIzwF,GAAa4wF,IAA4B,IAAfA,EAC1BH,GAAe,MAEd,IAAwB,KAAlBC,EAAqB,CAC5Bh6J,EAAApmB,QAAG+C,KAAK,iBAAkB,SACtB,6CACJ,MAGA3E,KAAK8iL,wBAEP9iL,KAAKqhL,KAGXrhL,KAAK+iL,kBAIT16J,+BACI,MAAM26J,EAAWhjL,KAAKwhL,oBAAoBnsK,IAAI/B,GAAO,IAAIg8B,OAAOh8B,IAChEtT,KAAKmyF,UAAU9nF,QAAQ4oH,IACnB,MAAM3/G,EAAM2/G,EAAMnyH,QAAQ,OAC1B,GAAIwS,EAAK,CACLtT,KAAKwhL,oBAAoBn3K,QAAQ,CAAC44K,EAAW5lL,KACrC2lL,EAAS3lL,GAAGw5B,KAAKvjB,IACjBtT,KAAKyhL,cAAcwB,GAAWr9K,KAAKqtH,KAK3C,MAAMiwD,EAAY5vK,EAAIzO,MAAM,IAAIsM,OAAO+S,KAAK,IACvClkB,KAAK0hL,oBAAoBwB,KAC1BljL,KAAK0hL,oBAAoBwB,GAAa,IAE1CljL,KAAK0hL,oBAAoBwB,GAAWt9K,KAAKqtH,MAQrD5qG,kBAEIroB,KAAKmjL,WAAa,GAClBnjL,KAAKojL,WAAa,GAClB,IAAK,IAAIntK,EAAI,EAAGA,EAAIjW,KAAKixF,OAAQh7E,IAC7B,GAAKjW,KAAKqxF,UAAwBp7E,EAC9BjW,KAAKmjL,WAAWv9K,KAAM5F,KAAKqxF,UAAwBp7E,OAElD,CACD,MAAMotK,EAAU,CAACrjL,KAAKqxF,UAAU,GAAIrxF,KAAKqxF,UAAU,IACnDrxF,KAAKmjL,WAAWv9K,KAAKy9K,GAG7B,IAAK,IAAIntK,EAAI,EAAGA,EAAIlW,KAAKkxF,OAAQh7E,IAC7B,GAAKlW,KAAKqxF,UAAwBn7E,EAC9BlW,KAAKojL,WAAWx9K,KAAM5F,KAAKqxF,UAAwBn7E,OAElD,CACD,MAAMotK,EAAU,CAACtjL,KAAKqxF,UAAU,GAAIrxF,KAAKqxF,UAAU,IACnDrxF,KAAKojL,WAAWx9K,KAAK09K,GAK7BtjL,KAAKujL,YAAc,GACnB,IAAK,IAAIttK,EAAI,EAAGA,EAAIjW,KAAKixF,OAAQh7E,IAAK,CAClCjW,KAAKujL,YAAYttK,GAAK,GACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkxF,OAAQh7E,IAAK,CAClC,MAAMstK,EAASxjL,KAAKmjL,WAAWltK,GAAG5E,OAAOrR,KAAKojL,WAAWltK,IACzDlW,KAAKujL,YAAYttK,GAAGC,GAAKlW,KAAKyjL,SAASxtK,GAAGC,GAAGq7G,SAASiyD,IAM9DxjL,KAAKqV,IAAM,GACXrV,KAAK0jL,eAAiB,GACtB,IAAI54J,EAAM,EACNE,EAAM,EACV,IAAK,IAAIk7E,EAAQ,EAAGA,EAAQlmG,KAAKixF,OAAQiV,IAAS,CAC9C,MAAMy9E,EAAU3jL,KAAKujL,YAAYr9E,GAAO,GAAG3kG,OAC3CypB,EAAMF,EAAM64J,EAAU,EAEtB,IAAK,IAAItmL,EAAI,EAAGA,EAAIsmL,EAAStmL,IAAK,CAC9B,IAAI4tB,EAAM,EACNF,EAAM,EACN64J,EAAW,GACf,IAAK,IAAIz9E,EAAQ,EAAGA,EAAQnmG,KAAKkxF,OAAQiV,IAAS,CAC9C,MAAMiG,EAAUpsG,KAAKujL,YAAYr9E,GAAOC,GAAO9oG,GACzCwmL,EAAaz3E,EAAQ7qG,OAC3B0pB,EAAMF,EAAM84J,EAAa,EACzBD,EAAWA,EAASvyK,OAAO+6F,GAE3BpsG,KAAK0jL,eAAex9E,EAAQ,IAAMC,GAAS,CACvCvoG,KAAMoC,KAAKyjL,SAASv9E,GAAOC,GAAOrlG,QAAQ,QAC1CiB,KAAM/B,KAAKyjL,SAASv9E,GAAOC,GAAOrlG,QAAQ,QAC1CgqB,MAAKE,MAAKD,MAAKE,MAAKi7E,QAAOC,SAE/Bp7E,GAAO84J,EAEX7jL,KAAKqV,IAAIzP,KAAKg+K,GAElB94J,GAAO64J,GAIft7J,gBACI,OAAOroB,KAAK0jL,eAIhBr7J,SAKI,OAJKroB,KAAKqV,KACN2S,EAAApmB,QAAG+C,KAAK,gBAAiB,SACrB,0CAED3E,KAAKqV,IAKhBgT,aAAaigB,GACT,MAAM7/B,EAAS,GAQf,OAPA1K,OAAO6qB,KAAK0f,GAAOj+B,QAAQzL,IACvBoB,KAAKmyF,UAAU9nF,QAAQ9L,IACfA,EAAEuC,QAAQlC,KAAS0pC,EAAM1pC,IACzB6J,EAAO7C,KAAKrH,OAIpBkK,EAAOlH,OAAS,EACTknB,EAAIjL,aAAa/U,GAErB,KAKX4f,eAAeigB,GACX,MAAM1pC,EAAMb,OAAO6qB,KAAK0f,GAAO,GACzBppB,EAAQlf,KAAKmyF,UAAU3lE,UAAUjuB,GACnCA,EAAEuC,QAAQlC,KAAS0pC,EAAM1pC,IAEzBsgB,GAAS,GACTlf,KAAKmyF,UAAUzlE,OAAOxN,EAAO,GAOrCmJ,QAAQ4qG,EAAOh9G,EAAGC,GACd,MAAM07C,EAAO,CAAC37C,IAAGC,IAAG07C,KAAMqhE,GAC1BjzH,KAAK8jL,aAAalyH,GAClB5xD,KAAK+jL,4BAA4BnyH,GACjC5xD,KAAKgkL,mBAAmBpyH,GACxB5xD,KAAKyjL,SAASxtK,GAAGC,GAAK+8G,EAO1B5qG,iBAAiBpS,EAAGC,EAAGumI,KACjBz8I,KAAKqhL,KACP,IAAIvxH,EAAO,KAMX,GALmC,mBAAxB9vD,KAAK2yF,iBACZ7iC,EAAO9vD,KAAK2yF,eAAe18E,EAAGC,EAAGumI,KAIhC3sF,GAAQ9vD,KAAKmhL,mBAAoB,CAClCnhL,KAAKs0B,kCAAkCre,KAAKC,KAC5C,MAAM+tK,EAAYjkL,KAAKkkL,oBAAoBjuK,EAAGC,GACxCiuK,EAAenkL,KAAKokL,mBAAmBH,GAC7C,GAAIE,EAAa5iL,OAAS,EACtB,OAAOvB,KAAKqkL,iBAAiBF,GAEjC,IAAI9/K,UAAc4R,KAAKC,IAKvB,GAJA7R,gBAAoB4/K,EAAU,aAAaA,EAAU,KACrDj8J,EAAApmB,QAAG+C,KAAK,gBAAiB,2CACGN,KAExBrE,KAAKohL,mBAAoB,CACzBphL,KAAK+iL,kBACL/6J,EAAApmB,QAAGiiB,SAAS7jB,KAAKqV,KACjB,MAAM1L,KAASsM,KAAKC,eAAe2I,KAAKC,UAAUmlK,KAClD,MAAM,IAAIv/K,MAAMiF,IAIxB,IAAKmmD,EAAM,CACP,MAAMq0H,EAAenkL,KAAKyhL,cAAchlC,GACxC,OAAOh0H,EAAIjL,aAAa2mK,GAI5B,QADEnkL,KAAKqhL,KACAvxH,EAKXznC,iBAAiBtiB,GACb,IAAK/F,KAAKopB,QACN,OAAOX,EAAIjL,aAAazX,GAE5B,MAAMqjB,EAAU,GACVmrG,EAAQxuH,EAAKsP,IAAI9W,GAAKA,EAAEuC,QAAQ,SAChCwjL,EAAc,GACpB/vD,EAAMlqH,QAAQ,CAACzM,EAAMP,KACjBinL,EAAY1mL,GAAQP,EAChB2C,KAAKopB,QAAQlqB,eAAetB,GAC5BwrB,EAAQxrB,GAAQoC,KAAKopB,QAAQxrB,GAG7BwrB,EAAQxrB,GAAQ,IAGxB,MAAM2mL,EAAa97J,EAAIugB,YAAY5f,GACnC,OAAOrjB,EAAKu+K,EAAYC,IAG5Bl8J,0BACI,OAAIroB,KAAKshL,aAAa//K,OAAS,EACpBknB,EAAIjL,aAAaxd,KAAKshL,cAE1B,KAGXj5J,cAAcupC,GACV,MAAM37C,EAACA,EAACC,EAAEA,GAAK07C,EACThzD,EAAMqX,EAAI,IAAMC,EACtB,OAAIlW,KAAKuhL,WAAW3iL,GACToB,KAAKuhL,WAAW3iL,IAGvBopB,EAAApmB,QAAGK,IAAI,gBAAiB,sBACdrD,YAAcigB,KAAKC,UAAU8yC,MAEpC,MAGXvpC,kBAAkBpS,EAAGC,EAAGosK,GACpB,MAAM1jL,EAAMqX,EAAI,IAAMC,EAChBmrH,EAAQrhI,KAAKuhL,WAAW3iL,GAC9BoB,KAAKs0B,IAAIzV,KAAKC,UAAU9e,KAAKuhL,aAC7BvhL,KAAKs0B,OAAOre,KAAKC,sBAAsBosK,KACvCtiL,KAAKs0B,eAAe+sG,EAAM9/H,UAC1B,MAAM2d,EAAQmiH,EAAMthH,QAAQuiK,GAC5B,GAAIpjK,GAAS,EAAG,CAEZ,GADAlf,KAAKuhL,WAAW3iL,GAAK8tB,OAAOxN,EAAO,GACC,IAAhClf,KAAKuhL,WAAW3iL,GAAK2C,OAAc,CACnC,MAAMijL,EAAcxkL,KAAKshL,aAAa90J,UAAUolC,GACrCA,EAAK37C,IAAMA,GAAK27C,EAAK17C,IAAMA,GAElCsuK,GAAe,GACfxkL,KAAKshL,aAAa50J,OAAO83J,EAAa,UAC/BxkL,KAAKuhL,WAAW3iL,GACvBoB,KAAKs0B,OAAOre,KAAKC,mCAGjB8R,EAAApmB,QAAGK,IAAI,gBAAiB,mCACLgU,KAAKC,+BAG5BlW,KAAKuhL,WAAW3iL,IAChBoB,KAAKs0B,mBAAmB11B,oBAClBigB,KAAKC,UAAU9e,KAAKuhL,WAAW3iL,SAGxC,CACD,MAAMggB,EAAOC,KAAKC,UAAU9e,KAAKyjL,SAASxtK,GAAGC,IAC7C8R,EAAApmB,QAAGK,IAAI,gBAAiB,uBACjBgU,KAAKC,UAAUosK,uBAA4B1jK,MAI1DyJ,aAAapS,EAAGC,GACZ,OAAID,GAAK,GAAKA,EAAIjW,KAAKixF,QAAU/6E,GAAK,GAAKA,EAAIlW,KAAKkxF,OAQxD7oE,oBACMroB,KAAKqhL,KACP,IAAIzvH,EAAO,KACX,GAAkC,mBAAvB5xD,KAAK0yF,cACZ9gC,EAAO5xD,KAAK0yF,gBACE,CAAC,IAAK,IAAK,QACnBroF,QAAQlL,IACV,IAAKyyD,EAAK1yD,eAAeC,GAAI,CACzB,MAAMkF,EAAM,+BACZ2jB,EAAApmB,QAAGK,IAAI,gBAAiB,0BACZ9C,iBAAiBkF,aAIpC,CACD,MAAM4R,EAAIwS,EAAIM,cAAc,EAAG/oB,KAAKixF,OAAS,GACvC/6E,EAAIuS,EAAIM,cAAc,EAAG/oB,KAAKkxF,OAAS,GAC7Ct/B,EAAO,CAAC37C,IAAGC,IAAG07C,KAAM5xD,KAAKykL,qBAG7BzkL,KAAKs0B,IAAI,eAAiBzV,KAAKC,UAAU8yC,IACzC5xD,KAAKyjL,SAAS7xH,EAAK37C,GAAG27C,EAAK17C,GAAK07C,EAAKA,KAExB,OAATA,GACA5xD,KAAK8jL,aAAalyH,GAClB5xD,KAAKgkL,mBAAmBpyH,IAGxB5pC,EAAApmB,QAAGK,IAAI,gBAAiB,kBACpB,oCAENjC,KAAKqhL,KAIXh5J,WAAWpS,EAAGC,EAAGosK,EAAQzpJ,EAAMC,EAAM2jH,EAAUimC,GAE3C1iL,KAAK0kL,kBAAkBzuK,EAAGC,EAAGosK,GAG7B,MAAM1wH,EAAO,CAAC37C,EAAG4iB,EAAM3iB,EAAG4iB,EAAM84B,KAAM8wH,GACtC1iL,KAAK8jL,aAAalyH,GAGlB5xD,KAAK0kL,kBAAkB7rJ,EAAMC,EAAM2jH,GAGnCz8I,KAAK+jL,4BAA4BnyH,GAEjC5xD,KAAKgkL,mBAAmBpyH,GAGxB5xD,KAAKyjL,SAAS5qJ,GAAMC,GAAQ4pJ,EAIhCr6J,aAAaupC,GACT,MAAM+yH,EAAU/yH,EAAKA,KAAK9wD,QAAQ,OAClC,GAAI6jL,EAAS,CACT3kL,KAAKshL,aAAa17K,KAAKgsD,GACvB,MAAMyvE,EAAQsjD,EAAQ9/K,MAAM,IACtBjG,EAAMgzD,EAAK37C,EAAI,IAAM27C,EAAK17C,EAChClW,KAAKuhL,WAAW3iL,GAAOyiI,EACvBrhI,KAAKs0B,IAAI,cAAgBzV,KAAKC,UAAU8yC,GAAO,KAKvDvpC,gBAAgBi6J,GACZ,GAAItiL,KAAK4kL,UACD5kL,KAAK4kL,SAAS1lL,eAAeojL,GAC7B,OAAOtiL,KAAK4kL,SAAStC,GAG7B,OAAQA,GACJ,IAAK,IAAK,MAAO,IACjB,IAAK,IAAK,MAAO,IACjB,IAAK,IAAK,MAAO,IACjB,IAAK,IAAK,MAAO,IACjB,QAAS,MAAO,KAMxBj6J,SAASpS,EAAG3C,GACR,IAAIuxK,EAAWvxK,EAMf,OALItT,KAAK8kL,eACD9kL,KAAK8kL,cAAcxxK,KACnBuxK,EAAW7kL,KAAK8kL,cAAcxxK,IAGrB,MAAbuxK,EAA0B5uK,EAAI,EACjB,MAAb4uK,EAA0B5uK,EAAI,EAC3BA,EAMXoS,SAASnS,EAAG5C,GACR,IAAIuxK,EAAWvxK,EAMf,OALItT,KAAK8kL,eACD9kL,KAAK8kL,cAAcxxK,KACnBuxK,EAAW7kL,KAAK8kL,cAAcxxK,IAGrB,MAAbuxK,EAA0B3uK,EAAI,EACjB,MAAb2uK,EAA0B3uK,EAAI,EAC3BA,EAGXmS,oBACI,OAAOI,EAAIjL,aAAaxd,KAAKmyF,WAKjC9pE,mBAAmBupC,GACf,MAAM37C,EAACA,EAACC,EAAEA,GAAK07C,EACL,IAAN37C,IACIjW,KAAK+kL,SAAS,IAAK9uK,EAAGC,IACtBlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG,KAE7BlW,KAAKglL,eACLhlL,KAAKilL,qBAAqBhvK,EAAGC,EAAG,MAIpCD,IAAMjW,KAAKixF,OAAS,IAChBjxF,KAAK+kL,SAAS,IAAK9uK,EAAGC,IACtBlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG,KAE7BlW,KAAKglL,eACLhlL,KAAKilL,qBAAqBhvK,EAAGC,EAAG,MAI9B,IAANA,IACIlW,KAAK+kL,SAAS,IAAK9uK,EAAGC,IACtBlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG,KAE7BlW,KAAKglL,eACLhlL,KAAKilL,qBAAqBhvK,EAAGC,EAAG,MAIpCA,IAAMlW,KAAKkxF,OAAS,IAChBlxF,KAAK+kL,SAAS,IAAK9uK,EAAGC,IACtBlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG,KAE7BlW,KAAKglL,eACLhlL,KAAKilL,qBAAqBhvK,EAAGC,EAAG,MAQ5CmS,qBAAqBpS,EAAGC,EAAG5C,GACvB,MAAMuxK,EAAW7kL,KAAKglL,cAAc1xK,GAChCtT,KAAK+kL,SAASF,EAAU5uK,EAAGC,IAC3BlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG2uK,GAMrCx8J,4BAA4BupC,GACxB,MAAM37C,EAACA,EAACC,EAAEA,GAAK07C,EAGf,GADA5xD,KAAKs0B,iBAAiBre,KAAKC,KACvBD,EAAI,EAAG,CACP,MAAMu8C,EAAKv8C,EAAI,EACVjW,KAAKklL,UAAU1yH,EAAIt8C,KACpBlW,KAAKmlL,gBAAgB,IAAKlvK,EAAGC,GAC7BlW,KAAKmlL,gBAAgB,IAAK3yH,EAAIt8C,GAC1BlW,KAAKglL,gBACLhlL,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcnzK,EAAGoE,EAAGC,GAC9ClW,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcpzK,EAAG4gD,EAAIt8C,KAK3D,GAAID,EAAIjW,KAAKixF,OAAS,EAAG,CACrB,MAAMz+B,EAAKv8C,EAAI,EACVjW,KAAKklL,UAAU1yH,EAAIt8C,KACpBlW,KAAKmlL,gBAAgB,IAAKlvK,EAAGC,GAC7BlW,KAAKmlL,gBAAgB,IAAK3yH,EAAIt8C,GAC1BlW,KAAKglL,gBACLhlL,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcpzK,EAAGqE,EAAGC,GAC9ClW,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcnzK,EAAG2gD,EAAIt8C,KAK3D,GAAIA,EAAI,EAAG,CACP,MAAMu8C,EAAKv8C,EAAI,EACVlW,KAAKklL,UAAUjvK,EAAGw8C,KACnBzyD,KAAKmlL,gBAAgB,IAAKlvK,EAAGC,GAC7BlW,KAAKmlL,gBAAgB,IAAKlvK,EAAGw8C,GACzBzyD,KAAKglL,gBACLhlL,KAAKmlL,gBAAgBnlL,KAAKglL,cAActzK,EAAGuE,EAAGC,GAC9ClW,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcrzK,EAAGsE,EAAGw8C,KAK1D,GAAIv8C,EAAIlW,KAAKkxF,OAAS,EAAG,CACrB,MAAMz+B,EAAKv8C,EAAI,EACVlW,KAAKklL,UAAUjvK,EAAGw8C,KACnBzyD,KAAKmlL,gBAAgB,IAAKlvK,EAAGC,GAC7BlW,KAAKmlL,gBAAgB,IAAKlvK,EAAGw8C,GACzBzyD,KAAKglL,gBACLhlL,KAAKmlL,gBAAgBnlL,KAAKglL,cAAcrzK,EAAGsE,EAAGC,GAC9ClW,KAAKmlL,gBAAgBnlL,KAAKglL,cAActzK,EAAGuE,EAAGw8C,MAO9DpqC,UAAUpS,EAAGC,GACT,MAAM6qK,EAAiD,WAAxC/gL,KAAKyjL,SAASxtK,GAAGC,GAAGpV,QAAQ,QAE3C,OADAd,KAAKs0B,oBAAoBre,KAAKC,MAAM6qK,KAC7BA,EAGX14J,gBAAgB/U,EAAK2C,EAAGC,GAChBlW,KAAK+kL,SAASzxK,EAAK2C,EAAGC,IACtBlW,KAAK0kL,kBAAkBzuK,EAAGC,EAAG5C,GAIrC+U,SAAS/U,EAAK2C,EAAGC,GACb,MAAMtX,EAAMqX,EAAI,IAAMC,EACtB,QAAIlW,KAAKuhL,WAAW3iL,IACToB,KAAKuhL,WAAW3iL,GAAKmhB,QAAQzM,IAAQ,EAKpD+U,sBAEIroB,KAAK8hL,0BACL9hL,KAAKuhL,WAAa,GAClBvhL,KAAKshL,aAAe,GAGxBj5J,0BACIroB,KAAKyjL,SAAW,GAChB,IAAK,IAAIxtK,EAAI,EAAGA,EAAIjW,KAAKixF,OAAQh7E,IAAK,CAClCjW,KAAKyjL,SAASxtK,GAAK,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKkxF,OAAQh7E,IAC7BlW,KAAKyjL,SAASxtK,GAAGC,GAAKlW,KAAK+gL,OAG/B/gL,KAAK6yF,UAAUquF,WACflhL,KAAK6yF,UAAUquF,UAAUlhL,MAWjCqoB,WAAWu8J,EAAUI,GACjBhlL,KAAKwhL,oBAAsBzjL,OAAO6qB,KAAKg8J,GACvC5kL,KAAKyhL,cAAgB,GACrBzhL,KAAKwhL,oBAAoBn3K,QAAQiJ,IAC7BtT,KAAKyhL,cAAcnuK,GAAO,KAE9BtT,KAAK4kL,SAAWA,EAChB5kL,KAAKglL,cAAgBA,EAIrB,MAAMF,EAAgB,GACtB/mL,OAAO6qB,KAAK5oB,KAAKglL,eAAe36K,QAAQzL,IACpC,MAAMkH,EAAM9F,KAAKglL,cAAcpmL,GAC/BkmL,EAAch/K,GAAOlH,IAEzBoB,KAAK8kL,cAAgBA,EAKzBz8J,oBAAoBpS,EAAGC,KACjBlW,KAAKqhL,KACP,MAAM+D,EAAM,GACN/jD,EAAQ,GACRgkD,EAAW,GAEjB,IAAIR,EAAW,KACXS,EAAa,KAEjB,MAAMlyJ,EAAKld,EAAI,EACXlW,KAAKglL,gBACLH,EAAW7kL,KAAKglL,cAActzK,EAC9B4zK,EAAatlL,KAAK4kL,SAASC,IAE3BzxJ,GAAM,GACFpzB,KAAKklL,UAAUjvK,EAAGmd,GAClBgyJ,EAAIx/K,KAAK,KAEJ5F,KAAK+kL,SAAS,IAAK9uK,EAAGmd,GAC3BiuG,EAAMz7H,KAAK,KAGXy/K,EAASz/K,KAAK,KAGdi/K,IACI7kL,KAAKklL,UAAUjvK,EAAGmd,GAClBgyJ,EAAIx/K,KAAKi/K,GAEJ7kL,KAAK+kL,SAASO,EAAYrvK,EAAGmd,GAClCiuG,EAAMz7H,KAAKi/K,GAGXQ,EAASz/K,KAAKi/K,MAMtBQ,EAASz/K,KAAK,KACVi/K,GAAWQ,EAASz/K,KAAKi/K,IAIjC,MAAMzgF,EAAKluF,EAAI,EACXlW,KAAKglL,gBACLH,EAAW7kL,KAAKglL,cAAcrzK,EAC9B2zK,EAAatlL,KAAK4kL,SAASC,IAG3BzgF,EAAKpkG,KAAKkxF,QACNlxF,KAAKklL,UAAUjvK,EAAGmuF,GAClBghF,EAAIx/K,KAAK,KAEJ5F,KAAK+kL,SAAS,IAAK9uK,EAAGmuF,GAC3Bi9B,EAAMz7H,KAAK,KAGXy/K,EAASz/K,KAAK,KAGdi/K,IACI7kL,KAAKklL,UAAUjvK,EAAGmuF,GAClBghF,EAAIx/K,KAAKi/K,GAEJ7kL,KAAK+kL,SAASO,EAAYrvK,EAAGmuF,GAClCi9B,EAAMz7H,KAAKi/K,GAGXQ,EAASz/K,KAAKi/K,MAKtBQ,EAASz/K,KAAK,KACVi/K,GAAWQ,EAASz/K,KAAKi/K,IAIjC,MAAM/sI,EAAK7hC,EAAI,EACXjW,KAAKglL,gBACLH,EAAW7kL,KAAKglL,cAAcpzK,EAC9B0zK,EAAatlL,KAAK4kL,SAASC,IAE3B/sI,EAAK93C,KAAKixF,QACNjxF,KAAKklL,UAAUptI,EAAI5hC,GACnBkvK,EAAIx/K,KAAK,KAEJ5F,KAAK+kL,SAAS,IAAKjtI,EAAI5hC,GAC5BmrH,EAAMz7H,KAAK,KAGXy/K,EAASz/K,KAAK,KAGdi/K,IACI7kL,KAAKklL,UAAUptI,EAAI5hC,GACnBkvK,EAAIx/K,KAAKi/K,GAEJ7kL,KAAK+kL,SAASO,EAAYxtI,EAAI5hC,GACnCmrH,EAAMz7H,KAAKi/K,GAGXQ,EAASz/K,KAAKi/K,MAKtBQ,EAASz/K,KAAK,KACVi/K,GAAWQ,EAASz/K,KAAKi/K,IAIjC,MAAMU,EAAKtvK,EAAI,EAoCf,OAnCIjW,KAAKglL,gBACLH,EAAW7kL,KAAKglL,cAAcnzK,EAC9ByzK,EAAatlL,KAAK4kL,SAASC,IAE3BU,GAAM,GACFvlL,KAAKklL,UAAUK,EAAIrvK,GACnBkvK,EAAIx/K,KAAK,KAEJ5F,KAAK+kL,SAAS,IAAKQ,EAAIrvK,GAC5BmrH,EAAMz7H,KAAK,KAGXy/K,EAASz/K,KAAK,KAGdi/K,IACI7kL,KAAKklL,UAAUK,EAAIrvK,GACnBkvK,EAAIx/K,KAAKi/K,GAEJ7kL,KAAK+kL,SAASO,EAAYC,EAAIrvK,GACnCmrH,EAAMz7H,KAAKi/K,GAGXQ,EAASz/K,KAAKi/K,MAKtBQ,EAASz/K,KAAK,KACVi/K,GAAWQ,EAASz/K,KAAKi/K,IAGjC7kL,KAAKs0B,IAAI,kBAAoB+sG,KAE3BrhI,KAAKqhL,KACA,CAAC+D,EAAK/jD,EAAOgkD,GAGxBh9J,mBAAmB47J,GACf,MAAOmB,EAAK/jD,EAAOgkD,GAAYpB,EAC/BjkL,KAAKs0B,gBAAgB8wJ,UAAY/jD,WAAegkD,KAEhD,IAAIG,EADSznL,OAAO6qB,KAAK5oB,KAAK0hL,qBAI9B2D,EAASh7K,QAAQ5H,IACb+iL,EAAYA,EAAUr7K,OAAOvL,IACxB,IAAI0wC,OAAO7sC,GAAMo0B,KAAKj4B,MAM/B,IAAI6mL,EAAYD,EAAUnwK,IAAIzW,GAAOA,EAAIiG,MAAM,KAC/C4gL,EAAYA,EAAUt7K,OAAO8jB,GACzBjuB,KAAK0lL,oBAAoBz3J,EAAMozG,IAGnCmkD,EAAYC,EAAUpwK,IAAIzW,GAAOA,EAAIslB,KAAK,KAE1C,IAAIzb,EAAS,GAIb,OAHA+8K,EAAUn7K,QAAQzL,IACd6J,EAASA,EAAO4I,OAAOrR,KAAK0hL,oBAAoB9iL,MAE7C6J,EAGX4f,oBAAoBs9J,EAAUC,GAC1B,OAAOA,EAAOC,MAAMvnL,GACTqnL,EAAS5lK,QAAQzhB,IAAU,GAM1C+pB,IAAIhkB,EAAKyhL,EAAO,IACZ,GAAI3hL,EAAM0xB,SACForJ,GAAkB6E,EAAM,CACxB,MAAMzE,EAAO,IAAIxxH,OAAO7vD,KAAKqhL,MAC7B78K,QAAQU,IAAIm8K,EAAOh9K,IAK/BgkB,UAAUpS,EAAGC,GACT,GAAU,IAAND,GAAiB,IAANC,EAAS,CACpB,MAAMw2C,EAAO1sD,KAAKyjL,SAASxtK,GAAGC,GAC9B1R,QAAQU,iBAAiBgR,KACzB1R,QAAQU,kBAAkBwnD,EAAK2mD,YAC/B7uG,QAAQU,IAAI2Z,KAAKC,UAAU4tC,EAAM,KAAM,sFC5iCnD,MAAA2uF,EAAAp+I,EAAA,IAIMwrB,EAHNxrB,EAAA,GAGYqgB,OAAOC,SAENpgB,EAAAi0F,MAAsB,CAC/BiB,OAAQ,CAACzwF,QAAS,IAClBuwF,UAAW,CAACkiC,IAAK,KAErBl3H,EAAAi0F,MAAMS,MAAQ,GAEd10F,EAAAi0F,MAAMS,MAAMkvF,OAAS,2FAarB5jL,EAAAi0F,MAAMS,MAAMnhC,MAAQ,CACpB,yGAcA,uGAcA,uGAcA,uGAcA,wGAgBAvzD,EAAAi0F,MAAMS,MAAMk0F,KAAO,CACnB,mGAcA,mGAaA,mGAcA,mGAcA,mGAcA,mGAcA,mGAcA,oGAgBA5oL,EAAAi0F,MAAMS,MAAM4pD,KAAO,CACnB,gGAcA,gGAcA,gGAcA,gGAcA,gGAcA,gGAcA,gGAcA,iGAgBAt+I,EAAAi0F,MAAMS,MAAMx2B,SAAW,CACvB,qGAcA,qGAeA,qGAcA,sGAgBAl+D,EAAAi0F,MAAMS,MAAM2pD,OAAS,CACrB,mGAcA,mGAcA,mGAcA,mGAcA,mGAcA,mGAcA,oGAiBAr+I,EAAAi0F,MAAMS,MAAMm0F,KAAO,CACnB,sGAcA,sGAcA,sGAcA,sGAcA,uGAeA7oL,EAAAi0F,MAAMe,UAAUzhC,MAAQvzD,EAAAi0F,MAAMS,MAAMnhC,MAAMr7C,IAAIq3C,GACnC2uF,EAAA9rB,SAASe,eAAe5jE,IAKnCvvD,EAAAi0F,MAAMsB,cAAgB,WAClB,MAAMhmC,EAAqBjkC,EAAIjL,aAAargB,EAAAi0F,MAAMe,UAAUzhC,OAC5D,IAAIz6C,EAAIwS,EAAIM,cAAc,EAAG/oB,KAAKixF,OAAS,GACvC/6E,EAAIuS,EAAIM,cAAc,EAAG/oB,KAAKkxF,OAAS,GAC3C,OAAQxkC,EAAK5rD,QAAQ,SACjB,IAAK,aACDmV,EAAI/O,KAAK4C,MAAM9J,KAAKixF,OAAS,GAC7B/6E,EAAIhP,KAAK4C,MAAM9J,KAAKkxF,OAAS,GAC7B,MAEJ,IAAK,YACDh7E,EAAI,EACM,IAAND,IAAUA,GAAK,GACfA,IAAMjW,KAAKixF,OAAS,IAAIh7E,GAAK,GACjC,MAEJ,IAAK,YACDC,EAAIlW,KAAKkxF,OAAS,EACR,IAANj7E,IAAUA,GAAK,GACfA,IAAMjW,KAAKixF,OAAS,IAAIh7E,GAAK,GACjC,MAEJ,IAAK,YACDA,EAAI,EACM,IAANC,IAAUA,GAAK,GACfA,IAAMlW,KAAKkxF,OAAS,IAAIh7E,GAAK,GACjC,MAGJ,IAAK,YACDD,EAAIjW,KAAKixF,OAAS,EACR,IAAN/6E,IAAUA,GAAK,GACfA,IAAMlW,KAAKkxF,OAAS,IAAIh7E,GAAK,GAOzC,MAAO,CACHD,IAAGC,IAAG07C,KAAMlF,IAMpBvvD,EAAAi0F,MAAMiB,OAAOzwF,QAAU,GAClByP,OAAOlU,EAAAi0F,MAAMS,MAAM2pD,QACnBnqI,OAAOlU,EAAAi0F,MAAMS,MAAMx2B,UACnBhqD,OAAOlU,EAAAi0F,MAAMS,MAAMk0F,MACnB10K,OAAOlU,EAAAi0F,MAAMS,MAAM4pD,MACnBpqI,OAAOlU,EAAAi0F,MAAMS,MAAMm0F,MAExB7oL,EAAAi0F,MAAMe,UAAUkiC,IAAMl3H,EAAAi0F,MAAMiB,OAAOzwF,QAAQyT,IAAIq3C,GAC3C2uF,EAAA9rB,SAASe,eAAe5jE,IAE5B,MAAMwwF,EAAc7B,EAAA9rB,SAAS4E,cAAch3H,EAAAi0F,MAAMe,UAAUkiC,KAC3Dl3H,EAAAi0F,MAAMe,UAAUkiC,IAAMl3H,EAAAi0F,MAAMe,UAAUkiC,IAAIhjH,OAAO6rI,sKC7mBjD,MAAAl1H,EAAAC,EAAAhrB,EAAA,IACAo+I,EAAAp+I,EAAA,IAEaE,EAAA6/I,MAAa,GAC1B7/I,EAAA6/I,MAAMnrD,MAAQ,GAEd10F,EAAA6/I,MAAMnrD,MAAMorD,MAAQ,CACpB,kGAaA,kGAaA,kGAaA,kGAaA,mGAaA,oGAcA9/I,EAAA6/I,MAAMnrD,MAAM2pD,OAAS,CACrB,oGAaA,oGAaA,oGAaA,qGAcAr+I,EAAA6/I,MAAMnrD,MAAMzuF,KAAO,CACnB,iGAYA,iGAYA,iGAYA,kGAcAjG,EAAA6/I,MAAMnrD,MAAMj4B,OAAS,CACrB,kGAaA,kGAYA,mGAeAz8D,EAAA6/I,MAAMr+H,KAAO,GAIbxhB,EAAA6/I,MAAMr+H,KAAKsnK,kBAAoB,EAAChwK,EAAGC,EAAGgwK,EAAYC,KAChD,MAAMC,EAASF,EAAWnqC,aAAa,CAACn+I,KAAM,mBACxCyoL,EAASH,EAAWnqC,aAAa,CAACn+I,KAAM,mBAE9CsoL,EAAWjuH,QAAQmuH,EAAQnwK,EAAGC,GAC9BgwK,EAAWjuH,QAAQouH,EAAQpwK,EAAGC,EAAI,GAC9BiwK,GACFD,EAAWjuH,QAAQkuH,EAAUlwK,EAAGC,EAAI,KAKxC/Y,EAAA6/I,MAAMr+H,KAAK2nK,iBAAmB,EAACrwK,EAAGC,EAAGgwK,EAAYC,KAC/C,MAAMI,EAAUL,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC4oL,EAAUN,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC6oL,EAAUP,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC8oL,EAAUR,EAAWnqC,aAAa,CAACn+I,KAAM,oBAE/CsoL,EAAWjuH,QAAQsuH,EAAStwK,EAAGC,GAC/BgwK,EAAWjuH,QAAQuuH,EAASvwK,EAAI,EAAGC,GACnCgwK,EAAWjuH,QAAQwuH,EAASxwK,EAAGC,EAAI,GACnCgwK,EAAWjuH,QAAQyuH,EAASzwK,EAAI,EAAGC,EAAI,GAEnCiwK,GACFD,EAAWjuH,QAAQkuH,EAAUlwK,EAAGC,EAAI,KAKxC/Y,EAAA6/I,MAAMr+H,KAAKgoK,gBAAkB,EAAC1wK,EAAGC,EAAGgwK,EAAYU,EAAYT,KAE1D,MAAMI,EAAUL,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC4oL,EAAUN,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC6oL,EAAUP,EAAWnqC,aAAa,CAACn+I,KAAM,oBACzC8oL,EAAUR,EAAWnqC,aAAa,CAACn+I,KAAM,oBAE3CoqB,EAAApmB,QAAG6D,cAAc,CAAC8gL,EAASC,EAASC,EAASC,KAC7C1+J,EAAApmB,QAAGK,IAAI,aAAc,kBACjB,0DAGRikL,EAAWjuH,QAAQsuH,EAAStwK,EAAGC,GAC/BgwK,EAAWjuH,QAAQuuH,EAASvwK,EAAI,EAAGC,GACnCgwK,EAAWjuH,QAAQwuH,EAASxwK,EAAGC,EAAI,GACnCgwK,EAAWjuH,QAAQyuH,EAASzwK,EAAI,EAAGC,EAAI,GAGvC,MAAM2wK,EAAcX,EAAWnqC,aAAa,CAACn+I,KAAMgpL,IACnDV,EAAWjuH,QAAQ4uH,EAAa5wK,EAAI,EAAGC,EAAI,GAG3C,MAAM4wK,EAAaZ,EAAWnqC,aAAa,CAACn+I,KAAM,iBAC5CmpL,EAAab,EAAWnqC,aAAa,CAACn+I,KAAM,iBAC5CopL,EAAad,EAAWnqC,aAAa,CAACn+I,KAAM,iBAC5CqpL,EAAaf,EAAWnqC,aAAa,CAACn+I,KAAM,iBAOlD,GALAsoL,EAAWjuH,QAAQ6uH,EAAY7wK,EAAI,EAAGC,GACtCgwK,EAAWjuH,QAAQ8uH,EAAY9wK,EAAI,EAAGC,EAAI,GAC1CgwK,EAAWjuH,QAAQ+uH,EAAY/wK,EAAGC,EAAI,GACtCgwK,EAAWjuH,QAAQgvH,EAAYhxK,EAAI,EAAGC,EAAI,GAEtCiwK,EAAU,CACZ,IAAIz5H,EAAOy5H,EACa,iBAAbA,IACPz5H,EAAOw5H,EAAWnqC,aAAa,CAACn+I,KAAMuoL,KAE1CD,EAAWjuH,QAAQvL,EAAMz2C,EAAI,EAAGC,EAAI,MAKxC/Y,EAAA6/I,MAAM3qD,OAAS,GAEfl1F,EAAA6/I,MAAM3qD,OAAOzwF,QAAU,GAClByP,OAAOlU,EAAA6/I,MAAMnrD,MAAMj4B,QACnBvoD,OAAOlU,EAAA6/I,MAAMnrD,MAAM2pD,QACnBnqI,OAAOlU,EAAA6/I,MAAMnrD,MAAMzuF,MACnBiO,OAAOlU,EAAA6/I,MAAMnrD,MAAMorD,OAExB9/I,EAAA6/I,MAAM7qD,UAAY,GAClBh1F,EAAA6/I,MAAM7qD,UAAUkiC,IAAMl3H,EAAA6/I,MAAM3qD,OAAOzwF,QAAQyT,IAAIq3C,GAC3C2uF,EAAA9rB,SAASe,eAAe5jE,IAE5B,MAAMwwF,EAAc7B,EAAA9rB,SAAS4E,cAAch3H,EAAA6/I,MAAM7qD,UAAUkiC,KAC3Dl3H,EAAA6/I,MAAM7qD,UAAUkiC,IAAMl3H,EAAA6/I,MAAM7qD,UAAUkiC,IAAIhjH,OAAO6rI,+UCpUjD,MAAAl1H,EAAAC,EAAAhrB,EAAA,IACAggC,EAAA7I,EAAAn3B,EAAA,KACA4qC,EAAAzT,EAAAn3B,EAAA,KACAwgC,EAAArJ,EAAAn3B,EAAA,IACAiqL,EAAAjqL,EAAA,KACAg9K,EAAAh9K,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAGMkH,EADNlH,EAAA,EACcq3B,CAAI,qBAEZ6yJ,EAAgB,CAACC,EAAMhjL,KACzB,MAAMw6B,GAACA,EAAEv3B,IAAEA,EAAGuhH,IAAEA,EAAG5qG,KAAEA,GAAQ5Z,EAE7B,IAAK4jB,EAAApmB,QAAG6D,cAAc,CAACm5B,IAAM,CACzB,MAAM/hB,EAAQuqK,EAAKlpL,IAAI,UACvB2e,EAAMK,MAAM0hB,GACZ/hB,EAAMG,SAAS4hB,GAGnB,IAAIlhB,EAAa,KACZ0pK,EAAKl+K,IAAI,UAKVwU,EAAa0pK,EAAKlpL,IAAI,WAJtBwf,EAAa,IAAIyM,EAAU0V,OAC3BunJ,EAAK9mK,IAAI5C,IAMRsK,EAAApmB,QAAG6D,cAAc,CAAC4B,KAAQqW,EAAWE,UAAUvW,GAC/C2gB,EAAApmB,QAAG6D,cAAc,CAACmjH,KAAQlrG,EAAWI,WAAW8qG,GAChD5gG,EAAApmB,QAAG6D,cAAc,CAACuY,KAASN,EAAWQ,cAAcF,IAKhD7gB,EAAAkqL,gBAAkB,aAI/BlqL,EAAAkqL,gBAAgBpoL,UAAUqoL,YAAc,SAASr9K,GAC7C,MAAMlI,EAAOkI,EAAMzJ,UACnB,GAAI0mL,EAAAK,UAAUroL,eAAe6C,GAAO,CAChC,MAAMo+F,MAACA,GAAS+mF,EAAAK,UAAUxlL,GAC1BhE,OAAO6qB,KAAKu3E,GAAO91F,QAAQguE,IACvB,MAAMv1C,EAAS9a,EAAApmB,QAAGm5F,iBAAiB1iB,GAC7Bx6E,EAASmqB,EAAApmB,QAAGm5F,iBAAiB1iB,GAE7Bl+D,EADUlQ,EAAM/L,IAAI,SAASL,GACRsiG,EAAM9nB,GACjCpuE,EAAM/L,IAAI,SAAS4kC,GAAQ3oB,OAM1Bhd,EAAAyiH,aAAe,WACxB5/G,KAAKwnL,YAAc,IAAIrqL,EAAAkqL,gBAEvBrnL,KAAKs0B,IAAM,YAAYnvB,GACfhB,EAAM0xB,SACN1xB,KAASgB,IAKjBnF,KAAKw1H,aAAe,EAAC53H,EAAMwG,KACvB,MAAML,EAAS,IAAIk5B,EAAMoH,cAAczmC,GAIvC,OAHAmG,EAAO0jL,aAAY,GACnBN,EAAcpjL,EAAQK,GACtBpE,KAAKwnL,YAAYF,YAAYvjL,GACtBA,IAGX/D,KAAKurC,kBAAoB,SAASjD,GAE9B,OADe7K,EAAYmO,YACbL,kBAAkBjD,IAIpCtoC,KAAKirC,YAAc,SAASrtC,EAAMwG,EAAW,IACzC,MAAM6F,EAAQ,IAAIgzB,EAAMoH,cAAczmC,GACtCqM,EAAM4vB,QAAQj8B,GAEd,MAAMkhC,EAAQ16B,EAAI06B,MAGlB,GAFAqoJ,EAAcl9K,EAAO7F,GACrBpE,KAAKwnL,YAAYF,YAAYr9K,IACxB+d,EAAApmB,QAAG6D,cAAc,CAACq5B,IACnB,GAAqB,iBAAVA,EACP70B,EAAM0tK,SAAS74I,OAEd,CACD,MAAM4oJ,EAAW1nL,KAAKg/B,YAAY/0B,EAAO60B,GACzC70B,EAAM0tK,SAAS+P,GAGvB,OAAOz9K,GAIXjK,KAAKg/B,YAAc,EAAC/0B,EAAO29B,KACvB,OAAQA,GACJ,IAAK,QAAS,OAAO,IAAIC,EAAMiM,WAAW7pC,GAC1C,IAAK,eAAgB,OAAO,IAAI49B,EAAMyL,kBAAkBrpC,GACxD,IAAK,cAAe,OAAO,IAAI49B,EAAM49E,iBAAiBx7G,GACtD,IAAK,cAAe,OAAO,IAAI49B,EAAM2L,iBAAiBvpC,GACtD,IAAK,SAAU,OAAO,IAAI49B,EAAM6L,YAAYzpC,GAC5C,QACI,GAAI49B,EAAMD,GACN,OAAO,IAAIC,EAAMD,GAAW39B,GAE3B,GAAI29B,GAA2B,KAAdA,EAAkB,CACpC,IAAIvjC,4BAAgCujC,UACpCvjC,GAAO,iDACPG,QAAQG,KAAKN,GAEjB,OAAO,IAAIwjC,EAAM89E,cAAc17G,OAQ/C9M,EAAAyiH,aAAa3gH,UAAUw2H,YAAc,SAASkyD,GAC1C,GAAI1N,EAAAx2I,MAAMvkC,eAAeyoL,GACrB,OAAO,IAAI1N,EAAAx2I,MAAMkkJ,GAEhB,CACD,MAAM/+J,EAAO7qB,OAAO6qB,KAAKqxJ,EAAAx2I,OAAOvf,KAAK,QACrC8D,EAAApmB,QAAGK,IAAI,eAAgB,0BACP0lL,yBAAiC/+J,KAErD,OAAO,MAIXzrB,EAAAyiH,aAAa3gH,UAAUwkH,gBAAkB,SAASzN,EAASr3F,EAAMnG,KACxDwN,OAAOC,UAAUzN,IAAcA,GAAa,IAC7CwP,EAAApmB,QAAGK,IAAI,gBAAiB,kBACpB,uCAAyCuW,GAE7CA,EAAY,IAAIA,EAAY,GAEhC,MAAMyW,EAASwO,EAAYmO,YACrBjoC,EAAS,GACTikL,EAAc,CAChBjpK,KAAM1U,GAASA,EAAM40B,QAAUrmB,GAEnC,IAAK,IAAInb,EAAI,EAAGA,EAAI24G,EAAS34G,IAAK,CAG9B,IAAI4M,EAAQ,KAcZ,GARIA,EALC0U,EAKOsQ,EAAOsc,kBAAkB,CAC7B5sB,KAAMkpK,GACFlpK,EAAKkpK,IACLA,EAAShpJ,QAAUrmB,IAPnByW,EAAOuc,0BAA0B,EAAGhzB,EACxCovK,GAWG,CAEP,MAAME,EAAW74J,EAAOoZ,MAAMrgB,EAAApmB,QAAGiL,WAAY5C,EAAMvI,WAC7Cu1E,EAAWz+D,EAAYsvK,EAASjpJ,OAClCo4C,EAAW,GACXjvD,EAAApmB,QAAGwa,aAAanS,EAAOgtE,GAE3BtzE,EAAOiC,KAAKqE,OAEX,CACD,IAAI5F,EAAM,gDAGV,GAFAA,GAAO,eAAiBmU,EACxBwP,EAAApmB,QAAGgD,KAAKP,GACJsa,EAAKouG,WAAY,CACjB,MAAMnuG,EAAOC,KAAKC,UAAUH,EAAKouG,YACjC/kG,EAAApmB,QAAGgD,KAAK,0BAA4Bga,QAE9BD,GACNqJ,EAAApmB,QAAGgD,KAAK,8CAKpB,OAAOjB,sKC7LX,MAAAqkB,EAAAC,EAAAhrB,EAAA,IAGA,MAAa8qL,EAMT1/J,YAAY2/J,GACRhoL,KAAKioL,SAAW,OAChBjoL,KAAKpC,KAAO,GACZoC,KAAKgoL,SAAWA,EAGb3/J,SAAwB,OAAO,EAC/BA,UAA0B,OAAO,EAEjCA,UACH,OAAOroB,KAAKpC,KAGTyqB,cACH,OAAOroB,KAAKgoL,UApBpB7qL,EAAA4qL,OA2BA5qL,EAAAurF,MAAA,MAOIrgE,YAAYzqB,EAAcsqL,GAClBtqL,GAAwB,iBAATA,GACfoqB,EAAApmB,QAAGK,IAAI,QAAS,MAAO,2BAE3BjC,KAAKpC,KAAOA,EACZoC,KAAKmoL,MAAQ,GACbnoL,KAAKioL,SAAW,QAChBjoL,KAAKooL,OAAS,GACdpoL,KAAKogH,MAAQ,GAET7sG,MAAMC,QAAQ00K,IACdA,EAAM79K,QAAQ29K,IACV,GAAIA,EAASK,QACTroL,KAAKsoL,QAAQN,QAEZ,GAAIA,EAASO,OACdvoL,KAAKsoL,QAAQN,OAEZ,CACD,MAAMQ,EAAO,IAAIT,EAAKC,GACtBhoL,KAAKsoL,QAAQE,MAMtBngK,QAAQzqB,GAAaoC,KAAKpC,KAAOA,EACjCyqB,UAAmB,OAAOroB,KAAKpC,KAC/ByqB,UAAU+/J,GAAuBpoL,KAAKooL,OAASA,EAC/C//J,YAAqB,OAAOroB,KAAKooL,OACjC//J,SAAwB,OAAO,EAC/BA,UAA0B,OAAO,EAEjCA,QAAQozH,GACXz7I,KAAKogH,MAAMx6G,KAAK61I,GAGbpzH,WAEH,OADeroB,KAAKmoL,MAAMh+K,OAAOs+K,GAAQA,EAAKF,UAI3ClgK,QAAQogK,GACPl1K,MAAMC,QAAQi1K,GACdzoL,KAAKmoL,MAAQnoL,KAAKmoL,MAAM92K,OAAOo3K,GAG/BzoL,KAAKmoL,MAAMviL,KAAK6iL,GAIjBpgK,YACH,IAAI+2E,EAAM,EAMV,OALAp/F,KAAKmoL,MAAM99K,QAAQo+K,IACXA,EAAKJ,SAAWI,EAAKJ,YACrBjpF,GAAO,KAGRA,EAIJ/2E,WACH,MAAMqgK,EAAe1oL,KAAK2oL,YAAc,EACxC,OAAO3oL,KAAKmoL,MAAM5mL,OAASmnL,EAGxBrgK,WACH,OAAOroB,KAAKmoL,MAAMr/J,QAGfT,WACH,OAAOroB,KAAKmoL,MAAM5mL,4KC7G1B,MAAAymB,EAAAC,EAAAhrB,EAAA,IAuBA,MAAa2rL,EAQTvgK,cACIroB,KAAK6oL,QAAU,GACf7oL,KAAKy5E,KAAO,GACZz5E,KAAK8oL,KAAO,GAITzgK,UAAUm9D,EAAoBphF,GACjC,IAAK4jB,EAAApmB,QAAGue,SAAS/b,KACPA,EAA0B2kL,aAAc,CAC1C,MAAMnqK,EAAOC,KAAKC,UAAU1a,GAC5B4jB,EAAApmB,QAAGK,IAAI,YAAa,gDACoB2c,KAGhD,GAAIgqK,EAAUI,cAAcxjG,GACnBxlF,KAAK6oL,QAAQrjG,KACdxlF,KAAK6oL,QAAQrjG,GAAc,IAE/BxlF,KAAK6oL,QAAQrjG,GAAY5/E,KAAKxB,GAC9BpE,KAAKy5E,KAAK7zE,KAAK,CAAC7D,KAAMyjF,EAAYpmE,OAAQhb,QAEzC,CACD,MAAM+jL,EAAQtpK,KAAKC,UAAU8pK,EAAUI,eACvChhK,EAAApmB,QAAGK,IAAI,YAAa,mBACHujF,0BAAmC2iG,MAIrD9/J,cAAczpB,EAAaqqL,EAA2BC,GACzD,MAAMC,EAAUnpL,KAAK6oL,QAAQjqL,GAC7B,IAAIsgB,EAAQiqK,EAAQppK,QAAQkpK,GAC5B,GAAI/pK,GAAS,EAAG,CAGZ,GAFAiqK,EAAQz8J,OAAOxN,EAAO,EAAGgqK,IACzBhqK,EAAQlf,KAAKy5E,KAAKjtD,UAAUpoB,GAAOA,EAAIgb,SAAW6pK,KACrC,EAAG,CACZ,MACMG,EAA6B,CAC/BhqK,OAAQ8pK,EAAWnnL,KAFF/B,KAAKy5E,KAAKv6D,GAEWnd,MAC1C/B,KAAKy5E,KAAK/sD,OAAOxN,EAAO,EAAGkqK,QAG3BphK,EAAApmB,QAAGK,IAAI,YAAa,gBAChB,oCAER,OAAO,EAEX,OAAO,EAGJomB,WAEH,OADYroB,KAAKy5E,KAAKl4E,OAInB8mB,OAEH,OADatqB,OAAO6qB,KAAK5oB,KAAK6oL,SAI3BxgK,eACH,OAAOroB,KAAKy5E,KAAKpkE,IAAIg0K,GAAQA,EAAKtnL,MAG/BsmB,iBACH,OAAOroB,KAAKy5E,KAAKpkE,IAAIg0K,GAAQA,EAAKjqK,QAG/BiJ,IAAIm9D,GACP,OAAIxlF,KAAK6oL,QAAQrjG,GACNxlF,KAAK6oL,QAAQrjG,GAAY5hC,MAE7B,KAIJv7B,YACHroB,KAAK4oB,OAAOve,QAAQm7E,IAChBxlF,KAAK8oL,KAAKtjG,GAAc,IAIzBn9D,KAAKm9D,GACR,GAAIxlF,KAAK6oL,QAAQrjG,GAAa,CACrBxlF,KAAK8oL,KAAK5pL,eAAesmF,KAC1BxlF,KAAK8oL,KAAKtjG,GAAc,GAE5B,MAAM8jG,EAAStpL,KAAK8oL,KAAKtjG,GACzB,GAAI8jG,EAAStpL,KAAK6oL,QAAQrjG,GAAYjkF,OAElC,QADEvB,KAAK8oL,KAAKtjG,GACLxlF,KAAK6oL,QAAQrjG,GAAY8jG,GAGxC,OAAO,KAGJjhK,WAAWm9D,GACd,GAAIxlF,KAAK6oL,QAAQrjG,GAAa,CAC1B,MAAM1gF,EAAQ9E,KAAK6oL,QAAQrjG,GAC3B,OAAO1gF,EAAMA,EAAMvD,OAAS,GAEhC,OAAO,KAGJ8mB,qBACH,MAAMmiG,EAAWxqH,KAAKupL,WAAW,YACjC,GAAI/+D,EAAW,OAAOA,EACtBxiG,EAAApmB,QAAGK,IAAI,WAAY,qBACf,qBAIDomB,WAEH,IAAI1mB,EAAM,GAQV,OAPA3B,KAAKy5E,KAAKpvE,QAAQg/K,IACd,MAAMZ,EAAOY,EAAKtnL,KAEZzD,EAAQ+qL,EAAKjqK,OACbxhB,EAAOoqB,EAAApmB,QAAGF,QAAQpD,GACxBqD,GAAO8mL,EAAO,IAAM7qL,EAAO,OAExB+D,EAGJ0mB,SACH,MAAMoxD,EAAY,GAwBlB,OAvBAz5E,KAAKy5E,KAAKpvE,QAAQo+K,IACd,MAAMe,EAAUZ,EAAUI,cAAcP,EAAK1mL,MAC7C,GAAIynL,EACA,GAAKf,EAAKrpK,OAAkBtI,MAAO,CAC/B,MAAM2yK,EAAW,CACb1nL,KAAM0mL,EAAK1mL,KACXqd,OAAQ4I,EAAApmB,QAAG6U,UAAU+yK,EAASf,EAAKrpK,SAEvCq6D,EAAK7zE,KAAK6jL,OAET,CACD,MAAMA,EAAW,CACb1nL,KAAM0mL,EAAK1mL,KAAMqd,OAAQqpK,EAAKrpK,QAClCq6D,EAAK7zE,KAAK6jL,QAIdjlL,QAAQC,MAAM,eAAgBgkL,GAC9BzgK,EAAApmB,QAAGK,IAAI,YAAa,qCACYwmL,EAAK1mL,UAG7C03E,EAAK/iE,cAAe,EACb,CACH+jE,WAAY,kBACZn8E,MAAO,CACHm7E,UAjKhBt8E,EAAAyrL,YAuKAA,EAAUI,cAAgB,CACtBU,QAAS,SACThnD,OAAQ,SACRinD,SAAU,OACVC,WAAY,OACZx3B,QAAS,UACTn0H,OAAQ,SACR4rJ,OAAQ,SACR3rL,IAAK,OACL2kI,KAAM,SACNI,KAAM,SACNE,OAAQ,SACR3Y,SAAU,QACVs/D,aAAc,QACdzmD,KAAM,OACN0mD,OAAQ,UACRxmD,OAAQ,SACRymD,aAAc,SACdC,OAAQ,SACRC,IAAK,SACLxsC,MAAO,OACPysC,KAAM,OACNC,SAAU,SACVtjJ,IAAK,OACLujJ,UAAW,wFCtNf,MACMlmL,EADNlH,EAAA,EACcq3B,CAAI,kBAClBjX,EAAApgB,EAAA,GACAqtL,EAAArtL,EAAA,KAEAstL,EAAAttL,EAAA,IAEMutL,EADNvtL,EAAA,KACqBwtL,aAAaC,QAE5BjiK,EAAMpL,EAAAC,OAAOC,SAanB,MAAaotK,EAKFtiK,aAAaqiK,GAChB,MAAME,EAAMN,EAAUn+I,MAAMu+I,GACtBG,EAAQ,GAId,OAHAD,EAAIE,YAAYzgL,QAAQ0gL,IACpBF,EAAME,EAAKC,IAAI5hI,MAAQ2hI,EAAKpzG,IAAItiE,IAb5C,SAAiBzW,EAAKwF,GAClB,OAAOA,EAAIxF,IAYyCC,KAAK,KAAM,YAEpDgsL,EASXxiK,YAAYC,GACRtoB,KAAKy1E,QACLz1E,KAAKsoB,IAAMA,GAAOG,EAGfJ,QACHroB,KAAK8E,MAAQ,GACb9E,KAAKirL,UAAY,KACjBjrL,KAAKkrL,SAAW,GAChBlrL,KAAKmrL,UAAY,QAId9iK,mBAAmBwE,EAAqB,IAC3C,MAAMu7J,OAACA,GAAUv7J,EACXu+J,EAAav+J,EAAKg+J,OAASF,EAASE,OACnCQ,GAAYrrL,KAAKsrL,iBAAiBF,EAAWhD,IAC9CmD,EAAYF,EAASjiI,KAC3B5kD,QAAQU,IAAI,eAAgBqmL,GAC5B,MAAMC,EAAUztL,OAAO4kF,OAAO,GAAI91D,GAClC2+J,EAAQX,MAAQO,EAChBI,EAAQL,UAAYI,EACpB,MAAM5mD,EAAe3kI,KAAKyrL,iBAAiB,CAACN,UAAWI,EACnDV,MAAOO,IAIX,OAFAzmD,EAAM7nC,QAAQyuF,GACd5mD,EAAM+mD,UAAUtD,GACTzjD,EAMJt8G,iBAAiBwE,EAAqB,IACrCA,EAAK1oB,QAAQA,EAAM0xB,SAAU,GACjC,MAAMu1J,EAAav+J,EAAKg+J,OAASF,EAASE,MACpCM,EAAYt+J,EAAKs+J,WAAa,QAEpC,IAAI9pH,GAAK,EACLwvB,EAAWhkE,EAAK2lH,UAAY,GAC5B7N,EAAQ,GAEZ,MAAQtjE,GAWJ,GAVArhE,KAAKy1E,QACLz1E,KAAKmrL,UAAYA,EAEjBhnL,EAAM,oCACNwgI,EAAQ3kI,KAAK2rL,cAAcP,EAAYD,GAAWtmL,MAAM,MACxDw8D,EAAKrhE,KAAK4rL,gBAAgBjnD,EAAO93G,KAE7B1oB,EAAM,mBAGS,KAAb0sF,EAAgB,CAClBrsF,QAAQG,KAAK,oCACb,MAIR,OAAO3E,KAAKirL,UAGT5iK,iBAAiBzqB,GACpB,MAAM+mI,EAAQ,IAAI4lD,EAAA7hG,MAAM9qF,GAClBiuL,EAAW,IAAItB,EAAAxC,KAAK,uBAC1BpjD,EAAM2jD,QAAQuD,GACd,MAAMC,EAAW,IAAIvB,EAAAxC,KAAK,cAE1B,OADApjD,EAAM2jD,QAAQwD,GACPnnD,EAGJt8G,gBAAgBs8G,EAAO93G,GAC1B,IAAIw0C,GAAK,EAGT,MAAM0qH,EAAYl/J,EAAKk/J,WAAa,EAC9BC,EAAYn/J,EAAKm/J,YAAc,EAgBrC,OAfIrnD,EAAMpjI,QAAUyqL,IAA4B,IAAfA,IACzBrnD,EAAMpjI,QAAUwqL,GAChB1qH,GAAK,EACLl9D,EAAM,yBAIRk9D,GAAK,EAEPx0C,EAAKo/J,YACL5qH,EAAKA,GAAMrhE,KAAKirL,UAAUtC,aAAe97J,EAAKo/J,WAE9Cp/J,EAAKq/J,YACL7qH,EAAKA,GAAMrhE,KAAKirL,UAAUtC,aAAe97J,EAAKq/J,WAE3C7qH,EAGJh5C,cAAcwiK,EAAOsB,GAKxB,GAJKnsL,KAAKkrL,SAASiB,GACbnsL,KAAKkrL,SAASiB,IAAS,EADFnsL,KAAKkrL,SAASiB,GAAQ,EAEjDhoL,8BAAkCgoL,MAE7BA,IAASnsL,KAAKmrL,WAAwB,UAATgB,EAAmB,CACjDhoL,EAAM,qCACN,MAAMioL,EAAY,GAClBpsL,KAAKirL,UAAY,IAAIV,EAAA7hG,MAAM0jG,GAC3BpsL,KAAK8E,MAAMc,KAAK5F,KAAKirL,WAGzB9mL,uBAA2BgoL,UAAattK,KAAKC,UAAU+rK,EAAMsB,OAC7D,MAAME,EAAWrsL,KAAKsrL,iBAAiBT,EAAMsB,IAC7C,GAAI54K,MAAMC,QAAQ64K,GAAW,CACzB,MAAMlE,EAAQkE,EAASh3K,IAAIrV,KAAKssL,aAAaztL,KAAKmB,KAAM6qL,IAExD,OADA7qL,KAAKusL,kBAAkBJ,GAChBhE,EAAMjkK,KAAK,KAKtB,OAFA/f,wCAA4CkoL,MAC5CrsL,KAAKusL,kBAAkBJ,GAChBE,EAGJhkK,aAAawiK,EAAOpvC,GACvB,IAAKA,EAAKryF,KAAM,CACZ,MAAMxqC,EAAOC,KAAKC,UAAU+rK,GAC5B,MAAM,IAAInmL,0CAA0Cka,MAWxD,MAPkB,aAAd68H,EAAK15I,KACL/B,KAAKirL,UAAUuB,QAAQ/wC,EAAKryF,MAG5BppD,KAAKirL,UAAUuB,QAAQ,KAAO/wC,EAAKryF,KAAO,MAG5B,aAAdqyF,EAAK15I,MACL/B,KAAKirL,UAAU3C,QAAQ,IAAIiC,EAAAxC,KAAKtsC,EAAKryF,OAC9BqyF,EAAKryF,OAGZjlD,wBAA4Bs3I,EAAK15I,cAAc05I,EAAKryF,QAGxDjlD,wCAA4Cs3I,EAAKryF,SAC1CppD,KAAK2rL,cAAcd,EAAOpvC,EAAKryF,OAGnC/gC,kBAAkB8jK,GACrB,GAAIA,IAASnsL,KAAKmrL,WAAsB,UAATgB,EAAkB,CAG7C,GAFAhoL,EAAM,2BACOnE,KAAK8E,MAAMvD,OACb,EAAG,CACV,MAAMkrL,EAAWzsL,KAAK8E,MAAM8+C,MAC5B5jD,KAAKirL,UAAYjrL,KAAK8E,MAAM9E,KAAK8E,MAAMvD,OAAS,GAChDvB,KAAKirL,UAAU3C,QAAQmE,KAMzBpkK,iBAAiBqkK,GACvB,GAAIn5K,MAAMC,QAAQk5K,GAAa,CAC3B,MAAMjkL,EAASzI,KAAKsoB,IAAI9K,aAAakvK,GAErC,OADAvoL,EAAM,6BAA8BsE,GAC7BA,EAKX,OAFItE,uCAA2CuoL,KAExC,MA5LfvvL,EAAAwtL,WAkMAA,EAASE,MAAQF,EAASx+I,MAAMq+I,GAGhCG,EAASgC,cAAgB,CACrB9B,MAAOF,EAASE,MAChBM,UAAW,QACX34C,SAAU,GACVruI,OAAO,EACP8nL,UAAW,EACXC,WAAY,EACZH,UAAW,EACXC,WAAY,+UCnOhB,MAAAhkK,EAAAC,EAAAhrB,EAAA,IAGMkH,EADNlH,EAAA,EACcq3B,CAAI,oBAElB8jE,EAAAhkE,EAAAn3B,EAAA,KACA05H,EAAA15H,EAAA,IACAmiH,EAAAniH,EAAA,IACA2vL,EAAA3vL,EAAA,KACA4vL,EAAA5vL,EAAA,IACA85H,EAAA95H,EAAA,IACAogB,EAAApgB,EAAA,GACA+yC,EAAA/yC,EAAA,GACAw5B,EAAArC,EAAAn3B,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SAgBNpgB,EAAA46H,YAAc,WACvBpB,EAAAtB,YAAY73H,KAAKwC,MACjBA,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,eAC9Bz4F,KAAK+1H,QAAU/lF,EAAAvS,YAAYmO,YAC3B5rC,KAAKsoB,IAAMG,EAEXzoB,KAAK8sL,iBAAmB,MACpB,MAAM/qL,EAAO,CAAC,UAAW,QAAS,QAAS,UAE3C,OAAOA,EADY/B,KAAKsoB,IAAIO,UAAU9mB,MAI1C/B,KAAKs4H,OAAS,CAAChwG,IACXtoB,KAAKsoB,IAAMA,IAGftoB,KAAKw8H,kBAAoB,SAASzkH,EAAO8U,GACrC7sB,KAAKw4F,OAAOoB,WAAW,oBAAqB/sE,EACxC,CAAC,SAAU,aAAc,cAAe,aAE5C,MAAMkgK,EAAUh1K,EAAMyL,SAASozB,UAAUr1C,OACnCs0H,EAAiB3uH,KAAK4B,MAAMikL,EAAUlgK,EAAKgsG,aAC3CrhB,EAAgBtwG,KAAK4B,MAAMikL,EAAUlgK,EAAKosG,YAC1CthB,EAAeH,EAErBrzG,YAAgB0xH,2BACTre,kBAEP,MAAMw1E,EAAwB,CAACn1K,EAAKC,IAChChR,GACIA,EAAKxI,OAASuZ,GACd/Q,EAAKxI,OAASwZ,EAIhBuoG,EAAW,CACbnnG,OAAQ2T,EAAK3T,OACbs+F,gBACA74F,KAAMquK,EAAsB,EAAGngK,EAAKnU,UACpCA,SAAUmU,EAAKnU,SACf4mB,MAAM,EACNqwC,MAAM,GAEN9iD,EAAK3tB,eAAe,UACpBmhH,EAAS/gF,KAAOzS,EAAKyS,MAErBzS,EAAK3tB,eAAe,UACpBmhH,EAAS1wC,KAAO9iD,EAAK8iD,MAErB9iD,EAAK/lB,MACLu5G,EAAS1hG,KAAOkO,EAAK/lB,KACrB3C,0BAA8B0oB,EAAK/lB,KAAK6B,eAEnCkkB,EAAKogK,WACV5sE,EAAS1hG,KAAOquK,EAAsBngK,EAAKogK,SAAUpgK,EAAKnU,WAE9D1Y,KAAKq3G,cAAct/F,EAAO/X,KAAK+1H,QAAS1V,GAExC,MAAMH,EAAuB,CACzB2V,eAAgBhpG,EAAKgpG,gBAAkBA,EACvCr9G,UAAWqU,EAAKrU,WAAaqU,EAAK3T,OAAS,GAa/C,GAXI2T,EAAK5iB,QACqB,mBAAf4iB,EAAK5iB,MACZi2G,EAAUvhG,KAAOkO,EAAK5iB,MAGtB+d,EAAApmB,QAAGK,IAAI,cAAe,oBAClB,kCAGZjC,KAAK41H,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,GAErCG,EAAS1wC,KAAM,CACf,MAAMu9G,EAAW,CACbv1E,eACAz+F,OAAQ2T,EAAK3T,OAAS,GAE1BlZ,KAAK63G,cAAc9/F,EAAO/X,KAAK+1H,QAASm3D,KAMhDltL,KAAKmtL,mBAAqB,SAAStgK,GAC/B7sB,KAAKw4F,OAAOoB,WAAW,qBAAsB/sE,EAAM,CAAC,IAAK,MACzD,IAAI9U,EAAQ,KACRy7E,EAAYxzF,KAAK8sL,mBAQrB,OAPIjgK,EAAKqvG,aAAoC,KAArBrvG,EAAKqvG,cACzB1oC,EAAY3mE,EAAKqvG,aAErB/3H,mBAAuBqvF,MAAc30E,KAAKC,UAAU+N,MACpD9U,EAAQ/X,KAAKu4F,YAAY/E,EAAW3mE,EAAK5W,EAAG4W,EAAK3W,EAAG2W,GACpD7sB,KAAKw8H,kBAAkBzkH,EAAO8U,GAC9B7sB,KAAKy8H,wBAAwB1kH,EAAO8U,GAC7B9U,GAIX/X,KAAK++H,oBAAsB,SAASlyG,GAChC,IAAIiyI,EAAY/gK,OAAO4kF,OAAOiqG,EAAAQ,kBAAkBC,iBAC5C,CACI30K,SAAU,IACVmgH,YAAa,GACbI,WAAY,IACZ//G,OAAQ,IAGhB4lJ,EAAY/gK,OAAO4kF,OAAOm8E,EAAWjyI,GACrC1oB,kCAAsC0oB,KACtC,MACMygK,GADW,IAAIV,EAAAQ,mBACUG,WAAW1gK,EAAK5W,EAAG4W,EAAK3W,EACnD4oJ,GAIJ,OADA9+J,KAAKw8H,kBAAkB8wD,EAAexuB,GAC/BwuB,GAGXttL,KAAKm/H,kBAAoB,SAAStyG,GAC9B7sB,KAAKw4F,OAAOoB,WAAW,oBAAqB/sE,EAAM,CAAC,OAAQ,SAC3D,IAAI8xG,EAAa,CACbjmH,SAAU,IACVmgH,YAAa,GACbI,WAAY,IACZ//G,OAAQ,GAEZylH,EAAa5gI,OAAO4kF,OAAOg8C,EAAY9xG,GAEvC,MACM2gK,GADW,IAAIZ,EAAAQ,mBACQj0F,aAAatsE,EAAK5V,KAAM4V,EAAK3V,KACtDynH,GAIJ,OAHAx6H,gCAAoC0oB,KACpC7sB,KAAKw8H,kBAAkBgxD,EAAa7uD,GAC/B9xG,EAAKnU,WAAWmU,EAAKnU,SAAWimH,EAAWjmH,UACzC80K,GASXxtL,KAAK0/H,gBAAkB,SAASxmH,EAAQ2T,GACpC,MAAMouG,EAAYtE,EAAAzB,QAAQC,aAAatoG,GACvCouG,EAAUhsG,OAASjvB,KAAK+1H,QACxB,IAAI03D,EAAY,KAEhB,MAAMx3K,EAACA,EAACC,EAAEA,GAAK2W,EACf,GAAIouG,EAAUyC,UACV,OAAQzC,EAAUyC,WACd,IAAK,UACD+vD,EAAYztL,KAAK0tL,mBAAmBz3K,EAAGC,EAAG+kH,GAC1C,MAEJ,IAAK,UACDwyD,EAAYztL,KAAK2tL,mBACbz0K,EAAQjD,EAAGC,EAAG+kH,GAClB,MAEJ,IAAK,aACDwyD,EAAYztL,KAAK4tL,sBAAsB33K,EAAGC,EAAG+kH,GAC7C,MAEJ,IAAK,OACDwyD,EAAYztL,KAAK6tL,gBAAgB53K,EAAGC,EAAG+kH,GAenD,GALkB,OAAdwyD,IACAA,EAAYztL,KAAKu4F,YAAY,OAAQtiF,EAAGC,EAAG+kH,GAC3Cj7H,KAAKk5J,kBAAkBu0B,EAAWxyD,IAGlCpuG,EAAKkxG,SAAU,CACA0vD,EAAUnjL,YAClBD,QAAQJ,IACNA,EAAMf,IAAI,gBACXe,EAAMq5B,WAAWs5E,YAAYkxE,gBAAgB,YAKzD,GAAIjhK,EAAK4wG,YAAa,CAClB,MAAMA,YAACA,GAAe5wG,EACP4gK,EAAUnjL,YAClBD,QAAQJ,IACXlM,OAAO6qB,KAAK60G,GAAapzH,QAAQzM,IACH,UAAtB6/H,EAAY7/H,IACZqM,EAAMq5B,WAAWs5E,YAAYr5E,aAAa3lC,OAM1D,OAAO6vL,GAGXztL,KAAK0tL,mBAAqB,SAASz2K,EAAMC,EAAM+jH,GAC3CA,EAAUznC,UAAY,QACtBynC,EAAUnvC,SAAW,SAEhBmvC,EAAUpF,iBACXoF,EAAUpF,eAAiB,IAE1BoF,EAAUziH,YACXyiH,EAAUziH,UAAY,GAErByiH,EAAUzjB,gBACXyjB,EAAUzjB,cAAsC,EAAtByjB,EAAUziH,WAExC,MACMT,GADU,IAAI80K,EAAA5zB,eACEt6J,OAAOsY,EAAMC,EAAM+jH,GAGzC,OAFAj7H,KAAKk5J,kBAAkBnhJ,EAAOkjH,GAC9Bj7H,KAAK+tL,oBAAoBh2K,EAAOkjH,GACzBljH,GAGX/X,KAAK6tL,gBAAkB,SAAS52K,EAAMC,EAAM+jH,GACxC,MAAM+yD,EAAY,IAAIj3D,EAAA4F,gBACtB1B,EAAU3pC,WAAa,EACvB,MAAMv5E,EAAQi2K,EAAUrvL,OAAO,IAAK,GAAIs8H,GAExC,OADAj7H,KAAKk5J,kBAAkBnhJ,EAAOkjH,GACvBljH,GAGX/X,KAAK2tL,mBAAqB,SAASz0K,EAAQjC,EAAMC,EAAM+jH,GACnDA,EAAUznC,UAAY,QACtB,IAAIz7E,EAAQ,KASZ,OARe,IAAXmB,GACA+hH,EAAUznC,UAAY,eACtBz7E,EAAQ/X,KAAKu4F,YAAY,eAAgB,IAAK,GAAI0iC,IAGlDljH,EAAQ/X,KAAKu4F,YAAY,OAAQ,IAAK,GAAI0iC,GAE9Cj7H,KAAKk5J,kBAAkBnhJ,EAAOkjH,GACvBljH,GAGX/X,KAAK4tL,sBAAwB,SAAS32K,EAAMC,EAAM+jH,GAC9CA,EAAUznC,UAAY,QACtB,MAAMz7E,EAAQ/X,KAAKu4F,YAAY,OAAQ,IAAK,GAAI0iC,GAEhD,OADAj7H,KAAKk5J,kBAAkBnhJ,EAAOkjH,GACvBljH,GAGX/X,KAAKk5J,kBAAoB,SAASnhJ,EAAOkjH,GACrC,IAAI4C,EAAY5C,EAAU4C,UACrBA,IACDA,EAAY79H,KAAKsoB,IAAI9K,aAAawK,EAAApmB,QAAG+V,aAGpCsjH,EAAUhxH,MAYXjK,KAAKiuL,mBAAmBl2K,EAAOkjH,GAX3B4C,IAAc71G,EAAApmB,QAAGiP,WACjB7Q,KAAKkuL,mBAAmBn2K,EAAOkjH,GAE1B4C,IAAc71G,EAAApmB,QAAGkP,WACtB9Q,KAAKmuL,iBAAiBp2K,EAAOkjH,GAG7Bj7H,KAAKouL,oBAAoBr2K,EAAOkjH,IAS5Cj7H,KAAK+tL,oBAAsB,SAASh2K,EAAOkjH,GACvC,MACMozD,EADMt2K,EAAMyL,SACK4+E,SAAStiG,GACK,eAAjCA,EAAKS,cAAcC,WAEjBu6J,EAAW,IAAI37C,EAAAlI,YACfjoF,EAAS+gB,EAAAvS,YAAYmO,YACrBy0E,EAAqB,CACvB1hG,KAAM7X,GAAQA,EAAKxI,OAAgC,GAAtB28H,EAAUziH,UACvCE,SAAgC,GAAtBuiH,EAAUziH,WAEnBwP,EAAApmB,QAAG6D,cAAc,CAACw1H,EAAUzjB,kBAC7B6I,EAAS7I,cAAgByjB,EAAUzjB,eAGvCujD,EAAS9iD,gBAAgBlgG,EAAOkX,EAAQo/J,EAAYhuE,IAGxDrgH,KAAKiuL,mBAAqB,SAASl2K,EAAOkjH,GACtC,MAAM/a,EAAY,CACd2V,eAAgBoF,EAAUpF,gBAAkB,IAC5Cr9G,UAAWyiH,EAAUziH,WAAa,GAClCmG,KAAMs8G,EAAUhxH,OAGpB,GAAe,IADAjK,KAAK41H,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,GACtC,CACd,MAAM36F,EAASxN,EAAM1B,YACrB,IAAIhS,EAAM,4BACVA,GAAO,mBAAqBwa,KAAKC,UAAUohG,GACvC36F,IACAlhB,GAAO,mBAAqBkhB,EAAO7jB,WAEvCsmB,EAAApmB,QAAGK,IAAI,cAAe,qBAAsBoC,KAIpDrE,KAAKkuL,mBAAqB,SAASn2K,EAAOkjH,GACtC,MAAM/a,EAAY,CACd2V,eAAgBoF,EAAUpF,gBAAkB,IAC5Cr9G,UAAWyiH,EAAUziH,WAAa,GAClCmG,KAAM1U,GACa,UAAfA,EAAMlI,MACS,eAAfkI,EAAMrM,MAGVq9H,EAAUt8G,OAAOuhG,EAAUvhG,KAAOs8G,EAAUt8G,MAChD3e,KAAK41H,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,IAG7ClgH,KAAKmuL,iBAAmB,SAASp2K,EAAOkjH,GACpC,IAAIqzD,GAAQ,EACZ,MAAQA,GAAO,CACX,MAAMC,EAAWvuL,KAAKsoB,IAAI9K,aAAawK,EAAApmB,QAAGoP,YACpCkvG,EAAY,CACd2V,eAAgBoF,EAAUpF,gBAAkB,IAC5Cr9G,UAAWyiH,EAAUziH,WAAa,GAClCmG,KAAM1U,GACFA,EAAMlI,OAASwsL,GAGnBtzD,EAAUt8G,OAAOuhG,EAAUvhG,KAAOs8G,EAAUt8G,MAChD2vK,EAAQtuL,KAAK41H,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,KAIzDlgH,KAAKouL,oBAAsB,SAASr2K,EAAOkjH,GACvC,MAAMszD,EAAWvuL,KAAKsoB,IAAI9K,aAAawK,EAAApmB,QAAGqP,eACpCivG,EAAY,CACd2V,eAAgBoF,EAAUpF,gBAAkB,IAC5Cr9G,UAAWyiH,EAAUziH,WAAa,GAClCmG,KAAM1U,GACFA,EAAMlI,OAASwsL,GAGnBtzD,EAAUt8G,OAAOuhG,EAAUvhG,KAAOs8G,EAAUt8G,MAChD3e,KAAK41H,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,IAG7ClgH,KAAKk+H,gBAAkB,EAACvuG,EAAW5X,KAC/B,MAAM9N,EAAQjK,KAAK+1H,QAAQ9qF,YAAYtb,GACjC7vB,EAAOiY,EAAM0rF,kBACnB1rF,EAAMgW,SAAS9jB,EAAOnK,EAAK6b,OAAQ7b,EAAKkc,UAK5Chc,KAAKy8H,wBAA0B,EAAC1kH,EAAO8U,KACnC,MAAMyqB,EAASv/B,EAAMksF,YACrB,GAAI3sD,EAAOqiB,MAAO,CACdriB,EAAOqiB,MAAMtvD,QAAQunD,IACjBA,EAAKoO,SAAS,CAAC/pD,EAAGC,KACd6B,EAAMoW,WAAW,IAAIsI,EAAQ2C,aAAY,GAAOnjB,EAAGC,OAI3D,MACMoT,EADOtpB,KAAKsoB,IAAI9K,aAAa85B,EAAOqiB,OACxBgH,UAClB3gE,KAAK81G,gBAAgB/9F,EAAOuR,EAAMuD,OAM9C7E,EAAApmB,QAAG0D,QAAQnI,EAAA46H,YAAapB,EAAAtB,gLC3ZxB,MAAArtG,EAAAC,EAAAhrB,EAAA,IAGMkH,EADNlH,EAAA,EACcq3B,CAAI,kBAGLn3B,EAAA+6H,UAAY,WAErBl4H,KAAK84H,WAAa,GAClB94H,KAAKgiI,MAAQ,GACbhiI,KAAKwuL,UAAY,GAEjBxuL,KAAK24H,cAAgB,SAAS9rG,GAC1B7sB,KAAK84H,WAAajsG,GAGtB7sB,KAAKk5H,cAAgB,WACjB,OAAOl5H,KAAK84H,YAGhB94H,KAAKs5H,SAAW,WACZ,OAAOt5H,KAAKgiI,OAKhBhiI,KAAKy4H,UAAY,SAAS5rG,GACtB7sB,KAAKgiI,MAAMp8H,KAAKinB,EAAKjvB,MACrBoC,KAAKwuL,UAAU5oL,KAAKinB,GACpB7sB,KAAKs0B,IAAI,iBAAmBzH,EAAKjvB,OAKrCoC,KAAK04H,SAAW,SAAS7rG,GACrB,MAAMjvB,EAAOivB,EAAKjvB,KACZ6wL,EAAazuL,KAAKgiI,MAAMp+E,MAC9B,GAAI6qI,IAAe7wL,EACfoqB,EAAApmB,QAAGK,IAAI,oBAAqB,sBACbwsL,gBAAyB7wL,SAEvC,CACD,MAAM8wL,EAAW1uL,KAAKwuL,UAAU5qI,MAChC5jD,KAAKs0B,IAAI,iBAAmBo6J,EAAS9wL,QAK7CoC,KAAKssG,QAAU,SAAS1jF,GAEpB,IAAK,IAAIvrB,EAAI2C,KAAKwuL,UAAUjtL,OAAS,EAAGlE,GAAK,EAAGA,IAE5C,GADA2C,KAAKs0B,QAAQj3B,mBAAmBurB,MAC5B5oB,KAAKwuL,UAAUnxL,GAAG6B,eAAe0pB,GAEjC,OADA5oB,KAAKs0B,aAAaj3B,iBAAiBurB,MAC5B5oB,KAAKwuL,UAAUnxL,GAAGurB,GAKjC,OAAI5oB,KAAK84H,WAAW55H,eAAe0pB,GACxB5oB,KAAK84H,WAAWlwG,GAGpB,MAGX5oB,KAAKs0B,IAAM,SAASjwB,GACZF,EAAM0xB,SACN7N,EAAApmB,QAAGgD,KAAKP,iVCpEpB,MACMF,EADNlH,EAAA,EACcq3B,CAAI,sBAElBtM,EAAAC,EAAAhrB,EAAA,IACAorK,EAAAprK,EAAA,IACA0xL,EAAA1xL,EAAA,IACA2xL,EAAA3xL,EAAA,IACAkiH,EAAAliH,EAAA,IACAi0J,EAAAj0J,EAAA,IAEA63G,EAAA73G,EAAA,IACAg6H,EAAAh6H,EAAA,IACA4xL,EAAA5xL,EAAA,KACAk7F,EAAAl7F,EAAA,IACA6xL,EAAA7xL,EAAA,IACAo3B,EAAAp3B,EAAA,GACAqgC,EAAArgC,EAAA,IACAg9K,EAAAh9K,EAAA,IACAq3C,EAAAr3C,EAAA,GACA+yC,EAAA/yC,EAAA,GACAo3C,EAAAp3C,EAAA,GACA8xL,EAAA9xL,EAAA,IACA46K,EAAA56K,EAAA,IACAmtF,EAAAntF,EAAA,IACAw5B,EAAArC,EAAAn3B,EAAA,IACA+xL,EAAA/xL,EAAA,IACA4lG,EAAAzuE,EAAAn3B,EAAA,KACAogB,EAAApgB,EAAA,GACAgyL,EAAAhyL,EAAA,IACA4qH,EAAAzzF,EAAAn3B,EAAA,KACAiyL,EAAAjyL,EAAA,IAEAmgC,EAAAngC,EAAA,IACA0qH,EAAA1qH,EAAA,IACA41C,EAAA51C,EAAA,IAOM8pB,EAAOsN,EAAArN,UAAUC,UACjBod,EAAgBwzI,EAAA56I,MAAMyqF,SAE5BtqF,EAAAyK,MAAM67C,OAASikC,EAAAuB,YACf9rF,EAAAyK,MAAMsnJ,QAAUt8I,EAAAi6E,aAEhB,MAAMsiE,EAAkBhxL,SAMXjB,EAAAkyL,SAAW,WAEpBrvL,KAAKsvL,cAAgB,EACrBtvL,KAAK+1H,QAAU/lF,EAAAvS,YAAYmO,YAG3B5rC,KAAKm4H,SAAW,GAChBn4H,KAAKq4H,UAAY,GACjBr4H,KAAKuvL,cAAgB,GACrBvvL,KAAKwvL,UAAY,GACjBxvL,KAAK2vG,SAAW,GAEhB3vG,KAAKyvL,aAAe,GAGpBzvL,KAAK0vL,aAAe,GACpB1vL,KAAK2vL,YAAc,GAGnB3vL,KAAK4vL,qBAAuB,GAG5B5vL,KAAK6vL,WAAa,GAElB7vL,KAAK2tI,IAAM,GASfxwI,EAAAkyL,SAASpwL,UAAUqyE,MAAQ,WACvBtxE,KAAKm4H,SAAW,GAChBn4H,KAAKq4H,UAAY,GACjBr4H,KAAKuvL,cAAgB,GACrBvvL,KAAKwvL,UAAY,GACjBxvL,KAAK0vL,aAAe,GACpB1vL,KAAK2vL,YAAc,GACnB3vL,KAAK2vG,SAAW,GAEhB3vG,KAAK6vL,WAAa,GAClB7vL,KAAK4vL,qBAAuB,IAGhCzyL,EAAAkyL,SAASpwL,UAAU6wL,aAAe,SAAS//I,GACvC/vC,KAAK+vL,UAAYhgJ,GAGrB5yC,EAAAkyL,SAASpwL,UAAU+wL,gBAAkB,WACjC,OAAOhwL,KAAKsvL,eAGhBnyL,EAAAkyL,SAASpwL,UAAUgxL,UAAY,SAASluL,EAAMqC,EAAKwa,GAC/C,MAAM/H,EAAKzS,EAAI0S,QACVkP,OAAOC,UAAUpP,IAClBmR,EAAApmB,QAAGK,IAAI,WAAY,yCACc4U,MAErC7W,KAAKq4H,UAAUxhH,GAAMzS,EACrBpE,KAAKwvL,UAAU34K,GAAMzS,EACjBwa,IACA5e,KAAKuvL,cAAc14K,GAAM+H,GAGhB,UAAT7c,GACA/B,KAAKm4H,SAASthH,GAAMzS,EACpBpE,KAAK2vG,SAAS94F,GAAMzS,GAEN,YAATrC,GAGS,WAATA,GAILimB,EAAApmB,QAAGK,IAAI,WAAY,gCACKF,WAOhC5E,EAAAkyL,SAASpwL,UAAUixL,YAAc,SAASC,GACtC,IAAI/sC,EAAS,KAIb,GAAoB,YAHKA,EAArB+sC,EAAWv5K,QAAmBu5K,EAAWv5K,QAC9Bu5K,GAEJpuL,KAAmB,CAC1B,MAAM6jB,EAAM5lB,KAAKq4H,UAAU+qB,EAAOvsI,IAClC,IAAK+O,EAAK,CACN,GAAK5lB,KAAKyvL,aAAarsC,EAAOvsI,IAK1B,OAAOu4K,EAJPpnK,EAAApmB,QAAGK,IAAI,WAAY,qBACNmhJ,EAAOvsI,YAM5B,OAAO+O,EAEN,MAAoB,UAAhBw9H,EAAOrhJ,KACL/B,KAAKm4H,SAASirB,EAAOvsI,IAEP,WAAhBusI,EAAOrhJ,KACL/B,KAAKwvL,UAAUpsC,EAAOvsI,IAER,cAAhBusI,EAAOrhJ,KACL/B,KAAK0vL,aAAatsC,EAAOvsI,IAEX,UAAhBusI,EAAOrhJ,KACL/B,KAAK2vG,SAASyzC,EAAOvsI,IAtHV,MAiI1B1Z,EAAAkyL,SAASpwL,UAAUmxL,WAAa,SAAStvF,EAAMuvF,GACnB,iBAAbA,GACProK,EAAApmB,QAAGK,IAAI,gBAAiB,aACpB,6CAERjC,KAAKs0B,IAAI,uCACTt0B,KAAK2tI,IAAM,EAGX3tI,KAAKswL,wBAAwBxvF,EAAMuvF,GAC/BA,EAASE,cACTvwL,KAAK8vL,cAAa,GAGtBz7I,EAAAlqB,UAAUuwE,WAAW21F,EAASG,iBAG9B,MAAMC,EAAY,GAsBlB,GArBwBzwL,KAAK0wL,mBAAmBL,GAIhChmL,QAAQsmL,IACpB,MAAM54K,EAAQ/X,KAAK4wL,aAAaD,GAChCF,EAAU7qL,KAAKmS,GACV44K,EAAUprK,SACXvlB,KAAKs0B,IAAI,iCAAmCvc,EAAMjB,SAClDgqF,EAAKk8B,SAASjlH,MAIlBs4K,EAASQ,QACT9yL,OAAO6qB,KAAKynK,EAASQ,QAAQxmL,QAAQzM,IACjC,MAAMy/I,EAAQgzC,EAASQ,OAAOjzL,GACxBwoI,EAAWpmI,KAAK8wL,aAAazzC,GACnCv8C,EAAKiwF,SAAS3qD,KAIlBiqD,EAASj3D,UAAW,CACpB,MAAMA,EAAYp5H,KAAKgxL,iBAAiBX,EAASj3D,WACjDt4B,EAAKq4B,aAAaC,GAWtB,GARIi3D,EAASY,UACTnwF,EAAKowF,YAAYlxL,KAAKmxL,gBAAgBd,EAASY,WAInDjxL,KAAKoxL,kBAAkBX,GAGnBJ,EAAStsL,OAAQ,CACjB,MAAMA,EAAS/D,KAAKqxL,cAAchB,EAAStsL,QAC3C/D,KAAKsxL,wBAAwBvtL,EAAQ+8F,EAAMuvF,GAK/CrwL,KAAKuxL,oBAILvxL,KAAKwxL,uBAEL,MAAMC,EAAazxL,KAAK0xL,kBAAkB5wF,EAAMuvF,EAASoB,YAczD,GAbA3wF,EAAK6wF,cAAcF,GACnBzxL,KAAK4xL,oBAAoB9wF,EAAMuvF,GAE/BrwL,KAAK6xL,iBAAiB/wF,EAAMuvF,GAI5Bv7E,EAAAC,WAAWE,GAAKo7E,EAASyB,aAErB3tL,EAAM0xB,SACN71B,KAAKs0B,uCAAuCwgF,EAAAC,WAAWE,MAGvDo7E,EAAS/nK,IAAK,CACd,MAAMA,EAAM,IAAIjL,EAAAC,OAAO+yK,EAAS/nK,IAAIE,MACpCF,EAAIK,SAAS0nK,EAAS/nK,IAAI/lB,OAC1Bu+F,EAAKw3B,OAAOhwG,GAEhB,GAAI+nK,EAAS0B,QAAS,CAClB,MAAMA,EAAU,IAAI10K,EAAAC,OAAO+yK,EAAS0B,QAAQvpK,MAC5CupK,EAAQppK,SAAS0nK,EAAS0B,QAAQxvL,OAClC+6B,EAAAwE,KAAKrZ,IAAMspK,EAIf,OADA/xL,KAAK2tI,IAAM,EACJ7sC,GAIX3jG,EAAAkyL,SAASpwL,UAAUoyL,cAAgB,SAASzyK,GACxC,MAAM7a,EAAS,IAAIsgC,EAAczlB,EAAKhhB,MAgBtC,OAfAmG,EAAO0jL,aAAY,GAEnB1jL,EAAO21B,OAAO,aACd31B,EAAO21B,OAAO,cAEd31B,EAAO81B,QAAQjb,EAAK7c,MACpBgC,EAAO28D,MAAM9hD,EAAK/H,IAGlB7W,KAAKsvL,cAAgB1wK,EAAK2rG,aAC1BvqH,KAAKiwL,UAAU,SAAUlsL,EAAQ6a,GAEjCoJ,EAAApmB,QAAGC,aAAammB,EAAApmB,QAAGiL,WAAY+R,EAAKhhB,KAAM,qBAGnCmG,GAIX5G,EAAAkyL,SAASpwL,UAAU+yL,mBAAqB,SAASjuL,EAAQkuL,GACrD,MAAMnzJ,EAAQ/6B,EAAOu/B,WACfq5E,EAAS79E,EAAM89E,YACfs1E,EAAUD,EAAUt1E,OAC1B5+G,OAAO6qB,KAAKspK,GAAS7nL,QAAQy4B,IACzB65E,EAAO75E,GAAQovJ,EAAQpvJ,MAEvBmvJ,EAAUvrC,UACV5nH,EAAMkpH,UAAUlpC,SAASmzE,EAAUvrC,WAK3CvpJ,EAAAkyL,SAASpwL,UAAUqyL,wBAA0B,SAASvtL,EAAQ+8F,EAAMliF,GAChE5e,KAAKmyL,gBAAgBrxF,EAAM/8F,GAC3B,MAAM8S,EAAK+H,EAAK7a,OAAOo+E,QACjBpqE,EAAQ+oF,EAAKC,YAAY76E,KAAKpf,GAAQA,EAAKgQ,UAAYD,GAC7D,GAAIkB,EAAO,CACP,MAAM9B,EAAI2I,EAAK7a,OAAOkS,EAChBC,EAAI0I,EAAK7a,OAAOmS,EACtB6B,EAAMgW,SAAShqB,EAAQkS,EAAGC,GAC1B4qF,EAAKsxF,UAAUruL,OAEd,CACD,MACMM,oBADWy8F,EAAKC,YAAY1rF,IAAI/X,GAAKA,EAAEwZ,WAE7CkR,EAAApmB,QAAGK,IAAI,gBAAiB,2EAC6B4U,MAAOxS,OAKpElH,EAAAkyL,SAASpwL,UAAUozL,cAAgB,SAASzzK,EAAM2H,GAW9C,OAVIyB,EAAApmB,QAAGoe,QAAQuG,IACXvmB,KAAKg/B,YAAYpgB,EAAKkgB,MAAOvY,GAC7BvmB,KAAKsyL,mBAAmB1zK,EAAM2H,IAEzByB,EAAApmB,QAAGse,UAAUqG,GAClBvmB,KAAKuyL,qBAAqB3zK,EAAM2H,GAGhCvmB,KAAKwyL,mBAAmB5zK,EAAM2H,GAE3BA,GAGXppB,EAAAkyL,SAASpwL,UAAUqzL,mBAAqB,SAASluL,EAAKmiB,GAClDvmB,KAAKyyL,iBAAiBlsK,EAAQniB,EAAIozB,YAClCx3B,KAAK0yL,qBAAqBtuL,EAAKmiB,GAC/BvmB,KAAK2yL,oBAAoBvuL,EAAKmiB,GAC1BniB,EAAImlH,UACJhjG,EAAOmiG,YAAYtkH,EAAImlH,UAEvBnlH,EAAIslH,WACJ1pH,KAAK4yL,aAAaxuL,EAAKmiB,IAI/BppB,EAAAkyL,SAASpwL,UAAUszL,qBAAuB,SAAS3zK,EAAM2H,GAC5B,UAArBA,EAAO/lB,WACPoe,EAAKwb,UAAU/vB,QAAQ+4I,IACnB,MAAMyvC,EAASzvC,EAAOxsI,QAChBk8K,EAAa9yL,KAAKq4H,UAAUw6D,EAAOh8K,IACrCi8K,GACAvsK,EAAO6T,UAAU04J,MAMjC31L,EAAAkyL,SAASpwL,UAAUuzL,mBAAqB,SAAS5zK,EAAM2H,GACnDvmB,KAAKyyL,iBAAiBlsK,EAAQ3H,EAAK4Y,aAIvCr6B,EAAAkyL,SAASpwL,UAAUwzL,iBAAmB,SAAS7sK,EAAKxF,GAChD,IAAK,MAAMvJ,KAAMuJ,EACb,GAAIvJ,EAAI,CACJ,MAAMk8K,EAAW3yK,EAAMvJ,GACjBjZ,EAAOm1L,EAASl5J,QACtB,IAAKj8B,EAAM,CACP,MAAMyG,EAAM,2BACZ2jB,EAAApmB,QAAGK,IAAI,gBAAiB,mBACpBoC,EAAM,KAAOwa,KAAKC,UAAUi0K,IAGpC,MAAMC,EAAahzL,KAAK4/B,gBAAgBhiC,EAAMm1L,GAC9CntK,EAAItF,IAAI0yK,KAMpB71L,EAAAkyL,SAASpwL,UAAU2gC,gBAAkB,SAAShiC,EAAMm1L,GAChD,IAAK1+I,EAAAlqB,UAAUjrB,eAAetB,GAAO,CACjC,IAAIyG,SAAazG,mBACjByG,iBAAqBwa,KAAKC,UAAUi0K,KACpC/qK,EAAApmB,QAAGK,IAAI,gBAAiB,kBAAmBoC,GAG/C,MAAM2uL,EAAa,IAAI3+I,EAAAlqB,UAAUvsB,GACjC,IAAK,MAAM2rJ,KAAWwpC,EAClB,GAAmC,mBAAxBC,EAAWzpC,GAAyB,CAC3C,MAAMsqB,EAAakf,EAASxpC,GACtBjrJ,EAAQ0B,KAAKizL,aAAaD,EAC5BD,EAAUxpC,EAASsqB,GACvBmf,EAAWzpC,GAASjrJ,OAEnB,CACD,MAAMsgB,EAAOC,KAAKC,UAAUi0K,GAC5B/qK,EAAApmB,QAAGK,IAAI,WAAY,qBACZsnJ,qBAA2B3rJ,YAAeghB,KAIzD,MAAM/H,EAAKm8K,EAAWl8K,QAGtB,OAFA9W,KAAK0vL,aAAa74K,GAAMm8K,EACxBhzL,KAAK2vL,YAAY94K,GAAMk8K,EAChBC,GAWX71L,EAAAkyL,SAASpwL,UAAUg0L,aAAe,SAC9B7sK,EAAM2sK,EAAUxpC,EAASsqB,GAEzB,GAAK7rJ,EAAApmB,QAAG6D,cAAc,CAACouK,IAgDlB,CACD,MAAM7nI,EAAUntB,KAAKC,UAAUi0K,GAC/B,IAAI1uL,iBAAqBwvK,gBAAyBtqB,KAClDllJ,YAAgB0uL,EAASl5J,mBAAmBmS,IAC5ChkB,EAAApmB,QAAGK,IAAI,WAAY,mBAAoBoC,OApDN,CACjC,GAAIkP,MAAMC,QAAQqgK,GAAa,CAE3B,GAAKA,EAAmBn9J,aAEpB,OADA1W,KAAK4vL,qBAAqBmD,EAASryH,OAASt6C,EACrCytJ,EAEX,MAAMqf,EAAW,GAKjB,OAJArf,EAAWxpK,QAAQ/L,IACf,MAAMwH,EAAM9F,KAAKizL,aAAa7sK,EAAM2sK,EAAUxpC,EAASjrJ,GACvD40L,EAASttL,KAAKE,KAEXotL,EAEN,GAAIrf,EAAWp5F,WAAY,CAG5B,OADIz6E,KAAK6zK,EAAWp5F,YAAYo5F,EAAWv1K,OAG1C,GAAIu1K,EAAWhwF,WAAY,CAC5B,MAAMmY,EAAW63E,EAAWhwF,WAAWhqD,QAIvC,OAFmB75B,KAAK4/B,gBAAgBo8D,EACpC63E,EAAWhwF,YAGd,IAAIgwF,EAAWj9J,QAmBhB,OAAOi9J,EAlBP,GAAgC,cAA5BA,EAAWj9J,QAAQ7U,KAcnB,OADA/B,KAAK4vL,qBAAqBmD,EAASryH,OAASt6C,EACrCytJ,EAdkC,CACzC,MAAMsf,EAAWnzL,KAAKkwL,YAAYrc,EAAWj9J,SAC7C,GAAIu8K,EACA,OAAOA,EAEN,CAED,IAAI9uL,yBADYwa,KAAKC,UAAU+0J,EAAWj9J,WAE1CvS,iBAAqBwa,KAAKC,UAAUi0K,KACpC/qK,EAAApmB,QAAGK,IAAI,WAAY,eAAgBoC,KAkBnD,OAAO,MAGXlH,EAAAkyL,SAASpwL,UAAUm0L,iBAAmB,SAASjuL,GAC3C,MAAMjF,UAACA,EAAS69E,SAAEA,GAAY54E,EACxB8E,EAAQjK,KAAKkwL,YAAYnyG,GAC/B,OAAI9zE,EACO6kL,EAAArxG,WAAW9+E,OAAOuB,EAAW+J,IAExC+d,EAAApmB,QAAGK,IAAI,WAAY,yCACO/B,WACnB,OAGX/C,EAAAkyL,SAASpwL,UAAUo0L,gBAAkB,SAASz0K,GAC1C,MAAM00K,EAAY,IAAIr8D,EAAA2xD,UAmBtB,OAlBAhqK,EAAK66D,KAAKpvE,QAAQo/K,IACd,IAAIrqK,EAAS,KAOb,IALIA,EADAqqK,EAASrqK,OAAOxI,QACP5W,KAAKkwL,YAAYzG,EAASrqK,OAAOxI,SAGjC6yK,EAASrqK,UAEPgwK,EACXhwK,EAAS,CAAC/a,IAAK,oCAGd,IAAK+a,EAAQ,CACd,MAAM/a,qBAAyBwa,KAAKC,UAAU2qK,EAASrqK,UACvD4I,EAAApmB,QAAGK,IAAI,WAAY,cAAeoC,GAEtCivL,EAAUl5J,UAAUqvJ,EAAS1nL,KAAMqd,KAEhCk0K,GAGXn2L,EAAAkyL,SAASpwL,UAAU+/B,YAAc,SAASizJ,EAAWrsK,GACjD,MAAM7jB,EAAOkwL,EAAUlwL,KACvB,GAAIq7B,EAAAyK,MAAM9lC,GAAO,CACb,MAAMwxL,EAAW,IAAIn2J,EAAAyK,MAAM9lC,GAAM6jB,GAEjC,GADAA,EAAI+xJ,SAAS4b,GACA,WAATxxL,EAEA,YADA/B,KAAKgyL,mBAAmBpsK,EAAKqsK,GAI7BA,EAAUllE,YACVwmE,EAASC,cAAcvB,EAAUllE,YAIrC,MAAM0mE,EAASF,EAAS32E,YAClBs1E,EAAUD,EAAUt1E,OAC1B,GAAIu1E,EAAS,CAKT,GAJAA,EAAQluC,WAAW35I,QAAQg5B,IACvBkwJ,EAAShwJ,aAAaF,KAGtB6uJ,EAAQjuC,eAAgB,CACxB,MAAM19H,EAASvmB,KAAKq4H,UAAU65D,EAAQjuC,gBACtCwvC,EAAOniD,gBAAgB/qH,GAuB3B,GApBI2rK,EAAQ9uJ,SACR8uJ,EAAQ9uJ,QAAQ/4B,QAAQqpL,IACpB,MAAM93E,EAAQ57G,KAAKq4H,UAAUq7D,GACzB93E,GACA63E,EAAO3tE,SAASlK,KAIxBs2E,EAAQlrE,SACRkrE,EAAQlrE,QAAQ38G,QAAQspL,IACpB,MAAMC,EAAS5zL,KAAKq4H,UAAUs7D,GAC1BC,GACAH,EAAO1tE,UAAU6tE,KAIzB1B,EAAQptK,OACR2uK,EAAOlnE,QAAQznG,KAAOotK,EAAQptK,MAG9BmtK,EAAU74E,KAAM,CAChB,MAAMA,EAAOp5G,KAAK6zL,cAAc5B,EAAU74E,KAAMxzF,GAChD2tK,EAASjW,QAAQlkE,QAGP,UAATr3G,GACLwxL,EAAS32E,YAAYr5E,aAAa,eAItCvb,EAAApmB,QAAGK,IAAI,WAAY,mCACMF,YAAekwL,MAKhD90L,EAAAkyL,SAASpwL,UAAU40L,cAAgB,SAASj1K,EAAM2H,GAC9C,MAAM6yF,EAAO,IAAIw1E,EAAAz9B,SAASvyI,EAAK7c,MAAMwkB,GAkBrC,OAjBA6yF,EAAKo5C,mBACL5zI,EAAKyyI,WAAWhnJ,QAAQynJ,IACpB,IAAIj3C,EAAY,KAChB,GAAIsE,EAAApG,UAAU+4C,EAAG/vJ,MACb84G,EAAY,IAAIsE,EAAApG,UAAU+4C,EAAG/vJ,MAAM+vJ,EAAGx4C,WAErC,GAAI43C,EAAAiC,iBAAiBrB,EAAG/vJ,MACzB84G,EAAY,IAAIq2C,EAAAiC,iBAAiBrB,EAAG/vJ,MAAM+vJ,EAAGx4C,UAE5C,CACD,MAAMj1G,aAAiBwa,KAAKC,UAAUyH,KACtCyB,EAAApmB,QAAGK,IAAI,WAAY,6BACF6vJ,EAAG/vJ,mBAAmBsC,KAEvCytJ,EAAG3sJ,MAAO01G,EAAUn6B,QAAQoxE,EAAG3sJ,MACnCi0G,EAAKwH,aAAa/F,KAEfzB,GAGXj8G,EAAAkyL,SAASpwL,UAAU2zL,aAAe,SAASh0K,EAAM2H,GAY7C,OAXAA,EAAO0iG,WAAa,IAAIgxD,EAAAx2I,MAAMC,UAAUnd,GACxC3H,EAAK8qG,UAAU/lF,OAAOt5B,QAAQu5B,IAC1B,GAAIq2I,EAAAx2I,MAAMvkC,eAAe0kC,EAAM0kF,KAAM,CACjC,MAAMwrE,EAAW9zL,KAAK+zL,aAAanwJ,EAAOrd,GAC1CA,EAAO0iG,WAAWjlF,SAAS8vJ,QAG3B9rK,EAAApmB,QAAGK,IAAI,WAAY,2BACH2hC,EAAM0kF,wBAGvB/hG,EAAO0iG,YAKlB9rH,EAAAkyL,SAASpwL,UAAU80L,aAAe,SAASnwJ,EAAOrd,GAC9C,MAAMutK,EAAW,IAAI7Z,EAAAx2I,MAAMG,EAAM0kF,KAMjC,GALAwrE,EAAS97C,SAASp0G,EAAMmqF,OACpBnqF,EAAMn6B,OACNqqL,EAAS1hD,SAASxuG,EAAMn6B,OAGxBm6B,EAAMyzD,KAAM,CACZ,MAAMA,EAAO,GACbt5F,OAAO6qB,KAAKgb,EAAMyzD,MAAMhtF,QAAQzL,IAC5B,MAAM65I,EAAM70G,EAAMyzD,KAAKz4F,GACvBy4F,EAAKz4F,GAAO0+B,EAAAwE,KAAKnjC,OAAO85I,KAE5Bq7C,EAASv8F,MAAQF,EASrB,OAPIzzD,EAAMD,SACNmwJ,EAAS94C,eACTp3G,EAAMD,OAAOt5B,QAAQ2pL,IACjB,MAAMC,EAAWj0L,KAAK+zL,aAAaC,EAASztK,GAC5CutK,EAAS9vJ,SAASiwJ,MAGnBH,GAIX32L,EAAAkyL,SAASpwL,UAAU+rC,WAAa,SAAS5mC,GACrC,MAAM0C,EAAO1C,EAIb,IAAI8hC,EAAU,KACd,GAAIlmC,KAAK+1H,QAAQ7qF,QAAQ9mC,EAAI04F,SACzB52D,EAAUlmC,KAAK+1H,QAAQ/qF,WAAW5mC,EAAI04F,aAErC,CACD,MAAMo3F,EAAkBl0L,KAAKm0L,kBAAkBrtL,GAC/C,GAAIioL,EAAA7xJ,KAAKg3J,GACLhuJ,EAAU,IAAI6oJ,EAAA7xJ,KAAKg3J,OAElB,CACD,IAAI7vL,gBAAoB6vL,qBACxB7vL,aAAiBwa,KAAKC,UAAU1a,KAChC4jB,EAAApmB,QAAGK,IAAI,WAAY,aAAcoC,IAIzC,IAAK,MAAMsa,KAAQ7X,EACf,GAAa,cAAT6X,EAAsB,CAEtB,MAAMy1K,EAAattL,EAAK6X,GAClB01K,EAAYr0L,KAAKirC,YAAYmpJ,GACnCp0L,KAAKsyL,mBAAmB8B,EAAYC,GACpCnuJ,EAAQvnB,GAAM01K,QAEb,GAA6B,mBAAlBnuJ,EAAQvnB,GACpBunB,EAAQvnB,GAAM7X,EAAK6X,SAElB,GAAa,eAATA,GACQ,aAATA,EAAqB,CACrB,MAAMC,EAAOC,KAAKC,UAAUonB,GAC5Ble,EAAApmB,QAAGK,IAAI,gBAAiB,gBACnB0c,iBAAoBC,KAQrC,OAJA5e,KAAKs0L,cAAcpuJ,EAAS9hC,GACxB0C,EAAK0wB,YACLx3B,KAAKyyL,iBAAiBvsJ,EAAS9hC,EAAIozB,YAEhC0O,GAIX/oC,EAAAkyL,SAASpwL,UAAUyzL,qBAAuB,SAAStuL,EAAKL,GACpD,GAAIK,EAAIlF,eAAe,aAAc,CACjC,MAAMq1L,EAAWnwL,EAAIolH,UACrB,IAAK,IAAInsH,EAAI,EAAGA,EAAIk3L,EAAShzL,OAAQlE,IAAK,CACtC,MAAM6oC,EAAUlmC,KAAKgrC,WAAWupJ,EAASl3L,IACzC0G,EAAO0D,WAAWumB,QAAQkY,MAKtC/oC,EAAAkyL,SAASpwL,UAAU0zL,oBAAsB,SAASvuL,EAAKL,GACnD,GAAIK,EAAIlF,eAAe,aAAc,CACjC,MAAMs1L,EAAYpwL,EAAIqlH,UACtB,IAAK,IAAIpsH,EAAI,EAAGA,EAAIm3L,EAAUjzL,OAAQlE,IAAK,CACvC,MAAM6oC,EAAUlmC,KAAKgrC,WAAWwpJ,EAAUn3L,IAC1C0G,EAAO0D,WAAWg/B,gBAAgBP,MAO9C/oC,EAAAkyL,SAASpwL,UAAUk1L,kBAAoB,SAASrtL,GAC5C,GAAqB,cAAjBA,EAAK+yB,QAA0B,MAAO,YAC1C,GAAqB,aAAjB/yB,EAAK+yB,QAAyB,MAAO,WACzC,GAAqB,kBAAjB/yB,EAAK+yB,QAA8B,MAAO,gBAC9C,GAAK7R,EAAApmB,QAAG6D,cAAc,CAACqB,IAWnBkhB,EAAApmB,QAAGK,IAAI,YAAa,oBAChB,yBAZuB,CAC3B,IAAK+lB,EAAApmB,QAAG6D,cAAc,CAACqB,EAAK+yB,UACxB,OAAO/yB,EAAK+yB,QAAQiD,aAEnB,CACD,MAAM23J,EAAW51K,KAAKC,UAAUhY,GAChCkhB,EAAApmB,QAAGK,IAAI,YAAa,oBAChB,oCAAsCwyL,IAOlD,OAAO,MAKXt3L,EAAAkyL,SAASpwL,UAAU2xL,aAAe,SAAShyK,GACvC,MAAM7G,EAAQ,IAAIogF,EAAAzjD,MAClB38B,EAAM2oD,MAAM9hD,EAAK/H,IACjBkB,EAAM8vF,eAAejpF,EAAKq5B,aAE1B,MAAM05C,EAAS3xF,KAAK00L,cAAc91K,EAAKvJ,KA6CvC,OA5CA0C,EAAM6gF,OAAOjH,GAGb/yE,EAAKjb,OAAO0G,QAAQJ,IAChB,MAAM0qL,EAAW30L,KAAKirC,YAAYhhC,EAAM7F,KACvB,OAAbuwL,EACK30L,KAAK40L,UAAU3qL,GAIhB8N,EAAM88K,eAAe7sK,EAAApmB,QAAGiL,WAAY8nL,GAHpC58K,EAAMgW,SAAS4mK,EAAU1qL,EAAMgM,EAAGhM,EAAMiM,GAO5C8R,EAAApmB,QAAGK,IAAI,WAAY,wBACN4c,KAAKC,UAAU7U,sBAKpC2U,EAAKle,SAAS2J,QAAQ4jB,IAClB,MAAM8wF,EAAU/+G,KAAKwvB,cAAcvB,GACnB,OAAZ8wF,EACAhnG,EAAMoW,WAAW4wF,EAAS9wF,EAAKhY,EAAGgY,EAAK/X,GAGvC8R,EAAApmB,QAAGK,IAAI,WAAY,gCACE4c,KAAKC,UAAUmP,sBAK5CrP,EAAKhb,MAAMyG,QAAQvD,IACf,MAAMo/B,EAAUlmC,KAAKgrC,WAAWlkC,EAAK1C,KACrB,OAAZ8hC,EACAnuB,EAAMiW,QAAQkY,EAASp/B,EAAKmP,EAAGnP,EAAKoP,GAGpC8R,EAAApmB,QAAGK,IAAI,WAAY,wBACN4c,KAAKC,UAAUhY,sBAIpC9G,KAAK80L,UAAU,CAAC/8K,GAAQ,eAAgB,CAAC6G,IAClC7G,GAGX5a,EAAAkyL,SAASpwL,UAAU21L,UAAY,SAASG,GACpC,OAAyB,IAAjBA,EAAU9+K,IAA6B,IAAjB8+K,EAAU7+K,GAI5C/Y,EAAAkyL,SAASpwL,UAAUuwB,cAAgB,SAASvB,GACxC,MAAM+mK,EAAW/mK,EAAK7pB,IAChBrC,EAAOizL,EAASjzL,KACtB,IAAIkzL,EAAc,KAClB,GAAa,eAATlzL,EACAkzL,EAAcj1L,KAAKk1L,wBAAwBjnK,QAE1C,GAAa,SAATlsB,EAAiB,CACtB,MAAMygH,EAAW,IAAI/rF,EAAQ6D,YAC7B,IAAIY,EAAa,KACZlT,EAAApmB,QAAG6D,cAAc,CAACuvL,EAAS95J,gBAC5BA,EAAal7B,KAAKq4H,UAAU28D,EAAS95J,aAEjCsnF,EAAStS,cAAch1E,GAGvBlT,EAAApmB,QAAGK,IAAI,gBAAiB,sCACE+yL,EAAS95J,yBAG3CsnF,EAAS2yE,cAAcH,EAAS/5J,cAC5B+5J,EAASh6J,gBACTg6J,EAASj6J,aACTynF,EAASvS,cAEbglF,EAAczyE,OAEb,GAAa,SAATzgH,EACLkzL,EAAc,IAAIx+J,EAAQ2C,YAAY47J,EAAS37J,aAE9C,GAAa,cAATt3B,EACLkzL,EAAc,IAAIx+J,EAAQmD,iBAAiBo7J,EAAS37J,aAEnD,GAAa,UAATt3B,EACLkzL,EAAc,IAAIx+J,EAAQwD,kBAEzB,GAAa,WAATl4B,GACLkzL,EAAc,IAAIx+J,EAAQiG,cAAcs4J,EAASr4J,OACrCivD,OAAOopG,EAASp4J,UAE3B,GAAa,gBAAT76B,EAAwB,CAC7B,MAAMqzL,EAAU,IAAI3+J,EAAQ2E,mBAC5Bg6J,EAAQ95J,OAAO05J,EAAS15J,QAEpB05J,EAASrwK,MAAOywK,EAAQ5yG,QAAQwyG,EAASrwK,MAC7CswK,EAAcG,MAEA,QAATrzL,EACLkzL,EAAc,IAAIx+J,EAAQoF,WAEZ,UAAT95B,EACLkzL,EAAc,IAAIx+J,EAAQ2F,aAEZ,SAATr6B,IACLkzL,EAAc,IAAIx+J,EAAQ6F,aAQ9B,GAJI04J,EAAS3wL,KACT4wL,EAAYI,OAAOL,EAAS3wL,KAG5B4wL,EAAa,CACb,MAAMp+K,EAAKm+K,EAASn+K,GAChBmP,OAAOC,UAAUpP,KACjBo+K,EAAYv0H,MAAM7pD,GAClB7W,KAAKiwL,UAAU,UAAWgF,EAAaD,IAI/C,OAAOC,GAKX93L,EAAAkyL,SAASpwL,UAAUgsC,YAAc,SAASrsB,GACpB,OAAdA,EAAK7c,MACLimB,EAAApmB,QAAGK,IAAI,WAAY,uCACU4c,KAAKC,UAAUF,MAGhD,IAAI2H,EAAS,KACb,GAAI3H,EAAK0pG,KAAOuvD,EAAA56I,MAAMre,EAAK0pG,KACvB/hG,EAAS,IAAIsxJ,EAAA56I,MAAMre,EAAK0pG,KAAK1pG,EAAKhhB,UAEjC,CACD,IAAIyG,EAAM,GACV,MAAM2nC,EAAUntB,KAAKC,UAAUF,GAC/B,GAAKA,EAAK0pG,IAGL,CACD,MAAM1/F,EAAO7qB,OAAO6qB,KAAKivJ,EAAA56I,OACzB54B,KAASua,EAAK0pG,wBAAwB1/F,gBAAqBojB,OAJ3D3nC,EAAM,gCAAkC2nC,EAM5ChkB,EAAApmB,QAAGK,IAAI,gBAAiB,cAAeoC,GAM3C,OAHAkiB,EAAOsT,QAAQjb,EAAK7c,MACpBwkB,EAAOm6C,MAAM9hD,EAAK/H,IAClB7W,KAAKs0L,cAAc/tK,EAAQ3H,GACpB2H,GAKXppB,EAAAkyL,SAASpwL,UAAUq1L,cAAgB,SAAS/tK,EAAQ3H,GAChD5e,KAAKiwL,UAAU,SAAU1pK,EAAQ3H,IAOrCzhB,EAAAkyL,SAASpwL,UAAUi2L,wBAA0B,SAASjnK,GAClD,MAAMhY,EAACA,EAACC,EAAEA,GAAK+X,EAETqnK,KADKrnK,EAAK7pB,IAAI+zB,YACMliB,KAAKC,IACzB6oG,EAAU9wF,EAAK7pB,IACfmxL,EAAO,IAAI9+J,EAAQwB,cAAc8mF,EAAQnhH,MAG/C,OAFAoC,KAAK6vL,WAAWyF,GAAY,CAACl9J,YAAa2mF,EAAQ3mF,YAC9CY,aAAc+lF,EAAQ/lF,cACnBu8J,GAIXp4L,EAAAkyL,SAASpwL,UAAUy1L,cAAgB,SAASr/K,GACxC,GAAIA,EAAIspG,QACJ,OAAOv0B,EAAAuB,QAAQmzB,SAASzpG,GAE5B,MAAMs8E,EAAS,IAAIvH,EAAAuB,QAAQt2E,EAAI4B,KAAM5B,EAAI6B,MAgBzC,OAfA7B,EAAI+sE,MAAM/3E,QAAQ,CAACm7F,EAAKvvF,KACpBuvF,EAAIn7F,QAAQ,CAACvK,EAAMoW,KACf,MAAM+4E,EAAWjvF,KAAKw1L,eAAe11L,GACrC6xF,EAAO/7C,cAAc3/B,EAAGC,EAAG+4E,OAGnC55E,EAAIgpG,SAASh0G,QAAQorL,IACjB9jG,EAAOljE,QAAQgnK,EAAO,GAAIA,EAAO,IAAIzwK,gBAQlC2sE,GAIXx0F,EAAAkyL,SAASpwL,UAAUu2L,eAAiB,SAAS11L,GACzC,MAAMiC,EAAOuyC,EAAAhC,SAASG,gBAAgB3yC,GACtC,OAAIw0C,EAAAhC,SAASC,cAAcxwC,GAChBuyC,EAAAhC,SAASC,cAAcxwC,IAG9BimB,EAAApmB,QAAGK,IAAI,gBAAiB,iCACJF,KA2BjB,OAGX5E,EAAAkyL,SAASpwL,UAAUqxL,wBAA0B,SAASxvF,EAAMuvF,GACpDA,EAASv3D,aACT94H,KAAKs0B,IAAI,gCACHzV,KAAKC,UAAUuxK,EAASv3D,WAAY,KAAM,IAChDh4B,EAAK63B,cAAc03D,EAASv3D,aAE5Bu3D,EAAS5vL,aACTunB,EAAApmB,QAAGnB,WAAa4vL,EAAS5vL,YAEzB4vL,EAAShvL,aACT2mB,EAAApmB,QAAGP,WAAagvL,EAAShvL,YAEzBgvL,EAASZ,eACTzvL,KAAKyvL,aAAeY,EAASZ,aAC7B3uF,EAAK2uF,aAAeY,EAASZ,eAOrCtyL,EAAAkyL,SAASpwL,UAAUmyL,kBAAoB,SAASxkK,GAC5CA,EAAOviB,QAAQ0N,IACQA,EAAM6/G,iBAEdvtH,QAAQjL,IACf,MAAM25B,EAAU/4B,KAAK6vL,WAAWzwL,EAAE0X,SAC5BshB,EAAcp4B,KAAKm4H,SAASp/F,EAAQX,aAC1C,IAAKA,GAAep4B,KAAK+vL,UAErB,YADA3wL,EAAEs2L,WAAW38J,GAIjB,MAAM48J,EAAiB58J,EAAQC,aAC1B28J,IACD3tK,EAAApmB,QAAGgD,KAAKia,KAAKC,UAAU/G,EAAO,KAAM,IACpCiQ,EAAApmB,QAAGgD,KAAKm0B,GACR/Q,EAAApmB,QAAGgD,KAAK,WAAamT,EAAM1B,YAAY3U,WACvCsmB,EAAApmB,QAAGgD,KAAKia,KAAKC,UAAU1f,KAG3B,MAAM6W,EAAI0/K,EAAe1/K,EACnBC,EAAIy/K,EAAez/K,EACzB,GAAIkiB,EAAa,CACbh5B,EAAEs5B,eAAeN,GACjB,MAAMY,EAAeZ,EAChB5U,SAASiL,QAAQxY,EAAGC,GAAG6/B,gBACxB/c,EACA55B,EAAE+0D,QAAQn7B,GAGVhR,EAAApmB,QAAGK,IAAI,gBAAiB,oBACpB,+CAGP,CAED,MAAM4U,EAAKkiB,EAAQX,YACnBpQ,EAAApmB,QAAGK,IAAI,gBAAiB,oCACJ4U,iCAMpC1Z,EAAAkyL,SAASpwL,UAAUyyL,kBAAoB,SAAS5wF,EAAMliF,KAChD5e,KAAK2tI,IACP,MAAM8jD,EAAa3wF,EAAK80F,gBAClBC,EAAU,GA2BhB,OA1BA93L,OAAO6qB,KAAKhK,EAAKi3K,SAASxrL,QAAQwM,IAC9B+H,EAAKi3K,QAAQh/K,GAAIxM,QAAQyrL,IAErB,GADAD,EAAQh/K,GAAM,GACV7W,KAAKm4H,SAASthH,GAAK,CACnB7W,KAAKs0B,iCAAiCzd,KACtC,MAAM0rH,EAASviI,KAAK+1L,cAAcD,GAClCD,EAAQh/K,GAAIjR,KAAK28H,QAOjBviI,KAAKs0B,uBAAuBzd,iBAC5B7W,KAAKs0B,IAAIzV,KAAKC,UAAUg3K,IAGxBD,EAAQh/K,GAAIjR,KAAKkwL,OAI7BrE,EAAWuE,WAAWH,GAClBj3K,EAAKq3K,cACLxE,EAAWwE,YAAcr3K,EAAKq3K,eAEhCj2L,KAAK2tI,IACA8jD,GAGXt0L,EAAAkyL,SAASpwL,UAAU82L,cAAgB,SAASn3K,GACxC,MAAMs3K,EAAcl2L,KAAKm2L,gBAAgBv3K,EAAK7G,MAAO,iBACrD,GAAIm+K,EAAa,GACXl2L,KAAK2tI,IACP3tI,KAAKs0B,sCAAsC1V,EAAK7G,SAChD,MAAMwqH,EAAS,IAAIosD,EAAA12B,OAAOr5I,EAAKhhB,MAC/B2kI,EAAOxrF,SAASm/I,GAChB3zD,EAAO6zD,SAASx3K,EAAKuhF,OACrBoiC,EAAO41B,SAAWv5I,EAAKu5I,SACvB,MAAMI,EAAS,GAef,OAdA35I,EAAK25I,OAAOluJ,QAAQgsL,IAChB99B,EAAO3yJ,KAAK5F,KAAKs2L,YAAYD,MAEjC9zD,EAAOg0D,UAAUh+B,GAGbh2B,EAAO41B,WACPh0J,KAASya,EAAKhhB,+BACdmpB,EAAKqmB,eAAem1F,GACpBg2B,EAAOluJ,QAAQ0tJ,IACXhxI,EAAKqmB,eAAe2qH,QAG1B/3J,KAAK2tI,IACApL,EAIX,OAFAv6G,EAAApmB,QAAGK,IAAI,gBAAiB,4CACQ2c,EAAK7G,SAC9B,MAGX5a,EAAAkyL,SAASpwL,UAAUq3L,YAAc,SAAS13K,GACtC,MAAMm5I,EAAO,IAAI42B,EAAAn3B,KAAK54I,EAAKhhB,MAQ3B,OAPAghB,EAAKjb,OAAO0G,QAAQwM,IACZ7W,KAAKq4H,UAAUxhH,IACfkhJ,EAAKhqI,SAAS/tB,KAAKq4H,UAAUxhH,MAGrCkhJ,EAAKy+B,mBAAmB53K,EAAKo5I,iBAEtBD,GAIX56J,EAAAkyL,SAASpwL,UAAU6xL,aAAe,SAASzzC,GACvC,MACM7jB,EADY,IAAIq1D,EAAA4H,cAAcz2L,KAAKm4H,SAAUn4H,KAAKq4H,WAChCq+D,YAAYr5C,GAEpC,OADAr9I,KAAK2vG,SAAW5xG,OAAO4kF,OAAO3iF,KAAK2vG,SAAU6pB,EAAM5pB,eAC5C4pB,GAGXr8H,EAAAkyL,SAASpwL,UAAU+xL,iBAAmB,SAASpyK,GAC3C,MAAM8jJ,EAAK2F,EAAA1H,MAAM7hD,SAASlgG,GACpBqjJ,EAAW,IAAIgtB,EAAA3mB,UAAUqB,SAC/B,IAAK,MAAMxqK,KAAKyf,EAAKqjJ,SACbrjJ,EAAKqjJ,SAAS/iK,eAAeC,KAC7B8iK,EAAS9iK,GAAKyf,EAAKqjJ,SAAS9iK,IAIpC,OADAujK,EAAGT,SAAWA,EACPS,GAGXvlK,EAAAkyL,SAASpwL,UAAUkyL,gBAAkB,SAASvyK,GAC1C,OAAOswK,EAAAyH,gBAAgB73E,SAASlgG,IAGpCzhB,EAAAkyL,SAASpwL,UAAUsyL,kBAAoB,WACnCxzL,OAAO6qB,KAAK5oB,KAAKuvL,eAAellL,QAAQwM,IACpC,MAAM+H,EAAO5e,KAAKuvL,cAAc14K,GAC1B0P,EAASvmB,KAAKq4H,UAAUxhH,GAC9B,GAAI+H,GAAQ2H,EACRvmB,KAAKqyL,cAAczzK,EAAM2H,OAExB,CACD,IAAIliB,EAAMua,EAAO,GAAK,uBACtBva,GAAOkiB,EAAS,GAAK,yBACrByB,EAAApmB,QAAGK,IAAI,WAAY,2BACR4U,KAAMxS,SAK7BlH,EAAAkyL,SAASpwL,UAAUuyL,qBAAuB,WACtCzzL,OAAO6qB,KAAK5oB,KAAK4vL,sBAAsBvlL,QAAQwM,IAC3C,MAAMuP,EAAOpmB,KAAK4vL,qBAAqB/4K,GACjC+H,EAAO5e,KAAK2vL,YAAY94K,GAC9B7W,KAAK42L,iBAAiBh4K,EAAMwH,MAKpCjpB,EAAAkyL,SAASpwL,UAAU23L,iBAAmB,SAASh4K,EAAMwH,GACjDroB,OAAO6qB,KAAKhK,GAAMvU,QAAQk/I,IACtB,MAAMsqB,EAAaj1J,EAAK2qI,GACxB,GAAIh2I,MAAMC,QAAQqgK,IACd,GAAKA,EAAmBn9J,aAAc,CAClC,MAAMH,EAAM,GACZs9J,EAAWxpK,QAAQ+4I,IACf,GAAIA,EAAOxsI,QACPL,EAAI3Q,KAAK5F,KAAKkwL,YAAY9sC,EAAOxsI,cAEhC,CACD,MAAMvS,EAAMwa,KAAKC,UAAU+0J,GAC3B7rJ,EAAApmB,QAAGK,IAAI,WAAY,iEAC+BoC,QAI1D+hB,EAAKmjI,GAAShzI,SAGbs9J,EAAWj9J,SACgB,cAA5Bi9J,EAAWj9J,QAAQ7U,MACnBqkB,EAAKmjI,GAASvpJ,KAAKkwL,YAAYrc,EAAWj9J,aAM1DzZ,EAAAkyL,SAASpwL,UAAU43L,mBAAqB,SAAS99J,GAC7C,IAAI10B,cAAkBwa,KAAKC,UAAUia,KACrCh7B,OAAO6qB,KAAK5oB,KAAKm4H,UAAU9tH,QAAQwM,IAC/BxS,UAAcwS,MAElBrS,QAAQG,KAAKN,EAAM,OAIvBlH,EAAAkyL,SAASpwL,UAAUkzL,gBAAkB,SAASrxF,EAAM72F,GAEhD,MAAM6sL,EAAc,IAAIjvE,EAAKsE,WAAWliH,EACpC,GAAK+d,EAAApmB,QAAGgJ,YAIZ,GAHAk2F,EAAKi2F,SAASD,GAGV7sL,EAAMf,IAAI,cAAe,CACzB,MAAM8tL,EAAgB,IAAInvE,EAAKwE,aAAapiH,EACxC,GAAK+d,EAAApmB,QAAGgJ,YACZk2F,EAAKi2F,SAASC,KAKtB75L,EAAAkyL,SAASpwL,UAAUq1B,IAAM,SAASjwB,GAC9B,GAAIF,EAAM0xB,QAAS,CACjB,MAAMohK,EAAS,IAAIpnI,OAAO7vD,KAAK2tI,KAC/BxpI,KAAS8yL,KAAU5yL,OAIzBlH,EAAAkyL,SAASpwL,UAAUyxL,mBAAqB,SAASL,GAC7C,IAAIzjK,EAAS,GACTsqK,EAAY,EAChB,OAAI7G,EAASzjK,OAAgByjK,EAASzjK,OACjCyjK,EAASQ,QAId9yL,OAAO6qB,KAAKynK,EAASQ,QAAQxmL,QAAQzM,IACjC,MAAMy/I,EAAQgzC,EAASQ,OAAOjzL,GAC1By/I,EAAMtmF,MACNsmF,EAAMtmF,KAAK1sD,QAAQ0sD,IACfA,EAAK86B,MAAMxnF,QAAQ,CAAC+hG,EAASn2F,KACzBm2F,EAAQ/hG,QAAQ,CAACqiD,EAAMx2C,KACf6gD,EAAK40C,YAAY11F,GAAGC,KACpBghL,GAAaxqI,EAAK9/B,OAAOrrB,OACzBqrB,EAASA,EAAOvb,OAAOq7C,EAAK9/B,iBAOpD5sB,KAAKs0B,iBAAiB1H,EAAOrrB,iBAAiB21L,KACvCtqK,GAnBIA,GAyBfzvB,EAAAkyL,SAASpwL,UAAUk4L,YAAc,SAASr2F,EAAMs2F,GAC5C,MAAM3G,EAAY3vF,EAAKC,YACvB/gG,KAAK80L,UAAUrE,EAAW,eAI1B,IAAI4G,EAAa,GACjBD,EAAU/sL,QAAQuU,IACdy4K,EAAaA,EAAWhmL,OAAOuN,EAAKgO,UAExC,MAAM0qK,EAAiB,GAEvBD,EAAWhtL,QAAQuU,IACf,MAAM7G,EAAQ/X,KAAK4wL,aAAahyK,GAChC04K,EAAe1xL,KAAKmS,GACpB04K,EAAU7qL,KAAKmS,KAInB/X,KAAKoxL,kBAAkBkG,GAIvBt3L,KAAKuxL,oBACLvxL,KAAKwxL,uBAEL,MAAMz6H,EAAO+pC,EAAKy2F,kBAAkBC,iBAC9Bx8D,EAAO,IAAIg0D,EAAAn3D,aACjBmD,EAAKxC,YAAYx4H,KAAKm4H,UACtB6C,EAAK3C,UAAYr4H,KAAKq4H,UAEtB++D,EAAU/sL,QAAQuU,IACd,MAAOu8G,EAAIC,GAAM,CAACx8G,EAAK3I,EAAG2I,EAAK1I,GACzBw2C,EAAO,IAAIm2C,EAAM8F,SAASwyB,EAAIC,EAAIrkE,GAElC2gE,EAAY13H,KAAKm4H,SAASv5G,EAAK7G,OACrC20C,EAAK3V,SAAS2gF,GACd52B,EAAKk8B,SAAStF,GAEd,MAAM+/D,EAAW54K,KAAKstB,MAAMttB,KAAKC,UAAUF,IAC3Cm4C,EAAK2gI,QAAQv8D,EAAIC,EAAI1uE,GACrBgrE,EAAUrxB,UAAUtvC,GACpBikE,EAAKO,oBAAoBxkE,EAAM0gI,EAAUt8D,EAAIC,GAC7Cp7H,KAAK23L,yBAAyB72F,EAAMp0C,MAK5CvvD,EAAAkyL,SAASpwL,UAAU04L,yBAA2B,SAAS72F,EAAMp0C,GACzD,MAAMkrI,EAASlrI,EAAKhjD,WAAWoN,QACzB+gL,EAAS/2F,EAAK80F,gBACpB,GAAIiC,EAAOhC,QAAQ+B,GAAS,CACxB,MAAM/B,EAAUgC,EAAOhC,QAAQ+B,GAC/BC,EAAOhC,QAAQ+B,GAAU,GACzB/B,EAAQxrL,QAAQyrL,IACZ,MAAMvzD,EAASviI,KAAK+1L,cAAcD,GAClC+B,EAAOhC,QAAQ+B,GAAQhyL,KAAK28H,OAOxCplI,EAAAkyL,SAASpwL,UAAU61L,UAAY,SAASloK,EAAQvoB,EAAM,GAAIyzL,EAAU,IAChElrK,EAAOviB,QAAQ,CAAC0N,EAAc1a,KAC1B,MAAMwZ,EAAKkB,EAAMjB,QACjB,GAAK9W,KAAKm4H,SAASj5H,eAAe2X,GAS9BmR,EAAApmB,QAAGsD,IAAI6S,GACPiQ,EAAApmB,QAAGK,IAAI,+BAAgCoC,mCACRwS,SAXI,CACnC,IAAIkhL,EAAY,KACZ16L,EAAIy6L,EAAQv2L,SACZw2L,EAAYD,EAAQz6L,IAExB2C,KAAKiwL,UAAU,QAASl4K,EAAOggL,GAC/B/3L,KAAKs0B,mBAAmBzd,sBAAuBxS,SAU3DlH,EAAAkyL,SAASpwL,UAAU+4L,kBAAoB,SAASprK,EAAiB60G,GAC7DA,EAAMp3H,QAAQmrC,IACV,MAAM8/I,EAAW9/I,EAAK1+B,QAChBshB,EAAcod,EAAKtc,iBACzBl5B,KAAK6vL,WAAWyF,GAAY,CACxBl9J,cACAY,aAAcwc,EAAKvc,qBAG3Bj5B,KAAK80L,UAAUloK,EAAQ,qBACvB5sB,KAAKi4L,mBAAmBx2D,IAG5BtkI,EAAAkyL,SAASpwL,UAAUg5L,mBAAqB,SAASx2D,GAC7CA,EAAMp3H,QAAQjL,IACV,MAAM25B,EAAU/4B,KAAK6vL,WAAWzwL,EAAE0X,SAC5BshB,EAAcp4B,KAAKm4H,SAASp/F,EAAQX,aAEpCu9J,EAAiB58J,EAAQC,cACzB/iB,EAACA,EAACC,EAAEA,GAAKy/K,EACf,GAAIv9J,EAAa,CACbh5B,EAAEs5B,eAAeN,GACjB,MAAMY,EAAeZ,EAChB5U,SAASiL,QAAQxY,EAAGC,GAAG6/B,gBACxB/c,EACA55B,EAAE+0D,QAAQn7B,GAGVhR,EAAApmB,QAAGK,IAAI,gBAAiB,qBACpB,+CAGP,CACD,MAAM4U,EAAKkiB,EAAQX,YACnBpQ,EAAApmB,QAAGK,IAAI,gBAAiB,qCACJ4U,+BAKhC1Z,EAAAkyL,SAASpwL,UAAU2yL,oBAAsB,SAAS9wF,EAAMuvF,GAChDA,EAASE,cACTzvF,EAAKo3F,sBAAqB,IAMlC/6L,EAAAkyL,SAASpwL,UAAU4yL,iBAAmB,SAAS/wF,EAAMuvF,GACjD,MAAM1sF,EAAU7C,EAAKC,YAAYx/F,OACjC,GAAI8uL,EAASzjK,QACL+2E,IAAY0sF,EAASzjK,OAAOrrB,OAAQ,CACpC,MAAM85B,EAAMg1J,EAASzjK,OAAOrrB,OAC5BymB,EAAApmB,QAAGK,IAAI,gBAAiB,2BACZo5B,2BAA6BsoE,OAOrDxmG,EAAAkyL,SAASpwL,UAAUk3L,gBAAkB,SAASt/K,EAAIypB,GAC9C,IAAKta,OAAOC,UAAUpP,GAAK,CACvB,MAAMsqF,4BAAmCtqF,IACzCmR,EAAApmB,QAAGK,IAAI,gBAAiBq+B,EAAU6gE,GAEtC,GAAInhG,KAAKm4H,SAASj5H,eAAe2X,GAC7B,OAAO7W,KAAKm4H,SAASthH,GAEzB,IAAIxS,sBAA0BwS,KAG9B,OAFAxS,kBAAsBtG,OAAO6qB,KAAK5oB,KAAKm4H,YACvCnwG,EAAApmB,QAAGK,IAAI,gBAAiBq+B,EAAUj8B,GAC3B,qFCl4CX,MAAAq8J,EAAAzjK,EAAA,IACAujK,EAAAvjK,EAAA,IACAogB,EAAApgB,EAAA,GACAgyL,EAAAhyL,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SAENpgB,EAAAgoK,aAAe,aAU5BhoK,EAAAgoK,aAAaxmK,OAAS,SAAS+jK,EAAIuC,EAAYkzB,GAC3C,MAAOt9D,EAASC,GAAWq9D,EACrBC,EAAQ11B,EAAGhB,kBAAkBlB,EAAAzhB,GAAGc,UAAU,GAC1Cw4C,EAAU31B,EAAGhB,kBAAkBlB,EAAAzhB,GAAGiB,QAAQ,GAC1Cs4C,EAAS51B,EAAGhB,kBAAkBlB,EAAAzhB,GAAGgB,QAAQ,GACzCw4C,EAAW71B,EAAGhB,kBAAkBlB,EAAAzhB,GAAGe,UAAU,GAE7CwnB,EAAQ5E,EAAGP,WAMXX,EAAU,IAAId,EAAAyH,UAAUzF,EAAGt5D,WAAYs5D,EAAGv5D,WAL/B,CACbqvF,UAAW,EACXC,UAAW,IAOfj3B,EAAQk3B,OAAOpxB,EAAO,CAClBj/I,CAACm4I,EAAAzhB,GAAGa,OAAO,EACXv3H,CAACm4I,EAAAzhB,GAAGmB,WAAW,EACf73H,CAACm4I,EAAAzhB,GAAGoB,WAAW,EACf93H,CAACm4I,EAAAzhB,GAAGqB,WAAW,EACf/3H,CAACm4I,EAAAzhB,GAAGc,WAAW,EACfx3H,CAACm4I,EAAAzhB,GAAGe,WAAW,EACfz3H,CAACm4I,EAAAzhB,GAAGiB,SAAS,EACb33H,CAACm4I,EAAAzhB,GAAGgB,SAAS,IAIjByhB,EAAQm3B,SAAS,CAAC/6L,KAAM,YAAa++B,KAAM,MAC3C6kI,EAAQm3B,SAAS,CAAC/6L,KAAM,WAAY++B,KAAM,MAC1C6kI,EAAQm3B,SAHS,CAAC/6L,KAAM,WAAY++B,KAAM,MAI1C6kI,EAAQm3B,SAAS,CAAC/6L,KAAM,WAAY++B,KAAM,MAC1C6kI,EAAQm3B,SAAS,CAAC/6L,KAAM,UAAW++B,KAAM,MACzC6kI,EAAQm3B,SAAS,CAAC/6L,KAAM,UAAW++B,KAAM,MACzC6kI,EAAQm3B,SAAS,CAAC/6L,KAAM,QAAS++B,KAAM,MAEvC,MAAMi8J,EAAU,CAACh7L,KAAM,SAAU++B,KAAM,IAAKk8J,OAAQ,EAChDvrK,OAAQ,CAACo1I,EAAGo2B,cAAevrK,OAAQ,CAACm1I,EAAGv5D,WAAa,IACxDq4D,EAAQm3B,SAASC,GAEjBp3B,EAAQm3B,SAAS,CAAC/6L,KAAM,SAAU++B,KAAM,IAAKk8J,OAAQ,IACrDr3B,EAAQm3B,SAAS,CAAC/6L,KAAM,QAAS++B,KAAM,IACnCrP,OAAQ+qK,EAAQ,GAAI9qK,OAAQ8qK,EAAQ,KACxC72B,EAAQm3B,SAAS,CAAC/6L,KAAM,WAAY++B,KAAM,IACtCrP,OAAQ8qK,EAAM,GAAI7qK,OAAQ6qK,EAAM,KAEpC,MAAMW,EAAa,CAACn7L,KAAM,cAAe++B,KAAM,IAC3CrP,OAAQ,CAACgrK,EAAO,GAAIC,EAAS,IAC7BhrK,OAAQ,CAAC+qK,EAAO,GAAIC,EAAS,KAEjC/2B,EAAQm3B,SAASI,GAEjB,MAAM92B,EAAW,IAAIgtB,EAAA3mB,UAAUqB,SAC/B1H,EAAS+H,KAAO,GAChB/H,EAASgI,KAAO,GAChB,MAAM3gJ,EAAO24I,EAASqI,4BAA4BzvC,EAASC,GAErDk+D,EAAQx3B,EAAQy3B,aAAah0B,GACnC+zB,EAAMH,QAAU,EAEhB,MAAMK,EAAYzwK,EAAIM,cAAcO,EAAKC,IAAKD,EAAKG,KAC7C0vK,EAAY1wK,EAAIM,cAAcO,EAAKE,IAAKF,EAAKI,KAKnD,OAJAsvK,EAAM1rK,OAAO1nB,KAAKszL,GAClBF,EAAMzrK,OAAO3nB,KAAKuzL,GAElB33B,EAAQvzG,WACDuzG,sKCrFX,MAAAx5I,EAAAC,EAAAhrB,EAAA,IACAm3E,EAAAn3E,EAAA,GAIMwrB,EAHNxrB,EAAA,GAGYqgB,OAAOC,SACbgiI,EAAQ,IACR65C,EAAO,IACPC,GAAY,EA+BlB,MAAalxB,EAGF9/I,gBAAgBzJ,GACnB,MAAM4iJ,EAAU,IAAI2G,EAAU,EAAG,EAAG,IAIpC,OAHApqK,OAAO6qB,KAAKhK,GAAMvU,QAAQzL,IACtB4iK,EAAQ5iK,GAAOggB,EAAKhgB,KAEjB4iK,EA6BXn5I,YAAYpR,EAAMC,EAAM2V,EAAO,IAC3B7sB,KAAKqV,IAAM,IAAI9B,MAAM0D,GACrBjX,KAAKiX,KAAOA,EACZjX,KAAKkX,KAAOA,EAGZlX,KAAKs5L,OAAS,GACdt5L,KAAKu5L,WAAa,GAClBv5L,KAAKw5L,MAAQ,GACbx5L,KAAKy5L,SAAW,GAChBz5L,KAAK05L,WAAa,GAClB15L,KAAK25L,SAAW,EAChB35L,KAAK45L,SAAW3iL,EAAOC,EAGvBlX,KAAK65L,SAAW,GAGhB75L,KAAKsoB,IAAMG,EACXzoB,KAAK85L,eAAgB,EACrB95L,KAAKy4L,UAAY,EACjBz4L,KAAKw4L,UAAY,EACjBx4L,KAAK+5L,aAAe,EAGpB/5L,KAAK4yD,KAAO5qC,EAAApmB,QAAGsQ,SAASb,OAAO2W,EAAApmB,QAAGuQ,UAGjB,CAAC,YAAa,YAAa,OAAQ,gBAChD,eAAgB,OACX9H,QAAQzL,IACTiuB,EAAK3tB,eAAeN,KACpBoB,KAAKpB,GAAOiuB,EAAKjuB,MAKzB,IAAK,IAAIvB,EAAI,EAAGA,EAAI4Z,EAAM5Z,IAAK,CAC3B2C,KAAKqV,IAAIhY,GAAK,IAAIkW,MAAM2D,GACxB,IAAK,IAAI1M,EAAI,EAAGA,EAAI0M,EAAM1M,IACtBxK,KAAKg6L,WAAW38L,EAAGmN,IAKxB6d,OAAOC,GACVtoB,KAAKsoB,IAAMA,EAGRD,SACH,OAAOroB,KAAKqV,IAGTgT,UACH,OAAOroB,KAAK65L,SAGTxxK,aAAazqB,GAChB,OAAIoC,KAAK65L,SAASj8L,GAAeoC,KAAK65L,SAASj8L,GACxC,KAGJyqB,WAAWpS,EAAGC,GACjBlW,KAAKqV,IAAIY,GAAGC,GAAKqpI,EACjBv/I,KAAKw5L,MAAMvjL,EAAI,IAAMC,GAAK,CAACD,EAAGC,KAC5BlW,KAAK25L,SAGJtxK,SAASiD,GACZ,OAAQtrB,KAAKoW,QAAQkV,KAChBtrB,KAAK+1E,OAAOzqD,GAIdjD,SAASiD,GACZ,MAAOrV,EAAGC,GAAKoV,EACTqR,EAAO38B,KAAKqV,IAAIY,GAAGC,GACzB,OAAOlW,KAAK0B,QAAQi7B,GAOjBtU,OAAOhT,EAAK4kL,GACfj6L,KAAK25L,SAAW,EAChB,IAAK,IAAI1jL,EAAI,EAAGA,EAAIZ,EAAI9T,OAAQ0U,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAI,GAAG9T,OAAQ2U,IAC3B+jL,EAAS5kL,EAAIY,GAAGC,IAChBlW,KAAKg6L,WAAW/jL,EAAGC,IAGnBlW,KAAKqV,IAAIY,GAAGC,GAAKkjL,SACVp5L,KAAKw5L,MAAMvjL,EAAI,IAAMC,IAMrCmS,SAAS1D,GACZ3kB,KAAKk6L,WAAWv1K,GAGb0D,SAAS8xK,EAAWd,GACvBr5L,KAAKu5L,WAAav5L,KAAKs5L,OAAOxwK,QAC9B9oB,KAAKsoB,IAAIoe,QAAQ1mC,KAAKu5L,YACtB,IAAIa,EAAgB,EAEpB,KAAOp6L,KAAKq6L,uBAAuBD,EAAeD,IAAW,CACzD,MAAMrqI,EAAO9vD,KAAKu5L,WAAWnnK,SAGvBx0B,KAACA,GAAQkyD,EACTwqI,EAAqBt6L,KAAK65L,SAASj8L,IACnC28L,KAACA,EAAIC,QAAEA,EAAO/B,UAAEA,GAAa6B,EAGnC,GAAIE,EAAU/B,EAAW,CACrB,MAAMntK,EAAKtrB,KAAKy6L,kBAAkB78L,GAClCoC,KAAK06L,kBAAkB98L,EAAM0tB,GAC7BtrB,KAAKu5L,WAAW3zL,KAAKkqD,QAEpB,GAAI/xD,OAAO6qB,KAAK2xK,GAAMh5L,OAAS,EAAG,CACnC,MAAM+pB,EAAKtrB,KAAK26L,cAAc/8L,GACxBg9L,EAAU56L,KAAK66L,mBAAmBvvK,GACpCsvK,GACA56L,KAAK86L,aAAal9L,EAAMg9L,GACxB56L,KAAKu5L,WAAW3zL,KAAKkqD,KAGrB9vD,KAAK+6L,WAAWn9L,EAAM0tB,GAClBvtB,OAAO6qB,KAAK2xK,GAAMh5L,OAAS,GAC3BvB,KAAKu5L,WAAW3zL,KAAKkqD,MAI/BsqI,EAEFp6L,KAAK85L,eACL95L,KAAKg7L,kBAKN3yK,SACHroB,KAAKu5L,WAAav5L,KAAKs5L,OAAOxwK,QAC9B9oB,KAAKsoB,IAAIoe,QAAQ1mC,KAAKu5L,YACtBv5L,KAAKu5L,WAAWlvL,QAAS4wL,IACrB,MAAMr9L,KAACA,GAAQq9L,EACT3vK,EAAKtrB,KAAK26L,cAAc/8L,GACxBg9L,EAAU56L,KAAK66L,mBAAmBvvK,GACpCsvK,EACA56L,KAAK86L,aAAal9L,EAAMg9L,GAGxB56L,KAAK+6L,WAAWn9L,EAAM0tB,KAG9BtrB,KAAKu5L,WAAa,GAKflxK,QAAQsU,GACX,MAAMpyB,EAAQvK,KAAKs5L,OAAOpzK,KAAK+0K,GAASA,EAAMt+J,OAASA,GACvD,OAAIpyB,EAAeA,EAAM3M,KAClB,KAGJyqB,eACH,OAAQroB,KAAK45L,SAAW55L,KAAK25L,UAAY35L,KAAK45L,SAG3CvxK,uBAAuB6yK,EAAUf,GACpC,OAAQn6L,KAAKm7L,YACLn7L,KAAKu5L,WAAWh4L,OAAS,GACzB25L,IAAaf,GACbn6L,KAAKo7L,eAAiBp7L,KAAK+5L,aAKhC1xK,kBAAkBzqB,GACrB,MAAM08L,EAAqBt6L,KAAK65L,SAASj8L,IACnC48L,QAACA,GAAWF,EACZhvK,EAAKtrB,KAAKq7L,iBACZf,EAAShtK,OAAO/rB,OAASi5L,EACzBlvK,EAAG,GAAKgvK,EAAShtK,OAAOktK,GAGxBF,EAAShtK,OAAO1nB,KAAK0lB,EAAG,IAGxBgvK,EAAS/sK,OAAOhsB,OAASi5L,EACzBlvK,EAAG,GAAKgvK,EAAS/sK,OAAOitK,GAGxBF,EAAS/sK,OAAO3nB,KAAK0lB,EAAG,IAG5B,MAAM1sB,EAAM08L,EAAKhwK,GAWjB,OAVKtrB,KAAKw5L,MAAMt6L,eAAeN,IACvBoB,KAAKqV,IAAIiW,EAAG,IAAIA,EAAG,MAAQ8tK,GAC3BpxK,EAAApmB,QAAG+C,KAAK,YAAa,uBACd/G,mCAAsC0tB,KAMrDgvK,EAASE,SAAW,EACblvK,EAGJjD,aAAazqB,EAAM0tB,GACtB,MAAM1sB,EAAM08L,EAAKhwK,GACjBtrB,KAAKy5L,SAAS76L,GAAO0sB,EACrBtrB,KAAK05L,WAAW97L,GAAMgI,KAAK0lB,GAC3BtrB,KAAK65L,SAASj8L,GAAM28L,KAAK37L,GAAO0sB,EAChCtrB,KAAK65L,SAASj8L,GAAM67L,SAAS76L,GAAO0sB,EACpCtrB,KAAKqV,IAAIiW,EAAG,IAAIA,EAAG,IAAMtrB,KAAK65L,SAASj8L,GAAM++B,KAIzC38B,KAAKw5L,MAAM56L,OACToB,KAAK25L,gBACA35L,KAAKw5L,MAAM56L,IAInBypB,kBAAkBzqB,EAAM0tB,GAC3B,MACMiwK,EADWv7L,KAAKi5L,aAAar7L,GACZ46L,UAAY,EAC7BgD,EAAapnH,EAAA7pD,SAAS05F,aAAa34F,EAAG,GAAIA,EAAG,GAAIiwK,GAAO,GAC9DC,EAAWnxL,QAAQoxL,IACXz7L,KAAKoW,QAAQqlL,IACbz7L,KAAK86L,aAAal9L,EAAM69L,KAIN,IAAtBD,EAAWj6L,QACXymB,EAAApmB,QAAGK,IAAI,YAAa,oBAChB,wBAILomB,iBACH,OAAOroB,KAAKsoB,IAAI9K,aAAazf,OAAOutC,OAAOtrC,KAAKw5L,QAG7CnxK,OAAOiD,GACV,MAAOrV,EAAGC,GAAKoV,EACf,OAAOtrB,KAAKqV,IAAIY,GAAGC,KAAOkjL,EAGvB/wK,QAAQiD,GACX,MAAM1sB,EAAM08L,EAAKhwK,GACjB,OAAOtrB,KAAKw5L,MAAMt6L,eAAeN,GAG9BypB,cAAczqB,GACjB,MAAM28L,KAACA,GAAQv6L,KAAK65L,SAASj8L,GAC7B,OAAOoC,KAAKsoB,IAAI9K,aAAazf,OAAOutC,OAAOivJ,IAGxClyK,mBAAmBiD,GACtB,MAAMsnC,EAAO5yD,KAAK4yD,KAAK9pC,QAEvB,IADA9oB,KAAKsoB,IAAIoe,QAAQksB,GACVA,EAAKrxD,OAAS,GAAG,CACpB,MAAMm6L,EAAU9oI,EAAKxgC,SACde,EAAIC,GAAMpL,EAAApmB,QAAG2Z,aAAamgL,EAASpwK,GAC1C,GAAItrB,KAAK6tB,MAAMsF,EAAIC,IACXpzB,KAAKqV,IAAI8d,GAAIC,KAAQmsH,EACrB,MAAO,CAACpsH,EAAIC,GAIxB,OAAO,KAGJ/K,MAAM8K,EAAYC,GACrB,OAAOD,GAAM,GAAKC,GAAM,GACpBD,EAAKnzB,KAAKqV,IAAI9T,QAAU6xB,EAAKpzB,KAAKqV,IAAI,GAAG9T,OAG1C8mB,WAAWzqB,EAAM0tB,GACpB,MAAM1sB,EAAM08L,EAAKhwK,GACjBtrB,KAAK65L,SAASj8L,GAAMy7B,OAAOz6B,GAAO0sB,SAC3BtrB,KAAK65L,SAASj8L,GAAM28L,KAAK37L,GAG7BypB,WACH,OAAOroB,KAAK25L,SAAW,EAGpBtxK,cACH,MAAMpE,EAAQjkB,KAAKqV,IAAI,GAAG9T,OACpBgjB,EAAQvkB,KAAKqV,IAAI9T,OAEjBgoD,EAAQ,GACd,IAAK,IAAIrzC,EAAI,EAAGA,EAAI+N,EAAO/N,IAAK,CAC5B,MAAMmsJ,EAAO,GACb,IAAK,IAAIpsJ,EAAI,EAAGA,EAAIsO,EAAOtO,IACvBosJ,EAAKz8J,KAAK5F,KAAKqV,IAAIY,GAAGC,IAE1BqzC,EAAM3jD,KAAKy8J,GAEf,OAAO94G,EAAMl0C,IAAIgtJ,GAAQA,EAAKn+I,KAAK,KAIhCmE,qBACH,MAAMoL,EAAO,GAIb,OAHA11B,OAAO6qB,KAAK5oB,KAAK05L,YAAYrvL,QAAQzM,IACjC61B,EAAK71B,GAAQoC,KAAK05L,WAAW97L,GAAM2D,SAEhCkyB,EAGJpL,WAAW1D,GACd3kB,KAAKs5L,OAAO1zL,KAAK+e,GACjB,MAAM/mB,KAACA,EAAI++B,KAAEA,GAAQhY,EACrB3kB,KAAK65L,SAASj8L,GAAQ,CAClB48L,QAAS,EACT/B,UAAWz4L,KAAKy4L,UAChB97J,OACA88J,SAAU,GACVpgK,OAAQ,GACRkhK,KAAM,GACNjtK,OAAQ,GACRC,OAAQ,GACRirK,UAAWx4L,KAAKw4L,WAGhBjlL,MAAMC,QAAQmR,EAAK2I,QACnBttB,KAAK65L,SAASj8L,GAAM0vB,OAAS3I,EAAK2I,OAE7B3I,EAAK2I,QAAU,IACpBttB,KAAK65L,SAASj8L,GAAM0vB,OAAS,CAAC3I,EAAK2I,SAGnC/Z,MAAMC,QAAQmR,EAAK4I,QACnBvtB,KAAK65L,SAASj8L,GAAM2vB,OAAS5I,EAAK4I,OAE7B5I,EAAK4I,QAAU,IACpBvtB,KAAK65L,SAASj8L,GAAM2vB,OAAS,CAAC5I,EAAK4I,SAGnC5I,EAAKk0K,OACL74L,KAAK65L,SAASj8L,GAAM66L,UAAY9zK,EAAKk0K,OAEhCl0K,EAAK8zK,YACVz4L,KAAK65L,SAASj8L,GAAM66L,UAAY9zK,EAAK8zK,WAGrC9zK,EAAK6zK,YACLx4L,KAAK65L,SAASj8L,GAAM46L,UAAY7zK,EAAK6zK,WAEzCx4L,KAAK05L,WAAW97L,GAAQ,GAMrByqB,kBACH,MAAMzjB,EAAO5E,KAAK4yD,KAAKrxD,OAAS,EAClBxD,OAAO6qB,KAAK5oB,KAAK65L,UACzBxvL,QAAQzM,IACV,MAAM08L,EAAWt6L,KAAK65L,SAASj8L,IACzB0vB,OAACA,EAAMC,OAAEA,EAAMoP,KAAEA,GAAQ29J,EAE/BA,EAASqB,YAAc59L,OAAO6qB,KAAK0xK,EAASb,UAAUl4L,OAEtD+4L,EAASjhC,MAAQ,GACjB/rI,EAAOjjB,QAAQ,CAAC4L,EAAG5Y,KACf,MAAMiuB,EAAK,CAACrV,EAAGsX,EAAOlwB,IAEhBu+L,EAAUxnH,EAAA7pD,SAAS8H,YAAYryB,KAAKqV,IAAKiW,EAAIqR,EADvC,GACkD/3B,GAC9D01L,EAASjhC,MAAMiiC,EAAKhwK,IAAOswK,MAOhCvzK,SAaH,MAZa,CACTwxK,SAAU75L,KAAK65L,SACfxkL,IAAKrV,KAAKqV,IACV4B,KAAMjX,KAAKiX,KACXC,KAAMlX,KAAKkX,KACXqiL,WAAYv5L,KAAKu5L,WACjBC,MAAOx5L,KAAKw5L,MACZC,SAAUz5L,KAAKy5L,SACfC,WAAY15L,KAAK05L,WACjBC,SAAU35L,KAAK25L,SACf/mI,KAAM5yD,KAAK4yD,OAMvB,SAAS0oI,EAAKhwK,GACV,OAAOA,EAAG,GAAK,IAAMA,EAAG,GAxb5BnuB,EAAAgrK,wQCrCA,MAAA0zB,EAAA5+L,EAAA,KACA6+L,EAAA7+L,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,KAMA,MAAa05L,EASTtuK,YAAYkN,GACRv1B,KAAK+7L,OAAS,IAAID,EAAAE,WAAWzmK,GAC7Bv1B,KAAKi8L,UAAY,IAAIJ,EAAAK,cAAc3mK,GAGhClN,SAAStQ,GACZ/X,KAAKqc,UAAYtE,EAGdsQ,SAASiD,GACZtrB,KAAKi8L,UAAUE,SAAS7wK,GAIrBjD,SAwBH,GAvBAroB,KAAK+7L,OAAOK,SAERp8L,KAAK+7L,OAAOM,gBACZr8L,KAAKi8L,UAAUK,gBAGft8L,KAAK+7L,OAAOQ,eACZv8L,KAAKi8L,UAAUG,SAEXp8L,KAAKi8L,UAAUO,gBAGXx8L,KAAKi8L,UAAUQ,iBAEXz8L,KAAKi8L,UAAUS,eAS3B18L,KAAK28L,QAAQ,WAAY,CACzB,MAAMC,EAAU58L,KAAKi8L,UAAUY,aAE/B,GAAI78L,KAAKqc,UAAW,CAChBrc,KAAKqc,UAAUg5F,UAAU,WACzB,MAAMynF,EAAc,IAAI3yK,EAAUgqB,QAClC2oJ,EAAYC,eAAeH,GAC3B58L,KAAKqc,UAAUiE,IAAIw8K,KAMxBz0K,YACH,OAAOroB,KAAKi8L,UAAUe,YAGnB30K,aACH,OAAOroB,KAAKi8L,UAAUY,aAGnBx0K,eAAes1E,GAClB39F,KAAK+7L,OAAOkB,cAAct/F,GAGvBt1E,QAAQvmB,GACX,OAAQA,GACJ,IAAK,MAAO,OAAO9B,KAAK+7L,OAAOQ,aAC/B,IAAK,QAAS,OAAOv8L,KAAKi8L,UAAUO,eACpC,IAAK,SAAU,OAAOx8L,KAAKi8L,UAAUQ,gBACrC,IAAK,OAAQ,OAAOz8L,KAAKi8L,UAAUS,cACnC,IAAK,UAAW,OAAO18L,KAAKi8L,UAAUiB,iBACtC,QAAS,MAAM,IAAIx4L,MAAM,iBAAmB5C,GAEhD,OAAO,EAGJumB,QAAQkN,GACXv1B,KAAK+7L,OAAOtmF,QAAQlgF,GACpBv1B,KAAKi8L,UAAUxmF,QAAQlgF,GAGpBlN,aAAaq6I,GAChB1iK,KAAKi8L,UAAUkB,YAAYz6B,EAAG06B,eAG3B/0K,SACH,MAAO,CACHg1K,WAAYr9L,KAAK+7L,OAAOt1K,SACxB62K,cAAet9L,KAAKi8L,UAAUx1K,WAhG1CtpB,EAAAw5L,kBAsGAA,EAAgB73E,SAAW,SAASlgG,GAChC,MAAM2+K,EAAK,IAAI5G,EAGf,OAFA4G,EAAGxB,OAASD,EAAAE,WAAWl9E,SAASlgG,EAAKy+K,YACrCE,EAAGtB,UAAYJ,EAAAK,cAAcp9E,SAASlgG,EAAK0+K,eACpCC,sKCxHX,MAAAv1K,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAm3E,EAAAn3E,EAAA,GACAo3B,EAAAp3B,EAAA,GACAugM,EAAAvgM,EAAA,KAEM8pB,EAAOsN,EAAArN,UAAUC,UAGvB9pB,EAAAsgM,gBAAA,cAAqCx7D,EAAA1tG,WAKjClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIC,UAAWoT,EAAWC,GACnCv1B,KAAK09L,UAAW,EAChB19L,KAAK29L,SAAW,KAGbt1K,mBAAoBroB,KAAK09L,UAAW,EACpCr1K,oBAAqBroB,KAAK09L,UAAW,EAGrCr1K,iBAAiBzC,EAAKzgB,GACzB,MAAM+sI,EAAQ/sI,EAAKqC,QACbm/J,EAAOxhK,EAAK0vD,GAAG,GACfgyG,EAAO1hK,EAAK0vD,GAAG,GACfvpC,EAAK4mH,EAAM/sF,QACjB,IAAIy4I,EAAQtyK,EAAG,GACXuyK,EAAQvyK,EAAG,GAGf,MAAMwyK,EAAU34L,EAAK2B,KACf61B,EAAO3U,EAAApmB,QAAGU,QAAQ0lB,EAAApmB,QAAGmL,UAAW+wL,EAAQp8L,WACxCq8L,EAAW/1K,EAAApmB,QAAGY,YAAYwlB,EAAApmB,QAAGmL,UAAW+wL,EAAQp8L,WAEhDs8L,EAAYh+L,KAAKi+L,iBAAiB94L,GACxC,KAAOy4L,IAAUj3B,GAAQk3B,IAAUh3B,GAAM,CACrC,MAAMq3B,EAAQ,GACRt/L,EAAMg/L,EAAQ,IAAMC,EAM1B,GALAK,EAAMt/L,GAAO,GACbs/L,EAAMt/L,GAAK+9B,KAAOA,EAClBuhK,EAAMt/L,GAAKsB,UAAY69L,EACvBC,EAAUG,SAASD,IAEfhsD,EAAMpiF,OAKN,MAJA8tI,EAAQ1rD,EAAMv2H,OACdkiL,EAAQ3rD,EAAMl2H,OAMtBhc,KAAKo+L,aAAaJ,GAIf31K,cAAczC,EAAKzgB,GACtB,IAAI8Q,EAAI9Q,EAAKwvD,KAAK,GACdz+C,EAAI/Q,EAAKwvD,KAAK,GAClB,MAAM9gD,EAAK1O,EAAKmO,IAAI,GACdQ,EAAK3O,EAAKmO,IAAI,GACpB,IAAI+qL,EAAYl5L,EAAKsE,MAEjB60L,EAAWt2K,EAAApmB,QAAGmS,UAAU5O,EAAKmO,KAC7BnO,EAAKm5L,WACLA,EAAW,CAACn5L,SAGhB,MAAM64L,EAAYh+L,KAAKi+L,iBAAiB94L,GAClC+4L,EAAQ,GACd,GAAI/4L,EAAKo5L,IACL,KAAOF,EAAY,GAAG,CAGlBH,GAFAjoL,GAAKpC,GAEK,KADVqC,GAAKpC,IACgB,CACjB6oB,KAAM2hK,GAAY,IAClBp+L,UAAWiF,EAAKjF,WAAa,YAGjC,IAAIs+L,EAAmB,GACvBA,EAAYzgM,OAAO4kF,OAAO67G,EAAWN,GACrCF,EAAUG,SAASK,KACjBH,EAGVr+L,KAAKo+L,aAAaJ,GAGf31K,cAAczC,EAAKzgB,GACtB,MAAM64L,EAAYh+L,KAAKi+L,iBAAiB94L,GAClC+4L,EAAQ,GACdF,EAAUS,SAAW,GACrBt5L,EAAKimB,MAAM/gB,QAAQihB,IACf4yK,EAAM5yK,EAAG,GAAK,IAAMA,EAAG,IAAM,CACzBqR,KAAMx3B,EAAKjE,UAAY,IACvBhB,UAAWiF,EAAKjF,WAAa,oBAIrC89L,EAAUG,SAASD,GACnBl+L,KAAKo+L,aAAaJ,GAEf31K,cAAczC,EAAKzgB,GACtB,MAAM64L,EAAYh+L,KAAKi+L,iBAAiB94L,GAClCu5L,EAAWv5L,EAAKsE,OACfwpB,EAAIC,GAAM,CAAC/tB,EAAK8tB,GAAI9tB,EAAK+tB,IAEhC,IAAK,IAAI/0B,EAAI,EAAGA,GAAKugM,EAAUvgM,IAAK,CAChC,MAAM+/L,EAAQ,GACA9pH,EAAA7pD,SAAS05F,aAAahxF,EAAIC,EAAI/0B,GACtCkM,QAAQihB,IACV4yK,EAAM5yK,EAAG,GAAK,IAAMA,EAAG,IAAM,CACzBqR,KAAMx3B,EAAKjE,UAAY,IACvBhB,UAAWiF,EAAKjF,WAAa,oBAGrC89L,EAAUG,SAASD,GAEvBl+L,KAAKo+L,aAAaJ,GAGf31K,iBAAiBljB,GACpB,MAAM64L,EAAY,IAAIR,EAAA/4G,UAEtB,OADAu5G,EAAUjnJ,SAAS5xC,EAAK4S,OACjBimL,EAGJ31K,aAAazC,GACZ5lB,KAAK09L,UACgB93K,EAAIwvF,QAAQ,aACpB/qG,QAAQs0L,IACjB,MAAMx5L,EAAOw5L,EAASl+G,UAClBt7E,EAAKmO,IACLtT,KAAK4+L,cAAch5K,EAAKzgB,GAEnBA,EAAKqC,QACVxH,KAAK6+L,iBAAiBj5K,EAAKzgB,GAEtBA,EAAKrF,KACVE,KAAK8+L,cAAcl5K,EAAKzgB,GAElB6iB,EAAApmB,QAAG6D,cAAc,CAACN,EAAKsE,MAAOtE,EAAK8tB,GAAI9tB,EAAK+tB,MAClDlzB,KAAK++L,cAAcn5K,EAAKzgB,KAIpCygB,EAAIyvF,UAAU,aAITr1G,KAAKg/L,gBACNj4K,EAAKe,UAAUE,EAAApmB,QAAGmK,cAAe,CAACiyL,UAAWh+L,KAAK29L,WAClD39L,KAAK29L,SAAW,MAIhBt1K,aAAa21K,GACZh+L,KAAK29L,SACJ39L,KAAK29L,SAASsB,QAAQjB,GADPh+L,KAAK29L,SAAWK,gVC/J7C,MAAAh2K,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IACAm3E,EAAAn3E,EAAA,GAEAE,EAAA+hM,kBAAA,cAAuCj9D,EAAA1tG,WAGnClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIE,aAAcmT,EAAWC,GACtCv1B,KAAKm/L,SAAW,EAIb92K,aAAazC,GAChB,MAAMw5K,EAAax5K,EAAIwvF,QAAQ,SAC/B,IAAIiqF,GAAS,EACTC,GAAQ,EACR15K,EAAI1c,IAAI,UACRk2L,EAAW/0L,QAAQmzK,IACf,MAAMznK,EAAUynK,EAAU7gF,gBACpB4iG,EAAU,IAAIp1K,EAAUssD,OAAO+mG,EAAU93C,YAC3C3vH,GAEEypL,EAAWhiB,EAAUroJ,YAE3B,GADAoqK,EAAQlqK,UAAUmqK,GACdA,EAASt2L,IAAI,WAAY,CACzB,MAAMsxG,EAAWglF,EAASthM,IAAI,WAAWmrC,aACzCk2J,EAAQE,eAAejlF,GAE3B50F,EAAItF,IAAIi/K,GACR35K,EAAI8T,OAAO8jJ,GACPznK,IAAYiS,EAAApmB,QAAGoS,IAAIK,KAAOgrL,GAAS,EAC9BtpL,IAAYiS,EAAApmB,QAAGoS,IAAIO,MAAM+qL,GAAQ,KAK9C15K,EAAIyvF,UAAU,SAEdgqF,EACAr/L,KAAK0/L,sBAAsB95K,EAAK,OAAQ,QAEnC05K,GACLt/L,KAAK0/L,sBAAsB95K,EAAK,WAAY,aAI5CyC,sBAAsBzC,EAAK4f,EAAUk1G,GACzC,MAAMrlI,EAAMuQ,EAAIlc,WAAW8Z,SACrB1jB,EAAO8lB,EAAI6I,WACVxY,EAAGC,GAAKpW,EAAK8b,QACCw4D,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAAGlW,KAAKm/L,UACzC90L,QAAQihB,IACjB,GAAIjW,EAAIwY,MAAMvC,EAAG,GAAIA,EAAG,IAAK,CACzB,MAAMxrB,EAAOuV,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,IAC/BxrB,EAAKsK,aACUtK,EAAKwK,YACbD,QAAQJ,IAGPA,EAAMvI,YAAcg5I,GACpBzwI,EAAMqW,IAAI,IAAI6J,EAAUqb,uVC9DpD,MAAAxd,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GAEAktB,EAAAiK,EAAAn3B,EAAA,IACAmgC,EAAAngC,EAAA,IAGAE,EAAAwiM,aAAA,cAAkC19D,EAAA1tG,WAE9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIpT,OAAQymB,EAAWC,GAG7BlN,aAAazC,GACCA,EAAIwvF,QAAQ,UACpB/qG,QAAQu1L,IACb5/L,KAAK6/L,kBAAkBj6K,EAAKg6K,GAC5Bh6K,EAAI8T,OAAOkmK,KAIZv3K,kBAAkBzC,EAAKg6K,GAC1B,MAAMv4L,EAAMue,EACNgjG,EAAMg3E,EAAQ12G,YACd42G,EAAQz4L,EAAI3F,UACZiwK,EAAQ/oD,EAAIlnH,UAElB,GAAIknH,EAAI1/G,IAAI,YACR8e,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMuH,EAAIonB,UAClBpqB,IAAK,aAAey7L,EAAQ,mBAAqBnuB,QAEpD,CAED,GAAI/oD,EAAI1/G,IAAI,eAAgB,CACxB,MAAM7E,KAASstK,2BACf3pJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8oH,EAAIn6F,UAAWpqB,QACjCrE,KAAK+/L,cAAcn3E,EAAKvhH,EAAKsqK,EAAOmuB,GAGxC,GADA9/L,KAAK+/L,cAAc14L,EAAKuhH,EAAKk3E,EAAOnuB,GAChC/oD,EAAI1/G,IAAI,iBAAkB,CAC1B,MAAM7E,KAASstK,6BACf3pJ,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8oH,EAAIn6F,UAAWpqB,QACjCrE,KAAK+/L,cAAcn3E,EAAKvhH,EAAKsqK,EAAOmuB,GAGxC,GAAIz4L,EAAI6B,IAAI,eAAgB,CACxB,MAAM82L,EAAchgM,KAAKigM,eAAe54L,EAAKuhH,GAC7C,GAAIo3E,EAAa,CACb,MAAM37L,KAASy7L,gCACf93K,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,KAAMuH,EAAIonB,YAC3B,MAAMyxK,EAAUF,EAAYt+L,UAG5B,GAFA1B,KAAK+/L,cAAc14L,EAAK24L,EAAaF,EAAOI,GAExCF,EAAY92L,IAAI,iBAAkB,CAClC,MAAMi3L,KAAUD,6BAChBl4K,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMkgM,EAAYvxK,UAAWpqB,IAAK87L,IAC9CngM,KAAK+/L,cAAcC,EAAa34L,EAAK64L,EAASJ,KAK1Dz4L,EAAIi8B,WAAWs5E,YAAY00B,gBAAgB1oB,IAI5CvgG,iBAAiBhhB,GAEpB,OADc+1B,EAAAyK,MAAM88E,oBAAoBt9G,GAC3B9F,OAGV8mB,iBAAiBugG,GAEpB,OADcxrF,EAAAyK,MAAM88E,oBAAoBiE,GAC3BrnH,OAGV8mB,cAAchhB,EAAKuhH,EAAKk3E,EAAOnuB,GAClC,GAAI/oD,EAAI1/G,IAAI,UACJlJ,KAAKogM,aAAa/4L,EAAKuhH,GAAM,CAC7B,IAAIvkH,KAASgD,EAAI3F,2BAA2BknH,EAAIlnH,aAGhD,OAFA2C,GAAO,6BACP2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMuH,EAAIonB,UAAWpqB,QAKzC,IAAIg8L,EAAWr4K,EAAApmB,QAAGwF,eAAeC,GAC7BA,EAAI6B,IAAI,cACRm3L,GAAYrgM,KAAKsgM,iBAAiBj5L,IAGtC,MAAMk5L,EAAWvgM,KAAKwgM,iBAAiB53E,GACjC63E,EAAYJ,GAAYA,EAAWE,GACnCG,EAAe1gM,KAAKsoB,IAAI3C,aAG9B,GAFA3lB,KAAKs0B,oBAAoBmsK,gBAAwBC,KAE7CD,GAAaC,EAAc,CAC3B,MAAMC,EAAct5L,EAAIq+H,YACpBi7D,EAAc,GACd3gM,KAAK4gM,SAASv5L,EAAKuhH,EAAK+3E,GACpB/3E,EAAI1/G,IAAI,eACR+4H,EAAA1tG,WAAWssK,aAAax5L,EAAK,QAAS,IAI1C2gB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMuH,EAAIonB,QAClBpqB,IAAKy7L,EAAQ,kBAAoBnuB,IAEzC3xK,KAAK8gM,mBAAmBz5L,EAAKuhH,QAG7B5oH,KAAK+gM,oBAAoBL,EAAcL,EAAUE,EAAU33E,GAC3D5gG,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMuH,EAAIonB,UAClBpqB,IAAKy7L,EAAQ,WAAanuB,IAMlC,GAHA/oD,EAAI9C,SAASz+G,GAGTA,EAAI0V,YAAc6rG,EAAI7rG,WAAY,CAClC,MAAMikL,EAAU,IAAI72K,EAAUo5D,MAC9By9G,EAAQtgH,QAAQ,CAAC3+E,KAAMimB,EAAApmB,QAAGyK,mBACtB40L,MAAO55L,IACXuhH,EAAItoG,IAAI0gL,IAKT34K,iBAAiBugG,GACpB,GAAIA,EAAI1/G,IAAI,aACR,OAAO,EAGX,IAAIq3L,EAAW,EAOf,OANI33E,EAAI7qG,aACJwiL,EAAW33E,EAAI7qG,aACX6qG,EAAI1/G,IAAI,cACRq3L,GAAYvgM,KAAKkhM,iBAAiBt4E,KAGnC23E,EAGJl4K,SAAShhB,EAAKuhH,EAAKxgH,GACtB,MAAMm3L,EAAU,IAAIp1K,EAAUssD,OAAOruE,EAAK4f,EAAApmB,QAAGoS,IAAIU,OACjD6qL,EAAQlqK,UAAUhuB,GAClBuhH,EAAItoG,IAAIi/K,GACRv3K,EAAApmB,QAAG2lB,SAAS,CAACznB,KAAMuH,EAAIonB,UACnBpqB,IAAKgD,EAAI3F,UAAY,SAAWknH,EAAIlnH,YAIrC2mB,eAAehhB,EAAKuhH,GAEvB,MAAOu4E,EAAMC,GAAQ,CAAC/5L,EAAIsU,OAAQtU,EAAI2U,SAC/BqlL,EAAMC,GAAQ,CAAC14E,EAAIjtG,OAAQitG,EAAI5sG,QAGhCulL,EAASJ,GAFH,GAAKE,EAAOF,GAGlBK,EAASJ,GAFH,GAAKE,EAAOF,GAKlB/rL,EAAMhO,EAAIqC,WAAW8Z,SAC3B,GAAInO,EAAIwY,MAAM0zK,EAAQC,GAAS,CAC3B,MAAM1hM,EAAOuV,EAAIoZ,QAAQ8yK,EAAQC,GACjC,GAAI1hM,EAAKsK,YAAa,CAClB,MAAM0hJ,EAAUhsJ,EAAKwK,YACrB,IAAK,IAAIjN,EAAI,EAAGA,EAAIyuJ,EAAQvqJ,OAAQlE,IAChC,GAAIgK,EAAIoD,QAAQqhJ,EAAQzuJ,IACpB,OAAOyuJ,EAAQzuJ,IAK/B,OAAO,KAIJgrB,oBAAoBsL,EAAK0sK,EAAUE,EAAU33E,GAC5CA,EAAI1/G,IAAI,WAGUm3L,GAAYA,GADVE,EADA33E,EAAI64E,qBAGR9tK,GACZsuG,EAAA1tG,WAAWssK,aAAaj4E,EAAK,UAAW,GAK7CvgG,aAAahhB,EAAKuhH,GACrB,MAAM84E,EAAY94E,EAAIxT,QAAQ,SAC9B,IAAI1vF,GAAY,EAgBhB,OAfAg8K,EAAUr3L,QAAQgwK,IACd,MAAMsnB,EAActnB,EAAUunB,iBACxBxnB,EAAaC,EAAU3wK,WACvBm4L,EAAex6L,EAAIkxE,eACzB,IAAIupH,EAAe1nB,GAAcA,EAAaynB,GAC1CF,IAAgB35K,EAAApmB,QAAG4M,WAAamzL,IAAgBt6L,EAAIyP,UACpDgrL,EAAoB1nB,GAAcA,EAAaynB,GAAhC,GACI,KACfC,EAAe,IAGnB95K,EAAApmB,QAAG8jB,UAAUo8K,KACbp8K,GAAY,KAGbA,EAGJ2C,mBAAmBhhB,EAAKuhH,GAC3B,MAAM5gH,EAASX,EAAIY,YACnB,GAAID,GAAUA,EAAOkB,KACjB,GAAIlB,EAAOkB,IAAI,YAAa,CACxB,MAAMg5B,EAAWl6B,EAAO9J,IAAI,YAC5B,GAAIgkC,EAAS6/J,iBAAkB,CAC3B,MAAM37K,EAAO8b,EAAS2kD,UACtBo7C,EAAA1tG,WAAWytK,qBAAqB57K,EAAMwiG,EAAKvhH,UAIlD,GAAIW,GAAUA,EAAOu6B,YAAa,CACnC,MAAM/mB,EAAMnU,EACZW,EAAOu6B,YAAYqmF,EAAKptG,OAEvB,CACD,MAAMA,EAAMnU,EACZ,GAAImU,GAAOA,EAAItS,IAAI,YAAa,CAC5B,MAAMg5B,EAAW1mB,EAAItd,IAAI,YACzB,GAAIgkC,EAAS6/J,iBAAkB,CAC3B,MAAM37K,EAAO8b,EAAS2kD,UACtBo7C,EAAA1tG,WAAWytK,qBAAqB57K,EAAMwiG,EAAKptG,oVCtO/D,MAAAwM,EAAAC,EAAAhrB,EAAA,IACAyzG,EAAAt8E,EAAAn3B,EAAA,KACAglI,EAAAhlI,EAAA,GACAo3B,EAAAp3B,EAAA,GAEAglM,EAAAhlM,EAAA,IACAilM,EAAAjlM,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACAmgC,EAAAngC,EAAA,IAEM8pB,EAAOsN,EAAArN,UAAUC,UAEjBk7K,EAAe,CACjB,SAAU,YAAa,WAAY,UAAW,aAC9C,OAAQ,OAAQ,OAAQ,QAM5BhlM,EAAAilM,iBAAA,cAAsCngE,EAAA1tG,WAIlClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAII,YAAaiT,EAAWC,GACrCv1B,KAAKy1B,cAAe,EAGpBz1B,KAAKkzK,QAAU,CACXruF,KAAM7kF,KAAKqiM,YAAYxjM,KAAKmB,MAC5B+kF,KAAM/kF,KAAKsiM,YAAYzjM,KAAKmB,MAC5BglF,SAAUhlF,KAAKuiM,gBAAgB1jM,KAAKmB,MACpCw2C,OAAQx2C,KAAKwiM,cAAc3jM,KAAKmB,MAChCilF,KAAMjlF,KAAKyiM,YAAY5jM,KAAKmB,MAC5BolF,WAAYplF,KAAK0iM,kBAAkB7jM,KAAKmB,MACxCulF,QAASvlF,KAAK2iM,eAAe9jM,KAAKmB,MAClCylF,UAAWzlF,KAAK4iM,iBAAiB/jM,KAAKmB,MACtCmlF,KAAMnlF,KAAK6iM,YAAYhkM,KAAKmB,OAI7BqoB,aAAazC,GAChBu8K,EAAa93L,QAAQ2xF,IACbp2E,EAAI1c,IAAI8yF,KACRh8F,KAAKkzK,QAAQl3E,GAAUp2E,GACvBA,EAAI8T,OAAOsiE,MAMf3zE,YAAYzC,GAChB,MAAM69G,EAAW79G,EAAI1nB,IAAI,QACnB4mF,EAAa2+C,EAASq/D,gBACtBC,EAAWt/D,EAAS9a,UAE1B,GAAK7jC,EAAWr6E,QAAQmb,GAgBnB,CACD,IAAIvhB,KAASygF,EAAWpjF,6BACxB2C,MAAU0+L,EAASrhM,kBAAkBkkB,EAAIlkB,YACzCsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,aAlBjC,GAAIuhB,EAAIne,WAAWqT,WAAWioL,GAAW,CACrC,MAAMC,EAAcp9K,EAAIne,WAAWw7L,iBAInC,GAHAn+G,EAAWr9E,WAAWumB,QAAQg1K,GACVA,EAAY95L,IAAI,gBAEjB47E,EAAW57E,IAAI,eAAgB,CAC9C,MAAMg6L,EAAW,CAACj5L,MAAO66E,EAAYh+E,KAAMk8L,GACrCl7G,EAAUk7G,EAAY9kM,IAAI,eAChCgkM,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,OAAQo7G,GAEpD,IAAI7+L,KAASuhB,EAAIlkB,mBACjB2C,MAAU0+L,EAASrhM,gBAAgBojF,EAAWpjF,YAC9CsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,SAWrCgkB,cAAczC,GAClB,MAAO3P,EAAGC,GAAK,CAAC0P,EAAIjK,OAAQiK,EAAI5J,QAC1BjE,EAAQ6N,EAAIlc,WACZ5J,EAAOiY,EAAMyL,SAASiL,QAAQxY,EAAGC,GAEvC,GAAIpW,EAAKc,QAAQonB,EAAApmB,QAAGmL,WAAY,CAC5B,MAAMjG,EAAOhH,EAAKgB,QAAQknB,EAAApmB,QAAGmL,WAAW,GACxC,GAAI6Y,EAAIne,WAAW8+G,aAAaz/G,GAAO,CACnC8e,EAAIne,WAAWumB,QAAQlnB,GAEvB,IACIiR,EAAM+C,WAAWhU,EAAMmP,EAAGC,GAE9B,MAAO0O,GACH,IAAIvgB,2BAA+Bwa,KAAKC,UAAUhY,OAClDzC,wBAA4BuhB,EAAIlkB,YAChCsmB,EAAApmB,QAAGK,IAAI,oBAAqB,eAAgBoC,GAIhD,IAAI++L,EAAUt8L,EAAKpF,UACfoF,EAAKT,WAAa,IAClB+8L,GAAW,KAAOt8L,EAAKT,YAE3B,MAAMshB,EAAS,CACXtjB,IAAKuhB,EAAIlkB,UAAY,cAAgB0hM,EACrCtjM,QAMJ,GAJAkoB,EAAApmB,QAAGslB,QAAQS,GAEX3nB,KAAKqjM,mBAAmBz9K,EAAK9e,GAEzBA,EAAKoC,IAAI,eAAgB,CACzB,MAAM4+E,EAAUhhF,EAAK5I,IAAI,eACzBgkM,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,YAG3C,CACD,MAAMngE,EAAS,CACXtjB,IAAKuhB,EAAIlkB,UAAY,4BACrB5B,QAEJkoB,EAAApmB,QAAGslB,QAAQS,IAGnB,MAAM27K,EAAU,CACZvhM,KAAMimB,EAAApmB,QAAGuK,oBAEbnM,KAAKujM,iBAAiB39K,EAAK09K,GAGvBj7K,mBAAmBzC,EAAK9e,GAC5B,MAAMU,EAAUoe,EAAIne,WAAWC,aAC/B,GAAIF,GACIA,EAAQrB,OAAOW,IACX8e,EAAIne,WAAWixG,YAAY5xG,EAAMA,EAAKT,YAAa,CACnD,MAAMm9L,EAAQ18L,EAAK28L,mBACnBz7K,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,OAC1BuhB,EAAIlkB,oBAAoB8hM,OAOvCn7K,iBAAiBzC,GACrB,MAAM7N,EAAQ6N,EAAIlc,WACZ5J,EAAO8lB,EAAI6I,UAEXi1K,EAAetmK,EAAAyK,MAAM48E,gBAAgB7+F,GAE3C,GAAI7N,EAAMi+B,UAAUpwB,GAAM,CAClBA,EAAI7I,YAAa6I,EAAI0d,WAAW6mH,UAEpC,MAAM9uI,EAAWuK,EAAIlc,WACrB,GAAI2R,EAASnS,IAAI,eAAgB,CAC7B,MAAMk5H,EAAS,IAAIj4G,EAAUs/D,iBAC7B24C,EAAOC,aAAa,QACpBD,EAAOz4C,cAActuE,EAASnd,IAAI,gBAClC0nB,EAAItF,IAAI8hH,GASZ,GANAr7G,EAAKe,UAAUE,EAAApmB,QAAGwJ,kBACd,CAACgU,OAAQ/D,EAAUG,IAAKzD,EAAO9N,MAAO2b,IAC1CmB,EAAKe,UAAUE,EAAApmB,QAAGyJ,kBACd,CAACpB,MAAO2b,EAAKxG,OAAQ/D,IAGrBqoL,EAAaniM,OAAS,EAAG,CACzB,MAAM6gF,EAAQhlD,EAAAyK,MAAMk8E,wBAAwBn+F,EAAK,GAEjD,KAAO89K,EAAaniM,OAAS,GAAK6gF,EAAM7gF,OAAS,GAAG,CAChD,MAAMoiM,EAAYD,EAAa9/I,MACzBggJ,EAAWxhH,EAAMx+B,MACvB,GAAI7rC,EAAM+V,YAAY61K,GAAY,CAC9B,MAAO1tL,EAAGC,GAAK,CAAC0tL,EAASjoL,OAAQioL,EAAS5nL,QAC1CX,EAAS0S,SAAS41K,EAAW1tL,EAAGC,GAChC,MAAMtY,EAAO+lM,EAAUjiM,UACvBsmB,EAAApmB,QAAGslB,WAAWtpB,aAAgBgoB,EAAIlkB,iBAEjC,CAED,MAAMkd,EAAOC,KAAKC,UAAU6kL,GAC5B37K,EAAApmB,QAAG+C,KAAK,oBAAqB,mBACzB,+BAAiCia,KAIjD,MAAM0kL,EAAU,CACZvhM,KAAMimB,EAAApmB,QAAG0K,sBACTxM,QAEJE,KAAKujM,iBAAiB39K,EAAK09K,IAK3Bj7K,gBAAgBzC,GACpB,MAAMliB,EAAOkiB,EAAI1nB,IAAI,YAAYogL,WAC1BroK,EAAGC,GAAKxS,EAAKkY,QAEd9b,EADQ8lB,EAAIlc,WACC+kB,QAAQxY,EAAGC,GAC9B,IAAI7R,EAAM,GACV,MAAMw/L,EAAUj+K,EAAIlkB,UAEhBgC,EAAKwF,IAAI,UACT7E,EAAM,2CAEDX,EAAKyjH,YACNrnH,EAAKwiG,WACLj+F,EAAM,6BAEDvE,EAAKsK,YACV/F,EAAM,6BAEDX,EAAKo2B,UACVp2B,EAAK+1B,YACLp1B,KAASw/L,qBAGTngM,EAAKq2B,WACL11B,KAASw/L,mBAIbx/L,KAASw/L,4BAED,KAARx/L,GACA2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,QAIlBgkB,eAAezC,GACnB,MAAM04E,EAAc14E,EAAI1nB,IAAI,WACtB4I,EAAOw3F,EAAYqqB,UAEzB,GAAI7hH,EAAKoC,IAAI,UAAW,CACtB,MAAM7E,KAASyC,EAAKpF,gDAEpB,YADAsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,QAInC,GAAIyC,EAAKoC,IAAI,WACT,GAAwB,IAApBpC,EAAKT,WAAkB,CACvB,MAAMhC,EAAM,CAACyC,QACbigB,EAAKe,UAAUE,EAAApmB,QAAGsJ,iBAAkB7G,QAGpCyC,EAAKJ,UAAU,QAGdI,EAAKg4F,YAAch4F,EAAKg4F,aAAe,GAC5Ch4F,EAAK+3F,WAAW/3F,EAAKg4F,aAAe,GAExC9+F,KAAK8jM,qBAAqBl+K,EAAK04E,GAE/B,MAAMk9E,EAAUl9E,EAAYylG,YAC5B,GAAIvoB,EAAS,CACT,MAAMrI,EAAU,IAAIhpJ,EAAU4hB,QAAQyvI,GACtC51J,EAAItF,IAAI6yJ,IAIR9qJ,kBAAkBzC,GACtB,MAAMo+K,EAAUp+K,EAAI1nB,IAAI,cAClB+vB,EAAO+1K,EAAQC,aAChBh2K,EAAK/kB,IAAI,WACN+kB,EAAKkM,OAELlM,EAAKkM,MAAMvU,GAGnB5lB,KAAKkkM,wBAAwBt+K,EAAKo+K,GAG9B37K,YAAYzC,GAChB,MAAMu+K,EAAOv+K,EAAI1nB,IAAI,SACdyyB,EAAIC,GAAM,CAACuzK,EAAKxoL,OAAQwoL,EAAKnoL,QACpC,IAAI+iE,EAAY,EACZn5D,EAAI1c,IAAI,YACR61E,EAAYn5D,EAAI1nB,IAAI,UAAUkmM,gBAElC,MAAM/uL,EAAMuQ,EAAIlc,WAAW8Z,UACpBgH,EAAIC,GAAM7E,EAAIhK,QACfgQ,EAAKpB,EAAKmG,EAAKouD,EACflzD,EAAKpB,EAAKmG,EAAKmuD,EAiBrB,GAHa/2D,EAAApmB,QAAGgxE,KAAKijB,qBAAqBxgF,EAAKmV,EAAIC,EAAImB,EAAIC,EAbxC,CAAC5V,EAAGC,KACnB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GAC5B,GAAIpW,EAAKsK,YAAa,CAClB,MAAMzG,EAAS7D,EAAKwK,YACpB,IAAK,IAAIjN,EAAI,EAAGA,EAAIsG,EAAOpC,OAAQlE,IAE/B,IADcsG,EAAOtG,GACV6L,IAAI,YACX,OAAO,EAInB,OAAO8e,EAAApmB,QAAG60B,QAAQG,YAAY92B,EAAKS,cAAcC,aAK5Ce,SAAWw9E,EAAW,CAC3B,MAAM8nC,EAAU,IAAI18F,EAAU2uD,SAASltD,EAAIC,EAAIjG,EAAIlc,YACnDkc,EAAItF,IAAIumG,IAIRx+F,YAAYzC,GAEhB,IAAIs/D,EADSt/D,EAAI1nB,IAAI,QACCmmM,gBACtB,IAAKn/G,EAAY,CACb,MAAMplF,EAAO8lB,EAAI6I,UACjB,GAAI3uB,EAAKwiG,WAAY,CACjB,MACM7B,EADQ3gG,EAAK4a,WACAwL,KAAKpf,GAA2B,SAAnBA,EAAKtG,WACjCigG,IACAvb,EAAaub,IAIzB,GAAIvb,EAAY,CACZ,MAAM97B,EAAO87B,EAAWwb,UAClB4jG,EAAW,IAAI5zF,EAAKkB,aAC1B0yF,EAAS3vF,OAAOvrD,GAChB,MAAMm7I,EAAWr/G,EAAWxjF,UAC5BsmB,EAAApmB,QAAGwlB,sBAAsBm9K,aACrB3+K,EAAI0d,WAAW8mH,oBACfxkI,EAAI0d,WAAW8mH,mBAAmBk6C,OAGrC,CACD,MAAMjgM,KAASuhB,EAAIlkB,+CACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,QAGrC,GAAI6gF,EAAWh8E,IAAI,eAAgB,CAC/B,MAAMk5H,EAAS,IAAIj4G,EAAUs/D,iBAC7B24C,EAAOC,aAAa,QACpBD,EAAOz4C,cAAczE,EAAWhnF,IAAI,gBACpC0nB,EAAItF,IAAI8hH,IAIR/5G,YAAYzC,GAChB,MAAM9lB,EAAO8lB,EAAI6I,UAIjB,GAA2B,QAHV3uB,EAAKS,cAGTC,UAET,GAAuB,IADP48B,EAAAyK,MAAMy8E,gBAAgB1+F,GAC1BrkB,OAAc,CACPqkB,EAAI1nB,IAAI,UAChBg4E,MAAM,GACb,MAAM7xE,KAASuhB,EAAIlkB,qCACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,YAEjB,CACD,MAAMA,KAASuhB,EAAIlkB,4CACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,SAMtBgkB,iBAAiBzC,EAAKzgB,GAC1B,MAAM67L,EAAU,IAAI72K,EAAUo5D,MAC9By9G,EAAQtgH,QAAQv7E,GAChBygB,EAAItF,IAAI0gL,GAGJ34K,qBAAqBzC,EAAKQ,GAC9B,GAAIA,EAAKo+K,eAAiBx8K,EAAApmB,QAAGqM,IAAIC,MAAO,CACpC,MAAMpH,EAAOsf,EAAKuiG,UAGZvpG,EA2BlB,SAAsB5I,EAAWgvE,GAC7B,OAAIhvE,EAAU4I,OACH6iL,EAAAtvB,cAAcI,iBAAiBv8J,EAAWgvE,GAE5ChvE,EAAUiY,QACRjY,EAEJ,KAlCgBiuL,CAFGr+K,EAAK8iE,YACJ9iE,EAAKm/G,iBAElBzlI,EAAOsf,EAAOqP,UACdpqB,EAAM+a,EAAO1d,UAAY,WACzBoF,EAAKpF,UACXsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,SAIlBgkB,wBAAwBzC,EAAKQ,GACjC,MAAM6H,EAAO7H,EAAK69K,aACZhtK,EAAWhJ,EAAKvsB,UAChB5B,EAAO8lB,EAAI6I,UAEjB,IAAIpqB,EAAM,GACN4pB,EAAK/kB,IAAI,UACT7E,KAAS4yB,mCAEJ7Q,EAAKo+K,eAAiBx8K,EAAApmB,QAAGqM,IAAIG,QAElC/J,KADauhB,EAAIlkB,+BAGjB2C,GACA2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,sVC/Y9B,MAAA2jB,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAilM,EAAAjlM,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAIAE,EAAAunM,aAAA,cAAkCziE,EAAA1tG,WAE9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIG,OAAQkT,EAAWC,GAChCv1B,KAAKy1B,cAAe,EAGjBpN,aAAazC,GAChB,GAAIA,EAAI1c,IAAI,cAAe,CACvB,MAAMy7L,EAAW/+K,EAAI1nB,IAAI,cACzB,GAAI0nB,EAAI1c,IAAI,aAAc,CACtB,MAAMyb,EAAOiB,EAAI1nB,IAAI,aAAaukF,UAC5B54C,EAAQllB,EAAK/mB,KACbgnM,EAAQ5kM,KAAK6kM,mBAAmBh7J,EAAOjkB,GAC7C,GAAIjB,EAAKs+G,KAAO,EAEZ,GADAhB,EAAA1tG,WAAWssK,aAAaj7K,EAAK,SAAUjB,EAAKs+G,MACxC2hE,EACAA,EAAMliH,WAAW,CAACugD,KAAMt+G,EAAKs+G,WAE5B,CACD,MAAM5+H,EAAM,4BACZ2jB,EAAApmB,QAAGK,IAAI,gBAAiB,eAAgBoC,GAMhD,GAAIugM,EAAM7hH,QAAS,CACf,IAAI+hH,EAAM,KACLl/K,EAAI1c,IAAI,cAKT47L,EAAMl/K,EAAI1nB,IAAI,eAJd4mM,EAAM,IAAI36K,EAAUg5D,WACpBv9D,EAAItF,IAAIwkL,IAKZA,EAAI1hH,UAAU,GAGlBx9D,EAAI8T,OAAO,aAGX,MAAM3hB,EAAQ6N,EAAIlc,WAClB,GAAIkc,EAAI1c,IAAI,UAAY6O,EAAM7O,IAAI,eAAgB,CAC9C,MAAM4+E,EAAUliE,EAAI1nB,IAAI,eAClBiH,EAAO,CAAC49E,MAAO6hH,EAAM7hH,SAC3Bm/G,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,SAAU3iF,IAI1DygB,EAAI8T,OAAOirK,QAEV,GAAI/+K,EAAI1c,IAAI,eAAgB,CAC7B,MAAM8uK,EAAYpyJ,EAAI1nB,IAAI,eAC1B8B,KAAK+kM,SAASn/K,EAAKoyJ,GACnBpyJ,EAAI8T,OAAOs+I,IAIZ3vJ,mBAAmBwhB,EAAOjkB,GAG7B,OAFeA,EAAIwvF,QAAQ,eACNlvF,KAAK4kC,GAAKA,EAAE23B,UAAU7kF,OAASisC,GAIjDxhB,SAASzC,EAAKQ,GACjB,MAAMs0H,EAAUt0H,EAAKq6D,UAAU+5B,SAAS94G,UAClC5B,EAAO8lB,EAAI6I,UACXpqB,KAASq2I,0CACf1yH,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,8KC5EzB,MAAAkoB,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAk3E,EAAAl3E,EAAA,IACAilM,EAAAjlM,EAAA,IAIM+nM,EAAkBjnM,OAAOwT,OAAO,IAqOtC,SAAS0zL,EAAiBC,GAQtB,MAPkB,CACd9/D,OAAQ,mCACRyrD,OAAQ,sCACR5hF,MAAQ,gCACRk2F,OAAQ,0CACR3rE,MAAO,8CAEM0rE,GA1OrB/nM,EAAAioM,WAAA,cAAgCnjE,EAAA1tG,WAC5BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIK,KAAMgT,EAAWC,GAG3BlN,aAAazC,GAChB,MACMtS,EADOsS,EAAI1nB,IAAI,QAAQuiF,UACZntE,IAEX3P,EAAS3D,KAAKqlM,qBAAqBz/K,EAAKtS,GAC9C,IAAI2lE,EAAU,KAyBd,GAxBAt1E,EAAO0G,QAAQJ,IACX,GAAIA,EAAMf,IAAI,WACV+vE,EAAUj5E,KAAKslM,cAAc1/K,EAAK3b,EAAO,gBAExC,GAAIA,EAAMf,IAAI,cACf+vE,EAAUj5E,KAAKslM,cAAc1/K,EAAK3b,EAAO,kBAExC,CAEDgvE,EAAUj5E,KAAKulM,qBAAqB3/K,EAAK3b,GACzC,MAAM5F,mBAAuB4F,EAAMvI,yBACnCsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,QAEjC4F,EAAMf,IAAI,gBACVlJ,KAAKwlM,oBAAoB5/K,EAAK3b,EAAOgvE,GAEzCj5E,KAAKylM,sBAAsB7/K,EAAK3b,EAAOgvE,GAEnCrzD,EAAIlc,WAAWR,IAAI,UACnB1E,QAAQU,IAAI,uBACZlF,KAAK0lM,aAAa9/K,EAAK3b,EAAOgvE,MAIlCA,EAAS,CACT,MAAM0sH,EAAW//K,EAAI0d,WACfmoH,EAASxyE,EAAQ+9D,qBACvB2uD,EAASv7C,mBAAmBqB,GAGhC7lI,EAAI8T,OAAO,QAIRrR,qBAAqBzC,EAAKtS,GAC7B,MAAOO,EAAIC,GAAM,CAACR,EAAI,GAAIA,EAAI,IACxB2C,EAAI2P,EAAIjK,OAAS9H,EACjBqC,EAAI0P,EAAI5J,OAASlI,EACjBuB,EAAMuQ,EAAIlc,WAAW8Z,SAE3B,GAAInO,EAAIwY,MAAM5X,EAAGC,GAAI,CACjB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GAC5B,GAAIpW,EAAKsK,YACL,OAAOtK,EAAKwK,YAEX,CACD,MAAMjG,EAAM,8BACZ2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,aAGrB,CACD,MAAMA,EAAM,8BACZ2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,QAErC,OAAO2gM,EAGJ38K,cAAczC,EAAK40F,EAAUxe,GAChC,MAAM/iB,EAAUuhC,EAASt8G,IAAI89F,GAAUhU,aAGvC,GAFA/O,EAAQuL,UAAU5+D,GACHqzD,EAAQ+9D,qBAEnB,OAAO/9D,EAEN,CACD,MAAMyhE,EAAUlgC,EAAS94G,UACzBsmB,EAAApmB,QAAGK,IAAI,aAAc,kDACiB+5F,WAAkB0+C,KAE5D,OAAO,KAGJryH,qBAAqBzC,EAAK3b,GAEzB,MAAMgvE,EAAU,IAAI9E,EAAA4E,KAAKy8F,SACnBsqB,EAAQ71L,EAAMvI,UAEpB,OADAu3E,EAAQs4B,OAASuuF,iCACV7mH,EAOR5wD,oBAAoBzC,EAAK3b,EAAOgvE,GACnC,MAAM6O,EAAU79E,EAAM/L,IAAI,eAE1B,GAAc,WADA4pF,EAAQy9C,gBACE,CACpB,MAAMqgE,EAAU37L,EAAM/L,IAAI,qBACT0nM,EAAQC,cACZ/uL,UAAY8O,EAAIlc,WAAWoN,QACpCmiE,EAAQ34D,IAAI,CACR1iB,KAAMgoM,EAAQE,cACdr+J,OAAQ,SAOZwxC,EAAQ34D,IAAI,CACR1iB,KAAM,kDACN6pC,OAAQ,KACJ,MAAMtiC,EAAO,CAACqW,IAAKvR,GACnBi4L,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,SAAU3iF,OAO/DkjB,sBAAsBzC,EAAK3b,EAAOgvE,GACrC,GAAIrzD,EAAI1c,IAAI,SAAU,CASlB,GARiB0c,EAAI1nB,IAAI,SAAS+lI,kBAGzB55H,QAAQ+U,IACbpf,KAAK+lM,qBAAqB3mL,EAAQnV,EAAOgvE,KAIzChvE,EAAMf,IAAI,aAAc,CACxB,MAAMw9H,EAAYz8H,EAAM/L,IAAI,aACtB4pF,EAAU79E,EAAM/L,IAAI,eAC1B+6E,EAAQ34D,IAAI,CACR1iB,KAAM8oI,EAAUo/D,cAChBr+J,OAAQ,KAGJ,MAAMtiC,EAAO,CAACF,KAAMyhI,EAAWlrH,IAAKvR,GACpCi4L,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,SAAU3iF,MAM9D,GAAIygB,EAAI1c,IAAI,cAAgBe,EAAMf,IAAI,eAAgB,CAClD,MAAM4+E,EAAU79E,EAAM/L,IAAI,eACpB8nM,EAAYpgL,EAAIwvF,QAAQ,aACxB6wF,EAAmBv/D,IACrBw7D,EAAA//D,YAAYghE,cAAcv9K,EAAKkiE,EAAS,SAAU,CAAC7iF,KAAMyhI,KAG7Ds/D,EAAU37L,QAAQq8H,IACdztD,EAAQ34D,IAAI,CACR1iB,KAAM,cAAgB8oI,EAAUX,UAChCt+F,OAAQw+J,EAAiBpnM,KAAK,KAAM6nI,OAM5Cz8H,EAAMf,IAAI,gBACV+vE,EAAQ34D,IAAI,CACR1iB,KAAM,mCACN6pC,OAAQ,KACJy6J,EAAA//D,YAAYghE,cAAcv9K,EAAK3b,EAAM/L,IAAI,eAAgB,cAWtEmqB,qBAAqBjJ,EAAQnV,EAAOgvE,GACvC,MAAM6mH,EAAQ71L,EAAMvI,UACd6kI,EAAQnnH,EAAOxhB,KACrB,IAAIsoM,EAAO,KAEX,MAAMrvL,EAAKuI,EAAOvI,GACZ8lG,EAAS1yG,EAAMq5B,WAAWs5E,YAEhC,GAAID,EAAOwpF,QAAQtvL,GAAK,CACpBqvL,EAAOjtH,EAAQ+9D,qBACf,MAAM/gI,EAACA,EAACC,EAAEA,GAAKymG,EAAOypF,YAAYvvL,GAC5BvD,EAAM0U,EAAApmB,QAAGykM,eAAep8L,EAAO,CAACgM,EAAGC,IACzC,IAAI7R,KAASy7L,wBAA4Bv5D,QACzCliI,aAAiBkiI,KAASjzH,eAC1B0U,EAAApmB,QAAGwlB,SAAS/iB,GAGF,KAAVkiI,IACK2/D,IACDA,EAAO,MACH,MAAM7hM,KAASy7L,4BAAgCv5D,OAC/Cv+G,EAAApmB,QAAGwlB,SAAS/iB,MAGpB40E,EAAQ34D,IAAI,CACR1iB,6BAA8B2oI,IAC9B9+F,OAAQy+J,KAMb79K,aAAazC,EAAK3b,EAAOgvE,GAC5B,MACMiR,EADOjgF,EAAMP,WAAWxL,IAAI,QACdooM,YACpBvoM,OAAO6qB,KAAKshE,GAAQ7/E,QAAQzM,IACxBq7E,EAAQ34D,IAAI,CACR1iB,KAAMqnM,EAAiBrnM,GACvB6pC,OAAQ,KACJ,MAAMiuI,EAAM11K,KAAKsoB,IAAI9K,aAAa0sE,EAAOtsF,IACzCoqB,EAAApmB,QAAGwlB,SAAS,CAACtnB,KAAM8lB,EAAI6I,UAAWpqB,IAAKqxK,8KCpO3D,MAAA1tJ,EAAAC,EAAAhrB,EAAA,IAEAglI,EAAAhlI,EAAA,GAKAE,EAAAopM,oBAAA,cAAyCtkE,EAAA1tG,WAIrClM,YAAYiN,EAAWC,GACnB2B,MAAM,gBAAiB5B,EAAWC,GAGlCv1B,KAAKwmM,SAAW,CACZC,QAASzmM,KAAK0mM,eAAe7nM,KAAKmB,MAClC2mM,MAAO3mM,KAAK4mM,aAAa/nM,KAAKmB,OAO/BqoB,aAAazC,GAChB,MACMihL,EADUjhL,EAAI1nB,IAAI,iBACC4oM,SACzB,IAAK,IAAIzpM,EAAI,EAAGA,EAAIwpM,EAAStlM,OAAQlE,IACjC2C,KAAK+mM,eAAenhL,EAAKihL,EAASxpM,IAEtCuoB,EAAI8T,OAAO,iBAGRrR,eAAezC,EAAKvhB,GACnBrE,KAAKwmM,SAAStnM,eAAemF,EAAItC,MACjC/B,KAAKwmM,SAASniM,EAAItC,MAAM6jB,EAAKvhB,GAG7B2jB,EAAApmB,QAAGK,IAAI,sBAAuB,iBAC1B,6BAA+BoC,EAAItC,KAAO,gBAI/CsmB,eAAezC,EAAKvhB,GACvB,MAAM++B,EAAU/+B,EAAI++B,QACds3G,EAAUr2I,EAAImX,IAAI9Z,UACxB,IAAK,IAAIrE,EAAI,EAAGA,EAAI+lC,EAAQ7hC,OAAQlE,IAChCuoB,EAAIkgG,SAAS1iF,EAAQ/lC,IAEzB,MAAMsqB,EAAS,CAAC7nB,KAAM8lB,EAAI6I,UACtBpqB,OAAQq2I,+BAAqC90H,EAAIlkB,aAErDsmB,EAAApmB,QAAGwlB,SAASO,GAGTU,aAAazC,EAAKvhB,GACrB,MAAM2iM,EAAW3iM,EAAIowI,MACfiG,EAAUr2I,EAAImX,IAAI9Z,UAClBimB,EAAS,CAAC7nB,KAAMuE,EAAImX,IAAIiT,UAC1BpqB,OAAQq2I,YAAkBssD,KAC9Bh/K,EAAApmB,QAAGwlB,SAASO,iVC5DpB,MAAAK,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAo3B,EAAAp3B,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IACAigC,EAAA9I,EAAAn3B,EAAA,KAIM8pB,EAAOsN,EAAArN,UAAUC,UACjB3D,EAAgB0E,EAAApmB,QAAG0hB,cAGzBnmB,EAAA8pM,aAAA,cAAkChlE,EAAA1tG,WAE9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIO,OAAQ8S,EAAWC,GAG7BlN,kBAAkBzC,EAAK25K,GAC1B,MAAMvlF,EAASp0F,EAAI1nB,IAAI,UACvB,GAAI87G,EAAQ,CACR,IAAIktF,EAAWlnM,KAAKmnM,mBAAmBvhL,EAAK25K,GAG5C,GAAI2H,GAAY,EAAG,CACfA,EAAW,EACX,MAAM7iM,EAAM,0CACNuhB,EAAIlkB,UACVsmB,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,KAAM8lB,EAAI6I,iBAK3B,GAFAzuB,KAAK8gM,mBAAmBl7K,EAAK25K,GAC7BvlF,EAAO7jC,OAAO+wH,GACVlnM,KAAK41B,aAAc,CACnB,MAAMwxK,EAAQptF,EAAO/8F,WAEf5Y,MAAU6iM,OADLltF,EAAO78F,WACkBiqL,KACpCp/K,EAAApmB,QAAG4lB,WAAW,CAACnjB,MAAKvE,KAAM8lB,EAAI6I,YAItC,MAAM44K,EAAYrnM,KAAKsnM,sBAAsB/H,GAQ7C,GAPI8H,GAAczhL,EAAI9O,UAAYuwL,EAAUvwL,SACpCkR,EAAApmB,QAAGoe,QAAQqnL,IAEXzhL,EAAIkgG,SAASuhF,GAIjBrtF,EAAO3jC,WAAazwD,EAAI1c,IAAI,QAAS,CACrC,GAAI0c,EAAI1c,IAAI,QAAS,CACjB,MAAMq+L,EAAgB3hL,EAAI6I,UAC1B7I,EAAI1nB,IAAI,QAAQk8E,SAASmtH,GAE7BvnM,KAAKwnM,cAAc5hL,GACnB5lB,KAAKynM,WAAWJ,EAAWzhL,EAAK25K,GAMpC,GAAI8H,IACIA,EAAUtqL,YAAc6I,EAAI7I,cACvBiL,EAAApmB,QAAG6D,cAAc,CAAC4hM,EAAWzhL,IAAO,CACrC,MAAMo7K,EAAU,IAAI72K,EAAUo5D,MAC9By9G,EAAQtgH,QAAQ,CAAC3+E,KAAMimB,EAAApmB,QAAGwK,kBACtB60L,MAAOoG,IACXzhL,EAAItF,IAAI0gL,GACJp7K,EAAI1c,IAAI,gBACRlJ,KAAK0nM,0BAA0B9hL,EAAKyhL,KASrDh/K,0BAA0BzC,EAAK7hB,GAElC,GAAgC,WADhB6hB,EAAI1nB,IAAI,eACZqnI,gBAA8B,CACtC,MAAMnD,EAAS,IAAIj4G,EAAUs/D,iBAC7B24C,EAAOC,aAAa,UACpBD,EAAO1hD,QAAQ,CAACthE,OAAQwG,IACxBw8G,EAAOz4C,cAAc/jE,EAAI1nB,IAAI,gBAC7B6F,EAAOuc,IAAI8hH,IAIZ/5G,sBAAsBk3K,GACzB,IAAI8H,EAAY9H,EAAQoI,iBAexB,OAdKN,IACDA,EAAY9H,EAAQpqK,aAGpBkyK,GAAaA,EAAUn+L,KAAOm+L,EAAUn+L,IAAI,WAC5Cm+L,EAAYA,EAAUnpM,IAAI,WAAWmrC,aAGjCg+J,IAAcA,EAAUn+L,MACxB1E,QAAQU,IAAI,+BAAgCmiM,GAC5Cr/K,EAAApmB,QAAGK,IAAI,gBAAiB,wBACrB,uBAGJolM,EAKJh/K,mBAAmBzC,EAAK25K,GAC3B,MAAMxpL,EAAUwpL,EAAQ5iG,gBACxB,IAAInhF,EAAM+jL,EAAQoI,iBACbnsL,IACDA,EAAM+jL,EAAQpqK,aAElB,MAAM/sB,EAAMpI,KAAK4nM,kCAAkChiL,EAAK25K,GAGlDz/L,EAAa8lB,EAAI6I,UACvB,GAAI1Y,IAAYiS,EAAApmB,QAAGoS,IAAIa,OAAQ,CAC3B,MAAMxQ,EAAM,4BAA8BuhB,EAAIlkB,UAE9C,OADAsmB,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OAAMuE,QACd+D,EAEN,GAAI2N,IAAYiS,EAAApmB,QAAGoS,IAAIM,OACxB,OAAOlM,EAEN,GAAI2N,IAAYiS,EAAApmB,QAAGoS,IAAIK,KAAM,CAC9B,MAAMhQ,qBAAyBuhB,EAAIlkB,aAEnC,OADAsmB,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OAAMuE,QACd+D,EAEN,GAAI2N,IAAYiS,EAAApmB,QAAGoS,IAAIO,IAAK,CAC7B,MAAMlQ,qBAAyBuhB,EAAIlkB,aAEnC,OADAsmB,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OAAMuE,QACd+D,EAEN,GAAI2N,IAAYiS,EAAApmB,QAAGoS,IAAIG,KAAM,CAC9B,MAAM9P,KAASuhB,EAAIlkB,qCAEnB,OADAsmB,EAAApmB,QAAGwlB,SAAS,CAACtnB,OAAMuE,QACZ+D,EAEN,GAAIpI,KAAK6nM,qBAAqBjiL,EAAKpK,GAAM,CAC1C,MAAMnX,KAASmX,EAAI9Z,kBAAkBkkB,EAAIlkB,2BAEzC,OADAsmB,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OAAMuE,QACd+D,EAIX,OADiBm3L,EAAQuI,mBACR9/K,EAAApmB,QAAGoS,IAAIS,MACbrM,EAOMA,GAHCwd,EAAIkkG,qBACJlkG,EAAI1nB,IAAI,UAAU+f,iBAMjCoK,kCAAkCzC,EAAK25K,GAC1C,MAAMsE,EAAUj+K,EAAIlkB,UACpB,IAAI0G,EAAMm3L,EAAQ75D,YAsBlB,GArBI9/G,EAAI1c,IAAI,aACS0c,EAAIwvF,QAAQ,YACpB/qG,QAAQ09L,IACb,GAAI/nM,KAAKgoM,cAAczI,EAASwI,GAE5B,OADiBA,EAASr+L,YAEtB,KAAKse,EAAApmB,QAAG4f,SAASC,MACbrZ,EAAMlB,KAAK4B,MAAM,KAAOV,GAAM,MAElC,KAAK4f,EAAApmB,QAAG4f,SAASE,OACbtZ,EAAMlB,KAAK4B,MAAM,IAAMV,GAAM,MAEjC,KAAK4f,EAAApmB,QAAG4f,SAASG,OAAQvZ,GAAO,EAAG,MACnC,KAAK4f,EAAApmB,QAAG4f,SAASI,MACbxZ,EAAMwd,EAAI1nB,IAAI,UAAU+e,cAOxC2I,EAAI1c,IAAI,cAAe,CACvB,IAAI7E,EAAM,GACSuhB,EAAIwvF,QAAQ,cACpB/qG,QAAQ49L,IACf,GAAIjoM,KAAKgoM,cAAczI,EAAS0I,GAE5B,OADiBA,EAAWv+L,YAExB,KAAKse,EAAApmB,QAAGigB,WAAWJ,MACfrZ,EAAMlB,KAAK4B,MAAMV,EAAM,MACvB/D,GAAO,8BACP,MAEJ,KAAK2jB,EAAApmB,QAAGigB,WAAWH,OACftZ,EAAMlB,KAAK4B,MAAMV,EAAM,KACvB/D,GAAO,sBACP,MAEJ,KAAK2jB,EAAApmB,QAAGigB,WAAWC,OACf1Z,EAAMlB,KAAK4B,MAAMV,EAAM,GACvB/D,GAAO,+BACP,MAEJ,KAAK2jB,EAAApmB,QAAGigB,WAAWE,SACf3Z,EAAM,EACN/D,GAAO,gCACP,MAEJ,KAAK2jB,EAAApmB,QAAGigB,WAAWG,OACA4D,EAAI1nB,IAAI,UAChBg4E,MAAM9tE,GACb/D,GAAO,sCAQX,KAARA,IACAA,EAAMw/L,EAAU,IAAMx/L,EACtB2jB,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,KAAM8lB,EAAI6I,aAGnC,OAAOrmB,EAGJigB,cAAck3K,EAASpsB,GAC1B,MAAM91F,EAAS81F,EAAQ4wB,YACjBhuL,EAAUwpL,EAAQ5iG,gBAClBurG,EAAW3I,EAAQuI,iBACzB,OAAOzqH,IAAWtnE,GAAWsnE,IAAW6qH,EAIrC7/K,qBAAqBzC,EAAKpK,GAC7B,MAAM2sL,EAAenoM,KAAKsoB,IAAI3C,aAO9B,OANInK,IAAQA,EAAItS,MACZ1E,QAAQU,IAAI,qBAAsBsW,GAClChX,QAAQU,IAAI,eAAgB0gB,GAC5BoC,EAAApmB,QAAGK,IAAI,gBAAiB,uBAAwB,iBAGhDuZ,GAAOA,EAAItS,IAAI,oBACRi/L,GAAgB3sL,EAAItd,IAAI,oBAAoBkqM,YAEhDD,GAAgBngL,EAAApmB,QAAGoO,mBAIvBqY,mBAAmBzC,EAAK25K,GAC3B,MAAMv3L,EAASu3L,EAAQt3L,YACvB,GAAID,GAAUA,EAAOkB,KACjB,GAAIlB,EAAOkB,IAAI,YAAa,CACxB,MAAMkd,EAAOpe,EAAO9J,IAAI,YAAY2oF,UACpCo7C,EAAA1tG,WAAWytK,qBAAqB57K,EAAMR,EAAK25K,EAAQpqK,mBAGtD,GAAIntB,GAAUA,EAAOq6B,MAAO,CAC7B,MAAM7mB,EAAM+jL,EAAQpqK,YAChBntB,EAAOq6B,OACPr6B,EAAOq6B,MAAMzc,EAAKpK,OAGrB,CACD,MAAMA,EAAM+jL,EAAQpqK,YACpB,GAAI3Z,GAAOA,EAAItS,IAAI,YAAa,CAC5B,MAAMkd,EAAO5K,EAAItd,IAAI,YAAY2oF,UACjCo7C,EAAA1tG,WAAWytK,qBAAqB57K,EAAMR,EAAKpK,KAKhD6M,cAAcpe,GACjB,MAAOgM,EAAGC,GAAKjM,EAAM2R,QACrB,IAAK3R,EAAMxC,SACP,OAEJ,MAAM4gM,EAAQp+L,EAAMxC,WACd7D,EAAQykM,EAAM5tL,eAAeC,WAC7B4tL,EAAar+L,EAAMP,WAEzB9F,EAAMyG,QAAQvD,IACV,GAAIuhM,EAAME,aAAazhM,EAAMA,EAAKT,YAAa,CAC3C,MAAMI,EAAU4hM,EAAMpF,iBACtBqF,EAAWt6K,QAAQvnB,EAASwP,EAAGC,MAIvBmyL,EAAMh/L,eAAeqR,WAC7BrQ,QAAQvD,IACZwhM,EAAWt6K,QAAQlnB,EAAMmP,EAAGC,KAK7BmS,WAAW7M,EAAKvR,EAAOs1L,GAC1B,MAAMxnL,EAAQ9N,EAAMP,WACd5J,EAAOmK,EAAMwkB,WACZxY,EAAGC,GAAKjM,EAAM2R,QAIrB,GAFA3R,EAAMqW,IAAI,IAAI6J,EAAUosD,MAEpBx+D,EAAM+V,YAAY7jB,GAAQ,CAC1B,MAAMu+L,EAAav+L,EAAMvI,UAErBuI,EAAMf,IAAI,eACVlJ,KAAKyoM,iBAAiBjtL,EAAKvR,GAGf,WADAs1L,EAAQ5iG,iBAEpB30E,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OACXuE,IAAKmkM,EAAa,iCAG1B,IAAIE,EAAW,SACXz+L,EAAMf,IAAI,iBACVw/L,EAAW,aAGf,IAAIC,EAAUH,EAAa,QAAUE,EACjCltL,IAAQ8H,IAAgBqlL,GAAW,OAASntL,EAAI9Z,WAEpDsmB,EAAApmB,QAAG4lB,WAAW,CAAC1nB,OAAMuE,IAAKskM,IAC1B5hL,EAAKe,UAAUE,EAAApmB,QAAGqJ,iBAAkB,CAAChB,UAErC,MAAM+2L,EAAU,IAAI72K,EAAUo5D,MAM9B,GALAy9G,EAAQtgH,QAAQ,CAAC3+E,KAAMimB,EAAApmB,QAAGqJ,iBACtBg2L,MAAOzlL,IACXvR,EAAMqW,IAAI0gL,GAGN/2L,EAAMf,IAAI,aAAc,CACxB,MAAMrF,EAAS,IAAIq5B,EAAKogE,OAAOkrG,EAAa,WAC5C3kM,EAAO+kM,aAAa3+L,EAAM/L,IAAI,SAASs9E,eACvCx7E,KAAK6oM,yBAAyB5+L,EAAOpG,GAMrC,MAAMk6L,EAAW/1K,EAAApmB,QAAGY,YAAYwlB,EAAApmB,QAAGiL,WAAY27L,GAI/C,GAHAxgL,EAAApmB,QAAGC,aAAammB,EAAApmB,QAAGmL,UAAWlJ,EAAOnC,UAAWq8L,GAEhDhmL,EAAMiW,QAAQnqB,EAAQoS,EAAGC,GACrBjM,EAAMf,IAAI,eAAgB,CAC1B,MAAMk5H,EAAS,IAAIj4G,EAAUs/D,iBAC7B24C,EAAOC,aAAa,QACpBD,EAAO1hD,QAAQ,CAAC78E,WAChBu+H,EAAOz4C,cAAc1/E,EAAM/L,IAAI,gBAC/Bsd,EAAI8E,IAAI8hH,IAGhBpiI,KAAK8oM,mBAAmB7+L,QAGxB+d,EAAApmB,QAAGK,IAAI,gBAAiB,YAAa,yBAKtComB,iBAAiBhhB,EAAKuhH,GACzB,GAAIvhH,IAAQic,IAAkBjc,EAAI6B,IAAI,QAAS,CAC3C,MAAM6/L,EAAWngF,EAAI1qH,IAAI,cAAcoe,cACjC0sL,EAAYpgF,EAAI1qH,IAAI,cAAc2mI,YAClC1tD,EAAY,IAAIhtD,EAAU+sD,UAAU6xH,EAAWC,GACrD3hM,EAAIiZ,IAAI62D,GAGJ9vE,EAAI6B,IAAI,aACRlJ,KAAKipM,uBAAuB5hM,IAMjCghB,uBAAuBhhB,GAC1B,IAAKA,EAAI6B,IAAI,aAAc,CACvB,MACMyb,EADetd,EAAInJ,IAAI,YACHukF,UAC1B,GAAI99D,EAAM,CACN,MAAM/mB,EAAO+mB,EAAK/mB,KACZwoB,EAAO,IAAI+D,EAAUy4D,UAC3Bx8D,EAAKo8D,QAAQ,CAACygD,KAAM,EAAGrlI,SACvByJ,EAAIiZ,IAAI8F,OAEP,CACD,MAAM/hB,YAAgBwa,KAAKC,UAAUzX,KACrC2gB,EAAApmB,QAAGK,IAAI,gBAAiB,0DACaoC,MAG7CgD,EAAInJ,IAAI,aAAaukF,UAAUwgD,MAAQ,EAGpC56G,mBAAmBpe,GACJ,CAAC,WAAY,aAAc,UACnCI,QAAQ2xF,IACG/xF,EAAMmrG,QAAQpZ,GACtB3xF,QAAQ+b,IACe,mBAAjBA,EAAKmgE,SACZngE,EAAKmgE,UAETt8E,EAAMyvB,OAAOtT,OAKlBiC,yBAAyBpe,EAAOpG,GACjB,CAAC,QAAS,SAAU,QAAS,SAAU,cAC/CwG,QAAQ2xF,IACd,MAAM51E,EAAOnc,EAAM/L,IAAI89F,GAAUr1F,QACjC9C,EAAOyc,IAAI8F,KAGf,MAAM8iL,EAAa,CAAC,UAChBj/L,EAAMksB,OAAO+yK,IACbA,EAAW7+L,QAAQ2xF,IACf,GAAI/xF,EAAMf,IAAI8yF,GAAW,CACrB,MAAM51E,EAAOnc,EAAM/L,IAAI89F,GAAUr1F,QACjC9C,EAAOyc,IAAI8F,MAMpBiC,aAAazC,GACCA,EAAIwvF,QAAQ,UACpB/qG,QAAQk1L,IACbv/L,KAAKmpM,kBAAkBvjL,EAAK25K,GAC5B35K,EAAI8T,OAAO6lK,mVCnbvB,MAAAv3K,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GAEAktB,EAAAiK,EAAAn3B,EAAA,IAKMmsM,EAAO,CACTxtK,UAAW,CACPi9C,OAAQ,8BACRC,SAAU,4BACV6H,UAAW,oCAEfzF,UAAW,CACPrC,OAAQ,gCACRC,SAAU,8BACV6H,UAAW,sCAEf1F,KAAM,CACFpC,OAAQ,2BACRC,SAAU,2BACV6H,UAAW,kCAanBxjF,EAAAksM,iBAAA,cAAsCpnE,EAAA1tG,WAMlClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIQ,WAAY6S,EAAWC,GACpCv1B,KAAKy1B,cAAe,EAGpBz1B,KAAKspM,eAAiB,CAClB1tK,UAAW,CACPi9C,OAAQjzD,IACJA,EAAI8T,OAAO,UACX15B,KAAK+kM,SAAS,YAAa,SAAUn/K,IAGzCkzD,SAAUlzD,IACN5lB,KAAKupM,iBAAiB3jL,IAE1B+6D,UAAW/6D,IACPA,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,YAAa,YAAan/K,IAE5C6/D,UAAW7/D,IACPA,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,YAAa,YAAan/K,KAGhD4jL,KAAM,CACF3wH,OAAQjzD,IACJ5lB,KAAKypM,YAAY7jL,EAAK,WAE1BkzD,SAAUlzD,IACN5lB,KAAKypM,YAAY7jL,EAAK,cAG9Bs1D,UAAW,CACPrC,OAAQjzD,IACJA,EAAI8T,OAAO,UACX15B,KAAK+kM,SAAS,YAAa,SAAUn/K,IAEzCkzD,SAAUlzD,IACNA,EAAI8T,OAAO,YACX15B,KAAK+kM,SAAS,YAAa,WAAYn/K,IAE3C+6D,UAAW/6D,IACPA,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,YAAa,YAAan/K,IAE5C6/D,UAAW7/D,IACPA,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,YAAa,WAAYn/K,KAG/Cq1D,KAAM,CACFpC,OAAQjzD,IACJA,EAAI8T,OAAO,UACX15B,KAAK+kM,SAAS,OAAQ,SAAUn/K,IAGpCkzD,SAAUlzD,IACN,MAAMtS,EAAMtT,KAAKsoB,IAAIwoE,cACd76E,EAAGC,GAAK8R,EAAApmB,QAAG2Z,aAAajI,EAAKsS,GAGpC,GAFAA,EAAI8T,OAAO,YACC9T,EAAIlc,WAAW8Z,SACnBqK,MAAM5X,EAAGC,GAAI,CACjB,MAAM2wG,EAAU,IAAI18F,EAAU2uD,SAAS7iE,EAAGC,EACtC0P,EAAIlc,YACRkc,EAAItF,IAAIumG,GAEZ7mH,KAAK+kM,SAAS,OAAQ,WAAYn/K,IAEtC+6D,UAAW/6D,IACPA,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,OAAQ,YAAan/K,IAEvC6/D,UAAW7/D,IACHoC,EAAApmB,QAAG8jB,UAAU,MACbE,EAAI8T,OAAO,aACX15B,KAAK+kM,SAAS,OAAQ,WAAYn/K,OAQlD5lB,KAAK0pM,WAAa,CAAC,YAAa,YAAa,QAC7C1pM,KAAK2pM,SAAW,CAAC,SAAU,WAAY,aAGpCthL,aAAazC,GAChB5lB,KAAK0pM,WAAWr/L,QAAQm7B,IAChB5f,EAAI1c,IAAIs8B,IACRxlC,KAAK2pM,SAASt/L,QAAQu/L,IACdhkL,EAAI1c,IAAI0gM,IACR5pM,KAAKspM,eAAe9jK,GAAUokK,GAAahkL,OAOxDyC,SAASjC,EAAMyjL,EAAYjkL,GAC9B,MAAM9lB,EAAO8lB,EAAI6I,UAEXpqB,KADUuhB,EAAIlkB,aACM0nM,EAAKhjL,GAAMyjL,KACrC7hL,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,QAGfgkB,iBAAiBzC,GACpB,MAAM9lB,EAAa8lB,EAAI6I,UACjB6qI,EAAQx5J,EAAK6tB,cAGnB,IAAK2rI,EAED,YADA1zI,EAAIyvF,UAAU,aAIlB,MAAMy0F,EAAQxwC,EAAMnvJ,OAAOya,GAAKA,EAAE1b,IAAI,eACtC,IAAI8gF,EAAa,EACjB8/G,EAAMz/L,QAAQ4jB,IACV+7D,GAAc/7D,EAAK/vB,IAAI,cAAc6rM,kBAGzC,MAAMpgM,EAAMic,EAAIrd,cACVM,EAAM+c,EAAI3c,aACV+gM,GAAYrgM,EAAMd,IAAQc,EAAMd,EAAMmhF,GAC5C,GAAKhiE,EAAApmB,QAAG8jB,UAAUskL,GAKb,CACD,MAAMjyL,EAAQ6N,EAAIlc,WAElBogM,EAAMz/L,QAAQ4jB,IACNA,EAAK/vB,IAAI,cAAc+rM,oBACvBlyL,EAAMmW,cAAcD,EAAMA,EAAKtS,OAAQsS,EAAKjS,UAGpD4J,EAAIyvF,UAAU,aACd,MAAMhxG,KAASuhB,EAAIlkB,oCACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,YAfO,CACzBuhB,EAAI8T,OAAO,YACX,MAAMr1B,KAASuhB,EAAIlkB,wCACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,SAiBnBgkB,YAAYzC,EAAKo2E,GACpB,MAAMkuG,EAAYtkL,EAAIwvF,QAAQ,QACxB+0F,EAAcvkL,EAAI0d,WAAWy2E,iBAGnC,IAAIqwF,EAAiB,EACjBC,EAAiB,KAerB,GAZAH,EAAU7/L,QAAQigM,IACd,MAAMC,EAAWD,EAASphH,YACpBshH,EAAYF,EAASG,eACrBC,EAAcP,EAAYjkL,KAAKtB,GAAKA,EAAE9N,UAAYyzL,GACpDG,GACIN,EAAiBI,IACjBJ,EAAiBI,EACjBH,EAAiBK,KAKzBL,EAAgB,CAChB,MAAM/rK,EAAY1Y,EAAI2yD,eAChBoyH,EAAcP,GAAkB9rK,EAAY8rK,GAClD,GAAIpiL,EAAApmB,QAAG8jB,UAAUilL,GAAc,CAC3B/kL,EAAI8T,OAAOsiE,GACX,MAAM4uG,EAAW5iL,EAAApmB,QAAGgS,KAAKy2L,EAAezuL,QAASgK,EAAIhK,UAC9CuX,EAAIC,GAAMpL,EAAApmB,QAAG2Z,aAAaqvL,EAAUhlL,EAAIhK,SAC/C,GAAIgK,EAAIlc,WAAW8Z,SAASkyE,aAAc,CACtC,MAAMmxB,EAAU,IAAI18F,EAAU2uD,SAAS3lD,EAAIC,EAAIxN,EAAIlc,YACnDkc,EAAItF,IAAIumG,GACR,MAAMxiH,KAASuhB,EAAIlkB,sCAAsC2oM,EAAe3oM,YACxEsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,YAEhC,CACD,MAAMA,KAASuhB,EAAIlkB,gCACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,UAAWpqB,gLC7NrD,MAAA2jB,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GAEAE,EAAA0tM,YAAA,cAAiC5oE,EAAA1tG,WAC7BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIS,MAAO4S,EAAWC,GAG5BlN,aAAazC,GAChB,MAAMklL,EAASllL,EAAI1nB,IAAI,SACnB4sM,EAAOC,cACP/qM,KAAK8vJ,YAAYlqI,EAAKklL,EAAOrqH,WAG7BzgF,KAAK4vJ,UAAUhqI,EAAKklL,EAAOrqH,WAE/B76D,EAAI8T,OAAOoxK,GAGRziL,YAAYzC,EAAKxhB,GACpB,MAAM4rJ,EAAW5rJ,EAAIub,KACfD,EAAatb,EAAIsb,WACjB2oL,EAAQziL,EAAIne,WAClB,IAAIgB,GAAS,EACTpE,qCAAyC2rJ,KAE5B,YAAbA,EAGe,OAFAq4C,EAAMh/L,eAAes/G,QAAQ,YAGpC0/E,EAAMv4C,YAAYE,EAAU5rJ,EAAImb,SAChC9W,GAAS,GAIZ4/L,EAAMv4C,YAAYE,EAAU,EAAGtwI,KACpCjX,GAAS,GAGTrE,EAAIlF,eAAe,cACfuJ,IACApE,sBAA0B2rJ,gBAE9B5rJ,EAAI8sD,SAAS,CAAC7sD,MAAKoE,YAGvB,MAAM3B,EAAOuhM,EAAMh/L,eAAeomJ,cAAcO,EAAUtwI,GAEtDjX,GAAU3B,EAAKoC,IAAI,eACFpC,EAAKsuG,QAAQ,cACrB/qG,QAAQw4B,IAEb7iC,KAAKgrM,iBAAiBplL,EAAKid,GADX,KAMrBxa,UAAUzC,EAAKxhB,GAClB,MAAMikM,EAAQziL,EAAIne,WACZX,EAAO1C,EAAI0C,KACjB,IAAI2B,GAAS,EACTpE,qBAAyByC,EAAKpF,YAC9BoF,EAAKtG,UAAUivB,MAAM,oBACjB44K,EAAM3vF,YAAY5xG,EAAM1C,EAAImb,SAC5B9W,GAAS,GAGR4/L,EAAMz4C,UAAU9oJ,KACrB2B,GAAS,GAITrE,EAAIlF,eAAe,cACfuJ,IACApE,eAAmByC,EAAKpF,wBAE5B0C,EAAI8sD,SAAS,CAAC7sD,MAAKoE,YAInBA,GAAU3B,EAAKoC,IAAI,eACFpC,EAAKsuG,QAAQ,cACrB/qG,QAAQw4B,IACb7iC,KAAKgrM,iBAAiBplL,EAAKid,KAKhCxa,iBAAiBzC,EAAKid,EAAS0D,GAAQ,GAC1C,GAAIA,EAAO,CACP,MAAMngB,EAAOyc,EAAQgkD,UACrBjhE,EAAItF,IAAI8F,GACRyc,EAAQohD,iBAAgB,OAEvB,CACD,MAAM59D,EAASwc,EAAQgkD,UACvB,GAAsB,iBAAXxgE,EAAqB,CAC5B,MAAM4kL,EAAerlL,EAAI1nB,IAAImoB,GAC7BT,EAAI8T,OAAOrT,GACXwc,EAAQT,QAAQ6oK,GAChBpoK,EAAQohD,iBAAgB,QAGxBj8D,EAAApmB,QAAGK,IAAI,eAAgB,mBACnB,iCAAmCokB,yKCzGvD,MAAA2B,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAm3E,EAAAn3E,EAAA,GAoBAE,EAAA+tM,aAAA,cAAkCjpE,EAAA1tG,WAK9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIU,OAAQ2S,EAAWC,GAIhCv1B,KAAKmrM,iBAAmB,GAIxBnrM,KAAKorM,YAAc,GAGnBprM,KAAKkzK,QAAU,CACX7qJ,CAACL,EAAApmB,QAAGqJ,kBAAmBjL,KAAKqrM,mBAAmBxsM,KAAKmB,MACpDqoB,CAACL,EAAApmB,QAAGuK,oBAAqBnM,KAAKsrM,oBAAoBzsM,KAAKmB,MACvDqoB,CAACL,EAAApmB,QAAGwK,mBAAoBpM,KAAKurM,oBAAoB1sM,KAAKmB,MACtDqoB,CAACL,EAAApmB,QAAGyK,oBAAqBrM,KAAKwrM,qBAAqB3sM,KAAKmB,MACxDqoB,CAACL,EAAApmB,QAAG0K,uBAAwBtM,KAAKyrM,uBAAuB5sM,KAAKmB,OAK9DqoB,aAAazC,GACAA,EAAIwvF,QAAQ,SACpB/qG,QAASmjC,IACb,MAAMroC,EAAOqoC,EAAIizC,WACX1+E,KAACA,GAAQoD,EAIf,IAAIumM,EAAU9lL,EAAI6I,UACdtpB,EAAKrF,OACL4rM,EAAUvmM,EAAKrF,MAGnB,MAAMgmE,EAAS9lE,KAAK2rM,gBAAgB/lL,IAC7B4E,EAAIC,GAAM,CAACihL,EAAQ/vL,OAAQ+vL,EAAQ1vL,QACpC4vL,EAAax3H,EAAA7pD,SAAS05F,aAAaz5F,EAAIC,EAAIq7C,GAAQ,GAC3ClgD,EAAIlc,WAAW8Z,SAASipJ,kBAAkBm/B,GAIlDvhM,QAAQvK,IACV,MAAM6D,EAAS7D,EAAKwK,YAChB3G,GACAA,EAAO0G,QAAQJ,KACNA,EAAM8S,YAAc9S,EAAMf,IAAI,eACbe,EAAMq5B,WAAWmyD,eACVvvE,KAAKxoB,GAC1BA,EAAEie,SAAW6O,GAAM9sB,EAAEse,SAAWyO,IAKhCzqB,KAAKkzK,QAAQnxK,GAAM6jB,EAAK4nB,EAAKvjC,OAMjD2b,EAAI8T,OAAO8T,KAIZnlB,SAAStQ,EAAc+tD,GAC1B9lE,KAAKmrM,iBAAiBpzL,EAAMjB,SAAWgvD,EAGpCz9C,YAAYtQ,UACR/X,KAAKmrM,iBAAiBpzL,EAAMjB,SAMhCuR,gBAAgBzC,GACnB,MAAM/O,EAAK+O,EAAIlc,WAAWoN,QAC1B,OAAI9W,KAAKmrM,iBAAiBjsM,eAAe2X,GAC9B7W,KAAKmrM,iBAAiBt0L,GAG1B7W,KAAKorM,YAGT/iL,mBAAmBzC,EAAK4nB,EAAgBvjC,GAE3C,GAAI2b,EAAI7I,WAAY,CAChB,MACMvB,EADOgyB,EAAIizC,UACewgH,MAChC,GAAIzlL,EAAK,CACL,MAAM5d,EAAOqM,EAAMvI,UACbmqM,EAASjmL,EAAIlkB,UACb2C,KAASzG,SAAY4d,EAAI9Z,qBAAqBmqM,IACpD7jL,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM8lB,EAAI6I,QAASpqB,UAKpCgkB,oBAAoBzC,EAAK4nB,EAAgBvjC,GAC5C,GAAIA,EAAM6M,UAAY8O,EAAI9O,UAGjB7M,EAAMQ,QAAQmb,GAAM,CACrB,MAAM9lB,EAAO8lB,EAAI6I,UAGXpqB,KAFY4F,EAAMvI,iBACTkkB,EAAIlkB,gCAEnBsmB,EAAApmB,QAAGslB,QAAQ,CAAC7iB,MAAKvE,UAKtBuoB,oBAAoBzC,EAAK4nB,EAAgBvjC,GAC5C,GAAI2b,EAAI9O,UAAY7M,EAAM6M,QAAS,CAC/B,MAAM3R,EAAOqoC,EAAIizC,WACXwgH,MAACA,GAAS97L,EAChBnF,KAAK8rM,iBAAiB7K,EAAOr7K,EAAK3b,IAInCoe,qBAAqBzC,EAAK4nB,EAAgBvjC,GAC7C,GAAI2b,EAAI9O,UAAY7M,EAAM6M,QAAS,CAC/B,MAAM3R,EAAOqoC,EAAIizC,WACXwgH,MAACA,GAAS97L,EAChBnF,KAAK8rM,iBAAiB7K,EAAOr7K,EAAK3b,IAInCoe,uBAAuBzC,EAAK4nB,EAAgBvjC,GAC/C+d,EAAApmB,QAAGslB,WAAWjd,EAAMvI,iBAAiBkkB,EAAIlkB,2BAItC2mB,iBACH0jL,EACAF,EACAG,GAIID,EAAUj1L,UAAY+0L,EAAO/0L,UAI7B+0L,EAAOrrM,YAAcwrM,EAAUxrM,UAC1BwrM,EAAUvhM,QAAQohM,IAAYA,EAAOphM,QAAQuhM,KAC1CA,EAAUnnF,SAASknF,IACnB/rM,KAAK+kM,SAAS,0BAA2BgH,EAAWF,EAChDG,GACJA,EAAU1oK,WAAWs5E,YAAYknC,aAAaioD,KAG9C/rM,KAAK+kM,SAAS,8BAA+BgH,EACzCF,EAAQG,GACZA,EAAUlmF,SAASimF,KAItBC,EAAUnnF,SAASgnF,KACxB7rM,KAAK+kM,SAAS,8BAA+BgH,EAAWF,EACpDG,GACJA,EAAUlmF,SAASimF,KAIpB1jL,SAAShkB,EAAK4nM,EAAMJ,EAAQK,GAC/B,MAAMC,EAAWF,EAAKvqM,UAChB5B,EAAO+rM,EAAOp9K,UACpB,IAAI29K,KAAaF,EAAKxqM,aAAa2C,QAAU8nM,KAC7CC,eAAuBP,EAAOnqM,YAC9BsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,IAAK+nM,yKCrM/B,MAAApkL,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACA6xL,EAAA7xL,EAAA,IAGAE,EAAAkvM,gBAAA,cAAqCpqE,EAAA1tG,WACjClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIW,WAAY0S,EAAWC,GAGjClN,aAAazC,GACAA,EAAIwvF,QAAQ,aACpB/qG,QAAQ8sE,IAEZ,MAAMyN,EAAUh/D,EAAI1nB,IAAI,cACxB,IAAIouM,GAAa,EAEbjxK,EAAMupD,EAAQrpD,SAIlB,IAHAF,GAAO87C,EAAUo1H,eACjB3nH,EAAQtpD,OAAOD,GAERixK,GAAY,CACf,MACME,EADe5nH,EAAQtoE,cACO,EAGpC,GAAI+e,GAFWrT,EAAApmB,QAAGwZ,eAAeoxL,GAEd,CACfxkL,EAAApmB,QAAGwa,aAAawJ,EAAK4mL,GACrB,MAAM5uM,EAAOgoB,EAAIlkB,UACjB,GAAIkkB,EAAI7I,YAAc6I,EAAI1c,IAAI,cAAe,CACzC,MAAM40E,EAAal4D,EAAI1nB,IAAI,cAAcue,WACnCg5J,EAAUqZ,EAAArxG,WAAWy2E,iBACvBs4C,EAAc1uH,GAClBl4D,EAAI0d,WAAW8mH,mBAAmBqrB,OAEjC,CACD,MAAMpxK,KAASzG,6BACfoqB,EAAApmB,QAAG0lB,YAAY,CAACjjB,MAAKvE,KAAM8lB,EAAI6I,YAEnC69K,GAAa,OAGbA,GAAa,EAGrB1mL,EAAI8T,OAAOy9C,mVC7CvB,MAAAnvD,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAGAE,EAAAsvM,aAAA,cAAkCxqE,EAAA1tG,WAC9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAI3N,OAAQghB,EAAWC,GAG7BlN,aAAazC,GAChB,MAAM8mL,EAAa9mL,EAAI1nB,IAAI,UACrB2rM,EAAajkL,EAAI1nB,IAAI,UAG3B,GAFAwuM,EAAW72H,WAAWg0H,EAAWzsG,aACjCysG,EAAW50H,cACPy3H,EAAW52H,cAEPlwD,EAAI1c,IAAI,WAAa8e,EAAApmB,QAAG8jB,UAAUsC,EAAApmB,QAAG+O,aAAc,CACnD,MAAMvI,EAAM,IAAI+hB,EAAUssD,OAAOzuD,EAAApmB,QAAGgP,WAChCoX,EAAApmB,QAAGoS,IAAIM,QACXsR,EAAItF,IAAIlY,GACR4f,EAAApmB,QAAG2lB,SAAS3B,EAAIlkB,UAAY,gWCrB5C,MAAAsmB,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAQAE,EAAAwvM,cAAA,cAAmC1qE,EAAA1tG,WAG/BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIvU,QAAS4nB,EAAWC,GACjCv1B,KAAK4sM,aAAe5kL,EAAApmB,QAAGqO,sBAGpBoY,aAAazC,GAChB,MAAMssH,EAAQtsH,EAAI1nB,IAAI,WAChB6zI,EAAWG,EAAM/8G,YAEjB9f,EADQ68H,EAAMxoI,WACF8Z,SAEZ+1D,EAAU24D,EAAM26D,aAChBrzH,EAAU04D,EAAM46D,aACtB,IAAIC,EAAa,KACb13L,EAAIwY,MAAM0rD,EAASC,KACnBuzH,EAAa13L,EAAIoZ,QAAQ8qD,EAASC,IAEtC,MAAMwzH,EAAWhtM,KAAKitM,gBAAgBrnL,EAAKmsH,GAE3C,GAAIg7D,GAAcA,EAAWnsM,QAAQ,UAAW,CAC5C,MAAMg+E,EAAcmuH,EAAWpxK,oBAAoB,GACnDo2G,EAASzuG,WAAWs5E,YAAY00B,gBAAgB1yD,GAGpD,KAAOszD,EAAMt4D,aAAes4D,EAAMn4D,YAAcm4D,EAAMv4D,YAAY,CAG9Du4D,EAAMpiF,OACN,MAAMhjC,EAAQolH,EAAMv2H,OACdoR,EAAQmlH,EAAMl2H,OACpB,IAAI0V,EAAiB,KACjBrc,EAAIwY,MAAMf,EAAOC,KACjB2E,EAAWrc,EAAIoZ,QAAQ3B,EAAOC,IAGlC,IAAImgL,EAAW,GACf,GAAKx7K,EAUA,GAAKA,EAAStnB,aAAgBsnB,EAAS+rF,kBAUvC,GAAI/rF,EAAS9wB,QAAQ,UAAW,CACjC,MAAMqJ,EAAQynB,EAASpnB,YAAY,GAEnC,GAAItK,KAAKmtM,aAAavnL,EAAK3b,EAAOioI,GAAQ,CACtClyI,KAAKotM,oBAAoBxnL,EAAKssH,EAAOxgH,GACV,mBAAhBwgH,EAAM7vG,OACb6vG,EAAM7vG,MAAMp4B,GAEhB,MAAMojM,EAAUrtM,KAAKstM,kBAAkBrjM,EAAOioI,GAC9ClqH,EAAApmB,QAAGuC,MAAMnE,KAAM,gBACfktM,KAAcF,KAAYK,KAAWpjM,EAAMvI,YAEvCuI,EAAMf,IAAI,gBACY,YAAlB0c,EAAIplB,UACJyhI,EAAA1tG,WAAWssK,aAAa9uD,EAAU,WAAY,GAEvB,SAAlBnsH,EAAIplB,WACTyhI,EAAA1tG,WAAWssK,aAAa9uD,EAAU,UAAW,IAGrD/pH,EAAApmB,QAAG2lB,SAAS,CAACznB,KAAM4xB,EAAUrtB,IAAK6oM,IAClCA,EAAW,QAEV,GAAIh7D,EAAMn4D,WAAY,CACvB/5E,KAAKotM,oBAAoBxnL,EAAKssH,EAAOxgH,GACrC1J,EAAApmB,QAAGuC,MAAMnE,KAAM,wCAEf,MAAMutM,EAAa77K,EAASqsF,gBAGxBmvF,EAFAK,EAEWP,EAAW,WADHO,EAAW7rM,UAInBsrM,EAAW,0BAGpB96D,EAAMv4D,aACZ35E,KAAKotM,oBAAoBxnL,EAAKssH,EAAOxgH,GACrC1J,EAAApmB,QAAGuC,MAAMnE,KAAM,wCACfktM,EAAWtnL,EAAIlkB,UAAY,mCAG1BwwI,EAAMn4D,YACX/5E,KAAKotM,oBAAoBxnL,EAAKssH,EAAOxgH,GACrC1J,EAAApmB,QAAGuC,MAAMnE,KAAM,8BACfktM,EAAWtnL,EAAIlkB,UAAY,yBAErBwwI,EAAMv4D,aACZ35E,KAAKotM,oBAAoBxnL,EAAKssH,EAAOxgH,GACrC1J,EAAApmB,QAAGuC,MAAMnE,KAAM,sCACfktM,EAAWtnL,EAAIlkB,UAAY,6BA5DgC,CAC3DwwI,EAAMt+D,OACN,MAAMqc,EAAQiiD,EAAMv2H,OACdu0E,EAAQgiD,EAAMl2H,OACdwxL,EAAWn4L,EAAIoZ,QAAQwhE,EAAOC,GACpClwF,KAAKotM,oBAAoBxnL,EAAKssH,EAAOs7D,GAErCxlL,EAAApmB,QAAGuC,MAAMnE,KAAM,2BACfktM,EAAWF,EAAW,4BAlBX,CACX96D,EAAMt+D,OACN,MAAMqc,EAAQiiD,EAAMv2H,OACdu0E,EAAQgiD,EAAMl2H,OACdwxL,EAAWn4L,EAAIoZ,QAAQwhE,EAAOC,GACpClwF,KAAKotM,oBAAoBxnL,EAAKssH,EAAOs7D,GAErCN,EAAWF,EAAW,cAiEtBE,EAAS3rM,OAAS,GAClBymB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM4xB,EAAUrtB,IAAK6oM,KAQtC7kL,kBAAkBzC,EAAKssH,GAC1B,IAAIm7D,EAAU,OACd,MAAMjlM,EAAM8pI,EAAMxM,YACZ+nE,EAAa,IAAItjL,EAAUssD,OAAOruE,EACpC4f,EAAApmB,QAAGoS,IAAItG,SACLggM,EAASx7D,EAAM/8G,YACrBs4K,EAAWp4K,UAAUq4K,GAErB,IAAIC,EAAUz7D,EAAMxM,YAUpB,OATIgoE,EAAOxkM,IAAI,iBACP8e,EAAApmB,QAAG8jB,UAAU1lB,KAAK4sM,gBAClBe,GAAW,EACXN,EAAU,mBAIlBI,EAAWt7D,UAAUw7D,GACrB/nL,EAAItF,IAAImtL,GACDJ,EAGJhlL,oBAAoBzC,EAAKssH,EAAOxgH,GACnCwgH,EAAMr4D,cACNj0D,EAAI8T,OAAOw4G,GAEX,MAAMn6H,EAAQm6H,EAAMxoI,WACpB,IAAIkkM,GAAgB,EAOpB,GANK17D,EAAMwqC,cACPkxB,GAAgB,EACXhoL,EAAI1c,IAAI,oBACTgpI,EAAMwqC,YAAc18K,KAAK6tM,iBAAiBjoL,KAG7CssH,EAAMwqC,aAkBN,IAAKkxB,EAAe,CACrB,MAAMvpM,KAASuhB,EAAIlkB,0BACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM4xB,EAAUrtB,aApBR,CACpB,IAAIypM,GAAe,EAGfp8K,EAAS4wE,YACS5wE,EAAShX,WAEjBrQ,QAAQvD,IACTgnM,IACDA,EAAe9lL,EAAApmB,QAAGoE,gBAAgBc,EAAM8e,MAK/CkoL,GACD/1L,EAAMiW,QAAQpI,EAAK8L,EAAS/V,OAAQ+V,EAAS1V,QAQrD,MAAM7W,EAAO,CACTqC,QAAS0qI,EACTprI,KAAM8e,EACNivC,GAAI,CAACnjC,EAAS/V,OAAQ+V,EAAS1V,QAC/BjE,SAEE4mL,EAAW,IAAIx0K,EAAUs6D,UAAUt/E,GACzCygB,EAAItF,IAAIq+K,GAILt2K,iBAAiBzC,GACpB,MAAMhoB,EAAOgoB,EAAIlkB,UACX0W,EAAOpY,KAAKsoB,IAAI3C,aACtB,OAAIC,EAAI1c,IAAI,QACJ,yBAA2B2tB,KAAKj5B,GACzBwa,EAAO,IAET,gBAAkBye,KAAKj5B,GACrBwa,EAAO,GAGPA,EAAO,IAGb,QAAUye,KAAKj5B,GACbwa,EAAO,IAET,yBAA2Bye,KAAKj5B,GAC9Bwa,EAAO,IAGPA,EAAO,IAIfiQ,gBAAgBzC,EAAKve,GACxB,IAAIy+K,EAAO,SAEX,OADIlgK,EAAI1c,IAAI,UAAU48K,EAAO,WACnBlgK,EAAIlkB,aAAaokL,QAAWz+K,EAAI3F,YAIvC2mB,aAAazC,EAAKxG,EAAQ8yH,GAC7B,GAAI9yH,EAAOlW,IAAI,YACX,OAAO,EAGX,MAAM6oI,EAAWG,EAAM/8G,YACvB,GAAI48G,EAAS7oI,IAAI,iBAAmBgpI,EAAMn4D,WACtC,OAAO,EAGX,MAAMg0H,EAA6B,YAAlBnoL,EAAIplB,UAErB,IAAI8G,EAAS4qI,EAAM3qI,YACfwqI,EAAS7oI,IAAI,YAET5B,GADAymM,EACUh8D,EAAS7zI,IAAI,UAAUwL,SAAS,YAGhCqoI,EAAS7zI,IAAI,UAAUwL,SAAS,YAGlD,IAAIs0B,EAAU5e,EAAOrB,aACjBqB,EAAOlW,IAAI,YACX80B,GAAW5e,EAAOlhB,IAAI,UAAUwL,SAAS,UAE7C,MAAMskM,EAAU1mM,GAAUA,EAAS02B,GACnC,OAAIhW,EAAApmB,QAAG8jB,UAAUsoL,IAET5uL,EAAOlW,IAAI,kBACJ8e,EAAApmB,QAAG8jB,UAAU,KAKxBu8G,EAAA1tG,WAAWssK,aAAazhL,EAAQ,QAAS,IAEtC,iVCzQf,MAAA4I,EAAAC,EAAAhrB,EAAA,IAEAglI,EAAAhlI,EAAA,GAGAktB,EAAAiK,EAAAn3B,EAAA,IAEAq3C,EAAAr3C,EAAA,GAMMkH,EADNlH,EAAA,EACcq3B,CAAI,yBAIZusK,aAACA,GAAgB5+D,EAAA1tG,WAoBjB05K,EAAgB,CAClB35G,aAAchgD,EAAArE,KAAKiB,kBACnBs/B,KAAQl8B,EAAArE,KAAKa,YACbikD,YAAazgD,EAAArE,KAAKe,kBAIhBk9J,EAAc,CAChBn5G,YAAa,OACbC,wBAAyB,OACzBV,aAAc,OACdC,yBAA0B,OAC1BC,mBAAoB,QAIxBr3F,EAAAgxM,eAAA,cAAoClsE,EAAA1tG,WAMhClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIY,SAAUyS,EAAWC,GAClCv1B,KAAKouM,iBAAmB,CAAC,cAAe,SACxCpuM,KAAKquM,QAAU,WAMfruM,KAAKsuM,SAAW,CACZ35G,MAAO,CACH45G,YAAa,CAAC,SAAU,cACxBC,KAAM,CACFxuM,KAAKyuM,aAAa,IAClBzuM,KAAK0uM,eAAe,IACpB,CACIpwM,OAAQ,EAAGqwM,QAAS,SAAUC,QAAS,YACvC/lH,WAAY,aAAcgmH,WAAY,eAIlDh6G,MAAO,CACH25G,KAAM,CACFxuM,KAAKyuM,aAAa,MAG1BK,OAAQ,CAACN,KAAM,CACXxuM,KAAK0uM,eAAe,MAExBK,MAAO,CAACP,KAAM,CACVxuM,KAAKyuM,aAAa,OAEtBj+H,KAAM,CACF+9H,YAAa,CAAC,SAAU,YACxBC,KAAM,CACFxuM,KAAKyuM,aAAa,QAM3BpmL,aAAaimG,GAChB,MAAO,CACHhwH,OAAQgwH,EAAOqgF,QAAS,QAASC,QAAS,WAC1C/lH,WAAY,YAAagmH,WAAY,YAItCxmL,eAAeimG,GAClB,MAAO,CACHhwH,OAAQgwH,EAAOqgF,QAAS,SAAUC,QAAS,aAC3C/lH,WAAY,aAAcgmH,WAAY,cAMvCxmL,kBAAkBmlL,EAAgBjmF,GACrC,GAAIA,EAAQ3mH,QAAQonB,EAAApmB,QAAGkL,WAAY,CAC/B,GAAIy6G,EAAQ1nD,YAAa,CACrB,MACM9nD,EADSwvG,EAAQ7xE,YACFxc,iBACrB,IAAI70B,EAAM,sBAEK0T,EAAM1B,cAGjBhS,mCADa2jB,EAAApmB,QAAGyjB,mBAAmBtN,MAGvCiQ,EAAApmB,QAAGslB,QAAQ7iB,QAEV,GAAIkjH,EAAQmkC,aAAc,CAC3B,MACM3zI,EADUwvG,EAAQynF,aACF91K,iBAEtB,IAAI70B,0BADQ2jB,EAAApmB,QAAG2hB,qBAAqBxL,EAAOwvG,WAE5BxvG,EAAM1B,cAGjBhS,kCADa2jB,EAAApmB,QAAGyjB,mBAAmBtN,MAGvCiQ,EAAApmB,QAAGslB,QAAQ7iB,QAEV,GAAIkjH,EAAQzxE,gBAAiB,CAC9B,MACM/9B,EADawvG,EAAQxxE,gBACF7c,iBACzB,IAAI70B,EAAM,2BAEK0T,EAAM1B,cAGjBhS,kCADa2jB,EAAApmB,QAAGyjB,mBAAmBtN,MAGvCiQ,EAAApmB,QAAGslB,QAAQ7iB,GAGXkjH,EAAQ22D,YAAY,UACpBl2J,EAAApmB,QAAGslB,QAAQ,kCAGVsmL,EAASl5D,WAAa/sB,EAAQ+sB,UAClB/sB,EAAQvX,UACZj1E,cACL/S,EAAApmB,QAAGslB,QAAQ,mCAGXc,EAAApmB,QAAGslB,QAAQ,4BAGVqgG,EAAQ+sB,YACA/sB,EAAQvX,UACXj1E,eACN/S,EAAApmB,QAAGslB,QAAQ,0CAKvB,GAAIqgG,EAAQjlB,WAAY,CACpB,MAAM1+F,EAAQ2jH,EAAQ7sG,WAChB4rG,EAAU1iH,EAAM,GACtB,IAAIqrM,EAAc3oF,EAAQ5kH,UACtB4kH,EAAQjgH,WAAa,IACrB4oM,KAAiBA,OAAiB3oF,EAAQjgH,eAG1CzC,EAAMrC,OAAS,EACfymB,EAAApmB,QAAGslB,QAAQ,4CACI+nL,YAGfjnL,EAAApmB,QAAGslB,mBAAmB+nL,IAAgB,iBAItC3oF,EAAQp9G,IAAI,YACRo9G,EAAQjgH,WAAa,EAAI2hB,EAAApmB,QAAGslB,QAAQ,qBAClCc,EAAApmB,QAAGslB,QAAQ,mBAIrB,IAAK,IAAI7pB,EAAI,EAAGA,EAAIuG,EAAMrC,OAAQlE,IAC9B,GAAIuG,EAAMvG,GAAG84B,OAAOn2B,KAAKouM,kBAAmB,CACxC,MAAMxwM,EAAOgG,EAAMvG,GAAGqE,UACtBsmB,EAAApmB,QAAGslB,4CAA4CtpB,MAK3D,MAAMsxM,EAAc3nF,EAAQhnH,cACxB2uM,EAAYC,OAAO,YACnBnnL,EAAApmB,QAAGslB,QAAQgoL,EAAYpI,OAAO,YAI/Bz+K,aAAazC,GAChB,MAAMihG,EAAUjhG,EAAI1nB,IAAI,aACjB+X,EAAGC,GAAK2wG,EAAQjrG,QAEjBvG,EAAMwxG,EAAQn9G,WAAW8Z,SAE/B,IAAKnO,EAAIwY,MAAM5X,EAAGC,GAAI,CAClB,IAAI7R,sBAA0B4R,KAAKC,KACnC7R,GAAO,YAAcuhB,EAAIlkB,UACzBsmB,EAAApmB,QAAG+C,KAAK,kBAAmB,eAAgBN,GAG/C,MAAMvE,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GACtBs3L,EAAW5nL,EAAI6I,UACrB,IAAI2gL,EAAetvM,EAAK8vB,OAAOhK,EAAI1c,IAAI,WAKvC,GAJKkmM,IACDA,EAAepvM,KAAKqvM,sBAAsBzpL,EAAK9lB,IAG/CsvM,EAAc,CACd,MAAME,EAAQ1pL,EAAIhK,QACdzX,EAAM0xB,SACN7N,EAAApmB,QAAGuC,MAAMnE,gCAAiCsvM,KAG9C,MAAM3uM,EAAWilB,EAAI3F,cACrB,GAAI5K,EAAIk6L,SAASD,EAAO,CAACr5L,EAAGC,GAAIvV,EAAUilB,GAAM,CAC5CA,EAAIkxB,MAAM7gC,EAAGC,GAEblW,KAAKwvM,kBAAkB5pL,EAAK4nL,EAAU1tM,GAGlC8lB,EAAI7I,UAAY6I,EAAI7I,YACpB/c,KAAKyvM,kBAAkBjC,EAAU1tM,GAGjCA,EAAKk+G,gBACDp4F,EAAI7I,UAAY6I,EAAI7I,YAChBjd,EAAKo+K,YAAY,gBACjBl+K,KAAK0vM,oBAAqB9pL,EAAuB9lB,GAGzDE,KAAK2vM,iBAAiB/pL,EAAK9lB,IAG/B,MAAMmvF,EAAWnvF,EAAKS,cACtB,GAAI0uF,EAAS/lF,IAAI,SAAU,CACvB,MAAM5I,EAAW2uF,EAASzuF,UACtBytM,EAAc3tM,IACdR,EAAK4uB,YAAYu/K,EAAc3tM,UAKvCN,KAAK4vM,WAAWhqL,QAIpBoC,EAAApmB,QAAGuC,MAAMnE,KAAM,uBAA0BiW,EAAI,KAAOC,GAExD0P,EAAI8T,OAAOmtF,GAKRx+F,kBAAkBzC,EAAK4nL,EAAUjmF,GACpC,IAAKsoF,EAAUC,GAAW,CAACtC,EAASjtM,cAAcC,UAC9C+mH,EAAQhnH,cAAcC,WAU1B,GARI0tM,EAAY2B,KACZA,EAAW3B,EAAY2B,IAEvB3B,EAAY4B,KACZA,EAAU5B,EAAY4B,IAItBD,IAAaC,EAAjB,CAGA,GAAI9vM,KAAKsuM,SAASpvM,eAAe4wM,GAAU,CACvC,MAAMC,EAAU/vM,KAAKsuM,SAASwB,GAG9B,IAAIE,GAAa,EACbD,EAAQxB,aACRwB,EAAQxB,YAAYlkM,QAAQ4lM,IACpBrqL,EAAI1c,IAAI+mM,KACRD,GAAa,KAKrBA,GACAD,EAAQvB,KAAKnkM,QAAQi6C,IACjB,GAAIt+B,OAAOC,UAAUq+B,EAAIhmD,OAAQ,CAC7B,MAAMuqF,EAAa1+D,EAAUxrB,OAAO2lD,EAAIukC,YACxCA,EAAWvkC,EAAIuqJ,YAAYvqJ,EAAIhmD,OAC/BuqF,EAAW+C,OAAOkkH,GAClBlqL,EAAItF,IAAIuoE,OAEP,CACD,MAAM8lH,EAAU/oL,EAAI1nB,IAAIomD,EAAIqqJ,SAC5B,GAAIA,EAAS,CACT,IAAI30L,EAAQ20L,EAAQrqJ,EAAIsqJ,WACxB50L,EAAQ9S,KAAK4B,MAAMw7C,EAAIhmD,MAAQ0b,GAC/B,MAAM6uE,EAAa1+D,EAAUxrB,OAAO2lD,EAAIukC,YACxCA,EAAWvkC,EAAIuqJ,YAAY70L,GAC3B6uE,EAAW+C,OAAOkkH,GAClBlqL,EAAItF,IAAIuoE,OAS5B,GAAI7oF,KAAKsuM,SAASpvM,eAAe2wM,GAAW,CACxC,MAAMK,EAAYtqL,EAAIwvF,QAAQ,aACxB+6F,EAAavqL,EAAIwvF,QAAQ,cAE/B86F,EAAU7lM,QAAQi6C,IACVA,EAAIglE,WAAaumF,GACjBjqL,EAAI8T,OAAO4qB,KAGnB6rJ,EAAW9lM,QAAQi6C,IACXA,EAAIglE,WAAaumF,GACjBjqL,EAAI8T,OAAO4qB,OAOnBj8B,sBAAsBzC,EAAoB9lB,GAC9C,MAAMuvB,EAAWvvB,EAAKS,cAAcC,UACpC,GAAIR,KAAKquM,QAAQx3K,KAAKxH,IAAazJ,EAAI1c,IAAI,WAAY,CACnD,MAAM7E,KAASuhB,EAAIlkB,qCAEnB,OADAsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,SACX,EAEX,OAAO,EAKHgkB,oBAAoBzC,EAAoB9lB,GAC5C,MAAMiY,EAAe6N,EAAIlc,YAClBuM,EAAGC,GAAK,CAACpW,EAAK6b,OAAQ7b,EAAKkc,QAE5Bo5K,EADWt1L,EAAKmgB,YAAY,eAAe,GAGjD,GAAIlI,EAAMmW,cAAcknK,EAASn/K,EAAGC,GAAI,CACpC,MAAMk6L,EAAWhb,EAAQ75J,SACnB47C,EAAY,IAAIhtD,EAAU+sD,UAAUk5H,GAI1C,GAHAxqL,EAAItF,IAAI62D,GACR0pH,EAAaj7K,EAAK,cAAe,GAE7BwvK,EAAQ55J,UAAW,CACnB,MAAM60K,EAAUjb,EAAQ3yG,UACpB4tH,EAAQtwE,UACRn6G,EAAI1nB,IAAI,YAAY6nF,YAAYsqH,EAAQtwE,UAKhD,MAAMt4B,EAAc1vF,EAAM1B,YACtBoxF,GACA7hF,EAAI1nB,IAAI,YAAY2nF,QAAQ4hB,EAAY3wF,SAG5C,IAAIzS,EAAM+wL,EAAQ0R,OAAO,WACpBziM,GAAsB,IAAfA,EAAI9C,SACZ8C,KAASuhB,EAAIlkB,2CAEjBsmB,EAAApmB,QAAGwlB,SAAS,CAACtnB,OAAMuE,QACfuhB,EAAI7I,YACmB6I,EAAI0d,WAEf6mH,WAMhB9hI,iBAAiBzC,EAAK9lB,GAE1B,MAAMw5J,EAAQx5J,EAAK6tB,cACd2rI,GAELA,EAAMjvJ,QAAQ4jB,IACV,GAAIA,EAAK/kB,IAAI,gBACJ0c,EAAI1c,IAAI,aAAc,CACvB,MAAMgzB,EAAOjO,EAAK/vB,IAAI,cAAc6rM,gBAC9BpgM,EAAMic,EAAIrd,cACVM,EAAM+c,EAAI3c,aAEVqnM,GAAa3mM,EAAMd,IAAQc,EAAMd,EAAMqzB,GAC7C,GAAKlU,EAAApmB,QAAG8jB,UAAU4qL,GAOb,CACD,IAAIjsM,KAASuhB,EAAIlkB,mCACjB2C,UAAc4pB,EAAKvsB,aACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,YAVQ,CAE1BuhB,EAAItF,IAAI,IAAI6J,EAAUyR,WACtB,IAAIv3B,KAASuhB,EAAIlkB,4BACjB2C,UAAc4pB,EAAKvsB,aACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,YAa9BgkB,WAAWzC,GACf,MAAO2qL,EAAMC,GAAQ5qL,EAAIhK,QACnB7D,EAAQ6N,EAAIlc,WACZ2L,EAAM0C,EAAMyL,SACZ4H,EAAQmlL,EAAO,KAAOC,EAC5BxoL,EAAApmB,QAAGgD,KAAK,uCACRojB,EAAApmB,QAAGmd,aAAahH,EAAMzN,YAClB,CAAC,QAAS,UAAW,OAAQ,SACjCtK,KAAKywM,yBAAyBF,EAAMC,EAAMn7L,EAAKuQ,GAC/CoC,EAAApmB,QAAGK,IAAI,iBAAkB,cACrB,wBAA2B2jB,EAAIlkB,UAAY,OAAS0pB,GAKpD/C,yBAAyBqoL,EAAMC,EAAMt7L,EAAKuQ,GAC9C,MAAMjlB,EAAWilB,EAAI3F,cACrB,IAAI2wL,GAAU,EACVC,GAAU,EACd,IAAK,IAAI56L,EAAI,EAAGA,EAAIZ,EAAI4B,KAAMhB,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAI6B,KAAMhB,IACtBb,EAAI6hC,WAAWjhC,EAAGC,EAAGvV,EAAUilB,KAC/BgrL,EAAS36L,EACT46L,EAAS36L,GAKrB,MAAMpW,EAAOuV,EAAIoZ,QAAQiiL,EAAMC,GAC/B3oL,EAAApmB,QAAGgD,gBAAgB8rM,KAAQC,MAC3B3oL,EAAApmB,QAAGgD,KAAK9E,GAER,MAAMynM,EAAU3hL,EAAI6I,UACpBzG,EAAApmB,QAAGgD,KAAK,uBACRojB,EAAApmB,QAAGgD,KAAK2iM,GAERv/K,EAAApmB,QAAGgD,KAAK,6CACR,MAAMhH,EAAOgoB,EAAIlkB,UACjB,GAAIkvM,GAAU,GAAKC,GAAU,EAAG,CAC5B,MACMxsM,YAAgBzG,qBADRgzM,KAAUC,gBAAqBH,KAAQC,QAErD3oL,EAAApmB,QAAGgD,KAAKP,OAEP,CACD,MAAMA,eAAmBzG,0BACzBoqB,EAAApmB,QAAGgD,KAAKP,GAIZ2jB,EAAApmB,QAAGgD,KAAK,8BACR,MAAM6jC,EAAUpzB,EAAI+oG,QAAQh6G,GACjBA,EAAI1C,SAAW0C,EAAI1C,UAAU+tB,MAAM,WAE9CzH,EAAApmB,QAAGgD,KAAK6jC,iVCpehB,MAAAzgB,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAigC,EAAA9I,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,KAIM4jM,aAACA,GAAgB5+D,EAAA1tG,WAYvBp3B,EAAA2zM,WAAA,cAAgC7uE,EAAA1tG,WAC5BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIc,KAAMuS,EAAWC,GAG3BlN,aAAazC,GAChB,MAAM2iI,EAAQ3iI,EAAI1nB,IAAI,eAChBiH,EAAkBojJ,EAAM9nE,WACxB+nE,MAACA,GAASrjJ,EAChBnF,KAAK+wM,kBAAkBnrL,EAAKzgB,GACxBqjJ,EAAM1xI,UAAY8O,EAAI9O,QACtB9W,KAAKgxM,QAAQ7rM,GAGbnF,KAAKixM,SAAS9rM,GAElBygB,EAAI8T,OAAO6uH,GAGRlgI,kBAAkBzC,EAAKzgB,GAC1B,MAAM2B,KAACA,EAAI0hJ,MAAEA,EAAKvlJ,KAAEA,EAAIwlJ,OAAEA,GAAUtjJ,EACpC,IAAId,EAAM,GACLyC,IACDzC,GAAO,wBAENmkJ,IACDnkJ,GAAO,yBAENokJ,IACDpkJ,GAAO,0BAENpB,IACDoB,GAAO,kCAEC,KAARA,IACAA,GAAO,WAAauhB,EAAIlkB,UACxBsmB,EAAApmB,QAAGK,IAAI,cAAe,oBAAqBoC,IAK5CgkB,QAAQljB,GACX,MAAM2B,KAACA,EAAI0hJ,MAAEA,EAAKvlJ,KAAEA,EAAIwlJ,OAAEA,GAAUtjJ,EAC9B+rM,EAAY1oD,EAAM/5H,UAClBnwB,EAAQwI,EAAKoT,WAAajX,EAAKkuM,oBAC/B72L,EAAa0N,EAAApmB,QAAGgY,kBAAkBtb,GAClC+pJ,EAASrgI,EAAApmB,QAAG4Y,eAAeF,GAEjC,GAAI0N,EAAApmB,QAAGyY,cAAcmuI,EAAOluI,GAAa,CACrC,MAAMg7J,EAAQ,IAAIp4I,EAAKyH,SAAS3c,EAAApmB,QAAG8O,gBAC7B6kK,EAAgBvtJ,EAAApmB,QAAG+Y,aAAa6tI,EAAOH,GAG7C,GAFAitB,EAAM1uK,SAAS2uK,IAEV/sB,EAAM/gJ,WAAW8+G,aAAaz/G,GAG/B,OAFA0hJ,EAAM/gJ,WAAWumB,QAAQsnJ,QACzBttJ,EAAApmB,QAAGslB,QAAQshI,EAAM9mJ,UAAY,6BAIjC+mJ,EAAOhhJ,WAAWumB,QAAQsnJ,GACZ7sB,EAAO/+I,WACXoR,WAAWhU,EAAM7D,EAAK0Y,OAAQ1Y,EAAK+Y,SACzCwsI,EAAM/gJ,WAAWumB,QAAQlnB,GACzBA,EAAK4yB,OAAO,UACZ1R,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMoxM,EAAW7sM,IAAKmkJ,EAAM9mJ,UACpC,WAAaoF,EAAKpF,UAAY,QAAU2mJ,EAAS,YACrDw4C,EAAap4C,EAAQ,UAAW,IAGhCzgI,EAAApmB,QAAGK,IAAI,cAAe,UACnB,yCAIP+lB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMoxM,EAAW7sM,IAAKmkJ,EAAM9mJ,UACpC,qCAAwCoF,EAAKpF,UAAY,QACvD2mJ,EAAS,YAIhBhgI,SAASljB,GACZ,MAAM2B,KAACA,EAAI0hJ,MAAEA,EAAKC,OAAEA,EAAMxlJ,KAAEA,GAAQkC,EAMpC,GALKsjJ,GACDzgI,EAAApmB,QAAGK,IAAI,cAAe,WAClB,iCAGHjC,KAAKoxM,iBAAiBtqM,EAAM0hJ,GAAQ,CACpB1hJ,EAAKpF,UAAtB,MACM2C,KAASmkJ,EAAM9mJ,kCAAkCoF,EAAKpF,aAK5D,OAJAsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM2oJ,EAAOh6H,UAAWpqB,aAChCc,EAAK+rD,UACL/rD,EAAK+rD,SAAS,CAAC7sD,MAAKoE,QAAQ,KAKpC,MAAM8W,EAAQpa,EAAKoa,OAAS,EACtB8xL,EAAa5oD,EAAOh6H,UACpBnwB,EAAQihB,EAAQzY,EAAKoT,WAAajX,EAAKquM,mBACvCh3L,EAAa0N,EAAApmB,QAAGgY,kBAAkBtb,GAClC+pJ,EAASrgI,EAAApmB,QAAG4Y,eAAeF,GAEjC,GAAI0N,EAAApmB,QAAGyY,cAAcmuI,EAAOluI,IACxB,GAAImuI,EAAOhhJ,WAAW8pM,WAAWzqM,EAAMyY,GAAQ,CAC3C,MAAM+1J,EAAQ,IAAIp4I,EAAKyH,SAAS3c,EAAApmB,QAAG8O,gBAC7B6kK,EAAgBvtJ,EAAApmB,QAAG+Y,aAAa6tI,EAAOH,GAC7CitB,EAAM1uK,SAAS2uK,GACf9sB,EAAOhhJ,WAAWumB,QAAQsnJ,GAG1B,MAAMjzE,EAAYomD,EAAOh6H,UAAU/T,WAC7B82L,EAAanvG,EAAUA,EAAU9gG,OAAS,GAChDiwM,EAAWlxL,IAAI,IAAI6J,EAAUwyD,QAE7B,MAAM7sD,EAAW0hL,EAAW9vM,UAG5B,GAFAsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMuxM,EAAYhtM,IAAKokJ,EAAO/mJ,UACtC,SAAWouB,EAAW,QAAUu4H,EAAS,YACzCljJ,EAAK+rD,SAAU,CACf,MAAM7sD,KAASyC,EAAKpF,sBACpByD,EAAK+rD,SAAS,CAAC7sD,MAAKoE,QAAQ,IAEhCo4L,EAAap4C,EAAQ,UAAW,QAGnC,CACD,MAAM7qJ,EAAO4qJ,EAAM9mJ,UAInB,GAHAsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM0oJ,EAAM/5H,UACpBpqB,IAAK,SAAWzG,EAChB,yCACAuH,EAAK+rD,SAAU,CACf,MAAM7sD,iBAAqByC,EAAKpF,aAChCyD,EAAK+rD,SAAS,CAAC7sD,MAAKoE,QAAQ,MAKjC4f,iBAAiBvhB,EAAM0hJ,GAC1B,OAAI1hJ,EAAKpF,YAAcsmB,EAAApmB,QAAG8O,6VC7JlC,MAAAsX,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAGAE,EAAAs0M,aAAA,cAAkCxvE,EAAA1tG,WAC9BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIe,OAAQsS,EAAWC,GAG7BlN,aAAazC,GAChB,MAAMxF,EAAQwF,EAAIwvF,QAAQ,aACpBs8F,EAAY9rL,EAAI1nB,IAAI,UACpB4B,EAAO8lB,EAAI6I,UAEjBrO,EAAM/V,QAAQ+b,IACV,MAAMurL,EAAYvrL,EAAKwrL,WAClBF,EAAU/vH,SAASgwH,KACpBD,EAAU9vH,SAAS+vH,GACnB3pL,EAAApmB,QAAG0lB,YAAY,CAACxnB,OACZuE,OAAQuhB,EAAIlkB,4BAA4BiwM,OAEhD,MAAMv2I,EAASh1C,EAAKy7D,YAEpB6vH,EAAU3vH,UAAU4vH,EAAWv2I,GAE/B,MAAMy2I,EAAaH,EAAU7vH,UAAU8vH,GACjCt1L,EAAYq1L,EAAUhoM,SAASioM,GAGrC,GAAIE,GAAe,GAAKx1L,EAAY,CAChC,MAAMze,EAAOgoB,EAAIlkB,UACjBgwM,EAAU36J,SAAS46J,EAAWt1L,EAAY,GAC1Cq1L,EAAU5vH,YAAY6vH,GACtB3pL,EAAApmB,QAAG0lB,YAAY,CAACxnB,OACZuE,OAAQzG,sBAAyB+zM,MAErC,MAAMG,EAAS,IAAI3nL,EAAU+sD,UAAU,GAAK76D,GAC5CuJ,EAAItF,IAAIwxL,GACR9pL,EAAApmB,QAAG0lB,YAAY,CAACxnB,OACZuE,OAAQzG,iCAAoC+zM,MAGpD/rL,EAAI8T,OAAOtT,0KC3CvB,MAAA4B,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GAEAotF,EAAAptF,EAAA,KAEM4jM,aAACA,GAAgB5+D,EAAA1tG,WAKvBp3B,EAAA40M,gBAAA,cAAqC9vE,EAAA1tG,WAIjClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIgB,WAAYqS,EAAWC,GACpCv1B,KAAKy1B,cAAe,EAGjBpN,aAAazC,GAChB,MAAMhoB,EAAOgoB,EAAIlkB,UACX5B,EAAO8lB,EAAI6I,UAIjB,GAAI7I,EAAI1c,IAAI,eAAiB0c,EAAI1c,IAAI,aAAc,CAC/C,MAAM8oM,EAAYpsL,EAAI1nB,IAAI,aACpBq3J,EAAS3vI,EAAI1nB,IAAI,cACjB0lC,EAAQouK,EAAUzxH,WACxB,GAAI38C,EAAM63E,mBAAqB85C,EAAO/5C,QAAS,CAC3C,MAAMy2F,EAAWl0M,OAAOutC,OAAOtrC,KAAKw1B,UAAUrrB,OAAOya,GACjDA,EAAE1b,IAAI,eAGJ/D,EAAO6sM,EAAUvxH,UAGvB,GAFA80E,EAAOz1E,OAAOl8C,EAAM63E,mBAEI,IAApBw2F,EAAS1wM,OACTqiC,EAAMg1G,KAAKzzI,GACX07L,EAAaj7K,EAAK,eAAgB,QAEjC,GAAI5lB,KAAKkyM,iBAAiBtuK,EAAOz+B,EAAM8sM,GAAW,CAEnD,IAAI5tM,WADUu/B,EAAMliC,2CAEpB2C,OAAWrE,KAAKmyM,eAChBnqL,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,aAIlBu/B,EAAMg1G,KAAKzzI,GACX07L,EAAaj7K,EAAK,eAAgB,OAGrC,CACD,MAAMvhB,KAASzG,sCACfoqB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,QAEtBuhB,EAAI8T,OAAO,cAKZrR,iBAAiBub,EAAOz+B,EAAM8sM,GACjC,IAAIG,GAAY,EAChB,MAAMC,EAAOltM,EAAKqW,IAAIG,OAChB22L,EAAOntM,EAAKqW,IAAIQ,OAsBtB,OArBAhc,KAAKmyM,aAAe,GACpBF,EAAS5nM,QAAQub,IACb,GAAIA,EAAIlc,WAAWoN,UAAY3R,EAAKqW,IAAI9R,WAAWoN,QAAS,CACxD,MAAMy7L,EAAS3sL,EAAIjK,OACb62L,EAAS5sL,EAAI5J,OACb5C,EAAOixE,EAAAzX,KAAKqjB,aAAao8G,EAAMC,EAAMC,EAAQC,GACnD,GAAI5sL,EAAI9O,UAAY3R,EAAKqW,IAAI1E,SACrBsC,GAAQwM,EAAI1nB,IAAI,cAAciiF,UAAW,CAKzC,GAJAv6D,EAAI8T,OAAO,cACX04K,GAAY,EACZpyM,KAAKmyM,aAAevsL,EAAIlkB,UAEpBkkB,EAAI1c,IAAI,cAAe,CACvB,MAAM0uI,EAAYh0G,EAAM63E,kBACxB71F,EAAI1nB,IAAI,cAAc2hF,MAAM+3D,GAEhC,WAKTw6D,gVCvFf,MAAApqL,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IACA+yC,EAAA/yC,EAAA,GACAm3E,EAAAn3E,EAAA,IAEM4jM,aAACA,GAAgB5+D,EAAA1tG,WAEjBk+K,EAAe,CAAC,WAAY,YAAa,eAAgB,YAC3D,aA+UJ,SAASC,EAAkB9sL,EAAKzgB,EAAMmmB,GAClC,IAAIprB,EAAY8nB,EAAApmB,QAAGkU,gBAAgB3Q,EAAK85B,YACnC/+B,IAAYA,EAAY8nB,EAAApmB,QAAGkU,gBAAgBkS,EAAApmB,QAAGoS,IAAIS,QAEvD,MAAMk+L,EAAW,CACb7yM,MAAM,EACNsrB,MAAO,CAACE,GACRprB,YACA6X,MAAO6N,EAAIlc,YAETi1L,EAAW,IAAIx0K,EAAUs6D,UAAUkuH,GACzC/sL,EAAItF,IAAIq+K,GArVZxhM,EAAAy1M,kBAAA,cAAuC3wE,EAAA1tG,WAGnClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIiB,aAAcoS,EAAWC,GACtCv1B,KAAKy1B,cAAe,EAIpBz1B,KAAKkzK,QAAU,CACXtyF,SAAU5gF,KAAK6yM,gBAAgBh0M,KAAKmB,MACpC8gF,UAAW9gF,KAAK8yM,iBAAiBj0M,KAAKmB,MACtC6gF,aAAc7gF,KAAK+yM,oBAAoBl0M,KAAKmB,MAC5C+gF,UAAW/gF,KAAKgzM,iBAAiBn0M,KAAKmB,MACtCghF,UAAWhhF,KAAKizM,iBAAiBp0M,KAAKmB,OAOvCqoB,aAAazC,GAChB6sL,EAAapoM,QAAQuoK,IACbhtJ,EAAI1c,IAAI0pK,IACYhtJ,EAAIwvF,QAAQw9D,GACpBvoK,QAAQ8oK,IAEhBnzK,KAAKkzK,QAAQN,GAAShtJ,EAAKutJ,GAC3BvtJ,EAAI8T,OAAOy5I,OAMpB9qJ,gBAAgBzC,EAAK24K,GACxB,MAAMp5L,EAAOo5L,EAAI99G,UACXprE,EAAMuQ,EAAIlc,WAAW8Z,SACrBogB,EAAQz+B,EAAKy+B,MACbhmC,EAAOgmC,EAAMliC,UAEnB,IAAKuU,EAAGC,GAAK/Q,EAAKwvD,KAClB,MAAO9gD,EAAIC,GAAM3O,EAAKmO,IACtB,IAAI+qL,EAAYz6J,EAAMuzG,WAClB+7D,EAAe,EAEnB,KAAO7U,EAAY,GAGf,GAFApoL,GAAKpC,EACLqC,GAAKpC,EACDuB,EAAIwY,MAAM5X,EAAGC,GAAI,CACjB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GAK5B,GAJI0tB,EAAMuvK,gBACNvvK,EAAMuvK,eAAerzM,GAGrBA,EAAKsK,YAAa,CAElB,MAAMH,EAAQnK,EAAKwK,YAAY,GACzBqlB,EAAY1lB,EAAMvI,UAClB0xM,EAAYnpM,EAAMf,IAAI,aACxBkqM,GAAapzM,KAAKqzM,aAAappM,EAAOo0L,IACtCr+L,KAAKstM,kBAAkBrjM,EAAO9E,GAE1BiuM,GACA/U,EAAY,EACZr2K,EAAApmB,QAAGslB,QAAQ,CAACpnB,OACRuE,OAAQzG,mBAAsB+xB,OAE7BiU,EAAM01G,YACX+kD,EAAY,GAMhBr2K,EAAApmB,QAAGslB,QAAQ,CAACpnB,OACRuE,OAAQzG,UAAa+xB,OAGzB3H,EAAApmB,QAAGslB,QAAQ,CAACpnB,OACRuE,OAAQzG,YAAe+xB,MAG9B7vB,EAAKu+K,oBAIJ60B,EAHF7U,EAAY,IAKdA,OAGFA,EAAY,EAGpB,MAAMsU,EAAW,CACbr/L,IAAKnO,EAAKmO,IACVirL,KAAK,EACL5pI,KAAMxvD,EAAKwvD,KACXlrD,MAAOypM,EACPhzM,UAAW8nB,EAAApmB,QAAGkU,gBAAgB3Q,EAAK85B,YACnClnB,MAAO6N,EAAIlc,YAETi1L,EAAW,IAAIx0K,EAAUs6D,UAAUkuH,GACzC/sL,EAAItF,IAAIq+K,GAGLt2K,aAAape,EAAOo0L,GACvB,IAAKp0L,EAAMf,IAAI,UACX,OAAO,EAGX,IAAIoqM,EAAUrpM,EAAM/L,IAAI,SAAS+K,aAC7BgB,EAAMf,IAAI,YACVoqM,GAAWrpM,EAAM/L,IAAI,UAAUwL,SAAS,WAE5C4pM,GAAWjV,GACG,IAAIiV,EAAU,GAE5B,MAAM7S,GAAa,IAAM6S,GAAW,IACpC,OAAItrL,EAAApmB,QAAG8jB,UAAU+6K,IACTx2L,EAAMf,IAAI,kBACH8e,EAAApmB,QAAG8jB,UAAU,KAKxBm7K,EAAa52L,EAAO,QAAS,IACtB,GAIRoe,iBAAiBzC,EAAKkzH,GACzB,MAAM3zI,EAAO2zI,EAAUr4D,UACjBprE,EAAMuQ,EAAIlc,WAAW8Z,SAErB5lB,EADQuH,EAAKy+B,MACAliC,UAEbmS,EAAK1O,EAAKmO,IAAI,GACdQ,EAAK3O,EAAKmO,IAAI,GACd2C,EAAI9Q,EAAKwvD,KAAK,GAAK9gD,EACnBqC,EAAI/Q,EAAKwvD,KAAK,GAAK7gD,EAEzB,GAAIuB,EAAIwY,MAAM5X,EAAGC,GAAI,CACjB,MAAM62L,EAAa13L,EAAIoZ,QAAQxY,EAAGC,GAOlC,GALI/Q,EAAKouM,aACLpuM,EAAKouM,YAAYxG,GAIjB5nM,EAAK+rD,SACL/rD,EAAK+rD,SAAS67I,QAEb,GAAIA,EAAW3iM,YAAa,CAC7B,MAAMH,EAAQ8iM,EAAWziM,YAAY,GAGrC,GAAInF,EAAK0jF,WAAY,CACjB,MAAM0gE,EAAUpkJ,EAAKwuD,IACfq7F,EAAU7pJ,EAAKjH,IACrB,GAAI+L,EAAMf,IAAI/D,EAAK0jF,YAAa,CAC5B,MAAMziE,EAAOnc,EAAM/L,IAAIiH,EAAK0jF,YACtBl5D,EAAY1lB,EAAMvI,UACpBstJ,EACA5oI,EAAKmjI,GAASnjI,EAAK4oI,KAAa7pJ,EAAK7G,OAGrC8nB,EAAKmjI,GAASpkJ,EAAK7G,OAEvB0pB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EACd1oM,aAAczG,gBAAmB+xB,YAGxC,GAAIxqB,EAAK09B,QAAS,CACnB,MAAMzc,EAAOjhB,EAAK09B,QAAQzc,KAE1B,GAAIA,EACA,GAAIjhB,EAAK09B,QAAQb,SAAU,CACvB,MAAM2iD,EAAMx/E,EAAK09B,QAAQb,SACzB,GAAI/3B,EAAMf,IAAI,cACVe,EAAM/L,IAAI,cAAcg3B,UAAU9O,EAAMu+D,OAEvC,CACD,MAAMC,EAAU,IAAIz6D,EAAU8K,WAC9B2vD,EAAQ1vD,UAAU9O,EAAMu+D,GACxB16E,EAAMqW,IAAIskE,GAEd36E,EAAMqW,IAAI8F,QAGVnc,EAAMqW,IAAI8F,OAGb,CACD,MAAMxH,EAAOC,KAAKC,UAAU3Z,GAC5B6iB,EAAApmB,QAAGK,IAAI,oBAAqB,+DACoB2c,KAGpD,MAAMo9E,EAAW51E,EAAK5lB,UAChB6D,KAAS4F,EAAMvI,2BAA2Bs6F,IAChDh0E,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMmK,EAAMwkB,UAAWpqB,aAE9Bc,EAAKg0I,WACVh0I,EAAKg0I,WAAW9uI,QAAQm7B,IAChBv7B,EAAMf,IAAIs8B,IACVv7B,EAAMorG,UAAU7vE,MAMxBxlC,KAAKstM,kBAAkBrjM,EAAO9E,GAI9B6iB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EACd1oM,OAAQzG,UAAaqM,EAAMvI,eAInCyD,EAAKy1K,cACLz1K,EAAKy1K,aAAamyB,GAGtB2F,EAAkB9sL,EAAKzgB,EAAM,CAAC8Q,EAAGC,KAIlCmS,oBAAoBzC,EAAKkzH,GAC5B,MAAM3zI,EAAO2zI,EAAUr4D,UACjB78C,EAAQz+B,EAAKy+B,MACb3U,EAAS+gB,EAAAvS,YAAYmO,YAErBwuG,EAAWx2G,EAAMy2G,cAClBD,GACDpyH,EAAApmB,QAAGK,IAAI,qBAAsB,qDACK2hC,EAAMliC,aAG5C,MAAM8xM,EAAavkL,EAAO+b,WAAWovG,GAC/BlI,EAAQ,IAAI/nH,EAAU0a,QAAQ1/B,EAAKqW,KACzC02H,EAAMp4D,YAAY30E,EAAK0vD,GAAG,GAAI1vD,EAAK0vD,GAAG,IACtCq9E,EAAMwqC,aAAc,EAChBv3K,EAAKjG,eAAe,iBACpBgzI,EAAMwqC,YAAcv3K,EAAKu3K,aAE7BxqC,EAAMC,UAAUhtI,EAAK84B,QACrBi0G,EAAMt0H,UAAU,KAChBs0H,EAAME,SAASxuG,EAAMuzG,YAGjBhyI,EAAKk9B,QAAUy2G,EAAUz2G,MACzB6vG,EAAM7vG,MAAQl9B,EAAKk9B,MAEdy2G,EAAUz2G,QAAUl9B,EAAKk9B,MAC9B6vG,EAAM7vG,MAAQy2G,EAAUz2G,MAEnBy2G,EAAUz2G,OAASl9B,EAAKk9B,OAC7Bra,EAAApmB,QAAGK,IAAI,oBAAqB,sBACxB,iDAGRuxM,EAAWlzL,IAAI4xH,GAIZ7pH,iBAAiBzC,EAAKkzH,GAEzB,MAAM3zI,EAAO2zI,EAAUr4D,UACjB78C,EAAQz+B,EAAKy+B,MACbn6B,EAAQm6B,EAAMuzG,YACb3sH,EAAIC,GAAM,CAACtlB,EAAKqW,IAAIG,OAAQxW,EAAKqW,IAAIQ,QACtC3G,EAAMlQ,EAAKqW,IAAI9R,WAAW8Z,SAClB4wD,EAAA7pD,SAAS05F,aAAaz5F,EAAIC,EAAIhhB,GAEtCY,QAAQihB,IACV,GAAIjW,EAAIwY,MAAMvC,EAAG,GAAIA,EAAG,IAAK,CACzB,MAAMxrB,EAAOuV,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,IACnC,GAAIxrB,EAAKsK,YAAa,CAClB,MAAMzG,EAAS7D,EAAKwK,YACpB,IAAK,IAAIjN,EAAI,EAAGA,EAAIsG,EAAOpC,OAAQlE,IAAK,CACpC2C,KAAKstM,kBAAkB3pM,EAAOtG,GAAI8H,GAC9By+B,EAAMuvK,gBACNvvK,EAAMuvK,eAAerzM,GAEzB,MAAMlC,EAAO+F,EAAOtG,GAAGqE,UACvBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAM6D,EAAOtG,GAAGoxB,UACxBpqB,OAAQzG,eAAkBgmC,EAAMliC,mBAQpD,MAAMixM,EAAW,CACblpM,QAAOwpB,GAAIzI,EAAI0I,GAAIzI,EACnBvqB,UAAW8nB,EAAApmB,QAAGkU,gBAAgB3Q,EAAK85B,YACnClnB,MAAO6N,EAAIlc,YAETi1L,EAAW,IAAIx0K,EAAUs6D,UAAUkuH,GACzC/sL,EAAItF,IAAIq+K,GAILt2K,iBAAiBzC,EAAKkzH,GACzB,MAAM3zI,EAAO2zI,EAAUr4D,UACvB,GAA6B,mBAAlBt7E,EAAK+rD,SACZ/rD,EAAK+rD,eAEJ,CACD,IAAI7sD,EAAM,qCACVA,GAAO,aAAewa,KAAKC,UAAU3Z,GACrC6iB,EAAApmB,QAAGK,IAAI,oBAAqB,mBAAoBoC,GAEpDquM,EAAkB9sL,EAAKzgB,EAAMygB,EAAIhK,SAG9ByM,kBAAkBpe,EAAO9E,GAC5B,MAAMiD,EAAM,IAAI+hB,EAAUssD,OAC1BruE,EAAIitB,UAAUlwB,EAAKqW,KACnBpT,EAAIs0F,cAAcv3F,EAAK85B,YACvB72B,EAAI+pI,UAAUhtI,EAAK84B,QACnB71B,EAAIqrM,eAAezrL,EAAApmB,QAAGoS,IAAIS,OAC1BrM,EAAIsrM,UAAUvuM,EAAKy+B,OACnB35B,EAAMqW,IAAIlY,iVCpVlB,MAAA4f,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAKAE,EAAAw2M,iBAAA,cAAsC1xE,EAAA1tG,WAClClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIkB,OAAQmS,EAAWC,GAChCv1B,KAAKy1B,cAAe,EAGjBpN,aAAazC,GACZA,EAAI1c,IAAI,eACRlJ,KAAK4zM,cAAchuL,GAKpByC,cAAczC,GACjB,MAAMk6E,EAAWl6E,EAAI1nB,IAAI,cACnBkjF,EAAS0e,EAAS+zG,YAClBhqK,EAAQu3C,EAAO1/E,UACfqrM,EAAajtG,EAAS5W,YAE5B,GAAKtjE,EAAIo6E,aAmBJ,GAAI+sG,EAAWzqG,WAChB,GAAIlhB,EAAOl4E,IAAI,qBAAsB,CACjC,MAAMo9G,EAAUymF,EAAWryL,WAAW,GAChC8oL,EAAQl9E,EAAQ5kH,UACtB,GAAK4kH,EAAQp9G,IAAI,YAUZ,CACD,MAAM7E,KAASm/L,mCACfx7K,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EAAY1oM,YAZJ,CAC1B,MAAMyvM,EAAc,IAAI3pL,EAAUk3D,SAC5B0yH,EAAW3yH,EAAO35E,WAAWusM,iBAAiBpuL,GACpDkuL,EAAYxyH,OAAOyyH,GACnBztF,EAAQhmG,IAAIwzL,GAEZ,MACMzvM,KADUuhB,EAAIlkB,0BACmB8hM,QAAY35J,IACnD7hB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EAAY1oM,aAOjC,CACD,MAAMA,KAASwlC,+BACf7hB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EAAY1oM,aAxChB,CAClB,MAAM4vM,EAAUlH,EAAW9sL,YAAY,UAGvC,GAAIg0L,EAAQ1yM,OAAS,EAAG,CACpB,MAAMyC,EAASiwM,EAAQ,GACvBjwM,EAAO9F,IAAI,UAAUi3E,UACPnxE,EAAO0F,WACfokB,YAAY9pB,GAClB4hB,EAAIq6E,UAAUj8F,GAEd,MAAMK,KAASL,EAAOtC,iCAAiCmoC,IACvD7hB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EAAY1oM,YAE7B,CACD,MAAMA,EAAM,yCACZ2jB,EAAApmB,QAAGslB,QAAQ,CAACpnB,KAAMitM,EAAY1oM,SA4BtCuhB,EAAI8T,OAAO,4VCtEnB,MAAA1R,EAAAC,EAAAhrB,EAAA,IACAglI,EAAAhlI,EAAA,GACAo3B,EAAAp3B,EAAA,GAEAktB,EAAAiK,EAAAn3B,EAAA,IAEM8pB,EAAOsN,EAAArN,UAAUC,UAOvB9pB,EAAA+2M,kBAAA,cAAuCjyE,EAAA1tG,WAKnClM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAImB,aAAckS,EAAWC,GACtCv1B,KAAKy1B,cAAe,EACpBz1B,KAAKkzK,QAAU,GACflzK,KAAKm0M,gBAAkB,GAEvBn0M,KAAKkzK,QAAQvxI,OAAS3hC,KAAKo0M,aAAav1M,KAAKmB,MAC7CA,KAAKkzK,QAAQltF,OAAShmF,KAAKq0M,aAAax1M,KAAKmB,MAC7CA,KAAKkzK,QAAQl3F,KAAOh8E,KAAKs0M,WAAWz1M,KAAKmB,MACzCA,KAAKkzK,QAAQn3F,SAAW/7E,KAAKu0M,eAAe11M,KAAKmB,MACjDA,KAAKkzK,QAAQr8F,aAAe72E,KAAKw0M,mBAAmB31M,KAAKmB,MACzDA,KAAKkzK,QAAQhvF,YAAclkF,KAAKy0M,kBAAkB51M,KAAKmB,MAKpDqoB,SACH,IAAK,MAAMzD,KAAK5kB,KAAKw1B,SAAU,CAC3B,IAAK5Q,EAAI,SACT,MAAMgB,EAAM5lB,KAAKw1B,SAAS5Q,GAG1B,IAAK,IAAIvnB,EAAI,EAAGA,EAAI2C,KAAKs1B,UAAU/zB,OAAQlE,IACb,eAAtB2C,KAAKs1B,UAAUj4B,IACXuoB,EAAI1c,IAAIlJ,KAAKs1B,UAAUj4B,KAEvB2C,KAAKkzK,QAAQlzK,KAAKs1B,UAAUj4B,IAAIuoB,GAKxCA,EAAI1c,IAAI,eAAgBlJ,KAAK00M,kBAAkB9uL,GAKvD,IAAK,IAAIpb,EAAI,EAAGA,EAAIxK,KAAKm0M,gBAAgB5yM,OAAQiJ,IAAK,CAClD,MAAM6b,EAASrmB,KAAKm0M,gBAAgB3pM,GAAG,GACxBxK,KAAKm0M,gBAAgB3pM,GAAG,GAChCkvB,OAAOrT,GAElBrmB,KAAKm0M,gBAAkB,GAIpB9rL,kBAAkBzC,GACFA,EAAIwvF,QAAQ,cACpB/qG,QAAQsqM,IACfA,EAAK1uH,eAGA0uH,EAAKtuH,cACNrmF,KAAKm0M,gBAAgBvuM,KAAK,CAAC+uM,EAAK79L,QAAS8O,MAO9CyC,aAAazC,GACGA,EAAIwvF,QAAQ,UACpB/qG,QAAQo3B,IAEf,GAAI7b,EAAI1nB,IAAI,UAAUm4E,UAElB,GADAr2E,KAAKm0M,gBAAgBvuM,KAAK,CAAC67B,EAAO3qB,QAAS8O,IACvCA,EAAI1c,IAAI,cAAe,CACvB,MAAM0rM,EAAKhvL,EAAI1nB,IAAI,cACf02M,EAAGtuH,UAAU7kD,IACbmzK,EAAGzuH,aAAa1kD,SAIvB,GAAIzZ,EAAApmB,QAAG8jB,UAAU+b,EAAOq6C,WAAY,CACrC,MAAM+4H,EAAYpzK,EAAO16B,aACnBw4L,EAAU,IAAIp1K,EAAUssD,OAAOo+H,EACjC7sL,EAAApmB,QAAGoS,IAAIa,QACX0qL,EAAQlqK,UAAUoM,EAAOtM,aACzBvP,EAAItF,IAAIi/K,MAMbl3K,mBAAmBzC,GACPA,EAAIwvF,QAAQ,gBACpB/qG,QAAQyqM,IAEX,GAAIlvL,EAAI1nB,IAAI,UAAUm4E,UAElB,GADAr2E,KAAKm0M,gBAAgBvuM,KAAK,CAACkvM,EAAOh+L,QAAS8O,IACvCA,EAAI1c,IAAI,cAAe,CACvB,MAAM0rM,EAAKhvL,EAAI1nB,IAAI,cACf02M,EAAGtuH,UAAUwuH,IACbF,EAAGzuH,aAAa2uH,SAIvB,GAAI9sL,EAAApmB,QAAG8jB,UAAUovL,EAAOh5H,WAAY,CACrC,MAAMi5H,EAAYD,EAAOpvE,YACnB65D,EAAU,IAAIp1K,EAAUssD,OAAOs+H,EACjCD,EAAOn4G,iBACX4iG,EAAQkU,eAAeqB,EAAOhN,kBAC9BvI,EAAQlqK,UAAUy/K,EAAO3/K,aACzBvP,EAAItF,IAAIi/K,MAObl3K,aAAazC,GAChB,MAAMgwH,EAAahwH,EAAI1nB,IAAI,UAE3B,GADA03I,EAAW3vD,eACP2vD,EAAWlpB,eAAiB,EAAG,CAC/B,GAAI1kG,EAAApmB,QAAGoe,QAAQ4F,GAAM,CACjB,MAAM9lB,EAAO8lB,EAAI6I,UAEjB,GADc7I,EAAIlc,WACRokB,YAAYlI,GAAM,CACxBmB,EAAKe,UAAUE,EAAApmB,QAAGqJ,iBAAkB,CAAChB,MAAO2b,IAC5C,MAAMvhB,KAASuhB,EAAIlkB,wBACnBsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,YAEjB,CACD,MAAMua,EAAOC,KAAKC,UAAU8G,GAC5BoC,EAAApmB,QAAGK,IAAI,qBAAsB,qDACa2c,WAI9CoJ,EAAApmB,QAAGK,IAAI,qBAAsB,eACzB,0CAER2jB,EAAI8T,OAAOk8G,IAIZvtH,WAAWzC,GACd,GAAIA,EAAI1c,IAAI,YAAa,CACrB,MAAMpJ,EAAO8lB,EAAI6I,UACjB7I,EAAIyvF,UAAU,YACd,MAAMhxG,qBAAyBuhB,EAAIlkB,4BACnCsmB,EAAApmB,QAAGslB,QAAQ,CAACpnB,OAAMuE,QAEtBuhB,EAAIyvF,UAAU,QAIXhtF,eAAezC,GAClB,GAAIA,EAAI1c,IAAI,YAAa,CACrB,MAAM8rM,EAAWpvL,EAAI1nB,IAAI,YAEzB,GADA82M,EAAS34H,OACL24H,EAASz4H,WAAY,CACrB,MAAMgjH,EAAU,IAAIp1K,EAAUssD,OAAO,EAAGzuD,EAAApmB,QAAGoS,IAAIG,MAC/CyR,EAAItF,IAAIi/K,KAKbl3K,kBAAkBzC,GACAA,EAAIwvF,QAAQ,eACpB/qG,QAAQ8oK,IACjB,IAAI8hC,GAAe,EACnB,GAAI9hC,EAAQh2J,QAAU,EAAG,CACrB,MAAMinE,EAAS+uF,EAAQ+hC,YACvB,GAAe,IAAX9wH,EAAc,CACd,MAAM41B,EAASp0F,EAAI1nB,IAAI,UACnB87G,IACAA,EAAO9jC,MAAMi9F,EAAQh2J,SACjB68F,EAAO78F,QAAU68F,EAAO/8F,aACxBg4L,GAAe,IAGvB9hC,EAAQgiC,UAAUhiC,EAAQiiC,qBAG1BjiC,EAAQgiC,UAAU/wH,EAAS,GAGnC,GAAI+uF,EAAQ33D,QAAU,EAAG,CACrB,MAAMr3B,EAASgvF,EAAQkiC,YACvB,GAAe,IAAXlxH,EAAc,CACd,MAAM4pC,EAAQnoG,EAAI1nB,IAAI,cAClB6vH,IACAA,EAAMluC,MAAMszF,EAAQ33D,SAChBuS,EAAMvS,QAAUuS,EAAMtD,aACtBwqF,GAAe,IAGvB9hC,EAAQmiC,UAAUniC,EAAQoiC,qBAG1BpiC,EAAQmiC,UAAUnxH,EAAS,GAG/B8wH,GACArvL,EAAI8T,OAAOy5I,KAOhB9qJ,iBAAiBzC,GACpB,IAAK,IAAIvoB,EAAI,EAAGA,EAAI2C,KAAKs1B,UAAU/zB,OAAQlE,IACnCuoB,EAAI1c,IAAIlJ,KAAKs1B,UAAUj4B,KACvB2qB,EAAApmB,QAAGuC,MAAMnE,KAAKs1B,UAAUj4B,GAAI,sLC9N5C,MAAA2qB,EAAAC,EAAAhrB,EAAA,IAEAglI,EAAAhlI,EAAA,GAEAi7F,EAAAj7F,EAAA,IAGMwrB,EAFNxrB,EAAA,GAEYqgB,OAAOC,SAInBpgB,EAAAq4M,cAAA,cAAmCvzE,EAAA1tG,WAI/BlM,YAAYiN,EAAWC,GACnB2B,MAAMlP,EAAApmB,QAAGqgB,IAAIoB,QAASiS,EAAWC,GAEjCv1B,KAAKy1M,UAAY,CACbC,UAAW11M,KAAK21M,gBAAkB31M,KAAK21M,gBAAgB92M,KAAKmB,MAC5D41M,KAAM51M,KAAK61M,eAAiB71M,KAAK61M,eAAeh3M,KAAKmB,OAItDqoB,aAAazC,GAChB,GAAIA,EAAI1c,IAAI,iBAAkB,CAC1B,MAAM4sM,EAAMlwL,EAAI1nB,IAAI,iBACd00K,EAAUkjC,EAAIziC,gBAChBrzK,KAAKy1M,UAAU7iC,IACf5yK,KAAKy1M,UAAU7iC,GAAShtJ,EAAKkwL,GAEjClwL,EAAIyvF,UAAU,kBAIZhtF,gBAAgBzC,EAAKQ,GAC3B,MACM/Q,EADQuQ,EAAIlc,WACA8Z,SAClB00E,EAAA/M,aAAa4I,cAAc1+E,EAAK,IAI1BgT,eAAezC,EAAKQ,GAEdR,EAAIlc,WAAW8Z,SACLozB,UAAUzsC,OAAOzM,GAAKA,EAAE6C,cAAc2I,IAAI,UACtDmB,QAAQvK,IAEd,GADiB2oB,EAAI9C,aAJX,GAKY,CAClB,MAAMrlB,EAAWR,EAAKS,cAAcC,UAC9B2xH,EAAUj6B,EAAA/M,aAAa8J,YAAY30F,GACzCR,EAAK4uB,YAAYyjG,uFCnDjC,MAAA4jF,EAAA94M,EAAA,KACA+4M,EAAA/4M,EAAA,IAIM8tD,EAAwBkrJ,KAE9B,SAASC,EAAS7xM,GACd,MAAM6iB,EAAuB,CACzBnlB,KAAI,EACJm0M,SAAU7xM,GAEd0mD,EAAIorJ,YAAYjvL,GAGpB6jC,EAAIqrJ,iBAAiB,UAAW,SAASxxL,GACrC,IACI,MAAMyxL,EAAWzxL,EAAED,KAAK,GAClB2xL,EAAc,IAAIP,EAAAQ,YACxBD,EAAY5iG,YAAY,WAAYwiG,GACpC,MACMt3L,EADO03L,EAAYE,cAAcH,GACrB5vL,SAClBuvL,EAAAl0G,eAAeljF,GAEf,MAAMva,EAAmB,CACrBtC,KAAI,EACJ00M,OAAO,EACP9xL,KAAM9F,KAAKC,UAAUF,IAEzBmsC,EAAIorJ,YAAY9xM,GAEpB,MAAOugB,GACH,MAAM08E,EAAwB,CAC1Bv/F,KAAI,EACJ0C,MAAOmgB,EAAEmhB,SAEbglB,EAAIorJ,YAAY70G,kVCpCxB,MAAAt5E,EAAAC,EAAAhrB,EAAA,IAEAktB,EAAAiK,EAAAn3B,EAAA,IACA4qH,EAAAzzF,EAAAn3B,EAAA,KACAm7F,EAAAhkE,EAAAn3B,EAAA,KACA4lG,EAAAzuE,EAAAn3B,EAAA,KACA6xL,EAAA7xL,EAAA,IACA+/B,EAAA//B,EAAA,IACAy5M,EAAAz5M,EAAA,KACA05M,EAAA15M,EAAA,KACAs5B,EAAAt5B,EAAA,IACAo3B,EAAAp3B,EAAA,GACA05H,EAAA15H,EAAA,IACAmiH,EAAAniH,EAAA,IACA+xL,EAAA/xL,EAAA,IAEA25M,EAAA35M,EAAA,IACA45M,EAAA55M,EAAA,KACAm3E,EAAAn3E,EAAA,GACAstF,EAAAttF,EAAA,IACAorK,EAAAprK,EAAA,IACA+yC,EAAA/yC,EAAA,GACAgyL,EAAAhyL,EAAA,IACAogB,EAAApgB,EAAA,GACAwjK,EAAAxjK,EAAA,IAEA65M,EAAA75M,EAAA,IACAk7F,EAAAl7F,EAAA,IAIM8pB,EAAOsN,EAAArN,UAAUC,UACjBwB,EAAMpL,EAAAC,OAAOC,SAGbw5L,EAAkB,CACpBC,KAAM,CAAC3vM,IAAK,EAAGuhH,IAAK,EAAG5qG,KAAM,EAAG4gB,GAAI,IACpC04F,OAAQ,CAACjwH,IAAK,EAAGuhH,IAAK,EAAG5qG,KAAM,EAAG4gB,GAAI,IACtCq4K,OAAQ,CAAC5vM,IAAK,EAAGuhH,IAAK,EAAG5qG,KAAM,EAAG4gB,GAAI,IACtCs4K,QAAS,CAAC7vM,IAAK,GAAIuhH,IAAK,GAAI5qG,KAAM,EAAG4gB,GAAI,KAMhCzhC,EAAAo5M,YAAc,WACvB5/E,EAAAtB,YAAY73H,KAAKwC,MACjBA,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,gBAC9Bz4F,KAAK+1H,QAAU/lF,EAAAvS,YAAYmO,YAC3B5rC,KAAKi4H,aAAe,GACpBj4H,KAAK6yF,UAAY,IAErB7qE,EAAApmB,QAAG0D,QAAQnI,EAAAo5M,YAAa5/E,EAAAtB,aAGxBl4H,EAAAo5M,YAAYt3M,UAAUk4M,YAAc,SAASv4L,GACzC,MAAMkgG,EAAW,IAAI83F,EAAAvnB,SACfvuF,EAAO,IAAI+1G,EAAAO,SACjB,OAAOt4F,EAASsxE,WAAWtvF,EAAMliF,IAKrCzhB,EAAAo5M,YAAYt3M,UAAUu3M,cAAgB,SAAS3pL,GAC3C7sB,KAAKw4F,OAAOoB,WAAW,gBAAiB/sE,EACpC,CAAC,aAAc,cAAe,aAElC,MAAMi0E,EAAO,IAAI+1G,EAAAO,SACjB,GAAIpxL,OAAOC,UAAU4G,EAAKrE,MAAO,CAC7B,MAAMF,EAAM,IAAIjL,EAAAC,OAAOuP,EAAKrE,MAC5Bs4E,EAAKw3B,OAAOhwG,GAEhB,MAAMvkB,EAAS/D,KAAKq3M,yBAAyBxqL,GAG7C,OAFA7sB,KAAKs3M,wBAAwBx2G,EAAM/8F,GAE3B8oB,EAAK0qL,UACT,IAAK,QACD,OAAOv3M,KAAKw3M,qBAAqB3qL,EAAMi0E,EAAM/8F,GACjD,IAAK,SACD,OAAO/D,KAAKy3M,kBAAkB5qL,EAAMi0E,EAAM/8F,GAC9C,IAAK,UACD,OAAO/D,KAAK03M,uBAAuB7qL,EAAMi0E,EAAM/8F,GACnD,IAAK,QACD,OAAO/D,KAAK23M,gBAAgB9qL,EAAMi0E,EAAM/8F,GAC5C,IAAK,YACD,OAAO/D,KAAK43M,oBAAoB/qL,EAAMi0E,EAAM/8F,GAChD,IAAK,SACD,OAAO/D,KAAK63M,sBAAsBhrL,EAAMi0E,EAAM/8F,GAClD,QACI,OAAO/D,KAAK83M,gBAAgBjrL,EAAMi0E,EAAM/8F,KAMpD5G,EAAAo5M,YAAYt3M,UAAU64M,gBAAkB,SAAS1zM,EAAK08F,EAAM/8F,GAexD,OAbIK,EAAIwoB,SACJxoB,EAAIwoB,OAAOviB,QAAQ0N,IACf,MAAMu/B,EAASv/B,EAAMksF,YAIrB,GAHAnD,EAAKk8B,SAASjlH,GAGVu/B,EAAOitD,WAAY,CACnB,MAAO7xE,EAAIC,GAAM2kB,EAAOitD,WACxBxsF,EAAMgW,SAAShqB,EAAQ2uB,EAAIC,MAGnCmuE,EAAKsxF,UAAUruL,IAEZ+8F,GAKX3jG,EAAAo5M,YAAYt3M,UAAUo4M,yBAA2B,SAASjzM,GACtD,IAAIL,EAASK,EAAI2zM,aACjB,GAAI/vL,EAAApmB,QAAG6D,cAAc,CAAC1B,IAAU,CAC5B/D,KAAKw4F,OAAOoB,WAAW,2BAA4Bx1F,EAC/C,CAAC,cAAe,aAAc,eAClC,MAAM6yE,EAAW7yE,EAAI4zM,YACfC,EAAQlB,EAAgB9/H,IAE9BlzE,EAAS/D,KAAKw1H,aAAapxH,EAAI8zM,WAAY,CACvC7wM,IAAK4wM,EAAM5wM,IAAKuhH,IAAKqvF,EAAMrvF,IAAK5qG,KAAMi6L,EAAMj6L,QAGzC6b,QAAQz1B,EAAI6gK,YACnBlhK,EAAOuc,IAAI,IAAI6J,EAAU4V,OAAOk4K,EAAMr5K,KACtC5+B,KAAKm4M,cAAc/zM,EAAKL,GACxBA,EAAOuc,IAAI,IAAI6J,EAAUq3D,QACzBz9E,EAAOuc,IAAI,IAAI6J,EAAUu7D,UACzB3hF,EAAOuc,IAAI,IAAI6J,EAAU8xD,UACzBl4E,EAAOuc,IAAI,IAAI6J,EAAUE,WAG7B,GAAKtmB,EAAOmF,IAAI,UAIX,CAED,MAAMkvM,EAASr0M,EAAO7F,IAAI,UAC1B6F,EAAO21B,OAAO,UACd31B,EAAOuc,IAAI83L,OARY,CACvB,MAAMA,EAAS,IAAIjuL,EAAUurD,OAAO,KACpC3xE,EAAOuc,IAAI83L,GAiBf,OAPApwL,EAAApmB,QAAGC,aAAammB,EAAApmB,QAAGiL,WAAY9I,EAAOrC,UAAW,qBAC1B,WAAnB0C,EAAI8zM,WACJlwL,EAAApmB,QAAGO,aAAa6lB,EAAApmB,QAAGiL,WAAY9I,EAAOrC,UAAW,KAEzB,WAAnB0C,EAAI8zM,YACTlwL,EAAApmB,QAAGO,aAAa6lB,EAAApmB,QAAGiL,WAAY9I,EAAOrC,UAAW,KAE9CqC,GAKX5G,EAAAo5M,YAAYt3M,UAAUq4M,wBAA0B,SAASx2G,EAAM/8F,GAE3D,MAAM+yL,EAAc,IAAIjvE,EAAKsE,WAAWpoH,EACpCikB,EAAApmB,QAAGwO,uBAAyB4X,EAAApmB,QAAGgJ,YAInC,GAHAk2F,EAAKi2F,SAASD,GAGV/yL,EAAOmF,IAAI,cAAe,CAC1B,MAAM8tL,EAAgB,IAAInvE,EAAKwE,aAAatoH,EACxCikB,EAAApmB,QAAGyO,uBAAyB2X,EAAApmB,QAAGgJ,YACnCk2F,EAAKi2F,SAASC,KAKtB75L,EAAAo5M,YAAYt3M,UAAUk5M,cAAgB,SAAS/zM,EAAKL,GAChD,GAAKK,EAAIi0M,YACT,GAAIvpB,EAAArxG,WAAWv+E,eAAekF,EAAIi0M,aAAc,CAC5C,MAAMC,EAAiB,IAAInuL,EAAUszD,WAC/BK,EAAagxG,EAAArxG,WAAW9+E,OAAOyF,EAAIi0M,YAAat0M,GACtDu0M,EAAe16H,aAAax5E,EAAIi0M,aAChCC,EAAez6H,cAAcC,GAC7B/5E,EAAOuc,IAAIg4L,GAEX,MAAM16M,EAAOwG,EAAIi0M,YACXz0M,EAAQkrL,EAAArxG,WAAWu3E,iBAAiBp3J,GACpC26M,EAAMzpB,EAAArxG,WAAWp0E,aAAazL,GAGpCwhH,EAAAlI,YAAYgB,gBAAgBn0G,EAAQH,GACpCw7G,EAAAlI,YAAYoB,kBAAkBv0G,EAAQw0M,GAEtCz6H,EAAW06H,mBACX16H,EAAWphE,oBAGXsL,EAAApmB,QAAGK,IAAI,eAAgB,mBAChBmC,EAAIi0M,yCAInBl7M,EAAAo5M,YAAYt3M,UAAUy0G,YAAc,SAAS91G,EAAMoxB,GAC/ChvB,KAAK6yF,UAAUj1F,GAAQoxB,GAG3B7xB,EAAAo5M,YAAYt3M,UAAU24M,oBAAsB,SAASxzM,EAAK08F,EAAM/8F,GAC5D,MAAM00M,EAAoBt7M,EAAAo5M,YAAYmC,UAAU,EAAGt0M,GAE7Cy2H,EADO3zH,KAAK4C,MAAM2uM,EAAO/pF,SAAW,GAEpCoM,EAAU29E,EAAO9pF,SAAW,EAClC8pF,EAAO59E,QAAUA,EACjB49E,EAAO39E,QAAUA,EACjB29E,EAAOxzC,WAAa7gK,EAAI6gK,WACxBwzC,EAAOzzC,iBAAkB,EAEzB,MAAM2zC,GAAY,IAAIzhJ,MAAO9H,UAE7BpvD,KAAKk2M,SAAS,kCACd,MAAM98E,EAAYivC,EAAA1H,MAAMqG,gBAAgByxC,GAGxC,GAFAz4M,KAAKk2M,SAAS,SAET98E,EAAU+nC,SAAU,CACrBnhK,KAAKk2M,SAAS,2CACd,MAAM10C,EAAUxhK,KAAK44M,mBAAmBx/E,EAAWh1H,EAAI6gK,WACnDpqC,EAASC,GACb1B,EAAUgsC,WAAW5D,GACrBxhK,KAAKk2M,SAAS,QAGlBl2M,KAAKk2M,SAAS,mCACd,MAAM2C,EAAe5pB,EAAA3mB,UAAU4H,qBAC7B92C,EAAWq/E,IACNK,EAAYr+E,GAAao+E,EAChC74M,KAAKk2M,SAAS,QAEdl2M,KAAKk2M,SAAS,8CACdl2M,KAAK+4M,uBAAuB3/E,EAAUmsC,aAAc9qC,GACpDz6H,KAAKk2M,SAAS,QAEdl2M,KAAKk2M,SAAS,mDACd,MAAM8C,EAAczuH,EAAA+F,QAAQm+B,WAAWqqF,EAAYL,GACnDz4M,KAAKk2M,SAAS,QAEdl2M,KAAKk2M,SAAS,gDACI,IAAIrzG,EAAMsI,KAAK,YAAastG,EAAO/pF,SACjD+pF,EAAO9pF,SAAU,IAAK,IAAKqqF,GACrBjtG,eACV/rG,KAAKk2M,SAAS,QAEd,MAAM+C,EAAY,IAAIjqB,EAAAn3D,aACtBohF,EAAU9/E,aAAaC,GACvB6/E,EAAUtgF,cAAcv0H,GACxB08F,EAAK63B,cAAcv0H,GACnB60M,EAAU1gF,gBAAgB,CAAC2gF,MAAOF,IAElCv+E,EAAUlrB,gBAAiB,EAC3BvvG,KAAKk2M,SAAS,sCACd,MAAM8B,EAAcgB,EAAYn+E,GAASC,GACzC96H,KAAKm5M,iBAAiB1+E,EAAW12H,EAAQi0M,EAAan9E,EAASC,GAC/D96H,KAAKo5M,2BAA2B3+E,EAAWrB,EAAUmsC,cACrD,MAAM/rC,EAAQy/E,EAAU1/E,YAAYkB,GACpC35B,EAAKiwF,SAASv3D,GACdJ,EAAUigF,iBACVv4G,EAAKq4B,aAAaC,GAClBt4B,EAAKo3F,sBAAqB,GAC1Bl4L,KAAKk2M,SAAS,QAEdl2M,KAAKk2M,SAAS,gCAEdl2M,KAAKs5M,YAAYv1M,EAAQi0M,GACzBjxL,EAAKe,UAAUE,EAAApmB,QAAG0J,iBAAkB,CAACrB,MAAOlG,EACxCqb,OAAQ44L,IAEZj0M,EAAO2kH,YAAY1gG,EAAApmB,QAAG8I,kBACtBo2F,EAAKsxF,UAAUruL,GACf/D,KAAKk2M,SAAS,QAEd,MACMqD,GADU,IAAIriJ,MAAO9H,UACAupJ,EAI3B,OAHA34M,KAAKk2M,SAAS,yBAA2BqD,EAAW,QAG7Cz4G,GAGX3jG,EAAAo5M,YAAYt3M,UAAUi3M,SAAW,SAAS7xM,GACtC,MAAMm1M,GAAU,IAAItiJ,MAAO9H,UAC3B,IAAIqqJ,EAAS,EACTz5M,KAAK05M,WACLD,GAAUD,EAAUx5M,KAAK05M,UAAY,KAEzC15M,KAAK05M,SAAWF,EACZx5M,KAAK6yF,UAAUqjH,UACfl2M,KAAK6yF,UAAUqjH,SAAS7xM,GAEhB,SAARA,GACA2jB,EAAApmB,QAAGsD,OAAOlF,KAAK25M,mBAAmBF,SAEtCz5M,KAAK25M,QAAUt1M,GAInBlH,EAAAo5M,YAAYt3M,UAAUq6M,YAAc,SAASv1M,EAAQgU,GACjD,MAAM4+B,EAAY5+B,EAAMyL,SAASozB,UAC3BgjK,EAAU,GAChBjjK,EAAUtsC,QAAQ3M,IACdk8M,EAAQl8M,EAAEm0B,aAAc,IAG5B,IAAI/xB,EAAO,KACPyK,GAAQ,EACRsmF,EAAW,IACf,MACMgpH,EAAgB3yM,KAAAizG,IAAA,EAAmB,GAAI,EAE7C,MAAQ5vG,GAAO,CACXzK,EAAO2oB,EAAIjL,aAAam5B,GACxB,MAAO1gC,EAAGC,GAAKpW,EAAK8b,QACdiqJ,EAAMzxF,EAAA7pD,SAAS05F,aAAahuG,EAAGC,EAN3B,GAON2vJ,EAAItkK,SAAWs4M,IACftvM,GAAQ,GAEZ,IAAK,IAAIlN,EAAI,EAAGA,EAAIwoK,EAAItkK,OAAQlE,IAAK,CACjC,MAAOgsD,EAAIC,GAAMu8G,EAAIxoK,GACrBkN,EAAQA,GAASqvM,EAAQvwJ,EAAK,IAAMC,GAGxC,KAAMunC,GAAY,EAAG,CACjB7oE,EAAApmB,QAAGsD,IAAI,mBACP,OAIJqF,EACAwN,EAAMgW,SAAShqB,EAAQjE,EAAK6b,OAAQ7b,EAAKkc,QAGzCjE,EAAM+hM,mBAAmB/1M,IAIjC5G,EAAAo5M,YAAYt3M,UAAU25M,mBAAqB,SACvCl2C,EAAIuC,EAAYpqC,EAASC,GACzB,OAAO2lC,EAAA0E,aAAaxmK,OAAO+jK,EAAIuC,EAAY,CAACpqC,EAASC,KAMzD39H,EAAAo5M,YAAYt3M,UAAU85M,uBAAyB,SAASv3C,EAAS/mC,GAC7D,MAAMs/E,EAAe/8K,EAAA4wF,WAAWzjH,OAAO81B,GAAwB,eAAfA,EAAM2J,MAChDowK,EAAgB,GACtB,IAAIC,EAAe,EAEnB,MAAMx8E,EAAcz9H,KAAKk6M,iBAEnBC,EAAY34C,EAAQh+I,SACPi3G,EAAU1jE,KAAK,GAAG+zC,KAC1BzgG,QAAQu0J,IACf,MAAM2L,IAACA,EAAGC,IAAEA,GAAO5L,EACbjiI,EAAOw9K,EAAU5vC,GAAKC,GAC5B,IAAI5sK,EAAO4jK,EAAQ9/J,QAAQi7B,GACvBy9K,EAAc,KAElB,GAAIx8M,GAYA,GAXAw8M,EAAc,CACV,CAAC3pD,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,CAACV,IACjC,CAAC6yJ,GAAI,MAAO3uJ,KAAM,OAAQxD,MAAO,CAAC,qBAEzB,gBAATV,IACAw8M,EAAc,CACV3pD,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,CAAC,qBAKpC0pB,EAAApmB,QAAG8jB,UAAU,KAAO,CACpB,MAAM20L,EAAkBN,EAAa5vM,OAAO/F,GACxCA,EAAIrC,OAASnE,GAEjB,GAAIy8M,EAAgB94M,OAAS,EAAG,CAC5B,MAAM+4M,EAAa7xL,EAAIjL,aAAa68L,GACpC,IAAKL,EAAc96M,eAAeo7M,EAAW18M,MAAO,CAChD,MAAM28M,EAAc,CAAC38M,KAAM08M,EAAW18M,KAAMsb,OAAQ,GAEpD,IAAIshM,EAAa57C,EAAS3wD,QAAQ,GAAGtvG,OAChC67M,IAAaA,EAAa,IAC1BA,EAAWvwM,QAAQuwM,EAAWvwM,MAAQ,IAC3CuwM,EAAWvwM,MAAMrE,KAAK20M,GAEtBP,EAAcM,EAAW18M,MAAQ08M,EACjC17C,EAAS3wD,QAAQ,GAAGtvG,OAAS67M,EAC7Bh2M,QAAQU,IAAI,aAAco1M,EAAW18M,KAAM,KACvCghK,KACFq7C,SAMb,CAED,MAAOh1F,EAAIC,GAAMllH,KAAKy6M,sBAAsBlwC,EAAKC,GAC3CphJ,EAAUppB,KAAK06M,0BAA0Bz1F,EAAIC,EAAIs8C,GACjDm5C,EAAQ58M,OAAO6qB,KAAKQ,GAG1B,GAFwBA,EAAQlqB,eAAe,eAG3Ck7M,EAAc,CACV3pD,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,CAAC,yBAGnC,GAAIq8M,EAAMp5M,OAAS,EACpB3D,EAAO6qB,EAAIugB,YAAY5f,GACvBgxL,EAAc,CACV,CAAC3pD,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,CAACV,IACjC,CAAC6yJ,GAAI,MAAO3uJ,KAAM,OAAQxD,MAAO,CAAC,0BAGrC,GAAqB,IAAjBq8M,EAAMp5M,OAAc,CACzBymB,EAAApmB,QAAGsD,IAAI,kBAAmBs8J,EAAQ0G,eAClC,MAAM0yC,UAAgBrwC,WAAaC,IACnCxiJ,EAAApmB,QAAGK,IAAI,cAAe,mDACQgjH,KAAMC,MAAO01F,YAI9Ch8C,EAAS7xC,aAAa6xC,EAAS7xC,WAAa,IACjD6xC,EAAS7xC,WAAW9iH,MAAQmwM,EAC5Bx7C,EAAS7xC,WAAW0Q,YAAcA,EAAY7/H,GAE9CghK,EAAS3wD,QAAQ5jG,QAAQg1H,IAChBA,EAAMtS,aAAasS,EAAMtS,WAAa,IAC3CsS,EAAMtS,WAAW9iH,MAAQmwM,EACzB/6E,EAAMtS,WAAW0Q,YAAcA,EAAY7/H,GACvCghK,EAAS7xC,WAAWrI,cACpB2a,EAAMtS,WAAWrI,YAAck6C,EAAS7xC,WAAWrI,iBAK/DlgH,QAAQU,IAAI,6BAA8B+0M,IAG9C98M,EAAAo5M,YAAYt3M,UAAUi7M,eAAiB,WACnC,MAAMW,EAAS,IAAIlE,EAAAmE,YAAY9yL,EAAApmB,QAAGwP,WAElC,OADAypM,EAAOx2J,YACAw2J,EAAOE,YAGlB59M,EAAAo5M,YAAYt3M,UAAUw7M,sBAAwB,SAASlwC,EAAKC,GAExD,OADiB,IAAIykB,EAAA3mB,UAAUqB,SAAS,CAACK,KAAM,GAAIC,KAAM,KACzCwwC,sBAAsBlwC,EAAKC,IAI/CrtK,EAAAo5M,YAAYt3M,UAAUk6M,iBAAmB,SACrC1+E,EAAW12H,EAAQgU,EAAO8iH,EAASC,GAEnC,IAAIh7H,EAAOiY,EAAM0rF,kBACjB,KAAO3jG,EAAKg2C,iBACRh2C,EAAOiY,EAAM0rF,kBAGjB,MAAMu3G,EAAW,CACbp9M,KAAM,gBAAkBmG,EAAOrC,UAC/BuU,EAAG4kH,EAAS3kH,EAAG4kH,EACfqF,OAAQrgI,EAAK6b,OAAQykH,OAAQtgI,EAAKkc,OAClC8yF,UAAW,EACX4uB,UAAW,UACXK,UAAU,EACVhR,WAAY,CACR9iH,MAAO,CACH,CAACwmJ,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,CAACyF,EAAOvD,YACxC,CAACiwJ,GAAI,MAAO3uJ,KAAM,OAAQxD,MAAO,CAAC,qBAEtC2E,KAAM,CACF,CAACwtJ,GAAI,KAAM3uJ,KAAM,QAASxD,MAAO,MAGzC2vG,QAAS,CAAC,CACNrwG,KAAM,SACN+lG,QAAS,EACTw5B,cAAe,EACfjb,OAAQ,KAIhB19G,QAAQU,IAAI,sBAAuBpF,EAAK6b,OAAQ7b,EAAKkc,QACrDy+G,EAAU1jE,KAAK,GAAG+zC,KAAKllG,KAAKo1M,IAGhC79M,EAAAo5M,YAAYt3M,UAAUm6M,2BAA6B,SAC/C3+E,EAAW+mC,GAEX,MAAM9xD,EAAW+qB,EAAU1jE,KAAK,GAC1BknE,EAAc,GACpB,IAAK,IAAIhoH,EAAI,EAAGA,EAAIy5F,EAAS/kF,KAAM1U,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIw5F,EAAS9kF,KAAM1U,IAAK,CACpC,MAAMkT,EAAUppB,KAAK06M,0BAA0BzkM,EAAGC,EAAGsrJ,GAC/Cm5C,EAAQ58M,OAAO6qB,KAAKQ,GAC1BuxL,EAAM/0M,KAAK,UACXq4H,EAAYhoH,EAAI,IAAMC,GAAK,CACvBjM,MAAO,CAACwmJ,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAOq8M,IAGvCvxL,EAAQlqB,eAAe,iBACvB++H,EAAYhoH,EAAI,IAAMC,GAAGjM,MACrB,CAACwmJ,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,oBAIhDoxG,EAASqd,WAAakR,GAK1B9gI,EAAAo5M,YAAYt3M,UAAUy7M,0BAA4B,SAASz1F,EAAIC,EAAIs8C,GAC/D,MAAM24C,EAAY34C,EAAQh+I,SAGpB8F,EAFW,IAAI2lK,EAAAtlB,SAAS,CAACK,KAAM,GAAIC,KAAM,KAEzBK,4BAA4BrlD,EAAIC,GAChD9iC,EAAQhO,EAAA7pD,SAAS0wL,eAAed,EAAW7wL,GAC3CmK,EAAO2gD,EAAA7pD,SAASiJ,cAAc4uD,GACpC,IAAIu4H,EAAQ58M,OAAO6qB,KAAK6K,GACxBknL,EAAQA,EAAMxwM,OAAOpI,GAAkB,MAATA,GAAyB,MAATA,GAE9C,MAAMqnB,EAAU,GAMhB,OALAuxL,EAAMtwM,QAAQ6wM,IACV,MAAMC,EAAa35C,EAAQ9/J,QAAQw5M,GACnC9xL,EAAQ+xL,GAAc1nL,EAAKynL,KAGxB9xL,GAGXjsB,EAAAo5M,YAAYt3M,UAAUy4M,uBAAyB,SAAStzM,EAAK08F,EAAM/8F,GAC/C,IAAI+yM,EAAA95C,UAOpB,OADA54J,EAAIo1H,MAAQs9E,EAAA95C,UAAUsT,gBAJT,CAAC1yK,KAAM,QAASu+J,UAAW,QACpCl8C,SAAU,UAIPjgH,KAAK23M,gBAAgBvzM,EAAK08F,EAAM/8F,IAG3C5G,EAAAo5M,YAAYt3M,UAAU04M,gBAAkB,SAASvzM,EAAK08F,EAAM/8F,GACxD,MAAM02H,EAAYr2H,EAAIo1H,MAEtB,GADAx5H,KAAKo7M,oBAAoB3gF,IACpBA,EAGD,OAFAzyG,EAAApmB,QAAGK,IAAI,UAAW,kBACd,yBACG,KAEXw4H,EAAU7B,UAAYx0H,EAAIw0H,UAC1B,MAAMoC,EAAO,IAAIg0D,EAAAn3D,aACjBmD,EAAKrC,cAAcv0H,GACnB42H,EAAKzC,gBAAgBv4H,KAAKi4H,cAE1B,MAAMuB,EAAQwB,EAAKzB,YAAYkB,GACzB7tG,EAAS4sG,EAAMz4B,YAErB,IAAI6+D,EAAc,CAACviB,MAAO5iB,EAAU78H,KAAMqY,EAAG,EAAGC,EAAG,GAKnD,OAJIukH,EAAUmlC,cACVA,EAAcnlC,EAAUmlC,aAGxBhzI,EAAOrrB,OAAS,GAChBu/F,EAAKiwF,SAASv3D,GACd14B,EAAKsxF,UAAUruL,EAAQ67J,GAChB9+D,IAGP94E,EAAApmB,QAAGK,IAAI,UAAW,kBACd,qCACG,OAKf9E,EAAAo5M,YAAYt3M,UAAUm8M,oBAAsB,SAASvuL,GAEjD,GADA7sB,KAAKi4H,aAAe,GAChBprG,EAAK3tB,eAAe,gBAAiB,CACxBnB,OAAO6qB,KAAKiE,EAAKorG,cACzB5tH,QAAQzM,IACToC,KAAKi4H,aAAar6H,GACdoC,KAAKq8H,mBAAmBxvG,EAAKorG,aAAar6H,IAE9CivB,EAAKorG,aAAar6H,GAAQoC,KAAKi4H,aAAar6H,OAKxDT,EAAAo5M,YAAYt3M,UAAUo9H,mBAAqB,SAAS9lH,GAChD,MAAMuoG,EAAW,IAAI83F,EAAAvnB,SACrB,OAAO94K,EAAIlB,IAAIgmM,IAEX,GAAsC,mBAA3BA,EAAWtjM,MAAMjB,MACxB,OAAOukM,EAGX,MAAMtjM,EAAQ+mG,EAAS8xE,aAAayqB,EAAWtjM,OAmB/C,OAjBIA,EAAMjB,QAAUkR,EAAApmB,QAAGyM,cACnB0J,EAAM2oD,MAAMy3B,EAAAzjD,MAAM4mK,iBAEtBvjM,EAAMzN,YAAYD,QAAQJ,IAClBA,EAAM6M,QAAUkR,EAAApmB,QAAG0M,eACnBrE,EAAMy2D,MAAMnqC,EAAAS,OAAO2d,oBAG3B58B,EAAM2C,WAAWrQ,QAAQvD,IACjBA,EAAKgQ,QAAUkR,EAAApmB,QAAG0M,eAClBxH,EAAK45D,MAAMnqC,EAAAS,OAAO2d,oBAM1B3sB,EAAApmB,QAAGmjB,eAAehN,GAAO,GAClB,CACHmB,OAAQmiM,EAAWniM,OACnBnB,YAMZ5a,EAAAo5M,YAAYt3M,UAAUu4M,qBAAuB,SAASpzM,EAAK08F,EAAM/8F,GAC7D,OAAO,IAAI2yM,EAAA6E,UAAUv7M,KAAMA,KAAK+1H,SAASylF,YAAYp3M,EAAK08F,EAAM/8F,IAGpE5G,EAAAo5M,YAAYt3M,UAAU44M,sBAAwB,SAASzzM,EAAK08F,EAAM/8F,GAE9D,OADgB,IAAI2yM,EAAA6E,UAAUv7M,KAAMA,KAAK+1H,SAC1B0lF,kBAAkBr3M,EAAK08F,EAAM/8F,IAGhD5G,EAAAo5M,YAAYt3M,UAAUw4M,kBAAoB,SAASrzM,EAAK08F,EAAM/8F,GAE1D,OADkB,IAAI2yM,EAAA6E,UAAUv7M,KAAMA,KAAK+1H,SAC1B0hF,kBAAkBrzM,EAAK08F,EAAM/8F,IAGlD5G,EAAAo5M,YAAYt3M,UAAUy8M,wBAA0B,SAASt3M,EAAK08F,EAAM/8F,GAEhE,OADkB,IAAI2yM,EAAA6E,UAAUv7M,KAAMA,KAAK+1H,SAC1B2lF,wBAAwBt3M,EAAK08F,EAAM/8F,IAIxD5G,EAAAo5M,YAAYmC,UAAY,SAASvhM,EAAO,EAAG/S,EAAW,IAClD,MAAMu3M,EAAQv3M,EAAIu3M,OAAS,EACrBC,EAAQx3M,EAAIw3M,OAAS,EAiB3B,MAhBe,CACX30C,QAAQ,EACRC,aAAa,EAEbvE,YAAY,EAEZ8E,QAAS,CAAC,IACVL,SAAUu0C,EAAQxkM,EAAO,GACzBkwJ,SAAUu0C,EAAQzkM,EAAO,GACzBg5J,OAAQwrC,EAAQxkM,EAAO,IACvBi5J,OAAQwrC,EAAQzkM,EAAO,IACvBu3G,SAAUitF,EAAQxkM,EAAO,EACzBw3G,SAAUitF,EAAQzkM,EAAO,EACzB2yJ,QAAS6xC,EAAQxkM,EAAO,EACxB4yJ,QAAS6xC,EAAQzkM,EAAO,mBC1pBhC,IAOA0kM,EACAC,EARAhuK,EAAA1wC,EAAAD,QAAA,GAUA,SAAA4+M,IACA,UAAAr3M,MAAA,mCAEA,SAAAs3M,IACA,UAAAt3M,MAAA,qCAsBA,SAAAu3M,EAAA33M,GACA,GAAAu3M,IAAAh2J,WAEA,OAAAA,WAAAvhD,EAAA,GAGA,IAAAu3M,IAAAE,IAAAF,IAAAh2J,WAEA,OADAg2J,EAAAh2J,WACAA,WAAAvhD,EAAA,GAEA,IAEA,OAAAu3M,EAAAv3M,EAAA,GACK,MAAAsgB,GACL,IAEA,OAAAi3L,EAAAr+M,KAAA,KAAA8G,EAAA,GACS,MAAAsgB,GAET,OAAAi3L,EAAAr+M,KAAAwC,KAAAsE,EAAA,MAvCA,WACA,IAEAu3M,EADA,mBAAAh2J,WACAA,WAEAk2J,EAEK,MAAAn3L,GACLi3L,EAAAE,EAEA,IAEAD,EADA,mBAAA31J,aACAA,aAEA61J,EAEK,MAAAp3L,GACLk3L,EAAAE,GAjBA,GAwEA,IAEAE,EAFA58B,EAAA,GACA68B,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAD,IAGAC,GAAA,EACAD,EAAA36M,OACA+9K,EAAA48B,EAAA7qM,OAAAiuK,GAEA88B,GAAA,EAEA98B,EAAA/9K,QACA+6M,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAt1L,EAAAo1L,EAAAI,GACAF,GAAA,EAGA,IADA,IAAAjvK,EAAAoyI,EAAA/9K,OACA2rC,GAAA,CAGA,IAFAgvK,EAAA58B,EACAA,EAAA,KACA88B,EAAAlvK,GACAgvK,GACAA,EAAAE,GAAAG,MAGAH,GAAA,EACAlvK,EAAAoyI,EAAA/9K,OAEA26M,EAAA,KACAC,GAAA,EAnEA,SAAAr5M,GACA,GAAAg5M,IAAA31J,aAEA,OAAAA,aAAArjD,GAGA,IAAAg5M,IAAAE,IAAAF,IAAA31J,aAEA,OADA21J,EAAA31J,aACAA,aAAArjD,GAEA,IAEAg5M,EAAAh5M,GACK,MAAA8hB,GACL,IAEA,OAAAk3L,EAAAt+M,KAAA,KAAAsF,GACS,MAAA8hB,GAGT,OAAAk3L,EAAAt+M,KAAAwC,KAAA8C,KAgDA05M,CAAA31L,IAiBA,SAAAqW,EAAA54B,EAAAqlB,GACA3pB,KAAAsE,MACAtE,KAAA2pB,QAYA,SAAA8yL,KA5BA3uK,EAAA4uK,SAAA,SAAAp4M,GACA,IAAAa,EAAA,IAAAoO,MAAA86B,UAAA9sC,OAAA,GACA,GAAA8sC,UAAA9sC,OAAA,EACA,QAAAlE,EAAA,EAAuBA,EAAAgxC,UAAA9sC,OAAsBlE,IAC7C8H,EAAA9H,EAAA,GAAAgxC,UAAAhxC,GAGAiiL,EAAA15K,KAAA,IAAAs3B,EAAA54B,EAAAa,IACA,IAAAm6K,EAAA/9K,QAAA46M,GACAF,EAAAK,IASAp/K,EAAAj+B,UAAAs9M,IAAA,WACAv8M,KAAAsE,IAAA8pC,MAAA,KAAApuC,KAAA2pB,QAEAmkB,EAAA6uK,MAAA,UACA7uK,EAAA8uK,SAAA,EACA9uK,EAAAG,IAAA,GACAH,EAAA+uK,KAAA,GACA/uK,EAAAgvK,QAAA,GACAhvK,EAAAivK,SAAA,GAIAjvK,EAAAkvK,GAAAP,EACA3uK,EAAAmvK,YAAAR,EACA3uK,EAAAovK,KAAAT,EACA3uK,EAAAqvK,IAAAV,EACA3uK,EAAAV,eAAAqvK,EACA3uK,EAAAsvK,mBAAAX,EACA3uK,EAAAuvK,KAAAZ,EACA3uK,EAAAwvK,gBAAAb,EACA3uK,EAAAyvK,oBAAAd,EAEA3uK,EAAA0vK,UAAA,SAAA5/M,GAAqC,UAErCkwC,EAAA2vK,QAAA,SAAA7/M,GACA,UAAA8G,MAAA,qCAGAopC,EAAA4vK,IAAA,WAA2B,WAC3B5vK,EAAA6vK,MAAA,SAAArqM,GACA,UAAA5O,MAAA,mCAEAopC,EAAA8vK,MAAA,WAA4B,2BCrJ5B,IAAAC,EA4BA,SAAAC,EAAAtvK,GAEA,SAAArqC,IAEA,GAAAA,EAAA0xB,QAAA,CAEA,IAAAogL,EAAA9xM,EAGA45M,GAAA,IAAA7mJ,KACA8mJ,EAAAD,GAAAF,GAAAE,GACA9H,EAAA/5K,KAAA8hL,EACA/H,EAAAriI,KAAAiqI,EACA5H,EAAA8H,OACAF,EAAAE,EAIA,IADA,IAAA54M,EAAA,IAAAoO,MAAA86B,UAAA9sC,QACAlE,EAAA,EAAmBA,EAAA8H,EAAA5D,OAAiBlE,IACpC8H,EAAA9H,GAAAgxC,UAAAhxC,GAGA8H,EAAA,GAAAhI,EAAA8gN,OAAA94M,EAAA,IAEA,iBAAAA,EAAA,IAEAA,EAAAigD,QAAA,MAIA,IAAAlmC,EAAA,EACA/Z,EAAA,GAAAA,EAAA,GAAAwpC,QAAA,yBAAAlf,EAAAm1B,GAEA,UAAAn1B,EAAA,OAAAA,EACAvQ,IACA,IAAAg/L,EAAA/gN,EAAA0yC,WAAA+U,GACA,sBAAAs5J,EAAA,CACA,IAAAp4M,EAAAX,EAAA+Z,GACAuQ,EAAAyuL,EAAA1gN,KAAAy4M,EAAAnwM,GAGAX,EAAAunB,OAAAxN,EAAA,GACAA,IAEA,OAAAuQ,IAIAtyB,EAAAmxC,WAAA9wC,KAAAy4M,EAAA9wM,IAEAhB,EAAAe,KAAA/H,EAAA+H,KAAAV,QAAAU,IAAArG,KAAA2F,UACA4pC,MAAA6nK,EAAA9wM,IAaA,OAVAhB,EAAAqqC,YACArqC,EAAA0xB,QAAA14B,EAAA04B,QAAA2Y,GACArqC,EAAAoqC,UAAApxC,EAAAoxC,YACApqC,EAAAmmC,MA5EA,SAAAkE,GACA,IAAAnxC,EAAAwtD,EAAA,EAEA,IAAAxtD,KAAAmxC,EACAqc,MAAA,GAAAA,EAAArc,EAAAqb,WAAAxsD,GACAwtD,GAAA,EAGA,OAAA1tD,EAAAyyC,OAAA1oC,KAAAiR,IAAA0yC,GAAA1tD,EAAAyyC,OAAAruC,QAoEA48M,CAAA3vK,GAGA,mBAAArxC,EAAAihN,MACAjhN,EAAAihN,KAAAj6M,GAGAA,GAtHAhH,EAAAC,EAAAD,QAAA2gN,EAAA35M,MAAA25M,EAAA,QAAAA,GACAG,OA6LA,SAAAn4M,GACA,OAAAA,aAAApB,MAAAoB,EAAAhB,OAAAgB,EAAAigC,QACAjgC,GA9LA3I,EAAAg4E,QAyJA,WACAh4E,EAAA4yC,OAAA,KAzJA5yC,EAAA4yC,OA8HA,SAAAlB,GACA1xC,EAAAyxC,KAAAC,GAEA1xC,EAAAo3H,MAAA,GACAp3H,EAAAkhN,MAAA,GAKA,IAHA,IAAAx5M,GAAA,iBAAAgqC,IAAA,IAAAhqC,MAAA,UACAqoC,EAAAroC,EAAAtD,OAEAlE,EAAA,EAAiBA,EAAA6vC,EAAS7vC,IAC1BwH,EAAAxH,KAEA,OADAwxC,EAAAhqC,EAAAxH,GAAAsxC,QAAA,cACA,GACAxxC,EAAAkhN,MAAAz4M,KAAA,IAAA0pC,OAAA,IAAAT,EAAAl5B,OAAA,SAEAxY,EAAAo3H,MAAA3uH,KAAA,IAAA0pC,OAAA,IAAAT,EAAA,QA5IA1xC,EAAA04B,QAmKA,SAAAj4B,GACA,IAAAP,EAAA6vC,EACA,IAAA7vC,EAAA,EAAA6vC,EAAA/vC,EAAAkhN,MAAA98M,OAAyClE,EAAA6vC,EAAS7vC,IAClD,GAAAF,EAAAkhN,MAAAhhN,GAAAw5B,KAAAj5B,GACA,SAGA,IAAAP,EAAA,EAAA6vC,EAAA/vC,EAAAo3H,MAAAhzH,OAAyClE,EAAA6vC,EAAS7vC,IAClD,GAAAF,EAAAo3H,MAAAl3H,GAAAw5B,KAAAj5B,GACA,SAGA,UA9KAT,EAAAsxC,SAAmBxxC,EAAQ,KAM3BE,EAAAo3H,MAAA,GACAp3H,EAAAkhN,MAAA,GAQAlhN,EAAA0yC,WAAA,kBCxBA,IAAAzwC,EAAA,IACA3B,EAAA,GAAA2B,EACAoyD,EAAA,GAAA/zD,EACAE,EAAA,GAAA6zD,EACAt7C,EAAA,OAAAvY,EAuIA,SAAA2gN,EAAAN,EAAAl/M,EAAAlB,GACA,KAAAogN,EAAAl/M,GAGA,OAAAk/M,EAAA,IAAAl/M,EACAoI,KAAA4C,MAAAk0M,EAAAl/M,GAAA,IAAAlB,EAEAsJ,KAAAC,KAAA62M,EAAAl/M,GAAA,IAAAlB,EAAA,IA9HAR,EAAAD,QAAA,SAAA2I,EAAAugD,GACAA,KAAA,GACA,IAyGA23J,EAzGAj8M,SAAA+D,EACA,cAAA/D,GAAA+D,EAAAvE,OAAA,EACA,OAkBA,SAAAoI,GAEA,IADAA,EAAAkkC,OAAAlkC,IACApI,OAAA,IACA,OAEA,IAAAkuB,EAAA,wHAAAqoE,KACAnuF,GAEA,IAAA8lB,EACA,OAEA,IAAA3wB,EAAAi2K,WAAAtlJ,EAAA,IAEA,QADAA,EAAA,UAAAla,eAEA,YACA,WACA,UACA,SACA,QACA,OAAAzW,EAAAoX,EACA,WACA,UACA,QACA,OAAApX,EAAAnB,EACA,YACA,WACA,UACA,SACA,QACA,OAAAmB,EAAA0yD,EACA,cACA,aACA,WACA,UACA,QACA,OAAA1yD,EAAArB,EACA,cACA,aACA,WACA,UACA,QACA,OAAAqB,EAAAM,EACA,mBACA,kBACA,YACA,WACA,SACA,OAAAN,EACA,QACA,QAnEAqtC,CAAArmC,GACG,cAAA/D,IAAA,IAAAizK,MAAAlvK,GACH,OAAAugD,EAAAk4J,KAsGAD,EADAN,EArGAl4M,EAsGAnI,EAAA,QACA2gN,EAAAN,EAAAxsJ,EAAA,SACA8sJ,EAAAN,EAAAvgN,EAAA,WACA6gN,EAAAN,EAAA5+M,EAAA,WACA4+M,EAAA,MA7BA,SAAAA,GACA,GAAAA,GAAArgN,EACA,OAAAuJ,KAAA4B,MAAAk1M,EAAArgN,GAAA,IAEA,GAAAqgN,GAAAxsJ,EACA,OAAAtqD,KAAA4B,MAAAk1M,EAAAxsJ,GAAA,IAEA,GAAAwsJ,GAAAvgN,EACA,OAAAyJ,KAAA4B,MAAAk1M,EAAAvgN,GAAA,IAEA,GAAAugN,GAAA5+M,EACA,OAAA8H,KAAA4B,MAAAk1M,EAAA5+M,GAAA,IAEA,OAAA4+M,EAAA,KA1FAQ,CAAA14M,GAEA,UAAApB,MACA,wDACAma,KAAAC,UAAAhZ,iVChCA,MAAAkiB,EAAAC,EAAAhrB,EAAA,IACA07G,EAAA17G,EAAA,IACAogB,EAAApgB,EAAA,GAEAmgC,EAAAngC,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KAIM8xI,YACFA,EAAWL,eACXA,GAAkB/1B,EAAA+0B,WAChBjlH,EAAMpL,EAAAC,OAAOC,SAInB,MAAakhM,UAAwB9lG,EAAAE,KAAKnhF,KAItCrP,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,mBACb,MAAM/5B,EAAOmK,EAAMwkB,UACf3uB,EAAKk2F,YACLh2F,KAAK0D,KAAO5D,EAAK8b,SAErB5b,KAAK6tI,SAAW,GAChB7tI,KAAK0+M,WAAaj2L,EAAIM,cAAc,GAAI,IAGrCV,WACHroB,KAAKgjF,OAAS+rD,EACd,MAAM7kI,EAAoBlK,KAAKiK,MAAMq5B,WAAWmyD,eAC3Cz1F,KAAKquL,YAAyC,IAA3BruL,KAAKquL,WAAW9sL,SACpCvB,KAAKquL,WAAankL,EAAUC,OAAOzM,GACD,eAA9BA,EAAE6C,cAAcC,YAIxB,IAAIm+M,EAAWC,EAAsB5+M,KAAKiK,MAAOC,GACjD,IAAKy0M,GAAY3+M,KAAKquL,WAAW9sL,OAAS,EAAG,CACzC,MAAMzB,EAAO2oB,EAAIjL,aAAaxd,KAAKquL,YACnCswB,EAAW,IAAIhmG,EAAAE,KAAK62B,WAAW1vI,KAAKiK,MAAOnK,EAAK8b,SAGpD,GAAI5b,KAAK0+M,YAAc,EAAG,CACtB,MAAMG,EAAY7+M,KAAKiK,MAAMwkB,UAE7B,GAAIowL,EAAU7oH,UAAW,CAErB,MAAM5T,EAAQhlD,EAAAyK,MAAMi8E,oBAAoB9jH,KAAKiK,OAC7C,IAAI60M,EAAa,KACjB18H,EAAM/3E,QAAQvK,IAC2B,eAAjCA,EAAKS,cAAcC,WACfV,EAAK41F,eACLopH,EAAah/M,KAMrBg/M,GACAnmG,EAAAE,KAAKi8B,YAAY90I,KAAKiK,MAAO60M,GAC7B9+M,KAAKgjF,OAAS0rD,GAGd1mH,EAAApmB,QAAG+C,KAAK,kBAAmB,WACvB,wCAIRg6M,EAAWhmG,EAAAE,KAAK62B,WAAW1vI,KAAKiK,MAAO40M,EAAUjjM,SAIrD+iM,GACA3+M,KAAKwwI,WAAWmuE,GAIjBt2L,UAYH,OAXAroB,KAAKsvI,uBACHtvI,KAAK0+M,WACH1+M,KAAKi0I,cACLj0I,KAAKgjF,OAAShjF,KAAKuwI,mBAGnBvwI,KAAKwuI,WACDxuI,KAAKgjF,SAAW0rD,IAChB1uI,KAAKgjF,OAAShjF,KAAKuwI,oBAGpBvwI,KAAKgjF,QA7EpB7lF,EAAAshN,kBAoFA,MAAa3lG,UAAkBH,EAAAE,KAAKnhF,KAEhCrP,YAAYpe,GACRitB,MAAMjtB,GACNjK,KAAK65B,QAAQ,aACb75B,KAAK6tI,SAAW,GAChB7tI,KAAK++M,aAAe,GACpB/+M,KAAKg/M,aAAe,GACpBh/M,KAAKi/M,aAAe,GACpBj/M,KAAKivG,MAAQ,GAGV5mF,WACHroB,KAAKgjF,OAAS+rD,EACd/uI,KAAKk/M,kBAGF72L,UAIH,OAHAroB,KAAKsvI,uBACHtvI,KAAK++M,eACL/+M,KAAKg/M,aACHh/M,KAAKkoF,cACEwmD,GAEP1uI,KAAKi0I,cACLj0I,KAAKgjF,OAAShjF,KAAKuwI,mBAGnBvwI,KAAKk/M,kBACDl/M,KAAKi0I,cACLj0I,KAAKgjF,OAAShjF,KAAKuwI,kBAGnBvwI,KAAKgjF,OAAS0rD,GAGf1uI,KAAKgjF,QAGT36D,iBACH,MAAMvoB,EAAOE,KAAKiK,MAAMwkB,UACxB,GAAI3uB,EAAKw0I,UAAW,CAEhB,IADax0I,EAAKkwG,UACRj1E,cAEN,OADA/6B,KAAKivG,MAAMnvG,EAAK+xB,YAAc/xB,GACvB,EAGf,OAAO,EAGJuoB,gBACH,MAAMmhG,EAAYxpH,KAAKiK,MAAMxC,WAAWgT,eAClC0kM,EAAuB12L,EAAIjL,aAAagsG,EAAU9uG,YAClDmkM,EAAY7+M,KAAKiK,MAAMwkB,UAE7B,GAAI0wL,EAAY,CACZ,MAAM38F,EAAWq8F,EAAU5+L,YAAY,QAAQ,GAEzCsoI,EAAQ,IAAIp+H,EAAUm4D,YAC5BimE,EAAM7nE,QAAQ,CAAC55E,KAAMq4M,EAAY12D,OAAQzoJ,KAAKiK,MAC1ChH,KAAMu/G,EAAUgmC,MAAOhmC,EAASkmC,gBAChCnpI,MAAO4/L,EAAW94M,aACtBrG,KAAKiK,MAAMqW,IAAIioI,QAGfvgI,EAAApmB,QAAGK,IAAI,aAAc,4CACW4c,KAAKC,UAAU0qG,MAIhDnhG,oBACH,IAAIs2L,EAAW,KACf,MAAMS,EAAiBrhN,OAAOutC,OAAOtrC,KAAKivG,OAC1C,GAAImwG,EAAe79M,OAAS,EAAG,CAC3B,MAAM89M,EAAWr3L,EAAApmB,QAAG4b,aAAa4hM,GACjC,OAAO,IAAIzmG,EAAAE,KAAK62B,WAAW1vI,KAAKiK,MAAOo1M,EAASzjM,SAEpD,MAAM1R,EAAYlK,KAAKiK,MAAMq5B,WAAWmyD,eACxC,IAAK,IAAIp4F,EAAI,EAAGA,EAAI6M,EAAU3I,OAAQlE,IAAK,CACvC,MAAMyC,EAAOoK,EAAU7M,GACnByC,EAAKw0I,YACLqqE,EAAW,IAAIhmG,EAAAE,KAAK62B,WAAW1vI,KAAKiK,MAAOnK,EAAK8b,UAMxD,OAHK+iM,IACD3+M,KAAK++M,aAAe,IAEjBJ,EAGJt2L,kBACH,MACMi6E,GADYtiG,KAAKiK,MAAMxC,WAAWgT,eACZrE,UAC5B,IAAIuoM,EAAW,KACf,MAAME,EAAY7+M,KAAKiK,MAAMwkB,UAE7B,GAAI6zE,GAAYtiG,KAAKs/M,iBACjBt/M,KAAKu/M,gBACLv/M,KAAKgjF,OAAS0rD,OAEb,GAAIpsC,GAAYtiG,KAAK++M,cAAgB,EACtCJ,EAAW3+M,KAAKw/M,wBAEf,CACD,MAAMt1M,EAAYlK,KAAKiK,MAAMq5B,WAAWmyD,eAClCgqH,EAAa,KACnBd,EAAWC,EAAsB5+M,KAAKiK,MAAOC,EAAWu1M,EACpD3/M,GAAQA,EAAKk+G,kBAEC6gG,EAAU7oH,WAAah2F,KAAKg/M,cAAgB,EAE1DjhN,OAAOutC,OAAOm0K,GAAYp1M,QAASvK,IAC/B,GAAIA,EAAKk2F,UAAW,CAChB,MAAM1qE,EAAKxrB,EAAK8b,QACVw+G,EAAQt6H,EAAK+xB,WACnB,IAAK7xB,KAAKi/M,aAAa//M,eAAek7H,GAGlC,OAFAp6H,KAAKg/M,aAAe,QACpBL,EAAW,IAAIhmG,EAAAE,KAAK62B,WAAW1vI,KAAKiK,MAAOqhB,OAMlDuzL,EAAU7oH,YACfh2F,KAAKi/M,aAAaJ,EAAUhtL,YAAcgtL,EAAUjjM,QAChD5b,KAAK0/M,mBACLf,EAAW,IAAIF,EAAgBz+M,KAAKiK,SAIvC00M,IAGDA,EAAW,IAAIhmG,EAAAE,KAAKrpG,QAAQxP,KAAKiK,MAAO,KAC/BypG,YAAY1zG,KAAK2/M,gBAAgB9gN,KAAKmB,OAKnD2+M,GACA3+M,KAAKwwI,WAAWmuE,GAKjBt2L,gBAAgBpS,EAAGC,GACtB,MAAMb,EAAMrV,KAAKiK,MAAMP,WAAW8Z,SAClC,GAAInO,EAAIwY,MAAM5X,EAAGC,GAAI,CACjB,MAAMpW,EAAOuV,EAAIoZ,QAAQxY,EAAGC,GACxBpW,EAAKw0I,YACLt0I,KAAKivG,MAAMnvG,EAAK+xB,YAAc/xB,IAKnCuoB,iBAKH,OAJkBroB,KAAKiK,MAAMq5B,WAAWmyD,eACXtrF,OAAOzM,GACF,eAA9BA,EAAE6C,cAAcC,WAELe,OAAS,GAOhC,SAASq9M,EAAsB30M,EAAOC,EAAWsgD,EAAQo1J,GACrD,IAAIjB,EAAW,KACf,IAAK,IAAIthN,EAAI,EAAGA,EAAI6M,EAAU3I,OAAQlE,IAAK,CACvC,MAAMyC,EAAOoK,EAAU7M,GACvB,GAAIyC,EAAKwiG,WAAY,CACjB,MAAMx7F,EAAOhH,EAAK4a,WAAW,GAC7B,IAAK5T,EAAKoC,IAAI,UAAW,CACrBy1M,EAAW,IAAIhmG,EAAAE,KAAKq7B,QAAQjqI,EAAOnD,GACnC,OAKJ0jD,GACIo1J,EAAgB11M,EAAU7M,MAC1BmtD,EAAM1qD,EAAK+xB,YAAc/xB,GAIrC,OAAO6+M,EA3LXxhN,EAAA27G,YAsKAH,EAAAE,KAAKllE,MAAQmlE,8UC3Qb,MAAA9wF,EAAAC,EAAAhrB,EAAA,IACAigC,EAAA9I,EAAAn3B,EAAA,KACAg3J,EAAAh3J,EAAA,IAOAE,EAAAqrH,UAAA,MAEWngG,oBAAoBpe,EAAsBnD,GAC7C,MAAMm/B,EAAiBh8B,EAAMxC,WACxBw+B,EAAIiF,QAAQpkC,IACbm/B,EAAIjY,QAAQlnB,GAEhBm/B,EAAI2pH,UAAU9oJ,GAQlBuhB,YAAYpe,GACRjK,KAAKgmH,OAAS/7G,EACdjK,KAAK6/M,KAAO,IAAI3iL,EAAKkwD,UAAUnjF,GAC/BjK,KAAK8/M,IAAM,IAAI7rD,EAAAxF,UAAUxkJ,GAItBoe,QAAQvhB,GACX9G,KAAK6/M,KAAK7xL,QAAQlnB,GAGfuhB,QAAQvhB,GACX,OAAO9G,KAAK6/M,KAAK30K,QAAQpkC,GAGtBuhB,WAAWvhB,GACd,OAAO9G,KAAK6/M,KAAK/kM,WAAWhU,GAGzBuhB,aAAavhB,EAAMhI,GACtB,OAAOkB,KAAK6/M,KAAKtX,aAAazhM,EAAMhI,GAGjCupB,iBACH,OAAOroB,KAAK6/M,KAAK5c,iBAId56K,QAAQvhB,EAAM1C,GACjB,GAAIpE,KAAK6/M,KAAK30K,QAAQpkC,IAClB,GAAIA,EAAK8/B,QAEL,OADA9/B,EAAK8/B,QAAQxiC,IACN,OAIX4jB,EAAApmB,QAAGK,IAAI,gBAAiB,UAAW,iCAEvC,OAAO,EAIJomB,aAAavhB,GAKhB,QAJiB9G,KAAK8/M,IAAI74M,YACRjH,KAAK6/M,KAAK54M,YACaH,EAAKG,YAC5BjH,KAAKgmH,OAAO+5F,gBAM3B13L,SAASvhB,GACZ,GAAI9G,KAAK6/M,KAAK/kM,WAAWhU,GAAO,CAC5B,MAAMiR,EAAQ/X,KAAKgmH,OAAOt8G,WACpBs2M,EAAchgN,KAAKijM,kBAClBhtL,EAAGC,GAAKlW,KAAKgmH,OAAOpqG,QAC3B,GAAI7D,EAAMiW,QAAQgyL,EAAa/pM,EAAGC,GAC9B,OAAO,EAGPlW,KAAK6/M,KAAK7xL,QAAQgyL,GAG1B,OAAO,EAGJ33L,WAAWvhB,EAAMhI,GACpB,GAAIkB,KAAKuoM,aAAazhM,EAAMhI,GAAI,CAC5B,MAAMiZ,EAAQ/X,KAAKgmH,OAAOt8G,WACpBs2M,EAAchgN,KAAKijM,kBAClBhtL,EAAGC,GAAKlW,KAAKgmH,OAAOpqG,QAC3B,GAAI7D,EAAMiW,QAAQgyL,EAAa/pM,EAAGC,GAC9B,OAAO,EAGPlW,KAAK6/M,KAAK7xL,QAAQgyL,GAG1B,OAAO,EAIJ33L,iBAAiBvhB,GACpB,OAAI9G,KAAK6/M,KAAK/kM,WAAWhU,GACd9G,KAAKijM,iBAET,KAGJ56K,eACH,OAAOroB,KAAK6/M,KAGTx3L,eACH,OAAOroB,KAAK8/M,IAITz3L,UAAUvhB,GACb,GAAI9G,KAAK6/M,KAAK30K,QAAQpkC,GAAO,CAEzB,MAAMm5M,EAASjgN,KAAKkgN,gBAAgBp5M,GACpC,GAAIkhB,EAAApmB,QAAG6D,cAAc,CAACw6M,IAGlB,OAFAj4L,EAAApmB,QAAGK,IAAI,gBAAiB,YACpB,4CACG,EAGX,GAAIjC,KAAK8/M,IAAIlwD,UAAUqwD,GACnB,OAAO,EAGPjgN,KAAK6/M,KAAK7xL,QAAQiyL,QAItBj4L,EAAApmB,QAAGK,IAAI,gBAAiB,YACpB,mCAER,OAAO,EAGJomB,gBAAgBvhB,GAEnB,OADY9G,KAAK6/M,KAAK/kM,WAAWhU,GAEb9G,KAAK6/M,KAAK5c,iBAIvB,KAIJ56K,YAAYvhB,EAAMhI,GACrB,GAAIkB,KAAK6/M,KAAK30K,QAAQpkC,IACN9G,KAAK6/M,KAAKtX,aAAazhM,EAAMhI,GAChC,CACL,MAAMkkM,EAAchjM,KAAK6/M,KAAK5c,iBAC9B,GAAIjjM,KAAK8/M,IAAIlwD,UAAUozC,GACnB,OAAO,EAGPhjM,KAAK6/M,KAAK7xL,QAAQg1K,GAI9B,OAAO,EAIJ36K,YAAY6mI,EAAUpwJ,EAAG4gB,GAC5B,GAAIsI,EAAApmB,QAAG6D,cAAc,CAACypJ,IAAY,CAC9B,IAAI7qJ,EAAM,2BACVA,aAAiB6qJ,UAAiBpwJ,eAAe4gB,KACjDsI,EAAApmB,QAAGK,IAAI,eAAgB,cAAeoC,GAE1C,MAAM47M,EAASjgN,KAAK8/M,IAAIn3F,QAAQumC,GAChC,IAAKlnI,EAAApmB,QAAG6D,cAAc,CAACw6M,KACfjgN,KAAK8/M,IAAIhwD,YAAYZ,EAAUpwJ,EAAG4gB,GAAa,CAC/C,MAAMygM,EAAWngN,KAAK8/M,IAAIrwD,cAAcP,EAAUxvI,GAClD,GAAiB,OAAbygM,EAEA,OADAngN,KAAKguB,QAAQmyL,IACN,EAInB,OAAO,EAIJ93L,kBAAkB6mI,EAAUpwJ,EAAG4gB,GAClC,MAAMugM,EAASjgN,KAAK8/M,IAAIn3F,QAAQumC,GAChC,OAAKlnI,EAAApmB,QAAG6D,cAAc,CAACw6M,KACfjgN,KAAK8/M,IAAIhwD,YAAYZ,EAAUpwJ,GACxBkB,KAAK8/M,IAAIrwD,cAAcP,EAAUxvI,GAGzC,KAGJ2I,YACH,MAAMvhB,EAAO9G,KAAK8/M,IAAIn3F,QAAQ,QAC9B,OAAK3gG,EAAApmB,QAAG6D,cAAc,CAACqB,IAChB,KADgCA,EAIpCuhB,mBACH,MAAMvhB,EAAO9G,KAAK8/M,IAAIn3F,QAAQ,iBAC9B,OAAK3gG,EAAApmB,QAAG6D,cAAc,CAACqB,IAIhB,KAHyBA,EAM7BuhB,aACH,MAAMvhB,EAAO9G,KAAK8/M,IAAIn3F,QAAQ,WAC9B,OAAI7hH,GAIG,KAGJuhB,YAAY6mI,GACf,OAAOlvJ,KAAK8/M,IAAIn3F,QAAQumC,GAKrB7mI,gBAAgBvhB,GAEnB,OADW9G,KAAK8/M,IAAIlwD,UAAU9oJ,iVCzOtC,MAAAkhB,EAAAC,EAAAhrB,EAAA,IACAotF,EAAAptF,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,KAOaE,EAAAgnJ,IAAW,GAEXhnJ,EAAAymH,oBAAsB,SACtBzmH,EAAAinJ,mBAAqB,KAClCjnJ,EAAAgnJ,IAAIvgC,oBAAsBzmH,EAAAymH,oBAC1BzmH,EAAAgnJ,IAAIC,mBAAqBjnJ,EAAAinJ,mBAEzB,MAAag8D,EAKT/3L,YAAYyW,GACR9+B,KAAKgmH,OAASlnF,EAAMquF,WACpBntH,KAAK8+B,MAAQA,GAPrB3hC,EAAAijN,UAaA,MAAat3D,UAAkBs3D,EAEpB/3L,QAAQjkB,GACb,IAAI6F,EAAQ7F,EAAIgb,OAMhB,GALInV,EAAMG,WACJhG,EAAIgb,OAAOhV,cACbH,EAAQ7F,EAAIgb,OAAOuc,oBAAoB,IAGvC1xB,EAAO,CACT,MAAO2jK,EAAIC,GAAM7tK,KAAKgmH,OAAOpqG,SACtBo0H,EAAIC,GAAMhmI,EAAM2R,QAGvB,GAFayuE,EAAAzX,KAAKqjB,aAAa23E,EAAIC,EAAI79B,EAAIC,IACvBjoH,EAAApmB,QAAGiG,oBAAoB7H,KAAKgmH,QACvB,CACrB,MAAMW,EAAa,IAAIx8F,EAAU0uD,OAAO,CAACz5D,OAAQnV,IAEjD,OADAjK,KAAKgmH,OAAO1lG,IAAIqmG,GACTxpH,EAAAymH,oBAGT,OAAO5jH,KAAK8+B,MAAM6qH,eAAe,kCAGrC,OAAO3pJ,KAAK8+B,MAAM6qH,eAAe,gCAvBvCxsJ,EAAA2rJ,YA2BA3rJ,EAAAgnJ,IAAItrE,OAASiwE,EAEb,MAAaE,UAAmBo3D,EAErB/3L,QAAQjkB,GACX,MAAMikM,EAAQroM,KAAKgmH,OAAOv+G,WAC1B,IAAI+3B,EAAW,EACXx/B,KAAKgmH,OAAO98G,IAAI,gBAChBs2B,EAAW,GAIf,IAAK,IAAIniC,EAAI,EAAGA,EAAImiC,EAAUniC,IAAK,CAG/B,MAAMmK,EAAU6gM,EAAMp2D,kBAAkB,UAAW,EAAG,GACtD,GAAKjqH,EAAApmB,QAAG6D,cAAc,CAAC+B,IA+CnB,OAAOxH,KAAK8+B,MAAM6qH,eAAe,wBA5CjC,GAAIniJ,EAAQ0B,IAAI,QAAS,CACrB,MAAMvB,EAAa0gM,EAAMh/L,eACpBy/G,YAAY,iBACjB,GAAmB,OAAfnhH,EAAqB,CACrB,MAAMtD,EAAM,8BACZ,OAAOrE,KAAK8+B,MAAM6qH,eAAetlJ,GAEhC,CACD,MACMq7B,EADOl4B,EACuBw2F,cAC9B3+D,EAAc13B,EAA6B61F,gBACjD,GAAIx9F,KAAKgmH,OAAO98G,IAAI,aAAc,CAC9B,MAAMmyJ,EAAK,MACX,KAAKA,EAAGxkI,KAAK6I,IAAc27H,EAAGxkI,KAAKwI,IAC3BK,IAAaL,GAAY,CACzB,MAAMh7B,EAAM,8BACZ,OAAOrE,KAAK8+B,MAAM6qH,eAAetlJ,SAIxC,GAAIq7B,IAAaL,EAAY,CAC9B,MAAMh7B,EAAM,8BACZ,OAAOrE,KAAK8+B,MAAM6qH,eAAetlJ,KAK7C,GAAK2jB,EAAApmB,QAAG6D,cAAc,CAACrB,EAAIgb,SAYvB4I,EAAApmB,QAAGK,IAAI,eAAgB,gBACnB,iCAb6B,CACjC,MAAOgU,EAAGC,GAAK9R,EAAIgb,OAAOxD,QACpBs2H,EAAQ,IAAI/nH,EAAU0a,QAAQ7kC,KAAKgmH,QACzCksB,EAAMp4D,YAAY7jE,EAAGC,GACrBg8H,EAAMC,UAAUnqH,EAAApmB,QAAGuH,iBAAiBnJ,KAAKgmH,OAAQx+G,IACjD0qI,EAAMt0H,UAAUoK,EAAApmB,QAAGwH,iBAAiBpJ,KAAKgmH,OAAQx+G,IACjD0qI,EAAME,SAASpqH,EAAApmB,QAAG4H,gBAAgBxJ,KAAKgmH,OAAQx+G,IAC/CA,EAAQ8Y,IAAI4xH,GAEZlyI,KAAK8+B,MAAMlwB,OAASoZ,EAAApmB,QAAGgN,OAAOlB,SAY1C,OAAOvQ,EAAAymH,qBAjEfzmH,EAAA6rJ,aAqEA7rJ,EAAAgnJ,IAAIt/G,QAAUmkH,EAGd,MAAaC,UAAmBm3D,EAErB/3L,QAAQjkB,GACX,GAAIA,EAAIlF,eAAe,QAAS,CAC5B,MAAM4H,EAAO1C,EAAI0C,KACjB,IAAI2B,GAAS,EACTpE,uBAA2ByC,EAAKpF,aAOpC,GAN4B,mBAAjBoF,EAAK8/B,UACZ5mC,KAAK8+B,MAAMlwB,OAASoZ,EAAApmB,QAAGgN,OAAOX,IAC9BnH,EAAK8/B,QAAQ,CAACxnB,OAAQhb,EAAIgb,SAC1B3W,GAAS,GAGTrE,EAAIlF,eAAe,YACfuJ,IACApE,cAAkByC,EAAKpF,cAE3B0C,EAAI8sD,SAAS,CAAC7sD,MAAKoE,gBAElB,GAAKA,EAQRuf,EAAApmB,QAAGslB,oBAAoBpgB,EAAKpF,kBARZ,CAEd,MAAMsiM,EAAU,IAAI75K,EAAUo7D,QAC9By+G,EAAQzlG,QAAQz3F,GAChBk9L,EAAQx/G,UAAUpgF,EAAIgb,QACtBpf,KAAKgmH,OAAO1lG,IAAI0jL,SAOpBh8K,EAAApmB,QAAGK,IAAI,eAAgB,gBAAiB,mBAE5C,OAAO9E,EAAAymH,qBAjCfzmH,EAAA8rJ,aAqCA9rJ,EAAAgnJ,IAAI5+D,QAAU0jE,EAGd,MAAaI,UAAsB+2D,EAExB/3L,QAAQjkB,GACX,MACMk1J,EADOl1J,EAAIgb,OACEuO,cACbq2K,EAAU,IAAI75K,EAAUi7D,WAO9B,OANAk0E,EAAMjvJ,QAAQ4jB,IACNA,EAAKkM,OACL6pK,EAAQqc,WAAWpyL,KAG3BjuB,KAAKgmH,OAAO1lG,IAAI0jL,GACT7mM,EAAAymH,qBAZfzmH,EAAAksJ,gBAeAlsJ,EAAAgnJ,IAAI/+D,WAAaikE,EAEjB,MAAaH,UAAoBk3D,EAExB/3L,QAAQjkB,GACX,MAAMikM,EAAQroM,KAAKgmH,OAAOv+G,WACpBo3M,EAAY7+M,KAAKgmH,OAAOv3F,UAC9B,IAAIhmB,GAAS,EACTpE,oBAAwBD,EAAI0C,KAAKpF,YACrC,MAAM4+M,EAAYl8M,EAAImb,OAASnb,EAAI0C,KAAKT,WAAajC,EAAImb,MACrDnb,EAAI0C,KAAKT,WAEb,IAAIk6M,GAAgB,EACpB,GAAI1B,EAAUvqE,UAAW,CAErBisE,GADa1B,EAAU7uG,UACDj1E,cAG1B,GAAIwlL,EAAe,CACf,MAAM/9F,EAAWq8F,EAAU5+L,YAAY,QAAQ,GAIzCugM,EAAY,KAEd,MAAMj4D,EAAQ,IAAIp+H,EAAUm4D,YAC5BimE,EAAM7nE,QAAQ,CAAC55E,KAAM1C,EAAI0C,KAAM2hJ,OAAQzoJ,KAAKgmH,OACxC/iH,KAAMu/G,EAAUtxD,SAAU9sD,EAAI8sD,SAC9Bs3F,MAAOhmC,EAASkmC,gBAAiBnpI,MAAO+gM,IAC5CtgN,KAAKgmH,OAAO1lG,IAAIioI,IAEpBlkJ,8BAXcm+G,EAASi+F,uBAAuBr8M,EAAI0C,KAAMw5M,iBAYxDtgN,KAAK8+B,MAAM6sH,eAAe3rJ,KAAK8+B,MAAMlwB,OAAQ4xM,EAAWn8M,GACpDD,EAAIlF,eAAe,aACnBkF,EAAI8sD,SAAS,CAAC7sD,MAAKoE,gBAGlB4/L,EAAMkJ,WAAWntM,EAAI0C,KAAMw5M,KAChC73M,GAAS,EACTpE,EAAM,iBAKV,OAHID,EAAIlF,eAAe,aACnBkF,EAAI8sD,SAAS,CAAC7sD,MAAKoE,WAEhBtL,EAAAymH,qBA1CbzmH,EAAA+rJ,cA8CA/rJ,EAAAgnJ,IAAIu8D,SAAWx3D,EAEf,MAAaC,UAAqBi3D,EAEvB/3L,QAAQjkB,GACX,MAAM0mM,EAAS,IAAI3gL,EAAU25D,MAK7B,OAHAgnH,EAAOpqH,QAAQt8E,GACf0mM,EAAO6V,aAAY,GACnB3gN,KAAKgmH,OAAO1lG,IAAIwqL,GACT3tM,EAAAymH,qBARfzmH,EAAAgsJ,eAYAhsJ,EAAAgnJ,IAAIy8D,UAAYz3D,EAGhB,MAAaC,UAAuBg3D,EAEzB/3L,QAAQjkB,GACX,MAAM0mM,EAAS,IAAI3gL,EAAU25D,MAI7B,OAHAgnH,EAAOpqH,QAAQt8E,GACf0mM,EAAO6V,aAAY,GACnB3gN,KAAKgmH,OAAO1lG,IAAIwqL,GACT3tM,EAAAymH,qBAPfzmH,EAAAisJ,iBAWAjsJ,EAAAgnJ,IAAI08D,YAAcz3D,qKCvQlB,MAAA03D,EAAA74L,EAAAhrB,EAAA,MACA+/B,EAAA//B,EAAA,IACA8jN,EAAA94L,EAAAhrB,EAAA,MAEaE,EAAA8uC,QAAU,CACnBtoC,OAAQq5B,EAAA4wF,WACRhqH,MAAOk9M,EAAAl/M,QACPlB,SAAUqgN,EAAAn/M,4KCPd,MAAAomB,EAAAC,EAAAhrB,EAAA,IACA+jN,EAAA/jN,EAAA,KACAqwH,EAAArwH,EAAA,IAEMgkN,EAAW,EAGjB,SAAS3iN,EAAMyD,EAAuB+D,GAClC,IAAI6sG,EAAS,EACb,GAAoB,iBAAT5wG,EACP,OAAQA,GACJ,IAAK,UACL,IAAK,QACL,IAAK,QAAS4wG,EAAS,EAAM7sG,EAAK,MAClC,IAAK,WACL,IAAK,OACL,IAAK,QAAS6sG,EAAS,IAAM7sG,EAAK,MAClC,IAAK,OAAQ6sG,EAAS,KAAO7sG,EAAK,MAClC,IAAK,MAAO6sG,EAAS,EAAM7sG,EAAK,MAChC,QAAS6sG,EAAS7sG,OAGjBkgB,OAAOC,UAAUlkB,KAEtB4wG,EAAS5wG,GAEb,OAAOmF,KAAK4C,MAAMm3M,EAAWtuG,GAsFjC,MAAMuuG,EAAuB,CACzB,CACItjN,KAAM,YAAasC,UAAW,sBAC9By8B,KAAM,IAAKwkL,SAAU,OACrBp/M,KAAM,WAAYzD,MAAOA,EAAM,IAAK0I,OAAQ,KAKhD,CACIpJ,KAAM,kBAAmBsC,UAAW,yBACpCy8B,KAAM,IACNwkL,SAAU,CAAC,OAAQ,QACnBp/M,KAAM,SACN0H,MAAO,EAAGnC,OAAQ,EAAG02B,QAAS,EAC9B2M,YAAY,GAEhB,CACI/sC,KAAM,SAAUgsC,KAAM,kBACtBu3K,SAAU,OACVljL,OAAQ,MAAOoB,WAAY,SAC3Br4B,OAAQ,GAAK1I,MAAOA,EAAM,IAE9B,CACIV,KAAM,YAAagsC,KAAM,kBACzBu3K,SAAU,OACVljL,OAAQ,MAAOoB,WAAY,SAC3Br4B,OAAQ,GAAK1I,MAAOA,EAAM,KAG9B,CACIV,KAAM,cAAegsC,KAAM,kBAC3Bu3K,SAAU,OACVljL,OAAQ,MAAOoB,WAAY,QAC3Br4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5Bu3K,SAAU,OACVljL,OAAQ,MAAOoB,WAAY,QAC3BrB,QAAS,EACTh3B,OAAQ,EAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,OAAQgsC,KAAM,kBACpBu3K,SAAU,UACVljL,OAAQ,MAAOx0B,MAAO,EAAGnC,QAAS,EAClCN,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,WAAYgsC,KAAM,kBACxBu3K,SAAU,CAAC,OAAQ,QAAS,WAC5BljL,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,MACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,aAAcgsC,KAAM,kBAC1Bu3K,SAAU,OACVljL,OAAQ,MAAOoB,WAAY,QAC3BrB,QAAS,EACTh3B,OAAQ,IAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,SAAUgsC,KAAM,kBACtB3L,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,MACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,WAAYgsC,KAAM,kBACxB3L,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,MACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,IAAKwoC,IAAK,UAExC,CACIlpC,KAAM,QAASgsC,KAAM,kBACrBu3K,SAAU,OACVljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,QACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,OAAQgsC,KAAM,kBACpBu3K,SAAU,OACVljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,OACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,QAASgsC,KAAM,kBACrB3L,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,QACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,WAAYgsC,KAAM,kBACxB3L,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,MACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,YAAagsC,KAAM,kBACzBu3K,SAAU,QACVljL,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EACnCqB,WAAY,QACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,cAAegsC,KAAM,kBAC3Bu3K,SAAU,CAAC,OAAQ,QACnBljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,OACZr4B,OAAQ,GAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,aAAcgsC,KAAM,kBAC1Bu3K,SAAU,OACVljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,MACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,KAE9B,CACIV,KAAM,YAAagsC,KAAM,kBACzBu3K,SAAU,OACVljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,SACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAE9B,CACIV,KAAM,mBAAoBgsC,KAAM,kBAChC3L,OAAQ,OAAQ32B,OAAQ,EAAG02B,QAAS,EACpCsM,MAAO02K,EAAAI,OAAOC,KAAKC,QACnBjiL,WAAY,MACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,KAAMwoC,IAAK,UAEzC,CACIlpC,KAAM,mBAAoBgsC,KAAM,kBAChCu3K,SAAU,QACVljL,OAAQ,UAAW32B,OAAQ,EAAG02B,QAAS,EACvCqB,WAAY,MACZr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAI9B,CACIV,KAAM,oBAAqBgsC,KAAM,kBACjC1pC,UAAW,oBACXihN,SAAU,UAAWx2K,YAAY,EACjCrjC,OAAQ,GAEZ,CACI1J,KAAM,iBAAkBgsC,KAAM,oBAC9BtiC,OAAQ,EACR22B,OAAQ,UAAWoB,WAAY,SAC/Br4B,OAAQ,IAAM1I,MAAOA,EAAM,KAE/B,CACIV,KAAM,sBAAuBgsC,KAAM,oBACnCtiC,OAAQ,EACR22B,OAAQ,UAAWD,QAAS,EAAGh3B,OAAQ,IAAM1I,MAAOA,EAAM,KAC1D+gC,WAAY,SAEhB,CACIzhC,KAAM,eAAgBgsC,KAAM,oBAC5B3L,OAAQ,WAAYoB,WAAY,OAChC/3B,OAAQ,EACR02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,MAE1C,CACIV,KAAM,gBAAiBgsC,KAAM,oBAC7B3L,OAAQ,WAAYoB,WAAY,QAChCrB,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,MAE1C,CACIV,KAAM,cAAegsC,KAAM,oBAC3BtiC,OAAQ,EACR22B,OAAQ,WAAYD,QAAS,EAC7BqB,WAAY,MAAOr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAEjD,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9BtiC,OAAQ,EACR22B,OAAQ,WAAYD,QAAS,EAC7BqB,WAAY,MAAOr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAEjD,CACIV,KAAM,qBAAsBgsC,KAAM,oBAClCtiC,OAAQ,EACR22B,OAAQ,WAAYD,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KAC1D+gC,WAAY,SAEhB,CACIzhC,KAAM,gBAAiBgsC,KAAM,oBAC7BtiC,OAAQ,EACR22B,OAAQ,WAAYD,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KAC1D+gC,WAAY,SAIhB,CACIzhC,KAAM,gBAAiBgsC,KAAM,kBAC7B1pC,UAAW,gBACXihN,SAAU,WAAYx2K,YAAY,EAClCrjC,OAAQ,GAEZ,CACI1J,KAAM,kBAAmBgsC,KAAM,gBAC/B3L,OAAQ,UAAWD,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACzD+gC,WAAY,UAEhB,CACIzhC,KAAM,uBAAwBgsC,KAAM,gBACpC3L,OAAQ,UAAWD,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACzD+gC,WAAY,SAEhB,CACIzhC,KAAM,gBAAiBgsC,KAAM,gBAC7B3L,OAAQ,UAAWoB,WAAY,OAC/BrB,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,MAE1C,CACIV,KAAM,iBAAkBgsC,KAAM,gBAC9B3L,OAAQ,MAAOoB,WAAY,QAC3BrB,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,MAE1C,CACIV,KAAM,eAAgBgsC,KAAM,gBAC5B3L,OAAQ,UAAWD,QAAS,EAC5BqB,WAAY,MAAOr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAEjD,CACIV,KAAM,kBAAmBgsC,KAAM,gBAC/B3L,OAAQ,WAAYD,QAAS,EAC7BqB,WAAY,SAAUr4B,OAAQ,IAAK1I,MAAOA,EAAM,MAEpD,CACIV,KAAM,sBAAuBgsC,KAAM,gBACnC3L,OAAQ,UAAWD,QAAS,EAAGh3B,OAAQ,EAAK1I,MAAOA,EAAM,KACzD+gC,WAAY,SAEhB,CACIzhC,KAAM,iBAAkBgsC,KAAM,gBAC9B3L,OAAQ,UAAWD,QAAS,GAAIh3B,OAAQ,IAAK1I,MAAOA,EAAM,KAC1D+gC,WAAY,SAEhB,CACIzhC,KAAM,kBAAmBgsC,KAAM,gBAC/B3L,OAAQ,WAAYD,QAAS,GAAIh3B,OAAQ,EAAK1I,MAAOA,EAAM,KAC3D+gC,WAAY,SAIhB,CACIzhC,KAAM,iBAAkBgsC,KAAM,kBAC9B1pC,UAAW,uBACXihN,SAAU,aAAcx2K,YAAY,GAExC,CACI/sC,KAAM,oBAAqBgsC,KAAM,iBACjC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,UAEhB,CACIzhC,KAAM,yBAA0BgsC,KAAM,iBACtC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,kBAAmBgsC,KAAM,iBAC/B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,QAEhB,CACIzhC,KAAM,oBAAqBgsC,KAAM,iBACjC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,UAEhB,CACIzhC,KAAM,mBAAoBgsC,KAAM,iBAChC3L,OAAQ,MAAOoB,WAAY,QAC3B/3B,OAAQ,EAAG02B,QAAS,EACpBh3B,OAAQ,GAAK1I,MAAOA,EAAM,MAE9B,CACIV,KAAM,mBAAoBgsC,KAAM,iBAChC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,mBAAoBgsC,KAAM,iBAChC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,wBAAyBgsC,KAAM,iBACrC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,OAIhB,CACIzhC,KAAM,kBAAmBgsC,KAAM,kBAC/B1pC,UAAW,kBACXihN,SAAU,SAAUx2K,YAAY,GAEpC,CACI/sC,KAAM,eAAgBgsC,KAAM,kBAC5B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,UAEhB,CACIzhC,KAAM,oBAAqBgsC,KAAM,kBACjC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,aAAcgsC,KAAM,kBAC1B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,EAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,QAEhB,CACIzhC,KAAM,YAAagsC,KAAM,kBACzB3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,OAEhB,CACIzhC,KAAM,eAAgBgsC,KAAM,kBAC5B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,UAEhB,CACIzhC,KAAM,cAAegsC,KAAM,kBAC3B3L,OAAQ,MAAOoB,WAAY,QAC3B/3B,OAAQ,EAAG02B,QAAS,EACpBh3B,OAAQ,EAAK1I,MAAOA,EAAM,MAE9B,CACIV,KAAM,cAAegsC,KAAM,kBAC3B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,EAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,cAAegsC,KAAM,kBAC3B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,kBAAmBgsC,KAAM,kBAC/B3L,OAAQ,WACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,cAAegsC,KAAM,kBAC3B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,EAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAIhB,CACIzhC,KAAM,iBAAkBgsC,KAAM,kBAC9B1pC,UAAW,iBACXihN,SAAU,YAAax2K,YAAY,EACnCpI,YAAa,CAAC+qF,EAAAO,eAAe,EAAG,UAAW,UAE/C,CACIjwH,KAAM,cAAegsC,KAAM,iBAC3B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,UAEhB,CACIzhC,KAAM,mBAAoBgsC,KAAM,iBAChC3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,GAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,YAAagsC,KAAM,iBACzB3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,QAEhB,CACIzhC,KAAM,WAAYgsC,KAAM,iBACxB3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,OAEhB,CACIzhC,KAAM,aAAcgsC,KAAM,iBAC1B3L,OAAQ,MAAOoB,WAAY,QAC3B/3B,OAAQ,EAAG02B,QAAS,EACpBh3B,OAAQ,EAAK1I,MAAOA,EAAM,MAE9B,CACIV,KAAM,iBAAkBgsC,KAAM,iBAC9B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,aAAcgsC,KAAM,iBAC1B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SAEhB,CACIzhC,KAAM,iBAAkBgsC,KAAM,iBAC9B3L,OAAQ,UACR32B,OAAQ,EAAG02B,QAAS,EAAGh3B,OAAQ,IAAK1I,MAAOA,EAAM,KACjD+gC,WAAY,SACZkD,YAAa,CAAC+qF,EAAAO,eAAe,EAAG,UAAW,UAI/C,CACIjwH,KAAM,aAAcmE,KAAM,SAAU7B,UAAW,mBAC/Cy8B,KAAM,IAAKgO,YAAY,EAAMrjC,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,GAGpE,CACIvhC,KAAM,OAAQgsC,KAAM,aAAc1pC,UAAW,kBAC7C8G,OAAQ,EAAKg3B,QAAS,EAAGoB,WAAY,QAAS9gC,MAAOA,EAAM,KAE/D,CACIV,KAAM,eAAgBgsC,KAAM,aAC5B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EAAGC,WAAY,OACpD9gC,MAAOA,EAAM,KAEjB,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B1pC,UAAW,kBACX8G,OAAQ,GAAKg3B,QAAS,EAAGoB,WAAY,QAAS9gC,MAAOA,EAAM,MAE/D,CACIV,KAAM,qBAAsBgsC,KAAM,aAClC1pC,UAAW,kBACX8G,OAAQ,GAAKm4B,WAAY,EAAGC,WAAY,QAAS9gC,MAAOA,EAAM,MAElE,CACIV,KAAM,aAAcgsC,KAAM,aAC1B1pC,UAAW,kBACX8G,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EAAGC,WAAY,QACpD9gC,MAAOA,EAAM,MAEjB,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EAAGC,WAAY,OACpD9gC,MAAOA,EAAM,IACbqkC,QAAS,CAAC,CAACE,QAAS,YAExB,CACIjlC,KAAM,aAAcgsC,KAAM,aAC1B5iC,OAAQ,GAAKg3B,SAAU,EAAGmB,WAAY,EAAGC,WAAY,OACrD9gC,MAAOA,EAAM,IACbqkC,QAAS,CAAC,CAACE,QAAS,aAAcirF,UAAU,GAGhD,CACIlwH,KAAM,oBAAqBgsC,KAAM,aAAce,YAAY,EAC3Dw2K,SAAU,UAAWjhN,UAAW,qBAEpC,CACItC,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,GAAKg3B,QAAS,EAAGoB,WAAY,OAAQ9gC,MAAOA,EAAM,KAE9D,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,GAAKm4B,WAAY,EAAGC,WAAY,OAAQ9gC,MAAOA,EAAM,KAEjE,CACIV,KAAM,gBAAiBgsC,KAAM,oBAC7B5iC,OAAQ,GAAKg3B,QAAS,EAAGoB,WAAY,OAAQ9gC,MAAOA,EAAM,KAE9D,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,QAAS9gC,MAAOA,EAAM,KAEtC,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,EAAKg3B,QAAS,EAAG12B,QAAS,EAClC83B,WAAY,SAAU9gC,MAAOA,EAAM,KAIvC,CACIV,KAAM,kBAAmBgsC,KAAM,aAAce,YAAY,EACzDw2K,SAAU,OAAQjhN,UAAW,kBAEjC,CACItC,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,GAAKm4B,WAAY,EACzBC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,cAAegsC,KAAM,kBAC3B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,QAAS9gC,MAAOA,EAAM,KAEtC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,EAAG12B,QAAS,EAClC83B,WAAY,SAAU9gC,MAAOA,EAAM,KAGvC,CACIV,KAAM,kBAAmBgsC,KAAM,aAAce,YAAY,EACzDw2K,SAAU,QAASjhN,UAAW,mBAElC,CACItC,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,GAAKm4B,WAAY,EACzBC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,cAAegsC,KAAM,kBAC3B5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,KAErC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,QAAS9gC,MAAOA,EAAM,MAEtC,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,EAAG12B,QAAS,EAClC83B,WAAY,SAAU9gC,MAAOA,EAAM,KAIvC,CACIV,KAAM,oBAAqBgsC,KAAM,aAAce,YAAY,EAC3Dw2K,SAAU,UAAWjhN,UAAW,qBAEpC,CACItC,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,GAAKm4B,WAAY,EACzBC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,gBAAiBgsC,KAAM,oBAC7B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,QAAS9gC,MAAOA,EAAM,MAEtC,CACIV,KAAM,iBAAkBgsC,KAAM,oBAC9B5iC,OAAQ,IAAKg3B,QAAS,EAAG12B,QAAS,EAClC83B,WAAY,SAAU9gC,MAAOA,EAAM,MAIvC,CACIV,KAAM,gBAAiBgsC,KAAM,aAAce,YAAY,EACvDw2K,SAAU,WAAYjhN,UAAW,iBAErC,CACItC,KAAM,kBAAmBgsC,KAAM,gBAC/B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,kBAAmBgsC,KAAM,gBAC/B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,iBAAkBgsC,KAAM,gBAC9B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,MAErC,CACIV,KAAM,kBAAmBgsC,KAAM,gBAC/B5iC,OAAQ,GAAMg3B,QAAS,EAAGmB,WAAY,GACtCC,WAAY,QAAS9gC,MAAOA,EAAM,MAEtC,CACIV,KAAM,kBAAmBgsC,KAAM,gBAC/B5iC,OAAQ,EAAKg3B,QAAS,EAAG12B,QAAS,EAAG63B,WAAY,EACjDC,WAAY,SAAU9gC,MAAOA,EAAM,MAIvC,CACIV,KAAM,iBAAkBgsC,KAAM,aAAce,YAAY,EACxDw2K,SAAU,aAAcjhN,UAAW,wBAEvC,CACItC,KAAM,oBAAqBgsC,KAAM,iBACjC5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,OAAQ,MAE7C,CACIV,KAAM,oBAAqBgsC,KAAM,iBACjC5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,OAAQ,MAE7C,CACIV,KAAM,mBAAoBgsC,KAAM,iBAChC5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,OAAQ,MAE7C,CACIV,KAAM,oBAAqBgsC,KAAM,iBACjC5iC,OAAQ,EAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,QAAS9gC,MAAOA,EAAM,OAAQ,MAE9C,CACIV,KAAM,oBAAqBgsC,KAAM,iBACjC5iC,OAAQ,GAAKg3B,QAAS,EACtBoB,WAAY,SAAU9gC,MAAOA,EAAM,OAAQ,MAI/C,CACIV,KAAM,kBAAmBgsC,KAAM,aAAce,YAAY,EACzDw2K,SAAU,SAAUjhN,UAAW,mBAEnC,CACItC,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,QAAS,MAE9C,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,GAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,QAAS,MAE9C,CACIV,KAAM,cAAegsC,KAAM,kBAC3B5iC,OAAQ,IAAKg3B,QAAS,EAAGmB,WAAY,EACrCC,WAAY,OAAQ9gC,MAAOA,EAAM,QAAS,MAE9C,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,GAAImB,WAAY,EACtCC,WAAY,QAAS9gC,MAAOA,EAAM,QAAS,MAE/C,CACIV,KAAM,eAAgBgsC,KAAM,kBAC5B5iC,OAAQ,EAAKg3B,QAAS,EAAG12B,QAAS,EAClC83B,WAAY,SAAU9gC,MAAOA,EAAM,QAAS,MAIhD,CACIV,KAAM,cAAesC,UAAW,oBAAqBy8B,KAAM,IAC3D56B,KAAM,UAAW4oC,YAAY,EAC7BrjC,OAAQ,EAAG22B,OAAQ,MAAOx0B,MAAO,EAAGzC,OAAQ,IAEhD,CACIpJ,KAAM,OAAQgsC,KAAM,cAAe1pC,UAAW,iBAC9Cy8B,KAAM,IAAKsB,OAAQ,MAAOx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,IAElE,CACIpJ,KAAM,aAAcgsC,KAAM,cAAe1pC,UAAW,iBACpDy8B,KAAM,IAAKsB,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,GAEtE,CACIpJ,KAAM,YAAagsC,KAAM,cAAe1pC,UAAW,iBACnDy8B,KAAM,IAAKsB,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,IAEtE,CACIpJ,KAAM,WAAYgsC,KAAM,cAAe1pC,UAAW,iBAClDy8B,KAAM,IAAKsB,OAAQ,MAAOx0B,MAAO,EAAGnL,MAAOA,EAAM,IACjD+gC,WAAY,YAEhB,CACIzhC,KAAM,YAAagsC,KAAM,cAAe1pC,UAAW,iBACnD+9B,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK+gC,WAAY,QAE/D,CACIzhC,KAAM,aAAcgsC,KAAM,cAAe1pC,UAAW,kBACpD+9B,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK+gC,WAAY,QAE/D,CACIzhC,KAAM,iBAAkBgsC,KAAM,cAC9B1pC,UAAW,iBACXoH,OAAQ,EAAG22B,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,GAClEq4B,WAAY,SAEhB,CACIzhC,KAAM,eAAgBgsC,KAAM,cAAe1pC,UAAW,iBACtDoH,OAAQ,EAAG22B,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,GAClEq4B,WAAY,OAEhB,CACIzhC,KAAM,4BAA6BgsC,KAAM,cACzC1pC,UAAW,uBACXoH,OAAQ,EAAG22B,OAAQ,OAAQx0B,MAAO,EAAGnL,MAAOA,EAAM,IAAK0I,OAAQ,GAC/Dq4B,WAAY,SAAU8hL,SAAU,cAEpC,CACIvjN,KAAM,iBAAkBgsC,KAAM,cAC9BtiC,OAAQ,EAAGpH,UAAW,kBAAmBy8B,KAAM,IAAKwkL,SAAU,SAC9DljL,OAAQ,UAAWx0B,MAAO,EAAGnL,MAAOA,EAAM,KAAM0I,OAAQ,GACxDq4B,WAAY,YAEhB,CACIzhC,KAAM,wBAAyBgsC,KAAM,cACrC1pC,UAAW,kBACXoH,OAAQ,EAAG22B,OAAQ,WAAYx0B,MAAO,EAAGnL,MAAOA,EAAM,KAAM0I,OAAQ,GACpE67B,QAAS,iBAAkBxD,WAAY,OAI3C,CACIzhC,KAAM,oBAAqB+sC,YAAY,EACvC5oC,KAAM,gBAAiBy9B,SAAU,EACjCt/B,UAAW,0BACXoH,OAAQ,EAAG02B,QAAS,EAAGrB,KAAM,KAEjC,CACI/+B,KAAM,aAAcgsC,KAAM,oBAC1B1pC,UAAW,mBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,IAClC+gC,WAAY,MAAOr4B,OAAQ,GAE/B,CACIpJ,KAAM,kBAAmBgsC,KAAM,oBAC/B1pC,UAAW,mBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAClC+gC,WAAY,WAAYr4B,OAAQ,GAEpC,CACIpJ,KAAM,WAAYgsC,KAAM,oBACxB1pC,UAAW,iBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAClC+gC,WAAY,MAAOr4B,OAAQ,KAE/B,CACIpJ,KAAM,YAAagsC,KAAM,oBACzB1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAClC+gC,WAAY,MAAOr4B,OAAQ,GAE/B,CACIpJ,KAAM,iBAAkBgsC,KAAM,oBAC9B1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAClC+gC,WAAY,WAAYr4B,OAAQ,GAEpC,CACIpJ,KAAM,iBAAkBgsC,KAAM,oBAC9B1pC,UAAW,uBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,OAAQ,KAC1C+gC,WAAY,MAAOr4B,OAAQ,IAE/B,CACIpJ,KAAM,kBAAmBgsC,KAAM,oBAC/B1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAAMkhC,SAAU,EAClDH,WAAY,WAAYr4B,OAAQ,GAEpC,CACIpJ,KAAM,iBAAkBgsC,KAAM,oBAC9B1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGu0B,QAAS,EAAG1/B,MAAOA,EAAM,QAAS,KACvD+gC,WAAY,MAAOr4B,OAAQ,GAE/B,CACIpJ,KAAM,QAASgsC,KAAM,oBACrB1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGnL,MAAOA,EAAM,KAClC+gC,WAAY,QAASr4B,OAAQ,KAEjC,CACIpJ,KAAM,gBAAiBgsC,KAAM,oBAC7B1pC,UAAW,kBACXoH,OAAQ,EAAGmC,MAAO,EAAGw0B,OAAQ,MAAO3/B,MAAOA,EAAM,KACjD+gC,WAAY,QAASr4B,OAAQ,KAIjC,CACIpJ,KAAM,eAAgBgsC,KAAM,cAC5B1pC,UAAW,mBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,MAC/Cp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,KAE3C,CACIV,KAAM,cAAegsC,KAAM,cAC3B1pC,UAAW,mBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,WAC/Cp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,KAE3C,CACIV,KAAM,cAAegsC,KAAM,cAC3B1pC,UAAW,kBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,MAC/Cp4B,OAAQ,EAAG22B,OAAQ,UAAW3/B,MAAOA,EAAM,QAAS,KAExD,CACIV,KAAM,aAAcgsC,KAAM,cAC1B1pC,UAAW,kBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,WAC/Cp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,QAAS,KAEpD,CACIV,KAAM,eAAgBgsC,KAAM,cAC5B1pC,UAAW,iBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAM04B,SAAU,QAChDp4B,QAAS,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,KAE5C,CACIV,KAAM,qBAAsBgsC,KAAM,cAClC1pC,UAAW,kBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,MAC/Cp4B,OAAQ,GAAI22B,OAAQ,UAAW3/B,MAAOA,EAAM,QAAS,KAEzD,CACIV,KAAM,cAAegsC,KAAM,cAC3B1pC,UAAW,kBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,MAC/Cp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,QAAS,KAEpD,CACIV,KAAM,kBAAmBgsC,KAAM,cAC/B1pC,UAAW,uBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,IAAM04B,SAAU,WAChDp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,OAAQ,KAEnD,CACIV,KAAM,eAAgBgsC,KAAM,cAC5B1pC,UAAW,kBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,IAAM04B,SAAU,QAChDp4B,OAAQ,EAAG22B,OAAQ,MAAO3/B,MAAOA,EAAM,KAE3C,CACIV,KAAM,YAAagsC,KAAM,cACzB1pC,UAAW,iBACX6B,KAAM,OAAQ0H,MAAO,EAAGzC,OAAQ,GAAK04B,SAAU,WAC/Cp4B,OAAQ,EAAG22B,OAAQ,UAAW3/B,MAAOA,EAAM,MAM/C,CACIV,KAAM,aAAcsC,UAAW,mBAAoBy8B,KAAM,IACzD56B,KAAM,SAAU4oC,YAAY,EAAM3jC,OAAQ,GAC1C67B,QAAS,WAEb,CACIjlC,KAAM,iBAAkBgsC,KAAM,aAC9B9C,IAAK,CAACy6K,KAAM,CAAC3iL,GAAI,QAAStgC,MAAOA,EAAM,KAE3C,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B9C,IAAK,CAACrF,OAAQ,CAACO,SAAU,UAAW/D,OAAQ,MAAO7lB,KAAM,QACzD9Z,MAAOA,EAAM,KAEjB,CACIV,KAAM,qBAAsBgsC,KAAM,aAClC9C,IAAK,CAAC06K,KAAM,CAACx/K,SAAU,YACvB1jC,MAAOA,EAAM,KAEjB,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B9C,IAAK,CAAC26K,gBAAiB,CAAC7jN,KAAM,aAAc+1D,IAAK,QAC7Cz1D,IAAK,QAASI,MAAO,aACtBA,MAAOA,EAAM,KAEpB,CACIV,KAAM,wBAAyBgsC,KAAM,aACrC9C,IAAK,CAAC26K,gBAAiB,CAAC7jN,KAAM,SAAU+1D,IAAK,YACzCz1D,IAAK,YAAaI,MAAO,UAC1BA,MAAOA,EAAM,KAEpB,CACIV,KAAM,wBAAyBgsC,KAAM,aACrC9C,IAAK,CAAC46K,KAAM,CAACrkI,OAAQ,WAAY/+E,MAAOA,EAAM,KAElD,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B9C,IAAK,CAACjE,QAAS,CAACjlC,KAAM,SAAUokC,SAAU,eAC1C1jC,MAAOA,EAAM,KAEjB,CACIV,KAAM,sBAAuBgsC,KAAM,aACnC9C,IAAK,CAACjE,QAAS,CAACjlC,KAAM,YAAaokC,SAAU,QAC7C1jC,MAAOA,EAAM,KAEjB,CACIV,KAAM,yBAA0BgsC,KAAM,aACtC9C,IAAK,CAACrF,OAAQ,CAACO,SAAU,OAAQ/D,OAAQ,UAAW7lB,KAAM,QAC1D9Z,MAAOA,EAAM,MAEjB,CACIV,KAAM,iBAAkBgsC,KAAM,aAC9B9C,IAAK,CAACy6K,KAAM,CAAC3iL,GAAI,SAAUtgC,MAAOA,EAAM,MAE5C,CACIV,KAAM,wBAAyBgsC,KAAM,aACrC9C,IAAK,CAACjE,QAAS,CAACjlC,KAAM,WAAYokC,SAAU,SAC5C1jC,MAAOA,EAAM,MAEjB,CACIV,KAAM,iBAAkBgsC,KAAM,aAC9B9C,IAAK,CAAC26K,gBAAiB,CAAC7jN,KAAM,aAAc+1D,IAAK,QAC7Cz1D,IAAK,QAASI,MAAO,YACtBA,MAAOA,EAAM,MAEpB,CACIV,KAAM,sBAAuBgsC,KAAM,aACnC9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,UACvC/5E,MAAOA,EAAM,MAEjB,CACIV,KAAM,sBAAuBgsC,KAAM,aACnC9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,cACvC/5E,MAAOA,EAAM,MAEjB,CACIV,KAAM,qBAAsBgsC,KAAM,aAClC9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,aACvC/5E,MAAOA,EAAM,MAEjB,CACIV,KAAM,oBAAqBgsC,KAAM,aACjC9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,YACvC/5E,MAAOA,EAAM,MAEjB,CACIV,KAAM,qBAAsBgsC,KAAM,aAClC9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,aACvC/5E,MAAOA,EAAM,MAEjB,CACIV,KAAM,kBAAmBgsC,KAAM,aAC/B9C,IAAK,CAAC66K,WAAY,CAACrjN,MAAO,EAAG+5E,SAAU,UACvC/5E,MAAOA,EAAM,MAMjB,CACIV,KAAM,WAAYsC,UAAW,iBAAkBy8B,KAAM,IACrD31B,OAAQ,GAAKjF,KAAM,OAAQ4oC,YAAY,EACvC9H,QAAS,WAEb,CACIjlC,KAAM,UAAWgsC,KAAM,WAAYh7B,OAAQ,IAAKtQ,MAAOA,EAAM,KAEjE,CACIV,KAAM,UAAWgsC,KAAM,WAAYh7B,OAAQ,IAAKtQ,MAAOA,EAAM,IAC7DgsC,MAAOgjF,EAAAhjF,MAAM,QAAS,UAE1B,CACI1sC,KAAM,UAAWgsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,IAC9DgsC,MAAOgjF,EAAAhjF,MAAM,QAAS,SAE1B,CACI1sC,KAAM,WAAYgsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,KAEnE,CACIV,KAAM,aAAcgsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,KAErE,CACIV,KAAM,OAAQgsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,KAE/D,CACIV,KAAM,gBAAiBgsC,KAAM,WAAYh7B,OAAQ,IAAMtQ,MAAOA,EAAM,IACpE0I,OAAQ,GAAKsjC,MAAOgjF,EAAAhjF,MAAM,QAAS,QAEvC,CACI1sC,KAAM,YAAagsC,KAAM,WAAYh7B,OAAQ,IAAMtQ,MAAOA,EAAM,KAEpE,CACIV,KAAM,OAAQgsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,KAE/D,CACIV,KAAM,SAAUgsC,KAAM,WAAYh7B,OAAQ,IAAMtQ,MAAOA,EAAM,IAC7D0I,OAAQ,GAEZ,CACIpJ,KAAM,cAAegsC,KAAM,WAAYh7B,OAAQ,KAAMtQ,MAAOA,EAAM,KAEtE,CACIV,KAAM,eAAgBgsC,KAAM,WAAYh7B,OAAQ,IAAKtQ,MAAOA,EAAM,IAClEwoC,IAAK,CAAC06K,KAAM,CAACx/K,SAAU,SAE3B,CACEpkC,KAAM,YAAagsC,KAAM,WAAYh7B,OAAQ,IAAMtQ,MAAOA,EAAM,MAKlE,CACIV,KAAM,OAAQmE,KAAM,OAAQ6/M,KAAM,GAAI1hN,UAAW,iBACjDy8B,KAAM,IAAKgO,YAAY,GAE3B,CACI/sC,KAAM,SAAUgsC,KAAM,OACtB9C,IAAK,CAAC3Y,WAAY,CACd+lJ,YAAa,OAAQE,WAAY,EACjCV,WAAY,+BACZC,WAAY,kCAGpB,CACI/1K,KAAM,UAAWgsC,KAAM,OAAQjN,KAAM,IACrCmK,IAAK,CAAC5Y,cAAe,CACjBgmJ,YAAa,MACbR,WAAY,oCACZC,WAAY,0CAGpB,CACI/1K,KAAM,iBAAkBgsC,KAAM,QAElC,CACIhsC,KAAM,iBAAkBgsC,KAAM,OAC9B9C,IAAK,CAAC9Q,UAAW,CAACy+I,WAAY,OAAQzyI,SAAU,MAEpD,CACIpkC,KAAM,kBAAmBgsC,KAAM,OAC/B9C,IAAK,CAACqyG,WAAY,CAACv7I,KAAM,WAAYkwH,UAAU,GAEnD,CACIlwH,KAAM,OAAQgsC,KAAM,QAExB,CACIhsC,KAAM,gBAAiBgsC,KAAM,OAC7B1pC,UAAW,oBAIf,CACItC,KAAM,gBAAiBsC,UAAW,sBAAuBy8B,KAAM,IAC/D31B,OAAQ,GAAKjF,KAAM,YAAa4oC,YAAY,GAEhD,CACI/sC,KAAM,oBAAqBgsC,KAAM,gBACjCtrC,MAAOA,EAAM,MAAO,IAAK0I,OAAQ,GAErC,CACIpJ,KAAM,sBAAuBgsC,KAAM,gBACnCtrC,MAAOA,EAAM,MAAO,IAAK0I,OAAQ,KAErC,CACIpJ,KAAM,qBAAsBgsC,KAAM,gBAClCtrC,MAAOA,EAAM,MAAO,KAAM0I,OAAQ,KAEtC,CACIpJ,KAAM,sBAAuBgsC,KAAM,gBACnCtrC,MAAOA,EAAM,MAAO,KAAM0I,OAAQ,IAEtC,CACIpJ,KAAM,oBAAqBgsC,KAAM,gBACjCtrC,MAAOA,EAAM,MAAO,KAAM0I,OAAQ,IAItC,CACIpJ,KAAM,WAAY+sC,YAAY,EAC9B5oC,KAAM,OAAQ46B,KAAM,IACpBz8B,UAAW,iBAAkB8G,OAAQ,GAEzC,CACIpJ,KAAM,kBAAmBgsC,KAAM,WAC/B9C,IAAK,CAACy6K,KAAM,CAAC3iL,GAAI,QAAStgC,MAAOA,EAAM,OAAQ,MAEnD,CACIV,KAAM,qBAAsBgsC,KAAM,WAClC9C,IAAK,CAACjE,QAAS,CACXjlC,KAAM,aAAcokC,SAAU,YAC9BsnH,QAAS,CAACprI,cAAe,SAE7B5f,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,kBAAmBgsC,KAAM,WAC/B9C,IAAK,CAACjE,QAAS,CACXjlC,KAAM,aAAcokC,SAAU,YAC9BsnH,QAAS,CAACprI,cAAe,SAE7B5f,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,iBAAkBgsC,KAAM,WAC9B9C,IAAK,CAACjE,QAAS,CACXjlC,KAAM,aAAcokC,SAAU,YAC9BsnH,QAAS,CAAC1rI,UAAW,SAEzBtf,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,eAAgBgsC,KAAM,WAC5B9C,IAAK,CAAC3Y,WAAY,CAAC+lJ,YAAa,MAAOE,WAAY,IACnD91K,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,eAAgBgsC,KAAM,WAC5B9C,IAAK,CAACjE,QAAS,CACXjlC,KAAM,WAAYokC,SAAU,eAEhC1jC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,eAAgBgsC,KAAM,WAC5B9C,IAAK,CAAC9Q,UAAW,CAACy+I,WAAY,OAAQzyI,SAAU,KAChD1jC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,gBAAiBgsC,KAAM,WAC7B9C,IAAK,CAAC9Q,UAAW,CAACy+I,WAAY,eAC9Bn2K,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,gBAAiBgsC,KAAM,WAC7B9C,IAAK,CAACjE,QAAS,CAACjlC,KAAM,SAAUokC,SAAU,aAC1C1jC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,qBAAsBgsC,KAAM,WAClC9C,IAAK,CAAC9Q,UAAW,CAACy+I,WAAY,YAAazyI,SAAU,MACrD1jC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,oBAAqBgsC,KAAM,WACjC9C,IAAK,SACLxoC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,gBAAiBgsC,KAAM,WAC7B9C,IAAK,CAAC3Y,WAAY,CAAC+lJ,YAAa,OAAQE,WAAY,IACpD91K,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,wBAAyBgsC,KAAM,WACrC9C,IAAK,CAAC9Q,UAAW,CAACy+I,WAAY,aAAczyI,SAAU,KACtD1jC,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,gBAAiBgsC,KAAM,WAC7B9C,IAAK,CAACrF,OAAQ,CAACO,SAAU,UAAW/D,OAAQ,UAAW7lB,KAAM,QAC7D9Z,MAAOA,EAAM,OAAQ,MAEzB,CACIV,KAAM,kBAAmBgsC,KAAM,WAC/B9C,IAAK,CAACjE,QAAS,CAACjlC,KAAM,cAAeokC,SAAU,YAC/C1jC,MAAOA,EAAM,OAAQ,MAIzB,CACIV,KAAM,cAAe+sC,YAAY,EACjC5oC,KAAM,UAAW46B,KAAM,KAE3B,CACI/+B,KAAM,WAAYgsC,KAAM,cACxB5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,IACrC4B,UAAW,kBAEf,CACItC,KAAM,iBAAkBgsC,KAAM,cAC9B5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrC4B,UAAW,wBAEf,CACItC,KAAM,UAAWgsC,KAAM,cACvB5iC,OAAQ,IAAM1I,MAAOA,EAAM,UAAW,KACtCq+B,KAAM,IAAK2N,MAAO,CAACC,GAAI,QAASC,GAAI,UAExC,CACI5sC,KAAM,eAAgBgsC,KAAM,cAC5B5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrC4B,UAAW,iBAEf,CACItC,KAAM,WAAYgsC,KAAM,cACxB5iC,OAAQ,IAAM1I,MAAOA,EAAM,UAAW,KACtCq+B,KAAM,IAAK2N,MAAO,CAACC,GAAI,OAAQC,GAAI,UAEvC,CACI5sC,KAAM,aAAcgsC,KAAM,cAC1B5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrC4B,UAAW,mBAEf,CACItC,KAAM,gBAAiBgsC,KAAM,cAC7B5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrC4B,UAAW,kBAEf,CACItC,KAAM,OAAQgsC,KAAM,cACpB5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrCq+B,KAAM,IAAKz8B,UAAW,wBAE1B,CACItC,KAAM,cAAegsC,KAAM,cAC3B5iC,OAAQ,GAAK1I,MAAOA,EAAM,UAAW,KACrCq+B,KAAM,IAAKz8B,UAAW,iBAK1B,CACItC,KAAM,mBAAoBkwH,UAAU,EACpC/rH,KAAM,OAAQ46B,KAAM,IAAKkG,QAAS,WAEtC,CACIjlC,KAAM,YAAagsC,KAAM,mBACzB1pC,UAAW,iBAEf,CACItC,KAAM,kBAAmBgsC,KAAM,mBAC/B1pC,UAAW,uBAEf,CACItC,KAAM,eAAgBgsC,KAAM,mBAC5B1pC,UAAW,oBAEf,CACItC,KAAM,eAAgBgsC,KAAM,mBAC5B1pC,UAAW,oBAEf,CACItC,KAAM,gBAAiBgsC,KAAM,mBAC7B1pC,UAAW,qBAQb2hN,EAAW,CACbC,MAAO95L,EAAApmB,QAAGoS,IAAIc,MACditM,MAAO/5L,EAAApmB,QAAGoS,IAAIY,OACdotM,OAAQh6L,EAAApmB,QAAGoS,IAAIc,MACfmtM,IAAKj6L,EAAApmB,QAAGoS,IAAIc,MAEZotM,KAAMl6L,EAAApmB,QAAGoS,IAAIY,OACbutM,SAAUn6L,EAAApmB,QAAGoS,IAAIc,MAEjBstM,IAAKp6L,EAAApmB,QAAGoS,IAAIY,OACZytM,SAAUr6L,EAAApmB,QAAGoS,IAAIY,OACjB0tM,MAAOt6L,EAAApmB,QAAGoS,IAAIY,QAIlBssM,EAAM72M,QAASvD,IACPA,EAAKu4B,WACDwiL,EAAS3iN,eAAe4H,EAAKu4B,cAC7Bv4B,EAAKm4B,WAAa4iL,EAAS/6M,EAAKu4B,aAG/Bv4B,EAAK44B,UACNmiL,EAAS3iN,eAAe4H,EAAK44B,YAC7B54B,EAAKm4B,WAAa4iL,EAAS/6M,EAAK44B,aAM5CviC,EAAAyE,QAAes/M,iFCn4CF/jN,EAAAikN,OAAc,GAI3BjkN,EAAAikN,OAAOC,KAAO,GACdlkN,EAAAikN,OAAOC,KAAKkB,OAAS,CAAC/3K,GAAI,SAC1BrtC,EAAAikN,OAAOC,KAAKmB,UAAY,CAACh4K,GAAI,eAC7BrtC,EAAAikN,OAAOC,KAAKoB,SAAW,CAACj4K,GAAI,eAC5BrtC,EAAAikN,OAAOC,KAAKqB,QAAU,CAACl4K,GAAI,eAC3BrtC,EAAAikN,OAAOC,KAAKsB,KAAO,CAACn4K,GAAI,SACxBrtC,EAAAikN,OAAOC,KAAKuB,QAAU,CAACp4K,GAAI,eAC3BrtC,EAAAikN,OAAOC,KAAKC,QAAU,CAAC/2K,GAAI,QAASC,GAAI,SACxCrtC,EAAAikN,OAAOC,KAAKwB,OAAS,CAACr4K,GAAI,eAC1BrtC,EAAAikN,OAAOC,KAAKprF,MAAQ,CAACzrF,GAAI,SACzBrtC,EAAAikN,OAAOC,KAAKyB,SAAW,CAACt4K,GAAI,SAC5BrtC,EAAAikN,OAAOC,KAAK0B,KAAO,CAACv4K,GAAI,SACxBrtC,EAAAikN,OAAOC,KAAKr9M,OAAS,CAACwmC,GAAI,SAC1BrtC,EAAAikN,OAAOC,KAAK2B,OAAS,CAACx4K,GAAI,SAC1BrtC,EAAAikN,OAAOC,KAAK4B,SAAW,CAACz4K,GAAI,SAC5BrtC,EAAAikN,OAAOC,KAAK6B,SAAW,CAAC14K,GAAI,SAI5BrtC,EAAAikN,OAAO+B,KAAO,GACdhmN,EAAAikN,OAAO+B,KAAKC,OAAS,SACrBjmN,EAAAikN,OAAO+B,KAAKE,UAAY,OACxBlmN,EAAAikN,OAAO+B,KAAKG,UAAY,SACxBnmN,EAAAikN,OAAO+B,KAAKI,MAAQ,OACpBpmN,EAAAikN,OAAO+B,KAAKK,QAAU,OACtBrmN,EAAAikN,OAAO+B,KAAKM,KAAO,MACnBtmN,EAAAikN,OAAO+B,KAAKO,KAAO,SACnBvmN,EAAAikN,OAAO+B,KAAKQ,QAAU,wFCuLtBxmN,EAAAyE,QArNiB,CACb,CACIhE,KAAM,MAAOsC,UAAW,mBACxBy8B,KAAM,IACNt4B,IAAK,CACDu/M,QAAS,mCAEb/gL,QAAS,CAAC,WAEd,CACIjlC,KAAM,SAAUsC,UAAW,sBAC3By8B,KAAM,IACNt4B,IAAK,CACDu/M,QAAS,kCAGjB,CACIhmN,KAAM,QAASsC,UAAW,qBAC1By8B,KAAM,IAAKkG,QAAS,CAAC,eAEzB,CACIjlC,KAAM,QAASsC,UAAW,qBAC1By8B,KAAM,IACNt4B,IAAK,CACDu/M,QAAS,wBAGjB,CACIhmN,KAAM,cAAesC,UAAW,2BAChCy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,qCAGjB,CACIhmN,KAAM,WAAYsC,UAAW,wBAC7By8B,KAAM,IAAKkG,QAAS,CAAC,aAAc,WAEvC,CACIjlC,KAAM,QAASsC,UAAW,qBAC1By8B,KAAM,KAEV,CACI/+B,KAAM,cAAesC,UAAW,4BAChCy8B,KAAM,IACNkG,QAAS,CAAC,WAEd,CACIjlC,KAAM,YAAasC,UAAW,0BAC9By8B,KAAM,IACNkG,QAAS,CAAC,WAEd,CACIjlC,KAAM,aAAcsC,UAAW,2BAC/By8B,KAAM,IACNkG,QAAS,CAAC,WAEd,CACIjlC,KAAM,aAAcsC,UAAW,2BAC/By8B,KAAM,IACNkG,QAAS,CAAC,WAEd,CACIjlC,KAAM,cAAesC,UAAW,4BAChCy8B,KAAM,IACNkG,QAAS,CAAC,WAEd,CACIjlC,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,IAAKkG,QAAS,CAAC,eAEzB,CACIjlC,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,IAAKkG,QAAS,CAAC,eAEzB,CACIjlC,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,KAEV,CACI/+B,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,IACNt4B,IAAK,CACDu/M,QAAS,mCAGjB,CACIhmN,KAAM,MAAOsC,UAAW,mBACxBy8B,KAAM,IAAKkG,QAAS,CAAC,eAEzB,CACIjlC,KAAM,aAAcsC,UAAW,0BAC/By8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,0CAGjB,CACIhmN,KAAM,yBACNsC,UAAW,iCACXy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,kDAGjB,CACIhmN,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,iCAGjB,CACIhmN,KAAM,mBAAoBsC,UAAW,2BACrCy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,0CAGjB,CACIhmN,KAAM,YAAasC,UAAW,yBAC9By8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,gDAGjB,CACIhmN,KAAM,wBACNsC,UAAW,gCACXy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,iDAGjB,CACIhmN,KAAM,QAASsC,UAAW,qBAC1By8B,KAAM,KAEV,CACI/+B,KAAM,OAAQsC,UAAW,oBACzBy8B,KAAM,IAAKkG,QAAS,CAAC,UACrBx+B,IAAK,CACDu/M,QAAS,0BAGjB,CACIhmN,KAAM,oBAAqBsC,UAAW,yBACtCy8B,KAAM,IAAKkG,QAAS,CAAC,SAAU,SAC/Bx+B,IAAK,CACDu/M,QAAS,uCAGjB,CACIhmN,KAAM,QAASsC,UAAW,qBAC1By8B,KAAM,IACNt4B,IAAK,CACDu/M,QAAS,yBAIjB,CACIhmN,KAAM,eAAgBsC,UAAW,4BACjCy8B,KAAM,IAAKkG,QAAS,CAAC,SACrBx+B,IAAK,CACDu/M,QAAS,2BAIjB,CACIhmN,KAAM,gBAAiBsC,UAAW,sBAClCy8B,KAAM,IAAKkG,QAAS,CAAC,eAQzB,CACI8H,YAAY,EAAM/sC,KAAM,MACxB++B,KAAM,IAAKz8B,UAAW,oBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,QACxB++B,KAAM,IAAKz8B,UAAW,sBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,OACxB++B,KAAM,IAAKz8B,UAAW,qBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,WACxB++B,KAAM,IAAKz8B,UAAW,yBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,OACxB++B,KAAM,IAAKz8B,UAAW,qBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,SACxB++B,KAAM,IAAKz8B,UAAW,uBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,WACxB++B,KAAM,IAAKz8B,UAAW,qBAE1B,CACIyqC,YAAY,EAAM/sC,KAAM,aACxB++B,KAAM,IAAKz8B,UAAW,oWCnN9B,MAAA8nB,EAAAC,EAAAhrB,EAAA,IACAqgC,EAAArgC,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IAqBMu4B,EAAW,CAAC,SAAU,QAAS,YAE/BosK,EAAkBx9L,IACpB,IAAKA,EAAK,CACN,MAAMC,EAAM,uCACZ2jB,EAAApmB,QAAGK,IAAI,aAAc,qDACmBoC,KAE5C,GAAID,EAAIlF,eAAe,UAAW,CAC9B,MAAMY,EAAOsE,EAAIgb,OACjB,GAAItf,EAAKsK,YACL,OAAOtK,EAAKgB,QAAQ,UAAU,GAGtC,OAAO,MAGL+iN,EAAoB,CAAC/8M,EAAMsY,EAAQo8J,KACrC,MAAM50I,EAAU,IAAIzc,EAAUo7D,QAC9B3+C,EAAQ49C,UAAUplE,GAClBwnB,EAAQ23D,QAAQz3F,GACZ00K,GACA50I,EAAQ6mF,UAAU+tD,GAEtB,MAAMl2F,EAAUt9D,EAAApmB,QAAG4e,eAAe1Z,EAAMsY,GACxCwnB,EAAQ43D,WAAWlZ,GACnBx+E,EAAKu5F,cAAc//E,IAAIsmB,IAUdzpC,EAAA4uC,QAAU,CAuBnBlF,QAAS,CAIL,CACIjpC,KAAM,MACNyqB,KAAKjkB,GACD,GAAIpE,KAAK8+F,YACqB,IAAtB9+F,KAAK8+F,aAAoB,CACzB,MAAMlhG,EAAOoC,KAAK0B,UAElB,OADAsmB,EAAApmB,QAAGslB,WAAWtpB,qCACP,EAGf,IAAK,IAAIP,EAAI,EAAGA,EAAI2C,KAAK2mC,SAASplC,OAAQlE,IACtC,GAAI2C,KAAK2mC,SAAStpC,GAAGG,KAAKwC,KAAMoE,GAC5B,OAAO,EAGf,OAAO,IAaf,CACIxG,KAAM,UACN0pC,SAAU,CAAC,OAAQ,YACnBE,SAAU,CAAC,WACXnf,KAAKjkB,GACD,MAAMo3K,EAAmB,CACrBx5I,SAAUhiC,KAAKonC,QAAQpF,SACvBwhD,WAAY,UACZ5lF,KAAMoC,KAAKonC,QAAQxpC,KACnBwhB,OAAQhb,EACRohF,WAAY,CAAC,SAAU,UAM3B,OAJIxlF,KAAKonC,QAAQkiH,UACbkyB,EAAQlyB,QAAUtpJ,KAAKonC,QAAQkiH,SAEnCu6D,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAMf,CACI59K,KAAM,aACN0pC,SAAU,CAAC,QACXE,SAAU,CAAC,OACXnf,KAAKjkB,GACD,MAAMo3K,EAAmB,CACrBnnD,IAAKr0H,KAAKonC,QAAQitF,IAClB7wC,WAAY,aACZ5lF,KAAMoC,KAAKonC,QAAQxpC,KACnBwhB,OAAQhb,EACRohF,WAAYhwD,GAGhB,OADAquL,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAQf,CACI59K,KAAM,kBACN0pC,SAAU,CAAC,OAAQ,MAAO,MAAO,SACjCE,SAAU,CAAC,MACXnf,KAAKjkB,GACD,MAAMo3K,EAAU,CACZp8J,OAAQhb,EACRohF,WAAYhwD,EACZ53B,KAAMoC,KAAKonC,QAAQxpC,KACnB+1D,IAAK3zD,KAAKonC,QAAQusB,IAAKz1D,IAAK8B,KAAKonC,QAAQlpC,IACzCI,MAAO0B,KAAKonC,QAAQ9oC,MACpBklF,WAAY,mBAGhB,OADAqgI,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAMf,CACI59K,KAAM,OACN0pC,SAAU,CAAC,UACXjf,KAAKjkB,GACD,MAAM6F,EAAQ23L,EAAex9L,GAC7B,GAAI6F,EAAO,CACP,MAAM65M,EAAa9jN,KAAKonC,QAAQi2C,OAAOvgD,aAWvC,OAVI7yB,EAAMf,IAAI46M,IAEV75M,EAAMyvB,OAAOoqL,GACb97L,EAAApmB,QAAGslB,QAAQjd,EAAMvI,UACX,yBAA2BoiN,IAGjC97L,EAAApmB,QAAGslB,QAAQlnB,KAAK0B,UAAY,eAEhCmiN,EAAkB7jN,KAAMiK,IACjB,EAEX,OAAO,IAMf,CACIrM,KAAM,SACNyqB,KAAKjkB,GACD,MACMC,KADOrE,KAAKqgG,cAAc3+F,qCACe1B,KAAK0B,YAUpD,OADAmiN,EAAkB7jN,KAAMoE,EARR,CAEZo/E,WAAY,gBACZmxF,SAAU,OACVv1J,OAAQhb,EACRovK,SAAUnvK,EACVmhF,WAAY,CAAC,eAGV,IAKf,CACI5nF,KAAM,OACN0pC,SAAU,CAAC,MACXjf,KAAKjkB,GACD,MAAM6F,EAAQ23L,EAAex9L,GAC7B,GAAI6F,EAAO,CACP,MACMo0F,EADM/gE,EAAAwE,KAAKnjC,OAAOqB,KAAKonC,QAAQxI,IACtB64C,OACf,GAAIxtE,EAAMf,IAAI,UAKV,OAJAe,EAAM/L,IAAI,UAAUg4E,MAAMmoB,GAC1BwlH,EAAkB7jN,KAAMiK,GACxB+d,EAAApmB,QAAGslB,QAAQjd,EAAMvI,UACb,WAAa1B,KAAK0B,YACf,OAIXsmB,EAAApmB,QAAG2lB,SACC,iDAER,OAAO,IAMf,CACI3pB,KAAM,SACN0pC,SAAU,CAAC,WAAY,SAAU,QACjCjf,KAAKjkB,GACD,MAAMmS,EAAM+mB,EAAAwE,KAAK61D,aAAa33F,KAAKonC,QAAQnJ,QACrC9f,EAAS,IAAImf,EAAAwE,KAAKvrB,EAAI,GAAIA,EAAI,GAAIA,EAAI,IACtCilK,EAAU,CACZp8J,OAAQhb,EACRohF,WAAY,CAAC,SAAU,SACvB5nF,KAAM,SACNokC,SAAUhiC,KAAKonC,QAAQpF,SACvBwhD,WAAY,UACZ8lE,QAAS,CACLznH,aAAc1jB,EACdyjB,QAAS5hC,KAAKonC,QAAQhvB,KACtBid,UAAWr1B,KAAKqgG,gBAIxB,OADAwjH,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAKf,CACI59K,KAAM,OACN0pC,SAAU,CAAC,YACXjf,KAAKjkB,GACD,MAAM6F,EAAQ23L,EAAex9L,GAC7B,GAAI6F,EAAO,CACP,MAAM85M,EAjON,SAASC,GACzB,MAAMztM,EAAM+mB,EAAAwE,KAAK61D,aAAaqsH,GAG9B,OAFe,IAAI1mL,EAAAwE,KAAKvrB,EAAI,GAAIA,EAAI,GAAIA,EAAI,IACpBkhE,OA8NQi1C,CAAY1sH,KAAKonC,QAAQpF,UACnCiiL,EAAW,IAAI95L,EAAU8wD,KACzBjmD,EAAa,IAAI7K,EAAU8K,WACjCD,EAAWE,UAAU+uL,EAAUF,GAE/B,MAAMG,EAAYlkN,KAAKqgG,cAQvB,OAPA4jH,EAAS5uL,UAAU6uL,GAEnBj6M,EAAMqW,IAAI2jM,GACVh6M,EAAMqW,IAAI0U,GACV6uL,EAAkB7jN,KAAMiK,GACxB+d,EAAApmB,QAAGslB,QAAQjd,EAAMvI,UACb,kBAAoB1B,KAAK0B,YACtB,EAEX,OAAO,IAKf,CACI9D,KAAM,aACN0pC,SAAU,CAAC,WAAY,SACvBjf,KAAKjkB,GACD,MAAMo3K,EAAU,CACZp8J,OAAQhb,EACRohF,WAAY,CAAC,UACb5nF,KAAM,QACN+1D,IAAK,MAAQ3zD,KAAKonC,QAAQixC,SAASv7C,aACnC5+B,IAAK,MAAQ8B,KAAKonC,QAAQixC,SAASv7C,aACnCx+B,MAAO0B,KAAKonC,QAAQ9oC,MACpBklF,WAAY,mBAGhB,OADAqgI,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAQf,CACI59K,KAAM,YACN0pC,SAAU,CAAC,cACXE,SAAU,CAAC,YACXnf,KAAKjkB,GACD,MAAMo3K,EAAU,CACZp8J,OAAQhb,EACRohF,WAAY,CAAC,QACbivF,WAAYz0K,KAAKonC,QAAQqtI,WACzBjxF,WAAY,YACZxhD,SAAUhiC,KAAKonC,QAAQpF,UAG3B,OADA6hL,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAMf,CACI59K,KAAM,aACN0pC,SAAU,CAAC,eACXE,SAAU,CAAC,WAAY,cACvBnf,KAAKjkB,GACD,MAAMo3K,EAAU,CACZp8J,OAAQhb,EACRohF,WAAY,CAAC,QACb0uF,YAAal0K,KAAKonC,QAAQ8sI,YAC1B1wF,WAAY,aACZxhD,SAAUhiC,KAAKonC,QAAQpF,SACvBoyI,WAAYp0K,KAAKonC,QAAQgtI,YAAc,EACvCV,WAAY1zK,KAAKonC,QAAQssI,WACzBC,WAAY3zK,KAAKonC,QAAQusI,YAG7B,OADAkwC,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,IAMf,CACI59K,KAAM,gBACN0pC,SAAU,CAAC,eACXE,SAAU,CAAC,aAAc,cACzBnf,KAAKjkB,GACD,MAAMo3K,EAAU,CACZp8J,OAAQhb,EACRohF,WAAY,CAAC,QACb0uF,YAAal0K,KAAKonC,QAAQ8sI,YAC1B1wF,WAAY,gBACZkwF,WAAY1zK,KAAKonC,QAAQssI,WACzBC,WAAY3zK,KAAKonC,QAAQusI,YAG7B,OADAkwC,EAAkB7jN,KAAMoE,EAAKo3K,IACtB,yKCrXvB,MAAAxzJ,EAAAC,EAAAhrB,EAAA,IACAogB,EAAApgB,EAAA,GACAqwH,EAAArwH,EAAA,IACA+/B,EAAA//B,EAAA,IAEaE,EAAAmvC,SAAgB,GAE7B,MAAM7jB,EAAM,IAAIpL,EAAAC,OA8CV6mM,EAAyB,CAC3BC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,UAAW,IAGTC,EAAoB,CACtB/6M,MAAO,EAAGo1B,OAAQ,EAAGX,MAAO,IAAKY,MAAO,eACxCb,OAAQ,MAAO32B,OAAQ,EAAG02B,QAAS,EAAGY,GAAI,EAC1CO,WAAY,EACZiE,QAASpb,EAAApmB,QAAGsP,YACZktB,SAAU,EAAGC,QAAS,EAAGF,SAAU,EAAGK,MAAO,EAAGD,WAAY,EAC5DD,UAAW,GAIf6lL,EAAWC,MAAQ,CACfK,SAAU,CACNtmL,SAAU,EAAGG,UAAW,EACxBv8B,KAAM,WAAY+8I,OAAQ,WAAYniH,KAAM,IAAK+N,QAAS,SAE9Dg6K,IAAK,CACDvmL,UAAW,EAAGE,QAAS,EAAGD,SAAU,EAAGI,MAAO,EAC9Cz8B,KAAM,MAAO+8I,OAAQ,QAASniH,KAAM,IAAK+N,QAAS,SAEtDi6K,IAAK,CACD5iN,KAAM,MAAO+8I,OAAQ,MAAOniH,KAAM,IAAK+N,QAAS,SAChDxM,MAAO,GACPC,UAAW,EAAGK,MAAO,EAAGqE,QAAS,CAAC,WAEtC+hL,MAAO,CACHzmL,UAAW,EAAGK,MAAO,EAAGD,WAAY,EACpCx8B,KAAM,QAAS+8I,OAAQ,UAAWniH,KAAM,IAAK+N,QAAS,SAE1Dm6K,KAAM,CACF1mL,SAAU,EAAGK,OAAQ,EAAGF,WAAY,EACpCv8B,KAAM,OAAQ+8I,OAAQ,OAAQniH,KAAM,IAAK+N,QAAS,gBAEtDo6K,IAAK,CACD3mL,SAAU,EAAGK,OAAQ,EAAGF,WAAY,EACpCv8B,KAAM,MAAO+8I,OAAQ,MAAOniH,KAAM,IAAKooL,OAAQ,gBAEnDC,QAAS,CACL3mL,QAAS,EAAGE,WAAY,EACxBx8B,KAAM,UAAW+8I,OAAQ,UAAWniH,KAAM,IAAK+N,QAAS,QAE5Du6K,UAAW,CACP9mL,SAAU,EACVp8B,KAAM,YAAa+8I,OAAQ,YAAaniH,KAAM,IAAK+N,QAAS,SAEhEw6K,OAAQ,CACJ/mL,SAAU,EACVp8B,KAAM,SAAU+8I,OAAQ,SAAUniH,KAAM,IAAK+N,QAAS,WACtD7H,QAAS,CAAC7F,EAAAwwF,WAAW,MAAO,aAKpC,MAAM23F,EAAYpnN,OAAO6qB,KAAKu7L,EAAWC,OAGzCD,EAAWE,MAAQ,CACfe,SAAU,CACNvmL,OAAQ,EAAGD,GAAI,GAEnBymL,WAAY,CACRxmL,OAAQ,EAAGD,GAAI,IAEnB0mL,SAAU,CACNzmL,OAAQ,EACRV,SAAU,EAAGS,GAAI,IAErB0kL,UAAW,CACPzkL,OAAQ,EACRV,SAAU,EAAGS,GAAI,GACjB2H,MAAO,CAAC,mBAAoB,eAAgB,iBAEhDg/K,QAAS,CACL1mL,OAAQ,EAAGD,GAAI,IAEnB4mL,KAAM,CACF3mL,OAAQ,EACRV,SAAU,EAAGS,GAAI,IAErBs3F,QAAS,CACLr3F,OAAQ,EAAGD,GAAI,IAEnB6mL,QAAS,CACL5mL,OAAQ,EAAGD,GAAI,GACfT,SAAU,EAAGE,QAAS,EAAGD,SAAU,GAEvCsnL,OAAQ,CACJ7mL,OAAQ,EAAGD,GAAI,IAEnB+mL,SAAU,CACN9mL,OAAQ,EAAGR,QAAS,EAAGG,MAAO,EAAGI,GAAI,IAEzCgnL,MAAO,CACHn7K,QAAS,SACT5L,OAAQ,GAAID,GAAI,GAChBiE,QAAS,CAAC,gBAEd4gL,KAAM,CACFh5K,QAAS,MACTtM,SAAU,EAAG72B,OAAQ,EAAG02B,QAAS,EACjCa,OAAQ,GAAID,GAAI,IAEpBinL,QAAS,CACLp7K,QAAS,SACT5L,OAAQ,GACRV,SAAU,GAAI72B,OAAQ,GAAI02B,QAAS,GACnCY,GAAI,GACJiE,QAAS,CAAC7F,EAAA0wF,WAAW,OAEzBo4F,QAAS,CACLr7K,QAAS,gBACT5L,OAAQ,GACRT,SAAU,GAAIC,QAAS,GAAI/2B,OAAQ,GAAI02B,QAAS,GAChDY,GAAI,GACJiE,QAAS,CAAC7F,EAAA0wF,WAAW,KAAO,UAEhCq4F,SAAU,CACNlnL,OAAQ,GAAID,GAAI,GAChBiE,QAAS,CAAC7F,EAAA0wF,WAAW,OAG7B,MAAMs4F,EAAYjoN,OAAO6qB,KAAKu7L,EAAWE,OAEzCF,EAAWI,UAAY,CACnB0B,MAAO,CACH3+M,OAAQ,EAAG02B,QAAS,EAAGmB,WAAY,EAAGN,OAAQ,GAElDL,MAAO,CACHA,MAAO,EAAGF,UAAW,EAAGO,OAAQ,EAChCC,MAAO,cAAeH,MAAO,GAAIihD,GAAI,GACrC/8C,QAAS,CAAC,gBAEdqjL,OAAQ,CACJ9nL,SAAU,EAAGC,QAAS,EAAGQ,OAAQ,EACjCgE,QAAS,CAAC,CACNqB,OAAQ,CACJ,WAAY,aAAc,cAAe,gBACzC,gBAAiB,mBAI7BiiL,QAAS,CACLnoL,QAAS,EACTK,QAAS,EAAGE,WAAY,EAAGM,OAAQ,IAK3CslL,EAAWG,MAAQ,CAEf2B,MAAO,CACHG,OAAQ,CACJvnL,OAAQ,EAAGD,GAAI,IAEnBynL,MAAO,CACHxnL,OAAQ,EAAGD,GAAI,EACfT,SAAU,GAEdmoL,QAAS,CACLznL,OAAQ,EAAGD,GAAI,GACfP,QAAS,EAAGF,SAAU,GAE1BolL,MAAO,CACH1kL,OAAQ,EAAGD,GAAI,GACfT,SAAU,EACV0E,QAAS,CAAC,kBAEd2gL,QAAS,CACL3kL,OAAQ,EAAGD,GAAI,GACfP,QAAS,EAAGF,SAAU,GAE1BooL,QAAS,CACL1nL,OAAQ,EACR0H,MAAO,CAAC,cAEZigL,OAAQ,CACJ3nL,OAAQ,EAAGD,GAAI,GACfT,SAAU,GAEdsoL,QAAS,CACL5nL,OAAQ,EAAGD,GAAI,GACfZ,QAAS,EACTuI,MAAO,CAAC,UAEZmgL,SAAU,CACN7nL,OAAQ,EAAGD,GAAI,GACft3B,OAAQ,EAAG02B,QAAS,EAAGG,SAAU,GAErCwoL,UAAW,CACP9nL,OAAQ,EAAGD,GAAI,GACft3B,OAAQ,EAAG02B,QAAS,EAAGG,SAAU,EACjC0E,QAAS,CAAC,gBAEd+jL,WAAY,CACR/nL,OAAQ,EAAGD,GAAI,GACft3B,OAAQ,EAAG02B,QAAS,GAExB6oL,OAAQ,CACJhoL,OAAQ,EAAGD,GAAI,GACft3B,OAAQ,EAAG02B,QAAS,GAExB8oL,QAAS,CACLjoL,OAAQ,EAAGD,GAAI,GACft3B,OAAQ,EAAG02B,QAAS,IAI5BQ,MAAO,CACHuoL,MAAO,CACHloL,OAAQ,EAAGH,GAAI,EAAGC,MAAO,EAAGC,GAAI,EAChC+E,OAAQ,CAAC,gBAEbqjL,SAAU,CACNnoL,OAAQ,GAAIH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GACnC+E,OAAQ,CACJ,aACA,CAACO,OAAQ,CAAC,YAAa,YAAa,cACpC,CAACA,OAAQ,CAAC,OAAQ,aAAc,UAChC,CAACA,OAAQ,CAAC,WAAY,cAAe,kBAG7C+iL,KAAM,CACFpoL,OAAQ,EACRL,MAAO,EAAGE,GAAI,EAAGC,MAAO,EAAGC,GAAI,EAC/B+E,OAAQ,CAAC,iBAEbujL,OAAQ,CACJroL,OAAQ,EAAGL,MAAO,EAAGF,UAAW,EAChCI,GAAI,EAAGC,MAAO,EACdgF,OAAQ,CAAC,SAEbwjL,OAAQ,CACJtoL,OAAQ,EACRL,MAAO,EAAGE,GAAI,EAAGC,MAAO,EACxBgF,OAAQ,CAAC,SAIb+/K,KAAM,CACF7kL,OAAQ,EAAGL,MAAO,EAAGF,UAAW,EAAGM,GAAI,GACvC+E,OAAQ,CAAC,CAACO,OAAQ,CAAC,aAAc,kBAErCkjL,SAAU,CACNvoL,OAAQ,EAAGH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GAClCJ,MAAO,EAAGF,UAAW,EACrBqF,OAAQ,CAAC,mBAAoB,cAEjC0jL,YAAa,CACTxoL,OAAQ,EAAGH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GAClC+E,OAAQ,CAAC,gBAEb2jL,SAAU,CACNzoL,OAAQ,EAAGH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GAClC+E,OAAQ,CAAC,kBAEb4jL,OAAQ,CACJ1oL,OAAQ,EAAGH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GAClC+E,OAAQ,CAAC,cAEb6jL,SAAU,CACN3oL,OAAQ,EAAGH,GAAI,GAAIC,MAAO,GAAIC,GAAI,GAClC+E,OAAQ,CAAC,CAACO,OAAQ,CAAC,YAAa,yBAEpCizI,OAAQ,CACJt4I,OAAQ,GAAIF,MAAO,GAAID,GAAI,GAAIE,GAAI,GACnCJ,MAAO,EAAGF,UAAW,EACrBqF,OAAQ,CACJ,CAACO,OAAQ,CAAC,YAAa,YAAa,kBACpC,CAACA,OAAQ,CAAC,OAAQ,aAAc,iBAK5CgiL,OAAQ,CACJuB,SAAU,CACN5oL,OAAQ,EAAGD,GAAI,GACf2H,MAAO,CAAC,kBAAmB,CAAC3oC,KAAM,cAAe2hB,MAAO,MAE5D6jM,OAAQ,CACJvkL,OAAQ,EAAGD,GAAI,EACb2H,MAAO,CACH,aAAc,CAAC3oC,KAAM,eAAgB2hB,MAAO,IAC5C,YAAa,CAAC3hB,KAAM,cAAe2hB,MAAO,MAGpDmoM,OAAQ,CACJ7oL,OAAQ,EAAGD,GAAI,EACf2H,MAAO,CAAC,iBAAkB,CAAC3oC,KAAM,aAAc2hB,MAAO,KAE1DooM,SAAU,CACN9oL,OAAQ,EAAGD,GAAI,GACf2H,MAAO,CAAC,QAAS,CAAC3oC,KAAM,eAAgB2hB,MAAO,KAEnDqoM,OAAQ,CACJ/oL,OAAQ,EAAGD,GAAI,EACf2H,MAAO,CAAC,CAAC3oC,KAAM,YAAa2hB,MAAO,KAEvCsoM,QAAS,CACLhpL,OAAQ,EACR0H,MAAO,CAAC,CAAC3oC,KAAM,eAAgB2hB,MAAO,KAE1CuoM,WAAY,CACRjpL,OAAQ,EAAGD,GAAI,GACfT,SAAU,EAAGD,OAAQ,EACrBqI,MAAO,CAAC,CAAC3oC,KAAM,aAAc2hB,MAAO,KAExCwoM,aAAc,CACVlpL,OAAQ,EAAGD,GAAI,GACfR,SAAU,EAAGC,QAAS,EACtBkI,MAAO,CAAC,QAAS,CAAC3oC,KAAM,eAAgB2hB,MAAO,KAC/Ckf,SAAU,GAEdklL,QAAS,CACL9kL,OAAQ,EAAGD,GAAI,EACf2H,MAAO,CAAC,CAAC3oC,KAAM,OAAQ2hB,MAAO,OAItC4mM,QAAS,CACL6B,SAAU,CACNnpL,OAAQ,EACRgE,QAAS,CAAC7F,EAAAwwF,WAAW,SAAU,YAEnCy6F,QAAS,CACLppL,OAAQ,EACRC,MAAO,QAASZ,MAAO,IAE3BgqL,MAAO,GAEPC,MAAO,CACHtpL,OAAQ,EAAGX,MAAO,GAAIO,SAAU,GAEpC2pL,MAAO,CACHvpL,OAAQ,EACRC,MAAO,WAInB,MAAMupL,EAAsBtqN,OAAO6qB,KAAKu7L,EAAWG,OAWnDnnN,EAAAmvC,SAASg8K,aAAe,WACpB,MAAMC,EAAW9/L,EAAIM,cAAc,EAAG,GAChCy/L,EAAW//L,EAAIjL,aAAa2nM,GAC5BsD,EAAoBtE,EAAWC,MAAMoE,GAErCE,EAAWjgM,EAAIjL,aAAawoM,GAC5B2C,EAAoBxE,EAAWE,MAAMqE,GAGrCE,EAAmBngM,EAAIogM,eAAeR,EAAWE,GAEjDO,EAAiBF,EAAOvzM,IAAIlX,GAAKgmN,EAAWI,UAAUpmN,IAG5D,IAAI4qN,EAAe,GACnB,MAAMC,EAAY,GACZC,EAA2BL,EAAOvzM,IAAKlX,IACzC,MAAM+qN,EAAgC/E,EAAWG,MAAMnmN,GACjDgrN,EAAW1gM,EAAIjL,aAAazf,OAAO6qB,KAAKsgM,IAG9C,OAFAH,GAAgB,IAAMI,EACtBH,EAAUpjN,KAAKujN,GACRD,EAAWC,KAGhBC,EAAY,CAAC5E,EAAWiE,EAAWE,GACpCt3M,OAAOy3M,GACPz3M,OAAO43M,GACNn4D,EAAWxjC,EAAA0jC,YAAYo4D,GAS7B,OAPIt4D,EAASlzJ,KADI,aAAb8qN,EACgBD,EAAU3pE,OAASiqE,EAAe,IAAML,EAGxCD,EAAU3pE,OAASiqE,EAEvCj4D,EAASu3D,UAAYO,EACrB93D,EAASwzD,MAAQ0E,EACVl4D,GAIX3zJ,EAAAmvC,SAASC,UAAY,SAASypE,GAC1B,MAAMvtG,EAAS,GACf,IAAK,IAAIpL,EAAI,EAAGA,EAAI24G,EAAS34G,IACzBoL,EAAO7C,KAAKzI,EAAAmvC,SAASg8K,gBAEzB,OAAO7/M,sKCpcX,MAAAuf,EAAAC,EAAAhrB,EAAA,IACAutF,EAAAvtF,EAAA,IACAosN,EAAApsN,EAAA,KACAogB,EAAApgB,EAAA,GAEAm3E,EAAAn3E,EAAA,GAEMwrB,EAAMpL,EAAAC,OAAOC,SAEbs0B,EAAO,IACPN,EAAQ,IACR+5F,EAAO,IAEb,MAAag+E,EAeTjhM,YAAYhT,GACRrV,KAAKorB,MAAQ,GACbprB,KAAKqV,IAAM2S,EAAApmB,QAAGyiB,OAAOhP,GACrBrV,KAAKupN,YACLvpN,KAAKiW,EAAI,EACTjW,KAAKkW,EAAI,EAETlW,KAAKm0B,EAAI9e,EAAI9T,OACbvB,KAAKwxD,EAAIn8C,EAAI,GAAG9T,OAEhB,IAAIioN,EAAS,EACTC,EAAS,EACbzhM,EAAApmB,QAAGuiB,UAAU9O,EAAK,CAACY,EAAGC,EAAGpQ,KAChB9F,KAAKorB,MAAMtlB,KAAO9F,KAAKorB,MAAMtlB,GAAO,IACzC9F,KAAKorB,MAAMtlB,GAAKF,KAAK,CAACqQ,EAAGC,IACrBpQ,IAAQyrC,GACRi4K,GAAUvzM,EACVwzM,GAAUvzM,GAELpQ,IAAQwlI,IACbtrI,KAAK0D,KAAO,CAACuS,EAAGC,MAIxBlW,KAAK8J,MAAQ9J,KAAKorB,MAAMmmB,GACxBvxC,KAAKkyD,MAAQlyD,KAAKorB,MAAMymB,GAExB,MAAMwxE,EAAWtlH,OAAOutC,OAAOtrC,KAAKorB,MAAMymB,IAAOtwC,OACjDvB,KAAKizB,GAAK/rB,KAAK4B,MAAM0gN,EAASnmG,GAC9BrjH,KAAKkzB,GAAKhsB,KAAK4B,MAAM2gN,EAASpmG,GAC9BrjH,KAAKqjH,SAAWA,EAGbh7F,YACH,MAAO,CAACroB,KAAKizB,GAAIjzB,KAAKkzB,IAInB7K,UACH,MAAO,CACHkB,IAAKvpB,KAAKiW,EAAGuT,IAAKxpB,KAAKkW,EACvBuT,IAAKzpB,KAAKiW,EAAIjW,KAAKm0B,EAAI,EACvBzK,IAAK1pB,KAAKkW,EAAIlW,KAAKwxD,EAAI,GAKxBnpC,aAKAA,YAAYpS,EAAWC,GAC1B,MAAMrC,EAAKoC,EAAIjW,KAAKiW,EACdnC,EAAKoC,EAAIlW,KAAKkW,EAGpBlW,KAAK8zF,UAAUjgF,EAAIC,GAKhBuU,UAAUxU,EAAYC,GACzB9T,KAAKiW,GAAKpC,EACV7T,KAAKkW,GAAKpC,EACV/V,OAAO6qB,KAAK5oB,KAAKorB,OAAO/gB,QAAQzL,IACdoB,KAAKorB,MAAMxsB,GACnByL,QAAQihB,IACVA,EAAG,IAAMzX,EACTyX,EAAG,IAAMxX,MAGjB9T,KAAKizB,IAAMpf,EACX7T,KAAKkzB,IAAMpf,EACX9T,KAAK0D,KAAO,CAAC1D,KAAK0D,KAAK,GAAKmQ,EAAI7T,KAAK0D,KAAK,GAAKoQ,GAK5CuU,WAAWqhM,GACd1pN,KAAKorB,MAAMu+L,QAAU,GACrB,MAAMz3J,EAAQlyD,KAAKorB,MAAMymB,GAAM/oB,QAC/B,IAAI22I,EAAW,EACfh3I,EAAIie,QAAQwrB,GACZ,MAAM03J,EAAe,GACrB13J,EAAM7nD,QAAQihB,IACVs+L,EAAQt+L,EAAG,GAAK,IAAMA,EAAG,KAAM,IAEnCtrB,KAAKorB,MAAMkgH,GAAMjhI,QAAQihB,IACrBs+L,EAAQt+L,EAAG,GAAK,IAAMA,EAAG,KAAM,IAGnC,IAAK,IAAIjuB,EAAI,EAAGA,EAAI60D,EAAM3wD,QAClBk+J,IAAaiqD,EADarsN,IAAK,CAEnC,MAAMiuB,EAAK4mC,EAAM70D,GACXkvB,EAAS,GACO6nD,EAAA7pD,SAAS05F,aAAa34F,EAAG,GAAIA,EAAG,GAAI,GACtDjhB,QAASw/M,IACLD,EAAQC,EAAI,GAAK,IAAMA,EAAI,KAC3Bt9L,EAAO3mB,KAAKikN,KAKE,IAAlBt9L,EAAOhrB,SAAkBk+J,EAAWiqD,IAA2B,IAAdA,IAC7C1pN,KAAK8pN,YAAYx+L,EAAIiB,KACrBvsB,KAAKorB,MAAMu+L,QAAQ/jN,KAAK0lB,GACxBs+L,EAAQt+L,EAAG,GAAK,IAAMA,EAAG,KAAM,IAC7Bm0I,GAWd,OANAz/J,KAAKorB,MAAMu+L,QAAQt/M,QAAQihB,IACvB,MAAMpM,EAAQlf,KAAKkyD,MAAM1lC,UAAUu9L,GAC/BA,EAAI,KAAOz+L,EAAG,IAAMy+L,EAAI,KAAOz+L,EAAG,IAEtCtrB,KAAKkyD,MAAMxlC,OAAOxN,EAAO,KAEtBugJ,EAIJp3I,YAAYiD,EAAYF,GAC3B,MAAOnV,EAAGC,GAAKoV,GACRM,EAAIC,GAAMT,EAAM,IAChBqF,EAAIC,GAAMtF,EAAM,GACvB,OAAInV,IAAM2V,EACuB,IAAtB1kB,KAAKiR,IAAI0T,EAAK6E,GAEhBxa,IAAM2V,GACkB,IAAtB3kB,KAAKiR,IAAIyT,EAAK6E,IAlJjCtzB,EAAAmsN,QAwJAnsN,EAAA2wF,eAAA,MAIIzlE,cAEIroB,KAAKgqN,UAAY,EACjBhqN,KAAKiqN,UAAY,EAGd5hM,YAAYwE,GACf,MAAM5V,KAACA,EAAIC,KAAEA,GAAQ2V,GACfq9L,UAACA,GAAar9L,EACd22J,EAASxjL,KAAKmqN,aAAalzM,EAAMC,IACjCisK,WAACA,EAAUC,WAAEA,GAAcI,EACjC,IAAIvyF,OAACA,EAAMC,OAAEA,GAAUsyF,EAEvB,IAAKx9J,OAAOC,UAAUgrE,KAAYjrE,OAAOC,UAAUirE,GAAS,CAExD,KAAID,EAAS,GACP,OAAO,KAEb,GAHiBA,EAAS/pF,KAAK4C,MAAMmnF,KAGjCC,EAAS,GACP,OAAO,KADIA,EAAShqF,KAAK4C,MAAMonF,GAIzC,MAAM+hC,EAAQ,IAAIzoC,EAAA2G,cAAcF,EAAQC,GAExC+hC,EAAMjgC,UAAUq2H,EAAAe,UAAUv4H,MAAMkvF,QAChC9tD,EAAM7gC,aAAai3H,EAAAe,UAAUj4H,UAAUkiC,KAEvCpB,EAAM1hC,aAAa,CAACt7E,EAAGktK,EAAYjtK,EAAGktK,IAEtCnwD,EAAM3hC,WAAa,EACf44H,IACAj3F,EAAM3hC,UAAYL,EAASC,EAC3B+hC,EAAM3hC,WAAa,GAEvB2hC,EAAMzgC,iBAAiB62H,EAAAe,UAAU13H,eACjCugC,EAAMt0H,SAGN,MAAM0rN,EAAe,IAAIf,EAAMr2F,EAAM59G,KACrC,GAAIwX,EAAKqhE,WAAY,CACjB,MAAMw7H,EAAWz4H,EAASC,EAC1Bm5H,EAAan8H,WAAWzlE,EAAIM,cAAc,EAAG2gM,IAGjD,OAAOW,EAKJhiM,aAAapR,EAAMC,GACtB,MAAMqN,EAAQvkB,KAAKgqN,UACb/lM,EAAQjkB,KAAKiqN,UACnB,IAAIz/L,EAAK/B,EAAIM,cAAc,EAAG,GAC1B0H,EAAKhI,EAAIM,cAAc,EAAG,GAE1BuhM,EAAY/lM,EAAQiG,EAAKiG,EACzB85L,EAAYviM,EAAApmB,QAAG2M,SACnB,KAAO0I,EAAOqzM,GAAc,IAGxBA,EAAY/lM,GAFZiG,EAAK/B,EAAIM,cAAc,EAAG,KAC1B0H,EAAKhI,EAAIM,cAAc,EAAG,IAEN,KAAdwhM,KAEV,MAAMt5H,EAASh6E,EAAOqzM,EAChBnnC,EAAa,CAAC34J,EAAI,EAAGiG,GAE3B,IAAIhG,EAAKhC,EAAIM,cAAc,EAAG,GAC1B2H,EAAKjI,EAAIM,cAAc,EAAG,GAC1ByhM,EAAYvmM,EAAQwG,EAAKiG,EACzB+5L,EAAYziM,EAAApmB,QAAG2M,SACnB,KAAO2I,EAAOszM,GAAc,IAGxBA,EAAYvmM,GAFZwG,EAAKhC,EAAIM,cAAc,EAAG,KAC1B2H,EAAKjI,EAAIM,cAAc,EAAG,IAEN,KAAd0hM,KAKV,MAAO,CACHx5H,SAAQC,OAJGh6E,EAAOszM,EAIFrnC,aAAYC,WAHb,CAAC34J,EAAI,EAAGiG,yKCrPnC,MAAA1I,EAAAC,EAAAhrB,EAAA,IACAo+I,EAAAp+I,EAAA,IACAogB,EAAApgB,EAAA,GAQaE,EAAAitN,UAAiB,CAACv4H,MAAO,GAAIM,UAAW,GAAIE,OAAQ,IACjE,MAAM5pE,EAAMpL,EAAAC,OAAOC,SAEnBpgB,EAAAitN,UAAUv4H,MAAM64H,SAAW,CAC3B,uFAeA,uFAeA,uFAeA,wFAkBAvtN,EAAAitN,UAAUv4H,MAAM84H,SAAW,CAC3B,wHAkBA,wHAkBA,wHAkBA,yHAoBAxtN,EAAAitN,UAAUv4H,MAAM+4H,SAAW,CAC3B,yHAkBA,wHAmBAztN,EAAAitN,UAAUv4H,MAAM+4H,SAAWztN,EAAAitN,UAAUv4H,MAAM+4H,SAASv5M,OAChDlU,EAAAitN,UAAUv4H,MAAM84H,UAGpBxtN,EAAAitN,UAAUv4H,MAAMnhC,MAAQ,CACxB,+FAgBA,+FAiBAvzD,EAAAitN,UAAUv4H,MAAMg5H,QAAU,CAC1B,4FAgBA,6FAgBA,4FAgBA,+FAkBA1tN,EAAAitN,UAAUv4H,MAAMi5H,KAAO,CAEvB,6FAgBA,4FAgBA,kGAkBA3tN,EAAAitN,UAAUv4H,MAAMuuB,MAAQ,CACxB,2FAgBA,2FAgBA,2FAgBA,4FAmBAjjH,EAAAitN,UAAUv4H,MAAMk5H,QAAU,oFAe1B5tN,EAAAitN,UAAUv4H,MAAMkvF,OAAS,mFAiBzB5jL,EAAAitN,UAAU13H,cAAgB,WACtB,GAAoB,IAAhB1yF,KAAKixF,QAAgC,IAAhBjxF,KAAKkxF,OAC1B,MAAO,CAACj7E,EAAG,EAAGC,EAAG,EACb07C,KAAMnpC,EAAIjL,aAAargB,EAAAitN,UAAUj4H,UAAUu4H,WAG9C,GAAoB,IAAhB1qN,KAAKixF,OAAc,CACxB,MAAM+5H,EACF7tN,EAAAitN,UAAUj4H,UAAUw4H,SAASxgN,OAAO8gN,IAC/B,cAAgBp0L,KAAKo0L,EAAInqN,QAAQ,UAEpCmyH,EAAQxqG,EAAIjL,aAAawtM,GAC/B,IAAI90M,EAAIlW,KAAKkxF,OAAS,EAEtB,MADI,QAAQr6D,KAAKo8F,EAAMnyH,QAAQ,WAAWoV,EAAI,GACvC,CAACD,EAAG,EAAGC,IAAG07C,KAAMqhE,GAEtB,GAAoB,IAAhBjzH,KAAKkxF,OAAc,CACxB,MAAM85H,EACF7tN,EAAAitN,UAAUj4H,UAAUw4H,SAASxgN,OAAO8gN,GAChC,cAAgBp0L,KAAKo0L,EAAInqN,QAAQ,UAEnCmyH,EAAQxqG,EAAIjL,aAAawtM,GAC/B,IAAI/0M,EAAI,EAER,MADI,QAAQ4gB,KAAKo8F,EAAMnyH,QAAQ,WAAWmV,EAAIjW,KAAKixF,OAAS,GACrD,CAACh7E,IAAGC,EAAG,EAAG07C,KAAMqhE,GAEtB,GAAoB,IAAhBjzH,KAAKixF,QAAgC,IAAhBjxF,KAAKkxF,OAAc,CAC7C,MAAM85H,EAA8B7tN,EAAAitN,UAAUj4H,UAAUy4H,SAClD33F,EAAQxqG,EAAIjL,aAAawtM,GAC/B,IAAI/0M,EAAI,EACJC,EAAI,EAOR,MANgC,QAA5B+8G,EAAMnyH,QAAQ,YACdmV,EAAIjW,KAAKixF,OAAS,GAEU,QAA5BgiC,EAAMnyH,QAAQ,YACdoV,EAAIlW,KAAKkxF,OAAS,GAEf,CAACj7E,IAAGC,IAAG07C,KAAMqhE,GAExB,MAAMjnG,EAAO9kB,KAAK4C,MAAM9J,KAAKixF,OAAS,GAChC7jE,EAAOlmB,KAAK4C,MAAM9J,KAAKkxF,OAAS,GAChCxkC,EAAOjkC,EAAIjL,aAAargB,EAAAitN,UAAUv4H,MAAMnhC,OAExCq6J,EAAU1vE,EAAA9rB,SAASe,eAAenzH,EAAAitN,UAAUv4H,MAAMk5H,SACxD,IAAK,IAAI70M,EAAIkX,EAAMlX,EAAIlW,KAAKkxF,OAAQh7E,IAChClW,KAAKi4D,QAAQ8yJ,EAAS/+L,EAAM9V,GAIhC,MAAO,CACHD,EAAG+V,EAAM9V,EAAGkX,EAAMwkC,KAFJypF,EAAA9rB,SAASe,eAAe5jE,KAM9CvvD,EAAAitN,UAAU/3H,OAAOzwF,QAAU,GACtByP,OAAOlU,EAAAitN,UAAUv4H,MAAMuuB,OACvB/uG,OAAOlU,EAAAitN,UAAUv4H,MAAMi5H,MACvBz5M,OAAOlU,EAAAitN,UAAUv4H,MAAMg5H,SAC5B1tN,EAAAitN,UAAUv4H,MAAMwiC,IAAMl3H,EAAAitN,UAAU/3H,OAAOzwF,QAgCvC,SAASspN,EAAej4F,GACpB,MAAM3lG,EAAS2lG,EAAMnyH,QAAQ,UACvBysB,EAAS0lG,EAAMnyH,QAAQ,UACxBknB,EAAApmB,QAAG6D,cAAc,CAAC6nB,KACnB2lG,EAAMvjG,QAAQ,SAAUpC,GAEb,QAAXC,EACA0lG,EAAMvjG,QAAQ,SAAU,SAER,UAAXnC,GACL0lG,EAAMvjG,QAAQ,SAAU,OAxCb,CAAC,MAAO,WAAY,WAAY,YACxCrlB,QAAQzM,IACfT,EAAAitN,UAAUj4H,UAAUv0F,GAAQT,EAAAitN,UAAUv4H,MAAMj0F,GAAMyX,IAAIq3C,GAClD2uF,EAAA9rB,SAASe,eAAe5jE,IAG5B,MAAMwwF,EAAc7B,EAAA9rB,SAAS4E,cAAch3H,EAAAitN,UAAUj4H,UAAUv0F,IAC/DT,EAAAitN,UAAUj4H,UAAUv0F,GAAQT,EAAAitN,UAAUj4H,UAAUv0F,GAAMyT,OAAO6rI,KAIjE//I,EAAAitN,UAAUj4H,UAAUy4H,SAASvgN,QAAQ4oH,IACjC,MAAMr1H,EAAOq1H,EAAMnyH,QAAQ,QACvB,QAAQ+1B,KAAKj5B,IA+BrB,SAAsBq1H,GAClB,MAAM3lG,EAAS2lG,EAAMnyH,QAAQ,UACd,QAAXwsB,EACA2lG,EAAMvjG,QAAQ,SAAU,SAER,UAAXpC,GACL2lG,EAAMvjG,QAAQ,SAAU,OApCxBy7L,CAAal4F,GAEb,OAAOp8F,KAAKj5B,GACZstN,EAAej4F,GAEV,QAAQp8F,KAAKj5B,IAClBstN,EAAej4F,GACfi4F,EAAej4F,IAEV,QAAQp8F,KAAKj5B,KAClBstN,EAAej4F,GACfi4F,EAAej4F,GACfi4F,EAAej4F,yKCnhBvB,MAAA/qG,EAAAD,EAAAhrB,EAAA,KACAA,EAAA,IAEaE,EAAA8uF,UAAY,SAASnpC,EAAOC,EAAQsD,GAC7Cn+B,EAAAtmB,QAAImvD,IAAIvzD,KAAKwC,KAAM8iD,EAAOC,GAE1B/iD,KAAK0mD,SAAW,CACZnvC,SAAU,EACVC,WAAY,IACZsvD,OAAQ,EACRx+C,IAAKJ,EAAAtmB,QAAI6mB,KAIb,IAAK,MAAMtpB,KAAKknD,EACRrmD,KAAK0mD,SAASxnD,eAAeC,KAC7Ba,KAAK0mD,SAASvnD,GAAKknD,EAAQlnD,KAKvChC,EAAA8uF,UAAU3mC,OAAOp9B,EAAAtmB,QAAImvD,KAMrB5zD,EAAA8uF,UAAUhtF,UAAUN,OAAS,SAASuyD,GAClC,MAAM5oC,EAAMtoB,KAAK0mD,SAASp+B,IAC1BtoB,KAAKqV,IAAMrV,KAAKmxD,SAAS,GAGzB,IAAK,IAAI9zD,EAAI,EAAGA,EAAI2C,KAAK0mD,SAASnvC,SAAUla,IAAK,CAC7C,MAAM4Y,EAAIqS,EAAIS,cAAc,EAAG/oB,KAAKgxD,OAAS,GACvC96C,EAAIoS,EAAIS,cAAc,EAAG/oB,KAAKixD,QAAU,GAC9CjxD,KAAKorN,WAAWn1M,EAAGC,EAAGlW,KAAK0mD,SAASlvC,YAGxC,GAAI05C,EACA,IAAK,IAAIh7C,EAAI,EAAGA,EAAIlW,KAAKixD,QAAS/6C,IAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIjW,KAAKgxD,OAAQ/6C,IAC7Bi7C,EAASj7C,EAAGC,EAAGlW,KAAKqV,IAAIY,GAAGC,KAQ3C/Y,EAAA8uF,UAAUhtF,UAAU+wF,SAAW,SAAS3yF,EAAGmN,GACvC,OAAQnN,GAAK,GAAKA,EAAI2C,KAAKgxD,QAAUxmD,GAAK,GAAKA,EAAIxK,KAAKixD,SAI5D9zD,EAAA8uF,UAAUhtF,UAAUmsN,WAAa,SAASn1M,EAAGC,EAAGsB,GAG5C,IAAIna,EAAI4Y,EACJzL,EAAI0L,EACR,MAAMoS,EAAMtoB,KAAK0mD,SAASp+B,IAK1B,IAAK,IAAIwsC,EAAI,EAAGA,GAAKt9C,EAAYs9C,IAAK,CAIlC,MAAMh2D,EAAIwpB,EAAIS,cAAc,EAAG/oB,KAAK0mD,SAASogB,QACvCliD,EAAI0D,EAAIS,cAAc,EAAG/oB,KAAK0mD,SAASogB,QACvC1nE,EAAIkpB,EAAIS,cAAc,EAAG/oB,KAAK0mD,SAASogB,QACvC3yC,EAAI7L,EAAIS,cAAc,EAAG/oB,KAAK0mD,SAASogB,QAEnC,IAANhoE,IAGAzB,GAAQ,EACJ2C,KAAKgwF,SAAS3yF,EAAGmN,KACjBxK,KAAKqV,IAAIhY,GAAGmN,GAAK,IAGf,IAANpL,IACA/B,GAAQ,EACJ2C,KAAKgwF,SAAS3yF,EAAGmN,KACjBxK,KAAKqV,IAAIhY,GAAGmN,GAAK,IAGf,IAANoa,IACApa,GAAQ,EACJxK,KAAKgwF,SAAS3yF,EAAGmN,KACjBxK,KAAKqV,IAAIhY,GAAGmN,GAAK,IAGf,IAAN2pB,IACA3pB,GAAQ,EACJxK,KAAKgwF,SAAS3yF,EAAGmN,KACjBxK,KAAKqV,IAAIhY,GAAGmN,GAAK,yKCtGjC,MAAA0d,EAAAD,EAAAhrB,EAAA,KACA+qB,EAAAC,EAAAhrB,EAAA,IACAm3E,EAAAn3E,EAAA,GACAotF,EAAAptF,EAAA,IACAA,EAAA,IAEA,MAEMkH,EAFNlH,EAAA,EAEcq3B,CAAI,kBAyCLn3B,EAAA4zF,SAAW,SAASjuC,EAAOC,EAAQsD,EAAsB,IAClEn+B,EAAAtmB,QAAImvD,IAAIvzD,KAAKwC,KAAM8iD,EAAOC,EAAQ,IAElC,MAAMsoK,EAAUvoK,EAAQC,EAASA,EAASD,EACpCwoK,EAAmBpkN,KAAK4C,MAAMg5C,EAAQC,EAASsoK,GAC/C/9L,EAASpmB,KAAK4B,MAAM9I,KAAKgxD,OAAS,GAClCzjC,EAASrmB,KAAK4B,MAAM9I,KAAKixD,QAAU,GAiBzC,GAfAjxD,KAAK0mD,SAAW,CACZ6kK,UAAW,GACXC,SAAS,EACTF,mBACAG,eAAgB,IAChBC,QAAQ,EACRpjM,IAAKJ,EAAAtmB,QAAI6mB,IACT6E,SACAC,SACAo+L,QAAS,EACTC,WAAY,CACRl6M,EAAG,EAAGI,GAAI,EAAGF,EAAG,EAAGG,GAAI,EAAGJ,EAAG,EAAGM,GAAI,EAAGJ,EAAG,EAAGG,GAAI,KAIpDq0C,EAAQulK,WAAY,CACrB,MAAMC,EAAU/oK,EAAQC,EAASA,EAASD,EAC1C/kD,OAAO6qB,KAAK5oB,KAAK0mD,SAASklK,YAAYvhN,QAAQiJ,IAEtCtT,KAAK0mD,SAASklK,WAAWt4M,IADjB,MAARA,GAAuB,MAARA,EAC0B,EAARwvC,EAEpB,MAARxvC,GAAuB,MAARA,EACayvC,EAGA8oK,IAM7C,IAAK,MAAM1sN,KAAKknD,EACRrmD,KAAK0mD,SAASxnD,eAAeC,KAC7Ba,KAAK0mD,SAASvnD,GAAKknD,EAAQlnD,IAOnC,GAAIknD,EAAQylK,YAAa,CACrB,IAAIC,EAAgB/rN,KAAK0mD,SAAS4kK,iBAClC,MAAM76D,GAACA,EAAEnyJ,MAAEA,GAAS+nD,EAAQylK,YAC5B,OAAQr7D,GACJ,IAAK,IAAMs7D,GAAiBztN,EAAO,MACnC,IAAK,IAAMytN,GAAiBztN,EAAO,MACnC,IAAK,IAAMytN,GAAiBztN,EAAO,MACnC,IAAK,IAAMytN,GAAiBztN,EAAO,MACnC,QAASkG,QAAQG,WAAW8rJ,aAGhCzwJ,KAAK0mD,SAAS4kK,iBAAmBpkN,KAAK4B,MAAMijN,GAGhD/rN,KAAKgsN,MAAQ,CACTC,SAAU,IAGdjsN,KAAKksN,uBAIT/uN,EAAA4zF,SAASzrC,OAAOp9B,EAAAtmB,QAAImvD,KAEpB5zD,EAAA4zF,SAAS9xF,UAAUq1B,IAAM,SAASjwB,KAAQc,GAClChB,EAAM0xB,SACNrxB,QAAQU,IAAIb,KAAQc,IAO5BhI,EAAA4zF,SAAS9xF,UAAUN,OAAS,SAASuyD,GACjC,MAAM5oC,EAAMtoB,KAAK0mD,SAASp+B,IAC1BtoB,KAAKgkB,KAAOhkB,KAAKmxD,SAJR,GAMT,MAAMg7J,EAAYnsN,KAAK0mD,SAAS4kK,iBAC1BG,EAAiBzrN,KAAK0mD,SAAS+kK,eAKrC,IAAIW,EAAe,CACf,CAACv1M,GAAI,EAAGZ,EAJGjW,KAAK0mD,SAASp5B,OAINpX,EAHRlW,KAAK0mD,SAASn5B,OAGKq+L,WAAY5rN,KAAK0mD,SAASklK,aAG5D5rN,KAAKqsN,QAAU,EAGX94M,MAAMC,QAAQxT,KAAK0mD,SAAS6kK,YAC5BvrN,KAAK0mD,SAAS6kK,UAAUlhN,QAAQiiN,IAC5B,GAAItsN,KAAKgwF,SAASs8H,EAAMr2M,EAAGq2M,EAAMp2M,GAAI,CACjC,MAAMq2M,EAAYxuN,OAAO4kF,OAAO,GAAI2pI,GACpCC,EAAU11M,GAAK7W,KAAKqsN,UACfE,EAAUX,aACXW,EAAUX,WAAa5rN,KAAK0mD,SAASklK,YAEzCQ,EAAaxmN,KAAK2mN,QAGlB/nN,QAAQC,MAAM6nN,EAAO,2CAKjCF,EAAa/hN,QAAQiiN,IACZtkM,EAAApmB,QAAG6D,cAAc,CAAC6mN,EAAMr2M,EAAGq2M,EAAMp2M,IAIlC8R,EAAApmB,QAAGK,IAAI,YAAa,kCACSqqN,KAJ7BtsN,KAAKwsN,WAAWF,EAAMr2M,EAAGq2M,EAAMp2M,KAQvC,IAAIu2M,EAAc,EACdC,EAAgB,EAChBC,EAAgB,EAEhBC,EAAe,GACfC,EAAc,GAEdh8H,EAAW,EAGf,KAAO67H,EAAgBP,IAEfhoN,EAAM0xB,SAAU71B,KAAK6jB,WAEzB7jB,KAAKs0B,IAAI,kBAAoB83L,EAAa7qN,QAC1C6qN,EAAa/hN,QAAQiiN,IACjB,MAAOr2M,EAAGC,GAAKlW,KAAK8sN,YAAYR,GAEhC,GAhEA,IAgEItsN,KAAKgkB,KAAK/N,GAAGC,IAAck2M,EAAa7qN,OAAS,EAEjDqrN,EAAahnN,KAAK0mN,QAEjB,GAAItsN,KAAKgwF,SAAS/5E,EAAGC,GAAI,CAC1B,GAAIoS,EAAI3C,cAAgB8lM,EAAgB,CACpC,MAAMsB,EAAW/sN,KAAKgtN,aAAaV,EAAOr2M,EAAGC,GACzC62M,IACAF,EAAYjnN,KAAKmnN,KACfN,KAEJC,EAEN1sN,KAAKwsN,WAAWv2M,EAAGC,EAAGo2M,GACtBA,EAAMr2M,EAAIA,EACVq2M,EAAMp2M,EAAIA,OAGV02M,EAAahnN,KAAK0mN,KAK1BM,EAAaviN,QAAQ4iN,IACjB,MAAM/tM,EAAQktM,EAAa5/L,UAAU8/L,GACjCW,EAAQp2M,KAAOy1M,EAAMz1M,IAEzB,GAAIu1M,EAAa7qN,OAAS,EAAG,CACzB,MAAMsV,GAACA,EAAEZ,EAAEA,EAACC,EAAEA,GAAK+2M,EACnBjtN,KAAKs0B,oBAAoBzd,QAASZ,MAAMC,OACtCy2M,EACFP,EAAa1/L,OAAOxN,EAAO,MAInCktM,EAAeA,EAAa/6M,OAAOw7M,GACnCA,EAAc,GACdD,EAAe,KAEX/7H,EAAY,IAAM7wF,KAAKgxD,OAAShxD,KAAKixD,WAGb,IAAxBm7J,EAAa7qN,UAGfsvF,EAQN,GALI7wF,KAAK0mD,SAASglK,QAAS1rN,KAAKktN,YAAY,GAI5CltN,KAAKm0D,UACDjD,EACA,IAAK,IAAIh7C,EAAI,EAAGA,EAAIlW,KAAKixD,QAAS/6C,IAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIjW,KAAKgxD,OAAQ/6C,IAC7Bi7C,EAASj7C,EAAGC,EAAGlW,KAAKgkB,KAAK/N,GAAGC,IAKxClW,KAAKgsN,MAAMU,cAAgBA,EAC3B1sN,KAAKgsN,MAAMS,YAAcA,EACzBzsN,KAAKgsN,MAAMW,cAAgBA,GAI/BxvN,EAAA4zF,SAAS9xF,UAAU+tN,aAAe,SAASV,EAAOr2M,EAAGC,GACjD,IAAK2iB,EAAMC,GAAQ94B,KAAK8sN,YAAY,CAAC72M,IAAGC,IAAG01M,WAAYU,EAAMV,aACzDmB,EAAW,KACf,MAAMzkM,EAAMtoB,KAAK0mD,SAASp+B,IAE1B,GAvIS,IAuILtoB,KAAKgkB,KAAK/N,GAAGC,IAAelW,KAAKgwF,SAASn3D,EAAMC,GAChDi0L,EAAW,CAACl2M,GAAI7W,KAAKqsN,UAAWp2M,EAAG4iB,EAAM3iB,EAAG4iB,GACxCwzL,EAAMa,cACNJ,EAASI,YAAcb,EAAMa,aAEjCntN,KAAKwsN,WAAW3zL,EAAMC,EAAMi0L,GAC5B/sN,KAAKs0B,IAAIg4L,EAAO,qBAAsBS,OAErC,CACD,MAAM7tM,EAAQoJ,EAAIS,cAAc,EAAG,GAC7BzV,EAAM4U,EAAAtmB,QAAIumB,KAAK,GAAKjJ,GAC1B2Z,GAAQvlB,EAAI,GACZwlB,GAAQxlB,EAAI,GACRtT,KAAKgwF,SAASn3D,EAAMC,KACpBi0L,EAAW,CAACl2M,GAAI7W,KAAKqsN,UAAWp2M,EAAG4iB,EAAM3iB,EAAG4iB,GACxCwzL,EAAMa,cACNJ,EAASI,YAAcb,EAAMa,aAEjCntN,KAAKwsN,WAAW3zL,EAAMC,EAAMi0L,GAC5B/sN,KAAKs0B,IAAIg4L,EAAO,4BAA6BS,IAOrD,OAFIA,IAAWA,EAASnB,WAAaU,EAAMV,YAEpCmB,GAGX5vN,EAAA4zF,SAAS9xF,UAAU4kB,SAAW,WAC1B,IAAK,IAAI3N,EAAI,EAAGA,EAAIlW,KAAKixD,QAAS/6C,IAAK,CACnC,IAAIuO,EAAM,GACV,IAAK,IAAIxO,EAAI,EAAGA,EAAIjW,KAAKgxD,OAAQ/6C,IAC7BwO,GAxKC,IAwKMzkB,KAAKgkB,KAAK/N,GAAGC,GAAc,IAAM,IAE5C1R,QAAQU,IAAIuf,KAKpBtnB,EAAA4zF,SAAS9xF,UAAU6tN,YAAc,SAASR,GACtC,MAAMhkM,EAAMtoB,KAAK0mD,SAASp+B,IAIpB8kM,EADMh5I,EAAA7pD,SAAK05F,aAAaqoG,EAAMr2M,EAAGq2M,EAAMp2M,EAAG,GAC5B/L,OAAOmhB,GApLlB,IAqLLtrB,KAAKgkB,KAAKsH,EAAG,IAAIA,EAAG,KACpBtrB,KAAKgwF,SAAS1kE,EAAG,GAAIA,EAAG,KAE5B,GAAuB,IAAnB8hM,EAAQ7rN,OAER,OADAvB,KAAKs0B,IAAI,wBAA0Bg4L,EAAMr2M,EAAI,KAAOq2M,EAAMp2M,GACnD,CAACo2M,EAAMr2M,EAAGq2M,EAAMp2M,GAG3BlW,KAAKs0B,IAAI,kBAAoB84L,GAI7B,MAAMC,EAAYD,EAAQ/3M,IAAIiW,IAC1B,MAAM1X,EAAO,CAAC0X,EAAG,GAAKghM,EAAMr2M,EAAGqV,EAAG,GAAKghM,EAAMp2M,GAC7C,OAAO8R,EAAApmB,QAAG+R,UAAUC,KAElB05M,EAAehB,EAAMV,WACrB2B,EAAW,GAQjB,GAPAF,EAAUhjN,QAAQiJ,IACVg6M,EAAah6M,KACbi6M,EAASj6M,GAAOg6M,EAAah6M,MAKA,IAAjCvV,OAAO6qB,KAAK2kM,GAAUhsN,OACtB,MAAO,CAAC+qN,EAAMr2M,EAAGq2M,EAAMp2M,GAGvB/R,EAAM0xB,SAAU71B,KAAKs0B,IAAI,aAAezV,KAAKC,UAAUyuM,IAE3D,IAAIj6M,EAAMgV,EAAIa,iBAAiBokM,GAC3B35M,EAAOoU,EAAApmB,QAAGyR,UAAUC,IACnB2C,EAAGC,GAAK,CAACo2M,EAAMr2M,EAAIrC,EAAK,GAAI04M,EAAMp2M,EAAItC,EAAK,IAQhD,IANA5T,KAAKs0B,YAAYhhB,kBAAoBM,WAAcqC,KAAKC,KAEnDlW,KAAKgsN,MAAMC,SAAS34M,KAAOtT,KAAKgsN,MAAMC,SAAS34M,GAAO,GAC3DtT,KAAKgsN,MAAMC,SAAS34M,IAAQ,EA5NpB,IA+NDtT,KAAKgkB,KAAK/N,GAAGC,YACTq3M,EAASj6M,GACqB,IAAjCvV,OAAO6qB,KAAK2kM,GAAUhsN,SAC1B+R,EAAMgV,EAAIa,iBAAiBokM,GAC3B35M,EAAOoU,EAAApmB,QAAGyR,UAAUC,IACnB2C,EAAGC,GAAK,CAACo2M,EAAMr2M,EAAIrC,EAAK,GAAI04M,EAAMp2M,EAAItC,EAAK,IAC5C5T,KAAKs0B,YAAYhhB,kBAAoBM,WAAcqC,KAAKC,KAEnDlW,KAAKgsN,MAAMC,SAAS34M,KAAOtT,KAAKgsN,MAAMC,SAAS34M,GAAO,GAC3DtT,KAAKgsN,MAAMC,SAAS34M,IAAQ,EAIhC,OADAtT,KAAKs0B,0BAA0Bre,KAAKC,KAC7B,CAACD,EAAGC,IAIf/Y,EAAA4zF,SAAS9xF,UAAU+wF,SAAW,SAAS3yF,EAAGmN,GAEtC,GAAIxK,KAAK0mD,SAAS8kK,QACd,GAAIxrN,KAAK0mD,SAAS8kK,QAAQjiM,IAAK,CAC3B,MAAMA,IAACA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,GAAO1pB,KAAK0mD,SAAS8kK,QAC3C,GAAInuN,GAAKksB,GAAOlsB,GAAKosB,GACbjf,GAAKgf,GAAOhf,GAAKkf,EACjB,OAAO,OAId,GAAI1pB,KAAK0mD,SAAS8kK,QAAQnuN,EAAI,IAAMmN,GACrC,OAAO,EAGf,OAAQnN,GAAK,GAAKA,EAAI2C,KAAKgxD,OAAS,GAAKxmD,GAAK,GAAKA,EAAIxK,KAAKixD,QAAU,GAI1E9zD,EAAA4zF,SAAS9xF,UAAUk1D,QAAU,WACzB,MAAMo3J,UAACA,GAAavrN,KAAK0mD,SACzB,IAAI+N,GAAY,EAChB,MAAM+4J,EAAc,GACdC,EAAiB,GAEvB,GAAIlC,EAAUhqN,OAAS,EAAG,CACtB,MAAM6pB,EAAQmgM,EAAUl2M,IAAIi3M,GAAS,CAACA,EAAMr2M,EAAGq2M,EAAMp2M,IAErDkV,EAAMxlB,KAAK,CAAC5F,KAAK0mD,SAASp5B,OAAQttB,KAAK0mD,SAASn5B,SAKhD,IAAImgM,GAAU,EACdtiM,EAAM/gB,QAAQihB,IACV,MAAMgH,EAAM,GACNq7L,EAAWv5I,EAAA7pD,SAAK8H,YAAYryB,KAAKgkB,KAAMsH,EApR7C,EAoRsDgH,GAAK,GAC3D,GAAwB,IAApBq7L,EAASpsN,OAAc,CAEvB,MAAM,IAAImD,yBADqB4mB,sBAGnC,MAAM1sB,EAAM0sB,EAAG,GAAK,IAAMA,EAAG,GAC7BkiM,EAAY5uN,GAAO+uN,EACnBF,EAAe7uN,GAAO0zB,GACN,IAAZo7L,EACAA,EAASC,EAASpsN,OAEbmsN,IAAWC,EAASpsN,SACzBkzD,GAAY,KAKnBA,EAKDz0D,KAAK4tN,SAAW,GAHhB5tN,KAAK6tN,qBAAqBL,EAAaC,IAU/CtwN,EAAA4zF,SAAS9xF,UAAU4uN,qBAAuB,SAASL,EAAaM,GAC5D,MAAMC,EAAU,GAChB,IAAIC,EAAW,EACXC,EAAa,KACjB,MAAM3lM,EAAMtoB,KAAK0mD,SAASp+B,IAE1BvqB,OAAO6qB,KAAK4kM,GAAanjN,QAAQzL,IAC7B,MAAM2X,EAAMi3M,EAAY5uN,GACxBmvN,EAAQnvN,GAAOw1E,EAAA7pD,SAAKuI,cAAcvc,GAC9BA,EAAIhV,OAASysN,IACbA,EAAWz3M,EAAIhV,OACf0sN,EAAarvN,KAOrB,MAAM01D,EAAe,GACrBt0D,KAAK4tN,SAAW,GAChB5tN,KAAK4tN,SAAShoN,KAAK,CAAE4nN,EAAYS,KACjClwN,OAAO6qB,KAAKmlM,GAAS1jN,QAAQzL,IACzB,GAAIA,IAAQqvN,EAAY,CACRH,EAAQlvN,GACXqvN,KACL35J,EAAa1uD,KAAKhH,GAClBoB,KAAK4tN,SAAShoN,KAAK,CAAE4nN,EAAY5uN,SAK7C,MAAOq0B,EAAIC,GAAM66L,EAAQE,GAIzBjuN,KAAKkuN,OAAS,GACd55J,EAAajqD,QAAQzL,IACjB,MAAOqX,EAAGC,GAAK63M,EAAQnvN,GACjB66E,EAAOz5E,KAAKmuN,SAASl7L,EAAIC,EAAIjd,EAAGC,GACtCujE,EAAKpvE,QAAQ+jN,IACT,IAAItrK,EAAQx6B,EAAIS,cAAc,EAAG,GAC7B/oB,KAAK0mD,SAAS2nK,YACdvrK,EAAQ9iD,KAAK0mD,SAAS2nK,WAGZj6I,EAAA7pD,SAAK0J,iBAAiBm6L,EAAIn4M,EAAGm4M,EAAIl4M,EAAG4sC,GAAO,GACnDz4C,QAAQikN,IACV,MAAOC,EAAIC,GAAMF,EAEbtuN,KAAKgwF,SAASu+H,EAAIC,KAAMxuN,KAAKgkB,KAAKuqM,GAAIC,GAlW9C,OAqWJxuN,KAAKkuN,OAAOtoN,KAAK6zE,MAMzBt8E,EAAA4zF,SAAS9xF,UAAUwvN,WAAa,WAC5B,MAAMlD,EAAYvrN,KAAK0mD,SAAS6kK,UAC1BmD,EAAcnD,EAAUl2M,IAAIi3M,GAAS,CAACA,EAAMr2M,EAAGq2M,EAAMp2M,IAG3D,OAFAw4M,EAAY9oN,KAAK,CAAC5F,KAAK0mD,SAASp5B,OAAQttB,KAAK0mD,SAASn5B,SAE/C,CACHohM,SAAU,EAAIpD,EAAUhqN,OACxBqtN,QAAS5uN,KAAK4tN,SACdc,cACAh/H,MAAO1vF,KAAKkuN,SAIpB/wN,EAAA4zF,SAAS9xF,UAAUkvN,SAAW,SAAS3jM,EAAIC,EAAImB,EAAIC,GAC/C,OAAOw+D,EAAAzX,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,IAG5C1uB,EAAA4zF,SAAS9xF,UAAUiuN,YAAc,SAAS2B,GACtC,IAAK,IAAIxxN,EAAI,EAAGA,EAAIwxN,EAASxxN,IACzB,IAAK,IAAI4Y,EAAI,EAAGA,EAAIjW,KAAKgxD,OAAS,EAAG/6C,IACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKixD,QAAU,EAAG/6C,IAClC,GA/XH,IA+XOlW,KAAKgkB,KAAK/N,GAAGC,GAAa,CAC1B,MAAMkV,EAAQgpD,EAAA7pD,SAAKukM,eAAe74M,EAAGC,EAAG,GACxC,IAAIorJ,EAAW,EACfl2I,EAAM/gB,QAAQihB,IACNtrB,KAAKgwF,SAAS1kE,EAAG,GAAIA,EAAG,KACpBtrB,KAAKgkB,KAAKsH,EAAG,IAAIA,EAAG,OAClBg2I,IAIVthK,KAAKgwF,SAAS/5E,EAAGC,IACborJ,EAAWthK,KAAK0mD,SAASilK,SACzB3rN,KAAKwsN,WAAWv2M,EAAGC,KAU/C/Y,EAAA4zF,SAAS9xF,UAAUutN,WAAa,SAASv2M,EAAGC,EAAGo2M,GACvCr2M,EAAIjW,KAAK+uN,QAAQ/uN,KAAK+uN,MAAQ94M,GAC9BA,EAAIjW,KAAKgvN,QAAQhvN,KAAKgvN,MAAQ/4M,GAC9BC,EAAIlW,KAAKivN,QAAQjvN,KAAKivN,MAAQ/4M,GAC9BA,EAAIlW,KAAKkvN,QAAQlvN,KAAKkvN,MAAQh5M,GAClClW,KAAKgkB,KAAK/N,GAAGC,GA3ZL,EA4ZJlW,KAAK0mD,SAASymK,aACdntN,KAAK0mD,SAASymK,YAAYl3M,EAAGC,EAAGo2M,GAEhCA,GAASA,EAAMa,aACfb,EAAMa,YAAYl3M,EAAGC,EAAGo2M,IAIhCnvN,EAAA4zF,SAAS9xF,UAAUitN,oBAAsB,WACrC,MAAM5jM,IAACA,GAAOtoB,KAAK0mD,SACbjoC,EAAQ,CAAC,aAAc,gBAAiB,oBAC9CA,EAAMpU,QAAQsU,IACV,GAAyB,mBAAd2J,EAAI3J,GAAsB,CACjC,IAAIta,8BAAkCoa,KAEtC,MAAM,IAAI/Z,MADVL,GAAO,mNCziBnB,MAAA6jB,EAAAD,EAAAhrB,EAAA,KAGMkyN,EAAiB,CACnB,CAAE,GAAI,GACN,CAAE,GAAI,GACN,CAAE,EAAG,GACL,CAAE,EAAG,GACL,CAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,IAGGhyN,EAAAkyF,YAAc,SAASvsC,EAAOC,EAAQsD,GAU/C,GATAn+B,EAAAtmB,QAAImvD,IAAIvzD,KAAKwC,KAAM8iD,EAAOC,GAE1B/iD,KAAK0mD,SAAW,CACZib,UAAWwtJ,EACX/6H,UAAW,EACXC,aAAc,GACd/rE,IAAKJ,EAAAtmB,QAAI6mB,KAGT49B,EAEA,IAAK,MAAMlnD,KAAKa,KAAK0mD,SACb1mD,KAAK0mD,SAASxnD,eAAeC,IACzBknD,EAAQnnD,eAAeC,KACvBa,KAAK0mD,SAASvnD,GAAKknD,EAAQlnD,IAM3Ca,KAAKovN,MAAQ,IAAIlnM,EAAAtmB,QAAI6/D,MAAMC,SAE/BvkE,EAAAkyF,YAAY/pC,OAAOp9B,EAAAtmB,QAAImvD,KAEvB5zD,EAAAkyF,YAAYpwF,UAAUN,OAAS,SAASuyD,GACpC,MAAM77C,EAAMrV,KAAKmxD,SAAS,GAE1B,IAAK,IAAIl7C,EAAI,EAAGA,EAAIjW,KAAKgxD,OAAQ/6C,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKixD,QAAS/6C,IAAK,CACnC,MAAMpQ,EAAM9F,KAAKovN,MAAMlxN,IAAI+X,EAAIjW,KAAK0mD,SAAS2tC,aACzCn+E,EAAIlW,KAAK0mD,SAAS2tC,cAAgBr0F,KAAK0mD,SAAS0tC,UACpD/+E,EAAIY,GAAGC,GAAKpQ,EAKvB,IAAK,IAAIzI,EAAI,EAAGA,EAAI2C,KAAKgxD,OAAQ3zD,IAChC,IAAK,IAAImN,EAAI,EAAGA,EAAIxK,KAAKixD,QAASzmD,IACjC0mD,EAAS7zD,EAAGmN,EAAG6K,EAAIhY,GAAGmN,KAKzBrN,EAAAkyF,YAAY1tB,UAAYwtJ,qKC1DxB,MAAAjnM,EAAAD,EAAAhrB,EAAA,KAiNA,SAASmwK,EAAY72J,EAAKlZ,EAAG2vK,GACzB,MAAMtlG,EAAM,EAAIslG,EAAU,EAC1B,IAAI5tE,EAAM,EACV,IAAK,IAAItgG,EAAIzB,EAAI2vK,EAASluK,GAAKzB,EAAI2vK,EAASluK,IACpCA,GAAK,GAAKA,EAAIyX,EAAIhV,SAClB69F,GAAO7oF,EAAIzX,IAGnB,OAAOoI,KAAK4C,MAAMs1F,EAAM13B,GAxN5BzqE,EAAA,IAMaE,EAAAiyF,QAAU,SAAStsC,EAAOC,EAAQsD,GAiB3C,GAhBAn+B,EAAAtmB,QAAImvD,IAAIvzD,KAAKwC,KAAM8iD,EAAOC,GAE1B/iD,KAAK0mD,SAAW,CACds8C,OAAO,EACPC,OAAO,EACPF,MAAM,EACNG,MAAM,EACNmsH,cAAe,SACfC,gBAAiB,SACjBC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRziD,QAAS,EACT1kJ,IAAKJ,EAAAtmB,QAAI6mB,KAGP49B,EAEA,IAAK,MAAMlnD,KAAKa,KAAK0mD,SACb1mD,KAAK0mD,SAASxnD,eAAeC,IACzBknD,EAAQnnD,eAAeC,KACvBa,KAAK0mD,SAASvnD,GAAKknD,EAAQlnD,KAO/ChC,EAAAiyF,QAAQ9pC,OAAOp9B,EAAAtmB,QAAImvD,KAEnB5zD,EAAAiyF,QAAQnwF,UAAUN,OAAS,SAASuyD,GAChC,MAAM77C,EAAMrV,KAAKmxD,SAAS,GAEpB65G,EAAkBhrK,KAAK0mD,SAASs8C,MAChCioE,EAAkBjrK,KAAK0mD,SAASu8C,MAChCioE,EAAiBlrK,KAAK0mD,SAASq8C,KAC/BooE,EAAiBnrK,KAAK0mD,SAASw8C,MAC/BmsH,cAACA,EAAaC,gBAAEA,GAAmBtvN,KAAK0mD,SAExC2oE,EAAOrvH,KAAKgxD,OACZs+D,EAAOtvH,KAAKixD,QAEZjlC,EAAO9kB,KAAK4C,MAAMulH,EAAO,GACzBjiG,EAAOlmB,KAAK4C,MAAMwlH,EAAO,GAEzBogG,EAAU1vN,KAAK0mD,SAAS6oK,OACxBI,EAAU3vN,KAAK0mD,SAAS8oK,OACxBI,EAAW5vN,KAAK0mD,SAAS+oK,OACzBziD,EAAUhtK,KAAK0mD,SAASsmH,QAE9B,IAAIlqH,EAAQ,KAERv1B,GAAU,EACViB,GAAQ,EACRw8I,GAAmBC,GACnB19I,EAAS,EACTiB,EAAO8gG,EAAO,GAET07C,GACLz9I,EAAS,EACTiB,EAAOpB,EAAO,GAET69I,IACL19I,EAASH,EACToB,EAAO8gG,EAAO,GAGlBtvH,KAAK6vN,QAAU,GACf,IAAIx/F,EAASrwH,KAAKorK,kBAAkB58I,EAAO,EAAGkhM,EAASE,EACnDvgG,EAAM29C,GAGV,GAAIhC,GAAmBC,EACnB,IAAK,IAAI/0J,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAAK,CAEjC,MAAMw2C,EAAO,GACC,KAFd5J,EAAQutE,EAAOn6G,EAAIqX,MAEDu1B,EAAQ4sK,GAE1B,IAAIhpD,EAAS16I,GAAQ82B,EAAQ,GACzB6jH,EAAO36I,GAAQ82B,EAAQ,GAEH,WAApBwsK,IAGyB,SAApBA,EAEL3oD,GADAD,EAAS,IACQ5jH,EAAQ,GAEA,UAApBwsK,IACL5oD,EAAS1mK,KAAKgxD,QAAUlO,EAAQ,GAChC6jH,EAAO3mK,KAAKgxD,OAAS,IAGzB,IAAK,IAAI/6C,EAAIywJ,EAAQzwJ,GAAK0wJ,EAAM1wJ,IAC5BZ,EAAIY,GAAGC,GAAK,EACZw2C,EAAK9mD,KAAK,CAACqQ,EAAGC,IAElBlW,KAAK6vN,QAAQjqN,KAAK8mD,GAI1B,IAAIp/B,GAAU,EACViB,GAAQ,EAgBZ,GAfI28I,GAAkBC,GAClB79I,EAAS,EACTiB,EAAO8gG,EAAO,GAET67C,GACL59I,EAAStB,EACTuC,EAAO8gG,EAAO,GAET87C,IACL79I,EAAS,EACTiB,EAAOvC,EAAO,GAGlBhsB,KAAK8vN,QAAU,GACfz/F,EAASrwH,KAAKorK,kBAAkB78I,EAAO,EAAGohM,EAASC,EAAUtgG,EAAM09C,GAC/D9B,GAAkBC,EAClB,IAAK,IAAIl1J,EAAIqX,EAAQrX,GAAKsY,EAAMtY,IAAK,CAEjC,MAAMy2C,EAAO,GACC,KAFd5J,EAAQutE,EAAOp6G,EAAIqX,MAEDw1B,EAAQ6sK,GAE1B,IAAI/oD,EAASx5I,GAAQ01B,EAAQ,GACzB+jH,EAAOz5I,GAAQ01B,EAAQ,GAEL,WAAlBusK,IAGuB,QAAlBA,EAELxoD,GADAD,EAAS,IACQ9jH,EAAQ,GAEF,WAAlBusK,IACLzoD,EAAS5mK,KAAKixD,SAAWnO,EAAQ,GACjC+jH,EAAO7mK,KAAKixD,QAAU,IAG1B,IAAK,IAAI/6C,EAAI0wJ,EAAQ1wJ,GAAK2wJ,EAAM3wJ,IAC5Bb,EAAIY,GAAGC,GAAK,EACZw2C,EAAK9mD,KAAK,CAACqQ,EAAGC,IAElBlW,KAAK8vN,QAAQlqN,KAAK8mD,GAK7B,IAAK,IAAIrvD,EAAI,EAAGA,EAAI2C,KAAKgxD,OAAQ3zD,IAChC,IAAK,IAAImN,EAAI,EAAGA,EAAIxK,KAAKixD,QAASzmD,IACjC0mD,EAAS7zD,EAAGmN,EAAG6K,EAAIhY,GAAGmN,KAOzBrN,EAAAiyF,QAAQnwF,UAAUmsK,kBAAoB,SAClC2B,EAAO/jJ,EAAMC,EAAQ6jJ,EAASE,GAE9B,MAAMC,EAAa,GACnB,IAAK,IAAI5vK,EAAI,EAAGA,EAAI0vK,EAAO1vK,IACvB4vK,EAAWrnK,KAAK5F,KAAK6sK,aAAa7jJ,EAAMC,EAAQ6jJ,IAGpD,IAAII,EAAW,GACf,IAAK,IAAI7vK,EAAI,EAAGA,EAAI2vK,EAAS3vK,IACzB6vK,EAAStnK,KAAKqnK,EAAW5vK,IAI7B,IAAK,IAAIA,EAAI2vK,EAAS3vK,EAAK0vK,EAAQC,EAAU3vK,IAAK,CAC9C,MAAM8vK,EAAUC,EAAYH,EAAY5vK,EAAG2vK,GAC3CE,EAAStnK,KAAKunK,GAGlB,IAAK,IAAI9vK,EAAK0vK,EAAQC,EAAU3vK,EAAI0vK,EAAO1vK,IAEnC6vK,EAAS3rK,OAAS0rK,EAAW1rK,QAC7B2rK,EAAStnK,KAAKqnK,EAAW5vK,IAKjC,OADA6vK,EAAWA,EAAS73J,IAAI/W,GAAS4I,KAAK4B,MAAMxK,KAIhDnB,EAAAiyF,QAAQnwF,UAAU4tK,aAAe,SAAS7jJ,EAAMC,EAAQ6jJ,GACpD,MAAMxkJ,EAAMtoB,KAAK0mD,SAASp+B,IAC1B,IAAIw6B,EAAQ57C,KAAK4C,MAAMwe,EAAIY,UAAUF,EAAMC,IAS3C,OANI65B,EAAQgqH,EAAU,EAClBhqH,EAAQgqH,EAAU,EAAI,EAEjBhqH,EAAQ,IACbA,EAAQ,GAELA,kFCvME3lD,EAAAoqL,UAAyC,GAEtDpqL,EAAAoqL,UAAUk7B,SAAW,CACjBznI,YAAa,GACbmlB,MAAO,CACH9hE,SAAU,EACVF,SAAU,GAEdp6B,OAAQ,IAIZ5G,EAAAoqL,UAAUm7B,QAAU,CAChBviH,MAAO,CACH9hE,QAAS,EACTE,WAAY,EACZJ,UAAW,GAEfp6B,OAAQ,IAIZ5G,EAAAoqL,UAAUq7B,QAAU,CAChBziH,MAAO,CACH9hE,QAAS,EACTE,WAAY,GAEhBx6B,OAAQ,IAIZ5G,EAAAoqL,UAAUwoC,MAAQ,CACd5vH,MAAO,CACH9hE,SAAU,EACVF,SAAU,EACVG,UAAW,GAEfv6B,OAAQ,IAIZ5G,EAAAoqL,UAAUs7B,OAAS,CACf1iH,MAAO,CACH/hE,SAAU,EACVC,QAAS,GAEbt6B,OAAQ,IAIZ5G,EAAAoqL,UAAUtxD,MAAQ,CACd91B,MAAO,CACH/hE,SAAU,EACVI,MAAO,EACPF,UAAW,GAEfv6B,OAAQ,IAIZ5G,EAAAoqL,UAAUu7B,SAAW,CACjB3iH,MAAO,CACH3hE,MAAO,EACPF,UAAW,GAEfv6B,OAAQ,IAIZ5G,EAAAoqL,UAAU07B,SAAW,CACjB9iH,MAAO,CACH/hE,SAAU,EACVC,QAAS,EACTE,WAAY,GAEhBx6B,OAAQ,IAIZ5G,EAAAoqL,UAAU27B,SAAW,CACjB/iH,MAAO,CACHhiE,SAAU,EACVK,MAAO,EACPF,UAAW,GAEfv6B,OAAQ,gVCxFZ,MAAAikB,EAAAC,EAAAhrB,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACAw5B,EAAArC,EAAAn3B,EAAA,IACAigC,EAAA9I,EAAAn3B,EAAA,KACA4qH,EAAAzzF,EAAAn3B,EAAA,KACA+2J,EAAA/2J,EAAA,IACA+/B,EAAA//B,EAAA,IACA41C,EAAA51C,EAAA,IACA0xL,EAAA1xL,EAAA,IACA4vL,EAAA5vL,EAAA,IACAg3J,EAAAh3J,EAAA,IACAmiH,EAAAniH,EAAA,IACAi7F,EAAAj7F,EAAA,IAEAogB,EAAApgB,EAAA,GACAg9K,EAAAh9K,EAAA,IACA+yN,EAAA/yN,EAAA,KACAgzN,EAAAhzN,EAAA,KACAq3C,EAAAr3C,EAAA,GAGAg6H,EAAAh6H,EAAA,IAEAo3B,EAAAp3B,EAAA,GACA05H,EAAA15H,EAAA,IACA2lG,EAAA3lG,EAAA,IACA+xL,EAAA/xL,EAAA,IACAqiH,EAAAriH,EAAA,IACA65M,EAAA75M,EAAA,IACAizN,EAAAjzN,EAAA,KACAqtF,EAAArtF,EAAA,IAEM8pB,EAAOsN,EAAArN,UAAUC,UAEjBwB,EAAMpL,EAAAC,OAAOC,SACb4b,EAAS1C,EAAQwB,cAEV96B,EAAAo+M,UAAY,SAASvgF,EAAM/rG,GACpCjvB,KAAKmwN,MAAQn1F,EACbh7H,KAAK+1H,QAAU9mG,GAGnB9xB,EAAAo+M,UAAUt8M,UAAUu8M,YAAc,SAASp3M,EAAK08F,EAAM/8F,GAClDumF,EAAAh0B,KAAKhuC,IAAMG,EACX,MAAMwG,EAASjvB,KAAK+1H,QACdkD,EAAa70H,EAAI60H,WACvB70H,EAAI6S,KAAO,IACX7S,EAAI8S,KAAO,IACX,MAAO02J,EAAIC,GAAM,CAAC,GAAI,IAChB91J,EAAQ/X,KAAKowN,iBAAiBtvH,EAAM18F,GAE1C2T,EAAMgW,SAAShqB,EAAQ6pK,EAAIC,GAE3B,MAAMwiD,EAAc,IAAI/wG,EAAAzc,MAAMkM,YAAY,iBAC1CshH,EAAYrzF,SAASjlH,GAENA,EAAMksF,YACdgL,MAAM5kG,QAAQpH,IACjBotN,EAAY1wF,QAAQ18H,KAGxB,MAAM6nG,EAAO,IAAIwU,EAAAzc,MAAMoG,KAAK,kCAC5B6B,EAAKwlH,WAAWD,GAChBvlH,EAAK5E,MAAQ,EACb4E,EAAK3E,MAAQ,EACb,MAAMpvC,EAAO,IAAIuoD,EAAAzc,MAAMsI,KAAK,eAAgB,EAAG,EAAG,GAAI,IACtDp0C,EAAK8uB,QAAQ,OAAQilB,GACrB,MAAM0uB,EAAQ,IAAIla,EAAAzc,MAAMqM,SAAS,iBACjCsqB,EAAMI,QAAQ7iE,GACd+pC,EAAKiwF,SAASv3D,GAEd,MAAMx1H,EAAShE,KAAK+1H,QAAQ9qF,YAAY,eACxCjnC,EAAO9F,IAAI,SAAS85E,YAAY,KAChCjgE,EAAMgW,SAAS/pB,EAAQ,EAAG,GAE1B,MAAMkX,EAAM,IAAIgiB,EAAKgI,UAAU,cAC/BntB,EAAMiW,QAAQ9S,GAEd,MAAMq1M,EAAUvwN,KAAK+1H,QAAQlmG,gBAAgB,QAAS,YACtD9X,EAAMiW,QAAQuiM,EAAS,EAAG,GAE1B,MAAM9uL,EAASzhC,KAAK+1H,QAAQlmG,gBAAgB,QACxC,0BACJ4R,EAAO76B,SAAS,GAChBmR,EAAMiW,QAAQyT,EAAQ,EAAG,GACzB,MAAM+uL,EAAaxwN,KAAK+1H,QAAQlmG,gBAAgB,QAC5C,yBACJ9X,EAAMiW,QAAQwiM,EAAY,EAAG,GAE7B,MAAMlO,EAAQtiN,KAAK+1H,QAAQlmG,gBAAgB,QAAS,SAC9C4P,EAAOz/B,KAAK+1H,QAAQlmG,gBAAgB,QAAS,gBACnD4P,EAAK74B,SAAS,KACdmR,EAAMiW,QAAQs0L,EAAO,EAAG,GACxBvqM,EAAMiW,QAAQyR,EAAM,EAAG,GAGvB,MAAM9E,EAAS36B,KAAK+1H,QAAQlmG,gBAAgB,SAAU,cAChD8/C,EAAO,IAAIzyC,EAAKyH,SACtBgrC,EAAK/oE,SAAS,IACd+zB,EAAOlzB,WAAWumB,QAAQ2hD,GAC1B53D,EAAMgW,SAAS4M,EAAQ,EAAG,GAE1B,MAAMoyJ,EAAUh1K,EAAMyL,SAASozB,UAAUr1C,OAGnC8+G,EAAW,CACb7I,cAHkBtwG,KAAK4B,MAAMikL,EAAU9zD,GAIvCt6G,KAAO7X,GAAUA,EAAKxI,OAAS,KAC/Boa,SAAU,KACV4mB,KAAM,KAAM,EACZqwC,KAAM,KAAM,GAEhB3vE,KAAKmwN,MAAM94G,cAAct/F,EAAO/X,KAAK+1H,QAAS1V,GAE9C,MAAMppG,EAAOc,EAAMyL,SAASvM,KACtBC,EAAOa,EAAMyL,SAAStM,KAEtBu5M,EAAOzwN,KAAK+1H,QAAQ9qF,YAAY,sBACtClzB,EAAMgW,SAAS0iM,EAAMx5M,EAAO,EAAGC,EAAO,GAEtC,MAAMw5M,EAAa1wN,KAAK+1H,QAAQ9qF,YAAY,cAC5ClzB,EAAMgW,SAAS2iM,EAAY,EAAGx5M,EAAO,GAErC,MAAMy5M,EAAY3wN,KAAK+1H,QAAQlmG,gBAC3B,QAAS,yBACb9rB,EAAO0D,WAAWumB,QAAQ2iM,GAE1B,MAAMC,EAAS5wN,KAAK+1H,QAAQ/qF,WAAW,sBACvCjnC,EAAO0D,WAAWumB,QAAQ4iM,GAG1B7sN,EAAOuc,IAAI,IAAI6J,EAAU8zD,UACzBl6E,EAAOuc,IAAI,IAAI6J,EAAU6zD,UACzBj6E,EAAOuc,IAAI,IAAI6J,EAAUq0D,gBACzBz6E,EAAOuc,IAAI,IAAI6J,EAAU+zD,aACzBn6E,EAAOuc,IAAI,IAAI6J,EAAU+zD,aAGzBn6E,EAAOuc,IAAI,IAAI6J,EAAUk1D,aAET,IAAI6wI,EAAAW,aAAa,gBAAiB/vH,EAAK75E,WAC/C6pM,eAAen2L,GAEvBmmE,EAAKsxF,UAAUruL,GAEJA,EAAO0D,WAAW4B,eAC1B2tJ,QAAQ,YAAa,IAAI/C,EAAAhG,UAAU,cACtC,MAAM8iE,EAAO/wN,KAAK+1H,QAAQ/qF,WAAW,qBAC/BgmL,EAAOhxN,KAAK+1H,QAAQ/qF,WAAW,sBACrCjnC,EAAO0D,WAAWumB,QAAQ+iM,GAC1BhtN,EAAO0D,WAAWumB,QAAQgjM,GAC1BjtN,EAAOuc,IAAI,IAAI6J,EAAUo3D,mBAEzB,MAAM0vI,EAAc,IAAIx6L,EAAQ2E,mBAChC61L,EAAY31L,OAAO,KACnBvjB,EAAMoW,WAAW8iM,EAAa,EAAG,IAEjC,MAAMhuG,EAAUjjH,KAAKkxN,gBACrBn5M,EAAMgW,SAASk1F,EAAS,EAAG,GAE3B,MAAMqyD,EAAQ,IAAIp4I,EAAKyH,SACvB2wI,EAAM1uK,SAAS,KACf7C,EAAO0D,WAAWumB,QAAQsnJ,GAG1B,MAAM5rD,EAAY,IAAIuwD,EAAAx2I,MAAMC,UAAU3/B,GACtCA,EAAOy/B,QAAQkmF,GACfuwD,EAAAx2I,MAAM05I,aAAazzD,GACnB3lH,EAAOuc,IAAI,IAAI6J,EAAUw1D,YACzB57E,EAAO7F,IAAI,cAAcizN,MAAM,KAG/B,MAAMC,EAAS,IAAInB,EAAAoB,aAAa,WAC1BC,EAAa,IAAIz+K,EAAAi6E,aAAaskG,GACpCE,EAAW99B,cAAc,CAAC/iC,GAAI,KAAM3uJ,KAAM,SAAUxD,MAAO,KAC3D8yN,EAAOz5C,SAAS25C,GAChBv5M,EAAM88K,eAAe7sK,EAAApmB,QAAGiL,WAAYukN,GAEpC,MAAMt2E,GAAO96I,KAAK+1H,QAAQ9qF,YAAY,QAChC2qG,GAAa,IAAIzrH,EAAU67D,OACjC4vD,GAAWvlF,YAAY,IACvByqF,GAAKx6H,IAAIs1H,IACT79H,EAAMgW,SAAS+sH,GAAM,EAAG,GAExB,MAAMy2E,GAAcvxN,KAAK+1H,QAAQ9qF,YAAY,eAC7ClzB,EAAMgW,SAASwjM,GAAa,GAAI,GAEhC,MAAMC,GAAUviM,EAAO6b,aAAa,kBACpC/mC,EAAO0D,WAAWumB,QAAQwjM,IAE1BztN,EAAO7F,IAAI,cAAcizN,MAAM,KAC/BptN,EAAO7F,IAAI,cAAcs3J,SAAS,KAElC,MAAMi8D,GAAW,IAAIryG,EAAA/I,eACfq7G,GAAWziM,EAAO+b,WAAW,sBACnCymL,GAASn7G,WAAWo7G,GAAU,KAC9B3tN,EAAO0D,WAAWumB,QAAQ0jM,IAE1B,MAAMC,GAAU1iM,EAAO+b,WAAW,qBAClCymL,GAASn7G,WAAWq7G,GAAS,KAC7B5tN,EAAO0D,WAAWumB,QAAQ2jM,IAE1B,MAAMC,GAAY3iM,EAAO+b,WAAW,iBACpCymL,GAASn7G,WAAWs7G,GAAW,KAC/B7tN,EAAO0D,WAAWumB,QAAQ4jM,IAE1B,MAAMjvN,GAAQ,IAAI8zB,EAAQwD,aAC1BliB,EAAMoW,WAAWxrB,GAAO,EAAG,GAC3B,IAAK,IAAItF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMw0N,EAAY,IAAIp7L,EAAQmD,iBAC9Bj3B,GAAMy3B,UAAUy3L,GAChB95M,EAAMoW,WAAW0jM,EAAW,EAAIx0N,EAAG,GAIvC,MAAMu2J,GAAY7vJ,EAAO7F,IAAI,aACvB4zN,GAAa,IAAI99D,EAAAT,QAAQv0E,WAC/B40E,GAAUS,WAAWy9D,IACrB,MAAMC,GAAY,IAAI/9D,EAAAT,QAAQt2E,UAC9B22E,GAAUS,WAAW09D,IAErB/xN,KAAKgyN,kBAAkBj6M,GAEvB,MAAMk6M,GAAahjM,EAAO+b,WAAW,mBACrCymL,GAASn7G,WAAW27G,GAAY,KAChCluN,EAAO0D,WAAWumB,QAAQikM,IAE1B,MAAMC,GAAcjjM,EAAO+b,WAAW,iBACtCymL,GAASn7G,WAAW47G,GAAa,KACjCnuN,EAAO0D,WAAWumB,QAAQkkM,IAE1B,MAAMC,GAAqBljM,EAAO+b,WAAW,yBAC7CymL,GAASn7G,WAAW67G,GAAoB,KACxCpuN,EAAO0D,WAAWumB,QAAQmkM,IAE1B,MAAMC,GAAanjM,EAAO+b,WAAW,eACrCjnC,EAAO0D,WAAWumB,QAAQokM,IAE1BruN,EAAO0D,WAAWqoJ,YAAY,OAAQ,EAAG,GACzC/rJ,EAAO0D,WAAWmoJ,UAAUwiE,IAE5B,MAAMC,GAASpjM,EAAO+b,WAAW,UACjCjnC,EAAO0D,WAAWumB,QAAQqkM,IAC1B,MAAMC,GAAUrjM,EAAO+b,WAAW,WAClCjnC,EAAO0D,WAAWumB,QAAQskM,IAE1B,MAAMC,GAAUtjM,EAAO+b,WAAW,gBAClCjnC,EAAO0D,WAAWumB,QAAQukM,IAK1B,MAAMnK,GAAQn5L,EAAOgc,YAAY,kBACjClzB,EAAMgW,SAASq6L,GAAOx6C,EAAK,EAAGC,EAAK,GAEnC9pK,EAAO0D,WAAWumB,QAAQiB,EAAO+b,WAAW,oBAE5C,MAAMwnL,GAAQ,IAAIroM,EAAU+5D,YAC5BsuI,GAAMrB,MAAM,GACZqB,GAAMld,UAAU,GAChBkd,GAAMC,aAAa,GACnB1uN,EAAOuc,IAAIkyM,IAEXz6M,EAAMyL,SAASoyB,cAAcg4H,EAAK,EAAGC,EAAK,EAAGv5H,EAAArE,KAAKh7B,OAElC+nB,EAAA4wF,WAAWzjH,OAAOrD,GAChB,eAAdA,EAAK8iC,MAEDv/B,QAAQqoN,IACZ,MAAM90N,KAACA,GAAQ80N,EACTC,EAAc1jM,EAAOgc,YAAYrtC,GACnC+0N,EACA56M,EAAM+hM,mBAAmB6Y,GAGzB3qM,EAAApmB,QAAG+C,KAAK,YAAa,mBACjB,kCAAoC/G,KAShD,MAAMg1N,GAAa,IAAI37F,EAAA0K,cAOjBkxF,GAAU,IAAI31L,EAAKsH,KAAK,mBAC9BquL,GAAQC,QAAQ,8CAChB/uN,EAAO0D,WAAWumB,QAAQ6kM,IAE1B,MAEME,GAAc,IAAI97F,EAAAvuC,MAAM,uBAFL,CAAC,sBAAuB,iBAC7C,sBAAuB,WAE3BkqI,GAAWI,oBAAoBD,GAAajoH,EAAM,MAClD8nH,GAAWK,mBAAmBnoH,GAE9B,MAAMnnG,GAASoU,EAAMzN,YAEfq+E,GAAQhlF,GAAOuiB,KAAKjc,GAASA,EAAMf,IAAI,eAC3By/E,GAAMzqF,IAAI,cAClBg1N,UAAU,CAACnxN,KAAM,OAAQnE,KAAM,oBACzCma,EAAM+8H,YAAYnsD,GAAOilF,EAAK,EAAGC,GAIhBlqK,GAAOwG,OAAOF,GAASA,EAAMf,IAAI,gBACzCmB,QAAQ,CAAC+U,EAAQ/hB,KACtB0a,EAAM+8H,YAAY11H,EAAQwuJ,EAAIC,EAAK,EAAIxwK,GACvC+hB,EAAOlhB,IAAI,SAASi6E,SAAS,MAIjC,MAAM2kH,GAAc,IAAI3yK,EAAUgqB,QAClC2oJ,GAAYC,eAAe,aAC3BhlL,EAAMuI,IAAIw8K,IACV,MAAMq2B,GAAe,IAAIlD,EAAAmD,aAAa,iBACtCr7M,EAAM88K,eAAe7sK,EAAApmB,QAAGiL,WAAYsmN,IAGpC,MAAMx8K,GAAoB5+B,EAAMyL,SAAS4+E,SAAS1kG,GAAKA,EAAEkyB,UACzD,IAAK,IAAIvyB,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,MAAMyC,EAAO2oB,EAAIjL,aAAam5B,KACvB/jB,EAAIC,GAAM/yB,EAAK8b,QACtB7D,EAAMoW,WAAW,IAAIsI,EAAQoF,WAAcjJ,EAAIC,GAC3C9a,EAAMyL,SAASqK,MAAM+E,EAAK,EAAGC,EAAK,IAClC9a,EAAMoW,WAAW,IAAIsI,EAAQ2F,aAAgBxJ,EAAK,EAAGC,EAAK,GAIlE,MAAMw7J,GAAqBt2K,EAAMyL,SAAS4+E,SAAS1kG,GAC/CA,EAAEwgL,YAAY,eAClB,IAAK,IAAI7gL,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACNorB,EAAIjL,aAAa6wK,IAC/B3/J,YAAY4lB,EAAArE,KAAKE,KAI1B,MAAMkqI,GAAY,IAAIlwJ,EAAUw0D,MAAM,CAAC5mE,MAAO,KAC9ChU,EAAOuc,IAAI+5J,IAEX,MAAMg5C,GAAW,IAAIlpM,EAAUgrB,KAAK,IACpCk+K,GAASlpI,SAAS,SACdxB,GAAMjnF,UAAY,4BACtBqW,EAAMuI,IAAI+yM,IAEV,MAAMC,GAAYrkM,EAAOgc,YAAY,aAGrC,OAFAlzB,EAAMgW,SAASulM,GAAWvvN,EAAO4X,OAAS,EAAG5X,EAAOiY,QAE7C8kF,GAIX3jG,EAAAo+M,UAAUt8M,UAAUw8M,kBAAoB,SAASr3M,EAAK08F,EAAM/8F,GACxD,MAEM02H,EAA0B,CAC5B78H,KAAM,mBACN4xG,OAAQ,EACRz4C,KAAM,EALM,IAAI+/I,EAAAt3C,cAKDK,qBAAqB,EAJvB,CAACl1I,KAAM,EAAGC,KAAM,MAO3B4uG,GADY,IAAIw1D,EAAAn3D,cACE0B,YAAYkB,GAE9B1iH,EAAQyhH,EAAMjvB,SAAS,QAAQ,GAAGxJ,YAAY,GAC9C6sE,EAAK1mK,KAAK4C,MAAMiO,EAAMyL,SAASvM,KAAO,GACtC42J,EAAK3mK,KAAK4C,MAAMiO,EAAMyL,SAAStM,KAAO,GAI5C,OAHAa,EAAMgW,SAAShqB,EAAQ6pK,EAAIC,GAC3B/sE,EAAKiwF,SAASv3D,GACd14B,EAAKsxF,UAAUruL,GACR+8F,GAGX3jG,EAAAo+M,UAAUt8M,UAAUiyN,cAAgB,WAChC,MAAMj7F,EAAQj2H,KAAK+1H,QAAQ9qF,YAAY,WACvCgrF,EAAMn5B,QAAQ,eACd,MAAMqmB,EAAY,IAAIh5F,EAAU6uD,QAGhC,OAFAmqC,EAAUn7B,aAAa3O,WAAW48C,GAClCA,EAAM31G,IAAI6iG,GACH8S,GAGX94H,EAAAo+M,UAAUt8M,UAAU+yN,kBAAoB,SAASj6M,GAC7C,MAAM8qM,EAAS7iN,KAAK+1H,QAAQ9qF,YAAY,UACxC43K,EAAO/lH,QAAQ,oBACf,MAAM32D,EAAO,IAAIhc,EAAUmc,KAAK,IAAIpJ,EAAKiI,OAAO,UAChD09K,EAAOviM,IAAI6lB,GAUXpuB,EAAMgW,SAAS80L,EAAQ,EAAG,KAI9B1lN,EAAAo+M,UAAUt8M,UAAUw4M,kBAAoB,SAASrzM,EAAK08F,EAAM/8F,GACxD,MAAMw+H,EAAS,IAAIosD,EAAA12B,OAAO,0BACpBs7D,EAAQ,IAAI5kC,EAAAn3B,KAAK,aACjBg8D,EAAQ,IAAI7kC,EAAAn3B,KAAK,YACvBx3J,KAAKyzN,gBAAgBF,EAAO,GAAI,WAChCvzN,KAAKyzN,gBAAgBD,EAAO,GAAI,gBAEhC,MACMt9B,GADY,IAAItzF,EAAAtK,cACQC,YAAY,QAAS,GAAI,IAOvD,OANAgqC,EAAOxrF,SAASm/I,GAChB3zD,EAAOmxF,QAAQH,EAAO,EAAG,EAAG,IAC5BhxF,EAAOmxF,QAAQF,EAAO,EAAG,EAAG,IAC5B1yH,EAAK6yH,UAAUpxF,GAEfzhC,EAAKsxF,UAAUruL,GACR+8F,GAGX3jG,EAAAo+M,UAAUt8M,UAAUw0N,gBAAkB,EAAC17D,EAAMrwF,EAAK9pE,KAC9C,IAAK,IAAIP,EAAI,EAAGA,EAAIqqE,EAAKrqE,IAAK,CAC1B,MAAM4M,EAAQjK,KAAK+1H,QAAQlmG,gBAAgB,SAAUjyB,GACrDqM,EAAMy+G,YAAY,IAClBqvC,EAAKhqI,SAAS9jB,MAItB9M,EAAAo+M,UAAUt8M,UAAUy8M,wBAA0B,SAASt3M,EAAK08F,EAAM/8F,GAC9D,MAAMkT,KAACA,EAAIC,KAAEA,EAAIysF,QAAEA,EAAOk1B,YAAEA,EAAWI,WAAEA,GAAc70H,EACvD,IAAIwvN,EAAa,EACjB,MAAMhnM,EAAS,CAAC,QAAS,QAAS,UAG5BinM,EAAgB,GAChBpjC,EAAY,GAEZvoF,EAAS,IAAIoX,EAAAzc,MAAMiF,OAAO,eAE1BgsH,EAAiBp7M,GAAY5R,GAAQA,EAAKxI,OAASoa,EAEzD,IAAK,IAAIorF,EAAK,EAAGA,EAAKH,EAASG,IAAM,CAGjC,IAAItQ,EAAY5mE,EADGnE,EAAII,UAAU+D,IAEtB,IAAPk3E,IAAWtQ,EAAY,SAC3B,MAAMz7E,EAAQ/X,KAAKmwN,MAAM53H,YAAY/E,EAAWv8E,EAAMC,GACtDgxF,EAAO80B,SAASjlH,GAEhB,MAAMg1K,EAAUh1K,EAAMyL,SAASozB,UAAUr1C,OACnCs0H,EAAiB3uH,KAAK4B,MAAMikL,EAAUl0D,GACtCrhB,EAAgBtwG,KAAK4B,MAAMikL,EAAU9zD,GAErCh1H,EAAS,IAAIi5B,EAAK8H,OAAO,kBAC/BjtB,EAAMiW,QAAQ/pB,GACd,MAAMuD,EAAUxH,KAAK+1H,QAAQlmG,gBAAgB,QAAS,YACtDroB,EAAQZ,SAAS,IACjBmR,EAAMiW,QAAQxmB,GAEd,MAAMkR,EAAW,IAAMorF,EAAK,GACtBuc,EAAW,CACb7I,gBAAe74F,KAAMm1M,EAAep7M,GACpCA,WACA4mB,KAAM,KAAM,GAEhBt/B,KAAKmwN,MAAM94G,cAAct/F,EAAO/X,KAAK+1H,QAAS1V,GAE9C,MAAMH,EAAY,CACd2V,iBACAr9G,UAAWsrF,EAAK,GAEpB9jG,KAAKmwN,MAAMv6F,eAAe79G,EAAO/X,KAAK+1H,QAAS7V,GAE/CuwE,EAAU7qL,KAAKmS,GAInB,MAAMg8M,EAAYtjC,EAAU3nK,OAAO,GAAG,GAChCkrM,EAAWD,EAAUtwH,kBACrB+jH,EAAWxnN,KAAKmwN,MAAMllL,YAAY,WACpC,CAACrM,GAAI,IAAKv3B,IAAK,GAAIuhH,IAAK,KAC5B4+F,EAAS3tL,QAAQ,YACjB2tL,EAAStpN,IAAI,cAAcse,YAAY,IACvCu3M,EAAUhmM,SAASy5L,EAAUwM,EAASr4M,OAAQq4M,EAASh4M,QAEvD,MAAMi4M,EAAYj0N,KAAKowN,iBAAiBtvH,EAAM,CAAC7pF,KAAM,GAAIC,KAAM,KAC/D4pF,EAAKk8B,SAASi3F,GACdA,EAAUpsH,eAAe+rH,KAEzB1rH,EAAO+zB,gBACPn7B,EAAKiwF,SAAS7oF,GAEd,MAAMgsH,EAAc,IAAI/6L,GAAO,EAAMs3J,EAAU9sF,EAAU,GAAIswH,GACvDE,EAAa,IAAIhqM,EAAUmc,KAAK4tL,GACtC1M,EAASlnM,IAAI6zM,GACbN,EAAcjuN,KAAKsuN,GAEnB,MAAME,EAAiBP,EAAc/qM,OAAO,GAAG,GACzCurM,EAAe,IAAIl7L,GAAO,EAAO86L,EAAWF,GAC5CO,EAAaL,EAAUxwH,kBAC7BwwH,EAAUh+K,UAAUo+K,EAAcC,EAAW34M,OAAQ24M,EAAWt4M,QAChEq4M,EAAaz7L,gBAAgBw7L,GAC7BA,EAAex7L,gBAAgBy7L,GAG/B,IAAK,IAAIh3N,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMO,EAAO,WACPq4H,EAAQj2H,KAAKmwN,MAAMllL,YAAYrtC,EAAM,CAACkhC,MAAO,UACnDm3F,EAAMp8F,QAAQ,SACd,MAAM/5B,EAAOm0N,EAAUxwH,kBACvBwwH,EAAUlmM,SAASkoG,EAAOn2H,EAAK6b,OAAQ7b,EAAKkc,QAIhD,GAAwB,OAApB5X,EAAImwN,YAAsB,CAC1B,MAAMC,EAAYpwN,EAAImwN,YAClBC,GAAa7wH,EACb8sF,EAAU+jC,EAAY,GAAG1a,mBAAmB/1M,GAG5C0sL,EAAU,GAAGqpB,mBAAmB/1M,GAIxC,OADA+8F,EAAKsxF,UAAUruL,EAAQ,CAACs5I,MAAO,gBACxBv8C,GAGX3jG,EAAAo+M,UAAUt8M,UAAUmxN,iBAAmB,SAAStvH,EAAM18F,GAClD,MAAM62H,EAAYtE,EAAAzB,QAAQC,aAAa,IACvC8F,EAAUhsG,OAASjvB,KAAK+1H,QAExBkF,EAAU/Y,OAAS,EACnB,MAAMnK,EAAWjxG,GAAQA,EAAK/E,OAAS0mB,EAAIjL,aAAawK,EAAApmB,QAAGoM,YAC3D,IAAK,IAAI3Q,EAAI,EAAGA,EAAI49H,EAAU/Y,OAAS,EAAG7kH,IACtC49H,EAAUljB,SAASnyG,KAAKmyG,GAG5BkjB,EAAU1a,UAAYt2G,IAAwB,aAAfA,EAAMlI,MACrCk5H,EAAUk+B,SAAU,EAEpB,MACMphJ,GADU,IAAI80K,EAAA5zB,eACEt6J,OAAOyF,EAAI6S,KAAM7S,EAAI8S,KAAM+jH,GAwBjD,OApBAj7H,KAAKy0N,UAAY,IAAIC,EAAkB10N,KAAM8gG,EAAM/oF,GAEnD/X,KAAKmwN,MAAMn6F,gBAAgBj+G,EAAO/X,KAAK+1H,SAEvCh+G,EAAM48M,gBAAgB,KAClB,MAAMC,EAAa,IAAI/sG,EAAKyE,aACxBtsH,KAAKmwN,MAAMh6F,gBAAgBt3H,KAAKmB,KAAKmwN,MAAOp4M,EAAO/X,KAAK+1H,SACxD,IACA,uDACJj1B,EAAKi2F,SAAS69B,KAGlB78M,EAAM88M,WAAY,KACd70N,KAAK80N,gBAAkBh0H,EAAKi0H,YAAYn3G,cACxC9c,EAAKi0H,YAAYrsG,YAAY,MAEjC3wG,EAAMi9M,UAAW,KACbl0H,EAAKi0H,YAAYrsG,YAAY1oH,KAAK80N,mBAG/B/8M,GAGX,MAAM28M,EAAoB,SAASnvM,EAAQu7E,EAAM/oF,GAG7C/X,KAAKi1N,MAAQn0H,EACb9gG,KAAK+oG,OAAShxF,EAEd/X,KAAKk1N,WAAa,EAClBl1N,KAAKm1N,WAAa,EAClBn1N,KAAKo1N,cAAgB,EACrBp1N,KAAKq1N,cAAgB,EAErBr1N,KAAK01B,WAAY,EACjB11B,KAAKmtC,OAAS,SAASrX,EAAS1xB,GAC5B,GAAI0xB,IAAY9N,EAAApmB,QAAGoJ,mBACf,GAAI5G,EAAIlF,eAAe,QAAsB,eAAZkF,EAAIC,IAAsB,CACvD,MAAMixN,EAAelxN,EAAI6F,MACM,iBAA3BqrN,EAAa5zN,aACX1B,KAAKm1N,WAEoB,mBAA3BG,EAAa5zN,aACX1B,KAAKk1N,iBAId,GAAIp/L,IAAY9N,EAAApmB,QAAGqJ,iBAAkB,CACtC,MAAMhB,EAAQ7F,EAAI6F,MACM,iBAApBA,EAAMvI,aACJ1B,KAAKq1N,cACHr1N,KAAKq1N,gBAAkBr1N,KAAKm1N,YAC5Bn1N,KAAKu1N,kBAETvtM,EAAApmB,QAAGuC,MAAMnE,KACL,8BAAgCA,KAAKq1N,eACzCrtM,EAAApmB,QAAGuC,MAAMnE,KAAM,eAAiBA,KAAKm1N,aAEZ,mBAApBlrN,EAAMvI,cACT1B,KAAKo1N,cACHp1N,KAAKo1N,gBAAkBp1N,KAAKk1N,YAC5Bl1N,KAAKw1N,qBAKrBzuM,EAAK4O,YAAY3N,EAAApmB,QAAGoJ,kBAAmBhL,MACvC+mB,EAAK4O,YAAY3N,EAAApmB,QAAGqJ,iBAAkBjL,MAEtCA,KAAKsrF,QAAU,EAACmqI,EAAKn+M,KACjB,MAAMjC,EAAMogN,EAAIjyM,SAChB00E,EAAA/M,aAAa4I,cAAc1+E,EAAKiC,KAIpCtX,KAAKu1N,gBAAkB,MACnBvtM,EAAApmB,QAAGslB,QACC,0DACJ,MAAMwuM,EAAa,IAAI7tG,EAAKyE,aACxBtsH,KAAKsrF,QAAQzsF,KAAKmB,KAAMA,KAAK+oG,OAAQ,IAAM,IAC3C,4DAEJ/oG,KAAKi1N,MAAMl+B,SAAS2+B,GACpB,MAAMC,EAAa,IAAI9tG,EAAKyE,aACxB,OAAU,KAAU0jG,EAAA4F,MAAMrzF,OAAOszF,YACrC71N,KAAKi1N,MAAMl+B,SAAS4+B,GACpB,MAAMG,EAAa,IAAIjuG,EAAKyE,aACxB/mG,EAAO8wG,gBAAgBx3H,KAAK0mB,EAAQvlB,KAAK+oG,OAAQ/oG,KAAK+1H,SACtD,IACA,2DACJ/1H,KAAKi1N,MAAMl+B,SAAS++B,KAGxB91N,KAAKw1N,gBAAkB,MACnBxtM,EAAApmB,QAAGslB,QAAQ8oM,EAAA4F,MAAMrzF,OAAOwzF,aAGxB,MAAMC,EAAW,IAAInuG,EAAKyE,aAAa,OAAU,IAC7C0jG,EAAA4F,MAAMrzF,OAAO0zF,aACjBj2N,KAAKi1N,MAAMl+B,SAASi/B,GACpB,MAAME,EAAY,IAAIruG,EAAKyE,aAAa,OAAU,IAC9C,8DACJtsH,KAAKi1N,MAAMl+B,SAASm/B,qFC9oBf/4N,EAAAy4N,MAAa,GAE1Bz4N,EAAAy4N,MAAMO,MAAQ,GACdh5N,EAAAy4N,MAAMO,MAAMC,SAAW,0QAWvBj5N,EAAAy4N,MAAMO,MAAME,SAAW,gbAmBvBl5N,EAAAy4N,MAAMrzF,OAAS,GACfplI,EAAAy4N,MAAMrzF,OAAOszF,WACT,gEAEJ14N,EAAAy4N,MAAMrzF,OAAOwzF,YACT,8DAEJ54N,EAAAy4N,MAAMrzF,OAAO0zF,YACT,+ICzCJ,MAAAp+C,EAAA56K,EAAA,IACA41C,EAAA51C,EAAA,IACA21C,EAAA31C,EAAA,IAKAE,EAAAk0N,aAAA,cAAkCx5C,EAAAzzI,UAE9B/b,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAKioH,OAAS,IAAIp1E,EAAAqB,aAAal0C,QAKvC7C,EAAAi2N,aAAA,cAAkCv7C,EAAAzzI,UAE9B/b,YAAYzqB,GACRs5B,MAAMt5B,GACNoC,KAAKioH,OAAS,IAAIr1E,EAAAwB,aAAap0C,0BCjBvC,SAAA7C,GACA,aASA,SAAA8rC,EAAA85G,GACA,IAAAjlJ,EAAAkC,OAAA7C,EAAA6C,KAAA,GACAlC,EAAAilJ,QACAjlJ,EAAA4pK,IAAA,EACA5pK,EAAAukK,KAAA,EACAvkK,EAAAw4N,QAAA,EAZAn5N,EAAA2/M,QAAA,QACA3/M,EAAAgvC,MAuKA,SAAAi7B,GACA,WAAAn+B,EAAAm+B,GAAAsjH,WAvKAvtL,EAAA2hB,UAiLA,SAAAA,EAAAy3M,GACA,OAAAA,EAAAx0N,MACA,yBAAAy0N,EAAAD,EAAAntK,MAAA,IACA,4BAAAotK,EAAAD,EAAAntK,MAAA,IACA,wBAAAmtK,EAAAn2G,MAAA/qG,IAAAyJ,GAAAoF,KAAA,KACA,wBAAApF,EAAAy3M,EAAAvrC,KAAA,QAAAurC,EAAA5+I,IAAAtiE,IAAAyJ,GAAAoF,KAAA,WACA,qBAAAqyM,EAAAzrC,YAAAz1K,IAAAyJ,GAAAoF,KAAA,WAEA,UAAAxf,MAAA,sBAAA6xN,EAAAx0N,OAxLA5E,EAAA8rC,SAYA,IAAAwtL,EAAAxtL,EAAAwtL,KAAA,EA6JA,SAAAD,EAAAptK,GACA,OAAAA,EAAAza,QAAA,cACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aA/JA1F,EAAAhqC,UAAAwF,MAAA,SAAAJ,GACA,UAAAqyN,YAAAryN,EAAA,OAAArE,KAAAqiK,KAAA,IAAAriK,KAAAs2N,UAGArtL,EAAAhqC,UAAA03N,KAAA,WACA,OAAA32N,KAAA0nK,KAAA1nK,KAAA+iJ,MAAAxhJ,OAAAk1N,EACAz2N,KAAA+iJ,MAAA/iJ,KAAA0nK,MAGAz+H,EAAAhqC,UAAA23N,IAAA,SAAAC,GACA,IAAApyK,EAAAzkD,KAAA22N,OAIA,YAHAG,IAAAD,OAAApyK,GACAzkD,KAAAyE,MAAA,YAAAoyN,EAAA,QAAApyK,GAEAA,IAAAgyK,KACAz2N,KAAA0nK,MACA1nK,KAAAs2N,UACA7xK,IAMAxb,EAAAhqC,UAAAs+L,GAAA,WAEA,IADA,IAAA94I,EAAAsyK,EAAA,GACA,QAAAh3M,QAAA0kC,EAAAzkD,KAAA22N,SAAA,GACA,OAAAlyK,IACAzkD,KAAAqiK,OACAriK,KAAAs2N,QAAA,GAEAS,GAAA/2N,KAAA42N,MAEA,OAAAG,GAIA9tL,EAAAhqC,UAAA+3N,QAAA,WACAh3N,KAAA42N,IAAA,MACA,IAAAnyK,EAAAzkD,KAAA22N,OACA,OAAAlyK,GACA,QAA0B,OAA1BzkD,KAAA42N,MAA0B,KAC1B,QAA0B,OAA1B52N,KAAA42N,MAA0B,KAC1B,QAA0B,OAA1B52N,KAAA42N,MAA0B,IAC1B,SAA0B,OAA1B52N,KAAA42N,MAA0B,KAE1B52N,KAAAyE,MAAA,8BAAAggD,IAYAxb,EAAAhqC,UAAAg4N,OAAA,WACA,IAAAxyK,EAAAzkD,KAAA22N,OACA,OAAAlyK,IAAAgyK,IAAA,4BAA6C5/L,KAAA4tB,IAAA,OAAAA,IAI7Cxb,EAAAhqC,UAAAmqD,KAAA,WAEA,IADA,IAAA2tK,EAAA,GACA/2N,KAAAi3N,UACA,OAAAj3N,KAAA22N,OAAAI,GAAA/2N,KAAAg3N,UACAD,GAAA/2N,KAAA42N,MAEA,OAAAG,GAKA9tL,EAAAhqC,UAAAi4N,cAAA,WAEA,IADA,IAAAH,EAAA,GAAAtyK,EAAAzkD,KAAA22N,OACA32N,KAAAi3N,UAAA,MAAAxyK,GAAA,MAAAA,GACAsyK,GAAA,OAAAtyK,EAAAzkD,KAAAg3N,UACAh3N,KAAA42N,MACAnyK,EAAAzkD,KAAA22N,OAEA,OAAAI,GAIA9tL,EAAAhqC,UAAAk4N,SAAA,WACAn3N,KAAA42N,IAAA,KACA,IAAAxtK,EAAAppD,KAAAk3N,gBAEA,OADAl3N,KAAA42N,IAAA,KACA,CAAY70N,KAAA,WAAAqnD,SAIZngB,EAAAhqC,UAAAm4N,YAAA,WACAp3N,KAAA42N,IAAA,KACA,IAAAxtK,EAAAppD,KAAAopD,OAEA,OADAppD,KAAA42N,IAAA,KACA,CAAY70N,KAAA,cAAAqnD,SAIZngB,EAAAhqC,UAAAw8I,KAAA,WACA,YAAAz7I,KAAA22N,OAAA32N,KAAAo3N,cAAAp3N,KAAAm3N,YAIAluL,EAAAhqC,UAAAo4N,WAAA,WACA,IAAAj3G,EAAA,CAAApgH,KAAAy7I,QAEA,IADAz7I,KAAAu9L,KACA,KAAAx9K,QAAA/f,KAAA22N,SAAA,GACAv2G,EAAAx6G,KAAA5F,KAAAy7I,QACAz7I,KAAAu9L,KAEA,OAAYx7L,KAAA,aAAAq+G,UAIZn3E,EAAAhqC,UAAAq4N,YAAA,WAEA,IADA,IAAAA,EAAA,CAAAt3N,KAAAq3N,cACA,MAAAr3N,KAAA22N,QACA32N,KAAA42N,IAAA,KACA52N,KAAAu9L,KACA+5B,EAAA1xN,KAAA5F,KAAAq3N,cAEA,OAAAC,GAIAruL,EAAAhqC,UAAAs4N,WAAA,WACA,IAAAvsC,EAAAhrL,KAAAo3N,cACAp3N,KAAAu9L,KACAv9L,KAAA42N,IAAA,KAAkB52N,KAAA42N,IAAA,KAAe52N,KAAA42N,IAAA,KACjC52N,KAAAu9L,KACA,IAAA5lH,EAAA33E,KAAAs3N,cAEA,OADAt3N,KAAA42N,IAAA,KACA,CAAY70N,KAAA,aAAAipL,MAAArzG,QAIZ1uC,EAAAhqC,UAAAyrL,QAAA,WACA,IAAAI,EAAA,CAAA9qL,KAAAu3N,cAEA,IADAv3N,KAAAu9L,KACA,MAAAv9L,KAAA22N,QACA7rC,EAAAllL,KAAA5F,KAAAu3N,cACAv3N,KAAAu9L,KAEA,OAAYx7L,KAAA,UAAA+oL,gBAtKZ,CAiMsD3tL,kFC5LtD,MAEMsrB,EAFNxrB,EAAA,GAEYqgB,OAAOC,SACNpgB,EAAAstL,aAAoB,GAEjC,MAMM+sC,EACN,ioCAmDM9sC,6JAGJ8sC,mlFAqGIC,EAAW,gBAgBjB,MAAMC,EAAgB,CAClBC,UAAW,IACXC,QAAS,GACTz0I,WAAY,GACZ00I,SAAU,IACVC,WAAY,IACZC,SAAU,IACVC,OAAQ,GACRzkE,QAAS,GACT9E,UAAW,IACXwpE,SAAU,IAEd96N,EAAAstL,aAAaitC,cAAgBA,EAE7B,MAAMQ,EA5BN,SAAwB9uK,GACpB,MAAMznD,EAAM,GAQZ,OAPcynD,EAAKvkD,MAAM,MACnBwF,QAAQg4J,IACV,MAAM81D,EAAU91D,EAAK5yI,MAAMgoM,GACvBU,GAAWA,EAAQ52N,OAAS,GAC5BI,EAAIiE,KAAKuyN,EAAQ,MAGlBx2N,EAmBcy2N,CAAeZ,GAExCr6N,EAAAstL,aAAanuF,UAAY,SAAS8rF,EAAQphL,EAAQqxN,GAAc,GACxDA,GAGAt6N,OAAO6qB,KAAK8uM,GAAertN,QAAQiuN,IAC/BZ,EAAcY,GAAO,IAG7BZ,EAActvC,GAAUphL,GAG5B7J,EAAAstL,aAAa8tC,cAAgB,WACzB9vM,EAAIugB,YAAY0uL,IAGpBv6N,EAAAstL,aAAaC,QAAUA,EACvBvtL,EAAAstL,aAAaytC,iBAAmBA,8UC7NhC,MACM/zN,EADNlH,EAAA,EACcq3B,CAAI,kBAElBtM,EAAAC,EAAAhrB,EAAA,IACAu7N,EAAAv7N,EAAA,KACAogB,EAAApgB,EAAA,GACAm5G,EAAAn5G,EAAA,IACA+yC,EAAA/yC,EAAA,GAEA++J,EAAA/+J,EAAA,IACAo3B,EAAAp3B,EAAA,GAEAigC,EAAA9I,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,IAKAw7N,EAAAx7N,EAAA,IAEAy7N,EAAAz7N,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SACbwJ,EAAOsN,EAAArN,UAAUC,UA6CvB,MAAa06G,EA0BTt5G,YAAYwE,GACR7sB,KAAK24N,YACL34N,KAAK44N,UAAY,GACjB54N,KAAK6sB,KAAO,CACRm/J,UAAW,GACXD,UAAW,EACXE,UAAW,EACXC,UAAW,EACX2sC,iBAAkB,GAGtB74N,KAAK84N,gBAAkB,EAEvB94N,KAAK+4N,oBAAsB,CACvBr2F,OAAQ1iI,KAAKg5N,aAAeh5N,KAAKg5N,aAAan6N,KAAKmB,MACnD+pL,OAAQ/pL,KAAKi5N,aAAej5N,KAAKi5N,aAAap6N,KAAKmB,MACnDmjI,OAAQnjI,KAAKk5N,aAAel5N,KAAKk5N,aAAar6N,KAAKmB,MACnDgqL,aAAchqL,KAAKk5N,aAAel5N,KAAKk5N,aAAar6N,KAAKmB,MACzDujI,OAAQvjI,KAAKm5N,aAAen5N,KAAKm5N,aAAat6N,KAAKmB,MACnDoqL,SAAUpqL,KAAKo5N,eAAiBp5N,KAAKo5N,eAAev6N,KAAKmB,OAM7DA,KAAKq5N,kBAAmB,EACxBr5N,KAAK2tI,IAAM,EACX3tI,KAAKmE,MAAQA,EAAM0xB,QAGnB71B,KAAKsoB,IAAMG,EACPoE,GAAQA,EAAKvE,MAAMtoB,KAAKsoB,IAAMuE,EAAKvE,KAEvCtoB,KAAKu1B,KAAOxO,EAGTsB,YACHroB,KAAKszL,UAAY,CAACluD,OAAQ,IAC1BplI,KAAK44N,UAAY,GACjB54N,KAAKs5N,SAAW,GAEhBt5N,KAAKu5N,MAAQ,CACTC,eAAe,EACf92F,QAAQ,EACRS,QAAQ,EACRE,MAAM,EACNE,QAAQ,GAEZvjI,KAAKy5N,eAAiB,GAEtBz5N,KAAKirL,UAAY,KAGjBjrL,KAAKwmD,MAAQ,IAAIuK,IAGjB/wD,KAAK05N,gBAAkB,IAAI3oK,IAC3B/wD,KAAK25N,YAAc,IAAI5oK,IAGpB1oC,SAASviB,GACZ9F,KAAKmE,MAAQ2B,EACb3B,EAAM0xB,QAAU/vB,EAGbuiB,qBACH,MAAMqoH,EAAY1wI,KAAKszL,UAAUluD,OAAOrlH,QAAQ/f,KAAKirL,WACrD,OAAIv6C,EAAY,EACL1wI,KAAKszL,UAAUluD,OAAOsL,EAAY,GAEtC,KAGJroH,2BAA2BirK,GAC9BtzL,KAAKwmD,MAAMmN,IAAI2/H,EAAW,CACtBrpL,MAAO,GACPo7E,QAAS,GACTq9C,OAAQ,GACR57H,KAAM,GACNq8H,OAAQ,GACRka,MAAO,GACPha,KAAM,GACN2mD,aAAc,GACd4vC,OAAQ,GACRv2H,KAAM,KAIPh7E,kBAAkBzpB,EAAai7N,GAKlC,GAJK75N,KAAKwmD,MAAMt9C,IAAIlJ,KAAKirL,YACrBjrL,KAAK85N,2BAA2B95N,KAAKirL,WAGrCjrL,KAAKwmD,MAAMtoD,IAAI8B,KAAKirL,WAAW/rL,eAAeN,GAC9CoB,KAAKwmD,MAAMtoD,IAAI8B,KAAKirL,WAAWrsL,GAAKgH,KAAKi0N,OAExC,CACD,MAAMjxM,EAAO7qB,OAAO6qB,KAAK5oB,KAAKwmD,MAAMtoD,IAAI8B,KAAKirL,YAAY/mK,KAAK,KAC9D8D,EAAApmB,QAAGK,IAAI,gBAAiB,2BACdrD,2BAA6BgqB,MAMxCP,kBACHtmB,EAAcg4N,GAAuB,GAErC,GAAI/5N,KAAKwmD,MAAMt9C,IAAIlJ,KAAKirL,WAAY,CAChC,MAAM+uC,EAAwBh6N,KAAKwmD,MAAMtoD,IAAI8B,KAAKirL,WAClD,GAAI+uC,EAAM96N,eAAe6C,IAASi4N,EAAMj4N,GAAMR,OAAS,EAAG,CACtD,MAAMzC,EAAIk7N,EAAMj4N,GAAMR,OACtB,OAAOy4N,EAAMj4N,GAAMjD,EAAI,GAEtB,GAAIi7N,EAAa,CAGlB,MAAME,EAAcj6N,KAAKk6N,qBACzB,GAAID,EAAa,CACb,MAAME,EAA8Bn6N,KAAKwmD,MAAMtoD,IAAI+7N,GACnD,GAAIE,EAAYj7N,eAAe6C,GAAO,CAClC,MAAMjD,EAAIq7N,EAAYp4N,GAAMR,OAC5B,OAAO44N,EAAYp4N,GAAMjD,EAAI,IAIrCkpB,EAAApmB,QAAGK,IAAI,gBAAiB,wCACDF,+BAEtB,CACD,MAAM6mB,EAAO7qB,OAAO6qB,KAAKoxM,GACzBhyM,EAAApmB,QAAGK,IAAI,gBAAiB,wCACDF,YAAe6mB,WAI1CZ,EAAApmB,QAAGK,IAAI,gBAAiB,oBACrB,gCAEP,OAAO,KAKJomB,aAAamxG,EAAOziE,EAAM9gD,EAAGC,GAChC,MAAMkkN,EAAqBrjK,EAAKgkE,UAAU9kH,EAAGC,GACvC6pJ,EAAsBq6D,EAAS7vH,SAAS,QAC9C,IAAI8vH,EAAa,EAIjB,OAHAt6D,EAAO11J,QAASygG,IACZuvH,GAAcr6N,KAAKs6N,oBAAoBxvH,EAAMsvH,KAE1CC,EAMJhyM,oBAAoBg7E,EAAgB+2H,GACvC,MAAMzxC,EAAY3oL,KAAK6sB,KAAKgsM,kBAAoB,EAChD,IAAIwB,EAAa,EACjB,IAAK,IAAIh9N,EAAI,EAAGA,EAAIsrL,EAAWtrL,IAC3B,IAAK,IAAIyB,EAAI,EAAGA,EAAIkB,KAAK84N,gBAAiBh6N,IAAK,CAC3C,MACM6lI,GADW,IAAI+zF,EAAA/tC,UACSc,iBAAiBzrL,KAAK6sB,MAEpD,GADA7sB,KAAK24N,YACD34N,KAAKgzN,oBAAoBruF,EAAOthC,EAAM+2H,GAAW,CACjDp6N,KAAKizN,mBAAmB5vH,KACtBg3H,EACF,OAIZ,OAAOA,EAMJhyM,oBAAoBs8G,EAActhC,EAAgB+2H,KACnDp6N,KAAK2tI,IACP3tI,KAAKu6N,SAAWH,EAChB,MAAMI,EAAW,IAAI/B,EAAA7vC,UAErB5oL,KAAKs0B,IAAI,8BACLqwG,EAAM0jD,YACNroL,KAAKs0B,IAAI,eAAiBqwG,EAAM81F,WAAa,UAC7Cz6N,KAAKs0B,IAAI,gBAAkBqwG,EAAMgkD,YAAc,GAAK,gBAKxD,IAAI+xC,EAAiB,KACrB,GAAI16N,KAAKirL,UAAW,CAChB,MAAM7rK,EAAS,CAAC2pK,aAAc,uBAC1B0D,SAAU+tC,EAAUr1N,KAAM,IAC9BnF,KAAKs0B,IAAI,8CACTt0B,KAAKirL,UAAU7wJ,UAAU,WAAYhb,GACrCs7M,EAAiB16N,KAAKirL,UAAU0vC,qBAKhCD,GACA16N,KAAK46N,kBAAkB,SAAUF,GAGrC16N,KAAKirL,UAAYuvC,EACjBx6N,KAAKszL,UAAUluD,OAAOx/H,KAAK5F,KAAKirL,WAChC,MAAMlzK,EAAQ/X,KAAKsoB,IAAI9K,aAAa6lF,EAAKtC,aACzC/gG,KAAKirL,UAAU7wJ,UAAU,WAAYriB,GAGrC,IAAIspD,GAAK,EAgBT,GAfAsjE,EAAMk2F,WAAWxwN,QAAQo+K,IACrB,MAAMqyC,EAAU96N,KAAKirL,UAAU0vC,qBAC/B,GAAIlyC,EAAKJ,UAAW,CAGhB,MAAM0yC,EAAUD,EAAQj1F,gBACxBxkE,EAAKA,GAAMrhE,KAAKgzN,oBAAoBvqC,EAAMsyC,EAASX,OAElD,CACD,MAAMY,EAAWF,EAAQj1F,gBACzBxkE,EAAKA,GAAMrhE,KAAKi7N,QAAQt2F,EAAO8jD,EAAMuyC,EAAUZ,QAIvD/4J,EAAKA,GAAMrhE,KAAKk7N,oBAIZ,OAFAl7N,KAAKm7N,uBACHn7N,KAAK2tI,KACA,EAOX,GALA3tI,KAAKs0B,IAAI,kBAAoBt0B,KAAKirL,UAAU1mD,YAI5BvkI,KAAKszL,UAAUluD,OAAO7jI,OACxB,EAAG,CACbvB,KAAK44N,UAAUxzK,QAAQplD,KAAKszL,UAAUluD,OAAOxhF,OAC7C,MAAM2rH,EAAQvvK,KAAKszL,UAAUluD,OAAO7jI,OAAS,EAC7CvB,KAAKirL,UAAYjrL,KAAKszL,UAAUluD,OAAOmqC,QAGvCvvK,KAAK44N,UAAUxzK,QAAQplD,KAAKirL,WAGhC,QADEjrL,KAAK2tI,KACA,EAIJtlH,kBAAkBzpB,EAAK+lB,GAC1B,MAAMqjK,EAAWhoL,KAAKo7N,aACjBx8N,GACDopB,EAAApmB,QAAGK,IAAI,gBAAiB,uBAClB+lL,8BAAqCrjK,KAE1CA,GACDqD,EAAApmB,QAAGK,IAAI,gBAAiB,uBAClB+lL,8BAAqCppL,KAE1CoB,KAAK05N,gBAAgBxwN,IAAItK,IAC1BoB,KAAK05N,gBAAgB/lK,IAAI/0D,EAAK,IAElCoB,KAAK05N,gBAAgBx7N,IAAIU,GAAKgH,KAAK+e,GAGhC0D,iBAAiBzpB,GACpB,GAAIoB,KAAK05N,gBAAgBxwN,IAAItK,GAAM,CAC/B,MAAM2X,EAAMvW,KAAK05N,gBAAgBx7N,IAAIU,GACrC,GAAI2X,EAAIhV,OAAS,EAAG,CAChB,MAAMuF,EAAO9G,KAAK05N,gBAAgBx7N,IAAIU,GAAKglD,MAI3C,OAHmB,IAAfrtC,EAAIhV,QACJvB,KAAK05N,gBAAgB2B,OAAOz8N,GAEzBkI,GAGf,OAAO,KAKJuhB,QAAQs8G,EAAc6jD,EAAYnlF,EAAgB+2H,KACnDp6N,KAAK2tI,IACP,MAAMq6C,EAAWQ,EAAK8yC,cACtB,IAAIj6J,GAAK,EAET,GAAIrhE,KAAKq5N,mBAAqBkC,EAAiBryN,IAAI8+K,GAE/C,OADAxjL,QAAQU,iBAAiB8iL,uCAClB,EAOX,OAJAhoL,KAAKs0B,IAAI,wBAA0B0zJ,EAAW,KAC9ChoL,KAAKy5N,eAAe7zN,KAAKoiL,GACzBhoL,KAAKo7N,aAAepzC,EAEZA,GACJ,IAAK,UAAW,CACZ,MAAMwzC,EAAiBx7N,KAAKy7N,oBACxBD,IACAx7N,KAAKirL,UAAU7wJ,UAAU,UAAWohM,GACpCn6J,GAAK,GAET,MAEJ,IAAK,SAAU,CACX,MAAMq6J,EAAc17N,KAAK27N,oBACrBD,IACA17N,KAAKirL,UAAU7wJ,UAAU,SAAUshM,GACnCr6J,GAAK,GAET,MAEJ,IAAK,SAAU,CAEX,MAAMu6J,EAAc57N,KAAK67N,oBACrBD,IACA57N,KAAKirL,UAAU7wJ,UAAU,SAAUwhM,GACnCv6J,GAAK,GAET,MAEJ,IAAK,SAAU,CACX,MAAMy6J,EAAgB97N,KAAK+7N,iBAAiB3B,GACxC0B,IACA97N,KAAKirL,UAAU7wJ,UAAU,SAAU0hM,GACnCz6J,GAAK,EACLrhE,KAAK46N,kBAAkB,SAAUkB,GAEjC97N,KAAKu5N,MAAM72F,QAAS,GAGxB,MAEJ,IAAK,aAAc,CACf,MAAM57H,EAAO9G,KAAKg8N,kBAAkB,QAChCl1N,IACA9G,KAAKirL,UAAU7wJ,UAAU,aAActzB,GACvCu6D,GAAK,GAGT,MAEJ,IAAK,uBAAwB,CAEzB,MAAMv6D,EAAO9G,KAAKi8N,sBACdn1N,IACA9G,KAAKirL,UAAU7wJ,UAAU,MAAOtzB,GAChCu6D,GAAK,EACLrhE,KAAK46N,kBAAkB,OAAQ9zN,IAEnC,MAEJ,IAAK,cAAe,CAEhB,MAAMi2F,EAAU/8F,KAAKo+I,kBACjBrhD,IACA/8F,KAAKirL,UAAU7wJ,UAAU,MAAO2iE,GAChC17B,GAAK,EACLrhE,KAAK46N,kBAAkB,OAAQ79H,IAEnC,MAEJ,IAAK,gBAAiB,CAElB,MAAMj2F,EAAO9G,KAAKk8N,oBACdp1N,IACA9G,KAAKirL,UAAU7wJ,UAAU,WAAYtzB,GACrCu6D,GAAK,EACLrhE,KAAK46N,kBAAkB,OAAQ9zN,IAEnC,MAEJ,IAAK,OAAQ,CAET,MAAMiR,EAAQ/X,KAAKirL,UAAU0vC,qBACvBwB,EAAcn8N,KAAKo8N,kBAAkBrkN,EAAMzN,aAC7C6xN,IACAn8N,KAAKirL,UAAU7wJ,UAAU,OAAQ+hM,GACjC96J,GAAK,GAGT,MAEJ,IAAK,sBAEDA,GAAK,EACDrhE,KAAKu5N,MAAM72F,SAEXrhE,GAAK,GAET,MAEJ,IAAK,gBAAiB,CAGlB,MAAMg7J,EAAcr8N,KAAKs8N,sBAAsBj5H,EAAM+2H,GACrDp6N,KAAKirL,UAAU7wJ,UAAU,WAAYiiM,GACrC,MAAME,EAAgBv8N,KAAKw8N,mBAE3B,GAAID,IACAv8N,KAAKirL,UAAU7wJ,UAAU,UAAWmiM,GACpCl7J,GAAK,EACDrhE,KAAKu5N,MAAMl2F,OACXrjI,KAAKu5N,MAAMl2F,MAAO,EAElBrjI,KAAKy8N,kBAAkBz8N,KAAKg8N,kBAAkB,QAC1CK,IAEJr8N,KAAKu5N,MAAM72F,QAAQ,CACnB1iI,KAAKu5N,MAAM72F,QAAS,EAEpB,MAAMg6F,EAAa18N,KAAKg8N,kBAAkB,UAAU,GACpDh8N,KAAKy8N,kBAAkBC,EAAYL,GAG3C,MAEJ,IAAK,aAAc,CAEf,MAAMA,EAAcr8N,KAAK28N,eAAet5H,EAAM+2H,GAe9C,GAdAp6N,KAAKirL,UAAU7wJ,UAAU,WAAYiiM,GACrCh7J,GAAK,EACDrhE,KAAKu5N,MAAMl2F,OACXrjI,KAAKu5N,MAAMl2F,MAAO,EAElBrjI,KAAKy8N,kBAAkBz8N,KAAKg8N,kBAAkB,QAC1CK,IAEJr8N,KAAKu5N,MAAMp2F,SACXnjI,KAAKu5N,MAAMp2F,QAAS,EAEpBnjI,KAAKy8N,kBAAkBz8N,KAAKg8N,kBAAkB,UAC1CK,IAEJr8N,KAAKu5N,MAAM72F,OAAQ,CACnB1iI,KAAKu5N,MAAM72F,QAAS,EAEpB,MAAMg6F,EAAa18N,KAAKg8N,kBAAkB,UAAU,GACpDh8N,KAAKy8N,kBAAkBC,EAAYL,GAEvC,MAEJ,IAAK,aAAc,CACf,MAAMO,EAAc58N,KAAK68N,iBACrBD,IACA58N,KAAKirL,UAAU7wJ,UAAU,OAAQwiM,GACjCv7J,GAAK,GAET,MAEJ,IAAK,yBAEDrhE,KAAKu5N,MAAMC,eAAgB,EAC3Bn4J,GAAK,EACL,MAEJ,IAAK,SAAU,CACX,MAAMy7J,EAAgB98N,KAAK+8N,mBACvBD,IACA98N,KAAKirL,UAAU7wJ,UAAU,SAAU0iM,GACnC98N,KAAKu5N,MAAMp2F,QAAS,EACpBnjI,KAAK46N,kBAAkB,SAAUkC,GACjCz7J,GAAK,GAET,MAEJ,IAAK,eACDrhE,KAAKirL,UAAU7wJ,UAAU,eACrB,CAAC2uJ,aAAc,eAAgB5jL,KAAM,CAACk+F,EAAM+2H,KAChD/4J,GAAK,EACL,MAEJ,IAAK,cAAe,CAChB,MAAM6jB,EAAallF,KAAKqkM,cAAchhG,EAAM+2H,GACxCl1I,IACAllF,KAAK46N,kBAAkB,OAAQ11I,GAE/BllF,KAAKu5N,MAAMl2F,MAAO,EAClBrjI,KAAKirL,UAAU7wJ,UAAU,OAAQ8qD,GACjC7jB,GAAK,GAET,MAEJ,IAAK,SAAU,CACX,MAAM27J,EAAeh9N,KAAKi9N,kBACtBD,IACAh9N,KAAKirL,UAAU7wJ,UAAU,SAAU4iM,GACnC37J,GAAK,GAET,MAEJ,IAAK,iBAAkB,CACnB,MAAMy7J,EAAgB98N,KAAK+8N,mBACvBD,IACA98N,KAAKirL,UAAU7wJ,UAAU,eAAgB0iM,GACzC98N,KAAKu5N,MAAMh2F,QAAS,EACpBvjI,KAAK46N,kBAAkB,eAAgBkC,GACvCz7J,GAAK,GAGT,MAEJ,IAAK,SAAU,CACX,MAAMp3D,EAAQjK,KAAKk9N,oBACnB,GAAIjzN,IACAjK,KAAKirL,UAAU7wJ,UAAU,SAAUnwB,GACnCo3D,GAAK,EACDrhE,KAAKu5N,MAAMh2F,QAAQ,CACnB,MAAM45F,EAAen9N,KAAKg8N,kBAAkB,gBAC5Ch8N,KAAKy8N,kBAAkBxyN,EAAOkzN,GAC9Bn9N,KAAKu5N,MAAMh2F,QAAS,EAG5B,MAEJ,IAAK,WAAY,CACb,MAAMt5H,EAAQjK,KAAKo9N,gBACfnzN,IACAjK,KAAKirL,UAAU7wJ,UAAU,MAAOnwB,GAChCo3D,GAAK,GAET,MAEJ,IAAK,iBAEDA,GAAK,EACL,MAEJ,IAAK,iBAAkB,CAEnB,MAAMq5J,EAAiB16N,KAAKg8N,kBAAkB,UAC9C,GAAItB,IACA16N,KAAKirL,UAAU7wJ,UAAU,WAAYsgM,GACrCr5J,GAAK,EACDrhE,KAAKu5N,MAAM72F,QAAQ,CACnB1iI,KAAKu5N,MAAM72F,QAAS,EAEpB,MAAMg6F,EAAa18N,KAAKg8N,kBAAkB,UAAU,GACpDh8N,KAAKy8N,kBAAkBC,EAAYhC,GAG3C,MAEJ,IAAK,cAWL,IAAK,OAAQ,CACT,MAAM39H,EAAU/8F,KAAKq9N,iBACjBtgI,IAEA/8F,KAAKirL,UAAU7wJ,UAAU,MAAO2iE,GAChC/8F,KAAK46N,kBAAkB,OAAQ79H,GAC/B17B,GAAK,GAET,MAEJ,IAAK,MAAO,CACR,MAAMz6B,EAAU5mC,KAAKs9N,eACjB12L,IACA5mC,KAAKirL,UAAU7wJ,UAAU,MAAOwM,GAChCy6B,GAAK,GAGT,MAEJ,IAAK,YACDrhE,KAAKirL,UAAU7wJ,UAAU,YACrB,CAAC2uJ,aAAc,eAAgB5jL,KAAM,CAACk+F,EAAM+2H,KAChD/4J,GAAK,EAEL,MAEJ,QACIr5C,EAAApmB,QAAGK,IAAI,gBAAiB,uBACPumL,EAAKR,8BAS9B,OALK3mH,GACD78D,QAAQG,KAAK,gBAAiB,2BACT6jL,EAAK8yC,kBAAkBz8M,KAAKC,UAAU0pK,QAE7DxoL,KAAK2tI,IACAtsE,EAMJh5C,kBAAkB1kB,GACrB,IAAIsG,EAAQjK,KAAKsoB,IAAI9K,aAAa7Z,GAC9BmjB,EAAW,GACXy2M,GAAY,EAEhB,MAAQC,EAAavzN,IAEjB,GADAA,EAAQjK,KAAKsoB,IAAI9K,aAAa7Z,GACX,KAAbmjB,EAAgB,CAClBy2M,GAAY,EACZ,MAMR,OAAOtzN,EAGJoe,iBAEH,IAAI1kB,EADa3D,KAAKirL,UAAU0vC,qBACVrwN,YAKtB,OAJA3G,EAASA,EAAOwG,OAAOgc,IAAMA,EAAEpJ,YAC3BoJ,EAAEs3M,QAAQ,CAAC,aAAc,iBAGtBz9N,KAAKsoB,IAAI9K,aAAa7Z,GAG1B0kB,oBACH,MACM1kB,EADW3D,KAAKirL,UAAU0vC,qBACRrwN,YACxB,OAAOtK,KAAKo8N,kBAAkBz4N,GAG3B0kB,gBACH,MACM1kB,EADW3D,KAAKirL,UAAU0vC,qBACRrwN,YACxB,OAAOtK,KAAKo8N,kBAAkBz4N,GAI3B0kB,mBACH,MAAMtQ,EAAQ/X,KAAKirL,UAAU0vC,qBAE7B,OADsB36N,KAAKo8N,kBAAkBrkN,EAAMzN,aAIhD+d,iBAAiB+xM,GACpB,MAAMriN,EAAQ/X,KAAKirL,UAAU0vC,qBAE7B,OADsB36N,KAAKo8N,kBAAkBrkN,EAAMzN,aAIhD+d,IAAIhkB,GACP,GAAIrE,KAAKmE,MAAO,CACZ,MAAMgqI,EAAM,KAAKt+E,OAAO7vD,KAAK2tI,KAC7BxpI,EAAMgqI,EAAM9pI,IAKbgkB,sBACH,MAEMtkB,EAFW/D,KAAKirL,UAAU0vC,qBAER5F,YACxB,GAAIhxN,EAAQ,CACR,MAAMH,EAAQG,EAAO0D,WAAWgT,eAAeC,WAC/C,OAAO1a,KAAKsoB,IAAI9K,aAAa5Z,GAEjC,OAAO,KAGJykB,iBACH,MAAMmiG,EAAWxqH,KAAKirL,UAAU0vC,qBAC1B7zN,EAAO,IAAIo2B,EAAKkI,SAAS42H,EAAA5e,MAAMe,sBAErC,IAAI98E,EAAK+0C,EAAAV,OAAOQ,oBAAoBpvG,EAAM0jH,EAAU9sH,GAAKA,EAAEggO,YAM3D,OALKr8J,IAEDA,EAAK+0C,EAAAV,OAAOQ,oBAAoBpvG,EAAM0jH,EAAU9sH,GAAKA,EAAEkyB,WAGtDyxC,GAELrhE,KAAKs5N,SAAS1zN,KAAK,CAAC4kH,WAAU1jH,OAAM81B,IAAK,mBAClC91B,GAHU,KAMduhB,kBACH,MAAMmiG,EAAWxqH,KAAKirL,UAAU0vC,qBAC1B7zN,EAAO,IAAIo2B,EAAKkI,SAAS,wBAE/B,OAAKgxE,EAAAV,OAAOQ,oBAAoBpvG,EAAM0jH,EAAU9sH,GAAKA,EAAEg4F,eAIvD11F,KAAKs5N,SAAS1zN,KAAK,CAAC4kH,WAAU1jH,OAAM81B,IAAK,oBAClC91B,GAJI,KAORuhB,cAAcg7E,EAAM+2H,GAEvB,MAAO,CACHrxC,aAAc,aAAc5jL,KAAM,CAFrBnF,KAAKirL,UAAU0vC,qBAEiBt3H,EAAM+2H,IAIpD/xM,eAGH,MAAMmiG,EAAWxqH,KAAKirL,UAAU0vC,qBAE1BgD,EADQnzG,EAAS9vG,WACAvQ,OAAOrD,GAAQA,EAAK5H,eAAe,YAC1D,GAAIy+N,EAASp8N,OAAS,EAClB,OAAOvB,KAAKsoB,IAAI9K,aAAamgN,GAGjC,MACMC,EADS5tL,EAAAvS,YAAYmO,YACAF,iBAAiB5kC,GAAQA,EAAKggC,KACzD,OAAKsvE,EAAAV,OAAOQ,oBAAoB0nH,EAAapzG,EAAU9sH,GAAKA,EAAEg4F,eAG1DkoI,GACA59N,KAAKs5N,SAAS1zN,KAAK,CAAC4kH,WAAU1jH,KAAM82N,EAAahhM,IAAK,iBAC/CghM,GAJA,KAURv1M,kBACH,MAEMw1M,EAFW79N,KAAKirL,UAAU0vC,qBACThtM,cACKxjB,OAAOya,GACf,SAAhBA,EAAEpkB,WACc,cAAhBokB,EAAEpkB,WACc,UAAhBokB,EAAEpkB,WAEN,GAAIq9N,EAAct8N,OAAS,EAAG,CAE1B,OADsBvB,KAAKsoB,IAAI9K,aAAaqgN,GAGhD,OAAO,KAIJx1M,oBACH,MAAMmiG,EAAWxqH,KAAKirL,UAAU0vC,qBAE1BmD,EADQtzG,EAAS78F,cACHxjB,OAAO8jB,GAA2B,SAAnBA,EAAKztB,WACxC,GAAIs9N,EAAO,CAEP,OAD4B99N,KAAKsoB,IAAI9K,aAAasgN,GAItD,MAAMn6N,EAAS6mH,EAASlgH,YACxB,OAAI3G,EAAOpC,OAAS,EACTvB,KAAKsoB,IAAI9K,aAAa7Z,GAE1B,KAGJ0kB,oBACH,MACM1kB,EADW3D,KAAKirL,UAAU0vC,qBACRrwN,YACxB,OAAI3G,EAAOpC,OAAS,EACTvB,KAAKsoB,IAAI9K,aAAa7Z,GAE1B,KAGJ0kB,oBACH,MACM1kB,EADW3D,KAAKirL,UAAU0vC,qBACRrwN,YACxB,OAAOtK,KAAKo8N,kBAAkBz4N,GAG3B0kB,oBACH,MAEM4mF,EAFWjvG,KAAKirL,UAAU0vC,qBACThtM,cACHxjB,OAAO8jB,GAA2B,SAAnBA,EAAKztB,WAGxC,IAFAR,KAAKsoB,IAAIoe,QAAQuoE,GAEVA,EAAM1tG,OAAS,GAAG,CACrB,MAAMzB,EAAOmvG,EAAM,GAAGxgF,UACtB,GAAI3uB,EAAKwiG,WAAY,CACjB,MACMy7H,EADQj+N,EAAK4a,WACOvQ,OAAOrD,GAAQA,EAAKoC,IAAI,WAClD,GAAI60N,EAAYx8N,OAAS,EACrB,OAAOw8N,EAAY,GAG3B9uH,EAAM78E,QAEV,OAAO,KAIJ/J,eAAeg7E,EAAgB+2H,GAC9Bp6N,KAAKu5N,MAAMC,gBAEXx5N,KAAKu5N,MAAMC,eAAgB,GAG/B,IAAI7zI,EAAoBy0I,EAAS7vH,WACjC5kB,EAAQA,EAAMx7E,OAAO6zN,GAAuB,eAAjBA,EAAGx9N,WAE9B,IAAIu6N,EAAoB/6N,KAAKsoB,IAAI9K,aAAamoE,GAC9C,GAAIA,EAAMpkF,OAAS,EACf,KAAOw5N,EAAQjkN,UAAYusF,EAAKvsF,SAC5BikN,EAAU/6N,KAAKsoB,IAAI9K,aAAamoE,GAKxC,OADA3lF,KAAK46N,kBAAkB,OAAQG,GACxB/6N,KAAKsoB,IAAI9K,aAAau9M,EAAQh6H,aAGlC14E,sBAAsBg7E,EAAM+2H,GAC/B,MAAMh7D,EAAWg7D,EAAS7vH,SAAS,WAC7B01D,EAAYm6D,EAAS7vH,SAAS,YAC9B0zH,EAAW7+D,EAAS/tJ,OAAO4uJ,GAC3Bi+D,EAAY,IAAI1F,EAAA2F,aAAaF,GACnC,GAAIA,EAAS18N,OAAS,EAAG,CACrB,IAAIw5N,EAAUmD,EAAUpuK,OACpB+gC,EAAW,GACf,KAAOkqI,EAAQjkN,UAAYusF,EAAKvsF,UAC5BikN,EAAUmD,EAAUpuK,OAED,KAAb+gC,KAKV,OADA7wF,KAAK46N,kBAAkB,OAAQG,GACxBA,EAAQh6H,YAAY,GAE/B,OAAO,KAGJ14E,mBACH,MACMuE,EADO5sB,KAAKg8N,kBAAkB,QAChBj7H,YACpB,IAAIkwH,EAAc,KAOlB,OANArkM,EAAOviB,QAAQ0N,IACX,IAAKk5M,EAAa,CACd,MAAM33D,EAAQvhJ,EAAM4V,cACpBsjM,EAAc33D,EAAMpzI,KAAKtB,GAAqB,gBAAhBA,EAAEpkB,cAGjCywN,EAGJ5oM,mBAAmBg7E,GAGtB,IAAK,IAAIhmG,EAAI2C,KAAK44N,UAAUr3N,OAAS,EAAGlE,GAAK,EAAGA,IAAK,CACjD,MAAMi2L,EAAuBtzL,KAAK44N,UAAUv7N,GAC5Ci2L,EAAU8qC,YAEV9qC,EAAU1qK,OAAOve,QAAQzL,IACrB,GAAI+iI,EAAc08F,cAAcn1N,IAAItK,GAAM,CACtC,IAAIwgB,EAAyBk0K,EAAUxjI,KAAKlxD,GAC5C,KAAOwgB,GAAQ,CAGX,GAAI4I,EAAApmB,QAAGue,SAASf,GACZpf,KAAKs+N,iBAAiB1/N,EAAKwgB,QAE1B,GAAKA,EAA6B2pK,aAAc,CACjD,MAAMA,aAACA,EAAY5jL,KAAEA,GAAQia,EACK,mBAAvBpf,KAAK+oL,IACZ/gK,EAAApmB,QAAGK,IAAI,gBAAiB,wBACjB8mL,iCAGX,MAAMvyK,EAAYxW,KAAK+oL,GAAc3pK,KAAWja,GAChDnF,KAAKs+N,iBAAiB1/N,EAAK4X,GAEtB88K,EAAUirC,cAAc3/N,EAAKwgB,EAAQ5I,IACtCwR,EAAApmB,QAAGK,IAAI,gBAAiB,qBACpB,0BAA4B8mL,GAMxC3pK,EAASk0K,EAAUxjI,KAAKlxD,SAI5BopB,EAAApmB,QAAGK,IAAI,gBAAiB,yCACArD,cAKhC,MAAMmZ,EAAe/X,KAAKsoB,IAAI9K,aAAa6lF,EAAKtC,aAC1C+0E,EAAa91K,KAAKo8N,kBAAkBrkN,EAAMzN,aAC1Cy5H,EAAY,IAAI55G,EAAU88D,WAAWqsG,EAAU/uD,YACrDvkI,KAAKw+N,kBAAkBz6F,EAAWuvD,GAElCxd,EAAWx1J,IAAIyjH,GACf/jI,KAAKy+N,cAAc3oD,GAEnB/9J,EAAM7Z,IAAI,QAAQisF,SAAS,SACxB2rF,EAAWp0K,UAAY,iCAG1B,MAAMinF,EAAQmtF,EACd91K,KAAK25N,YAAYhmK,IAAI2/H,EAAW3qG,IAKjCtgE,kBAAkB07G,EAAWuvD,GAChC,MAAMnsG,EAAU48C,EAAUj7C,aAC1B9oF,KAAKs0B,IAAI,6BAA+B6yD,KAEtCnnF,KAAK2tI,IACa2lD,EAAUorC,iBAClBr0N,QAAQ+5H,IAChBpkI,KAAK2+N,qBAAqBv6F,GAC1B,MAAMv7C,EAAau7C,EAAYlmI,IAAI,eACnC,GAAI2qF,EAAY,CACZ,MAAOzpE,EAAQomE,GAAc,CAACqD,EAAWK,YACrCL,EAAW08C,iBACfxB,EAAU3pG,UAAUorD,EAAYpmE,GAChCypE,EAAWs7C,WAAWh9C,OAErB,CACD,MAAMvoE,EAAOC,KAAKC,UAAUslH,GAC5Bp8G,EAAApmB,QAAGK,IAAI,gBAAiB,wDACgB2c,UAG9C5e,KAAK2tI,IAGJtlH,qBAAqBjJ,GACxB,IAAK4I,EAAApmB,QAAGue,SAASf,GAAS,CACtB,MAAM/a,EAAM,qBAAuBwa,KAAKC,UAAUM,GAClD4I,EAAApmB,QAAGK,IAAI,gBAAiB,uBAAwBoC,IAIjDgkB,iBAAiBzpB,EAAawgB,GACjC,IAAKA,EAAQ,CACT,MAAM/a,iCAAqCzF,KAC3CopB,EAAApmB,QAAGK,IAAI,gBAAiB,mBAAoBoC,GAGhD,GAA4B,mBAAjB+a,EAAOtI,MAAsB,CACpC,IAAIzS,gDAAoDzF,KACxDyF,OAAWwa,KAAKC,UAAUM,KAC1B4I,EAAApmB,QAAGK,IAAI,gBAAiB,mBAAoBoC,GAGhD,MAAMyjF,EAAU39D,EAAUxrB,OAAO,eACjCmpF,EAAQO,cAAczpF,GACtBkpF,EAAQtD,UAAUplE,GAClB0oE,EAAQ82I,YAAYx/M,EAAOtI,SAC3BsI,EAAOkB,IAAIwnE,IACP9/D,EAAApmB,QAAGoe,QAAQZ,IAAW4I,EAAApmB,QAAG+U,OAAOyI,KAChCpf,KAAKy+N,cAAcr/M,GAGnBpf,KAAK+4N,oBAAoBn6N,IACzBoB,KAAK+4N,oBAAoBn6N,GAAKwgB,GAO/BiJ,aAAajJ,GAChB,MAAMy/M,EAAiB7+N,KAAK8+N,iBAAiB1/M,GAC7C,GAAIy/M,EAAgB,CAChB,MAAMj5B,EAAUz7K,EAAUxrB,OAAO,qBACjCinM,EAAQn9G,YAAYo2I,GACpBz/M,EAAOkB,IAAIslL,QAGX5lM,KAAK++N,iBAAiB,gBACtB/+N,KAAKg/N,iBAAiB5/M,EAAQ,gBAK/BiJ,aAAajJ,GAChBA,EAAOkB,IAAI6J,EAAUxrB,OAAO,WAIzB0pB,aAAajJ,GAChB,MAAMsnH,EAAYv8G,EAAUxrB,OAAO,aACnC+nI,EAAUu4F,YAAY,wCACtBv4F,EAAUw4F,QAAQ,gCAElBx4F,EAAUy4F,WAAW//M,EAAOtI,SAC5BsI,EAAOkB,IAAIomH,GAGRr+G,aAAajJ,GAChB,MAAMggN,EAAcj1M,EAAUxrB,OAAO,eAC/Bw+N,EAAen9N,KAAK8+N,iBAAiB1/M,GACvC+9M,GACAiC,EAAYC,kBAAkBlC,EAAarmN,SAE/CsI,EAAOkB,IAAI8+M,GAGR/2M,eAAejJ,GAClB,MAAM0oE,EAAU1oE,EAAOlhB,IAAI,eACrB6lI,EAAY3kH,EAAOlhB,IAAI,cAC7B,GAAI4pF,GAAWi8C,EACXj8C,EAAQw3I,cAAcv7F,EAAUj7C,kBAE/B,CACD,MAAMlqE,EAAOC,KAAKC,UAAUM,GAC5B4I,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,+CAAiD2c,IAKtDyJ,cAAcjJ,GACjB,IAAKA,EAAOlW,IAAI,SAAU,CACtB,MAAMq2N,EAAYp1M,EAAUxrB,OAAO,SAC/BygB,EAAO1d,SACP69N,EAAUziI,QAAQ19E,EAAO1d,WAE7B0d,EAAOkB,IAAIi/M,GAEf,MAAMv3G,EAAQ5oG,EAAOlhB,IAAI,SACzB,GAAI8pB,EAAApmB,QAAGoe,QAAQZ,GACX4oG,EAAMw3G,cAAcxjE,EAAA5e,MAAMuB,qBAEzB,GAAI32H,EAAApmB,QAAG+U,OAAOyI,GAAS,CAExB,MAAM0Q,EAAW,cAAgB9vB,KAAKsoB,IAAIS,cAAc,EAAG,KAC3DvkB,QAAQU,IAAI,gCAAkC4qB,GAC9Ck4F,EAAMw3G,cAAc1vM,IAIrBzH,aAAajJ,EAAQikF,EAAM+2H,GAC9B,MAAMqF,EAA0BrF,EAAS7vH,SAAS,cAClD,GAAIk1H,EAAYl+N,OAAS,EAAG,CAIxB,OAHmBvB,KAAKsoB,IAAI9K,aAAaiiN,GAEhB1+H,YAAY,GAGpC,CACD,MAAM2+H,EAAiB,CACnBtF,WAAU/2H,QAGd,GADArjG,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAGoK,kBAAmB0zN,GACtCA,EAAUC,SAAU,CACpBn7N,QAAQU,IAAI,gDACZ,MAAMq9H,OAACA,GAAUm9F,EAAUC,SAC3B,GAAIp9F,EACA,OAAOA,EAAO74H,gBAIlBse,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,kDAGZ,OAAO,KAGJomB,WAAWjJ,EAAwBrH,GACtC,MAAM0oF,EAAO,IAAIvjE,EAAKsH,KAAKw3H,EAAA5e,MAAMyB,eAC3Br0B,EAAWxqH,KAAK8+N,iBAAiB1/M,GACvC,GAAIorG,EAAU,CACVzyG,EAAMiW,QAAQyyE,GAEd,MAAMklC,EAAY39G,EAAApmB,QAAGyjB,mBAAmBmlG,GAClCo1G,EAAW,CAAC,2BAIlB,OAHAA,EAASh6N,KAAK,iCAAmC+/H,GACjDllC,EAAKE,QAAQi/H,GACbn/H,EAAKo/H,YAAY,QAAS,CAAC19I,QAASqoC,EAAS1zG,QAASlZ,KAAM+nI,IACrDllC,EAEN,CACD,MAAMq/H,EAAYjhN,KAAKC,UAAU9e,KAAK05N,iBACtC1xM,EAAApmB,QAAGK,IAAI,gBAAiB,kDACiB69N,KAE7C,OAAO,KAGJz3M,qBAAqBjJ,GACxB,MAAMqtK,SAACA,GAAYrtK,EAEnB,OADcpf,KAAK25N,YAAYz7N,IAAIuuL,GAO7BpkK,mBACN,IAAI03M,GAAc,EAOlB,OANAhiO,OAAO6qB,KAAK5oB,KAAKu5N,OAAOlvN,QAAQ21N,KACC,IAAzBhgO,KAAKu5N,MAAMyG,KACXD,GAAc,EACdv7N,QAAQU,IAAI,QAAS86N,EAAU,kBAGhCD,EAKD13M,qBACN,IAAI43M,EAAa,EACjBjgO,KAAKs5N,SAASjvN,QAAS61N,IACnB,MAAM11G,SAACA,GAAY01G,EACnB,IAAI7+J,GAAK,EACL8+J,EAAW,KACf,GAAID,EAAWp5N,KAAM,CACjB,MAAOmP,EAAGC,GAAKgqN,EAAWp5N,KAAK8U,QAC/BukN,EAAWD,EAAWp5N,KACtB,IACIu6D,EAAKmpD,EAAS1vG,WAAWolN,EAAWp5N,KAAMmP,EAAGC,GAEjD,MAAO0O,GACH,MAAMgY,IAACA,GAAOsjM,EACRtiO,EAAOsiO,EAAWp5N,KAAKpF,UACvB0+N,EAAW51G,EAAS9vG,WAAWrF,IAAIhY,GAAKA,EAAEsL,YAChD,IAAItE,4BAAgCzG,OAAUqY,KAAKC,IAC/C0mB,IAAMv4B,GAAO,qBAAuBu4B,EAAM,KAC9Cv4B,GAAO,KAAOugB,EAAEmhB,QAChB1hC,GAAO,mBAAqB+7N,EAC5Bp4M,EAAApmB,QAAGK,IAAI,gBAAiB,qBAAsBoC,SAGjD,GAAI67N,EAAWj2N,MAAO,CACvB,MAAOgM,EAAGC,GAAKgqN,EAAWj2N,MAAM2R,QAChCylD,EAAKmpD,EAAS18F,YAAYoyM,EAAWj2N,OACrCk2N,EAAWD,EAAWj2N,WAErB,GAAIi2N,EAAW76I,QAAS,CACzB,MAAOpvE,EAAGC,GAAKgqN,EAAW76I,QAAQzpE,QAClCylD,EAAKmpD,EAASt8F,cAAcgyM,EAAW76I,QAASpvE,EAAGC,GACnDiqN,EAAWD,EAAW76I,QAEtBhkB,KACE4+J,IAGNA,IAAejgO,KAAKs5N,SAAS/3N,QAC7BymB,EAAApmB,QAAG+C,KAAK,gBAAiB,qBACrB,mDAGR3E,KAAKs5N,SAAW,GAGVjxM,iBAAiBjJ,EAAQkhB,GAC/B,IAAIj8B,EAAM,sCACVA,GAAQ,eAAiB+a,EAAO1d,UAChC2C,GAAQ,kBAAoBwa,KAAKC,UAAU/gB,OAAOutC,OAC9CtrC,KAAK05N,gBAAgBnxL,YACzBvgB,EAAApmB,QAAGK,IAAI,gBAAiBq+B,EAAUj8B,GAI5BgkB,iBAAiBuU,GACD,oBAAX9W,SACNA,OAAeu6M,UAAYrgO,OA7qCxC7C,EAAAwkI,gBAkrCA,MAAM45F,EAAmB,IAAIphI,IAAI,CAC7B,SACA,SACA,cAAe,OACf,aACA,sBAAuB,gBAAiB,aACxC,yBAA0B,cAC1B,SAAU,iBAAkB,SAC5B,iBAAkB,cAAe,OACjC,iBACA,eAAgB,cAIpB,SAASqjI,EAAavzN,GAClB,OAAOA,EAAMf,IAAI,cACZ8e,EAAApmB,QAAGwP,UAAU2O,QAAQ9V,EAAMzJ,YAAc,KAE1CyJ,EAAM8S,YAAc9S,EAAMf,IAAI,gBAC3Be,EAAMf,IAAI,eASrBy4H,EAAc08F,cAAgB,IAAIlkI,IAAI,CAClC,SAAU,UAAW,UACrB,OAAQ,WAAY,SAAU,OAAQ,SAAU,eAChD,MAAO,QAAS,MAChB,SAAU,SAAU,YAAa,eAAgB,SAAU,MAC3D,WAAY,OAAQ,aAAc,gLCzxCtC,MAAAnyE,EAAAC,EAAAhrB,EAAA,IAGMwrB,EAFNxrB,EAAA,GAEYqgB,OAAOC,SAMnBpgB,EAAAghO,aAAA,MAQI91M,YAAY9R,GACHA,GAAsB,IAAfA,EAAIhV,QACZymB,EAAApmB,QAAGK,IAAI,eAAgB,MACnB,uCAERjC,KAAKuW,IAAMA,EACXvW,KAAKsxE,QACLtxE,KAAKuB,OAASgV,EAAIhV,OAGtB8mB,QACIroB,KAAKsgO,YAAc,GACnBtgO,KAAKuW,IAAIlM,QAAQ,CAACvD,EAAMoY,KACpBlf,KAAKsgO,YAAY16N,KAAKsZ,KAE1Blf,KAAKugO,WAAa,KAClBvgO,KAAKwgO,WAAa,KAGtBn4M,OACI,OAAOroB,KAAKugO,WAGhBl4M,OACoC,IAA5BroB,KAAKsgO,YAAY/+N,QACjBvB,KAAKsxE,QAET,MAAMpyD,EAAQuJ,EAAIjL,aAAaxd,KAAKsgO,aAMpC,OAJAtgO,KAAKsgO,YAActgO,KAAKsgO,YAAYn2N,OAAOrE,GAAOA,IAAQoZ,GAE1Dlf,KAAKugO,WAAavgO,KAAKwgO,WACvBxgO,KAAKwgO,WAAaxgO,KAAKuW,IAAI2I,GACpBlf,KAAKwgO,gLClDpB,MAAAC,EAAAxjO,EAAA,KACAyjO,EAAAzjO,EAAA,KACA0jO,EAAA1jO,EAAA,KACA2jO,EAAA3jO,EAAA,KAGA+qB,EAAAC,EAAAhrB,EAAA,IAUA,MAAashI,EAOTl2G,YAAY2yG,GACRh7H,KAAKg7H,KAAOA,EACZh7H,KAAKy6E,WAAa,GAGfpyD,YAAYzqB,EAAc68E,GAC7Bz6E,KAAKy6E,WAAW78E,GAAQ68E,EAGrBpyD,OAAOzqB,EAAMuH,GAEhB,OAAIo5H,EAAa3xG,OAAO1tB,eAAetB,GAC5B2gI,EAAa3xG,OAAOhvB,MAASuH,GAE/BnF,KAAKy6E,WAAWv7E,eAAetB,GAC7BoC,KAAKy6E,WAAW78E,MAASuH,GAE3BnF,KAAKg7H,KACHh7H,KAAKg7H,KAAKziC,YAAY36F,KAASuH,IAGtC6iB,EAAApmB,QAAGK,IAAI,eAAgB,SACnB,4CAA8CrE,GAE/C,OA/BfT,EAAAohI,eAoCAA,EAAa3xG,OAAS,CAClBi0M,QAAS,IAAI17N,IAAS,IAAIw7N,EAAAE,WAAW17N,GAAmBuE,WACxDo3N,YAAa,IAAI37N,IAAS,IAAIy7N,EAAAE,eAAe37N,GAAmBuE,WAChEq3N,cAAe,IAAI57N,IAAS,IAAIs7N,EAAAM,iBAAiB57N,GAAmBuE,WACpEs3N,WAAY,IAAI77N,IAAS,IAAIu7N,EAAAM,cAAc77N,GAAmB47F,yQCtDlE,MAAA41B,EAAA15H,EAAA,IACAmiH,EAAAniH,EAAA,IACA2lG,EAAA3lG,EAAA,IACA+yC,EAAA/yC,EAAA,GACAotF,EAAAptF,EAAA,IACAstF,EAAAttF,EAAA,IAEAw5B,EAAArC,EAAAn3B,EAAA,IACAytF,EAAAztF,EAAA,IACAi7F,EAAAj7F,EAAA,IACAm3E,EAAAn3E,EAAA,GAEMgkO,EAAY,EAEL9jO,EAAA+jO,kBAAoB,CAC7BC,eAAgB,GAChBC,eAAgB,GAChBC,iBAAkB,GAClBC,kBAAmB,GACnBC,gBAAiB,GACjBC,gBAAiB,IAGrBrkO,EAAA4jO,cAAA,MAIE14M,YAAYpR,EAAMC,EAAM2V,GACjBA,IACDA,EAAO1vB,EAAA+jO,mBAEX,MAAMC,EAAiBt0M,EAAKs0M,gBAAkB,GACxCC,EAAiBv0M,EAAKu0M,gBAAkB,GACxCC,EAAmBx0M,EAAKw0M,kBAAoB,GAC5CC,EAAoBz0M,EAAKy0M,mBAAqB,GAE9CG,EAAe,CACnBlS,OAAQroN,KAAK4C,MAAMw3N,EAAoBrqN,GACvCw4M,OAAQ,GACRziD,QAAS,EACThqE,OAAO,EAAMC,OAAO,EAAMF,MAAM,EAAOG,MAAM,EAC7CosH,gBAAiB,SAMboS,EAAY1hO,KAAKu4F,YAAY,WAAYthF,EAAMC,EAHnC,CACdy4E,WAAY,EAAGF,UAAW,KAGxBkyI,EAAUD,EAAUl+M,SAEpBwtE,EAAS,IAAIkH,EAAA/M,aACby2I,EAAgB,CAClBlvI,cAAehI,EAAAuH,OAAOiqD,mBAEpB2lF,EAAY36N,KAAK4B,MAAMq4N,EAAiBlqN,GACxC6qN,EAAY56N,KAAK4B,MAAMs4N,EAAiBlqN,GACxC67E,EAAY/B,EAAOuC,iBAAiBsuI,EAAWC,EACjDF,GAEEG,EAAS76N,KAAK4B,MAAMu4N,EAAmBpqN,GACvC+qN,EAAS96N,KAAK4B,MAAMoO,EAAO,EAAI67E,EAAU19E,IAAI6B,KAAO,GAC1Dk9D,EAAA7pD,SAAS6D,kBAAkBuzM,EAAS5uI,EAAU19E,IAAK0sN,EAAQC,GAE3D,MAAMC,EAAW/6N,KAAK4C,MAAMmN,EAAO,GAC7BirN,EAAYliO,KAAKu4F,YAAY,OAAQ0pI,EAAU/qN,EACnDuqN,GACIU,EAAQlrN,EAAOirN,EAAU1+M,SAASvM,KAExCihF,EAAA/M,aAAa4I,cAAcmuI,EAAU1+M,SAAU,IAC/C4wD,EAAA7pD,SAAS0C,YAAYy0M,EAAWQ,EAAWC,EAF7B,GAId,MAAMC,EAASpiO,KAAKqiO,eAAenrN,EAAMD,EAAM4V,GACzCy1M,EAAUrrN,EAAOmrN,EAAO5+M,SAASvM,KACjCsrN,EAAUr7N,KAAK4B,OAAOoO,EAAOkrN,EAAO5+M,SAAStM,MAAQ,GAC3Dk9D,EAAA7pD,SAAS0C,YAAYy0M,EAAWU,EAAQE,EAASC,GAGjD,MAAMn1M,EAAOlmB,KAAK4C,MAAMoN,EAAO,GACzBsrN,EAAa,IAAI/rM,EAAQwB,cAAc,WAAYypM,GACzDA,EAAUzrL,UAAUusL,EAAY,EAAGp1M,GAGnC,MAAMq1M,EAAaL,EAAO5+M,SAAStM,KAC7BwrN,EAAaN,EAAO5+M,SAASvM,KAEnC,IAAIwT,EAAK83M,EACL12M,EAAK02M,GAAWE,EAAa,GAEjCh4M,GAAMw2M,EACNp1M,GAAMo1M,EAEN,MAAM0B,EAAWhB,EAAQiB,sBAAsBn4M,EAAIoB,IAC5Cs4E,EAAIC,GAAM,CAACu+H,EAAShnN,OAAQgnN,EAAS3mN,QACtCguF,EAAa,IAAIvzE,EAAQwB,cAAc,aAAcypM,GAC3DA,EAAUzrL,UAAU+zD,EAAY7F,EAAIC,GAEpC,MAAMy+H,EAAa,CAACt5M,IAAK+4M,EAAS94M,IAAK+4M,EACnC94M,IAAK64M,EAAUI,EAAa,EAAGh5M,IAAK64M,EAAUE,EAAa,GAGzDxzM,EAAS+gB,EAAAvS,YAAYmO,YACrBk3L,EAAW,IAAI1jH,EAAAlI,YAGf6rH,EAAkBpB,EAAQ1rH,cAAc4sH,GAM9CC,EAAS7qH,gBAAgBypH,EAAWzyM,EAAQ8zM,EAL3B,CACbvrH,cAAe,GAAIt+F,OAAQ,EAC3ByF,KAAM7X,GAAQA,EAAKxI,OAAS,KAAOwI,EAAKxI,OAAS,IACjDoa,SAAU,MAId,MAAMsqN,EAAa,CAACC,gBAAgB,EAAMC,gBAAgB,EACtDxuE,YAAY,EAAMyuE,aAAa,EAAMC,YAAY,EACjDC,gBAAgB,GACdnjH,EAAY,CACd2V,eAAgB,IAChBl3G,KAAM1U,GAAS+4N,EAAW9jO,eAAe+K,EAAMrM,MAC/C4a,UAAW,KAGF,IAAIm+G,EAAAtB,aACZO,eAAe8rG,EAAWzyM,EAAQixF,GAEvClgH,KAAKsjO,iBAAiB5B,EAAWY,GAEjCtiO,KAAK+X,MAAQ2pN,EAGfr5M,eAAenR,EAAMD,EAAM4V,GACzB,MAAM00M,EAAkB10M,EAAK00M,iBAAmB,GAC1CC,EAAkB30M,EAAK20M,iBAAmB,GAC1CiB,EAAav7N,KAAK4C,MAAMy3N,EAAkBrqN,GAC1CwrN,EAAax7N,KAAK4C,MAAM03N,EAAkBvqN,GAC1CssN,EAAa,CACjBtyI,OAAQ/pF,KAAK4B,MAAM45N,EAAa,GAChCxxI,OAAQhqF,KAAK4B,MAAM25N,EAAa,GAChCnxI,UAAW,IACXoB,cAAehI,EAAAuH,OAAOiqD,mBAKxB,OAFel8I,KAAKu4F,YAAY,SAAUmqI,EACxCD,EAAYc,GAKhBl7M,YAAYzqB,EAAcqZ,EAAMC,EAAM2V,GAClC,OAAO,IAAI+1E,EAAAtK,cAAeC,YAAY36F,EAAMqZ,EAAMC,EAAM2V,GAI5DxE,iBAAiBtQ,EAAOuqN,GACtB,MAAMjtN,EAAM0C,EAAMyL,SAEZoI,EAAK02M,EAAU,EACf73M,EAAKvjB,KAAK4C,MAAMuL,EAAI6B,KAAO,GAC3B2U,EAAK3kB,KAAK4C,MAAMuL,EAAI6B,KAAO,GACjClX,KAAKwjO,iBAAiBnuN,EAAK,CAACmV,GAJjB,EAIqBoB,KAAInB,KAAIoB,OAG1CxD,iBAAiBhT,EAAKouN,GAClB,MAAMj5M,GAACA,EAAEC,GAAEA,EAAEmB,GAAEA,EAAEC,GAAEA,GAAM43M,EAEzB,IAAIr4M,EAAQ,GACZ,IAAK,IAAInV,EAAIuU,EAAIvU,EAAI2V,EAAI3V,GAFd,GAEuB,CAChC,IAAI0wJ,EAAO1wJ,EAHF,GAIL0wJ,EAAO/6I,IAAK+6I,EAAO/6I,GACvB,MAAM83M,EAAWr5I,EAAAzX,KAAKujB,iBAAiB9gF,EAAKY,EAAGwU,EAAIk8I,EAAM96I,GACzDT,EAAQA,EAAM/Z,OAAOqyN,GAEvBn5I,EAAA+F,QAAQC,aAAal7E,EAAK+V,GAG9B/C,WACE,OAAOroB,KAAK+X,2KC/KhB,MAAAiQ,EAAAC,EAAAhrB,EAAA,IACAq+I,EAAAr+I,EAAA,IACA85H,EAAA95H,EAAA,IACA25H,EAAA35H,EAAA,IACAm3E,EAAAn3E,EAAA,GACA2lG,EAAA3lG,EAAA,IAEM0mO,EAAW,EAEjBxmO,EAAA6jO,WAAA,MASI34M,YAAYpR,EAAMC,EAAM2V,EAAY,IAChC7sB,KAAK2jG,QAAU92E,EAAK82E,SAAW,EAC/B3jG,KAAKiX,KAAOA,GAAQ,IACpBjX,KAAKkX,KAAOA,GAAQ,GACpBlX,KAAKixF,OAAS/pF,KAAK4B,MAAM9I,KAAKiX,KAAO0sN,GACrC3jO,KAAKkxF,OAAShqF,KAAK4B,MAAM9I,KAAKkX,KAAOysN,GAGrC3jO,KAAK6sB,KAAOA,EAGhBxE,YACI,MAAM2lK,EAAY,IAAIj3D,EAAA4F,gBAChBinG,EAAkB,CACpB93I,SAAU,UAEVuF,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBkB,OAAQ,EACRjB,WAAY,EACZL,OAAQjxF,KAAKixF,OACbC,OAAQlxF,KAAKkxF,QAEXtkE,EAAS,CACXohK,EAAUz1F,YAAYv4F,KAAKiX,KAAMjX,KAAKkX,KAAM0sN,WAEzCA,EAAWrxI,OAElB,IAAK,IAAIl1F,EAAI,EAAGA,EAAI2C,KAAK2jG,QAAU,EAAGtmG,IAClCuvB,EAAOhnB,KACHooL,EAAUz1F,YAAYv4F,KAAKiX,KAAMjX,KAAKkX,KAAM0sN,IAKpD,MAAOC,EAAUC,GAAY,CACzB58N,KAAK4B,MAAM9I,KAAKixF,OAAS,GACzB/pF,KAAK4B,MAAM9I,KAAKkxF,OAAS,IAE7B0yI,EAAW/wI,UAAY,GAMvB+wI,EAAW/wI,UAAUquF,UALDnpK,KAChBujI,EAAA0B,MAAM7qD,UAAUkiC,IAAIhqH,QAAQ4oH,IAAUl7G,EAAMgsN,YAAY9wG,KACxDqoB,EAAA0B,MAAMr+H,KAAKgoK,gBAAgBk9C,EAAW,EAAGC,EAAW,EAAG/rN,EACnD,gBAAiB,gBAGzB,MAAMg8M,EAAY/lC,EAAUz1F,YAAYv4F,KAAKiX,KAAMjX,KAAKkX,KACpD0sN,GAoBJ,OAnBAh3M,EAAOhnB,KAAKmuN,GAEZ/zN,KAAKgkO,aAAap3M,GAClB5sB,KAAKikO,SAASr3M,GAEdA,EAAOviB,QAAQ,CAAC0N,EAAO1a,KACnB2wL,EAAU3zB,cAActiJ,EAAO,CAC3Bg9G,kBAAkB,EAClBH,qBAAqB,IAGzB,MACMsvG,EAAY,CACd1rN,UAFcxY,KAAK6kI,UAAUxnI,GAAK,EAGlCkjH,UAAWt2G,GAAwB,oBAAfA,EAAM2/B,MAE9BokJ,EAAUm2C,mBAAmBpsN,EAAOmsN,KAGjCt3M,EAAOvX,IAAI,CAAC0C,EAAO1a,KAAM,CAAE6b,OAAQ7b,EAAG0a,WAGjDsQ,UAAUnP,GACN,OAAO,EAAI,EAAIA,EAInBmP,SAASuE,GACL,MAAMkrG,EAAW,IAAIlB,EAAAmB,YACrBnrG,EAAOviB,QAAQ,CAAC0N,EAAO1a,KACnB,MAAMmb,EAAYxY,KAAK6kI,UAAUxnI,GAC3BwvB,EAAO,CACT3T,OAAQ7b,EACR4vL,SAAU,GAAK,GAAK5vL,EACpBqb,SAAU,GAAK,IAAMrb,EAAI,GACzB47H,WAAY,IACZJ,YAAa,GAAK,EAAIx7H,EACtBmb,YACAvO,MAAOA,GAAwB,oBAAfA,EAAM2/B,MAE1BkuF,EAAS0E,kBAAkBzkH,EAAO8U,GAGnB9U,EAAMzN,YACdD,QAAQJ,IACX,MAAMoxB,EAAMpxB,EAAM/L,IAAI,cACtB,GAAIm9B,EAAK,CACL,MAAMwD,EAASxD,EAAIwpG,YACbu/F,EAAW5rN,EAAYqmB,EACvBxiB,EAAYgf,EAAI/e,cAChBjB,EAAWgB,EAAY+nN,EACzB/oN,EAAWgB,GACX2L,EAAApmB,QAAGwa,aAAanS,EAAOoR,QAQ3CgN,aAAauE,GACT,MAAMy3M,EAASz3M,EAAO,IAGf3V,EAAMC,GAAQmtN,EAAOC,cACtBC,EAAWr9N,KAAK4B,MAHJ,IAGUoO,GACtBstN,EAAWt9N,KAAK4B,MAJJ,IAIUmO,GAEtBwtN,GADY,IAAI7hI,EAAAtK,cACMC,YAAY,SAAUisI,EAAUD,GAEtDj3M,EAASpmB,KAAK4B,OAAO07N,EAAWvtN,GAAQ,GACxCsW,EAASrmB,KAAK4B,OAAOy7N,EAAWrtN,GAAQ,GAC9Ck9D,EAAA7pD,SAAS0C,YAAYw3M,EAAWJ,EAAQ/2M,EAAQC,GAChDk3M,EAAUxgI,YAAYk9B,cAAe,EAErCv0G,EAAO,GAAK63M,uKC5IpB,MAAAz8M,EAAAC,EAAAhrB,EAAA,IACAm3E,EAAAn3E,EAAA,GACAogB,EAAApgB,EAAA,GACAk7F,EAAAl7F,EAAA,IACAi7F,EAAAj7F,EAAA,IACAq3C,EAAAr3C,EAAA,GAEMwrB,EAAMpL,EAAAC,OAAOC,SAEnBpgB,EAAA2+J,kBAAA,MAOIzzI,SAAStQ,EAAO8U,GACZ,GAAIA,EAAK63F,YACL,OAAO1kH,KAAK0kO,wBAAwB3sN,EAAO8U,GAE/C,MAAMjO,EAAOC,KAAKC,UAAU+N,GAG5B,OAFA7E,EAAApmB,QAAGK,IAAI,oBAAqB,+CACY2c,KACjC,KAGXyJ,wBAAwBtQ,EAAO8U,GAC3B,MAAM83M,EAAQ,EAAI93M,EAAKotI,WAAa,GAC9B2qE,EAAQ,EAAI/3M,EAAKqtI,WAAa,IAE9BjjJ,KAACA,EAAIC,KAAEA,GAAQa,EAAMyL,SACrBqhN,EAAW5tN,EAAO0tN,EAClBG,EAAW5tN,EAAO0tN,GAClBlgH,YAACA,GAAe73F,EAEhBk4M,EAAgB,GACA,cAAlBrgH,EAAYhzG,EACZqzN,EAAS1V,cAAgB,MAEF,cAAlB3qG,EAAY/yG,IACjBozN,EAAS1V,cAAgB,UAGP,cAAlB3qG,EAAY9yG,GACZmzN,EAASzV,gBAAkB,OAC3ByV,EAAS/hI,OAAQ,EACjB+hI,EAAS9hI,OAAQ,GAEM,cAAlByhB,EAAY7yG,IACjBkzN,EAASzV,gBAAkB,QAC3ByV,EAAS/hI,OAAQ,EACjB+hI,EAAS9hI,OAAQ,GAErB8hI,EAASxV,OAAS9mM,EAAIM,cAAc,EAAG47M,GACvCI,EAASvV,OAAS/mM,EAAIM,cAAc,EAAG67M,GACvCG,EAASz4I,SAAWh4C,EAAArE,KAAKkC,WAEzB,MAAMumD,EAAS,IAAIR,EAAA/M,aAEbwG,EAAS+G,EAAOa,WAAWsrI,EAAUC,EAAUC,GAC/CC,EAAa,IAAI7sI,EAAAzjD,MAevB,OAdAswL,EAAWpsI,OAAOjH,EAAOt8E,KAEzBtX,OAAO6qB,KAAK87F,GAAar6G,QAAQiJ,IAC7B,GAAyB,UAArBoxG,EAAYpxG,GAAkB,CAC9B,MAAMs3J,EAAW,CACbtzJ,MAAO,GAAK63E,UAAW,CAAC1rF,WAAW,GACnC+T,WAAY,IAAKD,SAAU,IAEzB+R,EAAO8qD,EAAA7pD,SAAS06M,UAAUJ,EAAUC,EAAUxxN,GACpDolF,EAAOiyE,SAASq6D,EAAWxhN,SAAUonJ,EAAUthJ,MAIvD8qD,EAAA7pD,SAAS0C,YAAY+3M,EAAYjtN,EAAO4sN,EAAQ,EAAGC,EAAQ,GACpDI,mFCvEf,MAAA9sI,EAAAj7F,EAAA,IACAk7F,EAAAl7F,EAAA,IACAm3E,EAAAn3E,EAAA,GACAotF,EAAAptF,EAAA,IACAo7F,EAAAp7F,EAAA,IACAogB,EAAApgB,EAAA,GACAq3C,EAAAr3C,EAAA,GAEMwrB,EAAMpL,EAAAC,OAAOC,SAYnB,MAAa6vK,EAIT/kK,0BACI,OAAO+kK,EAAkB/mI,QAAQ2mD,OAGrC3kF,wBACI,MAAM68M,EAAUhtI,EAAA/M,aAAa/iC,WAAW,YAClCq3H,EAAO1hL,OAAO4kF,OAAO,GAAIuiJ,EAAS93C,EAAkB/mI,QAAQ6mD,MAIlE,OAFAuyE,EAAKjnK,UAAY,EACjBinK,EAAK/mK,SAAW,IACT+mK,EAGXp3J,WAAWpR,EAAMC,EAAM2V,GACnB,MAAM6rE,EAAS,IAAIR,EAAA/M,aACbpzE,EAAQ,IAAIogF,EAAAzjD,MAClBgkD,EAAO7J,OAAO,WAAY53E,EAAMC,GAChC2V,EAAK8iE,WAAa,EAClB,MAAMgC,EAAS+G,EAAOQ,eAAejiF,EAAMC,EAAM2V,GAOjD,OALA9U,EAAM6gF,OAAOjH,EAAOt8E,KAEpBrV,KAAKmlO,WAAWptN,EAAO8U,GAGhB9U,EAGXsQ,aAAapR,EAAMC,EAAM2V,GACrB,MAAM6rE,EAAS,IAAIR,EAAA/M,aACbpzE,EAAQ,IAAIogF,EAAAzjD,MAClBgkD,EAAO7J,OAAO,WAAY53E,EAAMC,GAChC,MAAMy6E,EAAS+G,EAAOS,aAAaliF,EAAMC,EAAM2V,GAG/C,OAFA9U,EAAM6gF,OAAOjH,EAAOt8E,KACpB0C,EAAM4hF,UAAU,IACT5hF,EAIXsQ,WAAWtQ,EAAO8U,GACd,MAAMxX,EAAM0C,EAAMyL,SACZvM,EAAO5B,EAAI4B,KACXmuN,EAAWl+N,KAAK4B,MAAMuM,EAAI6B,KAAO,GACjC6tN,EAAW,CACbz4I,SAAUh4C,EAAArE,KAAKO,UACfg/K,OAAQtoN,KAAK4B,MAAMs8N,EAAW,MAG5B1sI,EAAS,IAAIR,EAAA/M,aACnBuN,EAAO7J,OAAO,OAAQ53E,EAAMmuN,GAC5B,MAEMC,EAFa3sI,EAAOa,WAAWtiF,EAAMmuN,EAAUL,GAE1B1vN,IAGrBiwN,EAAO78M,EAAIM,cAAc,EAAG9R,EAAO,GACnCsuN,EAAU98M,EAAIM,cAAc,EAAG9R,EAAO,GACtCuuN,EAAWxlO,KAAKylO,UAAUJ,EAASC,EAAM,EAAGC,EAASH,EAAW,GAEhEM,EAAax+N,KAAK4B,MAAMuM,EAAI6B,KAAO,GAMzCk9D,EAAA7pD,SAASo7M,UAAUtwN,EAAKgwN,EAAS,EAAGK,EALpB,CAAC/5M,EAAIkD,KAEjB,MAAM+2M,EAAY/2M,EAAGtuB,cACrB,OAAQ,UAAYs2B,KAAK+uM,EAAUplO,aAQvC,MAAMqlO,EAAW,CAEbv4M,OAAQ,EACRC,OAAQ,EAAG3C,KAAM86M,EACjB51I,SAAU5oF,KAAK4B,MAAM48N,EAAa,GAClCn3M,KAAM+2M,GAEV,IAAI51I,EAAQgJ,EAAO9I,mBAAmBv6E,EAAKwwN,GAE3CA,EAASt4M,OAASm4M,EAAaN,EAC/BS,EAASj7M,KAAOvV,EAAI6B,KAAO,EAC3B2uN,EAASv4M,OAASi4M,EAClBM,EAAS/1I,SAAW,EACpBJ,EAAQA,EAAMr+E,OAAOqnF,EAAO9I,mBAAmBv6E,EAAKwwN,IAEpD9tN,EAAMgiF,UAAU,QAASrK,GAEzB81I,EAASn7N,QAAQy7N,IACbA,EAAQ,IAAMJ,IAGlB,MACM7rI,EAAY,IAAIxB,EAAAyB,gBAAgBjtE,GACtC,IAAK,IAAIxvB,EAAI,EAAGA,EAFG,EAEaA,IAAK,CACjC,MAAM0oO,EAAat9M,EAAIjL,aAAagoN,GACpC3rI,EAAUymB,iBAAiBvoG,EAAOguN,EAAYl5M,EAAKrU,YAe3D6P,UAAUhT,EAAKmV,EAAIC,EAAImB,EAAIC,GACvB,MAAMpjB,EAAS,GAYf,OAXa4hF,EAAAzX,KAAK2iB,gBAAgB/qE,EAAIC,EAAImB,EAAIC,GACzCxhB,QAAQihB,IACK8oD,EAAA7pD,SAASukM,eAAexjM,EAAGrV,EAAGqV,EAAGpV,EAAG,GAAG,GAC/C7L,QAAQihB,IACV,MAAOrV,EAAGC,GAAKoV,EACXjW,EAAIwY,MAAM5X,EAAGC,KACbzN,EAAO7C,KAAK0lB,GACZjW,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKkB,YAIlC1oC,GAhIftL,EAAAiwL,oBAoIAA,EAAkB/mI,QAAU,GAE5B+mI,EAAkB/mI,QAAQ6mD,KAAO,GAIjCkgF,EAAkB/mI,QAAQ2mD,OAAS,CAC/B11F,MAAO,gVCpKX,MAAA0Q,EAAAC,EAAAhrB,EAAA,IACAm5G,EAAAn5G,EAAA,IACAotF,EAAAptF,EAAA,IACAstF,EAAAttF,EAAA,IAEA+yC,EAAA/yC,EAAA,GACAw5B,EAAArC,EAAAn3B,EAAA,IAEA2lG,EAAA3lG,EAAA,IACAm3E,EAAAn3E,EAAA,GACA4vL,EAAA5vL,EAAA,IAMAE,EAAA0jO,QAAA,MAIIx4M,YAAYpR,EAAcC,EAAc2V,EAAY,IAC5C7E,EAAApmB,QAAG6D,cAAc,CAACwR,EAAMC,KACxB8Q,EAAApmB,QAAGK,IAAI,UAAW,cACX,sCAIX,MAAM+jO,EAAgB,CAClBxW,OAAQtoN,KAAK4C,MAAM,GAAMoN,EAAO,GAChCu4M,OAAQ,GACRziD,QAAS,GAETngJ,EAAKg6B,YACLm/K,EAAShjI,OAAQ,EACjBgjI,EAAS/iI,OAAQ,EACjB+iI,EAASjjI,MAAO,EAChBijI,EAAS9iI,MAAO,EAChB8iI,EAASzW,OAASroN,KAAK4C,MAAM,GAAMmN,EAAO,IAE9C,MACMyqN,GADY,IAAI9+H,EAAAtK,cACMC,YAAY,OAAQthF,EAAMC,EAAM8uN,GACtDrE,EAAUD,EAAUl+M,SAGpByiN,EAAc,CAAC,IAAM,GAAM,IAAM,KACjC51G,EAAS,CAAC,GAAK,GAAM,IAErBphG,EAAS+gB,EAAAvS,YAAYmO,YACrB20E,EAAYt2G,GAAwB,uBAAfA,EAAMrM,KAC3Bq9H,EAAiB,CACnB,CAAC1a,YAAW2B,OAAQ,EAAGjzF,SAAQsjE,OAAQ,EAAG4mE,SAAS,GACnD,CAAC54C,YAAW2B,OAAQ,EAAGjzF,SAAQsjE,OAAQ,EAAG4mE,SAAS,GACnD,CAAC54C,YAAW2B,OAAQ,EAAGjzF,SAAQsjE,OAAQ,EAAG4mE,SAAS,IAIjD+sE,EAAY,GAClB,IAAK,IAAI7oO,EAAI,EAAGA,EAAI4oO,EAAY1kO,OAAS,EAAGlE,IAAK,CAC7C,MAAMotB,EAAKvjB,KAAK4C,MAAMoN,EAAO+uN,EAAY5oO,IAEzC,IAAI8oO,EADOj/N,KAAK4C,MAAMoN,EAAO+uN,EAAY5oO,EAAI,IACxBotB,EACjB27M,EAAYl/N,KAAK4C,MAAMumH,EAAOhzH,GAAK4Z,GAEvC,GAAI4V,EAAKg6B,UAAW,CAChB,MAAMr8B,EAAKtjB,KAAK4C,MAAMmN,EAAOgvN,EAAY5oO,IAEzC+oO,EADWl/N,KAAK4C,MAAMmN,EAAOgvN,EAAY5oO,EAAI,IAC5BmtB,EACjB27M,EAAYj/N,KAAK4C,MAAMumH,EAAOhzH,GAAK6Z,GAGvC+jH,EAAU59H,GAAGgpO,QAAUn/N,KAAK4C,MAAMs8N,EAAYD,EAAY,KAC1DlrG,EAAU59H,GAAG0uF,UAAY,OACzBkvC,EAAU59H,GAAGyuF,SAAW,SACxBmvC,EAAU59H,GAAG6wF,YAAa,EAC1B,MAEMn2E,GAFU,IAAI80K,EAAA5zB,eAEEt6J,OAAOynO,EAAWD,EAAWlrG,EAAU59H,IAC7D6oO,EAAUtgO,KAAKmS,GAInB,MACMuuN,EAAgB,CAACrwN,EAAG,EAAGC,EADdhP,KAAK4C,MAAMm8N,EAAY,GAAKhvN,GACHiW,SAAS,GAUjD,GATIL,EAAKg6B,YACLy/K,EAASn5M,SAAU,EACnBm5M,EAASp5M,SAAU,EACnBo5M,EAASpwN,EAAI,EACbowN,EAASrwN,EAAI/O,KAAK4C,MAAMm8N,EAAY,GAAK/uN,IAE7Ck9D,EAAA7pD,SAASg8M,WAAW7E,EAAWwE,EAAWI,GAGtCz5M,EAAKg6B,UAAW,CAChB,MAAMz5B,EAAOlmB,KAAK4C,MAAMoN,EAAO,GACzBsrN,EAAa,IAAI/rM,EAAQwB,cAAc,WAAYypM,GACzDA,EAAUzrL,UAAUusL,EAAY,EAAGp1M,GACnC,MAAM48E,EAAa,IAAIvzE,EAAQwB,cAAc,WAAYypM,GACzDA,EAAUzrL,UAAU+zD,EAAY/yF,EAAO,EAAGmW,GAE1C,MAAMqsD,EAAO4Q,EAAAzX,KAAKujB,iBAAiBwrI,EAAS,EAAGv0M,EAAMnW,EAAO,EAAGmW,GAC/Dm9D,EAAA+F,QAAQC,aAAaoxI,EAASloJ,OAE7B,CACD,MAAMztD,EAAO9kB,KAAK4C,MAAMmN,EAAO,GACzBuvN,EAAc,IAAI/vM,EAAQwB,cAAc,WAAYypM,GAC1DA,EAAUzrL,UAAUuwL,EAAax6M,EAAM,GACvC,MAAMy6M,EAAc,IAAIhwM,EAAQwB,cAAc,WAAYypM,GAC1DA,EAAUzrL,UAAUwwL,EAAaz6M,EAAM9U,EAAO,GAE9C,MAAMuiE,EAAO4Q,EAAAzX,KAAKujB,iBAAiBwrI,EAAS31M,EAAM,EAAGA,EAAM9U,EAAO,EAC/BmzE,EAAAzX,KAAKmjB,kCACxCxL,EAAA+F,QAAQC,aAAaoxI,EAASloJ,GAIlC,MAAMymC,EAAY,CACdqmG,QAAS,IACTnD,OAAQ,GACRG,MAAO,GACPD,UAAW,GAET3/M,EAAS,GACf5F,OAAO6qB,KAAKs3F,GAAW71G,QAAQzL,IAC3B,MAAMhB,cAAmBgB,IACnB8oE,EAAMw4C,EAAUthH,GACtB,IAAK,IAAIvB,EAAI,EAAGA,EAAIqqE,EAAKrqE,IAAK,CAC1B,MAAM4M,EAAQglB,EAAOgc,YAAYrtC,GACjC+F,EAAOiC,KAAKqE,MAKpB,IAAK,IAAI5M,EAAI,EAAGA,EADE,EACaA,IAAK,CAChC,MAAM4lH,EAAUh0F,EAAOgc,YAAY,WACnCtnC,EAAOiC,KAAKq9G,GAGhB7M,EAAAV,OAAOC,oBAAoB+rH,EAAW/9N,EAAQqkB,EAAApmB,QAAGiL,YAEjD,MAAMjJ,EAAQ,CAACqrB,EAAO+b,WAAW,cACjCorE,EAAAV,OAAOC,oBAAoB+rH,EAAW99N,EAAOokB,EAAApmB,QAAGmL,WAEhD/M,KAAK+X,MAAQ2pN,EAGVr5M,aAIAA,WACH,OAAOroB,KAAK+X,2KCvJpB,MAAAiQ,EAAAC,EAAAhrB,EAAA,IACA2lG,EAAA3lG,EAAA,IACAytF,EAAAztF,EAAA,IACAm5G,EAAAn5G,EAAA,IACAk7F,EAAAl7F,EAAA,IACAogC,EAAApgC,EAAA,GACAi7F,EAAAj7F,EAAA,IACAm3E,EAAAn3E,EAAA,GACAq3C,EAAAr3C,EAAA,GACA+yC,EAAA/yC,EAAA,GACAypO,EAAAzpO,EAAA,KAEM0pO,EAAkB,CACtBxF,eAAgB,IAChBC,eAAgB,GAChBC,iBAAkB,GAClBpqN,KAAM,IAAKC,KAAM,KAEX/Z,EAAAwpO,kBAER,MAAM1F,EAAY,EAKlB9jO,EAAA2jO,YAAA,MAIIz4M,YAAYpR,EAAMC,EAAM2V,EAAO85M,GAC7B,MAAMX,EAAW,CACfxW,OAAQtoN,KAAK4C,MAAM,IAAOoN,EAAO,GACjCu4M,OAAQ,GACRziD,QAAS,GAGL45D,EAAY,IAAIhkI,EAAAtK,aAChBopI,EAAYkF,EAAUruI,YAAY,OAAQthF,EAAMC,EAAM8uN,GAGtD7E,EAAiBt0M,EAAKs0M,gBAAkB,IACxCC,EAAiBv0M,EAAKu0M,gBAAkB,IAC9C,IAAIS,EAAY36N,KAAK4B,MAAMq4N,EAAiBlqN,GACxC6qN,EAAY56N,KAAK4B,MAAMs4N,EAAiBlqN,GAC5C2qN,EAAY7hO,KAAK6mO,iBAAiBhF,GAClCC,EAAY9hO,KAAK6mO,iBAAiB/E,GAElC,MAAMgF,EAAgB9mO,KAAK+mO,qBAAqBlF,EAAWC,GAGrDkF,EAAWnF,EAAY,GACvBoF,EAAWnF,EAAY,GACvBoF,EAAgBlnO,KAAKmnO,oBAAoBH,EAAUC,GAGnDG,EAAWH,EAAWnF,EACtBuF,EAAangO,KAAKC,MAAM8P,EAAOiwN,EAAc1jN,SAASvM,MAAQ,GAC9DqwN,EAAWrwN,EAAOowN,EAMlBf,EAAW,CACfn5M,SAAS,EAAOD,SAAS,EACzBhX,EAXiB,GAWFD,EAAG,GAGdsxN,EAAc,CAACL,EAAeJ,EARfF,EAAUruI,YAAY,QAAS,GAAI,KAUxDnkB,EAAA7pD,SAASg8M,WAAW7E,EAAW6F,EAAajB,GAG5C,MAAMh9M,EAAO,CACTC,IAAK89M,EAAY79M,IApBF,GAqBfC,IAAK69M,EAAU59M,IAAK09M,GAExBpnO,KAAKw8H,kBAAkBklG,EAAWp4M,GAElCtpB,KAAKwnO,iBAAiBvwN,EAAMC,EAAMwqN,GAElC1hO,KAAK+X,MAAQ2pN,EAGRr5M,iBAAiBo/M,GACtB,KAAOA,EAASxG,GAAc,KAC1BwG,EAKJ,OAHIA,GAAU,EAAIxG,IAAe,IAC/BwG,GAAUxG,GAELwG,EAKFp/M,oBAAoBpR,EAAMC,GAC/B,MAAMwwN,EAAW,CACbh1I,cAAehI,EAAAuH,OAAOqqD,oBAEpBtrD,EAAS,IAAIkH,EAAA/M,aAEbw8I,EAAW32I,EAAOuC,iBAAiBt8E,EAAMC,EAAMwwN,GAE/ChF,EAAazrN,EAAO,GACpBwrN,EAAavrN,EAAO,GACpB0wN,EAAc52I,EAAOsI,aAAaopI,EAAYD,EAClD,CAACnxI,WAAY,EAAGiB,OAAQ,KACN,IAAI4F,EAAAzjD,OACZkkD,OAAOgvI,EAAYvyN,KAC/B++D,EAAA7pD,SAAS6D,kBAAkBu5M,EAAStyN,IAChCuyN,EAAYvyN,IAAK,GAAO,IAE5B,MAAM6xN,EAAgB,IAAI/uI,EAAAzjD,MAC1BwyL,EAActuI,OAAO+uI,EAAStyN,KAE9B,MAAMwyN,EAAe72I,EAAOsI,aAAa,GAAO,GAC5C,CAAC5G,cAAehI,EAAAuH,OAAOkqD,kBACrB7qD,WAAY,EAAGD,UAAW,CAAC,EAAG,EAAG,EAAG,KAEpCy2I,EAAe92I,EAAOsI,aAAa,GAAO,GAC5C,CAAC5G,cAAehI,EAAAuH,OAAOiqD,kBACrB5qD,WAAY,EAAGD,UAAW,CAAC,EAAG,EAAG,EAAG,KAGpC02I,EAAoB,IAAI5vI,EAAAzjD,MAC9BqzL,EAAkBnvI,OAAOivI,EAAaxyN,KACtC,MAAM2yN,EAAoB,IAAI7vI,EAAAzjD,MAC9BszL,EAAkBpvI,OAAOkvI,EAAazyN,KAEtC,MAAM4yN,EAAiB,CAACF,EAAmBb,EACzCc,GAEIE,EAAW,CAAC/6M,SAAS,EAAM8hE,SAAU36C,EAAArE,KAAK4B,MAChD,OAAO60L,EAAAyB,WAAWC,YAAYH,EAAgBC,GAIzC7/M,qBAAqBpR,EAAMC,GAChC,MAAM85E,EAAS,IAAIkH,EAAA/M,aACbk9I,EAAgB,CAClB31I,cAAehI,EAAAuH,OAAOqqD,oBAGpBgsF,EAAYt3I,EAAOuC,iBAAiBt8E,EAAMC,EAC9CmxN,GAEI3F,EAAazrN,EAAO,GACpBwrN,EAAavrN,EAAO,GACpB0wN,EAAc52I,EAAOsI,aAAaopI,EAAYD,EAClD,CAAClwI,OAAQ,EAAGjB,WAAY,KACN,IAAI6G,EAAAzjD,OACZkkD,OAAOgvI,EAAYvyN,KAC/B++D,EAAA7pD,SAAS6D,kBAAkBk6M,EAAUjzN,IAAKuyN,EAAYvyN,IAClD,GAAO,IAEX,MAAMkzN,EAAgBv3I,EAAOuC,iBAAiB,GAAO,GACnD,CAACb,cAAehI,EAAAuH,OAAOkqD,oBAEnBqsF,EAAgBx3I,EAAOuC,iBAAiB,GAAO,GACnD,CAACb,cAAehI,EAAAuH,OAAOiqD,oBAGnBusF,EAAiB,IAAItwI,EAAAzjD,MAC3B+zL,EAAe7vI,OAAO0vI,EAAUjzN,KAEhC,MAAMqzN,EAAgB,IAAIvwI,EAAAzjD,MAC1Bg0L,EAAc9vI,OAAO2vI,EAAclzN,KACnC,MAAMszN,EAAgB,IAAIxwI,EAAAzjD,MAC1Bi0L,EAAc/vI,OAAO4vI,EAAcnzN,KAEnC,MAAM6wN,EAAY,CAACwC,EAAeD,EAAgBE,GAC5CT,EAAW,CAAC/6M,SAAS,EAAM8hE,SAAU36C,EAAArE,KAAK4B,MAChD,OAAO60L,EAAAyB,WAAWC,YAAYlC,EAAWgC,GAMpC7/M,kBAAkBtQ,EAAOuR,GAC9B,MAAM2F,EAAS+gB,EAAAvS,YAAYmO,YACrB+K,EAAY5+B,EAAMyL,SAASyyF,cAAc3sF,GAEzC42F,EAAY,CACdsjG,QAAS,IAAK4C,OAAQ,IACtB7C,MAAO,GAAIoE,SAAU,GACrBrE,UAAW,IAET3/M,EAAS,GACf5F,OAAO6qB,KAAKs3F,GAAW71G,QAAQzL,IAC7B,MAAMhB,aAAkBgB,IAClB8oE,EAAMw4C,EAAUthH,GACtB,IAAK,IAAIvB,EAAI,EAAGA,EAAIqqE,EAAKrqE,IAAK,CAC1B,MAAM4M,EAAQglB,EAAOgc,YAAYrtC,GACjC+F,EAAOiC,KAAKqE,MAGlBmsG,EAAAV,OAAOE,gBAAgB79F,EAAO4+B,EAAWhzC,EAAQqkB,EAAApmB,QAAGiL,YAK/Cwb,WACL,OAAOroB,KAAK+X,MAGPsQ,iBAAiBpR,EAAMC,EAAMa,GAChC,MAAMiU,EAAO9kB,KAAK4C,MAAMmN,EAAO,GACzBuvN,EAAc,IAAInpM,EAAApF,cAAc,WAAYlgB,GAClDA,EAAMk+B,UAAUuwL,EAAax6M,EAAM,GACnC,MAAMy6M,EAAc,IAAIppM,EAAApF,cAAc,WAAYlgB,GAClDA,EAAMk+B,UAAUwwL,EAAaz6M,EAAM9U,EAAO,oFCnNlD,MAAAihF,EAAAl7F,EAAA,IACAmtF,EAAAntF,EAAA,IACAq3C,EAAAr3C,EAAA,GACAm3E,EAAAn3E,EAAA,GAGaE,EAAAgrO,WAAkB,GAG/BhrO,EAAAgrO,WAAWC,YAAc,SAASx7M,EAAiBC,GACjD,MAAM+7M,EAAc,CAAC/+N,EAAKk0M,IAAS72M,KAAK4Q,IAAIjO,EAAKk0M,GAC3CqoB,EAAYx5M,EAAOvX,IAAI/X,GAAKA,EAAEkmB,SAASvM,MACvCkvN,EAAYv5M,EAAOvX,IAAI/X,GAAKA,EAAEkmB,SAAStM,MACvCa,EAAQ,IAAIogF,EAAAzjD,MAClB,IAAIr/B,EAAM,KAEV,MAAM45E,EAAWpiE,EAAKoiE,UAAY36C,EAAArE,KAAKsB,MACvC,GAAI1kB,EAAKM,QAAS,CAChB,MAAM07M,EAAU1C,EAAUn9I,OAAO4/I,GAC3BE,EAAY1C,EAAUp9I,OAAO,CAACoW,EAAK9gG,IAAU8gG,EAAM9gG,EAAO,GAChE+W,EAAM,IAAI+0E,EAAAuB,QAAQm9I,EAAWD,EAAS55I,GACtCl3E,EAAM6gF,OAAOvjF,GACb++D,EAAA7pD,SAASg8M,WAAWxuN,EAAO6U,EAAQ,CAACO,SAAS,EAAMlX,EAAG,EAAGC,EAAG,SAEzD,GAAI2W,EAAKK,QAAS,CACrB,MAAM67M,EAAY5C,EAAUn9I,OAAO,CAACoW,EAAK9gG,IAAU8gG,EAAM9gG,EAAO,GAC1D0qO,EAAU5C,EAAUp9I,OAAO4/I,GACjCvzN,EAAM,IAAI+0E,EAAAuB,QAAQq9I,EAASD,EAAW95I,GACtCl3E,EAAM6gF,OAAOvjF,GACb++D,EAAA7pD,SAASg8M,WAAWxuN,EAAO6U,EAAQ,CAACM,SAAS,EAAMjX,EAAG,EAAGC,EAAG,IAE9D,OAAO6B,sKC/BT,MAAAiQ,EAAAC,EAAAhrB,EAAA,IACAirB,EAAAD,EAAAhrB,EAAA,KAEA+7J,EAAA/7J,EAAA,IACAmtF,EAAAntF,EAAA,IACAk7F,EAAAl7F,EAAA,IACAm3E,EAAAn3E,EAAA,GACAi7F,EAAAj7F,EAAA,IACAotF,EAAAptF,EAAA,IACAo7F,EAAAp7F,EAAA,IACAogB,EAAApgB,EAAA,GACAq3C,EAAAr3C,EAAA,GACA+yC,EAAA/yC,EAAA,GACAogC,EAAApgC,EAAA,GAEM40C,EAAO,EAEPppB,EAAMpL,EAAAC,OAAOC,SAEb0rN,EAAe5+I,EAAAzX,KAAK2iB,gBAEpB2zI,EAAiB,GAEjBC,EAAgB,CAClBC,MAAO,CACHn7M,KAAMqmB,EAAArE,KAAKI,OAEfskD,MAAO,CACH1mE,KAAMqmB,EAAArE,KAAKh7B,OAEfsoI,OAAQ,CACJtvH,KAAMqmB,EAAArE,KAAKmB,MAEf0pG,KAAM,CACF7sH,KAAMqmB,EAAArE,KAAKQ,OAIb44L,EAAU,IACVC,EAAO,CACTC,UAAW,IACXC,SAAU,GACVC,eAAgB,CACZC,MAAO,EACPruK,SAAU,EACV4hF,MAAO,EACPrjF,OAAQ,IAMV+vK,EAAsB,CACxBD,MAAS,CACLE,QAAS,CAAC,aAEdC,cAAe,GACfC,cAAe,GACfC,iBAAkB,CACdH,QAAS,CAAC,aAEdhwK,OAAU,IAKRowK,EAAU,SAASjoO,EAAM6vD,GAC3B5xD,KAAK4xD,KAAOA,EACZ5xD,KAAK+B,KAAOA,GAIhB,MAAa66H,UAAyBo8B,EAAArkC,eAK3BtsG,kBAAkBtmB,EAAO,UAC5B,MAAMkoO,EAAY,CACdz2I,UAAWzxF,EAAMmoO,UAAW,EAC5BC,SAAU,CAAC,OAAQC,SAAU,CAAC,OAC9BC,aAAc,CAAC,IAAKC,cAAe,CAAC,IACpC9xN,UAAW,EAAGE,SAAU,IACxB6xN,YAAa,GAGXrF,EAAU,CAAC7+K,QAASmkL,EAAWzoO,IACrC,OAAOhE,OAAO4kF,OAAOsnJ,EAAW/E,GAKpC78M,cACI6O,QACAl3B,KAAK44D,UAAW,EAChB54D,KAAK40H,qBAAsB,EAKxBvsG,OAAOpR,EAAcC,EAAc2V,GAEtC,MAAM9U,EAAQ/X,KAAKyqO,aAAaxzN,EAAMC,EAAM2V,GAyB5C,OAtBA7sB,KAAK0qO,mBAAmB3yN,GAGxB/X,KAAK2qO,mBAAmB5yN,GAIxB/X,KAAK4qO,gBAAgB7yN,GAEJ,IAAIsgF,EAAAyB,gBAAgB,CAAC2lB,MAAO,KAEpCorH,cAAc9yN,IAGnB8U,EAAKi+M,gBAAkBj+M,EAAKk+M,kBAEvB/qO,KAAKgrO,YAAYjzN,EAAO8U,IACzB7sB,KAAKrB,OAAOsY,EAAMC,EAAM2V,IAIhC7sB,KAAKq6J,cAActiJ,EAAO8U,GACnB9U,EAIJsQ,aAAapR,EAAMC,EAAM2V,GACvB5V,IACDA,EAAOwR,EAAIM,cAAc,GAAI,MAE5B7R,IACDA,EAAOuR,EAAIM,cAAc,GAAI,KAEjC,MAAMwhN,EAAc19M,EAAK09M,aAAe,EACxC,IAAIv5I,EAAS,KACT37E,EAAM,KACV,MAAM41N,EAAW,CAACh1N,EAAGC,EAAGpQ,KAChBA,IAAQ+rC,GACRx8B,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAK4B,OAKrC,IAAIg/C,EAAW,GACf,OAAQG,GAAUA,EAAOn7B,WAAWt0D,OAASgpO,KACzCv5I,EAAShxF,KAAKkrO,UAAUj0N,EAAMC,EAAM2V,GACpCxX,EAAM,IAAI+0E,EAAAuB,QAAQ10E,EAAMC,GACxB85E,EAAOryF,OAAOssO,GACK,KAAbp6I,KAKV,MAAM94E,EAAQ,IAAIogF,EAAAzjD,MAClB38B,EAAM6gF,OAAOvjF,GAEb,MAAMiiC,EAAc,CAChBqiB,MAAOq3B,EAAOn7B,WACd62B,UAAWsE,EAAOl7B,gBAMtB,OAJIk7B,EAAO+uB,WACPzoE,EAAOyoE,SAAW/uB,EAAO+uB,UAE7BhoG,EAAM4hF,UAAUriD,GACTv/B,EAGJsQ,UAAUpR,EAAMC,EAAM2V,GACzB,IAAI2mE,EAAY23I,IACZt+M,EAAKqvG,aAAoC,KAArBrvG,EAAKqvG,cACzB1oC,EAAY3mE,EAAKqvG,aAGrB,MAAMgpG,EAAUr4M,EAAKw5B,SAAWmkL,EAAWh3I,GACrCxC,EAAS,IAAI9oE,EAAAtmB,QAAImvD,IAAIgF,OAAO9+C,EAAMC,EAAMguN,GAExCnlH,EAAW//G,KAAKorO,YAAYp6I,EAAQnkE,GAI1C,OAHIkzF,EAASx+G,OAAS,IAClByvF,EAAO+uB,SAAWA,GAEf/uB,EAQJ3oE,YAAY2oE,EAAQnkE,GACvB,IAAIw+M,EAAkB,GAkBtB,GALIx+M,EAAKq9M,UAAY,IACjBmB,EAAkBrrO,KAAKsrO,kBAAkBt6I,EAAQnkE,IAG/BpE,EAAI9C,cAAgB2jN,EAAKE,UACP,IAAnB38M,EAAKq9M,UAAiB,CACvC,MAAMqB,EAAcvrO,KAAKwrO,iBAErB,SAAS30M,KAAK00M,KACdF,EAAkBrrO,KAAKyrO,iBAAiBz6I,IAExC,iBAAiBn6D,KAAK00M,KACtBF,EAAkBrrO,KAAK0rO,qBAAqB16I,IAE5C,QAAQn6D,KAAK00M,KACbF,EAAkBrrO,KAAK2rO,cAAc36I,IAErC,QAAQn6D,KAAK00M,KACbF,EAAkBrrO,KAAK4rO,SAAS56I,IAGxC,OAAOq6I,EAGJhjN,iBACH,OAAOI,EAAIjL,aAAazf,OAAO6qB,KAAK+gN,IAIjCthN,kBAAkB2oE,EAAQnkE,GAC7B,MAAOw8B,EAAIC,GAAM0nC,EAAO1/B,eACjBr6C,EAAMC,GAAQ,CAAC85E,EAAO5/B,UAAW4/B,EAAO3/B,WACzC64K,EAAYr9M,EAAKq9M,WAAa,EAC9BmB,EAAkB,GACxB,IAAK,IAAIhuO,EAAI,EAAGA,EAAI6sO,EAAW7sO,IAAK,CAChC,IAAIylD,EAAQ57C,KAAK4C,MAAMmN,EAAO,GAC1B4V,EAAKw9M,cACDx9M,EAAKw9M,aAAahtO,KAClBylD,EAAQj2B,EAAKw9M,aAAahtO,IAIlC,IAAI0lD,EAAS77C,KAAK4C,MAAMoN,EAAO,GAC3B2V,EAAKy9M,eACDz9M,EAAKy9M,cAAcjtO,KACnB0lD,EAASl2B,EAAKy9M,cAAcjtO,IAIpC,MAAMstB,EAAO1T,EAAO,EAAI6rC,EACxB,IAAI7sC,EAAIwS,EAAIM,cAAc,EAAG4B,GACzBkhN,EAAQ,GACRh/M,EAAKs9M,WACL0B,EAAQh/M,EAAKs9M,SAAS9sO,IAGtB,MAAMw5B,KAAKg1M,KACX51N,EAAIozC,EAAKniD,KAAK4C,MAAMg5C,EAAQ,IAGhC,MAAMl4B,EAAO1T,EAAO,EAAI6rC,EACxB,IAAI7sC,EAAIuS,EAAIM,cAAc,EAAG6B,GACzBkhN,EAAQ,GACRj/M,EAAKu9M,WACL0B,EAAQj/M,EAAKu9M,SAAS/sO,IAEtB,MAAMw5B,KAAKi1M,KACX51N,EAAIozC,EAAKpiD,KAAK4C,MAAMi5C,EAAS,IAGjC,MAAMtyB,EAAKxa,GAAK6sC,EAAQ,GAClBpyB,EAAKxa,GAAK6sC,EAAS,GACnB6O,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAKrgD,EAAGC,EAAGua,EAAIC,GAChDsgE,EAAOtqC,SAASyP,eAAiB,GAEjC66B,EAAO/4B,QAAQrG,GACfy5K,EAAgBzlO,KAAK,IAAIokO,EAAQ,SAAUp4K,IAE/C,OAAOy5K,EAIJhjN,iBAAiB2oE,GACpB,MAAO/5E,EAAMC,GAAQ,CAAC85E,EAAO5/B,UAAW4/B,EAAO3/B,YACxChI,EAAIC,GAAM0nC,EAAO1/B,cAElBy6K,EAAOtjN,EAAIM,cAAc,EAAG,GAC5BijN,EAAOvjN,EAAIM,cAAc,EAAG,GAK5B02J,EAAO,CAACzpH,UAJI,CAAC9uD,KAAK4C,MAAMmN,GAAQ+0N,EAAO,IACzC9kO,KAAK4C,MAAMmN,EAAO+0N,IAGG/1K,WAFN,CAAC/uD,KAAK4C,MAAMoN,EAAO60N,GAAO7kO,KAAK4C,MAAMoN,EAAO60N,KAGzDn6K,EAAO1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAKqJ,aAAatW,EAAIC,EAAIm2H,GAGvD,OAFAzuF,EAAOtqC,SAASyP,eAAiB,GACjC66B,EAAO/4B,QAAQrG,GACR,CAAC,IAAIo4K,EAAQ,SAAUp4K,IAG3BvpC,qBAAqB2oE,GACxB,MAAO/5E,EAAMC,GAAQ,CAAC85E,EAAO5/B,UAAW4/B,EAAO3/B,WACzC46K,EAAcxjN,EAAIyjN,uBAClBC,EAAW,kBAAoBF,EAGrC,IAAIr6K,EAAO,KACX,GAAoB,MAAhBq6K,EAAqB,CACrB,MAAMD,EAAOvjN,EAAIM,cAAc,EAAG,GAC5B+5B,EAAQ57C,KAAK4C,MAAMmN,EAAO+0N,GAChCp6K,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAK,EAAG,EAAGxT,EAAO5rC,EAAO,GAIxD,GAAoB,MAAhB+0N,EAAqB,CACrB,MAAMD,EAAOvjN,EAAIM,cAAc,EAAG,GAE5ByB,EAAKvT,EAAO,EADJ/P,KAAK4C,MAAMmN,EAAO+0N,GAEhCp6K,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAK9rC,EAAI,EAAGvT,EAAO,EAAGC,EAAO,GAI5D,GAAoB,MAAhB+0N,EAAqB,CACrB,MAAMF,EAAOtjN,EAAIM,cAAc,EAAG,GAC5Bg6B,EAAS77C,KAAK4C,MAAMoN,EAAO60N,GACjCn6K,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAK,EAAG,EAAGr/C,EAAO,EAAG8rC,GAIpD,GAAoB,MAAhBkpL,EAAqB,CACrB,MAAMF,EAAOtjN,EAAIM,cAAc,EAAG,GAE5B0B,EAAKvT,EAAO,EADHhQ,KAAK4C,MAAMoN,EAAO60N,GAEjCn6K,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAK,EAAG7rC,EAAIxT,EAAO,EAAGC,EAAO,GAU5D,OAPK06C,GACD5pC,EAAApmB,QAAGK,IAAI,mBAAoB,uBACvB,kCAGR+uF,EAAOtqC,SAASyP,eAAiB,GACjC66B,EAAO/4B,QAAQrG,GACR,CAAC,IAAIo4K,EAAQmC,EAAUv6K,IAG3BvpC,cAAc2oE,GACjB,MAAO/5E,EAAMC,GAAQ,CAAC85E,EAAO5/B,UAAW4/B,EAAO3/B,YACxChI,EAAIC,GAAM0nC,EAAO1/B,cAElB4oD,EAAMzxF,EAAIM,cAAc,EAAG,GAC3B+5B,EAAQ57C,KAAK4C,MAAMmN,EAAOijG,GAC1Bn3D,EAAS77C,KAAK4C,MAAMoN,EAAOgjG,GAC3BkyH,EAAU,CACZp2K,UAAW,CAAC/+C,EAAO,EAAGA,EAAO,GAAIg/C,WAAY,CAAClT,EAAQA,IAEpDspL,EAAU,CACZp2K,WAAY,CAAC/+C,EAAO,EAAGA,EAAO,GAAI8+C,UAAW,CAAClT,EAAOA,IAEnDwpL,EAAUpkN,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAKqJ,aAAatW,EAAIC,EAAI8iL,GACpDG,EAAUrkN,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAKqJ,aAAatW,EAAIC,EAAI+iL,GAC1Dr7I,EAAO/4B,QAAQq0K,GACft7I,EAAO/4B,QAAQs0K,GAEf,MAEMC,GAFUF,EAAQvrK,cACRwrK,EAAQxrK,gBACW9pD,EAAOC,GAO1C,OALA85E,EAAOtqC,SAASyP,eAAiB,IAAMq2K,EACnCx7I,EAAOtqC,SAASyP,eAAiBkzK,IACjCr4I,EAAOtqC,SAASyP,cAAgBkzK,GAG7B,CACH,IAAIW,EAAQ,WAAYsC,GACxB,IAAItC,EAAQ,WAAYuC,IAIzBlkN,SAAS2oE,GAGZ,MAAO/5E,EAAMC,GAAQ,CAAC85E,EAAO5/B,UAAW4/B,EAAO3/B,WACzCo7K,EAAMhkN,EAAI9C,cAAgB2jN,EAAKC,UACrC,IAAIzmL,EAAQ57C,KAAK4C,MAAMmN,EAAO,GAC1B8rC,EAAS77C,KAAK4C,MAAMoN,EAAO,GAC3B2zM,EAAU,CAAC,KAAM,KAAM,KAAM,MAC7B9oN,EAAO,cACP0qO,IACIhkN,EAAI9C,cAAgB,IACpBklM,EAAU,CAAC,KAAM,MACjB/nK,EAAQ57C,KAAK4C,MAAMmN,EAAO,GAC1B8rC,EAAS7rC,EAAO,IAGhB2zM,EAAU,CAAC,KAAM,MACjB/nK,EAAQ7rC,EAAO,EACf8rC,EAAS77C,KAAK4C,MAAMoN,EAAO,IAE/B85E,EAAOtqC,SAASyP,eAAiB,IACjCp0D,EAAO,eAEX,MAAOyoB,EAAIC,GAAMzqB,KAAK0sO,cAAc5pL,EAAOC,EAAQ9rC,EAAMC,EAAM2zM,GACzDj/L,EAAKpB,EAAKs4B,EAAQ,EAClBj3B,EAAKpB,EAAKs4B,EAAS,EACnB6O,EAAO,IAAI1pC,EAAAtmB,QAAImvD,IAAI6G,QAAQtB,KAAK9rC,EAAIC,EAAImB,EAAIC,GAGlD,OAFAmlE,EAAOtqC,SAASyP,eAAiB,GACjC66B,EAAO/4B,QAAQrG,GACR,CAAC,IAAIo4K,EAAQjoO,EAAM6vD,IAIvBvpC,cAAc8L,EAAGq9B,EAAGv6C,EAAMC,EAAM2zM,GACnC,MAAMrvE,EAAS/yH,EAAIjL,aAAaqtM,GAChC,IAAK50M,EAAGC,GAAK,CAAC,EAAG,GACjB,OAAQslI,GACJ,IAAK,KAAMvlI,EAAI,EAAGC,EAAI,EAAG,MACzB,IAAK,KAAMD,EAAIgB,EAAO,EAAIkd,EAAGje,EAAI,EAAG,MACpC,IAAK,KAAMD,EAAI,EAAGC,EAAIgB,EAAO,EAAIs6C,EAAG,MACpC,IAAK,KAAMv7C,EAAIgB,EAAO,EAAIkd,EAAGje,EAAIgB,EAAO,EAAIs6C,EAGhD,MAAO,CAACv7C,EAAGC,GAIRmS,mBAAmBtQ,GACtB,MAAMu/B,EAASv/B,EAAMksF,YACf5uF,EAAM0C,EAAMyL,SAGlB,GAAI8zB,EAAOyoE,SAAU,CACjB,MAAMnuD,EAAOta,EAAOyoE,SAAS,GAC7B,IAAI8hD,EAAgB,GAOpB,GANA9jK,OAAO6qB,KAAK+gN,GAAqBt/N,QAAQzL,IACjC,IAAI0wC,OAAO1wC,GAAKi4B,KAAK+6B,EAAK7vD,QAC1B8/J,EAAW8nE,EAAoB/qO,MAInCijK,EAAS+nE,QAAS,CAClB,MAAM+C,EAAclkN,EAAIjL,aAAaqkJ,EAAS+nE,SAC9C5pO,KAAK4sO,sBAAsB70N,EAAO40N,EAAar1L,EAAOyoE,WAiB9D,GAAIzoE,EAAOqiB,MAAO,CACd,MAAMkzK,EAAWpkN,EAAIjL,aAAa85B,EAAOqiB,OACnCymD,EAAQ,GACdpgH,KAAK8sO,cAAc/0N,EAAO80N,GAE1Bv1L,EAAOqiB,MAAMtvD,QAAQ,CAACunD,EAAM/6C,KACxB+6C,EAAK8O,MAAM7pD,GACX,IAAIk2N,EAAW,EACf,MAAMzjN,EAAOsoC,EAAKgP,eACJwT,EAAA7pD,SAASyiN,iBAAiB1jN,GAClCjf,QAAQihB,IACV,GAAKjW,EAAInM,IAAIoiB,EAAI,WASXyhN,MATqB,CACvB,MAAMjqO,EAAS,IAAIu6B,EAAAX,cAAc,KACjC55B,EAAO8oF,OAAO,aACd7zE,EAAMoW,WAAWrrB,EAAQwoB,EAAG,GAAIA,EAAG,OAU3CtrB,KAAKitO,gBAAgBl1N,EAAO65C,GAEX,IAAbm7K,GACA3sH,EAAMx6G,KAAKgsD,KAInBwuD,EAAM/1G,QAAQunD,IACV,MAAMtoC,EAAOsoC,EAAKiP,eACJuT,EAAA7pD,SAASc,aAAa/B,GAC9Bjf,QAAQihB,IACV,MAAMxoB,EAAS,IAAIu6B,EAAAX,cAAc,KACjC55B,EAAO8oF,OAAO,QACd7zE,EAAMoW,WAAWrrB,EAAQwoB,EAAG,GAAIA,EAAG,QAI3CgsB,EAAO8oE,MAAQA,GAMhB/3F,sBAAsBtQ,EAAO40N,EAAa5sH,GAC7CA,EAAS11G,QAAQ21G,IACb,MAAMpuD,EAAOouD,EAAQpuD,KAKrB,OAJKA,GACD5pC,EAAApmB,QAAGK,IAAI,mBAAoB,wBACvB,oBAAsB4c,KAAKC,UAAUkhG,IAErC2sH,GACJ,IAAK,WACD3sO,KAAKktO,gBAAgBn1N,EAAO65C,MAQrCvpC,gBAAgBtQ,EAAO65C,GACtB5xD,KAAK44D,UACLhH,EAAKoO,SAAS,CAAC/pD,EAAGC,KAEd,IADa6B,EAAMyL,SAASiL,QAAQxY,EAAGC,GAC7B8/E,UAAW,CACjB,MAAMtyF,EAAO,IAAI25B,EAAAjE,aAAY,GAC7BrhB,EAAMoW,WAAWzqB,EAAMuS,EAAGC,MAYnCmS,gBAAgBtQ,EAAO65C,GAC1B,MAAMu7K,EAAY1kN,EAAIjL,aAAazf,OAAO6qB,KAAKugN,IACzC1pH,EAAQ0pH,EAAcgE,GACtBl/M,EAAOwxF,EAAMxxF,KACnBlW,EAAMksF,YAAYwb,MAAQA,EAE1B,MAAMj1F,EAAKonC,EAAKwI,UAAY,EACtB3vC,EAAKmnC,EAAK0I,SAAW,EACrB8yK,EAAQx7K,EAAKqO,WACbotK,EAAQz7K,EAAKsO,aACb7qD,IAACA,GAAO6iF,EAAA/M,aAAamiJ,eAAeF,EAAOC,EAC7C,CAAC91N,SAAU,GAAI0W,SACnBmmD,EAAA7pD,SAAS6D,kBAAkBrW,EAAMyL,SAAUnO,EAAKmV,EAAIC,GAIjDpC,cAActQ,EAAO65C,GACxB,MAAM3iC,EAAS+gB,EAAAvS,YAAYmO,YACX7tC,OAAOutC,OAAOsmB,EAAKuO,cAC3B91D,QAAQihB,IACZ,MAAMwvH,EAAO7rH,EAAOgc,YAAY,QAChClzB,EAAMgW,SAAS+sH,EAAMxvH,EAAG,GAAIA,EAAG,MAIhCjD,mBAAmBtQ,GAEtB,MAAMu/B,EAASv/B,EAAMksF,YACrB,IAAIpT,EAAW7oE,EAAApmB,QAAG2M,SAClB,GAAI+oC,EAAOqiB,MAAO,CAGd,IAAKJ,EAAOE,GAAShxC,EAAIogM,eAAevxK,EAAOqiB,MAAO,GAClD4zK,EAAc,KACdC,EAAc,KACdp0N,EAAO,EACPq0N,EAAc,EAClB,MAAMC,EAAkBxmO,KAAK4C,MAAMiO,EAAMyL,SAASvM,KAAO,GACnD/P,KAAK4C,MAAMiO,EAAMyL,SAAStM,KAAO,GAEvC,KAAOkC,EAAOs0N,KACTn0K,EAAOE,GAAShxC,EAAIogM,eAAevxK,EAAOqiB,MAAO,IAClDvgD,EAAOu0N,EAAY51N,EAAOwhD,EAAOE,IACtBg0K,IACPA,EAAcr0N,EACdm0N,EAAch0K,EACdi0K,EAAc/zK,GAEC,KAAbo3B,KAEVt3B,EAAQg0K,EACR9zK,EAAQ+zK,EAER,MAAOI,EAAKC,GAAOt0K,EAAMM,aAClBi0K,EAAKC,GAAOt0K,EAAMI,YAGzBviB,EAAOitD,WAAa,CAACupI,EAAKC,GAC1Bz2L,EAAO+sD,SAAW,CAACupI,EAAKC,GAExB,MAAMtpI,WAACA,EAAUF,SAAEA,GAAY/sD,EAC/Bt3C,KAAKguO,oBAAoBj2N,EAAOwsF,EAAYF,GAG5C9qC,EAAMtjB,UAAU23L,EAAKC,GAAK,GAC1Bp0K,EAAMxjB,UAAU63L,EAAKC,GAAK,OAGzB,CAGD,MAAM1pO,EAAM,oCACZ2jB,EAAApmB,QAAGK,IAAI,mBAAoB,qBACvB,mCAAqCoC,IAM1CgkB,gBAAgBtQ,GACnB,MAAMu/B,EAASv/B,EAAMksF,aACd6pI,EAAKC,GAAOz2L,EAAOitD,YACnBqpI,EAAKC,GAAOv2L,EAAO+sD,SAEpBhvF,EAAM0C,EAAMyL,SACZ4yE,EAAW,CAACngF,EAAGC,IACVb,EAAIqgF,WAAWz/E,EAAGC,IAAMb,EAAIoZ,QAAQxY,EAAGC,GAAG8/E,UAGrD,IAAIi4I,EAAe5jJ,EAAAzX,KAAK2iB,gBAAgBu4I,EAAKC,EAAKH,EAAKC,EAAKz3I,GAC5D,GAA4B,IAAxB63I,EAAa1sO,OAAc,CAC3B,MAAM2sO,EAAc,CAACj4N,EAAGC,KACZ,OAAS2gB,KAAKxhB,EAAIoZ,QAAQxY,EAAGC,GAAG3V,cAAcC,WAGrC,KADrBytO,EAAe5jJ,EAAAzX,KAAK2iB,gBAAgBu4I,EAAKC,EAAKH,EAAKC,EAAKK,IAEpDlmN,EAAApmB,QAAGK,IAAI,mBAAoB,kBACvB,gCAIJgsO,EAAa5jO,QAAQihB,IACjB,MAAMrV,EAACA,EAACC,EAAEA,GAAKoV,EACVjW,EAAIqgF,WAAWz/E,EAAGC,IACnBb,EAAIugC,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAKG,UAM7C,MAAM+9L,EAAiB,CAACl4N,EAAGC,IAChBkgF,EAASngF,EAAGC,KACdb,EAAIoZ,QAAQxY,EAAGC,GAAGwlJ,UAAU,eAIrC,IAAI0yE,EAAWH,EACf,KAAOA,EAAa1sO,OAFD,IAEsB,CAIrC,IADmBvB,KAAKquO,WAAWt2N,EAAOk2N,GAGtC,MAKJ,GAA4B,KAD5BA,EAAehF,EAAa6E,EAAKC,EAAKH,EAAKC,EAAKM,IAC/B5sO,OAAc,CAC3BvB,KAAKsuO,YAAYv2N,EAAOq2N,GACxBH,EAAeG,EACf,MAGAA,EAAWH,EAMnBjuO,KAAKuuO,sBAAsBx2N,GAE3Bk2N,EAAa5jO,QAAQihB,IACjB,MAAMkjN,EAAe,IAAInxM,EAAAX,cAAc,KACvC8xM,EAAa5iJ,OAAO,iBACpB7zE,EAAMoW,WAAWqgN,EAAcljN,EAAGrV,EAAGqV,EAAGpV,KAG5CohC,EAAO22L,aAAeA,EAKnB5lN,WAAWtQ,EAAO0hE,GACrB,IAAK,IAAIp8E,EAAI,EAAGA,EAAIo8E,EAAKl4E,OAAQlE,IAAK,CAClC,MAAM4Y,EAACA,EAACC,EAAEA,GAAKujE,EAAKp8E,GAEpB,GADa0a,EAAMyL,SAASiL,QAAQxY,EAAGC,GAC9B8/E,UAAW,CAChB,MAAMlzF,EAAS,IAAIu6B,EAAAX,cAAc,KAGjC,OAFA55B,EAAO8oF,OAAO,eACd7zE,EAAMoW,WAAWrrB,EAAQmT,EAAGC,IACrB,GAGf,OAAO,EAGJmS,sBAAsBtQ,GACTA,EAAM4V,cAAcxjB,OAChCya,GAAqB,WAAhBA,EAAEpkB,WAAyC,gBAAfokB,EAAE0kG,UAE/Bj/G,QAAQvH,IACZ,MAAOmT,EAAGC,GAAKpT,EAAO8Y,QACtB7D,EAAMyL,SAASoyB,cAAc3/B,EAAGC,EAAGo+B,EAAArE,KAAK4B,QAMzCxpB,YAAYtQ,EAAO0hE,GACtB,IAAK,IAAIp8E,EAAI,EAAGA,EAAIo8E,EAAKl4E,OAAQlE,IAAK,CAClC,MAAM4Y,EAACA,EAACC,EAAEA,GAAKujE,EAAKp8E,GAEpB,GADa0a,EAAMyL,SAASiL,QAAQxY,EAAGC,GAC9BwlJ,UAAU,eAAgB,CACd3jJ,EAAM4V,cACCxjB,OAAOya,GAAKA,EAAE6pN,OAAOx4N,EAAGC,IACzC7L,QAAQ4jB,IACY,WAAnBA,EAAKztB,WACiB,gBAAlBytB,EAAKq7F,UACLvxG,EAAMmW,cAAcD,EAAMhY,EAAGC,OAW9CmS,YAAYtQ,EAAO8U,GACtB,MAAMxX,EAAM0C,EAAMyL,SACZkrN,EAAahxO,GAAKA,EAAEg4F,cAAgBh4F,EAAEs4F,UACtCq4F,EAAah5K,EAAI+sF,SAASssI,GAC1B5uO,EAAOuuL,EAAW,GAClBsgD,EAAmBv6J,EAAA7pD,SAASkH,UAAUpc,EAAKvV,EAAM4uO,GAEjDE,EAAWvgD,EAAW9sL,OACtBstO,EAAYF,EAAiBptO,OAEnC,GAAIstO,IAAcD,EAAU,CACxB,MAAM1yM,EAAO0yM,EAAWC,EACxB,GAAI3yM,EAAOgtM,EAAgB,CACvB,GAAIr8M,EAAKk+M,eAAgB,CACrBhzN,EAAMs+B,oBACN,MAAMhyC,UAAc6kO,WAAwBhtM,IAC5ClU,EAAApmB,QAAGK,IAAI,mBAAoB,cACvB,qCAAuCoC,GAE/C,OAAO,GAIf,OAAO,GA1rBflH,EAAAy/H,mBA+rBAA,EAAiB4tG,WAAa,CAC1BsE,OAAQ,CACJ94K,UAAW,CAAC,EAAG,GACfC,WAAY,CAAC,EAAG,GAChBC,eAAgB,CAAC,EAAG,IACpBC,cAAe,IAEnB44K,QAAS,CACL/4K,UAAW,CAAC,EAAG,GACfC,WAAY,CAAC,EAAG,GAChB6C,kBAAmB,KAG3B,MAAM0xK,EAAa5tG,EAAiB4tG,WAG9BW,EAAiB,IACZ1iN,EAAIjL,aAAa,CAAC,UAAW,WAGxC,SAASmwN,EAAY51N,EAAckoK,EAAIC,GACnC,MAAM7qK,EAAM0C,EAAMyL,UACXoqN,EAAKC,GAAO5tD,EAAGpmH,aACfi0K,EAAKC,GAAO7tD,EAAGrmH,YAEtB,OADawwB,EAAAzX,KAAKmjB,iCAAiC1gF,EAAKu4N,EAAKC,EAAKC,EAAKC,GAC3DxsO,oVC7xBhB,MAAAymB,EAAAC,EAAAhrB,EAAA,IACAi7F,EAAAj7F,EAAA,IAEAk7F,EAAAl7F,EAAA,IAEAo7F,EAAAp7F,EAAA,IACA+7J,EAAA/7J,EAAA,IACAotF,EAAAptF,EAAA,IACAm3E,EAAAn3E,EAAA,GACAogB,EAAApgB,EAAA,GACAq3C,EAAAr3C,EAAA,GACAw5B,EAAArC,EAAAn3B,EAAA,IAKMwrB,EAAMpL,EAAAC,OAAOC,SAEbmf,EAAgBjG,EAAQiG,cAgW9B,SAASsyM,EAAU/3N,EAAMC,EAAM+vC,EAAS,GACpC,MAAMj7B,EAAO9kB,KAAK4B,MAAMmO,EAAO,GACzBmW,EAAOlmB,KAAK4B,MAAMoO,EAAO,GAGzBqX,EAAOtX,EAAO,EAAIgwC,EAClBz4B,EAAOtX,EAAO,EAAI+vC,EA+BxB,MAlBe,CACXv1C,EAAG,CAACuE,EAAG+V,EAAM9V,EAAG,EAAG01M,WAAY,CAACh6M,EAAG,EAAGC,EAAG,EAAGF,EAAG,EAAGI,GAAI,EAAGE,GAAI,GACzDk7M,YAbiB,CAACl3M,EAAGC,EAAGo2M,KACxBp2M,IAAMsY,IACN89L,EAAMV,WAAa,MAavBj6M,EAAG,CAACsE,EAAG+V,EAAM9V,EAAGsY,EAAMo9L,WAAY,CAACh6M,EAAG,EAAGC,EAAG,EAAGH,EAAG,EAAGI,GAAI,EAAGE,GAAI,GAC5Dm7M,YAXiB,CAACl3M,EAAGC,EAAGo2M,KAClB,IAANp2M,IACAo2M,EAAMV,WAAa,MAWvBh6M,EAAG,CAACqE,EAAGsY,EAAMrY,EAAGkX,EAAMw+L,WAAY,CAACl6M,EAAG,EAAGC,EAAG,EAAGK,GAAI,EAAGH,EAAG,EAAGI,GAAI,IAChEJ,EAAG,CAACoE,EAAG,EAAGC,EAAGkX,EAAMw+L,WAAY,CAACl6M,EAAG,EAAGC,EAAG,EAAGG,GAAI,EAAGF,EAAG,EAAGG,GAAI,IAC7DD,GAAI,CAACmE,EAAGsY,EAAMrY,EAAG,EAAG01M,WAAY,CAAC55M,GAAI,EAAGH,EAAG,GAAII,GAAI,EAAGN,EAAG,KACzDK,GAAI,CAACiE,EAAG,EAAGC,EAAG,EAAG01M,WAAY,CAAC95M,GAAI,EAAGF,EAAG,GAAIG,GAAI,EAAGJ,EAAG,KACtDI,GAAI,CAACkE,EAAGsY,EAAMrY,EAAGsY,EAAMo9L,WAAY,CAAC35M,GAAI,EAAGJ,EAAG,GAAIG,GAAI,EAAGN,EAAG,KAC5DO,GAAI,CAACgE,EAAG,EAAGC,EAAGsY,EAAMo9L,WAAY,CAAC75M,GAAI,EAAGH,EAAG,GAAIE,GAAI,EAAGJ,EAAG,KACzDu9N,EAAG,CACCh5N,EAAG+V,EAAM9V,EAAGkX,EACZw+L,WAAY,CAACl6M,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,KAc1E,SAASi9N,EAAkBC,GACvB,MAAMC,EAAaD,EAAO,GACpB1vD,EAAgB,CAClBnyJ,OAAQ8hN,EAAWn5N,EAAGsX,OAAQ6hN,EAAWl5N,EACzC01M,WAAYwjB,EAAWxjB,YAErBL,EAAY,GAClB,IAAK,IAAIluN,EAAI,EAAGA,EAAI8xO,EAAO5tO,OAAQlE,IAC/BkuN,EAAU3lN,KAAKupO,EAAO9xO,IAG1B,OADAoiL,EAAK8rC,UAAYA,EACV9rC,EA/XXtiL,EAAAu/H,cAAA,cAAmCs8B,EAAArkC,eACxBtsG,oBACH,MAAO,CACH6zG,YAAa,OACb1jH,UAAW,EAAGE,SAAU,IACxB22N,aAAa,GAIrBhnN,cACI6O,QACAl3B,KAAK40H,qBAAsB,EAIxBvsG,OAAOpR,EAAcC,EAAc2V,GAClC7E,EAAApmB,QAAG6D,cAAc,CAACwR,EAAMC,KACxB8Q,EAAApmB,QAAGK,IAAI,gBAAiB,4CACegV,aAAgBC,KAE3D,MAAMa,EAAQ/X,KAAKyqO,aAAaxzN,EAAMC,EAAM2V,GAU5C,OARA7sB,KAAK2qO,mBAAmB5yN,GAExB/X,KAAKsvO,oBAAoBv3N,GAEzB/X,KAAKuvO,eAAex3N,EAAO8U,GAE3BA,EAAKumE,iBAAkB,EACvBpzF,KAAKq6J,cAActiJ,EAAO8U,GACnB9U,EAIJsQ,aAAapR,EAAMC,EAAM2V,GAC5B,MAAMq4M,EAAmBllO,KAAKwvO,kBAAkBv4N,EAAMC,EAAM2V,GACtD6rE,EAAS,IAAIR,EAAA/M,aACbpzE,EAAQ,IAAIogF,EAAAzjD,MAClBgkD,EAAO7J,OAAO,OAAQ53E,EAAMC,GAE5B,MAAMy6E,EAAS+G,EAAOW,WAAWpiF,EAAMC,EAAMguN,GAM7C,OALAntN,EAAM6gF,OAAOjH,EAAOt8E,KACpBrV,KAAKy5F,eAAe1hF,EAAO45E,EAAOX,QAC9Bk0I,EAAQmK,cACRt3N,EAAMksF,YAAYorI,aAAc,GAE7Bt3N,EAGJsQ,eAAetQ,EAAci5E,GAChC,MAAM15C,EAAS05C,EAAOy9H,aAEtBn3K,EAAOo3K,YAAc1mM,EAAApmB,QAAGijB,cAAcyyB,EAAOo3K,aAC7C32M,EAAM4hF,UAAUriD,GAKbjvB,kBAAkBpR,EAAMC,EAAM2V,GACjC,IAAIqvG,YAACA,GAAervG,EAChB4yJ,EAAgB,GACpB,MAAM0vD,EAASH,EAAU/3N,EAAMC,GAG/B,OADAglH,EAAcA,EAAYp/F,cAEtB,IAAK,OAAQ2iJ,EAAOtiL,EAAAsyO,OAAOC,YAAYz4N,EAAMC,EAAM,EAAG,GAAI,MAC1D,IAAK,SAAUuoK,EAAOtiL,EAAAsyO,OAAOC,YAAYz4N,EAAMC,EAAM,EAAG,GAAI,MAC5D,IAAK,OAAQ,CACT,MAAMy4N,EAAaxyO,EAAAsyO,OAAOG,oBAAoB34N,EAAMC,EAAM,CAAC,MAErD24N,EAAa,CADDpnN,EAAIjL,aAAamyN,GACJR,EAAOF,GACtCxvD,EAAOtiL,EAAAsyO,OAAOP,kBAAkBW,GAChC,MAEJ,IAAK,SAAUpwD,EAAOtiL,EAAAsyO,OAAOC,YAAYz4N,EAAMC,EAAM,EAAG,GAAI,MAC5D,QAASuoK,EAAOtiL,EAAAsyO,OAAOC,YAAYz4N,EAAMC,GAG7C,IAAIm4N,EAAc5mN,EAAI9C,cAAgB,GAStC,OARyB,IAArBkH,EAAKwiN,cACLA,GAAc,IAEdA,GAAexiN,EAAKwiN,eACpB5vD,EAAKjzF,UAAYl4C,EAAArE,KAAKI,MACtBovI,EAAK4vD,aAAc,GAGhB5vD,EAGJp3J,mBAAmBtQ,GACtB,MAAMu/B,EAAsBv/B,EAAMksF,aAC5ByqH,YAACA,GAAep3K,EACtB,IAAIitD,EAAa,KACbF,EAAW,KAEXqqH,EAAYntN,OAAS,GACpBgjG,EAAYF,GAAY57E,EAAIogM,eAAe6F,EAAa,IAGzDnqH,EAAamqH,EAAY,GAEzBrqH,EAAWrkG,KAAK8vO,mBAAmB/3N,EAAOwsF,IAG9CvkG,KAAKguO,oBAAoBj2N,EAAOwsF,EAAYF,GAE5C/sD,EAAOitD,WAAaA,EAChBF,IAAW/sD,EAAO+sD,SAAWA,GAGjC,MAAMjpC,EAASszJ,EAAY5lM,QAC3BwuB,EAAO8jB,OAAS,GAChBA,EAAO1uC,OAAO0uC,EAAOr7C,QAAQwkF,GAAa,GAC1CnpC,EAAO1uC,OAAO0uC,EAAOr7C,QAAQskF,GAAW,GACxCjpC,EAAO/wD,QAAQ8qD,IACX,MAAOrd,EAAIC,GAAMod,EACX46K,EAAc,IAAIrzM,EAAc,KACtCqzM,EAAYnkJ,OAAO,aACnB7zE,EAAMoW,WAAW4hN,EAAaj4L,EAAIC,GAClCT,EAAO8jB,OAAOx1D,KAAKuvD,KAKpB9sC,oBAAoBtQ,GACnBA,EAAMksF,YAAYorI,aAClBrvO,KAAKgwO,sBAAsBj4N,GAI5BsQ,mBAAmBtQ,EAAcwsF,GACpC,MAAMlvF,EAAM0C,EAAMyL,SACZysN,EAAcjwO,KAAKkwO,qBAAqBn4N,GAC9C,OAAO/X,KAAKmwO,kBAAkB96N,EAAKkvF,EAAY0rI,GAG5C5nN,qBAAqBtQ,GACxB,MACMq4N,EADMr4N,EAAMyL,SACO4+E,SAAS1kG,IAC7BA,EAAE6C,cAAc8vO,UAEfJ,EAA2B,GAIjC,OAHAG,EAAa/lO,QAAQvK,IACjBmwO,EAAYnwO,EAAK+xB,YAAc/xB,IAE5BmwO,EAGJ5nN,sBAAsBtQ,GACzB,MAAMu/B,EAASv/B,EAAMksF,YACf5uF,EAAM0C,EAAMyL,SAClB,IAAI6gF,SAACA,GAAY/sD,EACjB,MAAMitD,WAACA,GAAcjtD,EAEf24L,EAAcjwO,KAAKkwO,qBAAqBn4N,GAEzCssF,IACDA,EAAWrkG,KAAKmwO,kBAAkB96N,EAAKkvF,EAAY0rI,IAGnD1rI,GAAcF,GACDrkG,KAAK6gL,WAAWxrK,EAAKkvF,EAAYF,GACzCh6F,QAAQihB,WACF2kN,EAAY3kN,EAAG,GAAK,IAAMA,EAAG,MAK5C,MAAMglN,EAAa,CAAC/rI,EAAYF,GAC5B/sD,EAAO8jB,QACP9jB,EAAO8jB,OAAO/wD,QAAQkmO,IAClB,MAAMC,EAAa/nN,EAAIjL,aAAa8yN,GACvBtwO,KAAK6gL,WAAWxrK,EAAKk7N,EAAUC,GACvCnmO,QAAQihB,WACF2kN,EAAY3kN,EAAG,GAAK,IAAMA,EAAG,MAExCglN,EAAW1qO,KAAK2qO,KAKxB,MAAME,EAAYhoN,EAAIM,cAAc,EAAG,IACvC,IAAK,IAAI1rB,EAAI,EAAGA,EAAIozO,EAAWpzO,IAAK,CAChC,MAAMkzO,EAAWvwO,KAAK0wO,eAAer7N,EAAKkvF,EAAY0rI,GAEtD,GAAIM,EAAU,CACV,MAAMC,EAAa/nN,EAAIjL,aAAa8yN,GACvBtwO,KAAK6gL,WAAWxrK,EAAKk7N,EAAUC,GACvCnmO,QAAQihB,WACF2kN,EAAY3kN,EAAG,GAAK,IAAMA,EAAG,MAExCglN,EAAW1qO,KAAK2qO,KAOrBloN,WAAWhT,EAAKkvF,EAAYF,GAC/B,MAGOF,EAAIC,GAAMG,GACVzsD,EAAIC,GAAMssD,EACX5qB,EAAO4Q,EAAAzX,KAAK2iB,gBAAgB4O,EAAIC,EAAItsD,EAAIC,EAL/B,CAAC9hC,EAAGC,IACfb,EAAIwY,MAAM5X,EAAGC,KAAOb,EAAI65E,cAAcj5E,EAAGC,GAAG1V,UAAUivB,MAAM,SAM1DhnB,EAAS,GAef,OAbAgxE,EAAKpvE,QAAQihB,IACT,MAAMrV,EAACA,EAACC,EAAEA,GAAKoV,EACD8oD,EAAA7pD,SAASukM,eAAe74M,EAAGC,EAAG,GAAG,GACzC7L,QAAQuxL,IACV,MAAOvyI,EAAIC,GAAMsyI,EAEoB,UADxBvmL,EAAIoZ,QAAQ46B,EAAIC,GACpB/oD,cAAcC,YACnB6U,EAAIugC,cAAcyT,EAAIC,EAAIhV,EAAArE,KAAKwB,YAC/BhpC,EAAO7C,KAAK,CAACyjD,EAAIC,SAKtB7gD,EAGJ4f,kBAAkBhT,EAAKkvF,EAAY0rI,GACtC,MAAMU,EAAS,CAAC16N,EAAGC,IACfb,EAAIwY,MAAM5X,EAAGC,KAAOb,EAAI65E,cAAcj5E,EAAGC,GAAG1V,UAAUivB,MAAM,SAEzD00E,EAAIC,GAAMG,EACjB,IAAIF,EAAW,KAEf,MAAM/uC,EAAUjgD,EAAI4B,KAAO5B,EAAI6B,KAAO7B,EAAI6B,KAAO7B,EAAI4B,KACrD,IAAI25N,EAAW,EACX//I,EAAW,GAEf,MAAMl6C,EAAoB54C,OAAOutC,OAAO2kM,GACxC,IAAIY,EAAW,KAEf,KAAOD,EAAWt7K,GAAS,CACvB,MAAMw7K,EAAUroN,EAAIjL,aAAam5B,IAC1BmB,EAAIC,GAAM+4L,EAAQl1N,QAIzB,GAHAyoF,EAAW,CAACvsD,EAAIC,GAEhB64L,GADAC,EAAWxmJ,EAAAzX,KAAK2iB,gBAAgBz9C,EAAIC,EAAIosD,EAAIC,EAAIusI,IAC5BpvO,OACH,IAAbsvF,EAAiB,QACnBA,EAWN,OAPIwT,GAAYwsI,GACZA,EAASxmO,QAAQihB,IACb,MAAM1sB,EAAM0sB,EAAGrV,EAAI,IAAMqV,EAAGpV,SACrB+5N,EAAYrxO,KAIpBylG,EAGJh8E,eAAehT,EAAKkvF,EAAY0rI,GACnC,MAGO9rI,EAAIC,GAAMG,EACX5tD,EAAoB54C,OAAOutC,OAAO2kM,GAElCa,EAAUroN,EAAIjL,aAAam5B,IAC1BmB,EAAIC,GAAM+4L,EAAQl1N,QACnBu5C,EAAQ,CAACrd,EAAIC,GACb84L,EAAWxmJ,EAAAzX,KAAK2iB,gBAAgBz9C,EAAIC,EAAIosD,EAAIC,EATnC,CAACnuF,EAAGC,IACfb,EAAIwY,MAAM5X,EAAGC,KAAOb,EAAI65E,cAAcj5E,EAAGC,GAAG1V,UAAUivB,MAAM,SAkBhE,OAPI0lC,GAAS07K,GACTA,EAASxmO,QAAQihB,IACb,MAAM1sB,EAAM0sB,EAAGrV,EAAI,IAAMqV,EAAGpV,SACrB+5N,EAAYrxO,KAIpBu2D,EAGJ9sC,eAAetQ,EAAO8U,GACzB,MAAMqvG,YAACA,GAAervG,EACF,SAAhBqvG,GACAl8H,KAAK+wO,aAAah5N,EAAO8U,GAG7B7sB,KAAKgxO,eAAej5N,EAAO8U,GAGxBxE,aAAatQ,EAAO8U,GACvB,MAAMrU,UAACA,EAASE,SAAEA,GAAYmU,EACxBw3E,EAAWtsF,EAAMksF,YAAYI,SACnC,GAAIA,EAAU,CACV,MAAM4sI,EAAW,IAAI54I,EAAAyB,gBAAgB,IACjC/hF,EAAMksF,YAAYorI,aAClB4B,EAASr1E,aAAa3xJ,GAASA,EAAMqvE,QAEzC23J,EAAS3wH,iBAAiBvoG,EAAOssF,EAAU7rF,EAAY,GACvDy4N,EAAS9wH,YAAYpoG,EAAOssF,EAAU3rF,OAErC,CACD,MAAMkG,EAAOC,KAAKC,UAAU/G,EAAMksF,aAClCj8E,EAAApmB,QAAGK,IAAI,gBAAiB,eACpB,0BAA4B2c,IAKjCyJ,eAAetQ,EAAO8U,GACzB,MAAMyqB,EAASv/B,EAAMksF,aACf7oC,OAACA,GAAU9jB,EACX25L,EAAW,IAAI54I,EAAAyB,gBAAgB,IACrC1+B,EAAO/wD,QAAQ8qD,IACX87K,EAASC,cAAcn5N,EAAOo9C,EAAOtoC,OAKpC1vB,EAAAsyO,OAAc,GA0C3BtyO,EAAAsyO,OAAOT,UAAYA,EAOnB7xO,EAAAsyO,OAAOG,oBALP,SAA6B34N,EAAMC,EAAMmuK,GACrC,MAAM8pD,EAASH,EAAU/3N,EAAMC,GAE/B,OADAmuK,EAASh7K,QAAQzL,WAAeuwO,EAAOvwO,KAChCb,OAAOutC,OAAO6jM,IAiBzBhyO,EAAAsyO,OAAOP,kBAAoBA,EAe3B/xO,EAAAsyO,OAAOC,YAZP,SAAqBz4N,EAAMC,EAAMW,EAAM,EAAGC,EAAM,GAC5C,MAAMq3N,EAASH,EAAU/3N,EAAMC,GACzBi6N,EAAcpzO,OAAOutC,OAAO6jM,GAE5BiC,EAAU3oN,EAAIM,cAAclR,EAAKC,GACjCu5N,EAAa,GACnB,IAAK,IAAIh0O,EAAI,EAAGA,EAAI+zO,EAAS/zO,IAAK,CAC9B,MAAMi0O,EAAY7oN,EAAIjL,aAAa2zN,GACnCE,EAAWzrO,KAAK0rO,GAEpB,OAAOpC,EAAkBmC,IAsB7Bl0O,EAAAsyO,OAAO8B,iBAjBP,SAA0Bt6N,EAAMC,EAAMi4N,GAelC,OAdKA,IACDA,EAASH,EAAU/3N,EAAMC,IAEP,CAClBD,OAAMC,OAEN00M,WAAYujB,EAAOn9N,GAAG45M,WACtBL,UAAW,CACP4jB,EAAOl9N,GACPk9N,EAAOr9N,GACPq9N,EAAOp9N,IAEXub,OAAQ6hN,EAAOn9N,GAAGiE,EAAGsX,OAAQ4hN,EAAOn9N,GAAGkE,IA0B/C/Y,EAAAsyO,OAAO+B,cAnBP,SAAuBv6N,EAAMC,EAAMi4N,GAiB/B,OAhBKA,IACDA,EAASH,EAAU/3N,EAAMC,IAEV,CACfD,KAAM,IAAKC,KAAM,IACjBo0M,iBAAkB,IAElBh+L,OAAQ6hN,EAAOz9N,EAAEuE,EAAGsX,OAAQ4hN,EAAOz9N,EAAEwE,EACrC01M,WAAYujB,EAAOz9N,EAAEk6M,WAErBL,UAAW,CACP4jB,EAAOx9N,EACPw9N,EAAOv9N,EACPu9N,EAAOt9N,oFCrenB,MAAAmnJ,EAAA/7J,EAAA,IACAi7F,EAAAj7F,EAAA,IACAk7F,EAAAl7F,EAAA,IAeAE,EAAAo/H,eAAA,cAAoCy8B,EAAArkC,eAEzBtsG,oBACH,MAAO,CACH+qE,iBAAiB,EACjBnC,OAAQ,GAAIC,OAAQ,EACpBG,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,UAAW,GACX94E,UAAW,EAAGE,SAAU,IAIhC2P,cACI6O,QACAl3B,KAAK40H,qBAAsB,EAIxBvsG,OAAOpR,EAAMC,EAAM2V,GACtB,OAAO7sB,KAAKu4F,YAAYthF,EAAMC,EAAM2V,GAGjCxE,YACHpR,EAAcC,EAAc2V,GAE5B,MAAM6rE,EAAS,IAAIR,EAAA/M,aACbpzE,EAAQ,IAAIogF,EAAAzjD,MAClBgkD,EAAO7J,OAAO,QAAS53E,EAAMC,GAE7B,MAAMy6E,EAAS+G,EAAOU,eAAeniF,EAAMC,EAAM2V,GAEjD,OADA9U,EAAM6gF,OAAOjH,EAAOt8E,KACb0C,gVCjDf,MAAAiQ,EAAAC,EAAAhrB,EAAA,IACAm7F,EAAAhkE,EAAAn3B,EAAA,KACAogC,EAAApgC,EAAA,GACAogB,EAAApgB,EAAA,GACA+yC,EAAA/yC,EAAA,GACAmgC,EAAAngC,EAAA,IAEMwrB,EAAMpL,EAAAC,OAAOC,SAINpgB,EAAA2/H,gBAAkB,SAASiD,GACpC//H,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,mBAC9Bz4F,KAAKyxO,UAAY1xG,EAGjB//H,KAAK+8H,qBAAuB,SAAS7jH,EAAQnB,EAAO8U,GAChD7sB,KAAKw4F,OAAOoB,WAAW,uBAAwB/sE,EAC3C,CAAC,YAAa,aAClB,MAAMokM,EAAc,IAAI5zL,EAAAjC,mBAClB+7C,EAAY,IAAMj+D,EAAS,GAAK2T,EAAKrU,UACtCwN,OAAOC,UAAUkxD,IAClBnvD,EAAApmB,QAAGK,IAAI,kBAAmB,iDACIiX,YAAiB2T,EAAKrU,aAExDy4M,EAAY31L,OAAO67C,GACnB85I,EAAYzuI,QAAQ,CAACu9C,SAAU//H,KAAKyxO,YAEpC,MAAMlsN,EAASxN,EAAM1B,YACjBkP,GAAUA,EAAO7jB,SACjBuvN,EAAYygB,QAAQ,WAAYnsN,EAAO7jB,WAG3C,MAAM41C,EAASv/B,EAAMksF,YACrB,GAAI3sD,GAAUA,EAAO+sD,SAAU,CAC3B,MAAOvsD,EAAIC,GAAMT,EAAO+sD,SACxBtsF,EAAMoW,WAAW8iM,EAAan5K,EAAIC,QAGlChgC,EAAMoW,WAAW8iM,GAGrB,MAAM0gB,EAAY3xO,KAAK4xO,aAAa14N,EAAQnB,EAAO8U,GAEnD,GAAI8kN,EACA3xO,KAAK6xO,WAAWF,EAAWz4N,EAAQnB,EAAO8U,OAEzC,CACD,IAAIxoB,qCAAyC6U,IAC7C7U,qBAAyB0T,EAAM1B,cAC/B2R,EAAApmB,QAAGuC,MAAM,GAAIE,KAMrBrE,KAAK4xO,aAAe,EAAC14N,EAAQnB,EAAO8U,KAChC7sB,KAAKw4F,OAAOoB,WAAW,eAAgB/sE,EACnC,CAAC,YAAa,aAClB,MAAMoC,EAAS+gB,EAAAvS,YAAYmO,YACrBkmM,EAAajlN,EAAKrU,UAAY,EAC9Bm5N,EAAY1iN,EAAOsc,kBACrB,CAAC5sB,KAAM1U,GACHA,EAAM40B,QAAUizM,GAAc7nO,EAAM40B,QAAUhS,EAAKrU,YAG3D,GAAIm5N,EAAW,CACX55N,EAAM+hM,mBAAmB63B,GACzB,MAAMI,EAA6B,EAAhBllN,EAAKnU,SAClBs5N,EAAY/iN,EAAOyc,iBACrB,CAAC/sB,KAAM7X,GAAQA,EAAKxI,OAASyzO,IAEjC,GAAIC,EACAL,EAAUlqO,WAAWumB,QAAQgkN,OAE5B,CACD,MAAM3tO,YAAgB0tO,IACtB/pN,EAAApmB,QAAGK,IAAI,kBAAmB,eACtB,gCAAkCoC,IAI9C,OAAOstO,IAIX3xO,KAAK6xO,WAAa,EAACphB,EAAMv3M,EAAQnB,EAAO8U,KACpC,MAAMoC,EAAS+gB,EAAAvS,YAAYmO,YACrBqmM,EAAWxhB,EAAKjwN,UAChB0xO,EAAUzpN,EAAI9C,cAAgB,GACpC,IAAIwsN,EAAaj5N,EAAS,EACtBk5N,EAAevlN,EAAKrU,UACpB05N,IACAC,GAAc,EACdC,GAAgB,GAEpB,MAAMh5N,EAAOlS,KAAK4B,MAAM5B,KAAKykD,KAAKwmL,IAAe,EAC3C/vJ,EAAQhlD,EAAAyK,MAAMk8E,wBAAwB0sG,EAAMr3M,GAClDqP,EAAIie,QAAQ07C,GAEZ,MAAMiwJ,EAAapoO,GACfA,EAAM40B,QAAUuzM,GAAgBnoO,EAAMlI,OAASkwO,EAGnD,KAAO7vJ,EAAM7gF,OAAS,GAAK4wO,EAAa,GAAG,CACvC,MAAMzgN,EAAW0wD,EAAMx+B,QACrBuuL,EACF,MAAMl4F,EAAShrH,EAAOsc,kBAAkB,CAAC5sB,KAAM0zN,IAC/C,GAAIp4F,EAAQ,CACR,MAAOhkI,EAAGC,GAAK,CAACwb,EAAS/V,OAAQ+V,EAAS1V,QAC1CjE,EAAMgW,SAASksH,EAAQhkI,EAAGC,2KC/G1C,MAAA8R,EAAAC,EAAAhrB,EAAA,IAKAE,EAAA0zN,aAAA,MAYIxoM,YAAYzqB,EAAM23B,GACdv1B,KAAKo3B,MAAQx5B,EACboC,KAAKg7E,YAAc,GAEnBh7E,KAAKsyO,gBAAkB,GACvBtyO,KAAKuyO,YAAc,GACnBvyO,KAAKu1B,KAAOA,EACZv1B,KAAKwyO,SAAU,EACfxyO,KAAK01B,WAAY,EACjB11B,KAAKyyO,iBAAmB,CACpBpqN,CAACL,EAAApmB,QAAGqJ,kBAAmBjL,KAAK0yO,oBAAoB7zO,KAAKmB,OAItDqoB,UACH,OAAOroB,KAAKo3B,MAGT/O,QAAQkN,GACPA,IAASv1B,KAAKu1B,MACVv1B,KAAKu1B,KAAKo9M,WAAW3yO,OACrBA,KAAKu1B,KAAK6X,eAAeptC,MAGjCA,KAAKu1B,KAAOA,EAGTlN,SAAU,OAAOroB,KAAKwyO,QAEtBnqN,kBAAkBtmB,EAAM4c,GAC3B3e,KAAKyyO,iBAAiB1wO,GAAQ4c,EAG3B0J,OAAOyN,EAAS3wB,GACfnF,KAAKyyO,iBAAiBvzO,eAAe42B,IACrC91B,KAAKyyO,iBAAiB38M,GAAS3wB,GAG9BnF,KAAKwyO,SAC2C,IAA7Cz0O,OAAO6qB,KAAK5oB,KAAKsyO,iBAAiB/wO,SAClCvB,KAAKwyO,SAAU,EACfxyO,KAAK4yO,UAMVvqN,UAAUtmB,GACb/B,KAAKu1B,KAAKI,YAAY5zB,EAAM/B,MAGzBqoB,eAAepe,GAClBjK,KAAK6yO,UAAU7qN,EAAApmB,QAAGqJ,kBAClBjL,KAAKsyO,gBAAgBtqN,EAAApmB,QAAGqJ,kBAAoB,CAAChB,EAAM6M,SAIhDuR,SACH,IAAIhkB,gBAAoBrE,KAAKo3B,uBAAuBp3B,KAAKg7E,eACzD32E,GAAO,iCACP2jB,EAAApmB,QAAG0lB,YAAYjjB,GACfrE,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAGkK,kBAAmB,CAAClO,KAAMoC,KAAKo3B,QAInD/O,oBAAoBljB,GACvB,MAAM8E,EAAQ9E,EAAK8E,MACbtG,EAAS3D,KAAKsyO,gBAAgBtqN,EAAApmB,QAAGqJ,kBACvC,GAAItH,EAAQ,CACR,MAAMub,EAAQvb,EAAOoc,QAAQ9V,EAAM6M,SAC/BoI,GAAS,IACTvb,EAAO+oB,OAAOxN,EAAO,GACC,IAAlBvb,EAAOpC,eACAvB,KAAKsyO,gBAAgBtqN,EAAApmB,QAAGqJ,yLCxFnD,MAAA+c,EAAAC,EAAAhrB,EAAA,IAEMwrB,EADNxrB,EAAA,GACYqgB,OAAOC,SAENpgB,EAAA29M,YAAc,SAASxhB,EAAQzsK,GACxC7sB,KAAKs5L,OAASA,EACdt5L,KAAK6sB,KAAO9uB,OAAO4kF,OAAO,GACvB91D,GAGH7sB,KAAKopB,QAAU,CACXxnB,QAAS,CACLkxO,KAAM,GACNC,QAAS,GACTn3H,MAAO,MAKnBz+G,EAAA29M,YAAY77M,UAAU+zO,WAAa,SAAS5pN,GACxCppB,KAAKopB,QAAUA,GAGnBjsB,EAAA29M,YAAY77M,UAAUg0O,UAAY,SAASh4C,EAAO7xK,GAC9CppB,KAAKopB,QAAQ6xK,GAAS7xK,GAG1BjsB,EAAA29M,YAAY77M,UAAU87M,SAAW,WAC7B,OAAO/6M,KAAKkzO,WAGhB/1O,EAAA29M,YAAY77M,UAAUk0O,WAAa,WAC/BnzO,KAAKkzO,UAAY,GACjBlzO,KAAKs5L,OAAOjvL,QAAQ+oO,IAChBpzO,KAAKkzO,UAAUE,GAAU,MAIjCj2O,EAAA29M,YAAY77M,UAAUolD,UAAY,WAC9BrkD,KAAKmzO,aACLnzO,KAAKs5L,OAAOjvL,QAAQ+oO,IAChBpzO,KAAKs5L,OAAOjvL,QAAQgpO,IAChB,IAAKrzO,KAAKszO,SAASF,EAAQC,GAAS,CAChC,MAAMjqN,EAAUppB,KAAKuzO,WAAWH,EAAQC,GAClC51G,EAAch1G,EAAIugB,YAAY5f,GACpCppB,KAAKkzO,UAAUE,GAAQC,GAAU51G,EACjCz9H,KAAKkzO,UAAUG,GAAQD,GAAU31G,QAOjDtgI,EAAA29M,YAAY77M,UAAUs0O,WAAa,SAAStzD,EAAIC,GAE5C,OAAIlgL,KAAKopB,QAAQlqB,eAAe+gL,GACrBjgL,KAAKopB,QAAQ62J,GAEfjgL,KAAKopB,QAAQlqB,eAAeghL,GAC1BlgL,KAAKopB,QAAQ82J,GAEjBlgL,KAAKopB,QAAQxnB,SAGxBzE,EAAA29M,YAAY77M,UAAUq0O,SAAW,SAASrzD,EAAIC,GAC1C,OAAID,IAAOC,KACPlgL,KAAKkzO,UAAUjzD,GAAIC,KACdlgL,KAAKkzO,UAAUhzD,GAAID,IACpBj4J,EAAApmB,QAAGK,IAAI,cAAe,WAClB,0DAED,IAMf9E,EAAA29M,YAAY77M,UAAU0J,SAAW,gLC1EjC,MAAAqf,EAAAC,EAAAhrB,EAAA,IACA++J,EAAA/+J,EAAA,IACA65M,EAAA75M,EAAA,IAGaE,EAAA4xK,SAAgB,GAwE7B5xK,EAAA4xK,SAASU,eAAiB,CAAC+jE,IACvB,IAAIt3G,EAvBe,SAASt+H,GAC5B,OAAQA,GACJ,IAAK,SACL,IAAK,SACL,IAAK,OAAQ,MAAO,OACpB,IAAK,YACL,IAAK,QAAS,MAAO,QACrB,IAAK,QAAS,MAAO,UACrB,QAAS,OAAOA,GAeF61O,CAAeD,GACjC,MAAM7vI,EAxEW,SAAS/lG,GAC1B,OAAQA,GACJ,IAAK,OAAQ,OAAO,EACpB,IAAK,QAAS,OAAO,EACrB,IAAK,UAAW,OAAO,EACvB,IAAK,YAAa,OAAO,EACzB,QAAS,OAAO,GAkEJmhK,CAAa7iC,GACvBnP,EAxCY,SAASnvH,GAC3B,OAAQA,GACJ,IAAK,OAAQ,MAAO,CAChBqM,MAAO,CACLwmJ,GAAI,KAAM3uJ,KAAM,OAChBxD,MAAO,CAAC,SAAU,SAAU,WAGlC,IAAK,QAAS,MAAO,CACjB2L,MAAO,CAACwmJ,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO,WAE3C,QAAS,OAAO,MA6BDo1O,CAAcx3G,IAC1BnD,EAAUC,GAhEI,SAASp7H,GAC9B,MAAM+1O,EAAa,CAAC3rN,EAAApmB,QAAGwV,eAAgB4Q,EAAApmB,QAAGyV,gBAC1C,OAAQzZ,GACJ,IAAK,OAAQ,MAAO,CAAC,GAAI,IACzB,IAAK,SAAU,MAAO,CAAC,IAAK,KAC5B,IAAK,SAAU,MAAO,CAAC,IAAK,IAC5B,IAAK,OAAQ,MAAO,CAAC,IAAK,KAE1B,IAAK,QACL,IAAK,UAAW,MAAO,CAAC,IAAK,IAE7B,IAAK,YAAa,MAAO,CAAC,IAAK,KAE/B,IAAK,QAAS,OAAO+1O,EACrB,IAAK,QAAS,MAAO,CAAC,IAAK,KAC3B,IAAK,YAAa,MAAO,CAAC3rN,EAAApmB,QAAGof,aAAcgH,EAAApmB,QAAGqf,cAE9C,QAAS,OAAO0yN,GA+CSC,CAAiBJ,GAGxCpvO,EAAsB,CACxBxG,KAAM41O,EACNz6G,WAAUC,WAAUkD,YAHxBA,EAAcA,EAAY3mH,cAItBmzF,UAAW,EACXR,OAAQ,CACJ,CAACtqG,KAAM41O,EAAa7vI,UAASw5B,cAAe,KAQpD,OAJIpQ,IACA3oH,EAAI2oH,WAAaA,GAGd3oH,IAOXjH,EAAA4xK,SAAS+C,gBAAkB+hE,KACvB,MACO59N,EAAGC,GArCU,CAAC,GAAI,KAoDzB,MAda,CACTtY,KAAMi2O,EACNhmI,OAJY,EAKZX,KAAM,CACF,CAACtvG,KAAMi2O,EAAclwI,QANb,EAMsBw5B,cAAe,EAAGlnH,IAAGC,MAEvD43F,SAAU,EACVd,OAAQ,CACJ,CAACpvG,KAAM,SAAU+lG,QAAS,EAAG1sF,KAAM,GAAIC,KAAM,KAEjD+kH,cAAe,CACX,CAAC43G,EAAc,SAAU,EAAG,OAUxC,MAYMC,EAAoB,IAAM9rN,EAAApmB,QAAGmyO,KAAKv2N,aAAawK,EAAApmB,QAAGoM,YAGlDgmO,EAAqB,CAAC30G,EAAOxyG,KAC/B,MAAMnU,EAAWmU,EAAKnU,UAAY,IAC5Bu7N,EAAepnN,EAAKmrF,UAAY,SAChCk8H,EAAQrnN,EAAKjvB,KAEnB,GAAc,WAAVs2O,GAAgC,WAAVA,EAAoB,CAC1C,MAAMhyH,EAASl6F,EAAApmB,QAAGmyO,KAAKhrN,cAAc,EAAG,GACxCs2G,EAAMnd,OAASA,EACfmd,EAAMtS,WAAW9pH,KAAO,GACxB,IAAK,IAAI5F,EAAI,EAAGA,EAAI6kH,EAAQ7kH,IAAK,CAC7B,IAAI26G,EAAW87H,IAGM,WAAjBG,GAAmC,IAAN52O,IAC7B26G,EAAWi8H,GAEf,MAAME,EAAa,CACf,CAAC1jF,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAO05G,GAChC,CAACy4C,GAAI,MAAO3uJ,KAAM,QAASxD,MAAOoa,IAEtC2mH,EAAMtS,WAAW9pH,KAAK2C,KAAKuuO,SAI/B90G,EAAMnd,OAAS,GAyBvB/kH,EAAA4xK,SAASC,YAAc,EAAColE,EAAUvnN,KAC9B,IAAI8wG,EAAWq+B,EAAA5e,MAAMqB,oBAAoB,QACvB,SAAd5xH,EAAK9qB,KACL47H,EAAW,OAEN9wG,EAAK+sI,QACVj8B,EAAW,UAEQ,eAAd9wG,EAAK9qB,KACV47H,EAAW,aAEQ,YAAd9wG,EAAK9qB,OACV47H,EAAWq+B,EAAA5e,MAAMiB,kBAErB,MAAMvvC,EA9Ea,CAAC6uB,IACpB,OAAQA,GACJ,IAAK,SACL,IAAK,UAAW,OAAO,EACvB,IAAK,OAAQ,OAAO,EACpB,IAAK,OAAQ,OAAO,EACpB,IAAK,aAAc,OAAO31G,EAAApmB,QAAGmyO,KAAKhrN,cAAc,EAAG,GACnD,IAAK,UAAW,OAAOf,EAAApmB,QAAGmyO,KAAKhrN,cAAc,EAAG,GAChD,QAAS,OAAO,IAsEF41I,CAAehhC,GAC3ByiC,EAnCa,EAACtxD,EAAWjiF,KAC/B,MAAMuzI,EAAW,GACjB,IAAK,IAAI/iK,EAAI,EAAGA,EAAIyxG,EAAWzxG,IAAK,CAChC,MACMgiI,EAAwB,CAC1BzhI,KAFUo+J,EAAA5e,MAAMqB,oBAAoB,WAGpC96C,QAAS,EACTopB,WAAY,IAEN,IAAN1vH,IACAgiI,EAAMlC,cAAgB,GAG1B62G,EAAmB30G,EAAOxyG,GAE1BuzI,EAASx6J,KAAKy5H,GAElB,OAAO+gC,GAkBUi0E,CAAevlI,EAAWjiF,GACrCsnC,EAAU2iJ,EAAA95C,UAAUM,yBAAyB8C,GAC7Ch8J,EAAmB,CACrBxG,KAAMw2O,EACNtlI,YACAb,QAASmyD,GAIb,OADIjsG,IAAU/vD,EAAI63H,cAAgB9nE,GAC3B/vD,gVC5NX,MAAA4jB,EAAAC,EAAAhrB,EAAA,IACAy5H,EAAAz5H,EAAA,IAEA+xL,EAAA/xL,EAAA,IAGAm7F,EAAAhkE,EAAAn3B,EAAA,KAGMkH,EADNlH,EAAA,EACcq3B,CAAI,sBAClBuuE,EAAAzuE,EAAAn3B,EAAA,KAWAE,EAAAs5L,cAAA,MAWIpuK,YAAY8vG,EAAUE,GAClBr4H,KAAKm4H,SAAWA,EAChBn4H,KAAKq4H,UAAYA,EACjBr4H,KAAKyrG,MAAQ,IAAIirB,EAAAwB,UACjBl4H,KAAKw4F,OAAS,IAAIJ,EAAOK,KAAK,iBAC9Bz4F,KAAKg4H,cAAgB,GACrBh4H,KAAKuvG,gBAAiB,EACtBvvG,KAAKs0O,KAAO,EAGhBjsN,YAAYksN,GACR,OAAQA,EAAUxyO,MACd,IAAK,QAAS,OAAO/B,KAAKu5H,YAAYg7G,GACtC,IAAK,UAAW,CACZ,MAAMv5G,EAAO,IAAIhzG,EAAApmB,QAAGszH,QAAQryB,MAE5B,OADAm4B,EAAKxC,YAAYx4H,KAAKm4H,UACf6C,EAAKsE,kBAAkBi1G,GAElC,QAASvsN,EAAApmB,QAAGK,IAAI,gBAAiB,0BACjBsyO,EAAUxyO,wBAE9B,OAAO,KAIXsmB,YAAYksN,GACR,IAAI/6G,EAAQ,KACZ,GAAI+6G,EAAU1nN,KACV7sB,KAAKs0B,IAAI,iCACTklG,EAAQx5H,KAAKw0O,oBAAoBD,OAEhC,CACDvsN,EAAApmB,QAAGK,IAAI,gBAAiB,+BAAgC,SAExDjC,KAAKs0B,IAAI,4CACT,MAAM0mG,EAAO,IAAIg0D,EAAAn3D,aACjBmD,EAAKxC,YAAYx4H,KAAKm4H,UACtBqB,EAAQwB,EAAKzB,YAAYg7G,GAE7B,OAAO/6G,EAKXnxG,oBAAoBosN,GACXA,EAAU5nN,MACX7E,EAAApmB,QAAGK,IAAI,gBAAiB,sBACpB,yDAER,MAAMu3H,EAAQx5H,KAAK00O,oBAAoBD,GAGvCj7G,EAAMC,QAAQg7G,EAAU5nN,MAExB,MAAMwsI,EAAQ7/B,EAAMm7G,WACpB,GAAIt7E,EAAM93J,OAAS,EAAG,CAClB,MAAMqnB,KAAU7qB,OAAO6qB,KAAK6rN,EAAU5nN,QACjC4nN,EAAU5nN,KAAK3tB,eAAe,SAC/B8oB,EAAApmB,QAAGK,IAAI,gBAAiB,2CACCwyO,EAAU5nN,eAAejE,KAO1D,OAHAywI,EAAMhvJ,QAAQ,CAAC0sD,EAAM15D,KACjB05D,EAAK0iE,QAAQg7G,EAAU5nN,KAAKkqC,KAAK15D,MAE9Bm8H,EAGXnxG,UAAUzJ,GACN5e,KAAKyrG,MAAMgtB,UAAU75G,GACrB5e,KAAKg7H,KAAKvC,UAAU75G,KAClB5e,KAAKs0O,KAGXjsN,SAASzJ,GACL5e,KAAKyrG,MAAMitB,SAAS95G,GACpB5e,KAAKg7H,KAAKtC,SAAS95G,KACjB5e,KAAKs0O,KAGXjsN,cAAe,OAAOroB,KAAKyrG,MAAM6tB,WAAWp1G,KAAK,KAEjDmE,oBAAoBosN,GAChB,MAAMz5G,EAAO,IAAIg0D,EAAAn3D,aACjBmD,EAAKxC,YAAYx4H,KAAKm4H,UACtB6C,EAAK3C,UAAYr4H,KAAKq4H,UACtBr4H,KAAKg7H,KAAOA,EAEZh7H,KAAK40O,OAAO,cAAeH,EAAW,CAAC,OAAQ,WAC3CA,EAAUv1O,eAAe,oBACzBc,KAAKuvG,eAAiBklI,EAAUllI,eAChCvvG,KAAKs0B,IAAI,yBAA2Bt0B,KAAKuvG,gBACzCyrB,EAAKzrB,eAAiBvvG,KAAKuvG,gBAE/BvvG,KAAKy4H,UAAUg8G,GACf,MAAMj7G,EAAQ,IAAI32B,EAAMqM,SAASulI,EAAU72O,MAC3C47H,EAAMC,QAAQg7G,GACd,IAAK,IAAIp3O,EAAI,EAAGA,EAAIo3O,EAAUjlI,OAAQnyG,IAAK,CACvC,MAAMw3O,EAAWJ,EAAU19K,KAAK15D,GAC5B8G,EAAM0xB,SACN71B,KAAK80O,UAAU,gBAAiBD,GAEpC,MAAM99K,EAAO/2D,KAAK+0O,oBAAoBF,GAElCA,EAASnpI,cACT1rG,KAAK25H,oBAAoBH,EAAOziE,GAGpCyiE,EAAMI,QAAQ7iE,GACd/2D,KAAK65H,WAAWg7G,EAAU99K,GAI9B,OAFA/2D,KAAK04H,SAAS+7G,GACdz0O,KAAK65H,WAAW46G,EAAWj7G,GACpBA,EAIXnxG,oBAAoBwsN,GAChB70O,KAAK40O,OAAO,sBAAuBC,EAC/B,CAAC,OAAQ,OAAQ,SACrB70O,KAAKy4H,UAAUo8G,GAEf,MAAM/6G,EAAa95H,KAAK+5H,cAAc86G,IAEhCj3O,KAACA,EAAI+sB,KAAEA,EAAIC,KAAEA,EAAI3T,KAAEA,EAAIC,KAAEA,GAAQ29N,EACjC99K,EAAO,IAAI8rC,EAAMsI,KAAKvtG,EAAM+sB,EAAMC,EAAM3T,EAAMC,EAChD4iH,GAqBJ,OApBA/iE,EAAK0iE,QAAQo7G,GACb99K,EAAKkjE,YAAYj6H,KAAKq5H,eAGtBtiE,EAAK40C,YAAckpI,EAASlpI,YAC5B50C,EAAK20C,aAAempI,EAASnpI,aAE7B1rG,KAAKg1O,4BAA4Bj+K,EAAM89K,GAGnC70O,KAAKuvG,gBAELvvG,KAAKg7H,KAAKd,gBAAgBnjE,EAAM89K,GAEhC99K,EAAKojE,uBAGLn6H,KAAKs0B,IAAI,uDAEbt0B,KAAK04H,SAASm8G,GACP99K,EAGX1uC,oBAAoBmxG,EAAOziE,GACvBh5D,OAAO6qB,KAAKmuC,EAAK20C,cAAcrhG,QAAQihB,IACnC,MAAO+uG,EAAMC,GAAQhvG,EAAGzmB,MAAM,MACvBoR,EAAGC,GAAK,CAACC,SAASkkH,EAAM,IAAKlkH,SAASmkH,EAAM,KAC/CvjE,EAAK20C,aAAapgF,IAAOyrC,EAAK40C,YAAY11F,GAAGC,KAC7ClW,KAAKs0B,0CAA0Cre,KAAKC,KACpDlW,KAAKi1O,oBAAoBz7G,EAAOziE,EAAM9gD,EAAGC,MAKrDmS,oBAAoBmxG,EAAOziE,EAAM9gD,EAAGC,GAChC,MAAMukH,EAAYjB,EAAMltB,UACxBtsG,KAAKy4H,UAAUgC,GACf,MAAM/qB,EAAW34C,EAAKu1C,UACtBtsG,KAAKy4H,UAAU/oB,GAGf1vG,KAAKg7H,KAAKd,gBAAgBnjE,EAAM24C,EAAUz5F,EAAGC,GAI7ClW,KAAK04H,SAAShpB,GACd1vG,KAAK04H,SAAS+B,GAKlBpyG,cAAcwsN,GACV70O,KAAK40O,OAAO,gBAAiBC,EAAU,CAAC,kBACtC70O,KAAKs0O,KACP,MAAM1nN,EAAS,GA6Bf,OA5BIioN,EAAShjJ,MACTgjJ,EAAShjJ,MAAMxnF,QAAQ,CAAC+hG,EAASn2F,KAC7B,MAAM24G,EAAW,GACjBxiB,EAAQ/hG,QAAQ,CAACqiD,EAAMx2C,KACnB,GAAI2+N,EAASlpI,YAAY11F,GAAGC,GAAI,CAC5BlW,KAAKs0B,YAAYre,KAAKC,eACtB,MAAM6B,EAAQ/X,KAAKm4H,SAASzrE,EAAK30C,OAC7BA,EACA62G,EAAShpH,KAAKmS,GAGdiQ,EAAApmB,QAAGK,IAAI,gBAAiB,+BACLyqD,EAAK30C,0BAI5B/X,KAAKs0B,0BAA0Bre,KAAKC,KACpC04G,EAAShpH,KAAKoiB,EAAApmB,QAAG4T,oBAGzBoX,EAAOhnB,KAAKgpH,KAIhB5mG,EAAApmB,QAAGK,IAAI,gBAAiB,gBACpB,6CAENjC,KAAKs0O,KACA1nN,EAGXvE,4BAA4B0uC,EAAM89K,GAC9B,MAAMhjJ,EAAQ96B,EAAKm+K,WACnBrjJ,EAAMxnF,QAAQ,CAAC+hG,EAASn2F,KACpBm2F,EAAQ/hG,QAAQ,CAACqiD,EAAMx2C,KACf27E,EAAM57E,GAAGC,KAAO8R,EAAApmB,QAAG6T,kBACnBo8E,EAAM57E,GAAGC,GAAK2+N,EAAShjJ,MAAM57E,GAAGC,QAOhDmS,WAAWwE,EAAM60G,GACR15G,EAAApmB,QAAG6D,cAAc,CAAConB,EAAKhW,MACxB6qH,EAAUhhE,MAAM7zC,EAAKhW,IAEzB7W,KAAKg4H,cAAc0J,EAAU5qH,SAAW4qH,EAI5Cr5G,IAAIhkB,GACA,GAAIF,EAAM0xB,QAAS,CACf,MAAMs4G,EAAM,IAAIt+E,OAAO7vD,KAAKs0O,MAC5BtsN,EAAApmB,QAAGgD,KAAKupI,EAAM,kBAAoB9pI,IAK1CgkB,OAAOiY,EAAUzT,EAAM9mB,GACnB/F,KAAKw4F,OAAOoB,WAAWt5D,EAAUzT,EAAM9mB,GAG3CsiB,UAAUhkB,EAAKD,GACX4jB,EAAApmB,QAAGgD,KAAKP,GACR2jB,EAAApmB,QAAGgD,KAAK7G,OAAO6qB,KAAKxkB,yKCrR5B,MAAA4jB,EAAAC,EAAAhrB,EAAA,IAKMwrB,EAJNxrB,EAAA,GAIYqgB,OAAOC,SAWb43N,EAAiB,CAAC,QAAS,UAC3BC,EAAa,GACbC,EAAkB,GAClBC,EAAc,GAEPn4O,EAAAo4O,aAA6C,CACtDljO,OAAQ,CAACsyE,IAAK,EAAKzI,KAAM,CAAC,EAAG,IAAK0gH,QAAS,GAAI19K,MAAO,GACtD5M,cAAe,CACXqyE,IAAK,EAAKzI,KAAM,EAAE,GAAI,IAAK0gH,QAAS,CAAC,WAAY,YAAa19K,MAAO,GAEzE3M,OAAQ,CACJoyE,IAAK,EAAKzI,KAAM,EAAE,GAAI,GAAI0gH,QAAS,CAAC,WAAY,YAAa,aAC7D19K,MAAO,GAEX1M,cAAe,CAACmyE,IAAK,EAAKzI,KAAM,EAAE,GAAI,IAAK0gH,QAAS,CAAC,YAAa19K,MAAO,GACzEzM,OAAQ,CAACkyE,IAAK,EAAKzI,KAAM,CAAC,EAAG,IAAK0gH,QAAS,GAAI19K,MAAO,GACtDxM,cAAe,CAACiyE,IAAK,EAAKzI,KAAM,CAAC,GAAI,IAAK0gH,QAAS,GAAI19K,MAAO,GAC9DvM,OAAQ,CAACgyE,IAAK,EAAKzI,KAAM,CAAC,GAAI,IAAK0gH,QAAS,GAAI19K,MAAO,GACvDtM,cAAe,CAAC+xE,IAAK,EAAKzI,KAAM,CAAC,GAAI,IAAK0gH,QAAS,CAAC,QAAS19K,MAAO,IAI3D/hB,EAAAq4O,qBAAkD,CAC3D90F,OAAQ,CAAC,UACTC,OAAQ,CAAC,SAAU,iBACnBC,OAAQ,CAAC,gBAAiB,SAAU,iBACpCC,MAAO,CAAC,OACRtD,OAAQ,CAAC,OACTuD,UAAW,CAAC,QAIhB3jJ,EAAAs4O,cAAA,SAA8BC,EAAIC,GAC9B,MAAMtzK,EAAKllE,EAAAo4O,aAAaG,GAAIx2N,MACtB02N,EAAKz4O,EAAAo4O,aAAaI,GAAIz2N,MAC5B,OAAOhY,KAAKiR,IAAIkqD,EAAKuzK,IAOzB,MAAa15C,EAmBT7zK,YAAYkN,GACRv1B,KAAK61O,YAAc7tN,EAAApmB,QAAGwQ,OAAOC,OAC7BrS,KAAK81O,WAAaR,EAClBt1O,KAAK+1O,YAAc54O,EAAAo4O,aAAav1O,KAAK61O,aAAalxJ,IAClD3kF,KAAKg2O,aAAe,QAEpBh2O,KAAKi2O,gBAAiB,EACtBj2O,KAAKk2O,iBAAkB,EACvBl2O,KAAKm2O,eAAgB,EACrBn2O,KAAKo2O,cAAe,EACpBp2O,KAAKu1B,KAAOA,EAITlN,SAASiD,GACZtrB,KAAKq2O,OAAS/qN,EAGXjD,YAAYu5I,GACf5hK,KAAKkhK,UAAYU,EAGdv5I,gBACH,OAAOroB,KAAKi2O,eAGT5tN,eACH,OAAOroB,KAAKm2O,cAGT9tN,cACH,OAAOroB,KAAKo2O,aAGT/tN,iBACH,OAAOroB,KAAKk2O,gBAIT7tN,WACDroB,KAAK81O,WACP91O,KAAKi2O,gBAAiB,EACtBj2O,KAAKm2O,eAAgB,EACrBn2O,KAAKo2O,cAAe,EAEI,IAApBp2O,KAAK81O,aACL91O,KAAK+1O,aAAe,EACpB/1O,KAAK81O,WAAaR,EAClBt1O,KAAKm2O,eAAgB,GAGrBn2O,KAAK+1O,aAAe,IACpB/1O,KAAKs2O,aACLt2O,KAAKi2O,gBAAiB,EACtBj2O,KAAKu2O,kBAINluN,aACH,MAAMmuN,EAAUz4O,OAAO6qB,KAAKzrB,EAAAo4O,cAE5B,IAAI1xL,EADa2yL,EAAQz2N,QAAQ/f,KAAK61O,aACV,EACxBhyL,GAAa2yL,EAAQj1O,SACrBsiD,EAAY,EACZ7jD,KAAKo2O,cAAe,EACpBp2O,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAGgL,iBAAkB,CACrC6pO,WAAYz2O,KAAK61O,YACjBS,WAAYE,EAAQ3yL,MAG5B7jD,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAG+K,mBAAoB,CACvC8pO,WAAYz2O,KAAK61O,YACjBS,WAAYE,EAAQ3yL,KAExB7jD,KAAK61O,YAAcW,EAAQ3yL,GAKxBx7B,aACH,OAAOroB,KAAKg2O,aAIT3tN,gBAEH,GADAroB,KAAKk2O,iBAAkB,EACnBluN,EAAApmB,QAAG8jB,UAAU2vN,GACb,OAAOr1O,KAAKg2O,aAGhB,MAAMU,EAAiB12O,KAAK22O,oBAE5B,IAAI/5C,EAAU58L,KAAKg2O,aACnB,GAAIhuN,EAAApmB,QAAG8jB,UAAU0vN,GAAa,CAC1B,MAAMwB,EAAkBz5O,EAAAo4O,aAAamB,GAAgB95C,QACjDg6C,EAAgBr1O,OAAS,IACzBq7L,EAAUn0K,EAAIjL,aAAao5N,SAI/Bh6C,EAAUn0K,EAAIjL,aAAa23N,GAW/B,OATIv4C,IAAY58L,KAAKg2O,eACjBh2O,KAAKk2O,iBAAkB,GAG3Bl2O,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAG2K,oBAAqB,CACxCsqO,YAAa72O,KAAKg2O,aAClBc,YAAal6C,IAEjB58L,KAAKg2O,aAAep5C,EACb58L,KAAKg2O,aAIT3tN,YACH,OAAOroB,KAAK61O,YAGTxtN,oBACH,IAAKroB,KAAKkhK,UAAY,OAAOlhK,KAAK61O,YAClC,IAAK71O,KAAKq2O,OAAS,OAAOr2O,KAAK61O,YAE/B,MAAMj3O,EAAMoB,KAAKq2O,OAAO,GAAK,IAAMr2O,KAAKq2O,OAAO,GACzCU,EAAY/2O,KAAKkhK,UAAUtiK,GAC3Bo4O,EAAiB75O,EAAAq4O,qBAAqBuB,GAE5C,GAA0B,QAAtBC,EAAe,GAAe,OAAOh3O,KAAK61O,YAG1C,OADcmB,EAAej3N,QAAQ/f,KAAK61O,cAC7B,EAAW71O,KAAK61O,YAEtBmB,EAAe,GAIvB3uN,QAAQkN,GACXv1B,KAAKu1B,KAAOA,EAGTlN,SACH,MAAO,CACH4uN,WAAYj3O,KAAK61O,YACjBqB,YAAal3O,KAAKg2O,aAClBmB,UAAWn3O,KAAK81O,WAChBsB,WAAYp3O,KAAK+1O,YAEjBt5C,cAAez8L,KAAKi2O,eACpB/4C,eAAgBl9L,KAAKk2O,gBACrB15C,aAAcx8L,KAAKm2O,cACnBz5C,YAAa18L,KAAKo2O,aAClBiB,MAAOr3O,KAAKq2O,OACZz0E,SAAU5hK,KAAKkhK,WAIb74I,iBACFroB,KAAKy8L,kBACDz8L,KAAK61O,cAAgB7tN,EAAApmB,QAAGwQ,OAAOE,cAC/B0V,EAAApmB,QAAGslB,QAAQ,kCAENlnB,KAAK61O,cAAgB7tN,EAAApmB,QAAGwQ,OAAOG,QACpCyV,EAAApmB,QAAGslB,QAAQ,qCArL3B/pB,EAAA++L,gBA4LAA,EAAcp9E,SAAW,SAASlgG,GAC9B,MAAMq9K,EAAY,IAAIC,EAWtB,OAVAD,EAAU45C,YAAcj3N,EAAKq4N,WAC7Bh7C,EAAU+5C,aAAep3N,EAAKs4N,YAC9Bj7C,EAAU65C,WAAal3N,EAAKu4N,UAC5Bl7C,EAAU85C,YAAcn3N,EAAKw4N,WAC7Bn7C,EAAUg6C,eAAiBr3N,EAAK69K,cAChCR,EAAUi6C,gBAAkBt3N,EAAKs+K,eACjCjB,EAAUk6C,cAAgBv3N,EAAK49K,aAC/BP,EAAUm6C,aAAex3N,EAAK89K,YAC9BT,EAAUo6C,OAASz3N,EAAKy4N,MACxBp7C,EAAU/6B,UAAYtiJ,EAAKgjJ,SACpBq6B,sKCrQX,MAAAj0K,EAAAC,EAAAhrB,EAAA,IAGMq6O,EAAc,CAChBxkO,KAAM,CAAC6xE,IAAK,EAAKtgB,YAAa,GAC9BtxD,QAAS,CAAC4xE,IAAK,GACf3xE,KAAM,CAAC2xE,IAAK,GACZ1xE,UAAW,CAAC0xE,IAAK,GACjBzxE,QAAS,CAACyxE,IAAK,EAAKtgB,YAAa,GACjClxD,KAAM,CAACwxE,IAAK,EAAKtgB,YAAa,GAC9BjxD,MAAO,CAACuxE,IAAK,EAAKtgB,YAAa,IAGnC,MAAa23H,EAWT3zK,YAAYkN,GACRv1B,KAAKu3O,WAAavvN,EAAApmB,QAAGiR,IAAIE,QACzB/S,KAAKw3O,eAAiBF,EAAYt3O,KAAKu3O,YAAY5yJ,IACnD3kF,KAAKy3O,YAAc,IACnBz3O,KAAK03O,aAAc,EACnB13O,KAAK23O,eAAgB,EACrB33O,KAAKu1B,KAAOA,EAGTlN,cAAcs1E,GACjB39F,KAAKy3O,YAAc95I,EAGhBt1E,SACHroB,KAAK03O,aAAc,EACnB13O,KAAK23O,eAAgB,EACrB33O,KAAKw3O,gBAAkBx3O,KAAKy3O,YACxBz3O,KAAKw3O,gBAAkB,IACvBx3O,KAAK43O,YACL53O,KAAK23O,eAAgB,GAKtBtvN,aACH,OAAOroB,KAAK03O,YAITrvN,eACH,OAAOroB,KAAK23O,cAGTtvN,eACH,OAAOroB,KAAKu3O,WAGTlvN,YACH,MAAMwvN,EAAS95O,OAAO6qB,KAAK0uN,GAE3B,IAAIzzL,EADag0L,EAAO93N,QAAQ/f,KAAKu3O,YACT,EACxB1zL,GAAag0L,EAAOt2O,SACpBsiD,EAAY,EACZ7jD,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAG6K,gBAAiB,CACpCqrO,UAAW93O,KAAKu3O,WAChBK,UAAWC,EAAOh0L,KAEtB7jD,KAAK03O,aAAc,GAEvB13O,KAAKu1B,KAAKzN,UAAUE,EAAApmB,QAAG4K,sBAAuB,CAC1CsrO,UAAW93O,KAAKu3O,WAChBK,UAAWC,EAAOh0L,KAEtB7jD,KAAKu3O,WAAaM,EAAOh0L,GACzB7jD,KAAKw3O,eAAiBF,EAAYt3O,KAAKu3O,YAAY5yJ,IAGhDt8D,SACH,MAAO,CACH0vN,UAAW/3O,KAAKu3O,WAChBS,cAAeh4O,KAAKw3O,eACpBS,WAAYj4O,KAAKy3O,YACjBl7C,WAAYv8L,KAAK03O,YACjBr7C,aAAcr8L,KAAK23O,eAIpBtvN,QAAQkN,GACXv1B,KAAKu1B,KAAOA,GA/EpBp4B,EAAA6+L,aAoFAA,EAAWl9E,SAAW,SAASlgG,GAC3B,MAAMm9K,EAAS,IAAIC,EAMnB,OALAD,EAAOw7C,WAAa34N,EAAKm5N,UACzBh8C,EAAOy7C,eAAiB54N,EAAKs5N,aAC7Bn8C,EAAO07C,YAAc74N,EAAKq5N,WAC1Bl8C,EAAO27C,YAAc94N,EAAK29K,WAC1BR,EAAO47C,cAAgB/4N,EAAKy9K,aACrBN,+UCxGX,MAAA/zK,EAAAC,EAAAhrB,EAAA,IACAs5B,EAAAt5B,EAAA,IACAk7O,EAAAl7O,EAAA,KACAo3B,EAAAp3B,EAAA,GACAm7O,EAAAn7O,EAAA,KACAo7O,EAAAp7O,EAAA,KACA63G,EAAA73G,EAAA,IACA+xL,EAAA/xL,EAAA,IACAogB,EAAApgB,EAAA,GACAm3E,EAAAn3E,EAAA,GACAiyL,EAAAjyL,EAAA,IACAktB,EAAAiK,EAAAn3B,EAAA,IACA4lG,EAAAzuE,EAAAn3B,EAAA,KACAqgC,EAAArgC,EAAA,IAIM8pB,EAAOsN,EAAArN,UAAUC,UAEV9pB,EAAAm7O,KAAY,GAcZn7O,EAAAi6M,SAAW,WACpBp3M,KAAKu4O,SAAW,GAChBv4O,KAAKw4O,QAAU,GACfx4O,KAAKy4O,YAAc,KACnBz4O,KAAK04O,WAAY,EACjB14O,KAAKyvL,aAAe,GAEpBzvL,KAAK24O,oBAAqB,EAC1B34O,KAAK44O,cAAgB,KACrB54O,KAAK64O,WAAa9xN,EAClBA,EAAKsuF,YAILr1G,KAAK84O,eAAiB,EAEtB94O,KAAK+4O,KAAO,IAAI17N,EAAAC,OAChBtd,KAAKg5O,QAAU,IAAIZ,EAAA9nL,OAAOtwD,KAAK64O,YAC/B74O,KAAKi5O,QAAU,IAAIZ,EAAAa,WAAWl5O,KAAMA,KAAK64O,YAEzC74O,KAAKm5O,UAAY,IAAIjqD,EAAAyH,gBAAgB32L,KAAK64O,YAC1C74O,KAAKg5O,QAAQI,iBAAiBp5O,KAAKm5O,WAEnCn5O,KAAK84H,WAAa,GAIlB94H,KAAK24H,cAAgB,CAAC9rG,IAAU7sB,KAAK84H,WAAajsG,IAClD7sB,KAAKk5H,cAAgB,KAAMl5H,KAAK84H,YAEhC94H,KAAKq5O,WAAa,KAAMr5O,KAAKy4O,aAC7Bz4O,KAAKs5O,cAAgB,CAACvhO,IAAW/X,KAAKy4O,YAAc1gO,IAEpD/X,KAAKinB,QAAU,KAAMjnB,KAAK64O,YAG1B74O,KAAKu5O,gBAAkB,EAACC,EAAUC,KAC9Bz5O,KAAKg5O,QAAQU,aAAeF,EAC5Bx5O,KAAKg5O,QAAQW,aAAeF,EAC5B,MAAM11O,EAAS/D,KAAK+0N,YAChBhxN,GACAA,EAAOu/B,WAAWs2M,eAAe,OAAQH,KAIjDz5O,KAAKs4H,OAAS,CAAChwG,IACXtoB,KAAK+4O,KAAOzwN,EACZjL,EAAAC,OAAOg7G,OAAOt4H,KAAK+4O,QAGvB/4O,KAAK65O,sBAAwB,CAAC5vO,IAC1BjK,KAAKm3C,aAAeltC,EAAMq5B,WAAWmyD,eACrCz1F,KAAKg5O,QAAQc,eAAe95O,KAAKq5O,aAAcr5O,KAAKm3C,gBAExDn3C,KAAKg5O,QAAQa,sBAAwB75O,KAAK65O,sBAAsBh7O,KAAKmB,MAErEA,KAAK+5O,WAAa,KAAM/5O,KAAK04O,WAE7B14O,KAAKg5O,QAAQe,WAAa/5O,KAAK+5O,WAE/B/5O,KAAK+gG,UAAY,KAAe/gG,KAAKg5O,QAAQj4I,aAC7C/gG,KAAKwmB,cAAgB,KAAgBxmB,KAAKg5O,QAAQxyN,iBAClDxmB,KAAKg6O,UAAY,KAAMh6O,KAAKw4O,SAE5Bx4O,KAAKk4L,qBAAuB,EAACnoJ,GAAS,KAElC,GADA/vC,KAAK24O,mBAAqB5oM,EACtBA,GAAU/vC,KAAKi6O,QAAQ,GAAI,CAC3B,MAAMljL,EAAO/2D,KAAKi6O,QAAQ,GAC1Bj6O,KAAK44O,cAAgB,IAAIT,EAAA+B,aAAal6O,KAAM+2D,MAKpD/2D,KAAK+0N,UAAY,KACN/0N,KAAKg5O,QAAQjkB,aAKxB/0N,KAAKoyL,UAAY,EAACruL,EAAQK,KACtB,IAAI+1O,GAAU,EA8Bd,OA7BAn6O,KAAKi5O,QAAQmB,UAAUr2O,IAKnBo2O,GAJCnyN,EAAApmB,QAAG6D,cAAc,CAAC1B,EAAO2F,eAGrBse,EAAApmB,QAAG6D,cAAc,CAACrB,IACbi2O,EAAuBt2O,EAAQ/D,KAAK+gG,aAGpCu5I,EAAkBv2O,EAAQK,OAIpCpE,KAAKg5O,QAAQr1C,UAAY5/L,EACzB/D,KAAKg5O,QAAQoB,UAAUr2O,GAEE,OAArB/D,KAAKy4O,cACLz4O,KAAKy4O,YAAc10O,EAAO2F,YAE9B1J,KAAKu4O,SAAS3yO,KAAK7B,GACnB/D,KAAKg5O,QAAQuB,eAAex2O,EAAO2F,YACnC3F,EAAO2F,WAAWk6M,UAClB7/M,EAAO2F,WAAW8wO,gBAIlBL,GAAWn6O,KAAK04O,YAChB14O,KAAK04O,WAAY,GAGdyB,IAIXn6O,KAAKy6O,YAAc,CAACC,IAChB,IAAIzwO,EAAQywO,EACR10N,OAAOC,UAAUy0N,KACjBzwO,EAAQ+d,EAAApmB,QAAGgkB,IAAI80N,IAEdzwO,IAAQA,EAAQ+d,EAAApmB,QAAG+4O,eACxB1wO,EAAMw9K,aAAY,GAClBx9K,EAAMqW,IAAI,IAAI6J,EAAUu5D,QACxB1jF,KAAKoyL,UAAUnoL,KAKnBjK,KAAK46O,WAAa,EAAC10I,EAAOC,EAAOg6B,EAAS,EAAGC,EAAS,KAClD,MAAMr8H,EAAS/D,KAAK+0N,YAEdh+J,EADwB/2D,KAAKu3L,kBACJo9C,WAAW,GAE1C,IAAIjoL,EAAO,KACP1sD,KAAK24O,mBACD34O,KAAK44O,cAAciC,SAAS30I,EAAOC,GACnCz5C,EAAOqK,EAAKgkE,UAAU70B,EAAOC,IAG7BnmG,KAAK44O,cAAckC,cAAc50I,EAAOC,GACxCz5C,EAAOqK,EAAKgkE,UAAU70B,EAAOC,IAIjCz5C,EAAOqK,EAAKgkE,UAAU70B,EAAOC,GAGjC,MAAM9qF,EAAWqxC,EAAKhjD,WAChB2S,EAAYtY,EAAO2F,YAElB8gB,EAAIC,GAAM,CAAC1mB,EAAO4X,OAAQ5X,EAAOiY,QACpCK,EAAUyR,YAAY/pB,GAClBsX,EAAS0S,SAAShqB,EAAQo8H,EAAQC,IAClCr5G,EAAKe,UAAUE,EAAApmB,QAAGwJ,kBACd,CAACgU,OAAQ/D,EACLG,IAAKa,EAAWpS,MAAOlG,IAC/BgjB,EAAKe,UAAUE,EAAApmB,QAAGyJ,kBACd,CAACpB,MAAOlG,EAAQqb,OAAQ/D,KAGvBA,EAASy+L,mBAAmB/1M,IACjCgjB,EAAKe,UAAUE,EAAApmB,QAAGwJ,kBACd,CAACgU,OAAQ/D,EACLG,IAAKa,EAAWpS,MAAOlG,IAC/BgjB,EAAKe,UAAUE,EAAApmB,QAAGyJ,kBACd,CAACpB,MAAOlG,EAAQqb,OAAQ/D,KAG5BgB,EAAU0R,SAAShqB,EAAQymB,EAAIC,GAInCjmB,QAAQC,MAAM,wCAItB,MAAM41O,EAAyB,CAACt2O,EAAQ6oB,KACpC,IAAIutN,GAAU,EAed,OAdIvtN,EAAOrrB,OAAS,GAChB44O,EAAUvtN,EAAO,GAAGktL,mBAAmB/1M,IAKnC/D,KAAK+6O,mBAAmB,CAAC9wO,MAAOlG,EAAQyX,IAAK,KACzC4D,OAAQwN,EAAO,KAJnB5E,EAAApmB,QAAGK,IAAI,OAAQ,YAAa,6BAQhC+lB,EAAApmB,QAAGK,IAAI,OAAQ,YACX,uCAEDk4O,GAMLG,EAAoB,CAACv2O,EAAQK,KAC/B,GAAIA,EAAIlF,eAAe,SAAU,CAC7B,MAAMm+I,EAAQj5I,EAAIi5I,MAClB,GAAIr9I,KAAKw4O,QAAQt5O,eAAem+I,GAAQ,CACpC,GAAIj5I,EAAIlF,eAAe,MAAQkF,EAAIlF,eAAe,KAAM,CACpD,MAGM0tB,EAAS,CAHE5sB,KAAKw4O,QAAQn7F,GACRs3F,WAAW,GACf55G,UAAU32H,EAAI6R,EAAG7R,EAAI8R,GAClBxM,YACrB,OAAO2wO,EAAuBt2O,EAAQ6oB,GAErC,CACD,MAAMA,EAAS5sB,KAAKw4O,QAAQn7F,GAAOt8C,YACnC,OAAOs5I,EAAuBt2O,EAAQ6oB,IAI1C5E,EAAApmB,QAAGK,IAAI,WAAY,oBACf,aAAeo7I,EAAQ,iBAI/Br1H,EAAApmB,QAAGK,IAAI,WAAY,oBAAqB,yBAE5C,OAAO,GAKXjC,KAAK+6O,mBAAqB,CAAC51O,IACvB,MAAM8E,MAACA,EAAKuR,IAAEA,EAAG4D,OAAEA,GAAUja,EAEvB20H,EAAa,CAAC16G,GACf4I,EAAApmB,QAAG6D,cAAc,CAAC+V,KACnBs+G,EAAWl0H,KAAK4V,GAGpB,MAAMu7C,EAAO/2D,KAAKi6O,QAAQ,GACtBljL,GAA+B,IAAtB+iE,EAAWv4H,QAAiBw1D,EAAKikL,SAASlhH,IACnD/yG,EAAKe,UAAUE,EAAApmB,QAAG0J,iBACd,CAACrB,QAAOmV,SAAQ5D,UAI5Bxb,KAAKi7O,YAAc,CAACljO,IAEhB,OADa/X,KAAKi6O,QAAQ,GACde,SAAS,CAACjjO,MAI1B/X,KAAKk7O,wBAA0B,CAAC/1O,IAC5B,MAAM8E,MAACA,EAAKuR,IAAEA,EAAG4D,OAAEA,GAAUja,EAC7B,IAAI2iB,GAAY,EAChB,GAAI7d,EAAMf,IAAI,aAAesS,GAAO4D,EAAQ,CACxC,MAAM+7N,EAAY3/N,EAAInF,YACtB,GAAI8kO,EAEA,GAAIA,EAAUrkO,MAAO,CACjB,MAAMD,EAAKskO,EAAUrkO,QACjB7M,EAAM/L,IAAI,YAAY4nF,QAAQjvE,KAC9BiR,EAAY9nB,KAAKi7O,YAAY77N,SAIjC4I,EAAApmB,QAAG+C,KAAK,WAAY,0BAChB,aAAeka,KAAKC,UAAUq8N,IAK1CrzN,GACAf,EAAKe,UAAUE,EAAApmB,QAAG2J,uBACd,CAACtB,QAAOmV,SAAQ5D,UAI5Bxb,KAAKo7O,YAAc,KAAMp7O,KAAKg5O,QAAQoC,eACtCp7O,KAAKq7O,cAAgB,MAAQr7O,KAAKg5O,QAAQqC,kBAC1Cr7O,KAAKs7O,eAAiB,KAAMt7O,KAAKg5O,QAAQsC,kBAGzCt7O,KAAK+tB,SAAW,CAAC9jB,IAAWjK,KAAKg5O,QAAQjrN,SAAS9jB,KAGlDjK,KAAK8tB,YAAc,CAAC7jB,IAAWjK,KAAKg5O,QAAQlrN,YAAY7jB,KAGxDjK,KAAK+2L,SAAW,CAACwkD,IAAev7O,KAAKg5O,QAAQjiD,SAASwkD,KAEtDv7O,KAAKu6O,eAAiB,CAACxiO,IAAW/X,KAAKg5O,QAAQuB,eAAexiO,KAG9D/X,KAAKg9H,SAAW,CAACjlH,IACR/X,KAAKg5O,QAAQpxI,SAAS7vF,GAIvB/X,KAAKw7O,oBAAoB,WAAYzjO,GAHrC/X,KAAKg5O,QAAQh8G,SAASjlH,KAQ9B/X,KAAKy7O,qBAAuB,CAAC1jO,IACpB/X,KAAKg5O,QAAQpxI,SAAS7vF,IACvB/X,KAAKg5O,QAAQh8G,SAASjlH,KAI9B/X,KAAK07O,aAAe,CAAC9uN,IACjB5sB,KAAKg5O,QAAQ0C,aAAa9uN,KAI9B5sB,KAAK+wL,SAAW,CAAC1zC,IACb,GAA+B,mBAApBA,EAAMt8C,UAA0B,CACvC,MAAMnjG,EAAOy/I,EAAM37I,UACnB,GAAK1B,KAAKw4O,QAAQt5O,eAAetB,GAsB7BoqB,EAAApmB,QAAGK,IAAI,WAAY,WACf,YAAcrE,EAAO,iBAvBY,CACrC,MAAMgvB,EAASywH,EAAMt8C,YACrB,GAAIn0E,EAAOrrB,OAAS,EAEhB,IAAK,MAAMwW,KAAS6U,EAChB5sB,KAAKg9H,SAASjlH,QAIlBiQ,EAAApmB,QAAGK,IAAI,WAAY,oBACNrE,oBAIjB,GAFAoC,KAAKw4O,QAAQ56O,GAAQy/I,EAEjBr9I,KAAKi6O,QAAQ,GAAI,CACjB,MAAMljL,EAAO/2D,KAAKu3L,kBAAkBC,iBAChCx3L,KAAK24O,qBAAuB34O,KAAK44O,gBACjC54O,KAAK44O,cAAgB,IAAIT,EAAA+B,aAAal6O,KAAM+2D,WAUxD/uC,EAAApmB,QAAGK,IAAI,WAAY,WACf,uCAIZjC,KAAK27O,UAAY,KAAM59O,OAAO6qB,KAAK5oB,KAAKw4O,SAASj3O,OAAS,GAG1DvB,KAAK47O,cAAgB,MAGjB,OAFe57O,KAAK+0N,YACDrrN,WAAW8Z,WAIlCxjB,KAAK67O,SAAW,EAAChsJ,EAAS,KACtB7vF,KAAKg5O,QAAQ8C,aAAajsJ,KAG9B7vF,KAAK87O,aAAe,EAACjsJ,EAAS,KAC1B7vF,KAAKg5O,QAAQ8C,aAAajsJ,KAK9B7vF,KAAKo8L,OAAS,CAACh4L,IAASpE,KAAKg5O,QAAQ58C,OAAOh4L,KAE5CpE,KAAKi6O,QAAU,CAAC/6N,IACZ,MAAMs6G,EAAQx5H,KAAKu3L,kBACnB,OAAI/9D,GAAmC,mBAAnBA,EAAMm7G,SACfn7G,EAAMm7G,WAAWz1N,GAErB,OAKXlf,KAAK01B,WAAY,EACjB11B,KAAKmtC,OAAS,EAACrX,EAAS3wB,KACpB,GAAI2wB,IAAY9N,EAAApmB,QAAGqJ,kBAEf,GADAjL,KAAKyvL,aAAatqL,EAAK8E,MAAM6M,UAAW,EACpC3R,EAAK8E,MAAM8S,WAAY,CACvB,MAAM9S,MAACA,GAAS9E,EACV+Z,EAAQlf,KAAKu4O,SAASx4N,QAAQ9V,GAChCiV,GAAS,IACoB,IAAzBlf,KAAKu4O,SAASh3O,SACdvB,KAAK04O,WAAY,EACjBl0O,QAAQU,IAAI,iBACZ8iB,EAAApmB,QAAGslB,QAAQ,eAEflnB,KAAKu4O,SAAS7rN,OAAOxN,EAAO,UAInC,GAAI4W,IAAY9N,EAAApmB,QAAGwJ,kBAAmB,CACvC,MAAMnB,MAACA,GAAS9E,EACZ8E,EAAM8S,aACN/c,KAAKy4O,YAAcxuO,EAAMP,WAEzB1J,KAAKm5O,UAAUpiM,SAAS/2C,KAAKy4O,aACzBz4O,KAAK+7O,YACL/7O,KAAKm5O,UAAUh9C,SAASn8L,KAAKg8O,kBAGjCh8O,KAAK+6O,mBAAmB51O,GACxBnF,KAAKk7O,wBAAwB/1O,SAGhC,GAAI2wB,IAAY9N,EAAApmB,QAAG0J,iBAAkB,CACtC,MAAMrB,MAACA,EAAKmV,OAAEA,GAAUja,EACxB,GAAI8E,EAAM8S,WAAY,CAClB,MAAMolE,EAAU/iE,EAAOtI,QAEjB0iH,EAAQx5H,KAAKu3L,kBACnB,GAAI/9D,GAASA,EAAMm7G,SAAU,CACzB,MAAM59K,EAAOyiE,EAAMm7G,WAAW,IACvB1+N,EAAGC,GAAK6gD,EAAKklL,eAAe95J,GAC7B64C,EAAO,IAAIg0D,EAAAn3D,aACjBmD,EAAKrC,cAAc34H,KAAKk5H,iBAExB,IAAIgjH,EAAO,KACPC,EAAO,KACX,GAAIh3O,EAAKqW,IAAK,CACV,MAAM8P,EAAKyrC,EAAKklL,eAAe92O,EAAKqW,IAAI1E,SACpCwU,KACC4wN,EAAMC,GAAQ7wN,GAGnBtrB,KAAK24O,oBACL34O,KAAK44O,cAAckC,cAAc7kO,EAAGC,EAAGgmO,EAAMC,GAGjDnhH,EAAKT,mBAAmBf,EAAOziE,EAAM9gD,EAAGC,GACzBsjH,EAAMz4B,YACd12F,QAAS/M,IAAO0C,KAAKy7O,qBAAqBn+O,UAKjE0C,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGqJ,iBAAkBjL,MACjDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGwJ,kBAAmBpL,MAClDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAG0J,iBAAkBtL,MAIjDA,KAAK2zN,UAAY,EAACpxF,EAAQ1rH,GAAK,EAAIk+D,GAAS,KACxC,MAAMh9D,EAAQwqH,EAAO74H,WACrB1J,KAAKg9H,SAASjlH,GACVg9D,GACA/0E,KAAKg5O,QAAQuB,eAAexiO,GAE5B/X,KAAK27O,aAAe9kO,GAAM,GAC1B7W,KAAKo8O,qBAAqB75G,EAAQ1rH,KAK1C7W,KAAKo8O,qBAAuB,EAAC75G,EAAQ85G,KACjC,MAAMtkO,EAAQwqH,EAAO74H,WACf+b,EAAW,WAAa88G,EAAO7gI,UAC/Bm+H,EAAa,IAAIh9B,EAAMqG,WAAWzjF,GACxCo6G,EAAW7C,SAASjlH,GAEpB,MACMg/C,EADQ/2D,KAAKu3L,kBACAo9C,WAAW,GACxBrpN,EAAKyrC,EAAKklL,eAAeI,GAC3B/wN,GACAu0G,EAAWlE,UAAUrwG,EAAG,GAAIA,EAAG,IAC/ByrC,EAAK8uB,QAAQ,aAAcg6C,IAG3B73G,EAAApmB,QAAGK,IAAI,WAAY,6BACbo6O,0BAIdr8O,KAAKs8O,gBAAkB,KAAMt8O,KAAK44O,eAElC54O,KAAK41L,cAAgB,KAAM51L,KAAKi5O,SAChCj5O,KAAK2xL,cAAgB,CAACkG,IAClB73L,KAAKi5O,QAAUphD,EACf73L,KAAKi5O,QAAQmB,UAAUp6O,KAAK+0N,aAC5B,MAAMv7F,EAAQz7H,OAAOutC,OAAOtrC,KAAKw4O,SAAS,GAC1Cx4O,KAAKi5O,QAAQsD,SAAS/iH,GACtBx5H,KAAKi5O,QAAQuD,QAAQx8O,QAGzBA,KAAKy8O,aAAe,KAAMz8O,KAAK+7O,YAC/B/7O,KAAKm5H,aAAe,CAACupC,IACnB1iK,KAAK+7O,WAAar5E,EAClB1iK,KAAKm5O,UAAUhgH,aAAaupC,KAG9B1iK,KAAKkxL,YAAc,CAACqM,IAChBA,EAAG9nF,QAAQz1G,KAAK64O,YAChB74O,KAAKm5O,UAAY57C,IAIrBv9L,KAAKymB,OAAS,MACV,MAAMriB,EAAW,CACbs4O,OAAQ,GACRjrD,WAAYzxL,KAAKi5O,QAAQxyN,SACzBqrK,aAAch9E,EAAAC,WAAWE,GACzBu7E,gBAAiBrmK,EAAUixE,aAC3B09B,WAAY94H,KAAK84H,WACjBxwG,IAAKtoB,KAAK+4O,KAAKtyN,SACfsrK,QAASz0J,EAAAwE,KAAKrZ,IAAIhC,SAClBplB,WAAY2mB,EAAApmB,QAAGP,WACfZ,WAAYunB,EAAApmB,QAAGnB,WACfgvL,aAAczvL,KAAKyvL,aACnBktD,kBAAmB38O,KAAK24O,oBAG5B,GAAK34O,KAAK27O,YAUL,CACD,MAAM9qD,EAAS,GACf9yL,OAAO6qB,KAAK5oB,KAAKw4O,SAASnuO,QAASzM,IAC/B,MAAMy/I,EAAQr9I,KAAKw4O,QAAQ56O,GAC3BizL,EAAOjzL,GAAQy/I,EAAM52H,WAEzBriB,EAAIysL,OAASA,MAhBM,CAEnB,MAAMjkK,EAAS,GACC5sB,KAAKg5O,QAAQj4I,YACrB12F,QAAS0N,IACb6U,EAAOhnB,KAAKmS,EAAM0O,YAEtBriB,EAAIwoB,OAASA,EACbxoB,EAAIysL,OAAS,GAWjB,MAAM9sL,EAAS/D,KAAK+0N,YAcpB,OAbIhxN,IACAK,EAAIL,OAASA,EAAO0iB,UAEpBzmB,KAAK+7O,aACL33O,EAAIg1H,UAAYp5H,KAAK+7O,WAAWt1N,UAEhCzmB,KAAK44O,gBACLx0O,EAAImsL,aAAevwL,KAAK44O,cAAcnyN,UAEtCzmB,KAAKm5O,YACL/0O,EAAI6sL,SAAWjxL,KAAKm5O,UAAU1yN,UAG3BriB,IAIXpE,KAAK48O,YAAc,MACf,MAAM74O,EAAS/D,KAAK+0N,YACpB,QAAIhxN,GACOA,EAAOu/B,WAAWs5M,gBAMjC58O,KAAK00G,QAAU,MACX,MAAM3wG,EAAS/D,KAAK+0N,YACpB,OAAIhxN,EACOA,EAAOu/B,WAAWoxE,UAEtB,OAIX10G,KAAK68O,qBAAuB,CAAC7tN,IACP,mBAAPA,EACPhvB,KAAKg5O,QAAQ8D,kBAAoB9tN,EAGjChH,EAAApmB,QAAG+C,KAAK,WAAY,uBAChB,kCAKZ3E,KAAK+8O,aAAe,KAAM/8O,KAAKg5O,QAAQ+D,gBACvC/8O,KAAKg9O,gBAAkB,KAAMh9O,KAAKg5O,QAAQgE,mBAG1Ch9O,KAAKi9O,kBAAoB,KAAMj9O,KAAKg5O,QAAQh7C,UAAUk/C,aAEtDl9O,KAAKm9O,iBAAmB,MAAOn9O,KAAKg5O,QAAQmE,qBAC5Cn9O,KAAKo9O,kBAAoB,MAAOp9O,KAAKg5O,QAAQoE,sBAG7Cp9O,KAAKg8O,eAAiB,MAClB,MAAMj4O,EAAS/D,KAAK+0N,YACpB,IAAK/0N,KAAK+7O,aAAeh4O,EACrB,MAAO,GAGX,MAAMq1H,EAAYp5H,KAAK+7O,WAGvB,IAAIzwN,EAFUtrB,KAAKu3L,kBACAo9C,WAAW,GAChBsH,eAAel4O,EAAO2F,WAAWoN,SAE/C,IAAKwU,KACHA,EAAKtrB,KAAKq9O,kBACA,OAAO,KAGnB,MAAMrzE,KAACA,EAAIC,KAAEA,GAAQ7wC,EAAU6oC,SAEzBq7E,EAAiB,IAARhyN,EAAG,GAAWvnB,EAAO4X,OAC9B4hO,EAAiB,IAARjyN,EAAG,GAAWvnB,EAAOiY,OAIpC,MAAO,CAFI9U,KAAK4C,MAAMwzO,EAAStzE,GACpB9iK,KAAK4C,MAAMyzO,EAAStzE,MAMnCjqK,KAAKq9O,eAAiB,MAEpB,IAAI93N,EADUvlB,KAAK+0N,YAAYrrN,WACZ2M,YACnB,KAAOkP,GAQL,IANEA,EADEA,EAAOlP,UACAkP,EAAOlP,YAGP,OAGGkP,EAAOw1G,UACnB,OAAOx1G,EAAOw1G,YAGlB,OAAO,OAGT/6H,KAAKw9O,qBAAuB,CAAClyN,IACb8oD,EAAA7pD,SAAS05F,aAAa34F,EAAG,GAAIA,EAAG,GAAI,GAAG,GAC/CjhB,QAAS+gB,IACTprB,KAAK+7O,WAAW/2N,YAAYoG,OAKpCprB,KAAKu3L,gBAAkB,MACnB,MAAM1G,EAAS9yL,OAAOutC,OAAOtrC,KAAKg6O,aAClC,OAAInpD,EAAOtvL,OAASvB,KAAK84O,eACdjoD,EAAO7wL,KAAK84O,gBAEhB,OAIX94O,KAAKkmB,KAAO,EAAC/b,EAAQszO,GAAU,EAAIz+N,EAAa,UAC5C,MAAM4N,EAAS5sB,KAAKg5O,QAAQj4I,YAC5B,IAAiB,IAAb08I,EAAgB,CAEhB,OADcz9O,KAAK+0N,YAAYrrN,WAClBY,YAAY0U,GAAY7U,GAEpC,GAAI6b,OAAOC,UAAUw3N,GAAU,CAChC,MAAM1lO,EAAQ6U,EAAO1G,KAAM5oB,GAAMA,EAAEwZ,UAAY2mO,GAC/C,GAAI1lO,EACA,OAAOA,EAAMzN,YAAY0U,GAAY7U,QAKzC,IAAK,MAAM4N,KAAS6U,EAAQ,CACxB,MAAMriB,EAAQwN,EAAMzN,YAAY0U,GAAY7U,GAC5C,GAAII,EAAQ,OAAOA,EAG3B,OAAO,OAGXvK,KAAKw7O,oBAAsB,EAACl7M,EAAUvoB,KAClC,MAAMwN,EAASxN,EAAM1B,YACfuI,EAAO7G,EAAM0O,gBACZ7H,EAAKle,gBACLke,EAAKvJ,IAAI+sE,MAChB,IAAI/9E,EAAM,GACV,GAAIkhB,EAAQ,CAERlhB,aADa2jB,EAAApmB,QAAGyjB,mBAAmBtN,OAGvC1T,GAAO,sBAAwB0T,EAAMjB,QACrCzS,GAAO,UAAYwa,KAAKC,UAAUF,EAAM,KAAM,GAE9CoJ,EAAApmB,QAAGK,IAAI,WAAYq+B,EAAUj8B,KAGjCrE,KAAK09O,YAAc,MACf11N,EAAApmB,QAAGgD,KAAK2xB,EAAAS,OAAO0wC,2KCptBvB,MAAA1/C,EAAAC,EAAAhrB,EAAA,IACA25M,EAAA35M,EAAA,IAGAk7F,EAAAl7F,EAAA,IAQMkH,EADNlH,EAAA,EACcq3B,CAAI,qBAEZqpN,EAAO5/O,OAAOwT,OAChB,CAACguI,MAAO,QAASq+F,OAAQ,SAAU/+N,KAAM,OAAQg/N,QAAS,UACtDC,YAAa,gBACfC,EAAShgP,OAAOwT,OAClB,CAACguI,MAAO,QAASy+F,QAAS,UAAWC,UAAW,cA8BpD,MAAa/D,EAWT7xN,YAAYy4E,EAAM/pC,GACd,MAAOxyC,EAAON,GAAS,CAAC8yC,EAAKqyC,WAAYryC,EAAKoyC,YAC9CnpG,KAAKukB,MAAQA,EACbvkB,KAAKikB,MAAQA,EACbjkB,KAAK+2D,KAAOA,EACZ/2D,KAAK8gG,KAAOA,EACZ9gG,KAAKuC,MAAQ,GAEb,IAAK,IAAI0T,EAAI,EAAGA,EAAIsO,EAAOtO,IAAK,CAC5BjW,KAAKuC,MAAM0T,GAAK,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAI+N,EAAO/N,IACvB,GAAI6gD,EAAK8jL,SAAS5kO,EAAGC,GAAI,CACrB,MAAMgoO,EAAa,CAACC,UAAWR,EAAKC,QACpC59O,KAAKuC,MAAM0T,GAAGrQ,KAAKs4O,OAElB,CACD,MAAMA,EAAa,CAACC,UAAWR,EAAK9+N,MACpC7e,KAAKuC,MAAM0T,GAAGrQ,KAAKs4O,IAM/Bl+O,KAAKo+O,UAAY,EACjBp+O,KAAKq+O,UAAY,EAEjBr+O,KAAKs+O,YAAc/5N,EACnBvkB,KAAKu+O,YAAct6N,EAKhBoE,cAAcujC,EAAI4yL,EAAItC,EAAMC,GAC/B,MAAMsC,EAAkBz+O,KAAK0+O,WAAW9yL,EAAI4yL,EAAItC,EAAMC,GAClDh4O,EAAM0xB,UACN1xB,4BAAgC+3O,KAAQC,MAASvwL,KAAM4yL,KACvDx+O,KAAK2+O,cAIT,MAAMjyI,EAAwB,GAC9B,IAAK,IAAIz2F,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IACxBlW,KAAK4+O,YAAYhzL,EAAI4yL,EAAIvoO,EAAGC,GACvBlW,KAAK66O,SAAS5kO,EAAGC,IAClBw2F,EAAY9mG,KAAK,CAACqQ,EAAGC,IAGpBlW,KAAK66O,SAAS5kO,EAAGC,IACtBlW,KAAK6+O,WAAWjzL,EAAI4yL,EAAIvoO,EAAGC,EAAGuoO,GAItC/xI,EAAYnrG,OAAS,GACrBvB,KAAK8+O,UAAUlzL,EAAI4yL,EAAI9xI,EAAa+xI,GAGpCt6O,EAAM0xB,UACN1xB,0BAA8B+3O,KAAQC,MAASvwL,KAAM4yL,KACrDx+O,KAAK2+O,cAINt2N,SAASpS,EAAGC,GACf,OAAOlW,KAAKuC,MAAM0T,GAAGC,GAAGioO,YAAcR,EAAKC,OAKxCv1N,YAAYujC,EAAI4yL,EAAIrjH,EAAIC,GAC3B,IAAK,IAAInlH,EAAI21C,EAAK5rD,KAAKo+O,UAAWnoO,GAAK21C,EAAK5rD,KAAKo+O,UAAWnoO,IACxD,IAAK,IAAIC,EAAIsoO,EAAKx+O,KAAKq+O,UAAWnoO,GAAKsoO,EAAKx+O,KAAKq+O,UAAWnoO,IACxD,GAAIilH,IAAOllH,GAAKmlH,IAAOllH,EAAI,OAAO,EAG1C,OAAO,EAGJmS,eACHroB,KAAK++O,gBAAgBpB,EAAKC,QAIvBv1N,cAAc81N,GACjB,IAAIz2K,EAAM,EACV,IAAK,IAAIzxD,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IACxBlW,KAAKuC,MAAM0T,GAAGC,GAAGioO,YAAcA,KAC7Bz2K,EAId,OAAOA,EAIJr/C,UAAUujC,EAAI4yL,EAAIQ,EAAyBP,GAC9C,MAAMQ,EAA6Bj/O,KAAK+2D,KAAKm+K,WAC7C/wO,EAAM,cAAgB0a,KAAKC,UAAUkgO,IACrC,MAAME,EAAqCF,EAAc3pO,IACrDiW,GAAO2zN,EAAU3zN,EAAG,IAAIA,EAAG,KAG/BtrB,KAAKm3L,YAAY+nD,GAEjBF,EAAc30O,QAAQihB,IAClBnnB,gCAAoCmnB,KACpC,MAAO6vG,EAAIC,GAAM9vG,EAUjB,GATAtrB,KAAKuC,MAAM44H,GAAIC,GAAI+iH,UAAYR,EAAKC,OACpC59O,KAAK+2D,KAAKooL,UAAUhkH,EAAIC,GAER,KAAZqjH,IACAt6O,0BAA8Bg3H,KAAMC,KACpCp7H,KAAKo/O,0BAA0BH,EAAWrzL,EAAI4yL,EAAIrjH,EAAIC,IAI5C,IAAV9vG,EAAG,IAAsB,IAAVA,EAAG,GAAU,CACdtrB,KAAK+2D,KAAKm+K,cAQ7B7sN,0BAA0B42N,EAAWrzL,EAAI4yL,EAAIrjH,EAAIC,GAE/Cp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAIC,EAAK,IAC9BA,EAAK,GAAM,IACZj3H,yBAA6Bg3H,KAAMC,KACnCp7H,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,KAKjDp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAIC,EAAK,IAC9BA,EAAK,EAAKp7H,KAAK+2D,KAAKoyC,aACrBhlG,yBAA6Bg3H,KAAMC,KACnCp7H,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,KAKjDp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAK,EAAGC,IAC7BD,EAAK,EAAKn7H,KAAK+2D,KAAKqyC,aACrBjlG,wBAA4Bg3H,KAAMC,KAClCp7H,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,GAAIC,KAKhDp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAK,EAAGC,IAC7BD,EAAK,GAAM,IACZh3H,wBAA4Bg3H,KAAMC,KAClCp7H,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,GAAIC,KAMlD/yG,WAAWujC,EAAI4yL,EAAIrjH,EAAIC,EAAIqjH,GAC9Bt6O,oBAAwBg3H,KAAMC,KAC9B,MAAM6jH,EAAYj/O,KAAK+2D,KAAKm+K,WAC5Bl1O,KAAKuC,MAAM44H,GAAIC,GAAI+iH,UAAYR,EAAKG,YACpC99O,KAAK+2D,KAAKuoL,YAAYnkH,EAAIC,GAE1B,MAAMxuG,EAASqyN,EAAU9jH,GAAIC,GAAIr6B,YACjC/gG,KAAK8gG,KAAK46I,aAAa9uN,GAGvB,MAAMspK,EAAc+oD,EAAU9jH,GAAIC,GAAI1xH,WAKtC,GAJAvF,2BAA+Bg3H,KAAMC,UAAW86D,EAAYp/K,WACzC9W,KAAK8gG,KAAK80F,gBAClB2pD,cAAcrpD,GAErB/xL,EAAM0xB,QAAS,CACf,MAAM2pN,EAAOP,EAAU9jH,GAAIC,GAAIr6B,YAAY1rF,IAAI/X,GAAKA,EAAEwZ,SACtD3S,2BAA+Bq7O,KAOnC,GAJAP,EAAU9jH,GAAIC,GAAIr0B,kBAClBk4I,EAAU9jH,GAAIC,GAAM6jH,EAAU9jH,GAAIC,GAAI30G,SAGtB,SAAZg4N,EAAoB,CACpB,MAAM5lN,EAAOsiG,EAAK,EAClBh3H,oCAAwCg3H,EAAK,KAAKC,KAC9CviG,EAAO74B,KAAK+2D,KAAKqyC,YACjBppG,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,EAAK,GAAGC,SAGpD,GAAgB,SAAZqjH,EAAoB,CACzB,MAAM5lN,EAAOsiG,EAAK,EAClBh3H,oCAAwCg3H,EAAK,KAAKC,KAC9CviG,EAAO74B,KAAK+2D,KAAKqyC,YACjBppG,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,EAAK,GAAGC,SAGpD,GAAgB,UAAZqjH,EAAqB,CAC1B,MAAM3lN,EAAOsiG,EAAK,EAClBj3H,oCAAwCg3H,KAAMC,EAAK,KAC/CtiG,GAAQ,GACR94B,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,EAAK,SAGtD,GAAgB,UAAZqjH,EAAqB,CAC1B,MAAM3lN,EAAOsiG,EAAK,EAClBj3H,oCAAwCg3H,KAAMC,EAAK,KAC/CtiG,EAAO94B,KAAK+2D,KAAKoyC,YACjBnpG,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,EAAK,SAMnDp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAIC,EAAK,IAC7BA,EAAK,GAAM,GACRp7H,KAAK66O,SAAS1/G,EAAIC,EAAK,KACvBj3H,yBAA6Bg3H,KAAMC,EAAK,KACxCp7H,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,EAAK,KAM3Dp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAIC,EAAK,IAC7BA,EAAK,EAAKp7H,KAAK+2D,KAAKoyC,YACjBnpG,KAAK66O,SAAS1/G,EAAIC,EAAK,KACvBj3H,yBAA6Bg3H,KAAMC,EAAK,KACxCp7H,KAAKq/O,kBAAkB,QAASJ,EAAU9jH,GAAIC,EAAK,KAM3Dp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAK,EAAGC,IAC5BD,EAAK,EAAKn7H,KAAK+2D,KAAKqyC,YACjBppG,KAAK66O,SAAS1/G,EAAK,EAAGC,KACtBj3H,wBAA4Bg3H,EAAK,KAAKC,KACtCp7H,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,EAAK,GAAGC,KAMzDp7H,KAAK4+O,YAAYhzL,EAAI4yL,EAAIrjH,EAAK,EAAGC,IAC5BD,EAAK,GAAM,GACRn7H,KAAK66O,SAAS1/G,EAAK,EAAGC,KACtBj3H,wBAA4Bg3H,EAAK,KAAKC,KACtCp7H,KAAKq/O,kBAAkB,OAAQJ,EAAU9jH,EAAK,GAAGC,KAMjEp7H,KAAKuC,MAAM44H,GAAIC,GAAI+iH,UAAYR,EAAK9+N,KAGjCwJ,aAAapS,EAAGC,GACnB,OAAOlW,KAAKuC,MAAM0T,GAAGC,GAAGioO,UAGrB91N,SACH,MAAO,CACH9lB,MAAOvC,KAAKuC,OAIb8lB,gBAAgB9lB,GACnBvC,KAAKuC,MAAM8H,QAAQ,CAACm7F,EAAKvvF,KACrBuvF,EAAIn7F,QAAQ,CAACqiD,EAAMx2C,KACflW,KAAKuC,MAAM0T,GAAGC,GAAGioO,UAAY57O,MAKlC8lB,YAAY8jF,GACf,MAAM27D,EAAS37D,EAAU5qG,OACzB4C,cAAkB2jK,6BAClB,MAAMhpD,EAAW,IAAI83F,EAAAvnB,SACrBvwE,EAASgxE,cAAa,GACtBhxE,EAASq4E,YAAYn3L,KAAK8gG,KAAMqL,GAG7B9jF,eAAe/U,EAAKmsO,EAAe5zI,GACtC,MAAM6zI,EAAc1/O,KAAK2/O,YAAYrsO,GAC/BssO,EAAuB5/O,KAAK6/O,uBAAuBvsO,EAAKmsO,GACxDK,EAAqB9/O,KAAK6/O,uBAAuBH,EAAa7zI,GAC9DiT,EAAW,IAAI83F,EAAAvnB,SACf5tD,EAAkBm+G,EAAWvuO,OAAOyuO,GACpClzN,EAAS,CAAC6yN,EAAc/1O,WAAYmiG,EAAQniG,YAClDo1G,EAASk5E,kBAAkBprK,EAAQ60G,GAGhCp5G,kBAAkB/U,EAAKo5C,GACM1sD,KAAK6/O,uBAAuBvsO,EAAKo5C,GACnDriD,QAAQmrC,IAClB,MAAMuqM,EAAavqM,EAAKvc,kBAClBb,EAAcod,EAAKtc,iBAEzB,GAAId,aAAuB+/D,EAAAzjD,MAAO,CAC9B,MAAM3b,EAAU,CACZX,YAAaA,EAAYthB,QACzBkiB,aAAc,CACZ/iB,EAAG8pO,EAAWpkO,OACdzF,EAAG6pO,EAAW/jO,SAGpBw5B,EAAKkgJ,WAAW38J,MAKrB1Q,uBAAuB/U,EAAKo5C,GAC/B,MACM+0E,EADQ/0E,EAAKhjD,WACCkuH,iBACC,IAAjB6J,EAAMlgI,QACNymB,EAAApmB,QAAGK,IAAI,eAAgB,yBACnB,yBAER,IAAI+9O,EAAgB,GAapB,MAZY,UAAR1sO,EACA0sO,EAAgBv+G,EAAMt3H,OAAOqrC,GAAQA,EAAKx5B,SAAW0wC,EAAKx1C,KAAO,GAEpD,UAAR5D,EACL0sO,EAAgBv+G,EAAMt3H,OAAOqrC,GAAwB,IAAhBA,EAAKx5B,QAE7B,SAAR1I,EACL0sO,EAAgBv+G,EAAMt3H,OAAOqrC,GAAQA,EAAK75B,SAAW+wC,EAAKz1C,KAAO,GAEpD,SAAR3D,IACL0sO,EAAgBv+G,EAAMt3H,OAAOqrC,GAAwB,IAAhBA,EAAK75B,SAEvCqkO,EAGJ33N,YAAY/U,GACf,OAAQA,GACJ,IAAK,QAAS,MAAO,QACrB,IAAK,QAAS,MAAO,QACrB,IAAK,OAAQ,MAAO,OACpB,IAAK,OAAQ,MAAO,OACpB,QAAS0U,EAAApmB,QAAGK,IAAI,eAAgB,6BACbqR,YAEvB,MAAO,GAIJ+U,WAAWujC,EAAI4yL,EAAItC,EAAMC,GAC5B,IAAKxrN,EAAIC,GAAM,CAAC,EAAG,GACf6tN,EAAU,GACd,IAAKz2N,EAAApmB,QAAG6D,cAAc,CAACy2O,EAAMC,IAAQ,CAGjC,GADAvrN,EAAK4tN,EAAKrC,EACC,KAFXxrN,EAAKi7B,EAAKswL,IAEa,IAAPtrN,EAAU,CACtB,MAAMvsB,WAAe63O,KAAQC,QAAWvwL,KAAM4yL,IAC9Cx2N,EAAApmB,QAAGK,IAAI,eAAgB,6CACaoC,KAEpCssB,EAAK,EAAI8tN,EAAU,OACd9tN,EAAK,IAAI8tN,EAAU,QACxB7tN,EAAK,EAAI6tN,EAAU,QACd7tN,EAAK,IAAI6tN,EAAU,SAEhC,OAAOA,EAIJp2N,aACH,IAAI5f,EAAS,GACb,IAAK,IAAIyN,EAAI,EAAGA,EAAIlW,KAAKikB,MAAO/N,IAAK,CACjC,IAAK,IAAID,EAAI,EAAGA,EAAIjW,KAAKukB,MAAOtO,IAC5BxN,GAAU,IAAMzI,KAAKigP,YAAYjgP,KAAKuC,MAAM0T,GAAGC,IAEnDzN,SAAgByN,OAEpBzN,GAAU,mBAAqBzI,KAAKkgP,cAAcvC,EAAKC,QACvDn1O,GAAU,uBAAyBzI,KAAKkgP,cAAcvC,EAAK9+N,MAC3DpW,GAAU,oBAAsBzI,KAAKkgP,cAAcvC,EAAKE,SACxDp1O,GAAU,KAEV,IAAK,IAAIyN,EAAI,EAAGA,EAAIlW,KAAK+2D,KAAKoyC,WAAYjzF,IAAK,CAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIjW,KAAK+2D,KAAKqyC,WAAYnzF,IAAK,CAG3CxN,MAAawN,KAAKC,OAFAlW,KAAK+2D,KAAK20C,aAAaz1F,EAAI,IAAMC,GAC3B,MAAQ,OACA,IAEpCzN,GAAU,KAEduf,EAAApmB,QAAGgD,KAAK6D,GAIL4f,YAAY9lB,GACf,OAAQA,EAAM47O,WACV,KAAKR,EAAKC,OAAQ,MAAO,IACzB,KAAKD,EAAK9+N,KAAM,MAAO,IACvB,KAAK8+N,EAAKE,QAAS,MAAO,IAC1B,KAAKF,EAAKp+F,MAAO,MAAO,IACxB,KAAKo+F,EAAKG,YAAa,MAAO,IAC9B,QAAS,MAAO,KA7Z5B3gP,EAAA+8O,eAkaa/8O,EAAAgjP,MAAa,GAC1BhjP,EAAAgjP,MAAMC,qBA/bN,SAA8B/7O,EAAKo7O,EAAe5oO,GAAK,GACnDmR,EAAApmB,QAAGgD,KAAKP,GAC8B,mBAA3Bo7O,EAAc/1O,SACjB+1O,EAAc/1O,WAAWoN,UAAYD,IAAc,IAARA,GAC5B4oO,EAAc/1O,WAAWkuH,iBACjCvtH,QAAQ3M,IACX,MAAM06B,EAAc16B,EAAEw7B,iBAClBlT,OAAOC,UAAUmS,GACjB5zB,QAAQU,mBAAmBkzB,WAG3B5zB,QAAQU,eAAekzB,EAAYthB,mBAM/CtS,QAAQU,IAAI,oDA+apB/H,EAAAgjP,MAAMxC,KAAOA,EACbxgP,EAAAgjP,MAAMpC,OAASA,EACf5gP,EAAAgjP,MAAMjG,aAAeA,8UCtdrB,MAAAlyN,EAAAC,EAAAhrB,EAAA,IACA4qH,EAAAzzF,EAAAn3B,EAAA,KACAojP,EAAApjP,EAAA,KAOAqjP,EAAArjP,EAAA,KA4BAE,EAAAmzD,OAAA,MAyBIjoC,YAAYk4N,GAGRvgP,KAAK05O,aAAe,MAAM,GAC1B15O,KAAK25O,aAAe,KAEpB35O,KAAK2jM,UAAY,KACjB3jM,KAAKg+L,UAAY,KACjBh+L,KAAK88O,kBAAoB,KAEzB98O,KAAKwgP,UAAY,GACjBxgP,KAAKygP,cAAgB,GACrBzgP,KAAKwwD,WAAa,IAAIq3D,EAAKp4D,UAC3BzvD,KAAKopM,KAAO,IAAIk3C,EAAAI,eAAeH,GAC/BvgP,KAAK64O,WAAa0H,EAElBvgP,KAAKm3C,aAAe,GAEpBn3C,KAAKmoC,OAAS,CACVw4M,aAAc,GACdC,cAAc,GAGlB5gP,KAAK6gP,OAAS,IAAIR,EAAAS,cAAc9gP,KAAMugP,GAEtCvgP,KAAK01B,WAAY,EACjB11B,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGsJ,iBAAkBlL,MACjDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAG8J,mBAAoB1L,MACnDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAG+J,qBAAsB3L,MACrDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGgK,qBAAsB5L,MACrDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGiK,sBAAuB7L,MACtDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAG4J,qBAAsBxL,MACrDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGwJ,kBAAmBpL,MAClDA,KAAK64O,WAAWljN,YAAY3N,EAAApmB,QAAGmK,cAAe/L,MAG3CqoB,cACH,OAAOroB,KAAKopM,KAAKgyC,cAGd/yN,iBACH,OAAOroB,KAAKopM,KAAK23C,SAGd14N,gBAAuBroB,KAAKopM,KAAKrhJ,QAGjC1/B,cACH,QAAIroB,KAAK2jM,UAAU5mL,YACD/c,KAAK2jM,UACCrgK,WACPs5M,cAMdv0N,YACH,OAAOroB,KAAKghP,WAGT34N,UAAUtkB,GACb/D,KAAKghP,WAAaj9O,EAOfskB,kBACH,OAAOroB,KAAKygP,cAAcl/O,OAGvB8mB,SAAStQ,GACZ,OAAO/X,KAAKwgP,UAAUthP,eAAe6Y,EAAMjB,SAIxCuR,YACH,OAAOtqB,OAAOutC,OAAOtrC,KAAKwgP,WAKvBn4N,aACH,OAAO,EAGJA,cAActQ,GAEjB,OADc/X,KAAKygP,cAAc1gO,QAAQhI,EAAMjB,UAC/B,EAQbuR,eACH,OAA0B,OAAnBroB,KAAKg+L,WACRh+L,KAAKg+L,UAAUijD,YAGhB54N,kBACHroB,KAAKg+L,UAAY,KAGd31K,eAAetQ,EAAcqqE,GAChCpiF,KAAKkhP,eAAiBnpO,EAAMjB,QAC5B9W,KAAKm3C,aAAeirC,EACpBpiF,KAAKmoC,OAAOw4M,aAAe,GAC3B3gP,KAAKmoC,OAAOy4M,cAAe,EAKxBv4N,sBAAsB21K,GACzB,OAAIA,EAAU77G,UAAYniF,KAAKkhP,iBAGtBlhP,KAAKmoC,OAAOy4M,eACb5gP,KAAKm3C,aAAa9sC,QAASvK,IACvBE,KAAKmoC,OAAOw4M,aAAa7gP,EAAK+xB,aAAc,IAEhD7xB,KAAKmoC,OAAOy4M,cAAe,GAIxB5iD,EAAUmjD,SAASnhP,KAAKmoC,OAAOw4M,eAKvCt4N,mBACaroB,KAAK6gP,OAAO3iP,IAAI,aACxBi/O,mBAGL90N,oBACaroB,KAAK6gP,OAAO3iP,IAAI,aACxBk/O,oBAKL/0N,cAAczqB,EAAMwG,GAEvB,MAAMg9O,EAAc,IAAIv5H,EAAK8D,UAAU,IACnCvnH,EAAIg4L,OAAOv9L,KAAKuF,IAAM,EAAM,GAChCpE,KAAK+2L,SAASqqD,GAIX/4N,iBAAiBjkB,EAAgBi9O,EAAW,KAE/C,MAAMD,EAAc,IAAIv5H,EAAK8D,UAAU01H,EACnCj9O,EAAIg4L,OAAOv9L,KAAKuF,IAAM,EAAM,GAChCpE,KAAK+2L,SAASqqD,GAIX/4N,gBACH,MAAMmN,EAAWx1B,KAAKshP,cACtB,IAAI9pN,EAAa,GAKjB,OAJAhC,EAASnrB,QAAQub,IACb,MAAM27N,EAAMxjP,OAAO6qB,KAAKhD,EAAIY,iBAC5BgR,EAAaA,EAAWnmB,OAAOkwO,EAAIlsO,IAAIwB,GAAMV,SAASU,EAAI,QAEvD2gB,EAIJnP,cACH,MAAMuE,EAAkB5sB,KAAK+gG,YAC7B,IAAIvrE,EAAW,GAMf,OALA5I,EAAOviB,QAAQ0N,IAGXyd,GADAA,GADAA,EAAWA,EAASnkB,OAAO0G,EAAMzN,cACb+G,OAAO0G,EAAM2C,aACbrJ,OAAO0G,EAAM4V,iBAE9B6H,EAKJnN,eAAejkB,GASlB,IARApE,KAAKwhP,cAAcp9O,GACnBpE,KAAKghP,WAAahhP,KAAK2jM,UACvB3jM,KAAK2jM,UAAY3jM,KAAKyhP,eAGtBzhP,KAAK6gP,OAAOa,qBAGJ1hP,KAAK2jM,UAAU5mL,aAAe/c,KAAK+5O,cAAc,CACrD,MAAM3xH,EAASpoH,KAAK2jM,UAAU73E,aAM9B,GALA9rH,KAAK2hP,SAASv5H,GAEdpoH,KAAK6gP,OAAOe,gBAEZ5hP,KAAK2jM,UAAY3jM,KAAKyhP,eAClBz5N,EAAApmB,QAAG6D,cAAc,CAACzF,KAAK2jM,YAAa,CACpC37K,EAAApmB,QAAGK,IAAI,cAAe,iBAClB,mCACJ,OAGHjC,KAAK+5O,cACN/5O,KAAKo6O,UAAUp6O,KAAK2jM,WAKrBt7K,oBACHroB,KAAK6gP,OAAOa,oBAGTr5N,cAAcjkB,GACjB,IAAkC,IAA9BpE,KAAK2jM,UAAU5mL,WAAsB,CACrC,IAAI1Y,EAAM,GAENA,EADArE,KAAK2jM,UAAUzkM,eAAe,WACxB,kCAIA,yBADQc,KAAK2jM,UACoBjiM,UAE3C2C,GAAO,KAAOwa,KAAKC,UAAU9e,KAAK2jM,WAClC37K,EAAApmB,QAAGK,IAAI,SAAU,gBAAiBoC,GAEtC,MAAM+jH,EAASpoH,KAAK2jM,UAAU73E,WAAW1nH,GACzCpE,KAAK2hP,SAASv5H,GACdpoH,KAAK6gP,OAAOe,gBACZ5hP,KAAK65O,sBAAsB75O,KAAK2jM,WAI7Bt7K,aAAawnE,EAAS,GACzB,IAAK,IAAIxyF,EAAI,EAAGA,EAAIwyF,EAAQxyF,IAGxB,GAFA2C,KAAK2jM,UAAY3jM,KAAKyhP,eAEjBzhP,KAAK2jM,UAAU5mL,WAMhBiL,EAAApmB,QAAGK,IAAI,SAAU,eACb,iCAPwB,CAC5B,MAAMmmH,EAASpoH,KAAK2jM,UAAU73E,aAC9B9rH,KAAK2hP,SAASv5H,GACdpoH,KAAK6gP,OAAOe,iBAWjBv5N,SAAStQ,GACZ,MAAMlB,EAAKkB,EAAMjB,QACZ9W,KAAKwgP,UAAUthP,eAAe2X,GAI/BmR,EAAApmB,QAAGK,IAAI,cAAe,WAClB,YAAc4U,EAAK,oBAJvB7W,KAAKwgP,UAAUzoO,EAAMjB,SAAWiB,EAUjCsQ,aAAauE,GAChBA,EAAOviB,QAAQ0N,IACX,MAAMlB,EAAKkB,EAAMjB,QACjB,GAAI9W,KAAKwgP,UAAUthP,eAAe2X,GAAK,CACnC,MAAMqI,EAAQlf,KAAKygP,cAAc1gO,QAAQlJ,GACzC,GAAIqI,GAAS,EAAG,CACZlf,KAAKygP,cAAc/zN,OAAOxN,EAAO,GAEjC,MAAM2iO,EAAe7hP,KAAKwgP,UAAU3pO,GACpC,GAAIgrO,EAAc,CACd,MAAMC,EAAYD,EAAav3O,YAC/B,IAAK,IAAIjN,EAAI,EAAGA,EAAIykP,EAAUvgP,OAAQlE,IAClCykP,EAAUzkP,GAAGa,IAAI,UAAUi3E,kBAIhCn1E,KAAKwgP,UAAU3pO,QAGtBmR,EAAApmB,QAAGK,IAAI,cAAe,mCACE4U,OAM7BwR,eAAetQ,GAClB,MAAMoqE,EAAUpqE,EAAMjB,QAChBoI,EAAQlf,KAAKygP,cAAc1gO,QAAQoiE,GAGzC,GAAIniF,KAAKygP,cAAcl/O,SAAYymB,EAAApmB,QAAoB,kBACnD,IAAe,IAAXsd,EAAc,CACd,MAAM6iO,EAAiB/hP,KAAKygP,cAAc78L,MACpCi+L,EAAe7hP,KAAKwgP,UAAUuB,GACpC,GAAIF,EAAc,CACd,MAAMC,EAAYD,EAAav3O,YAC/B,IAAK,IAAIjN,EAAI,EAAGA,EAAIykP,EAAUvgP,OAAQlE,IAAK,CACvC,MAAMwsM,EAAai4C,EAAUzkP,GAAGa,IAAI,UAChC2rM,GACAA,EAAW10H,UAGnBntD,EAAApmB,QAAGuC,MAAMnE,KAAM,6CAEd,CACD,MAAMgiP,EAAWjkP,OAAO6qB,KAAK5oB,KAAKwgP,WAAWt8N,KAAK,MAClD8D,EAAApmB,QAAGK,IAAI,cAAe,8CACW8/O,oCACtBC,WAIfhiP,KAAKygP,cAAc/zN,OAAOxN,EAAO,GACjClf,KAAKygP,cAAcr7L,QAAQ+8B,GAC3Bn6D,EAAApmB,QAAGuC,MAAMnE,KAAM,8CAKvB,IAAe,IAAXkf,EAAc,CACdlf,KAAKygP,cAAcr7L,QAAQ+8B,GAC3B,MAAM8/J,EAAYlqO,EAAMzN,YACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIy3O,EAAU1gP,OAAQiJ,IAAK,CACvC,MAAMq/L,EAAao4C,EAAUz3O,GAAGtM,IAAI,UAChC2rM,GACAA,EAAW95J,WAMpB1nB,OAAOyN,EAAS3wB,GACnB,GAAI2wB,IAAY9N,EAAApmB,QAAGsJ,iBAAkB,CACjC,MAAMpE,EAAO3B,EAAK2B,KAGJA,EAAKkwC,WAAWA,WACnBvvC,WAAWqT,WAAWhU,IAC7BkhB,EAAApmB,QAAGK,IAAI,cAAe,wBAClB,8CAGP,GAAI6zB,IAAY9N,EAAApmB,QAAG8J,mBAChBvG,EAAKjG,eAAe,SACpBc,KAAK+tB,SAAS5oB,EAAK8E,OAGnB+d,EAAApmB,QAAGK,IAAI,cAAe,0BAClB,0CAGP,GAAI6zB,IAAY9N,EAAApmB,QAAG+J,qBAChBxG,EAAKjG,eAAe,SACpBc,KAAK8tB,YAAY3oB,EAAK8E,OAGtB+d,EAAApmB,QAAGK,IAAI,cAAe,4BAClB,0CAGP,GAAI6zB,IAAY9N,EAAApmB,QAAGgK,qBAChBzG,EAAKjG,eAAe,SACpBc,KAAK+tB,SAAS5oB,EAAK8E,OAGnB+d,EAAApmB,QAAGK,IAAI,cAAe,4BAClB,0CAGP,GAAI6zB,IAAY9N,EAAApmB,QAAGiK,sBAChB1G,EAAKjG,eAAe,SACpBc,KAAK8tB,YAAY3oB,EAAK8E,OAGtB+d,EAAApmB,QAAGK,IAAI,OAAQ,6BACX,0CAGP,GAAI6zB,IAAY9N,EAAApmB,QAAG4J,qBACE,WAAlBrG,EAAKxE,UACDX,KAAKkiP,cAAc/8O,EAAK4S,QAExB5S,EAAKf,IAAIlG,IAAI,UAAU6xC,cAI9B,GAAIja,IAAY9N,EAAApmB,QAAGwJ,kBAAmB,CACvC,MAAMnB,EAAQ9E,EAAK8E,MACfA,EAAM8S,aACN/c,KAAKu6O,eAAetwO,EAAMP,YAC1BvE,EAAKqW,IAAI2mO,SACTh9O,EAAKqW,IAAI4mO,cACTj9O,EAAKia,OAAOwkM,UACZz+M,EAAKia,OAAOo7N,qBAGX1kN,IAAY9N,EAAApmB,QAAGmK,eAChB/L,KAAKqiP,sBAAsBl9O,EAAK64L,YAC5Bh+L,KAAK88O,oBACD98O,KAAKg+L,UACLh+L,KAAKg+L,UAAUiB,QAAQ95L,EAAK64L,WAG5Bh+L,KAAKg+L,UAAY74L,EAAK64L,UAE1Bh+L,KAAK88O,kBAAkB98O,KAAKg+L,YAQrC31K,OAAOjkB,GACV,GAAKpE,KAAK+5O,aAqBN/5O,KAAKq7O,gBACLr7O,KAAK64O,WAAW/wN,UAAUE,EAAApmB,QAAGuJ,QAAS,CAAC9G,IAAK,eAC5CrE,KAAK87O,aAAa,UApBlB,GAFA97O,KAAKq7O,gBAEkB,OAAnBr7O,KAAK2jM,UACL,GAAIv/L,EAAIlF,eAAe,QAAS,CAC5B,MAAMwyG,EAAOttG,EAAIstG,MACZ1xG,KAAK48O,eAAiB58O,KAAK05O,aAAahoI,IACzC1xG,KAAK25O,aAAajoI,GAClB1xG,KAAK65O,sBAAsB75O,KAAK2jM,YAGhC3jM,KAAKsiP,eAAe,CAAC5wI,cAIzB1xG,KAAKsiP,eAAel+O,GAiB7BikB,eACH,OAAOroB,KAAKwwD,WAAWV,OAIpBznC,SAASpe,GACZjK,KAAKwwD,WAAWlwC,IAAIrW,GAAO,EAAM,GAI9Boe,YAAYpe,GACfjK,KAAKwwD,WAAW92B,OAAOzvB,GAIpBoe,SAASkzN,GACZ,MAAM1rL,EAAS0rL,EAAUxvH,YACnB3oE,EAASm4L,EAAUtvH,YACzBjsH,KAAKwwD,WAAWlwC,IAAIi7N,EAAW1rL,EAAQzM,GAIpC/6B,SAAS+/F,GAGZ,GAFApoH,KAAKwwD,WAAWi8D,UAAUrE,GAC1BA,EAAOu5H,WACHv5H,EAAOlpH,eAAe,WAClBkpH,EAAOlpH,eAAe,SAAU,CAChC,MAAM+K,EAAQm+G,EAAOn+G,MACjBA,EAAMf,IAAI,WACVe,EAAM/L,IAAI,UAAU82E,UAAUozC,EAAOx5G,8KCjiBzD,MAAAoZ,EAAAC,EAAAhrB,EAAA,IACAslP,EAAAtlP,EAAA,KAUA,MAAa6jP,EAKFz4N,uBAAuBm6N,EAAQC,GAClC,MAAMvjO,EAAQ4hO,EAAc4B,YAAY3iO,QAAQ0iO,GAC5CvjO,GAAS,GACT4hO,EAAc6B,eAAezjO,EAAOsjO,GAIrCn6N,sBAAsBm6N,EAAQI,GACjC,MAAM1jO,EAAQ4hO,EAAc4B,YAAY3iO,QAAQ6iO,GAC5C1jO,GAAS,GACT4hO,EAAc6B,eAAezjO,EAAQ,EAAGsjO,GAIzCn6N,oBAAoBm6N,UAChB1B,EAAc+B,QAAQL,GAC7B,MAAMtjO,EAAQ4hO,EAAc4B,YAAY3iO,QAAQyiO,GAC5CtjO,GAAS,GACT4hO,EAAc4B,YAAYh2N,OAAOxN,EAAO,GAIzCmJ,sBAAsBnJ,EAAOsjO,GAChC1B,EAAc4B,YAAYh2N,OAAOxN,EAAO,EAAGsjO,EAAO5kP,MACrB,mBAAlB4kP,EAAO7jP,OACV6jP,EAAO5kP,KACPkjP,EAAc+B,QAAQL,EAAO5kP,MAAQ4kP,EAGrCx6N,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,wBAIR+lB,EAAApmB,QAAGK,IAAI,gBAAiB,iBACpB,qCAWZomB,YAAYq0N,EAAQnnN,GAChBv1B,KAAKg5O,QAAU0D,EAQf18O,KAAK0iP,YAAc5B,EAAc4B,YAEjC,MAAMI,EAAS,GACf/kP,OAAO6qB,KAAKk4N,EAAc+B,SAASx4O,QAAQzM,IACvC,MAAMwiB,EAAQ0gO,EAAc+B,QAAQjlP,GACpC,GAAKwiB,EAAuBzhB,OAAQ,CAChC,MAAM67M,EAAap6L,EACnB0iO,EAAOllP,GAAQ48M,EAAW77M,OAAO67M,EAAWp6L,MAAOmV,QAE9ChiB,MAAMC,QAAQ4M,KACfmiO,EAAAQ,OAAOnlP,GACPklP,EAAOllP,GAAQ,IAAI2kP,EAAAQ,OAAOnlP,GAAMwiB,EAAOmV,GAGvCvN,EAAApmB,QAAGK,IAAI,gBAAiB,gBACVrE,2BAI1BoC,KAAK6iP,QAAUC,EAGf9iP,KAAKgjP,gBAAkB,CAAC,UACxBhjP,KAAKijP,YAAc,GACnBjjP,KAAKijP,YAAYvtK,OAAS,IAAI6sK,EAAAQ,OAAOrtK,OAAO,CAAC,SAAU,UAAWngD,GAGlEv1B,KAAKkjP,YAAc,GAEnB,MAAMr8M,EAAU,IAAI07M,EAAAQ,OAAOI,YACvB,CAAC,aAAc,SAAU,SAAU,OAAQ,WAAY,eACnD,eAAgB5tN,GAGxBv1B,KAAKkjP,YAAYC,YAAct8M,EAC/B7mC,KAAKg5O,QAAQoK,cAAc,cAAev8M,GAGvCxe,IAAItmB,GACP,OAAI/B,KAAK6iP,QAAQ3jP,eAAe6C,GACrB/B,KAAK6iP,QAAQ9gP,GAGjB,KAGJsmB,gBACH,IAAK,IAAIhrB,EAAI,EAAGA,EAAI2C,KAAK0iP,YAAYnhP,OAAQlE,IAAK,CAC9C,MAAMgmP,EAAUrjP,KAAK0iP,YAAYrlP,GACjC2C,KAAK6iP,QAAQQ,GAASjnD,UAIvB/zK,oBACH,IAAK,IAAIhrB,EAAI,EAAGA,EAAI2C,KAAKgjP,gBAAgBzhP,OAAQlE,IAAK,CAClD,MAAMgmP,EAAUrjP,KAAKgjP,gBAAgB3lP,GACrC2C,KAAKijP,YAAYI,GAASjnD,UAK3B/zK,OAAOC,GACVvqB,OAAOutC,OAAOtrC,KAAK6iP,SAASx4O,QAAQm4O,IAChCA,EAAOlqH,OAAOhwG,MA3H1BnrB,EAAA2jP,gBAgIAA,EAAc4B,YAAc,CACxB,cAAe,aAAc,aAAc,aAC3C,QAAS,SAAU,OAAQ,OAAQ,YAAa,cAChD,UAAW,WAAY,UAAW,YAAa,SAAU,SACzD,SAAU,QAAS,YAAa,gBAAiB,SACjD,WAUJ5B,EAAc+B,QAAU,CACpBS,WAAY,CAAC,OAAQ,YAAa,aAClCniK,WAAY,CAAC,cACboiK,WAAY,CAAC,SAAU,YAAa,WAAY,UAAW,aACvD,OAAQ,OAAQ,OAAQ,QAC5BxqK,KAAM,CAAC,QACP59C,KAAM,CAAC,eACP09C,OAAQ,CAAC,UACTh0C,QAAS,CAAC,WACVi0C,SAAU,CAAC,YACXrC,OAAQ,CAAC,SAAU,UACnBwhF,OAAQ,CAAC,aAAc,eACvBz2E,OAAQ,CAAC,aACTgiK,OAAQ,CAAC,SACTC,YAAa,CAAC,SACd3/J,MAAO,CAAC,SACRnD,UAAW,CAAC,YAAa,cACzB+iK,YAAa,CAAC,WAAY,YAAa,eAAgB,YACnD,aACJ33M,QAAS,CAAC,WACV04C,UAAW,CAAC,aACZvN,UAAW,CAAC,YAAa,cACzBwD,cAAe,CAAC,iBAChBgO,MAAO,CAAC,YAAa,iBAAkB,oBACvCv0C,QAAS,CAAC,qLCnLd,MAAAnsB,EAAAC,EAAAhrB,EAAA,IAIaE,EAAA4lP,OAAc,GAE3B,MAAA9gH,EAAAhlI,EAAA,GACA,IAAA0mP,EAAA1mP,EAAA,GAAQE,EAAAo3B,WAAAovN,EAAApvN,WACRp3B,EAAA4lP,OAAOrrN,KAAOuqG,EAAA1tG,WAEd,MAAAqvN,EAAA3mP,EAAA,IACA,IAAA4mP,EAAA5mP,EAAA,IAAQE,EAAAsgM,gBAAAomD,EAAApmD,gBACRtgM,EAAA4lP,OAAOt+J,UAAYm/J,EAAAnmD,gBAEnB,MAAAqmD,EAAA7mP,EAAA,IACA,IAAA8mP,EAAA9mP,EAAA,IAAQE,EAAA+hM,kBAAA6kD,EAAA7kD,kBACR/hM,EAAA4lP,OAAOU,YAAcK,EAAA5kD,kBAErB,MAAA8kD,EAAA/mP,EAAA,IACA,IAAAgnP,EAAAhnP,EAAA,IAAQE,EAAAwiM,aAAAskD,EAAAtkD,aACRxiM,EAAA4lP,OAAOlqK,OAASmrK,EAAArkD,aAEhB,MAAAukD,EAAAjnP,EAAA,IACA,IAAAknP,EAAAlnP,EAAA,IAAQE,EAAAilM,iBAAA+hD,EAAA/hD,iBACRjlM,EAAA4lP,OAAOQ,WAAaW,EAAA9hD,iBAEpB,MAAAgiD,EAAAnnP,EAAA,IACA,IAAAonP,EAAApnP,EAAA,IAAQE,EAAAunM,aAAA2/C,EAAA3/C,aACRvnM,EAAA4lP,OAAO9qF,OAASmsF,EAAA1/C,aAEhB,MAAA4/C,EAAArnP,EAAA,IACA,IAAAsnP,EAAAtnP,EAAA,IAAQE,EAAAioM,WAAAm/C,EAAAn/C,WACRjoM,EAAA4lP,OAAOhqK,KAAOurK,EAAAl/C,WAEd,MAAAo/C,EAAAvnP,EAAA,IACA,IAAAwnP,EAAAxnP,EAAA,IAAQE,EAAAopM,oBAAAk+C,EAAAl+C,oBACRppM,EAAA4lP,OAAOroK,cAAgB8pK,EAAAj+C,oBAEvB,MAAAm+C,EAAAznP,EAAA,IACA,IAAA0nP,EAAA1nP,EAAA,IAAQE,EAAA8pM,aAAA09C,EAAA19C,aACR9pM,EAAA4lP,OAAOtsK,OAASiuK,EAAAz9C,aAEhB,MAAA29C,EAAA3nP,EAAA,IACA,IAAA4nP,EAAA5nP,EAAA,IAAQE,EAAAksM,iBAAAw7C,EAAAx7C,iBACRlsM,EAAA4lP,OAAOO,WAAasB,EAAAv7C,iBAEpB,MAAApH,EAAAhlM,EAAA,IACA,IAAA6nP,EAAA7nP,EAAA,IAAQE,EAAAw1K,cAAAmyE,EAAAnyE,cACRx1K,EAAA4lP,OAAOh3M,QAAUk2J,EAAAtvB,cAEjB,MAAAoyE,EAAA9nP,EAAA,IACA,IAAA+nP,EAAA/nP,EAAA,IAAQE,EAAA0tM,YAAAm6C,EAAAn6C,YACR1tM,EAAA4lP,OAAOj/J,MAAQihK,EAAAl6C,YAEf,MAAAo6C,EAAAhoP,EAAA,IACA,IAAAioP,EAAAjoP,EAAA,IAAQE,EAAA+tM,aAAAg6C,EAAAh6C,aACR/tM,EAAA4lP,OAAOS,OAASyB,EAAA/5C,aAEhB,MAAAi6C,EAAAloP,EAAA,KACA,IAAAmoP,EAAAnoP,EAAA,KAAQE,EAAAkvM,gBAAA+4C,EAAA/4C,gBACRlvM,EAAA4lP,OAAO7rK,UAAYiuK,EAAA94C,gBAEnB,MAAAg5C,EAAApoP,EAAA,KACA,IAAAqoP,EAAAroP,EAAA,KAAQE,EAAAsvM,aAAA64C,EAAA74C,aACRtvM,EAAA4lP,OAAOrtK,OAAS2vK,EAAA54C,aAEhB,MAAA84C,EAAAtoP,EAAA,KACA,IAAAuoP,EAAAvoP,EAAA,KAAQE,EAAAwvM,cAAA64C,EAAA74C,cACRxvM,EAAA4lP,OAAOl+M,QAAU0gN,EAAA54C,cAEjB,MAAA84C,EAAAxoP,EAAA,KACA,IAAAyoP,EAAAzoP,EAAA,KAAQE,EAAAgxM,eAAAu3C,EAAAv3C,eACRhxM,EAAA4lP,OAAOjqK,SAAW2sK,EAAAt3C,eAElB,MAAAjM,EAAAjlM,EAAA,IACA,IAAA0oP,EAAA1oP,EAAA,IAAQE,EAAAglI,YAAAwjH,EAAAxjH,YACRhlI,EAAA4lP,OAAOr6J,MAAQw5G,EAAA//D,YAEf,MAAAyjH,EAAA3oP,EAAA,KACA,IAAA4oP,EAAA5oP,EAAA,KAAQE,EAAA2zM,WAAA+0C,EAAA/0C,WACR3zM,EAAA4lP,OAAO5nN,KAAOyqN,EAAA90C,WAEd,MAAAg1C,EAAA7oP,EAAA,KACA,IAAA8oP,EAAA9oP,EAAA,KAAQE,EAAAs0M,aAAAs0C,EAAAt0C,aACRt0M,EAAA4lP,OAAOvhK,OAASskK,EAAAr0C,aAEhB,MAAAu0C,EAAA/oP,EAAA,KACA,IAAAgpP,EAAAhpP,EAAA,KAAQE,EAAA40M,gBAAAk0C,EAAAl0C,gBACR50M,EAAA4lP,OAAOpiK,UAAYqlK,EAAAj0C,gBAEnB,MAAAm0C,EAAAjpP,EAAA,KACA,IAAAkpP,EAAAlpP,EAAA,KAAQE,EAAAy1M,kBAAAuzC,EAAAvzC,kBACRz1M,EAAA4lP,OAAOW,YAAcwC,EAAAtzC,kBAErB,MAAAwzC,EAAAnpP,EAAA,KACA,IAAAopP,EAAAppP,EAAA,KAAQE,EAAAw2M,iBAAA0yC,EAAA1yC,iBACRx2M,EAAA4lP,OAAO5hK,WAAailK,EAAAzyC,iBAEpB,MAAA2yC,EAAArpP,EAAA,KACA,IAAAspP,EAAAtpP,EAAA,KAAQE,EAAA+2M,kBAAAqyC,EAAAryC,kBACR/2M,EAAA4lP,OAAOI,YAAcmD,EAAApyC,kBAErB,MAAAsyC,EAAAvpP,EAAA,KACA,IAAAwpP,GAAAxpP,EAAA,KAAQE,EAAAq4M,cAAAixC,GAAAjxC,cACRr4M,EAAA4lP,OAAO5uM,QAAUqyM,EAAAhxC,cAIjBr4M,EAAA4lP,OAAO2D,aAAe,SAASrD,GAC3B,MAAMsD,EAAWtD,EAAQ3vO,cACzBsU,EAAApmB,QAAGqgB,IAAI0kO,GAAYvoP,SAEnB,MAAMwoP,EAAa,cAAc3kH,EAAA1tG,WAE7BlM,YAAYiN,KAAculE,GACtB3jE,MAAMlP,EAAApmB,QAAGqgB,IAAI0kO,GAAWrxN,GACpBt1B,KAAKy1E,OAA+B,mBAAfz1E,KAAKy1E,OAC1Bz1E,KAAKy1E,MAAMngD,KAAculE,KAQrC,OADA19F,EAAA4lP,OAAOM,GAAWuD,EACXA,GAIXzpP,EAAA4lP,OAAO8D,eAAiB,SAASxD,GAC7B,MAAMsD,EAAWtD,EAAQ3vO,qBAClBsU,EAAApmB,QAAGqgB,IAAI0kO,UACPxpP,EAAA4lP,OAAOM,mFC9GlBlmP,EAAAsnF,UAAA,MAWIp8D,cACIroB,KAAKmiF,SAAW,EAChBniF,KAAK8mP,UAAY,EACjB9mP,KAAK+mP,UAAY,EAGjB/mP,KAAKy+L,SAAW,EAEhBz+L,KAAKgnP,OAAS,GAGlB3+N,SAAStQ,GACL/X,KAAKmiF,QAAUpqE,EAAMjB,QAGzBuR,SAAS61K,GACL,IAAK,IAAI7gM,EAAI,EAAGA,EAAI2C,KAAKy+L,SAAUphM,MAC7B2C,KAAK8mP,UACP9mP,KAAKgnP,OAAOphP,KAAKs4L,GAKzB71K,YAEI,OADcroB,KAAKgnP,OAAOhnP,KAAK+mP,aAInC1+N,YACI,OAAOroB,KAAK+mP,UAAY/mP,KAAKgnP,OAAOzlP,OAIxC8mB,QAAQ21K,GACJ,IAAIipD,EAAa,EACjB,KAAOjpD,EAAUijD,aAAa,CAC1B,MAAM/iD,EAAQF,EAAUk/C,YACxB,GAAI+J,EAAajnP,KAAKgnP,OAAOzlP,OAAQ,CACjC,MAAM2lP,EAAYnpP,OAAO6qB,KAAKs1K,GAC9B,IAAK,IAAI7gM,EAAI,EAAGA,EAAI6pP,EAAU3lP,OAAQlE,IAAK,CACvC,MAAMiuB,EAAK47N,EAAU7pP,GACrB2C,KAAKgnP,OAAOC,GAAY37N,GAAM4yK,EAAM5yK,SAIxCtrB,KAAKgnP,OAAOphP,KAAKs4L,KAEnB+oD,GAMV5+N,SAAS45I,GACL,MAAMklF,EAAUnnP,KAAKgnP,OAAOzlP,OAC5B,IAAK,IAAIzC,EAAI,EAAGA,EAAIqoP,EAASroP,IAAK,CAC9B,MAAMo/L,EAAel+L,KAAKgnP,OAAOloP,GACjC,IAAK,MAAMF,KAAOs/L,EACd,GAAIj8B,EAASrjK,GACT,OAAO,EAInB,OAAO,uKChGf,MAAAopB,EAAAC,EAAAhrB,EAAA,IASAE,EAAAujP,eAAA,MAOIr4N,YAAYkN,GACRv1B,KAAKonP,SAAW,KAChBpnP,KAAKk1J,UAAY,GACjBl1J,KAAKqnP,cAAgB,GACrBrnP,KAAKsnP,SAAU,EACftnP,KAAK01B,WAAY,EACjBH,EAAKI,YAAY3N,EAAApmB,QAAGuJ,QAASnL,MAG1BqoB,OAAOyN,EAAiBzxB,GAC3B,GAAIyxB,IAAY9N,EAAApmB,QAAGuJ,SACX9G,EAAInF,eAAe,OAAQ,CAC3B,MAAMyoB,EAAmB,CAACtjB,IAAKA,EAAIA,IAAKojB,MAAO,OAAQlI,MAAO,GAE1Dlb,EAAInF,eAAe,UACnByoB,EAAO7nB,KAAOuE,EAAIvE,MAGlBuE,EAAInF,eAAe,WACnByoB,EAAOF,MAAQpjB,EAAIojB,OAGnBznB,KAAKonP,UAAYpnP,KAAKonP,SAAS/iP,MAAQsjB,EAAOtjB,IAC9CrE,KAAKonP,SAAS7nO,OAAS,GAGvBvf,KAAKonP,SAAWz/N,EAChB3nB,KAAKk1J,UAAUtvJ,KAAK+hB,IAExB3nB,KAAKsnP,SAAU,GAKpBj/N,SAAmB,OAAOroB,KAAKsnP,QAE/Bj/N,cAEH,OADAroB,KAAKsnP,SAAU,EACXtnP,KAAKk1J,UAAU3zJ,OAAS,EAAWvB,KAAKk1J,UACnCl1J,KAAKqnP,cAAc9lP,OAAS,EAAWvB,KAAKqnP,cACxC,GAGVh/N,QACCroB,KAAKk1J,UAAU3zJ,OAAS,IAAIvB,KAAKqnP,cAAgBrnP,KAAKk1J,UAAUpsI,SACpE9oB,KAAKk1J,UAAY,iVC7DzB,MAAAltI,EAAAC,EAAAhrB,EAAA,IAEAsqP,EAAAtqP,EAAA,KAEAujK,EAAAvjK,EAAA,IACAq4I,EAAAr4I,EAAA,IACAogB,EAAApgB,EAAA,GAOAo3B,EAAAp3B,EAAA,GACAktB,EAAAiK,EAAAn3B,EAAA,IAGMkH,EADMlH,EAAQ,EACNq3B,CAAI,mBAEZvN,EAAOsN,EAAArN,UAAUC,UACjBwB,EAAMpL,EAAAC,OAAOC,SAWnBpgB,EAAA+7O,WAAA,MAaI7wN,YAAYy4E,EAAMvrE,EAAOxO,GACrB/mB,KAAK+D,OAAS,KACd/D,KAAK8gG,KAAOA,EACZ9gG,KAAKg7H,KAAO,IAAIusH,EAAAC,cAChBxnP,KAAKu1B,KAAOA,EAGZv1B,KAAK61L,QAAU,GACf71L,KAAKi2L,YAAc,GACnBj2L,KAAK01B,WAAY,EAEjB11B,KAAKu1B,KAAKI,YAAY3N,EAAApmB,QAAGwJ,kBAAmBpL,MAC5CA,KAAKu1B,KAAKI,YAAY3N,EAAApmB,QAAG0J,iBAAkBtL,MAC3CA,KAAKu1B,KAAKI,YAAY3N,EAAApmB,QAAGqK,gBAAiBjM,MAC1CA,KAAKu1B,KAAKI,YAAY3N,EAAApmB,QAAGoK,kBAAmBhM,MAGhDqoB,WAAWwtK,GACP71L,KAAK61L,QAAUA,EAGnBxtK,QAAQkN,GAAOv1B,KAAKu1B,KAAOA,EAC3BlN,QAAQy4E,GAAO9gG,KAAK8gG,KAAOA,EAE3Bz4E,UAAUtkB,GACN/D,KAAK+D,OAASA,EAGlBskB,SAASmxG,GAAQx5H,KAAKw5H,MAAQA,EAE9BnxG,OAAOyN,EAAiB3wB,GACpB,GAAI2wB,IAAY9N,EAAApmB,QAAGwJ,kBAAmB,CAClCjH,EAAM,qBACN,MAAM8F,MAACA,GAAS9E,EACZ8E,EAAM8S,aACD9S,EAAMf,IAAI,YAIXlJ,KAAKynP,uBAAuBtiP,GAH5BnF,KAAK0nP,uBAAuBviP,SAOnC,GAAI2wB,IAAY9N,EAAApmB,QAAGoK,kBAAmB,CACvC7H,EAAM,qBACN,MAAMi2N,SAACA,GAAYj1N,EACfA,EAAKw6N,UACL33M,EAAApmB,QAAGK,IAAI,aAAc,0DACa4c,KAAKC,UAAU3Z,MAErD,MAAMwiP,EAAcvtB,EAAS1wN,WACvB64H,EAASviI,KAAK4nP,8BAA8BD,GAC9CplH,IACAp9H,EAAKw6N,SAAW,CAACp9F,gBAGpB,GAAIzsG,IAAY9N,EAAApmB,QAAG0J,iBAAkB,CAGtC,GAFAnH,EAAM,qBAEDnE,KAAK+D,OAEN,YADAI,EAAM,uCAGVA,EAAM,sCACN,MAAMwjP,EAAc3nP,KAAK+D,OAAO2F,WAChC1J,KAAK4nP,8BAA8BD,QAElC,GAAI7xN,IAAY9N,EAAApmB,QAAG2J,uBAEpByc,EAAApmB,QAAGgD,KAAK,2BAEP,GAAIkxB,IAAY9N,EAAApmB,QAAGqK,gBAAiB,CACrC,MAAMs2H,OAACA,GAAUp9H,EACjBhB,sBAA0Bo+H,EAAO7gI,aACjC,MAAMmV,EAAK0rH,EAAO74H,WAAWoN,QAG7B,GADA3S,wBAA4B0S,MAAO7W,KAAKi2L,YAAYp/K,OAC/C7W,KAAKi2L,YAAYp/K,IAAO0rH,EAAQ,CACjCp+H,wBAA4B0S,MAAO7W,KAAKi2L,YAAYp/K,MACpD7W,KAAKi2L,YAAYp/K,IAAM,EACvB1S,wBAA4B0S,MAAO7W,KAAKi2L,YAAYp/K,MACpD7W,KAAK6nP,mBAAmBtlH,GACxBviI,KAAK8nP,sBAAsBvlH,GAC3B,MAAM14F,EAAQ04F,EAAO7gI,UACrBsmB,EAAApmB,QAAGslB,kBAAkB2iB,kBAEpB,CACD,MAAMjrB,EAAOC,KAAKC,UAAU3Z,GAC5B6iB,EAAApmB,QAAGK,IAAI,cAAe,iBACV2c,+BAEhBza,EAAM,sCAOdkkB,aAAaq6I,EAAI3rG,EAAMgxL,EAAQ1Q,EAAOt/N,GAIlC,MAAOg6J,EAASC,GAAW,CAACtP,EAAGt5D,WAAYs5D,EAAGv5D,aACvCohE,EAAKC,GAAO6sE,GACZ2Q,EAAOC,GAAS,CAAClxL,EAAKqyC,WAAYryC,EAAKoyC,aACvClyF,EAAMC,GAAQa,EAAMusN,cAIrB4jB,EAAkBF,EAAQ/wO,EAAO86J,EACjCo2E,EAAkBF,EAAQ/wO,EAAO86J,EACjCo2E,EAAW79E,GAJWwH,EAAUi2E,GAKhCK,EAAW79E,GAJWwH,EAAUi2E,GAMtC,MAAO,CACH1+N,IAAK6+N,EAAWF,EAChB1+N,IAAK6+N,EAAWF,EAChB1+N,KAAM2+N,EAAW,GAAKF,EAAkB,EACxCx+N,KAAM2+N,EAAW,GAAKF,EAAkB,GAKhD9/N,uBAAuBljB,GACnB,MAAM8E,MAACA,EAAKmV,OAAEA,EAAM5D,IAAEA,GAAOrW,EACvBmjP,EAAQ9sO,EAAI1E,QAClB,GAAI9W,KAAK61L,QAAQ32L,eAAeopP,GAAQ,CACpC,MAAM/lH,EAASviI,KAAK63J,UAAUywF,GAC9B,GAAK/lH,EAAsBvqF,OACvB,OAEJ,MAAMuwM,EAAYhmH,EAGlB,GAFoBgmH,EAAU7+O,WAEdoN,UAAYsI,EAAOtI,QAC/B,GAAI9W,KAAKwoP,cAAcv+O,EAAOs+O,GAAY,CAEtC,MAAMniO,EAAO,IAAI+D,EAAUo4D,SAC3Bn8D,EAAKo8D,QAAQ,CAAC5kF,KAAM2qP,EAAU7mP,YAC9BuI,EAAMqW,IAAI8F,GAEV,MAAMhiB,EAAMpE,KAAKyoP,iBAAiBx+O,EAAOs+O,GACzCt+O,EAAMq5B,WAAW8mH,mBAAmBhmJ,QAE/BmkP,EAAUxvF,SACf/wI,EAAApmB,QAAGslB,QAAQ,6CAGXc,EAAApmB,QAAGslB,QAAQ,iDAO3BmB,UAAUqgO,EAAUnmH,GAChBviI,KAAK61L,QAAQ6yD,GAAU9iP,KAAK28H,GAGhCl6G,UAAUqgO,GAEN,OADe1oP,KAAK61L,QAAQ6yD,GAAU,GAI1CrgO,WAAWqgO,GACP,OAAO1oP,KAAK61L,QAAQ6yD,GAKxBrgO,cAAcpe,EAAOs4H,GACjB,OAAIA,EAAOw2B,WACP/4J,KAAK2oP,oBAAoB1+O,EAAOs4H,GAKxCl6G,uBAAuBljB,GACnB,MAAM8E,MAACA,EAAKmV,OAAEA,EAAM5D,IAAEA,GAAOrW,EACvByjP,EAASxpO,EAAOtI,QAChBwxO,EAAQ9sO,EAAI1E,QACZyrH,EAASviI,KAAK63J,UAAU+wF,GACxBC,EAActmH,EAAO74H,WAAWoN,QAGhCgyO,EADe7+O,EAAM/L,IAAI,YACCukF,UAEhC,GAAI6lK,IAAUO,EAAa,CACvB,MAAMxkP,wBAA4BikP,SAAaO,IAC/C7gO,EAAApmB,QAAGK,IAAI,aAAc,yBAA0BoC,GAInD,IAAKk+H,EAAOw2B,UAAY+vF,EAAW/wF,KAAM,CACrC,MAAM6sC,EAAQ,IAAIz6K,EAAU24D,YAC5B8hH,EAAMpiH,QAAQ,CAACQ,OAAQ,OAAQplF,KAAM2kI,EAAO7gI,UACxCq2J,KAAM+wF,EAAW/wF,OACrB9tJ,EAAMqW,IAAIskL,GACV36L,EAAMyvB,OAAO,YACbzvB,EAAMqW,IAAI,IAAI6J,EAAU04D,iBAElB0/C,EAAOw2B,UAAa+vF,EAAW/wF,MACrC9tJ,EAAMyvB,OAAO,YAKrBrR,mBAAmBk6G,GACAA,EAAOwmH,YACf1+O,QAAQ0tJ,IACX,MAAMp0J,EAASo0J,EAAKztJ,YACdi3O,EAAM59O,EAAO0R,IAAIpL,GAASA,EAAM6M,SAEtCnT,EAAO0G,QAAQJ,IACX,IAAKjK,KAAK2oP,oBAAoB1+O,EAAOs4H,GAAS,CAC1C,MAAMqiE,EAAQ,IAAIz6K,EAAU24D,YACtBgmK,EAAa,CACflrP,KAAM2kI,EAAO7gI,UACbq2J,KAAMA,EAAKr2J,UACXsnP,OAAQzH,EACRv+J,OAAQ+0E,EAAKc,aAAe,OAAS,OAEzC+rC,EAAMpiH,QAAQsmK,GACd7+O,EAAMqW,IAAIskL,GAEV36L,EAAMyvB,OAAO,YACbzvB,EAAMqW,IAAI,IAAI6J,EAAU04D,iBAMxCx6D,oBAAoBpe,EAAOs4H,GAKvB,QAJkBt4H,EAAMmrG,QAAQ,eACRlvF,KAAK4kC,GACzBA,EAAE23B,UAAU7kF,OAAS2kI,EAAO7gI,WAQpC2mB,sBAAsBk6G,GAClB,MAAMxqH,EAAQwqH,EAAO74H,WACf+3H,EAAQ1pH,EAAM6/G,iBAEf6J,GAA0B,IAAjBA,EAAMlgI,QAChBymB,EAAApmB,QAAGK,IAAI,cAAe,wBAClB,gCAGR,MACMm2B,EADOqpG,EAAM,GACMvoG,iBAEVqpG,EAAOwmH,YACf1+O,QAAQ0tJ,IACIA,EAAKztJ,YACbD,QAAQJ,IACX,GAAIA,EAAMg/O,UAAUlxO,GAEhB,GAAK9N,EAAM8S,WAWN,CACD,MAAM0uI,EAASzrJ,KAAKkpP,kBAAkBj/O,EAAO8N,GAC7C9N,EAAMq5B,WAAW8mH,mBAAmBqB,QAZpC,GAAI1zI,EAAM+V,YAAY7jB,GAClBmuB,EAAY0hL,mBAAmB7vM,OAE9B,CACD,MAAM2U,EAAOC,KAAKC,UAAU7U,EAAMwc,UAClCuB,EAAApmB,QAAGK,IAAI,cAAe,8DACoB2c,UAelEyJ,iBAAiBtkB,EAAQw+H,GACrB,MAAMg2B,EAASh2B,EAAOwmH,YAChBI,EAAc/3I,IAChB,MAAM2mD,EAAOQ,EAAOnnD,GACd8kF,EAAc3zD,EAAO74H,WAC3B,IAAI0/O,EAAarxF,EAAKztJ,YACtB,MAAM0rG,EAAUozI,EAAW7nP,OAGrB8nP,EAAgBD,EADP3gO,EAAIM,cAAc,EAAGitF,EAAU,KAEvC43D,EAAIC,GAAMw7E,EAAcztO,QAG/BytO,EAAcnrP,IAAI,UAAUi3E,UAC5B4iF,EAAKjqI,YAAYu7N,GACjBnzD,EAAYpoK,YAAYu7N,GAExBD,EAAarxF,EAAKztJ,YAClBytJ,EAAKhqI,SAAShqB,GAEdA,EAAO7F,IAAI,YAAYwkF,WAAW,CAACq1E,KAAMA,EAAKr2J,UAC9C0nP,EAAW/+O,QAAQJ,IACfA,EAAM87G,UAAUhiH,KAGpBw0J,EAAOluJ,QAAQi/O,IACPA,IAAcvxF,GACEuxF,EAAUh/O,YAClBD,QAAQuxG,IACZA,EAAMkK,SAAS/hH,OAKtBmyL,EAAYphD,YAAY/wI,EAAQ6pK,EAAIC,IACrC7lJ,EAAApmB,QAAGK,IAAI,aAAc,+CACW2rK,KAAMC,MAIxC07E,EAAUhxF,EAAOljJ,IAAI,CAAC0iJ,EAAM16J,IACvB,CAAC,SAAW06J,EAAKr2J,UAAWynP,EAAYtqP,KAAKmB,KAAM3C,KAE9DksP,EAAQ3jP,KAAK,CAAC,eAAgB0vI,EAAA5kC,KAAKC,YACnC,MAAMM,EAAO,IAAIqkC,EAAA5kC,KAAK2B,eAAek3I,GAErC,OADAt4I,EAAK0D,OAAO,kCACL1D,EAGX5oF,kBAAkBtkB,EAAQgU,GACtB,MAWMwxO,EAAU,CACd,CAAC,oBAZe,KAEhB,GADaxxO,EAAM6/G,iBAAiB,GAC1B5hF,UAAUjyC,GAIf,CACH,MAAMnG,EAAOmG,EAAOrC,UACpBsmB,EAAApmB,QAAGslB,WAAWtpB,iCALdoqB,EAAApmB,QAAGK,IAAI,aAAc,wBACnB,sCASJ,CAAC,kDAAmDqzI,EAAA5kC,KAAKC,YAErDM,EAAO,IAAIqkC,EAAA5kC,KAAK2B,eAAek3I,GAErC,OADAt4I,EAAK0D,OAAO,gDACL1D,EAIX5oF,SACI,MAAMO,EAAO7qB,OAAO6qB,KAAK5oB,KAAK61L,SACxBA,EAAU,GAwBhB,OAvBAjtK,EAAKve,QAAQwM,IACW7W,KAAKwpP,WAAW3yO,GACxBxM,QAAQk4H,IACZszD,EAAQ32L,eAAe2X,GACvBmR,EAAApmB,QAAG+C,KAAK,cAAe,0BACFkS,oBAGrBg/K,EAAQh/K,GAAM,GAGuB,mBAA7B0rH,EAAkB97G,OAC1BovK,EAAQh/K,GAAIjR,KAAM28H,EAAkB97G,UAE9B87G,EAAsB3kI,KAC5Bi4L,EAAQh/K,GAAIjR,KAAK28H,GAGjBv6G,EAAApmB,QAAGK,IAAI,aAAc,SACjB,gDAIT,CACH4zL,UACAI,YAAaj2L,KAAKi2L,aAM1B5tK,cAAcqvG,GACV,MAAM7gH,EAAK6gH,EAAU5gH,QACrB,GAAI9W,KAAK61L,QAAQ32L,eAAe2X,GAAK,CACjC,MAAMg/K,EAAU71L,KAAKwpP,WAAW3yO,GAChC7W,KAAK61L,QAAQh/K,GAAM,GACnBg/K,EAAQxrL,QAAQk4H,IACZ,GAAyC,mBAA7BA,EAAkB97G,OAAuB,CACjD,MAAM8hO,EAAYhmH,EACbgmH,EAAUxvF,UAEXwvF,EAAUxhJ,kBAEd/mG,KAAK61L,QAAQh/K,GAAIjR,KAAK2iP,EAAU9hO,eAGhCuB,EAAApmB,QAAGK,IAAI,aAAc,mCACG4U,eAMxCwR,iBAAiBmpJ,GACb,OAAQA,GACJ,KAAKhR,EAAAzhB,GAAGmC,MAAME,OACd,KAAKof,EAAAzhB,GAAGmC,MAAMG,OAAQ,MAAO,SAC7B,KAAKmf,EAAAzhB,GAAGmC,MAAMC,OAAQ,MAAO,WAC7B,KAAKqf,EAAAzhB,GAAGmC,MAAMI,MACd,QAAS,MAAO,UAIxBj5H,kBACI,MAAMuE,EAAS,GASf,OAPA7uB,OAAOutC,OAAOtrC,KAAK61L,SAASxrL,QAASo/O,IACjCA,EAAap/O,QAAQk4H,IACXA,EAAsBvqF,QACxBprB,EAAOhnB,KAAM28H,EAAkB74H,gBAIpCkjB,EAIXvE,8BAA8Bs/N,GACrBA,GACD3/N,EAAApmB,QAAGK,IAAI,aAAc,gCACjB,wBAER,MAAMymP,EAAWf,EAAY7wO,QAEvB4rJ,EAAK1iK,KAAK8gG,KAAK27I,eACrB,IAAIjkO,EAAY,EACZkxO,EAAW,GACf,MAAMC,EAAyB,GAC/B,IAAIn2J,EAAY,SAEZlqE,EAAOq+N,EAAYhnL,UAEvB,GAAI+hG,EAAI,CACJ,MACM3rG,EADQ/2D,KAAK8gG,KAAKy2F,kBACLo9C,WAAW,GACxBrpN,EAAKyrC,EAAKklL,eAAeyM,GAGzBp7N,EAAS,EACTC,EAASwpC,EAAKoyC,WAAa,EAC3Bt1F,EAAK3M,KAAKiR,IAAImV,EAAShC,EAAG,IAC1BxX,EAAK5M,KAAKiR,IAAIoV,EAASjC,EAAG,IAKhCnnB,eADsB0P,KAAMC,cAF5B41O,GAAY,GAAK51O,EAAK,GAAKD,iBAD3B2E,GAAa3E,EAAKC,KAMlB,MAAMujO,EAAQr3O,KAAK8gG,KAAKk7I,iBACxB,GAAI3E,GAASA,EAAM91O,OAAS,EAAG,CAC3B,MAAMiwK,EAAQ9O,EAAGgI,SAAS2sE,EAAM,GAAIA,EAAM,IAC1C7jJ,EAAYxzF,KAAK4pP,iBAAiBp4E,GAClCrtK,EAAM,2BAA6BmnB,GACnChC,EAAOtpB,KAAK6pP,aAAannF,EAAI3rG,EAAMzrC,EAAI+rN,EAAOsQ,IAQtD,GALAgC,EAAWnxO,UAAYA,EACvBmxO,EAAWD,SAAWA,EACtBC,EAAWn2J,UAAYA,EACvBm2J,EAAWrgO,KAAOA,GAEbtpB,KAAK61L,QAAQ32L,eAAewpP,GAAW,CACxC1oP,KAAK61L,QAAQ6yD,GAAY,GACzB,MAAMnmH,EAASviI,KAAKg7H,KAAK8uH,aAAanC,EAAagC,GAGnD,OAFA3pP,KAAK2zN,UAAU+0B,EAAUnmH,GACzBviI,KAAK8gG,KAAK6yH,UAAU3zN,KAAK63J,UAAU6wF,GAAWA,GACvCnmH,EAEX,OAAO,mVCjhBf,MAAA3V,EAAA3vH,EAAA,IAEA+qB,EAAAC,EAAAhrB,EAAA,IAEAqiH,EAAAriH,EAAA,IACA0xL,EAAA1xL,EAAA,IACAogB,EAAApgB,EAAA,GACA2lG,EAAA3lG,EAAA,IACA+yC,EAAA/yC,EAAA,GACA4qC,EAAAzT,EAAAn3B,EAAA,KACAktB,EAAAiK,EAAAn3B,EAAA,IACAk0J,EAAA/8H,EAAAn3B,EAAA,KAQMg7B,EAPN7D,EAAAn3B,EAAA,IAO8Bg7B,cAExBxP,EAAMpL,EAAAC,OAAOC,SAEbwsO,EAAW,CAAC,YAAa,QAAS,QAAS,UAAW,WACxD,SAAU,UAAW,WAAY,WAAY,UAkBjD5sP,EAAAqqP,cAAA,MAGIn/N,cACIroB,KAAKgqP,cAAgB,EAKlB3hO,aAAas/N,EAAa96N,EAAmB,IAChD,MAAM5V,EAAO4V,EAAK5V,MAAQ,GACpBC,EAAO2V,EAAK3V,MAAQ,GAEpBL,EAAK8wO,EAAcA,EAAY7wO,QAAU,EACzClZ,EAAOivB,EAAKjvB,MAAQ,mBAAqBiZ,EAEzC0rH,EAAS,IAAIosD,EAAA12B,OAAOr6J,GACpBs4L,EAAcl2L,KAAKiqP,kBAAkBhzO,EAAMC,EAAM2V,GACvD01G,EAAOxrF,SAASm/I,GAEhB,MAAOg0D,EAAOC,GAASnqP,KAAKoqP,YAAYv9N,GAExC,IAAI6rI,EAAU7rI,EAAK6rI,SAAW,EAC9B,MAAMgxF,EAAW78N,EAAK68N,UAAY,GAC5B9wF,EAAY/rI,EAAK+rI,WAAa,EAC9ByxF,EAAQx9N,EAAK0rI,QAAU,CAAC2xF,EAAOC,GAGrC,IAAIG,EAAYpjP,KAAKC,KAAKuiP,EAAWhxF,GACrC,KAAO4xF,EAAYrzO,KACbyhJ,EACF4xF,EAAYpjP,KAAKC,KAAKuiP,EAAWhxF,GAIrC,MAAMH,EAAiB,GACvB,IAAK,IAAIl7J,EAAI,EAAGA,EAAIu7J,EAAWv7J,IAAK,CAChC,MAAM06J,EAAO/3J,KAAKuqP,WAAWhoH,EAAQ8nH,EAAMhtP,GAAIwvB,GAG/C,IAAI29N,EAAQ/hO,EAAIM,cAAc,EAAG9R,EAAO,GACpCwzO,EAAQhiO,EAAIM,cAAc,EAAG7R,EAAO,GACnCszO,EAAQF,EAAcrzO,EAAO,IAC9BuzO,EAAQvzO,EAAOqzO,GAEdG,EAAQ/xF,EAAYxhJ,EAAO,IAC5BuzO,EAAQvzO,EAAO,EAAIwhJ,GAGnB7rI,EAAKK,UACLs9N,EAAQtjP,KAAK4C,MAAMmN,EAAO,GAC1BuzO,GAAStjP,KAAK4C,MAAM4/O,EAAWhxF,EAAU,IAEzC7rI,EAAKM,UACLs9N,EAAQvjP,KAAK4C,MAAMoN,EAAO,GAC1BuzO,GAASptP,GAAKq7J,EAAU,KAIxB8xF,EAASvzO,EAAO,GAAMuzO,EAAQ,IAC9BxiO,EAAApmB,QAAGK,IAAI,gBAAiB,wBACXuoP,qBAAyBvzO,EAAO,MAE7CwzO,EAASvzO,EAAO,GAAMuzO,EAAQ,IAC9BziO,EAAApmB,QAAGK,IAAI,gBAAiB,wBACXwoP,qBAAyBvzO,EAAO,KAGjD,MAAMyyO,EAAa,CAAClxF,YAAY,EAAMC,WACtCn2B,EAAOmxF,QAAQ37D,EAAMyyF,EAAOC,EAAOd,GACnCpxF,EAAO3yJ,KAAKmyJ,GAKhB,GAFA/3J,KAAK0qP,oBAAoBnyF,GAErBovF,EAAa,CAEb,MAAMgD,EAAa,IAAI1yN,EAAc,SAAU0vN,GACzCtyO,EAAMsyO,EAAYnkO,SAGxB,GAAIqJ,EAAKvD,KAAM,CACX,MAAMA,KAACA,GAAQuD,EACf,IAAIvB,EAAK7C,EAAImiO,cAActhO,GACvBxpB,EAAOuV,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,IAC7BulE,EAAW7oE,EAAApmB,QAAG2M,SAClB,KAAOzO,EAAKO,aACRirB,EAAK7C,EAAImiO,cAActhO,GACvBxpB,EAAOuV,EAAIoZ,QAAQnD,EAAG,GAAIA,EAAG,IACV,KAAbulE,KAEV82J,EAAY1xM,UAAU00M,EAAYr/N,EAAG,GAAIA,EAAG,SAG5Cq8N,EAAY1xM,UAAU00M,EAAY,EAAG,GAGzCrrI,EAAAzc,MAAMoC,eAAeixF,GAErB,MAAM20D,EAAwB30D,EAAYt+D,iBAC1C+yH,EAAWx2L,QAAQ02L,EAAY,IAC/B,IAAK,IAAIxtP,EAAI,EAAGA,EAAIwtP,EAAYtpP,OAAQlE,IACpCwtP,EAAYxtP,GAAGq7B,eAAeivN,GAC9BkD,EAAYxtP,GAAGu7B,gBAAgB+xN,GAIvC,OAAOpoH,EAGJl6G,YAAYwE,GACf,IAAIq9N,EAAQ,KACRC,EAAQ,KACZ,GAAIt9N,EAAKi+N,UACJZ,EAAOC,GAASt9N,EAAKi+N,cAKtB,IAFAZ,EAAQzhO,EAAIjL,aAAausO,GACzBI,EAAQ1hO,EAAIjL,aAAausO,GAClBG,IAAUC,GACbA,EAAQ1hO,EAAIjL,aAAausO,GAGjC,MAAO,CAACG,EAAOC,GAIZ9hO,WAAWk6G,EAAgBwoH,EAAiBl+N,GAC/C,MAAMoC,EAAS+gB,EAAAvS,YAAYmO,YACrB89M,EAAW78N,EAAK68N,UAAY,GAC5BlxO,EAAYqU,EAAKgS,QAAU,EAE3Bk5H,EAAO,IAAI42B,EAAAn3B,KAAKuzF,GAChBv6F,EAAS,CACX,CAACC,GAAI,KAAM3uJ,KAAM,OAAQxD,MAAOysP,GAChC,CAACt6F,GAAI,MAAO3uJ,KAAM,SAAUxD,MAAOka,IAEjC+nG,GAAY,IAAIqM,EAAAK,aAAcC,eAAesjC,GACnD,IAAK,IAAInzJ,EAAI,EAAGA,EAAIqsP,EAAW,EAAGrsP,IAAK,CACnC,MAAM4M,EAAQglB,EAAOsc,kBAAkB,CAAC5sB,KAAM4hG,IAC9C,GAAIt2G,EAAO,CACP,MAAMmc,EAAO,IAAI+D,EAAUo4D,SAC3Bn8D,EAAKo8D,QAAQ,CAAC5kF,KAAM2kI,EAAO7gI,UACvBq2J,KAAMA,EAAKr2J,YACfuI,EAAMqW,IAAI8F,GACV2xI,EAAKhqI,SAAS9jB,IAKtB,MAIMq5M,EAAYr0L,EAAOsc,kBAAkB,CAAC5sB,KAJ3B1U,GACbA,EAAMlI,OAASgpP,GACf9gP,EAAM40B,QAAU7+B,KAAKgqP,gBAGzB,GAAI1mC,EAAW,CACXtjN,KAAKgrP,sBAAsB1nC,GAC3B,MAAMl9L,EAAO,IAAI+D,EAAUo4D,SAC3Bn8D,EAAKo8D,QAAQ,CAAC5kF,KAAM2kI,EAAO7gI,UACvBq2J,KAAMA,EAAKr2J,YACf4hN,EAAUhjM,IAAI8F,GACd2xI,EAAKhqI,SAASu1L,QAGdt7L,EAAApmB,QAAG+C,KAAK,gBAAiB,aACrB,mCAMR,OADAozJ,EAAKy+B,mBAAmBtvL,KAAK4B,MAAM,GAAM4gP,IAClC3xF,EAGJ1vI,oBAAoBkwI,GAEvBA,EAAOluJ,QAAQkpN,IACXh7D,EAAOluJ,QAAQmpN,IACPD,EAAM7xN,YAAc8xN,EAAM9xN,WAC1B6xN,EAAMjpN,YAAYD,QAAQ4gP,IACtBz3B,EAAMlpN,YAAYD,QAAQ6gP,IACtBD,EAAGnlI,SAASolI,GACZA,EAAGplI,SAASmlI,SAO5B13B,EAAMjpN,YAAYD,QAAQ06G,IACtBwuG,EAAMjpN,YAAYD,QAAQ26G,IAClBD,EAAOjuG,UAAYkuG,EAAOluG,UAC1BiuG,EAAOgB,UAAUf,GACjBA,EAAOe,UAAUhB,UAO9B18F,kBAAkBpR,EAAMC,EAAM2V,GACjC,MAAM2mE,EAAY3mE,EAAK2mE,WAAa,SAC9BsY,EAAa9jF,EAAApmB,QAAGoV,cAAcC,EAAMC,GAG1C,OAFoB0rF,EAAAtK,aAAaC,YAAY/E,EAAWv8E,EAAMC,EAC1D40F,GAIDzjF,sBAAsBpe,GACzB,MAAM60B,EAAQ,IAAI+I,EAAMyL,kBAAkBrpC,GACpCivG,EAAU,IAAIi4C,EAAS4B,eAAe9oJ,GAC5CA,EAAM0tK,SAAS74I,GACfA,EAAMw+I,QAAQpkE,GACdjvG,EAAMqW,IAAI,IAAI6J,EAAU8oB,WACxBhpC,EAAMy+G,YAAY","file":"7102e19f6cb73ea65ae2.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 111);\n","\nconst $DEBUG = 0;\n\n/* Main object of the package for encapsulating all other objects. */\nconst RG: any = {};\n\nimport {TCoord, DestOrSrc, PlayerCmdInput} from './interfaces';\n\n// Import only types\ntype BaseActor = import('./actor').BaseActor;\ntype SentientActor = import('./actor').SentientActor;\ntype ItemBase = import('./item').ItemBase;\ntype ElementBase = import('./element').ElementBase;\ntype Entity = import('./entity').Entity;\ntype Cell = import('./map.cell').Cell;\ntype CellMap = import('./map').CellMap;\ntype Level = import('./level').Level;\ntype Damage = import('./mixin').Damage;\n\nRG.gameTitle = 'Battles in the North (BitN)';\n\n// Can be set to true for testing, when error conditions are checked\nRG.suppressErrorMessages = false;\nRG.suppressLogs = false;\nRG.suppressWarningMessages = false;\nRG.suppressDiagnosticMessages = false;\n\nRG.cellRenderVisible = ['actors', 'items', 'elements'];\nRG.cellRenderAlways = ['items', 'elements'];\n\n/* Given Map.Cell, returns CSS classname used for styling that cell. */\nRG.getCssClassForCell = function(cell: Cell, isVisible: boolean): string {\n    if (isVisible) {this.cellRenderArray = this.cellRenderVisible;}\n    else {this.cellRenderArray = this.cellRenderAlways;}\n    const className = this.getStyleClassForCell(cell);\n    this.cellRenderArray = this.cellRenderVisible;\n    return className;\n};\n\n/* Same as getClassName, but optimized for viewing the full map. */\nRG.getCssClassFullMap = function(cell: Cell): string {\n    this.cellRenderArray = this.cellRenderVisible;\n\n    if (!cell.hasProps()) {\n        const baseType = cell.getBaseElem().getType();\n        return this.cellStyles.elements[baseType];\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const propType = this.cellRenderVisible[i];\n        if (cell.hasProp(propType)) {\n            const props = cell.getProp(propType);\n            const styles = this.cellStyles[propType];\n            return this.getPropClassOrChar(styles, props[0]);\n        }\n    }\n    return null;\n};\n\n/* Given Map.Cell, returns a char that is rendered for the cell. */\nRG.getCharForCell = function(cell: Cell, isVisible: boolean): string {\n    if (isVisible) {this.cellRenderArray = this.cellRenderVisible;}\n    else {this.cellRenderArray = this.cellRenderAlways;}\n    const cellChar = this.getCellChar(cell);\n    this.cellRenderArray = this.cellRenderVisible;\n    return cellChar;\n};\n\n/* Same as getChar, but optimized for full map viewing. */\nRG.getCharFullMap = function(cell: Cell): string {\n    this.cellRenderArray = this.cellRenderVisible;\n\n    if (!cell.hasProps()) {\n        const baseType = cell.getBaseElem().getType();\n        return this.charStyles.elements[baseType];\n    }\n\n    for (let i = 0; i < 3; i++) {\n        if (cell.hasProp(this.cellRenderVisible[i])) {\n            const props = cell.getProp(this.cellRenderVisible[i]);\n            const styles = this.charStyles[this.cellRenderVisible[i]];\n            return this.getPropClassOrChar(styles, props[0]);\n        }\n    }\n    return null;\n};\n\n/* Maps a cell to specific object in stylesheet. For rendering purposes\n * only.*/\nRG.getStyleClassForCell = function(cell: Cell): string {\n    if (!cell.isExplored()) { return 'cell-not-explored';}\n\n    for (let i = 0; i < this.cellRenderArray.length; i++) {\n        const propType = this.cellRenderArray[i];\n        if (cell.hasProp(propType)) {\n            const props = cell.getProp(propType);\n            const styles = this.cellStyles[propType];\n            const propObj = props[0];\n            return this.getPropClassOrChar(styles, propObj);\n        }\n    }\n\n    const baseType = cell.getBaseElem().getType();\n    return this.cellStyles.elements[baseType];\n};\n\n/* styles is either a LUT of chars or LUT of CSS classnames. */\nRG.getPropClassOrChar = function(styles, propObj): string {\n\n    // Return by name, this is for object shells generally\n    let lookupKey = null;\n    if (propObj.getName) {\n        lookupKey = propObj.getName();\n        if (!styles.hasOwnProperty(lookupKey)) {\n            lookupKey = propObj.getType();\n        }\n    }\n    else {\n        lookupKey = propObj.getType();\n    }\n\n    // By type is usually for basic elements\n    if (styles.hasOwnProperty(lookupKey)) {\n        if (typeof styles[lookupKey] === 'object') {\n            // Invoke a state querying function\n            for (const p in styles[lookupKey]) {\n                if (p !== 'default') {\n                    const funcToCall = p;\n                    const res = propObj[funcToCall]();\n\n                    // If func returned true, use value ie\n                    // isClosed: '+' returns '+' if isClosed() === true\n                    if (res === true) {\n                        return styles[lookupKey][p];\n                    }\n                    // Else if func returned non-false value, use the\n                    // returned value, ie getChar() returned 'A'\n                    else if (res !== false) {\n                        return res; // If res not single char, messes things\n                    }\n                }\n            }\n            return styles[lookupKey].default;\n\n        }\n        return styles[lookupKey];\n    }\n    else {\n        return styles.default;\n    }\n};\n\n/* Returns char which is rendered on the map cell based on cell contents.*/\nRG.getCellChar = function(cell: Cell): string {\n    if (!cell.isExplored()) {return 'X';}\n\n    for (let i = 0; i < this.cellRenderArray.length; i++) {\n        // const propType = this.cellRenderArray[i];\n        if (cell.hasProp(this.cellRenderArray[i])) {\n            const props = cell.getProp(this.cellRenderArray[i]);\n            const styles = this.charStyles[this.cellRenderArray[i]];\n            const propObj = props[0];\n            return this.getPropClassOrChar(styles, propObj);\n        }\n    }\n\n    const baseType = cell.getBaseElem().getType();\n    return this.charStyles.elements[baseType];\n};\n\n\n/* Adds a CSS class for given prop and type. For example, \"actors\", \"wolf\",\n * \"cell-actor-wolf\" uses CSS class .cell-actor-wolf to style cells with\n * wolves in them. */\nRG.addCellStyle = function(prop: string, type: string, cName: string): void {\n    if (this.cellStyles.hasOwnProperty(prop)) {\n        this.cellStyles[prop][type] = cName;\n    }\n    else {\n        this.err('RG', 'addCellStyle', 'Unknown prop type: ' + prop);\n    }\n};\n\nRG.removeCellStyle = function(prop: string, type: string): void {\n    if (this.cellStyles.hasOwnProperty(prop)) {\n        delete this.cellStyles[prop][type];\n    }\n};\n\n/* Adds a char to render for given prop and type. Example: \"actors\",\n * \"wolf\", \"w\" renders 'w' for cells containing wolves.*/\nRG.addCharStyle = function(prop: string, type: string, charName: string): void {\n    if (this.charStyles.hasOwnProperty(prop)) {\n        this.charStyles[prop][type] = charName;\n    }\n    else {\n        this.err('RG', 'addCharStyle', 'Unknown prop type: ' + prop);\n    }\n};\n\nRG.removeCharStyle = function(prop: string, type: string): void {\n    if (this.charStyles.hasOwnProperty(prop)) {\n        delete this.charStyles[prop][type];\n    }\n};\n\nRG.getChar = function(prop: string, name: string, state = null): string {\n    if (this.charStyles.hasOwnProperty(prop)) {\n        if (state) {\n            return this.charStyles[prop][name][state];\n        }\n        return this.charStyles[prop][name];\n    }\n    return 'X';\n};\n\nRG.getCssClass = function(prop, name, state = null): string {\n    if (this.cellStyles.hasOwnProperty(prop)) {\n        if (state) {\n            return this.cellStyles[prop][name][state];\n        }\n        if (this.cellStyles[prop].hasOwnProperty(name)) {\n            return this.cellStyles[prop][name];\n        }\n    }\n    return '';\n};\n\n// These are used to select rendered characters for map cells.\nRG.charStyles = {\n    elements: {\n        default: '.',\n        exit: '.',\n        exploration: '?',\n        lever: '&',\n        leverdoor: {\n            isClosed: '+', // if isClosed() returns true\n            default: '/'\n        },\n        marker: {\n            getChar: '', // use value from getChar()\n            default: 'X'\n        },\n        passage: '.',\n        placeholder: '?',\n        shop: '.',\n        stairsDown: '>',\n        stairsUp: '<',\n        wall: '#',\n        wallcave: '#',\n        wallcrypt: '#',\n        wallice: '#',\n        wallwooden: '#',\n        wallmount: '^',\n        door: {\n            isClosed: '+', // if isClosed() returns true\n            default: '/'\n        }\n    },\n    actors: {\n        default: 'X'\n    },\n    items: {\n        default: '?',\n        corpse: '§'\n    }\n};\n\n// These are used to select the CSS class for map cells.\nRG.cellStyles = {\n    elements: {\n        default: 'cell-element-default',\n        door: 'cell-element-door',\n        exit: 'cell-element-exit',\n        exploration: 'cell-element-exploration',\n        marker: {\n            getClassName: '', // Use value from get\n            default: 'cell-element-marker'\n        },\n        lever: 'cell-element-door',\n        leverdoor: 'cell-element-door',\n        passage: 'cell-element-passage',\n        placeholder: 'cell-element-placeholder',\n        shop: 'cell-element-shop',\n        stairsDown: 'cell-element-stairs',\n        stairsUp: 'cell-element-stairs',\n        wall: 'cell-element-wall',\n        wallcave: 'cell-element-wall-cave',\n        wallcrypt: 'cell-element-wall-crypt',\n        wallice: 'cell-element-wall-ice',\n        wallwooden: 'cell-element-wall-wooden',\n        wallmount: 'cell-element-wall-mount'\n    },\n    actors: {\n        default: 'cell-actor-default',\n        player: 'cell-actor-player',\n        spirit: 'cell-actor-spirit'\n    },\n    items: {\n        potion: 'cell-item-potion',\n        spiritgem: 'cell-item-spiritgem',\n        default: 'cell-item-default'\n    }\n};\n\nRG.debug = function(obj: any, msg: string): void {\n    if ($DEBUG) {\n        const inst = typeof obj;\n        const json = JSON.stringify(obj);\n        console.log(`[DEBUG]: Type: ${inst} ${json} |${msg}|`);\n    }\n};\n\nRG.err = function(obj: string, fun: string, msg: string) {\n    if (!RG.suppressErrorMessages) {\n        const formattedMsg = `[ERROR]: ${obj} ${fun} -> |${msg}|`;\n        console.error(formattedMsg);\n        throw new Error(formattedMsg);\n    }\n};\n\nRG.warn = function(obj: string, fun: string, msg: string): void {\n    if (!RG.suppressWarningMessages) {\n        const formattedMsg = `[WARN]: ${obj} ${fun} -> |${msg}|`;\n        console.error(formattedMsg);\n    }\n};\n\nRG.diag = function(obj): void {\n    if (!RG.suppressDiagnosticMessages) {\n        // Supposed to show the filename (of the caller)\n        // With bundling, this does not work very well\n        const split = new Error().stack.split('at ');\n        if (split.length > 3) {\n            const linfo = split[3].trim();\n            console.info(linfo);\n        }\n        console.info(obj);\n    }\n};\n\nRG.log = function(...args) {\n    if (!RG.suppressLogs) {\n        console.log('[INFO]:', ...args);\n    }\n};\n\n/* Checks that object has given type using getType() function. Throws error if\n * type does not match. */\nRG.assertType = function(obj: any, typeStr: string): void {\n    if (obj.getType) {\n        if (obj.getType() !== typeStr) {\n            RG.err('RG', 'assertType',\n                `Exp: ${typeStr}, Got: ${obj.getType()}`);\n        }\n    }\n    else {\n        RG.err('RG', 'assertType', `object ${obj} has no getType()`);\n    }\n};\n\n/* Used to inherit from a prototype. Supports multiple inheritance but\n * sacrifices instanceof.*/\nRG.extend2 = function(Child: any, Parent: any): void {\n    if (RG.isNullOrUndef([Child])) {\n        RG.err('RG', 'extend2',\n            `Child not defined. Parent: ${Parent}`);\n    }\n    if (RG.isNullOrUndef([Parent])) {\n        RG.err('RG', 'extend2',\n            `Parent not defined. Child: ${Child}`);\n    }\n\n    const p = Parent.prototype;\n    const c = Child.prototype;\n    for (const i in p) {\n        if (!c.hasOwnProperty(i)) {\n            c[i] = p[i];\n        }\n    }\n    if (c.hasOwnProperty('uber')) {\n        const ubers = [c.uber];\n        ubers.push(p);\n        c.uber = ubers;\n    }\n    else {\n        c.uber = [];\n        c.uber.push(p);\n    }\n};\n\n/* Prints an error into console if 'val' is null or undefined.*/\nRG.nullOrUndefError = function(name: string, msg: string, val: any): void {\n    if (this.isNullOrUndef([val])) {\n        const formattedMsg = `nullOrUndef ${name} ${msg}`;\n        console.error(formattedMsg);\n        throw new Error(formattedMsg);\n    }\n};\n\n/* Returns true if anything in the list is null or undefined.*/\nRG.isNullOrUndef = function(list: any[]): boolean {\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] === null || typeof list[i] === 'undefined' ||\n            typeof list === 'undefined') {\n            return true;\n        }\n    }\n    return false;\n};\n\n/* Tries to add item2 to item1 stack. Returns true on success.*/\nRG.addStackedItems = function(item1: ItemBase, item2: ItemBase): boolean {\n    if (item1.equals(item2)) {\n        const countToAdd = item2.getCount();\n        item1.incrCount(countToAdd);\n        return true;\n    }\n    return false;\n};\n\n/* Removes N items from the stack and returns them. Returns null if the\n * stack is not changed.*/\nRG.removeStackedItems = function(itemStack: ItemBase, n): ItemBase | null {\n    if (n > 0) {\n    let rmvItem = null;\n    if (n === 1 && itemStack.getCount() === 1) {\n            return itemStack;\n        }\n        else if (n < itemStack.getCount()) {\n            itemStack.decrCount(n);\n            rmvItem = itemStack.clone();\n            rmvItem.setCount(n);\n            return rmvItem;\n        }\n        else { // Remove all items\n            return itemStack;\n        }\n    }\n    return null;\n};\n\n//--------------------------------------------------------------\n// COMBAT-RELATED FUNCTIONS\n//--------------------------------------------------------------\n\nRG.getItemDamage = function(item: ItemBase): number {\n    if ((item as any).rollDamage) {\n        return (item as any).rollDamage();\n    }\n    else {\n        const weight = item.getWeight();\n        return Math.ceil(weight / 1.1);\n    }\n};\n\nRG.getMeleeAttack = function(att: SentientActor): number {\n    let attack = att.getAttack();\n    const missile = att.getInvEq().getMissile();\n    const missWeapon = att.getInvEq().getMissileWeapon();\n    if (missile) {attack -= missile.getAttack();}\n    if (missWeapon) {attack -= missWeapon.getAttack();}\n    return attack;\n};\n\nRG.getMeleeAttackRange = function(att: SentientActor): number {\n    const attackRange = att.get('Combat').getAttackRange();\n    const weapon: unknown = att.getWeapon();\n    if (weapon && (weapon as Damage).getAttackRange) {\n        const weaponRange = (weapon as Damage).getAttackRange();\n        return weaponRange > attackRange ? weaponRange : attackRange;\n    }\n    return attackRange;\n};\n\nRG.getMeleeDamageAdded = function(att: SentientActor): number {\n    let dmg = att.getCombatBonus('getDamage');\n    dmg += RG.strengthToDamage(att.getStrength());\n    return dmg;\n};\n\nRG.getMeleeAttackInfo = function(att: SentientActor): string {\n    let result = 'Att: ' + RG.getMeleeAttack(att);\n    const weapon: unknown = att.getWeapon();\n    if (weapon && (weapon as Damage).getDamageDie) {\n        result += ' D: ' + (weapon as Damage).getDamageDie().toString();\n    }\n    else {\n        result += ' D: ' + att.get('Combat').getDamageDie().toString();\n    }\n    result += ' + ' + RG.getMeleeDamageAdded(att);\n    return result;\n};\n\nRG.getMissileAgilityDmg = function(agi) {\n    return Math.round(agi / 3);\n};\n\ntype MissType = Entity & Damage;\n\nRG.getMissileDamageAdded = function(att: SentientActor, miss: MissType): number {\n    let dmg = RG.getMissileAgilityDmg(att.get('Stats').getAgility());\n    if (miss.has('Ammo')) {\n        dmg += att.getMissileWeapon().rollDamage();\n    }\n    if (att.has('StrongShot')) {\n        dmg += this.strengthToDamage(att.getStrength());\n    }\n    return dmg;\n};\n\nRG.getMissileDamage = function(att: SentientActor, miss: MissType): number {\n    let dmg = miss.rollDamage();\n    dmg += RG.getMissileDamageAdded(att, miss);\n    return dmg;\n};\n\nRG.getMissileAttack = function(att: SentientActor): number {\n    let attack = att.get('Combat').getAttack();\n    attack += att.getInvEq().getEquipment().getAttack();\n    attack += att.get('Stats').getAccuracy() / 2;\n    attack += att.getInvEq().getEquipment().getAccuracy() / 2;\n\n    // Subtract melee weapon\n    const weapon: unknown = att.getWeapon();\n    if (weapon && (weapon as Damage).getAttack) {\n        attack -= (weapon as Damage).getAttack();\n    }\n    return attack;\n};\n\n/* Returns the missile attack info in a string. */\nRG.getMissileAttackInfo = function(att: SentientActor): string {\n    const missWeapon = att.getMissileWeapon();\n    const miss = att.getInvEq().getMissile();\n    if (!miss) {\n        return 'No missile equipped';\n    }\n\n    let result = 'Att: ' + RG.getMissileAttack(att);\n    result += ' D: ' + miss.getDamageDie().toString();\n    if (missWeapon) {\n        const dmgDie = missWeapon.getDamageDie();\n        result += ' + ' + dmgDie.toString() + ' (wpn)';\n    }\n\n    const dmg = RG.getMissileDamageAdded(att, miss);\n    result += ' + ' + dmg;\n    result += ' R: ' + RG.getMissileRange(att, miss);\n    return result;\n};\n\nRG.getMissileRange = function(att: SentientActor, miss: MissType): number {\n    let range = miss.getAttackRange();\n    if (miss.has('Ammo')) {\n        const missWeapon = att.getMissileWeapon();\n        if (missWeapon) {\n            const weaponRange = missWeapon.getAttackRange();\n            range += weaponRange;\n        }\n        else {\n            return 0;\n        }\n    }\n    if (att.has('LongRangeShot')) {range *= 2;}\n    if (att.has('EagleEye')) {range += 2;}\n    if (att.has('Skills')) {\n        if (miss.has('Ammo')) {\n            range += att.get('Skills').getLevel('Archery');\n        }\n        else {\n            range += att.get('Skills').getLevel('Throwing');\n        }\n    }\n    return range;\n};\n\nRG.strengthToDamage = function(str: number): number {\n    return Math.round(str / 4);\n};\n\nRG.accuracyToAttack = function(acc: number): number {\n    return Math.floor(acc / 2);\n};\n\nRG.agilityToDefense = function(agi: number): number {\n    return Math.floor(agi / 2);\n};\n\n\n/* Given actor and cells it sees, returns first enemy cell found.*/\nRG.findEnemyCellForActor = function(actor, seenCells: Cell[]): Cell[] {\n    const res = [];\n    const actorCells = seenCells.filter(c => c.hasActors());\n    actorCells.forEach(cell => {\n        const actors = cell.getActors();\n        let found = false;\n        for (let j = 0; j < actors.length; j++) {\n            if (actor !== actors[j]) {\n                if (typeof actors[j].isEnemy === 'function') {\n                    if (actors[j].isEnemy(actor)) {\n                        found = true;\n                    }\n                }\n            }\n        }\n        if (found) {res.push(cell);}\n    });\n    return res;\n};\n\n//--------------------------------------------------------------\n// CONSTANTS\n//--------------------------------------------------------------\n\nRG.PLAYER_FOV_RANGE = 10;\nRG.NPC_FOV_RANGE = 5; // Default FOV range for actor\n\nRG.ACTION_DUR = 100; // Base duration of action\nRG.BASE_SPEED = 100; // Base speed of actors\nRG.DEFAULT_HP = 50;\n\n// How many levels are simulated at once, having more adds realism\n// but slows down the game, affects Game.Engine\nRG.MAX_ACTIVE_LEVELS = 3;\n\n//----------------------\n// Different game events\n//----------------------\nRG.EVT_ACTOR_CREATED = 'EVT_ACTOR_CREATED';\nRG.EVT_ACTOR_KILLED = 'EVT_ACTOR_KILLED';\nRG.EVT_DESTROY_ITEM = 'EVT_DESTROY_ITEM';\nRG.EVT_MSG = 'EVT_MSG';\n\nRG.EVT_LEVEL_CHANGED = 'EVT_LEVEL_CHANGED';\nRG.EVT_LEVEL_ENTERED = 'EVT_LEVEL_ENTERED';\nRG.EVT_TILE_CHANGED = 'EVT_TILE_CHANGED';\nRG.EVT_EXPLORED_ZONE_LEFT = 'EVT_EXPLORED_ZONE_LEFT';\n\nRG.EVT_LEVEL_PROP_ADDED = 'EVT_LEVEL_PROP_ADDED';\nRG.EVT_LEVEL_PROP_REMOVED = 'EVT_LEVEL_PROP_REMOVED';\n\nRG.EVT_ACT_COMP_ADDED = 'EVT_ACT_COMP_ADDED';\nRG.EVT_ACT_COMP_REMOVED = 'EVT_ACT_COMP_REMOVED';\nRG.EVT_ACT_COMP_ENABLED = 'EVT_ACT_COMP_ENABLED';\nRG.EVT_ACT_COMP_DISABLED = 'EVT_ACT_COMP_DISABLED';\n\nRG.EVT_WIN_COND_TRUE = 'EVT_WIN_COND_TRUE';\n\nRG.EVT_ANIMATION = 'EVT_ANIMATION';\n\nRG.EVT_CREATE_BATTLE = 'EVT_CREATE_BATTLE';\nRG.EVT_BATTLE_OVER = 'EVT_BATTLE_OVER';\nRG.EVT_ARMY_EVENT = 'EVT_ARMY_EVENT';\n\n// Mostly used at low-level by System.Event\nRG.EVT_ITEM_PICKED_UP = 'EVT_ITEM_PICKED_UP';\nRG.EVT_ACTOR_DAMAGED = 'EVT_ACTOR_DAMAGED';\nRG.EVT_ACTOR_ATTACKED = 'EVT_ACTOR_ATTACKED';\nRG.EVT_ACTOR_USED_STAIRS = 'EVT_ACTOR_USED_STAIRS';\n\n// Used for timing/simulating bigger events\nRG.EVT_WEATHER_CHANGED = 'EVT_WEATHER_CHANGED';\nRG.EVT_DAY_PHASE_CHANGED = 'EVT_DAY_PHASE_CHANGED';\nRG.EVT_DAY_CHANGED = 'EVT_DAY_CHANGED';\nRG.EVT_MONTH_CHANGED = 'EVT_MONTH_CHANGED';\nRG.EVT_SEASON_CHANGED = 'EVT_SEASON_CHANGED';\nRG.EVT_YEAR_CHANGED = 'EVT_YEAR_CHANGED';\n\n//----------------------------\n// Different entity/prop types\n//----------------------------\nRG.TYPE_ACTOR = 'actors';\nRG.TYPE_ELEM = 'elements';\nRG.TYPE_ITEM = 'items';\n\n// Constants for different item types\nRG.ITEM = {};\nRG.ITEM.BASE = 'base';\nRG.ITEM.FOOD = 'food';\nRG.ITEM.BOOK = 'book';\nRG.ITEM.CORPSE = 'corpse';\nRG.ITEM.WEAPON = 'weapon';\nRG.ITEM.ARMOUR = 'armour';\nRG.ITEM.SPIRITGEM = 'spiritgem';\nRG.ITEM.GOLD = 'gold';\nRG.ITEM.MINERAL = 'mineral';\nRG.ITEM.MISSILE = 'missile';\nRG.ITEM.MISSILE_WEAPON = 'missileweapon';\nRG.ITEM.AMMUNITION = 'ammo';\nRG.ITEM.POTION = 'potion';\nRG.ITEM.RUNE = 'rune';\nRG.ITEM.GOLD_COIN = 'goldcoin';\n\n// This is a subset of ITEM_TYPES, excluding gold items\nRG.SHOP_TYPES = ['ammo', 'armour', 'food', 'mineral',\n    'missile', 'missileweapon', 'potion', 'rune', 'spiritgem', 'weapon'\n];\n\nRG.USE = {\n    DRINK: 'DRINK',\n    DIG: 'DIG',\n    LEVER: 'LEVER'\n};\n\nRG.LEVEL_ID_ADD = 1000000000;\nRG.ENTITY_ID_ADD = 1000000000;\n\nRG.WATCHDOG = 100; // Used mainly to terminate while-loops\nRG.NO_TARGET = -1;\n\n//----------------------------\n// Different level types\n//----------------------------\n\nRG.LEVEL_EMPTY = 'empty';\nRG.LEVEL_FOREST = 'forest';\nRG.LEVEL_MOUNTAIN = 'mountain';\n\n// Energy per action\nRG.energy = {\n    ATTACK: 15,\n    DEFAULT: 5,\n    JUMP: 50,\n    MISSILE: 10,\n    MOVE: 10,\n    PICKUP: 5,\n    REST: 5,\n    RUN: 20,\n    USE: 5,\n    SPELL: 10\n};\n\n// Actor biases for different goals\nRG.BIAS = {\n    ALWAYS: 10.0,\n    NOT_POSSIBLE: -10.0,\n    Explore: 0.2,\n    Flee: 0.2,\n    Guard: 1.1,\n    Order: 0.7,\n    Patrol: 1.0\n};\n\n// Different fighting modes\nRG.FMODE_NORMAL = 0;\nRG.FMODE_FAST = 1;\nRG.FMODE_SLOW = 2;\n\nRG.PROT_BYPASS_CHANCE = 0.05;\nRG.MISSILE_CRITICAL_SHOT = 0.1;\n\n// 0.0 = uniform dist, higher number assigns more weight to median values\nRG.DANGER_ADJ_FACTOR = 1.4;\nRG.DAMAGE_ADJ_FACTOR = 2;\nRG.PLAYER_HP_REGEN_PERIOD = 40;\nRG.PLAYER_PP_REGEN_PERIOD = 40;\nRG.MIN_VALUE = 30; // Min value for generated items.\n\nRG.TRAINER_PROB = 0.2;\nRG.EPIC_PROB = 0.05;\n\nRG.GOLD_COIN_WEIGHT = 0.03; // kg\nRG.GOLD_COIN_NAME = 'Gold coin';\n\nRG.HUNGER_PROB = 0.10; // Prob. of starvation to cause damage every turn\nRG.HUNGER_DMG = 1; // Damage caused by starvation kicking in\n\n\n// Alignments (TODO make more diverse)\nRG.ALIGN_GOOD = 'ALIGN_GOOD';\nRG.ALIGN_EVIL = 'ALIGN_EVIL';\nRG.ALIGN_NEUTRAL = 'ALIGN_NEUTRAL';\n\nRG.EVIL_RACES = ['catfolk', 'dogfolk', 'wolfclan', 'wildling', 'undead',\n    'goblin'];\nRG.NEUTRAL_RACES = ['dwarf', 'bearfolk', 'animal'];\n\nRG.ACTOR_RACES = ['catfolk', 'dogfolk', 'wolfclan', 'wildling', 'goblin',\n    'bearfolk', 'dwarf', 'human', 'hyrkhian'];\nRG.ACTOR_RACES = RG.ACTOR_RACES.sort(); // Too lazy to manually sort them\n\nRG.ALL_RACES = ['avianfolk'].concat(RG.ACTOR_RACES);\n\n// Constants for movement directions\nRG.CARDINAL_DIR = Object.freeze(['north', 'south', 'east', 'west']);\nRG.CARDINAL_DIR_ABBR = Object.freeze(['N', 'S', 'E', 'W']);\n\nRG.DIR = {\n    N: [0, -1],\n    S: [0, 1],\n    E: [1, 0],\n    W: [-1, 0],\n    NE: [1, -1],\n    SE: [1, 1],\n    NW: [-1, -1],\n    SW: [-1, 1]\n};\n\nRG.DIR_NSEW = [RG.DIR.N, RG.DIR.S, RG.DIR.E, RG.DIR.W];\nRG.DIR_DIAG = [RG.DIR.NE, RG.DIR.SE, RG.DIR.NW, RG.DIR.SW];\n\nRG.SEASON = {\n    AUTUMN: 'AUTUMN',\n    AUTUMN_WINTER: 'AUTUMN_WINTER',\n    WINTER: 'WINTER',\n    WINTER_SPRING: 'WINTER_SPRING',\n    SPRING: 'SPRING',\n    SPRING_SUMMER: 'SPRING_SUMMER',\n    SUMMER: 'SUMMER',\n    SUMMER_AUTUMN: 'SUMMER_AUTUMN',\n};\n\nRG.DAY = {\n    DAWN: 'DAWN',\n    MORNING: 'MORNING',\n    NOON: 'NOON',\n    AFTERNOON: 'AFTERNOON',\n    EVENING: 'EVENING',\n    DUSK: 'DUSK',\n    NIGHT: 'NIGHT'\n};\n\n/* Converts a direction (N, S, ...) to 2-d vector. If already,\n * a vector, returns it. */\nRG.dirTodXdY = function(dir: TCoord | string): TCoord | null {\n    if (Array.isArray(dir)) {\n        return dir;\n    }\n    else if (RG.DIR.hasOwnProperty(dir)) {\n        const ucDir = dir.toUpperCase();\n        return RG.DIR[ucDir];\n    }\n    RG.err('RG', 'dirTodXdY',\n        `Arg must be array/string (N,S,E,W..). Got: ${dir}`);\n    return null;\n};\n\nRG.dXdYToDir = function(dXdY: TCoord): string {\n    const [dX, dY] = dXdY;\n    let result = '';\n    if (dY === 1) {result += 'S';}\n    else if (dY === -1) {result += 'N';}\n    if (dX === 1) {result += 'E';}\n    else if (dX === -1) {result += 'W';}\n    return result;\n};\n\n\nRG.dirToChar = function(dir: TCoord): string {\n    const [dX, dY] = dir;\n    if (dX !== 0) {\n        if (dY === 0) {return '-';}\n        else if (dX === 1 && dY === 1) {\n            return '\\\\';\n        }\n        else if (dX === -1 && dY === 1) {\n            return '/';\n        }\n        else if (dX === -1 && dY === -1) {\n            return '\\\\';\n        }\n        else {\n            return '/';\n        }\n    }\n    else {\n        return '|';\n    }\n\n};\n\nRG.DMG = {\n    ACID: 'ACID',\n    BLUNT: 'BLUNT',\n    COLD: 'COLD',\n    ENERGY: 'ENERGY',\n    FIRE: 'FIRE',\n    HUNGER: 'HUNGER',\n    ICE: 'ICE',\n    LIGHTNING: 'LIGHTNING',\n    MAGIC: 'MAGIC',\n    MELEE: 'MELEE',\n    MISSILE: 'MISSILE',\n    NECRO: 'NECRO',\n    PIERCE: 'PIERCE',\n    POISON: 'POISON',\n    SLASH: 'SLASH',\n    SLIME: 'SLIME',\n    VOID: 'VOID',\n    WATER: 'WATER'\n};\n\nRG.classNameDMG = {\n    ACID: 'cell-damage-ACID',\n    BLUNT: 'cell-damage-BLUNT',\n    COLD: 'cell-damage-COLD',\n    ENERGY: 'cell-damage-ENERGY',\n    FIRE: 'cell-damage-FIRE',\n    HUNGER: 'cell-damage-HUNGER',\n    ICE: 'cell-damage-ICE',\n    LIGHTNING: 'cell-damage-LIGHTNING',\n    MAGIC: 'cell-damage-MAGIC',\n    MELEE: 'cell-damage-MELEE',\n    MISSILE: 'cell-damage-MISSILE',\n    NECRO: 'cell-damage-NECRO',\n    PIERCE: 'cell-damage-PIERCE',\n    POISON: 'cell-damage-POISON',\n    SLASH: 'cell-damage-SLASH',\n    WATER: 'cell-damage-WATER',\n    VOID: 'cell-damage-VOID'\n};\n\nRG.STATS = [\n    'Accuracy', 'Agility', 'Magic', 'Perception', 'Strength', 'Willpower'\n];\n\nRG.STATS_LC = RG.STATS.map(stat => stat.toLowerCase());\n\n// Load status when using chunk unloading\nRG.LEVEL_NOT_LOADED = 'LEVEL_NOT_LOADED';\nRG.TILE_NOT_LOADED = 'TILE_NOT_LOADED';\n\nRG.STATS_ABBR = RG.STATS.map(stat => stat.substr(0, 3));\nRG.GET_STATS = RG.STATS.map(stat => 'get' + stat);\nRG.SET_STATS = RG.STATS.map(stat => 'set' + stat);\n\nRG.getDmgClassName = function(dmgType: string): string {\n    return RG.classNameDMG[dmgType];\n};\n\n/* Converts key of format X,Y to [X, Y]. */\nRG.key2Num = function(key: string): [number, number] {\n    const [x, y] = key.split(',');\n    return [parseInt(x, 10), parseInt(y, 10)];\n};\n\nRG.isEmpty = (value: any): boolean => {\n    if (RG.isNullOrUndef([value])) {\n        return true;\n    }\n    else if (typeof value === 'string') {\n        return value === '';\n    }\n    else if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return false;\n};\n\n/* Returns name of object, or its parent's if object has no name. */\nRG.getName = (obj: any): string => {\n    if (obj.getName) {\n        return obj.getName();\n    }\n    else if (obj.getParent) {\n        const parent = obj.getParent();\n        return parent.getName();\n    }\n    return ''; // Should this be an error?\n};\n\nRG.getObjRefArray = (type, arr) => {\n    const result = arr.map(targetObj => (\n        RG.getObjRef(type, targetObj)\n    ));\n    result.$objRefArray = true;\n    return result;\n};\n\nRG.getObjRef = (type, obj) => {\n    if (type === 'entity') {\n        // Refs to items are dangerous as cloning changes the entity ref,\n        // cloning must be used in item stacking etc\n        if (RG.isItem(obj)) {\n            const msg = ' Got: |' + obj.getName() + '|';\n            RG.err('RG', 'getObjRef', 'objRefs to items not supported.' + msg);\n        }\n        return {$objRef: {type, id: obj.getID()}};\n    }\n    else if (type === 'object') {\n        if (obj.$objID) {\n            return obj.getObjRef();\n        }\n        else if (obj.$objRef) {\n            return {$objRef: {type: 'object', id: obj.$objRef}};\n        }\n    }\n    else if (type === 'component') {\n        return {$objRef: {type: 'component', id: obj.getID()}};\n    }\n    else if (type === 'place') {\n        return {$objRef: {type: 'place', id: obj.getID()}};\n    }\n    else if (type === 'item') {\n        return {$objRef: {type: 'item', id: obj.getID()}};\n    }\n    else if (type === 'element') {\n        return {$objRef: {type: 'element', id: obj.getID()}};\n    }\n    RG.err('RG', 'getObjRef',\n        `Type ${type} not supported. Obj: ${obj}`);\n    return null;\n};\n\n/* Returns a forest level configuration scaled to the size of the level. */\nRG.getForestConf = function(cols, rows) {\n    const xMult = cols / RG.LEVEL_MEDIUM_X;\n    const yMult = rows / RG.LEVEL_MEDIUM_Y;\n    const mult = xMult * yMult;\n\n    const levelConf = {\n        ratio: 0.5,\n        nForests: Math.floor(mult * 30),\n        forestSize: 100\n    };\n    return levelConf;\n};\n\nRG.cellRenderArray = RG.cellRenderVisible;\n\nRG.PROP_TYPES = [RG.TYPE_ACTOR, RG.TYPE_ELEM, RG.TYPE_ITEM];\n// Fighting modes\nRG.FMODES = [RG.FMODE_NORMAL, RG.FMODE_FAST, RG.FMODE_SLOW];\n\nRG.ALIGNMENTS = [RG.ALIGN_GOOD, RG.ALIGN_NEUTRAL, RG.ALIGN_EVIL];\n\nRG.cellRenderArray = RG.cellRenderVisible;\n\ninterface ProbDist {[key: string]: number;}\n\n/* Returns danger probabilites for given level.*/\nRG.getDangerProb = (min: number, max: number): ProbDist => {\n    if (min > max) {\n        console.error('RG.getDangerProb param order is min < max');\n        console.error(`\\tGot min: ${min}, max: ${max}`);\n        return {};\n    }\n    const level = max + 1;\n    const arr = [];\n    for (let j = min; j <= level; j++) {\n        arr.push(j);\n    }\n\n    const last = arr.length - 1;\n    const maxArr = arr[last];\n\n    const highPoint = (maxArr % 2 === 0) ? maxArr / 2 : (maxArr + 1) / 2;\n    const obj = {};\n\n    arr.forEach( val => {\n        const absDiff = Math.abs(val - highPoint);\n        let prob = maxArr - Math.floor(RG.DANGER_ADJ_FACTOR * absDiff);\n        prob = (prob === 0) ? prob + 1 : prob;\n        obj[val] = prob;\n\n    });\n\n    return obj;\n};\n\nRG.getMaxDanger = (xDiff, yDiff) => {\n    let maxDanger = 2 * yDiff + xDiff;\n    if (maxDanger < 2) {maxDanger = 2;}\n    return maxDanger;\n};\n\nRG.getMaxValue = (xDiff, yDiff) => {\n    let maxValue = 20 * yDiff + 10 * xDiff;\n    if (maxValue <= RG.MIN_VALUE) {\n        maxValue = RG.MIN_VALUE;\n    }\n    return maxValue;\n};\n\n/* Returns the weight distribution for foods. This is something like\n * {0.1: 10, 0.2: 7, 0.3: 5, 0.5: 1} etc.*/\nRG.getFoodWeightDistr = (): ProbDist => ({\n    0.1: 20,\n    0.2: 10,\n    0.3: 5,\n    0.4: 3,\n    0.5: 1\n});\n\n/* Returns the count distribution for gold coins. */\nRG.getGoldCoinCountDistr = (nLevel: number): ProbDist => {\n    const maxVal = nLevel + 1;\n    const dist = {};\n    for (let i = 1; i <= maxVal; i++) {\n        dist[i] = nLevel;\n    }\n    return dist;\n};\n\nRG.getRuneChargeDistr = (): ProbDist => ({\n    0: 2,\n    1: 10,\n    2: 30,\n    3: 10,\n    4: 5,\n    5: 2\n});\n\n//--------------------------------\n// Value/gold/buy/sell functions\n//--------------------------------\n\n/* Converts abstract value into gold weight. */\nRG.valueToGoldWeight = (value: number): number => {\n    let currVal = value;\n    let slope = 1;\n    while (currVal >= 100) {\n        currVal -= 100;\n        ++slope;\n    }\n    const adjValue = slope * value + 10;\n    return adjValue / 200;\n};\n\n/* Scales (up) the value of item if any extra bonuses or modifiers are added to\n * it. */\nRG.scaleItemValue = (type: string, bonus: number, item: ItemBase) => {\n    const currValue = item.getValue();\n    let mult = 1;\n    switch (type) {\n        case 'combat': mult *= (1.0 + 0.1 * bonus); break;\n        case 'stats': mult *= (1.0 + 0.2 * bonus); break;\n        default: mult = 1;\n    }\n    const newValue = Math.floor(currValue * mult);\n    item.setValue(newValue);\n};\n\n/* Returns true if given actor has gold at least equal to given gold weight. */\nRG.hasEnoughGold = (actor, goldWeight: number): boolean => {\n    const ncoins = RG.getGoldInCoins(goldWeight);\n    const items = actor.getInvEq().getInventory().getItems();\n    for (let i = 0; i < items.length; i++) {\n        if (items[i].getType() === 'goldcoin') {\n            if (items[i].getCount() >= ncoins) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/* Tries to remove given amount of gold coins from the actor. Returns the number\n * of coins removed. */\nRG.removeNCoins = (actor: SentientActor, ncoins: number): number => {\n    let ncoinsRemoved = 0;\n    const items = actor.getInvEq().getInventory().getItems();\n    let coinsFound = null;\n    for (let i = 0; i < items.length; i++) {\n        if (items[i].getType() === 'goldcoin') {\n            if (items[i].getCount() > ncoins) {\n                ncoinsRemoved = ncoins;\n                items[i].decrCount(ncoins);\n            }\n            else {\n                coinsFound = items[i];\n                ncoinsRemoved = coinsFound.getCount();\n                coinsFound.setCount(0);\n            }\n        }\n    }\n    // Need to remove coins item from buyer inventory\n    if (coinsFound !== null) {\n        actor.getInvEq().removeItem(coinsFound);\n    }\n    return ncoinsRemoved;\n};\n\n/* Returns the total stat value of the given stat. Note that stat must be given\n * in getter format ie 'getStrength', not Strength. */\nRG.getItemStat = (getFuncName: string, item): number => {\n    if (!item) {return 0;}\n\n    let result = 0;\n    if (typeof item[getFuncName] === 'function') {\n        result += item[getFuncName]();\n    }\n    if (item.has('Stats')) {\n        const sComp = item.get('Stats');\n        if (typeof sComp[getFuncName] === 'function') {\n            result += sComp[getFuncName]();\n        }\n    }\n    if (item.has('GemBound')) {\n        const gem = item.get('GemBound').getGem();\n        if (typeof gem[getFuncName] === 'function') {\n            result += gem[getFuncName]();\n        }\n    }\n    return result;\n\n};\n\nRG.getExpRequired = (newLevel: number): number => {\n    let reqExp = 0;\n    for (let i = 1; i <= newLevel; i++) {\n        reqExp += (i - 1) * 10;\n    }\n    return reqExp;\n};\n\n/* Given direction vector and source, returns a new x,y coordinate. */\nRG.newXYFromDir = (dir: TCoord, src: DestOrSrc): TCoord => {\n    let [xSrc, ySrc] = [0, 0];\n    if (Array.isArray(src)) {\n        [xSrc, ySrc] = src;\n    }\n    else if (src.getX) {\n        [xSrc, ySrc] = src.getXY();\n    }\n    return [xSrc + dir[0], ySrc + dir[1]];\n};\n\n/* Returns the dX,dY of two coordinates or objects. */\nRG.dXdY = (dest: DestOrSrc, src: DestOrSrc): TCoord => {\n    let [xDest, yDest, xSrc, ySrc] = [0, 0, 0, 0];\n    if (Array.isArray(dest)) {\n        xDest = dest[0];\n        yDest = dest[1];\n    }\n    else if (dest.getX) {\n        xDest = dest.getX();\n        yDest = dest.getY();\n    }\n\n    if (Array.isArray(src)) {\n        xSrc = src[0];\n        ySrc = src[1];\n    }\n    else if (src.getX) {\n        xSrc = src.getX();\n        ySrc = src.getY();\n    }\n\n    return [xDest - xSrc, yDest - ySrc];\n};\n\nRG.dXdYAbs = (dest: DestOrSrc, src: DestOrSrc): TCoord => {\n    const [dX, dY] = RG.dXdY(dest, src);\n    return [Math.abs(dX), Math.abs(dY)];\n};\n\n/* Returns the unit vector for direction between two objects.\n * Examples:\n *   1. Given 2 objects at (0,0) and (2,3), returns [-1,-1].\n *   2. Given 2 objects at (2,3) and (0,0), returns [1,1].\n *   3. Given 2 objects at (0,4) and (0,1), returns [0,1].\n *   4. Given 2 objects at (4,0) and (2,0), returns [1,0].\n */\nRG.dXdYUnit = (dest: DestOrSrc, src: DestOrSrc): TCoord => {\n    const [dX, dY] = RG.dXdY(dest, src);\n    const dXUnit = dX === 0 ? 0 : dX / Math.abs(dX);\n    const dYUnit = dY === 0 ? 0 : dY / Math.abs(dY);\n    return [dXUnit, dYUnit];\n};\n\nRG.withinRange = (r: number, dest: DestOrSrc, src: DestOrSrc): boolean => {\n    const [dX, dY] = RG.dXdYAbs(dest, src);\n    return dX <= r && dY <= r;\n};\n\n/* Given an actor, scales its attributes based on new experience level. Can advance\n * actor multiple levels also, if newLevel diff to current level is more than 1.*/\nRG.levelUpActor = (actor: SentientActor, newLevel: number): void => {\n    if (actor.has('Experience')) {\n        let currLevel = actor.get('Experience').getExpLevel();\n        if (currLevel < newLevel) {\n            while (currLevel < newLevel) {\n                const nextLevel = currLevel + 1;\n                ++currLevel;\n                actor.get('Experience').setExpLevel(nextLevel);\n\n                if (actor.has('ActorClass')) {\n                    actor.get('ActorClass').getClass().advanceLevel();\n                    continue; // Skip other functions\n                }\n\n                RG.levelUpStats(actor, nextLevel);\n\n                // Level up the Combat component\n                RG.levelUpCombatStats(actor, nextLevel);\n\n                // Level up the Health\n                if (actor.has('Health')) {\n                    const hComp = actor.get('Health');\n                    let incr = 2;\n                    if (actor.isPlayer()) {incr = 5;}\n                    hComp.setMaxHP(hComp.getMaxHP() + incr);\n                    hComp.setHP(hComp.getHP() + incr);\n                }\n\n            }\n        }\n        else {\n            let msg = `Curr: ${currLevel}, New: ${newLevel}`;\n            msg += ' New level must be > current level.';\n            RG.err('RG', 'levelUpActor', msg);\n        }\n    }\n    else {\n        RG.err('RG', 'levelUpActor', 'No exp. component found.');\n\n    }\n};\n\nRG.levelUpStats = function(actor: SentientActor, nextLevel: number): void {\n    const rng = Random.getRNG();\n    const randStat = rng.arrayGetRand(RG.STATS_LC);\n    const stats = actor.get('Stats');\n    stats.incrStat(randStat, 1);\n};\n\nRG.levelUpCombatStats = function(actor: SentientActor, nextLevel: number): void {\n    if (actor.has('Combat')) {\n        const combatComp = actor.get('Combat');\n\n        const incrAtt = 1;\n        combatComp.setAttack(combatComp.getAttack() + incrAtt);\n\n        const incrDef = 1;\n        combatComp.setDefense(combatComp.getDefense() + incrDef);\n\n        if (nextLevel % 3 === 0) {\n            const prot = combatComp.getProtection();\n            combatComp.setProtection(prot + 1);\n        }\n\n        // Upgrade damage die was well\n        const dmgDie = combatComp.getDamageDie();\n        dmgDie.setDice( dmgDie.getDice() + 1);\n        if (nextLevel % 3 === 0) {\n            dmgDie.setMod( dmgDie.getMod() + 1);\n        }\n    }\n};\n\n/* Prints the given object using console.log. Calls all accessor functions\n * given in 'funcs' list and prints their value. If no list is given, prints the\n * full object directly. */\nRG.printObj = function(obj: any, funcs: string | string[], linfo): void {\n\n    const printVal = (value, func) => {\n        if (typeof value === 'object') {\n            RG.diag('\\t## ' + func, linfo);\n            RG.diag(value, linfo);\n        }\n        else {\n            RG.diag('\\t## ' + func + ' -> ' + value, linfo);\n        }\n    };\n\n    if (funcs) {\n        if (Array.isArray(funcs)) {\n            funcs.forEach(func => {\n                if (typeof obj[func] === 'function') {\n                    const value = obj[func]();\n                    printVal(value, func);\n                }\n                else {\n                    const json = JSON.stringify(obj);\n                    RG.err('RG', 'printObj',\n                        `No func ${funcs} in object ${json}`);\n                }\n\n            });\n        }\n        else if (typeof funcs === 'string') {\n            if (typeof obj[funcs] === 'function') {\n                const value = obj[funcs]();\n                printVal(value, funcs);\n            }\n            else {\n                RG.err('RG', 'printObj',\n                    `No func ${funcs} in object ${JSON.stringify(obj)}`);\n            }\n        }\n    }\n    else {\n        RG.diag(obj, linfo);\n    }\n};\n\n/* Prints the given object list. For each object, calls all accessor functions\n * given in 'funcs' list and prints their value. If no list is given, prints the\n * full object directly using console.log(obj). filterFunc can be given to\n * filter the list. */\nRG.printObjList = function(list: any[], funcs: string | string[], filterFunc) {\n    const numObjs = list.length;\n    console.log(`List has ${numObjs} objects`);\n\n    list.forEach((obj, index) => {\n        if (typeof filterFunc === 'function') {\n            if (filterFunc(obj)) {\n                console.log(`Object [${index}]: `);\n                RG.printObj(obj, funcs);\n            }\n        }\n        else {\n            console.log(`Object [${index}]: `);\n            RG.printObj(obj, funcs);\n        }\n    });\n};\n\n// To create player commands\nRG.getUseCmd = function(item, target): PlayerCmdInput {\n    return {cmd: 'use', item, target};\n};\n\nRG.getDropCmd = function(item, count): PlayerCmdInput {\n    return {cmd: 'drop', item, count};\n};\n\nRG.getEquipCmd = function(item, count): PlayerCmdInput {\n    return {cmd: 'equip', item, count};\n};\n\nRG.getUnequipCmd = function(name, slotNumber, count): PlayerCmdInput {\n    return {cmd: 'unequip', slot: name, slotNumber, count};\n};\n\nRG.ONE_SHOT_ITEMS = ['potion'];\n\n/* Returns true if given item is one-shot use item by its type.*/\nRG.isOneShotItem = (item: ItemBase): boolean => {\n    const itemType = item.getType();\n    const index = RG.ONE_SHOT_ITEMS.indexOf(itemType);\n    return index >= 0;\n};\n\n\nRG.isActor = (obj): obj is BaseActor => {\n    if (obj && obj.getPropType) {\n        return obj.getPropType() === RG.TYPE_ACTOR;\n    }\n    return false;\n};\n\nRG.isElement = (obj): obj is ElementBase => {\n    if (obj && obj.getPropType) {\n        return obj.getPropType() === RG.TYPE_ELEM;\n    }\n    return false;\n};\n\nRG.isItem = (obj): obj is ItemBase => {\n    if (obj && obj.getPropType) {\n        return obj.getPropType() === RG.TYPE_ITEM;\n    }\n    return false;\n};\n\n/* Returns true if given object is an entity. Can return false results\n * sometimes. */\nRG.isEntity = (obj): obj is Entity => {\n    if (obj.comps && obj.compsByType && obj.add && obj.get) {\n        return true;\n    }\n    return false;\n};\n\n/* Can be queried if actor is still valid for serialisation or effects\n * like telepath or order giving. */\nRG.isActorActive = (target: Entity): boolean => {\n    return target && !target.has('Dead');\n};\n\n/* Returns the use type (ie drink or dig or hit...) for a item/target pair. */\nRG.getItemUseType = (item: ItemBase, targetOrObj): string => {\n    let target = targetOrObj;\n    if (targetOrObj.target) {\n        target = targetOrObj.target;\n        if (target.getActors) {\n            if (target.hasActors()) {\n                target = target.getActors()[0];\n            }\n        }\n    }\n    const itemType = item.getType();\n    switch (itemType) {\n        case 'potion': {\n            if (RG.isActor(target)) {\n                return RG.USE.DRINK;\n            }\n            break;\n        }\n        default: return '';\n    }\n    return '';\n};\n\n/* Given gold weight, returns the equivalent in coins.*/\nRG.getGoldInCoins = weight => Math.round(weight / RG.GOLD_COIN_WEIGHT);\n\n// These determine the size of one block in a level. These numbers are important\n// because they determine a sub-area used for procedural generation of shops,\n// vaults and other special features.\nRG.BLOCK_X = 20;\nRG.BLOCK_Y = 7;\n\n// Level size determined as function of BLOCK_X/Y. Note that due to different\n// block size or x/y, levels are not square shaped, but x > y.\nRG.LEVEL_SMALL_X = 3 * RG.BLOCK_X;\nRG.LEVEL_SMALL_Y = 3 * RG.BLOCK_Y;\nRG.LEVEL_MEDIUM_X = 4 * RG.BLOCK_X;\nRG.LEVEL_MEDIUM_Y = 4 * RG.BLOCK_Y;\nRG.LEVEL_LARGE_X = 5 * RG.BLOCK_X;\nRG.LEVEL_LARGE_Y = 5 * RG.BLOCK_Y;\nRG.LEVEL_HUGE_X = 7 * RG.BLOCK_X;\nRG.LEVEL_HUGE_Y = 7 * RG.BLOCK_Y;\n\n// Controls the number of items generated for each N squares\nRG.LOOT_SPARSE_SQR = 200;\nRG.LOOT_MEDIUM_SQR = 120;\nRG.LOOT_ABUNDANT_SQR = 50;\n\n// Controls the number of actors generated for each N squares\nRG.ACTOR_SPARSE_SQR = 200;\nRG.ACTOR_MEDIUM_SQR = 120;\nRG.ACTOR_ABUNDANT_SQR = 50;\n\n// Weakness levels of actors\nRG.WEAKNESS = {};\nRG.WEAKNESS.MINOR = 1;\nRG.WEAKNESS.MEDIUM = 3;\nRG.WEAKNESS.SEVERE = 7;\nRG.WEAKNESS.FATAL = 10;\n\n// Resistance levels of actor to different effects\nRG.RESISTANCE = {};\nRG.RESISTANCE.MINOR = 1;\nRG.RESISTANCE.MEDIUM = 3;\nRG.RESISTANCE.STRONG = 6;\nRG.RESISTANCE.IMMUNITY = 10;\nRG.RESISTANCE.ABSORB = 15;\n\n//-----------------------------\n// Systems used in the engine\n//-----------------------------\nRG.SYS = {};\nRG.SYS.ANIMATION = Symbol('ANIMATION');\nRG.SYS.AREA_EFFECTS = Symbol('AREA_EFFECTS');\nRG.SYS.ATTACK = Symbol('ATTACK');\nRG.SYS.BATTLE = Symbol('BATTLE');\nRG.SYS.BASE_ACTION = Symbol('BASE_ACTION');\nRG.SYS.CHAT = Symbol('CHAT');\nRG.SYS.COMMUNICATION = Symbol('COMMUNICATION');\nRG.SYS.DAMAGE = Symbol('DAMAGE');\nRG.SYS.DISABILITY = Symbol('DISABILITY');\nRG.SYS.EQUIP = Symbol('EQUIP');\nRG.SYS.EVENTS = Symbol('EVENTS');\nRG.SYS.EXP_POINTS = Symbol('EXP_POINTS');\nRG.SYS.HUNGER = Symbol('HUNGER');\nRG.SYS.MISSILE = Symbol('MISSILE');\nRG.SYS.MOVEMENT = Symbol('MOVEMENT');\nRG.SYS.QUEST = Symbol('QUEST');\nRG.SYS.SHOP = Symbol('SHOP');\nRG.SYS.SKILLS = Symbol('SKILLS');\nRG.SYS.SPELL_CAST = Symbol('SPELL_CAST');\nRG.SYS.SPELL_EFFECT = Symbol('SPELL_EFFECT');\nRG.SYS.SPIRIT = Symbol('SPIRIT');\nRG.SYS.TIME_EFFECTS = Symbol('TIME_EFFECTS');\nRG.SYS.WEATHER = Symbol('WEATHER');\n\nRG.NO_DAMAGE_SRC = null;\n\n\nRG.getCardinalDirection = (level: Level, cell: Cell): string => {\n    const cols = level.getMap().cols;\n    const rows = level.getMap().rows;\n    const x = cell.getX();\n    const y = cell.getY();\n    if (y === 0) {return 'north';}\n    if (y === rows - 1) {return 'south';}\n    if (x === cols - 1) {return 'east';}\n    if (x === 0) {return 'west';}\n    return 'somewhere';\n};\n\n/* Returns a textual (human-readable) interpretation of x,y difference between\n * to targets. */\nRG.getTextualDir = (dest: DestOrSrc, src: DestOrSrc, tol = 10): string => {\n    let res = '';\n    const [dX, dY] = RG.dXdY(dest, src);\n    const dXNew = dX / 10;\n    const dYNew = dY / 10;\n    if (dYNew > 0) {res += 'south';}\n    else if (dYNew < 0) {res += 'north';}\n    if (dXNew > 0) {res += ' east';}\n    else if (dXNew < 0) {res += 'west';}\n\n    if (res === '') {res = 'nearby from here';}\n    return res;\n};\n\n//-------------------------------------------------------------\n// RG ARRAY METHODS\n//-------------------------------------------------------------\n\ntype Map2D = any[][];\n\n/* Debugging function for printing 2D map row-by-row. */\nRG.printMap = (map: Map2D | CellMap): void => {\n    let rowByRow = null;\n    if (Array.isArray(map)) {\n        rowByRow = RG.colsToRows(map);\n    }\n    else if (Array.isArray((map as CellMap)._map)) {\n        rowByRow = RG.colsToRows((map as CellMap)._map);\n    }\n    if (rowByRow) {\n        const sizeY = rowByRow.length;\n        for (let y = 0; y < sizeY; y++) {\n            console.log(rowByRow[y].join(''));\n        }\n    }\n\n};\n\n\ntype ForEachCb<T> = (x: number, y: number, val?: T) => void;\n/* Iterates through 2D-array and calls the callback with (i, j, [i][j]) .*/\nRG.forEach2D = <T>(arr: T[][], func: ForEachCb<T>): void => {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n            func(i, j, arr[i][j]);\n        }\n    }\n};\n\ntype MapCb<T> = (x: number, y: number, val?: T) => T;\n/* Similar to Array.map, but maps a 2D array to an array of values. */\nRG.map2D = <T>(arr: T[][], func: MapCb<T>): T[] => {\n    const res = [];\n    RG.forEach2D(arr, (i, j, val) => {\n        res.push(func(i, j, val));\n    });\n    return res;\n};\n\nRG.copy2D = <T>(arr: T[][]): T[][] => {\n    const copy = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n        copy[i] = new Array(arr[i].length);\n        for (let j = 0; j < arr[i].length; j++) {\n            copy[i][j] = arr[i][j];\n        }\n    }\n    return copy;\n};\n\nRG.colsToRows = arr => {\n    const res = [];\n    const sizeY = arr[0].length;\n    const sizeX = arr.length;\n    for (let y = 0; y < sizeY; y++) {\n        res[y] = [];\n        for (let x = 0; x < sizeX; x++) {\n            res[y][x] = arr[x][y];\n        }\n    }\n    return res;\n};\n\n/* Given 2D array of elements, flattens all arrays inside each [x][y]\n * positions. */\nRG.flattenTo2D = arr => {\n    const sizeY = arr.length;\n    const res = [];\n    for (let y = 0; y < sizeY; y++) {\n        let row = arr[y];\n        row = flat(row);\n        res.push(row);\n    }\n    function flat(data) {\n        let r = [];\n        data.forEach(e => {\n            if (Array.isArray(e)) {\n                r = r.concat(flat(e));\n            }\n            else {\n                r.push(e);\n            }\n        });\n        return r;\n    }\n    return res;\n};\n\nRG.uniquifyCoord = (arr: TCoord[]): TCoord[] => {\n    const seen = {};\n    const res = [];\n    for (let i = 0; i < arr.length; i++) {\n        const [x, y] = arr[i];\n        const key = x + ',' + y;\n        if (!seen[key]) {\n            seen[key] = true;\n            res.push(arr[i]);\n        }\n    }\n    return res;\n};\n\n// ARRAY Funcs end\n\nRG.setAllExplored = (level, isExplored) => {\n    const map = level.getMap();\n    for (let x = 0; x < map.cols; x++) {\n        for (let y = 0; y < map.rows; y++) {\n            const cell = map._map[x][y];\n            cell.setExplored(isExplored);\n        }\n    }\n};\n\nRG.inSameLevel = (ent1, ent2) => {\n    return ent1.getLevel().getID() === ent2.getLevel().getID();\n};\n\n/* Returns a game message for cell which cannot be travelled. */\nRG.getImpassableMsg = (actor, cell, str) => {\n    const type = cell.getBaseElem().getType();\n    const cellMsg = `cannot venture beyond ${type}`;\n    return `${str} ${cellMsg}`;\n};\n\nRG.formatLocationName = (level): string => {\n    const feat = level.getParent();\n    if (!feat) {return '';}\n    switch (feat.getType()) {\n        case 'branch': // Fall through\n        case 'face': // Fall through\n        case 'quarter': {\n            const parent = feat.getParent();\n            const subName = feat.getName();\n            const zoneName = parent.getName();\n            if (subName === zoneName) {\n                return subName;\n            }\n            // return `${subName} of ${zoneName}`;\n            return `${zoneName}`;\n        }\n        default: return feat.getName();\n    }\n};\n\nimport {Random} from './random';\n\n/* Function to check if given action succeeds given it's probability. */\nRG.isSuccess = function(prob) {\n    const rng = Random.getRNG();\n    return rng.getUniform() <= prob;\n};\n\n\n/* A debug function which prints info about given entity. */\nRG.ent = function(whatever) {\n    if ((window as any).PLAYER) {\n        const level = (window as any).PLAYER.getLevel();\n        if (Number.isInteger(whatever)) {\n            const actor = level.getActors().find(a => a.getID() === whatever);\n            if (actor) {\n                const name = actor.getName();\n                RG.diag(`RG.ent: Found ${name} with ID ${whatever}`);\n                RG.diag(JSON.stringify(actor));\n                return actor;\n            }\n            const item = level.getItems().find(i => i.getID() === whatever);\n            if (item) {\n                const name = item.getName();\n                RG.diag(`RG.ent: Item Found ${name} with ID ${whatever}`);\n                RG.diag(JSON.stringify(item));\n                return item;\n            }\n        }\n    }\n    return null;\n};\n\nRG.comp = function(compID, entID = -1) {\n    let entity = null;\n    if (entID >= 0) {\n        entity = RG.ent(entID);\n    }\n    if (entity) {\n        const comps = entity.getComponents();\n        if (comps[compID]) {\n            const comp = comps[compID];\n            const type = comp.getType();\n            console.log(`RG.comp: Found ${type} with ID ${compID}`);\n            const json = comp.toJSON();\n            if (json) {\n                RG.diag(JSON.stringify(json));\n            }\n            else {\n                RG.diag('Not serialisable');\n                RG.diag(comp);\n            }\n            return comp;\n        }\n    }\n    return null;\n};\n\nRG.while = function(testFunc, loopBody, timeout = -1) {\n    let numTries = timeout;\n    while (testFunc()) {\n        loopBody();\n        if (--numTries === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// -------------------------------------------------\n// Functions for emitting in-game messages to player\n// -------------------------------------------------\n\ninterface GameMsgObject {\n    cell: Cell;\n    msg: string;\n}\n\ntype GameMsg = string | GameMsgObject;\n\nimport {EventPool} from './eventpool';\nconst POOL: EventPool = EventPool.getPool();\n\n// Accepts 2 different arguments:\n// 1. A simple string messages\n// 2. {msg: \"Your message\", cell: Origin cell of messaage}\n// Using 2. messages can be easily filtered by position.\nRG.gameMsg = function(msg: GameMsg): void {\n    this.emitMsgEvent('prim', msg);\n};\n\nRG.gameInfo = function(msg: GameMsg): void {\n    this.emitMsgEvent('info', msg);\n};\n\nRG.gameDescr = function(msg: GameMsg): void {\n    this.emitMsgEvent('descr', msg);\n};\n\nRG.gameSuccess = function(msg: GameMsg) {\n    this.emitMsgEvent('success', msg);\n};\n\nRG.gameWarn = function(msg: GameMsg) {\n    this.emitMsgEvent('warn', msg);\n};\n\nRG.gameDanger = function(msg: GameMsg) {\n    this.emitMsgEvent('danger', msg);\n};\n\n/* Emits message event with cell origin, style and message. */\nRG.emitMsgEvent = function(style: string, msg: GameMsg): void {\n    let newMsg = '';\n    if (typeof msg === 'object') {\n        const msgObj = msg as GameMsgObject;\n        const cell = msgObj.cell;\n        newMsg = msgObj.msg;\n        newMsg = newMsg[0].toUpperCase() + newMsg.substring(1);\n\n        const msgObject = {cell, msg: newMsg, style};\n        POOL.emitEvent(this.EVT_MSG, msgObject);\n    }\n    else {\n        newMsg = msg[0].toUpperCase() + msg.substring(1);\n        POOL.emitEvent(this.EVT_MSG, {msg: newMsg, style});\n    }\n\n};\n\n/* Destroys item (typically after use). */\nRG.destroyItemIfNeeded = item => {\n    if (RG.isOneShotItem(item)) {\n        if (item.getCount() === 1) {\n            const msg = {item};\n            POOL.emitEvent(RG.EVT_DESTROY_ITEM, msg);\n        }\n        else {\n            item.decrCount(1);\n        }\n    }\n};\n\n/* eslint no-unused-vars: 0 */\nexport default RG;\n","\nimport RG from './rg';\nimport ROT from '../../lib/rot';\nimport {TCoord, BBox} from './interfaces';\n\nconst DIRS = [-1, 0, 1];\nconst DIRS_NO_ZERO = [-1, 1];\n\nexport interface RandWeights {\n    [key: string]: number;\n}\n\n/* A OO wrapper around ROT.RNG. Adds method for serialisation. */\nexport class Random {\n\n    public static instance: Random;\n\n    public static setRNG(rng) {\n        Random.instance = rng;\n    }\n\n    public static getRNG() {\n        if (!Random.instance) {\n            Random.instance = new Random(666);\n        }\n        return Random.instance;\n    }\n\n    public static reseed(seed) {\n        ROT.RNG.setSeed(seed);\n        const RNG = Random.getRNG();\n        RNG.setSeed(seed);\n    }\n\n    public seed: number;\n    public rng: any;\n\n    constructor(seed = 0) {\n        this.seed = seed;\n        this.rng = ROT.RNG.clone();\n        this.rng.setSeed(this.seed);\n    }\n\n    public setSeed(seed: number): void {\n        console.log('Setting RNG seed to ' + seed);\n        this.seed = seed;\n        this.rng.setSeed(seed);\n    }\n\n    public setState(state): void {\n        this.rng.setState(state);\n    }\n\n    /* Return random property from the object.*/\n    public randProp(obj): any {\n        const keys = Object.keys(obj);\n        const keyIndex = this.randIndex(keys);\n        return obj[keys[keyIndex]];\n    }\n\n    /* Returns a random entry from the array.*/\n    public arrayGetRand<T>(arr: T[]): T { // Explodes the type errors\n        const randIndex = this.randIndex(arr);\n        return arr[randIndex];\n    }\n\n    /* Returns N unique items randomly from the array. This assumes that\n     * all items are already unique in the array. */\n    public getUniqueItems<T>(arr: T[], n: number = 2): T[] {\n        if (arr.length <= n) {\n            return arr.slice(); // Just return a copy\n        }\n        const seen: {[key: string]: boolean} = {};\n        const items: T[] = [];\n        while (items.length < n) {\n            const index = this.randIndex(arr);\n            if (!seen[index]) {\n                seen[index] = true;\n                items.push(arr[index]);\n            }\n        }\n        return items;\n    }\n\n    public getUniformInt(min: number, max: number): number {\n        return this.rng.getUniformInt(min, max);\n    }\n\n    /* Returns a random index number from given array. */\n    public randIndex(arr: any[]): number {\n        return Math.floor(this.rng.getUniform() * arr.length);\n    }\n\n    public getUniform(): number {\n        return this.rng.getUniform();\n    }\n\n    public getUniformRange(min: number, max: number): number {\n        const span = max - min;\n        const uniform = this.getUniform();\n        return min + span * uniform;\n    }\n\n    public getNormal(mean: number, stddev: number): number {\n        return this.rng.getNormal(mean, stddev);\n    }\n\n    public getWeighted(obj: RandWeights) {\n        return this.rng.getWeightedValue(obj);\n    }\n\n    /* Given a number N, returns an integer from 0 to N weighted such that N has the\n     * highest weight, and 0 the lowest. IE: {0: 1, 1: 2, ... N: N + 1}\n     */\n    public getWeightedLinear(N: number): number {\n        const weights: RandWeights = {};\n        for (let i = 0; i < N; i++) {\n            weights[i] = i + 1; // Without + 1, 0 will never be chosen\n        }\n        return this.rng.getWeightedValue(weights);\n    }\n\n    public toJSON(): any {\n        return {\n            seed: this.seed,\n            state: this.rng.getState()\n        };\n    }\n\n    /* Returns random direction [x, y] while excluding [0, 0]. */\n    public getRandDir(): TCoord {\n        const dX = this.arrayGetRand(DIRS);\n        let dY = this.arrayGetRand(DIRS);\n        if (dX === 0) {\n            dY = this.arrayGetRand(DIRS_NO_ZERO);\n        }\n        return [dX, dY];\n    }\n\n    /* Returns randomly one of the 4 cardinal directions. */\n    public getCardinalDir(): string {\n        return this.arrayGetRand(RG.CARDINAL_DIR);\n    }\n\n    public getCardinalDirLetter(): string {\n        return this.arrayGetRand(RG.CARDINAL_DIR_ABBR);\n    }\n\n    /* Returns a random xy-coord in the given bounding box. */\n    public getRandInBbox(bbox: BBox): TCoord {\n        const {ulx, uly, lrx, lry} = bbox;\n        // RG.nullOrUndefError([ulx, uly, lrx, lry]);\n        return [\n            this.getUniformInt(ulx, lrx),\n            this.getUniformInt(uly, lry)\n        ];\n    }\n\n    /*\n     * From http://stackoverflow.com/questions/2450954/\n     * how-to-randomize-shuffle-a-javascript-array\n     */\n    public shuffle<T>(array: T[]): T[] {\n        if (array.length <= 1) {return array;}\n        let currentIndex = array.length - 1;\n        let temporaryValue: T;\n        let randomIndex: number = 0;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = this.getUniformInt(0, currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n}\n\n","\nimport {Component} from './component.base';\nexport * from './component.base';\nexport * from './component';\n\nimport {MindControl} from './component.mindcontrol';\nexport * from './component.mindcontrol';\n\nimport {Abilities} from './component.abilities';\nexport * from './component.abilities';\n\nComponent.MindControl = MindControl;\nComponent.Abilities = Abilities;\n","\nimport RG from './rg';\nimport {Random} from './random';\nimport {TCoord, BBox} from './interfaces';\n\nconst RNG = Random.getRNG();\n\nexport interface BBoxOld {\n    llx: number;\n    lly: number;\n    urx: number;\n    ury: number;\n}\n\ntype Cell = import('./map.cell').Cell;\ntype Level = import('./level').Level;\n\ntype BBoxType = BBox | BBoxOld;\n\ninterface Diamond {\n    N: number[];\n    S: number[];\n    E: number[];\n    W: number[];\n    coord: TCoord[];\n}\n\n/* Contains generic 2D geometric functions for square/rectangle/triangle\n * generation and level manipulation. */\nexport const Geometry: any = {\n\n    /* Returns all coord in a box around x0,y0 within distance d. Last arg can\n     * be used to include the coordinate itself in the result. */\n    getBoxAround(x0, y0, d, incSelf = false): TCoord[] {\n        verifyInt([x0, y0]);\n        const res: TCoord[] = [];\n        for (let x = x0 - d; x <= x0 + d; x++) {\n            for (let y = y0 - d; y <= y0 + d; y++) {\n                if (x !== x0 || y !== y0) {\n                    res.push([x, y]);\n                }\n            }\n        }\n        if (incSelf) {res.push([x0, y0]);}\n        return res;\n    },\n\n    getCrossAround(x0, y0, d, incSelf = false): TCoord[] {\n        verifyInt([x0, y0, d]);\n        const res: TCoord[] = [];\n        for (let x = x0 - d; x <= x0 + d; x++) {\n            for (let y = y0 - d; y <= y0 + d; y++) {\n                if (x === x0 || y === y0) {\n                    if (x !== x0 || y !== y0) {\n                        res.push([x, y]);\n                    }\n                }\n            }\n        }\n        if (incSelf) {res.push([x0, y0]);}\n        return res;\n\n    },\n\n    getDiagCross(x0, y0, d, incSelf = false): TCoord[] {\n        verifyInt([x0, y0, d]);\n        const res: TCoord[] = [];\n        for (let x = x0 - d; x <= x0 + d; x++) {\n            for (let y = y0 - d; y <= y0 + d; y++) {\n                const dX = x - x0;\n                const dY = y - y0;\n                if (dX !== 0 && dY !== 0) {\n                    res.push([x, y]);\n                }\n            }\n        }\n        if (incSelf) {res.push([x0, y0]);}\n        return res;\n    },\n\n    getCrossCaveConn(x0, y0, d, incSelf = false): TCoord[] {\n        verifyInt([x0, y0, d]);\n        const res: TCoord[] = [];\n        for (let x = x0 - d; x <= x0 + d; x++) {\n            for (let y = y0 - d; y <= y0 + d; y++) {\n                if (x === x0 || y === y0) {\n                    if (x !== x0 || y !== y0) {\n                        res.push([x, y]);\n                    }\n                }\n            }\n        }\n        if (incSelf) {res.push([x0, y0]);}\n        return res;\n    },\n\n    /* Returns a box of coordinates given starting point and end points\n     * (inclusive). */\n    getBox(x0, y0, maxX, maxY): TCoord[] {\n        verifyInt([x0, y0, maxX, maxY]);\n        const res: TCoord[] = [];\n        for (let x = x0; x <= maxX; x++) {\n            for (let y = y0; y <= maxY; y++) {\n                res.push([x, y]);\n            }\n        }\n        return res;\n    },\n\n    /* Converts old (SoCE) style bbox to BitN bbox. */\n    convertBbox(bbox: BBoxType): BBox {\n        if (bbox.hasOwnProperty('llx')) {\n            return {\n                ulx: (bbox as BBoxOld).llx,\n                uly: (bbox as BBoxOld).ury,\n                lrx: (bbox as BBoxOld).urx,\n                lry: (bbox as BBoxOld).lly\n            };\n        }\n        else {\n            return (bbox as BBox);\n        }\n    },\n\n    getCoordBbox(bbox: BBox): TCoord[] {\n        const {ulx, uly, lrx, lry} = bbox;\n        return this.getBox(ulx, uly, lrx, lry);\n    },\n\n    getBorderForBbox(bbox: BBox): TCoord[] {\n        const {ulx, uly, lrx, lry} = bbox;\n        return this.getHollowBox(ulx, uly, lrx, lry);\n    },\n\n    getCellsInBbox(map2D: any[][], bbox: BBox): Cell[] {\n        const coord = this.getCoordBbox(bbox);\n        const result = [];\n        coord.forEach((xy: TCoord) => {\n            result.push(map2D[xy[0]][xy[1]]);\n        });\n        return result;\n    },\n\n    isInBbox(x: number, y: number, bbox: BBox): boolean {\n        const {ulx, uly, lrx, lry} = bbox;\n        return x >= ulx && x <= lrx && y >= uly && y <= lry;\n    },\n\n    isValidBbox(bbox: any): boolean {\n        if (!bbox) {return false;}\n        const {ulx, uly, lrx, lry} = bbox;\n        return !RG.isNullOrUndef([ulx, uly, lrx, lry]);\n    },\n\n    /* Converts a direction into bbox based on cols, rows. */\n    dirToBbox(cols: number, rows: number, dir: TCoord): BBox {\n        const colsDiv = Math.round(cols / 3);\n        const rowsDiv = Math.round(rows / 3);\n        const cBbox = {ulx: colsDiv, uly: rowsDiv,\n            lrx: 2 * colsDiv - 1, lry: 2 * rowsDiv - 1};\n        const dXdY = RG.dirTodXdY(dir);\n        if (dXdY) {\n            return {\n                ulx: cBbox.ulx + dXdY[0] * colsDiv,\n                uly: cBbox.uly + dXdY[1] * rowsDiv,\n                lrx: cBbox.lrx + dXdY[0] * colsDiv,\n                lry: cBbox.lry + dXdY[1] * rowsDiv\n            };\n        }\n        else {\n            RG.err('Geometry', 'dirToBbox', `Invalid dir ${dir} given.`);\n        }\n        return null;\n    },\n\n    /* Given two cells, returns bounding box defined by upper-left\n     * and lower-right corners.\n     */\n    getBoxCornersForCells(c0: Cell, c1: Cell): BBox {\n      const [x0, y0] = [c0.getX(), c0.getY()];\n      const [x1, y1] = [c1.getX(), c1.getY()];\n      const ulx = x0 <= x1 ? x0 : x1;\n      const lrx = x1 > x0 ? x1 : x0;\n      const uly = y0 <= y1 ? y0 : y1;\n      const lry = y1 > y0 ? y1 : y0;\n      return {ulx, uly, lrx, lry};\n    },\n\n    /* Given start x,y and end x,y coordinates, returns all x,y coordinates in\n     * the border of the rectangle.*/\n    getHollowBox(x0, y0, maxX, maxY) {\n        verifyInt([x0, y0, maxX, maxY]);\n        const res = [];\n        for (let x = x0; x <= maxX; x++) {\n            for (let y = y0; y <= maxY; y++) {\n                if ((y === y0 || y === maxY || x === x0 || x === maxX) ) {\n                    res.push([x, y]);\n                }\n            }\n        }\n        return res;\n    },\n\n    getHollowDiamond(x0: number, y0: number, size: number): Diamond {\n        verifyInt([x0, y0, size]);\n        const RightX = x0 + 2 * size;\n        const midX = x0 + size;\n        const highY = y0 + size;\n        const lowY = y0 - size;\n\n        const coord: TCoord[] = [[x0, y0]];\n        const diamond = {\n            N: [midX, highY],\n            S: [midX, lowY],\n            E: [RightX, y0],\n            W: [x0, y0],\n            coord: []\n        };\n        // Left side of the diamond\n        for (let x = x0 + 1; x <= midX; x++) {\n            // Upper left coordinates\n            for (let y = y0 + 1; y <= highY; y++) {\n                coord.push([x, y]);\n            }\n            // Lower left coordinates\n            for (let y = y0 - 1; y >= lowY; y--) {\n                coord.push([x, y]);\n            }\n        }\n\n        // Righ side of the diamond\n        for (let x = midX + 1; x <= RightX; x++) {\n            // Upper right coordinates\n            for (let y = y0 + 1; y <= highY; y++) {\n                coord.push([x, y]);\n            }\n            // Lower right coordinates\n            for (let y = y0 - 1; y >= lowY; y--) {\n                coord.push([x, y]);\n            }\n        }\n        diamond.coord = coord;\n        return diamond;\n    },\n\n    /* Returns true if given coordinate is one of the corners defined by the\n     * box. */\n    isCorner(x, y, ulx, uly, lrx, lry): boolean {\n        if (x === ulx || x === lrx) {\n            return y === uly || y === lry;\n        }\n        return false;\n    },\n\n    /* Removes all xy-pairs from the first array that are contained also in the\n     * 2nd one. Returns number of elements removed. */\n    removeMatching(modified, toBeRemoved): number {\n        let nFound = 0;\n        if (Array.isArray(modified)) {\n            toBeRemoved.forEach(xy => {\n                const index = modified.findIndex(xyPair => (\n                    xyPair[0] === xy[0] && xyPair[1] === xy[1]\n                ));\n\n                if (index >= 0) {\n                    modified.splice(index, 1);\n                    ++nFound;\n                }\n\n            });\n        }\n        else {\n            toBeRemoved.forEach(xy => {\n                const key = xy[0] + ',' + xy[1];\n                if (modified.hasOwnProperty(key)) {\n                    delete modified[key];\n                    ++nFound;\n                }\n            });\n        }\n        return nFound;\n    },\n\n\n    /* Tiles the list of levels to main level l1. Tiled levels placed\n     * side-by-side and aligned based on the conf. 'alignRight' will be\n     * implemented when needed.\n     */\n    tileLevels(l1: Level, levels: Level[], conf): void {\n      const {x, y} = conf;\n      let currX = x;\n      let currY = y;\n      if (conf.alignLeft) {\n        levels.forEach(level => {\n          this.mergeLevels(l1, level, currX, currY);\n          currY += level.getMap().rows;\n        });\n      }\n      else if (conf.centerX) {\n        const midX = Math.round(l1.getMap().cols / 2);\n        levels.forEach(level => {\n          currX = midX - Math.round(level.getMap().cols / 2);\n          this.mergeLevels(l1, level, currX, currY);\n          currY += level.getMap().rows;\n        });\n      }\n      else if (conf.centerY) {\n        const midY = Math.round(l1.getMap().rows / 2);\n        levels.forEach(level => {\n          currY = midY - Math.round(level.getMap().rows / 2);\n          this.mergeLevels(l1, level, currX, currY);\n          currX += level.getMap().cols;\n        });\n\n      }\n    },\n\n    /* Does a full Map.Level merge from l2 to l1.\n    * Actors, items and elements included. l1 will be the merged level. */\n    mergeLevels(l1: Level, l2: Level, startX, startY): void {\n        const m1 = l1.getMap();\n        const m2 = l2.getMap();\n\n        const numActors1 = l1.getActors().length;\n        const numActors2 = l2.getActors().length;\n        const numExpActors = numActors1 + numActors2;\n\n        // Need copies of lists, originals modified in foreach-loops\n        const actors = l2.getActors().slice();\n        const items = l2.getItems().slice();\n        const elements = l2.getElements().slice();\n        const allZero = actors.length === 0 && items.length === 0 &&\n            elements.length === 0;\n\n        // Nothing special to merge, just move cells + baseElems\n        /*\n        if (allZero) {\n            this.mergeMapCellsUnsafe(m1, m2, startX, startY);\n            return;\n        }\n        */\n\n        const getNewXY = prop => [prop.getX() + startX, prop.getY() + startY];\n        actors.forEach(actor => {\n            const [x, y] = getNewXY(actor);\n            if (m1.hasXY(x, y)) {\n                if (l2.removeActor(actor)) {\n                    l1.addActor(actor, x, y);\n                }\n            }\n        });\n\n        items.forEach(item => {\n            const [x0, y0] = [item.getX(), item.getY()];\n            const [x, y] = getNewXY(item);\n            if (m1.hasXY(x, y)) {\n                if (l2.removeItem(item, x0, y0)) {\n                    l1.addItem(item, x, y);\n                }\n            }\n        });\n\n        elements.forEach(elem => {\n            const [x0, y0] = [elem.getX(), elem.getY()];\n            const [x, y] = getNewXY(elem);\n            if (m1.hasXY(x, y)) {\n                if (l2.removeElement(elem, x0, y0)) {\n                    l1.addElement(elem, x, y);\n                }\n            }\n        });\n\n        this.mergeMapBaseElems(m1, m2, startX, startY);\n\n        const numActorsNew1 = l1.getActors().length;\n        if (numActorsNew1 !== numExpActors) {\n            RG.err('Geometry', 'mergeLevels',\n                `Num actors new: ${numActorsNew1}, exp: ${numExpActors}`);\n        }\n    },\n\n    /* Merges m2 into m1 starting from x,y in m1. Does not move items/actors. */\n    mergeMapBaseElems(m1, m2, startX, startY): void {\n        if (m1.cols < m2.cols) {\n            const got = `m1: ${m1.cols} m2: ${m2.cols}`;\n            RG.err('Geometry', 'mergeMapBaseElems',\n                'Cols: m2 cols must be smaller/equal: ' + got);\n        }\n        if (m1.rows < m2.rows) {\n            const got = `m1: ${m1.rows} m2: ${m2.rows}`;\n            RG.err('Geometry', 'mergeMapBaseElems',\n                'Rows: m2 rows must be smaller/equal: ' + got);\n        }\n        const endX = startX + m2.cols - 1;\n        const endY = startY + m2.rows - 1;\n        for (let x = startX; x <= endX; x++) {\n            for (let y = startY; y <= endY; y++) {\n                if (m1.hasXY(x, y)) {\n                    const cell = m2.getCell(x - startX, y - startY);\n                    m1._map[x][y].setBaseElem(cell.getBaseElem());\n                }\n            }\n        }\n    },\n\n    mergeMapCellsUnsafe(m1, m2, startX, startY): void {\n        const endX = startX + m2.cols - 1;\n        const endY = startY + m2.rows - 1;\n        for (let x = startX; x <= endX; x++) {\n            for (let y = startY; y <= endY; y++) {\n                if (m1.hasXY(x, y)) {\n                    const cell = m2.getCell(x - startX, y - startY);\n                    if (!cell) {\n                        RG.err('Geometry', 'mergeMapCellsUnsafe',\n                            `Null cell: ${startX},${startY}, [${x}][${y}]`);\n                    }\n                    m1.moveCellUnsafe(x, y, cell);\n                }\n            }\n        }\n    },\n\n    mergeMaps(m1, m2, startX, startY, mergeCb = (c1, c2) => true): void {\n        const endX = startX + m2.cols - 1;\n        const endY = startY + m2.rows - 1;\n        for (let x = startX; x <= endX; x++) {\n            for (let y = startY; y <= endY; y++) {\n                if (m1.hasXY(x, y)) {\n                    const cell2 = m2.getCell(x - startX, y - startY);\n                    const cell1 = m1._map[x][y];\n                    if (mergeCb(cell1, cell2)) {\n                        cell1.setBaseElem(cell2.getBaseElem());\n                    }\n                }\n            }\n        }\n\n    },\n\n    /* Calls the callback cb for each x,y coord in given bbox. Checks that x,y\n     * is within the bounds of given map. */\n    iterateMapWithBBox(map, bbox, cb) {\n        for (let x = bbox.ulx; x <= bbox.lrx; x++) {\n            for (let y = bbox.uly; y <= bbox.lry; y++) {\n                if (map.hasXY(x, y)) {\n                    cb(x, y);\n                }\n            }\n        }\n    },\n\n    insertEntity(l1: Level, type, bbox, parser): void {\n        switch (type) {\n            case RG.TYPE_ACTOR:\n                this.insertActors(l1, type, bbox, parser);\n                break;\n            case RG.TYPE_ITEM:\n                this.insertItems(l1, type, bbox, parser);\n                break;\n            case RG.TYPE_ELEM:\n                this.insertElements(l1, type, bbox);\n                break;\n            default: RG.err('Geometry', 'insertEntity',\n                `No type ${type} supported`);\n        }\n    },\n\n    /* Inserts elements into the given level as rectangle bounded by the\n     * coordinates given. */\n    insertElements(l1, elemType, bbox) {\n        const m1 = l1.getMap();\n        this.iterateMapWithBBox(m1, bbox, (x, y) => {\n            const elem = RG.FACT.createElement(elemType);\n            if (elemType.match(/(wall|floor)/)) {\n                m1._map[x][y].setBaseElem(elem);\n            }\n            else {\n                m1._map[x][y].setProp('elements', elem);\n            }\n        });\n    },\n\n    /* Inserts actors into the given level as rectangle bounded by the\n     * coordinates given. Skips non-free cells. */\n    insertActors(l1: Level, actorName, bbox, parser) {\n        const m1 = l1.getMap();\n        this.iterateMapWithBBox(m1, bbox, (x, y) => {\n            if (m1.getCell(x, y).isFree()) {\n                const actor = parser.createActualObj(RG.TYPE_ACTOR,\n                    actorName);\n                l1.addActor(actor, x, y);\n            }\n        });\n    },\n\n    /* Inserts items into the given level as rectangle bounded by the\n     * coordinates given. Skips non-free cells. */\n    insertItems(l1: Level, itemName, bbox, parser): void {\n        const m1 = l1.getMap();\n        this.iterateMapWithBBox(m1, bbox, (x, y) => {\n            if (m1.getCell(x, y).isFree()) {\n                const item = parser.createActualObj(RG.TYPE_ITEM, itemName);\n                l1.addItem(item, x, y);\n            }\n        });\n    },\n\n\n    /* Given a list of coordinates (can be any shape), checks if a box xDim *\n     * yDim fits anywhere. Returns true if OK, and\n     * 'result' will be a list of x,y pairs for the box. */\n    getFreeArea(freeCoord: TCoord[], xDim, yDim, result: TCoord[]): boolean {\n        let found = false;\n        const left = freeCoord.slice();\n        const lookupXY = {};\n        freeCoord.forEach(xy => {\n            lookupXY[xy[0] + ',' + xy[1]] = xy;\n        });\n\n        while (!found && left.length > 0) {\n            const index = RNG.getUniformInt(0, left.length - 1);\n\n            // Starting point\n            const x0 = left[index][0];\n            const y0 = left[index][1];\n            let areaOk = true;\n\n            for (let x = x0; x < x0 + xDim; x++) {\n                for (let y = y0; y < y0 + yDim; y++) {\n                    if (lookupXY[x + ',' + y]) {\n                        result.push([x, y]);\n                    }\n                    else {\n                        areaOk = false;\n                    }\n                }\n            }\n            found = areaOk;\n\n            if (!found) {\n                result = [];\n                left.splice(index);\n            }\n        }\n        return found;\n    },\n\n    isLine(x0, y0, x1, y1): boolean {\n        const isLine = x0 === x1 || y0 === y1\n            || Math.abs(x1 - x0) === Math.abs(y1 - y0);\n        return isLine;\n    },\n\n    xyInLine(coord: TCoord[]): boolean {\n        for (let i = 1; i < coord.length; i++) {\n            const [xy0, xy1] = [coord[i], coord[i - 1]];\n            const [x0, y0] = xy0;\n            const [x1, y1] = xy1;\n            if (!this.isLine(x0, y0, x1, y1)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /* Returns true if all coordinates in array have same x- or y-coordinates.\n     * */\n    sameXOrY(coord: TCoord[]): boolean {\n        for (let i = 1; i < coord.length; i++) {\n            const [xy0, xy1] = [coord[i], coord[i - 1]];\n            const [x0, y0] = xy0;\n            const [x1, y1] = xy1;\n            if (x0 !== x1 && y0 !== y1) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /* Returns all coordinates within straight line between two points. Returns\n     * empty array if there is no line. Straight means all cardinal directions.\n     */\n    getStraightLine(x0, y0, x1, y1, incEnds = true): TCoord[] {\n        if (this.isLine(x0, y0, x1, y1)) {\n            const res = [];\n            const dX = x1 === x0 ? 0 : (x1 - x0) / Math.abs(x1 - x0);\n            const dY = y1 === y0 ? 0 : (y1 - y0) / Math.abs(y1 - y0);\n            if (incEnds) {res.push([x0, y0]);}\n            while (x0 !== x1 || y0 !== y1) {\n                if (x0 !== x1) {x0 += dX;}\n                if (y0 !== y1) {y0 += dY;}\n\n                if (x0 === x1 && y0 === y1) {\n                    if (incEnds) {\n                        res.push([x0, y0]);\n                    }\n                }\n                else {\n                    res.push([x0, y0]);\n                }\n            }\n            return res;\n        }\n        return [];\n    },\n\n   /* Returns an array of xy-pairs belonging to Bresenham line from\n    *  x1,y1 -> x2,y2\n    * Original C-source:\n    * https://www.cs.unm.edu/~angel/BOOK/INTERACTIVE_COMPUTER_GRAPHICS\n    *   /FOURTH_EDITION/PROGRAMS/bresenham.c\n    */\n    getBresenham(x1, y1, x2, y2): TCoord[] {\n        let [dx, dy, i, e] = [0, 0, 0, 0];\n        let [incx, incy, inc1, inc2] = [0, 0, 0, 0];\n        let [x, y] = [0, 0];\n        const bresLine = [];\n\n        dx = x2 - x1;\n        dy = y2 - y1;\n\n        if (dx < 0) {dx = -dx;}\n        if (dy < 0) {dy = -dy;}\n        incx = 1;\n        if (x2 < x1) {incx = -1;}\n        incy = 1;\n        if (y2 < y1) {incy = -1;}\n        x = x1;\n        y = y1;\n        bresLine.push([x, y]);\n\n        if (dx > dy) {\n            e = 2 * dy - dx;\n            inc1 = 2 * (dy - dx);\n            inc2 = 2 * dy;\n            for (i = 0; i < dx; i++) {\n                if (e >= 0) {\n                    y += incy;\n                    e += inc1;\n                }\n                else {e += inc2;}\n                x += incx;\n                bresLine.push([x, y]);\n            }\n        }\n        else {\n            e = 2 * dx - dy;\n            inc1 = 2 * ( dx - dy);\n            inc2 = 2 * dx;\n            for (i = 0; i < dy; i++) {\n                if (e >= 0) {\n                    x += incx;\n                    e += inc1;\n                }\n                else {e += inc2;}\n                y += incy;\n                bresLine.push([x, y]);\n            }\n        }\n        return bresLine;\n    },\n\n    /* Returns a path from x0,y0 to x1,y1 which resembles \"straight\" line.\n    * TODO remove this as getBresenham() is now used. */\n    getMissilePath(x0, y0, x1, y1, incEnds = true) {\n        let res = [];\n        if (this.isLine(x0, y0, x1, y1)) {\n            res = this.getStraightLine(x0, y0, x1, y1, incEnds);\n        }\n        else {\n            if (incEnds) {res.push([x0, y0]);}\n            const dX = x1 - x0;\n            const dY = y1 - y0;\n            const dXAbs = Math.abs(dX);\n            const dYAbs = Math.abs(dY);\n\n            const dirX = dX / dXAbs;\n            const dirY = dY / dYAbs;\n\n            let xLeft = dXAbs;\n            let yLeft = dYAbs;\n            let currX = x0;\n            let currY = y0;\n\n            if (dXAbs > dYAbs) {\n\n                // Loop until we have straight line, or regular ratio between\n                // x/y distance\n                while (yLeft >= 0 && (xLeft % yLeft !== 0)) {\n                    currX += dirX;\n                    currY += dirY;\n                    res.push([currX, currY]);\n                    xLeft -= 1;\n                    yLeft -= 1;\n                }\n\n                if (yLeft === 0) { // Finish straight line\n                    while (currX !== x1) {\n                        currX += dirX;\n                        res.push([currX, currY]);\n                    }\n                }\n                else { // remainder 0\n                    const ratio = xLeft / yLeft;\n                    while (currX !== x1 && currY !== y1) {\n                        if (currY !== y1) {\n                            currY += dirY;\n                        }\n                        for (let i = 0; i < ratio; i++) {\n                            if (currX !== x1) {\n                                currX += dirX;\n                                res.push([currX, currY]);\n                            }\n                        }\n                    }\n                }\n\n            }\n            else if (dYAbs > dXAbs) {\n\n                // Loop until we have straight line, or regular ratio between\n                // x/y distance\n                while (xLeft >= 0 && (yLeft % xLeft !== 0)) {\n                    currX += dirX;\n                    currY += dirY;\n                    res.push([currX, currY]);\n                    xLeft -= 1;\n                    yLeft -= 1;\n                }\n\n                if (xLeft === 0) { // Finish straight line\n                    while (currY !== y1) {\n                        currY += dirY;\n                        res.push([currX, currY]);\n                    }\n                }\n                else { // remainder 0\n                    const ratio = yLeft / xLeft;\n                    while (currX !== x1 && currY !== y1) {\n                        if (currX !== x1) {\n                            currX += dirX;\n                        }\n                        for (let i = 0; i < ratio; i++) {\n                            if (currY !== y1) {\n                                currY += dirY;\n                                res.push([currX, currY]);\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n        return res;\n    }\n\n};\n\n\n/* From: https://en.wikipedia.org/wiki/Flood_fill\nFlood-fill (node, target-color, replacement-color):\n  1. If target-color is equal to replacement-color, return.\n  2. If color of node is not equal to target-color, return.\n  3. Set Q to the empty queue.\n  4.  Set the color of node to replacement-color.\n  5. Add node to the end of Q.\n  6. While Q is not empty:\n  7.     Set n equal to the first element of Q.\n  8.     Remove first element from Q.\n  9.     If the color of the node to the west of n is target-color,\n             set the color of that node to replacement-color and\n             add that node to the end of Q.\n 10.     If the color of the node to the east of n is target-color,\n             set the color of that node to replacement-color and add\n             that node to the end of Q.\n 11.     If the color of the node to the north of n is target-color,\n             set the color of that node to replacement-color\n             and add that node to the end of Q.\n 12.    If the color of the node to the south of n is target-color,\n           set the color of that node to replacement-color\n           and add that node to the end of Q.\n 13. Continue looping until Q is exhausted.\n 14. Return.\n*/\n\n/* Given a starting cell and type, floodfills the map from that position and\n * returns all cells included in the floodfill. */\nGeometry.floodfill = function(map, cell, type, diag = false) {\n    let filterFunc = type;\n    if (typeof type === 'string') {\n        filterFunc = c => c.getBaseElem().getType() === type;\n    }\n    if (!filterFunc(cell)) {return [];}\n\n    let currCell = cell;\n    const cellsLeft = [];\n    const result = [cell];\n    const colored = {}; // Needed because we're not changing anything\n    colored[cell.getKeyXY()] = true;\n\n    /* Private func which checks if the cell should be added to floodfill. */\n    const tryToAddCell = function(x, y) {\n        if (map.hasXY(x, y)) {\n            if (!colored[x + ',' + y]) {\n                const addedCell = map.getCell(x, y);\n                if (filterFunc(addedCell)) {\n                    colored[addedCell.getKeyXY()] = true;\n                    result.push(addedCell);\n                    cellsLeft.push(addedCell);\n                }\n            }\n        }\n    };\n\n    while (currCell) {\n        const [x, y] = currCell.getXY();\n        // 9. West\n        const xWest = x - 1;\n        tryToAddCell(xWest, y);\n\n        // 10. East\n        const xEast = x + 1;\n        tryToAddCell(xEast, y);\n\n        // 11. North\n        const yNorth = y - 1;\n        tryToAddCell(x, yNorth);\n\n        // 12. South\n        const ySouth = y + 1;\n        tryToAddCell(x, ySouth);\n\n        // Allow diagonals in fill if requested\n        if (diag) {\n            tryToAddCell(xWest, yNorth);\n            tryToAddCell(xEast, yNorth);\n            tryToAddCell(xWest, ySouth);\n            tryToAddCell(xEast, ySouth);\n        }\n\n        currCell = cellsLeft.shift();\n    }\n    return result;\n};\n\n/* Does a floodfill of map from point xy. Uses value as the filled value. BUT,\n * does not modify the map, only returns x,y coordinates which would be filled.\n * Optionally, creates a lookup table for fast lookup, and can fill diagonally,\n * if the last arg is true.\n */\nGeometry.floodfill2D = function(\n    map: any[][], xy: TCoord, value: any, lut = false, diag = false\n): TCoord[] {\n    const [x, y] = xy;\n    if (map[x][y] !== value) {return [];}\n\n    let currXY = xy;\n    const xyTodo = [];\n    const result = [currXY];\n    const colored = {}; // Needed because we're not changing anything\n    colored[x + ',' + y] = true;\n\n    /* Private func which checks if the cell should be added to floodfill. */\n    const tryToAddXY = function(sx, sy): void {\n        if (sx >= 0 && sx < map.length && sy >= 0 && sy < map[0].length) {\n            if (!colored[sx + ',' + sy]) {\n                const currValue = map[sx][sy];\n                if (currValue === value) {\n                    colored[sx + ',' + sy] = true;\n                    result.push([sx, sy]);\n                    if (lut) {lut[sx + ',' + sy] = true;}\n                    xyTodo.push([sx, sy]);\n                }\n            }\n        }\n    };\n\n    while (currXY) {\n        const [xx, yy] = currXY;\n        // 9. West\n        const xWest = xx - 1;\n        tryToAddXY(xWest, yy);\n\n        // 10. East\n        const xEast = xx + 1;\n        tryToAddXY(xEast, yy);\n\n        // 11. North\n        const yNorth = yy - 1;\n        tryToAddXY(xx, yNorth);\n\n        // 12. South\n        const ySouth = yy + 1;\n        tryToAddXY(xx, ySouth);\n\n        // Allow diagonals in fill if requested\n        if (diag) {\n            tryToAddXY(xWest, yNorth);\n            tryToAddXY(xEast, yNorth);\n            tryToAddXY(xWest, ySouth);\n            tryToAddXY(xEast, ySouth);\n        }\n\n        currXY = xyTodo.shift();\n    }\n    return result;\n\n};\n\n\nGeometry.getMassCenter = function(arr: TCoord[]): TCoord {\n    let x = 0;\n    let y = 0;\n    for (let i = 0; i < arr.length; i++) {\n        x += arr[i][0];\n        y += arr[i][1];\n    }\n    return [\n        Math.round(x / arr.length),\n        Math.round(y / arr.length)\n    ];\n};\n\n/* Square fill finds the largest square shaped region of a given cell type. */\nGeometry.squareFill = function(map, cell, type, dXdY): Cell[] {\n    const [endX, endY] = cell.getXY();\n    const [dX, dY] = dXdY;\n    if (dX === 0 || dY === 0) {\n        RG.err('Geometry', 'squareFill',\n            `dx,dy must be -1 or 1. Got ${dXdY}`);\n    }\n    let failed = false;\n    let result = [cell];\n    let currCell = cell;\n    // let prevCell = cell;\n\n    while (!failed) {\n        const round = [];\n        const [cX, cY] = currCell.getXY();\n        const [nX, nY] = [cX + dX, cY + dY];\n        if (map.hasXY(nX, nY)) {\n            const newDiag = map.getCell(nX, nY);\n            // 1. Get new diagonal, test it first\n            if (newDiag.getBaseElem().getType() !== type) {\n                failed = true;\n                break;\n            }\n            round.push(newDiag);\n\n            // 2. Traverse in x-direction\n            let x = nX;\n            do {\n                x += -dX;\n                const cellX = map.getCell(x, nY);\n                if (cellX.getBaseElem().getType() !== type) {\n                    failed = true;\n                    break;\n                }\n                round.push(cellX);\n\n            } while (x !== endX);\n\n            // 3. Traverse in y-direction\n            let y = nY;\n            do {\n                y += -dY;\n                const cellY = map.getCell(nX, y);\n                if (cellY.getBaseElem().getType() !== type) {\n                    failed = true;\n                    break;\n                }\n                round.push(cellY);\n\n            } while (y !== endY);\n\n            if (!failed) {\n                result = result.concat(round);\n            }\n\n            // prevCell = currCell;\n            currCell = newDiag;\n        }\n\n    }\n    return result;\n};\n\nGeometry.histArrayVals = function(array) {\n    const hist = {};\n    array.forEach(value => {\n        if (hist[value]) {hist[value] += 1;}\n        else {hist[value] = 1;}\n    });\n    return hist;\n};\n\n/* Recursive function, which builds up a list of coordinates on \"tesselated\"\n * line. Original line x0,y0 -> x1,y1 is divided into sub-lines, which\n * are created using bresenham line. */\nGeometry.tesselateLine = function(x0, y0, x1, y1, thr, coord): void {\n    const dX = Math.abs(x0 - x1);\n    const dY = Math.abs(y0 - y1);\n\n    const minX = x0 < x1 ? x0 : x1;\n    const maxX = x0 > x1 ? x0 : x1;\n    const minY = y0 < y1 ? y0 : y1;\n    const maxY = y0 > y1 ? y0 : y1;\n\n    if (dX >= thr && dY >= thr) {\n        const nX = RNG.getUniformInt(minX, maxX);\n        const nY = RNG.getUniformInt(minY, maxY);\n        Geometry.tesselateLine(x0, y0, nX, nY, thr, coord);\n        Geometry.tesselateLine(nX, nY, x1, y1, thr, coord);\n    }\n    else {\n        const lineCoord = Geometry.getBresenham(x0, y0, x1, y1);\n        lineCoord.forEach(xy => {\n            coord.push(xy);\n        });\n    }\n};\n\n/* Creates a cave connection using bresenham line between points x0,y0 and\n * x1,y1. Uses a special 'brush' such that line does not have only one\n * floor cell at each point. If thin line needs to be created, use the\n * the following conf: {brush: (x, y) => [x, y]}\n */\nGeometry.getCaveConnLine = function(x0, y0, x1, y1, conf?): TCoord[] {\n    let res: TCoord[] = [];\n    const bresLine: TCoord[] = [];\n    Geometry.tesselateLine(x0, y0, x1, y1, 4, bresLine);\n\n    let brushFunc = Geometry.getCrossCaveConn;\n    if (conf && typeof conf.brush === 'function') {\n        brushFunc = conf.brush;\n    }\n    bresLine.forEach((xy: TCoord) => {\n        const [x, y] = xy;\n        const w = RNG.getUniformInt(1, 3);\n        const coord = brushFunc(x, y, w, true);\n        res = res.concat(coord);\n    });\n    return res;\n};\n\n/* Checks that all given args are ints. */\nfunction verifyInt(arr) {\n    arr.forEach(val => {\n        if (!Number.isInteger(val)) {\n            const json = JSON.stringify(arr);\n            RG.err('Geometry', 'verifyInt',\n                'Value not an Int. Arr: ' + json);\n        }\n    });\n}\n","\nimport RG from '../rg';\nimport * as Component from '../component';\nimport {Entity} from '../entity';\nimport {EventPool} from '../eventpool';\nimport {Random} from '../random';\n\nconst dbg = require('debug');\nconst debug = dbg('bitn:System');\nconst POOL = EventPool.getPool();\n\n//---------------------------------------------------\n/** Base class for all systems in ECS framework.\n * @constructor SystemBase\n * @param {string} type - System type\n * @param {array}  compTypes - Types of comps to listen to\n */\n//---------------------------------------------------\nexport abstract class SystemBase {\n\n    //---------------------------------------------------------\n    // Non-member functions used for utility in other systems\n    //---------------------------------------------------------\n\n    /* For adding skills experience components. */\n    public static addSkillsExp(att, skill, pts = 1): void {\n        if (att.has('Skills')) {\n            const comp = new Component.SkillsExp();\n            comp.setSkill(skill);\n            comp.setPoints(pts);\n            att.add(comp);\n        }\n    }\n\n    /* After succesful hit, adds the given comp to specified entity ent. */\n    public static addCompToEntAfterHit(comp, ent, src): void {\n        const compClone = comp.clone();\n\n        if (compClone.hasOwnProperty('duration')) {\n            const compDur = compClone.rollDuration();\n            const expiration = new Component.Expiration();\n            expiration.addEffect(compClone, compDur);\n            ent.add(expiration);\n        }\n\n        // Source not present in negative buffs like StatsMods/CombatMods,\n        // but needed for Poison etc damage\n        if (compClone.getSource) {\n            const compSrc = compClone.getSource();\n            if (RG.isNullOrUndef([compSrc])) {\n                compClone.setSource(src);\n            }\n        }\n\n        ent.add(compClone);\n    }\n\n    public type: string; // Type of the system\n    public compTypes: string[];\n    public entities: {[key: string]: Entity};\n\n    // If set to true, only one comp has to match the compTypes, otherwise all\n    // components in compTypes must be present\n    public compTypesAny: boolean;\n\n    /* Listens to add/removes for each component type in compTypes.*/\n    public hasNotify: boolean;\n\n    public debugEnabled: boolean;\n    public rng: Random;\n\n    constructor(type: string, compTypes: string[], pool?: EventPool) {\n        if (!Array.isArray(compTypes)) {\n            RG.err('System.Base', 'new',\n                '2nd arg must be an array of component types');\n        }\n\n        this.type = type; // Type of the system\n        this.compTypes = compTypes; // Required comps in entity\n        this.entities = {}; // Entities requiring processing\n\n        // If set to true, only one comp has to match the compTypes, otherwise all\n        // components in compTypes must be present\n        this.compTypesAny = false;\n\n        /* Listens to add/removes for each component type in compTypes.*/\n        this.hasNotify = true;\n\n        // Add a listener for each specified component type\n        for (let i = 0; i < this.compTypes.length; i++) {\n            if (!Component.hasOwnProperty(this.compTypes[i])) {\n                RG.err('System.Base', 'new',\n                    `Comp type ${this.compTypes[i]} not in Component`);\n            }\n\n            if (pool) {\n                pool.listenEvent(this.compTypes[i], this);\n            }\n            else {\n                POOL.listenEvent(this.compTypes[i], this);\n            }\n        }\n\n        this.debugEnabled = debug.enabled;\n        this.rng = Random.getRNG();\n    }\n\n    public setRNG(rng: Random): void {\n        this.rng = rng;\n    }\n\n    public addEntity(entity: Entity): void {\n        this.entities[entity.getID()] = entity;\n    }\n\n    public removeEntity(entity: Entity): void {\n        delete this.entities[entity.getID()];\n    }\n\n    public notify(evtName, obj) {\n        if (obj.hasOwnProperty('add')) {\n            if (this.hasCompTypes(obj.entity)) {this.addEntity(obj.entity);}\n        }\n        else if (obj.hasOwnProperty('remove')) {\n            // Must check if any needed comps are still present, before removing\n            // the entity\n            if (!this.hasCompTypes(obj.entity)) {\n                this.removeEntity(obj.entity);\n            }\n        }\n    }\n\n    /* Returns true if entity has all required component types, or if\n     * compTypesAny if set, if entity has any required component. */\n    public hasCompTypes(entity): boolean {\n        const compTypes = this.compTypes;\n        if (this.compTypesAny === false) { // All types must be present\n            return entity.hasAll(compTypes);\n        }\n        else { // Only one compType has to be present\n            return entity.hasAny(compTypes);\n        }\n    }\n\n    /* Returns true if there is at least 1 entity to process. */\n    public hasEntities(): boolean {\n        return Object.keys(this.entities).length > 0;\n    }\n\n    public update(): void {\n        for (const e in this.entities) {\n            if (!e) {continue;}\n            this.updateEntity(this.entities[e]);\n        }\n    }\n\n    public updateEntity(e: Entity): void {\n        RG.err('SystemBase', 'updateEntity',\n            'Not implemented in the base class');\n    }\n\n    /* For printing out debug information. */\n    public dbg(msg): void {\n        if (debug.enabled) {\n            const nEnt = Object.keys(this.entities).length;\n            let descr = `[System ${this.type.toString()}]`;\n            descr += ` nEntities: ${nEnt}`;\n            debug(`${descr} ${msg}`);\n        }\n    }\n}\n","/*\n * File containing map elements. These are either terrain or interactive\n * elements like stairs.\n */\n\nimport RG from './rg';\nimport {Entity} from './entity';\nimport * as Mixin from './mixin';\nimport * as Component from './component/component';\nimport {compsToJSON} from './component/component.base';\n\ntype Cell = import('./map.cell').Cell;\ntype Level = import('./level').Level;\n\nexport interface ElementJSON {\n    id: number;\n    name: string;\n    type: string;\n    components: {[key: string]: any};\n}\n\nexport const Element: any = {};\n\nconst wallRegexp = /wall/;\nconst obstacleRegexp = /(?:highrock|water|chasm|wall)/;\n\ninterface StringMap {\n    [key: string]: string;\n}\n\nElement.canJumpOver = type => {\n    return !(wallRegexp.test(type) || (/highrock/).test(type));\n};\n\ninterface NameArgs {\n    name: string;\n    type: string;\n}\n\ninterface StairsXY {\n    x: number;\n    y: number;\n}\n\nexport interface ConnectionObj {\n    targetStairs: StairsXY;\n    targetLevel: number;\n}\n\n/* Element is a wall or other obstacle or a feature in the map. It's not\n * necessarily blocking movement.  */\nexport class ElementBase extends Mixin.Typed(Entity) {\n\n    constructor(elemName: string | NameArgs, elemType?: string) {\n        let name = null;\n        let type = null;\n        // To support args passing via Mixin\n        if (typeof elemName === 'object') {\n            name = elemName.name;\n            type = elemName.type;\n        }\n        else { // To allow name/type without object\n            name = elemName;\n            type = elemType;\n        }\n        type = type || name;\n        super({propType: RG.TYPE_ELEM, type});\n        RG.elementsCreated += 1; // Used for debugging only\n        this._name = name;\n        this.msg = {};\n    }\n\n    public getName(): string {return this._name;}\n    public setName(name: string) {this._name = name;}\n\n    public isWall(): boolean {\n        return wallRegexp.test(this.getType());\n    }\n\n    public isObstacle(): boolean {\n        return obstacleRegexp.test(this.getType());\n    }\n\n    public isPassable(): boolean {\n        return !this.has('Impassable');\n    }\n\n    public isPassableByAir(): boolean {\n        if (this.has('Impassable')) {\n            return this.get('Impassable').canFlyOver;\n        }\n        return true;\n    }\n\n    public isSpellPassable(): boolean {\n        if (this.has('Impassable')) {\n            return this.get('Impassable').spellPasses;\n        }\n        return true;\n    }\n\n    public lightPasses(): boolean {\n        return !this.has('Opaque');\n    }\n\n    public setMsg(msg: StringMap): void {\n        this.msg = msg;\n    }\n\n    public getMsg(msgType: string): string {\n        return this.msg[msgType];\n    }\n\n    public hasMsg(msgType: string): boolean {\n        return this.msg.hasOwnProperty(msgType);\n    }\n\n    /* Called when System adds this element to a cell. */\n    public onSystemAdd(cell: Cell): void {\n    }\n\n    /* Called when System removes this element from a cell. */\n    public onSystemRemove(cell: Cell): void {\n    }\n\n    /* Should be enough for stateless elements.\n     * Does not work for doors or stairs etc. */\n    public toJSON(): ElementJSON {\n        const components = compsToJSON(this);\n        const obj: any = {\n            id: this.getID(),\n            name: this.getName(),\n            type: this.getType(),\n            msg: this.msg\n        };\n        if (components) {\n            obj.components = components;\n        }\n        return obj;\n    }\n}\nElement.Base = ElementBase;\nRG.elementsCreated = 0;\n\nexport class ElementWall extends ElementBase {\n\n    constructor(name) {\n        super(name);\n        this.add(new Component.Opaque());\n        const impassable = new Component.Impassable();\n        impassable.setAllImpassable();\n        this.add(impassable);\n    }\n\n}\nElement.Wall = ElementWall;\n\n/* Object models stairs connecting two levels. Stairs are one-way, thus\n * connecting 2 levels requires two stair objects. */\nexport class ElementStairs extends Mixin.Locatable(ElementBase) {\n\n    protected _targetStairs: ElementStairs | StairsXY;\n\n    constructor(name, srcLevel?, targetLevel?) {\n        super({name, type: 'connection'});\n        this._srcLevel = srcLevel;\n        this._targetLevel = targetLevel;\n        this._targetStairs = null;\n    }\n\n    /* Returns true if the stairs are connected. */\n    public isConnected(): boolean {\n        return !RG.isNullOrUndef([\n            this._srcLevel, this._targetLevel, this._targetLevel\n        ]);\n    }\n\n    /* Sets the source level for the stairs. */\n    public setSrcLevel(src): void {\n        if (!RG.isNullOrUndef([src])) {\n            this._srcLevel = src;\n        }\n        else {\n            RG.err('Element.Stairs', 'setSrcLevel',\n                'Cannot set null/undefined level');\n        }\n    }\n\n    public getSrcLevel() {return this._srcLevel;}\n\n    /* Sets the target level for the stairs. */\n    public setTargetLevel(target): void {\n        if (!RG.isNullOrUndef([target])) {\n            this._targetLevel = target;\n        }\n        else {\n            RG.err('Element.Stairs', 'setTargetLevel',\n                'Cannot set null/undefined level.');\n        }\n    }\n\n    public getTargetLevel(): Level | number {\n        return this._targetLevel;\n    }\n\n    /* Sets target stairs for this object. Also sets the level if target\n     * stairs\n     * have one specified. */\n    public setTargetStairs(stairs: ElementStairs): void {\n        if (!RG.isNullOrUndef([stairs])) {\n            this._targetStairs = stairs;\n            const targetLevel = stairs.getSrcLevel();\n            if (!RG.isNullOrUndef([targetLevel])) {\n                this.setTargetLevel(targetLevel);\n            }\n        }\n        else {\n            RG.err('Element.Stairs', 'setTargetStairs',\n                'Cannot set null/undefined stairs.');\n        }\n    }\n\n    public getTargetStairs(): ElementStairs | StairsXY {\n        return this._targetStairs;\n    }\n\n\n    /* Returns unique ID for the stairs.\n     * Unique ID can be formed by levelID,x,y. */\n    public getID(): string {\n        const x = this.getX();\n        const y = this.getY();\n        const id = this._srcLevel.getID();\n        return `${id},${x},${y}`;\n    }\n\n    /* Connects to stairs together. Creates multiple connections if given array\n     * of stairs. */\n    public connect(stairs: ElementStairs | ElementStairs[], index = 0) {\n        if (Array.isArray(stairs)) {\n            stairs.forEach(ss => {\n                ss.setTargetStairs(this);\n                ss.setTargetLevel(this.getSrcLevel());\n            });\n            this.setTargetStairs(stairs[index]);\n            this.setTargetLevel(stairs[index].getSrcLevel());\n        }\n        else {\n            this.setTargetStairs(stairs);\n            stairs.setTargetStairs(this);\n            this.setTargetLevel(stairs.getSrcLevel());\n            stairs.setTargetLevel(this.getSrcLevel());\n        }\n    }\n\n    public isDown(): boolean {return (/stairsDown/).test(this.getName());}\n\n    /* Target actor uses the stairs to move to their target.*/\n    public useStairs(actor): boolean {\n        if (!RG.isNullOrUndef([this._targetStairs, this._targetLevel])) {\n            if (this._targetStairs instanceof ElementStairs) {\n                const newX = this._targetStairs.getX();\n                const newY = this._targetStairs.getY();\n                if (this._srcLevel.removeActor(actor)) {\n                    if (this._targetLevel.addActor(actor, newX, newY)) {\n                        return true;\n                    }\n                }\n            }\n            else {\n                RG.err('ElementStairs', 'useStairs',\n                   'Tried to use stairs without proper targetStairs');\n            }\n        }\n        return false;\n    }\n\n    /* Sets target level/stairs using a connection object. This is useful when\n     * target is known but does not exist (due to target level not being\n     * loaded).*/\n    public setConnObj(connObj: ConnectionObj): void {\n        this._targetStairs = connObj.targetStairs;\n        this._targetLevel = connObj.targetLevel;\n    }\n\n    /* Convert this Stairs into connection object. */\n    public getConnObj(): ConnectionObj {\n        const targetStairs = this.getTargetStairs();\n        if (targetStairs instanceof ElementStairs) {\n            const targetLevel = this.getTargetLevel() as Level;\n            return {\n                targetStairs: {\n                    x: targetStairs.getX(),\n                    y: targetStairs.getY()\n                },\n                targetLevel: targetLevel.getID()\n            };\n        }\n        else {\n            return {\n                targetStairs: {\n                    x: targetStairs.x, y: targetStairs.y\n                },\n                targetLevel: this.getTargetLevel() as number\n            };\n        }\n    }\n\n    /* Serializes the Stairs object. */\n    public toJSON(): any {\n        const json: any = {\n            name: this.getName(),\n            type: this.getType()\n        };\n        if (this._srcLevel) {\n            json.srcLevel = this.getSrcLevel().getID();\n        }\n\n        if (Number.isInteger(this._targetLevel)) {\n            json.targetLevel = this._targetLevel;\n        }\n        else if (this._targetLevel) {\n            json.targetLevel = (this.getTargetLevel() as Level).getID();\n        }\n\n        const targetStairs = this.getTargetStairs();\n        if (targetStairs) {\n            if (targetStairs instanceof ElementStairs) {\n                json.targetStairs = {\n                    x: targetStairs.getX(),\n                    y: targetStairs.getY()\n                };\n            }\n            else {\n                json.targetStairs = targetStairs;\n            }\n        }\n        return json;\n    }\n\n}\n\nElement.Stairs = ElementStairs;\n\n/* Name says it all, be it open or closed.*/\nexport class ElementDoor extends Mixin.Locatable(ElementBase) {\n    constructor(closed) {\n        super('door');\n        this._closed = (typeof closed === 'undefined')\n            ? true : closed;\n\n        this._opaque = new Component.Opaque();\n        const impassable = new Component.Impassable();\n        impassable.setAllImpassable();\n        this._impassable = impassable;\n        if (this._closed) {this.closeDoor();}\n    }\n\n    /* Checks if door can be manually opened. */\n    public canToggle(): boolean {return true;}\n\n    public isOpen(): boolean {\n        return !this._closed;\n    }\n\n    public isClosed() {\n        return this._closed;\n    }\n\n    public openDoor() {\n        this._closed = false;\n        this.remove('Opaque');\n        this.remove('Impassable');\n    }\n\n    public closeDoor() {\n        this._closed = true;\n        this.add(this._opaque);\n        this.add(this._impassable);\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.closed = this._closed;\n        return json;\n        /* return {\n            id: this.getID(),\n            type: 'door',\n            closed: this._closed\n        };*/\n    }\n}\nElement.Door = ElementDoor;\n\n/* A door which can be opened using a lever only. */\nexport class ElementLeverDoor extends ElementDoor {\n\n    constructor(isClosed = true) {\n        super(isClosed);\n        this.setType('leverdoor');\n    }\n\n    public canToggle() {return false;}\n\n    public onUse() {\n        if (this.isOpen()) {this.closeDoor();}\n        else {this.openDoor();}\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.type = 'leverdoor';\n        return json;\n    }\n}\nElement.LeverDoor = ElementLeverDoor;\n\n/* Lever element can be used to trigger any target entities having onUse(actor)\n * function. Targets should be added using addTarget().\n */\nexport class ElementLever extends Mixin.Locatable(ElementBase) {\n\n    constructor() {\n        super('lever');\n        this._targets = [];\n    }\n\n    public getTargets() {\n        return this._targets;\n    }\n\n    public addTarget(target) {\n        this._targets.push(target);\n    }\n\n    public onUse(actor) {\n        this._targets.forEach(target => {\n            if (target.onUse) {\n                target.onUse(actor);\n            }\n        });\n    }\n\n    public toJSON() {\n        return {\n            id: this.getID(),\n            type: 'lever',\n            addTarget: this._targets.map(t => RG.getObjRef('entity', t))\n        };\n    }\n}\nElement.Lever = ElementLever;\n\n/* A shop element is added to each cell inside a shop.*/\nexport class ElementShop extends Mixin.Locatable(ElementBase) {\n    constructor() {\n        super('shop');\n        this._shopkeeper = null;\n        this._costFactorShopSells = 1.0;\n        this._costFactorShopBuys = 0.5;\n        this._isAbandoned = true;\n    }\n\n    public isAbandoned(): boolean {\n        return this._isAbandoned;\n    }\n\n    public reclaim(actor): void {\n        this._shopkeeper = actor;\n        this._isAbandoned = false;\n    }\n\n    /* Returns the price in gold coins for item in the cell.*/\n    public getItemPriceForBuying(item): number {\n        if (item.has('Unpaid')) {\n            const value = item.getValue();\n            const goldWeight = RG.valueToGoldWeight(value);\n            let ncoins = RG.getGoldInCoins(goldWeight);\n            ncoins *= item.getCount();\n            ncoins = Math.ceil(this._costFactorShopSells * ncoins);\n            if (ncoins === 0) {\n                return 1;\n            }\n            return ncoins;\n        }\n        else {\n            RG.err('Element.Shop', 'getItemPriceForBuying',\n                'Item ' + item.getName() + ' is not Unpaid item');\n        }\n        return 0;\n    }\n\n    /* Returns the price for selling the item. */\n    public getItemPriceForSelling(item, count?): number {\n        const value = item.getValue();\n        const goldWeight = RG.valueToGoldWeight(value);\n        let ncoins = RG.getGoldInCoins(goldWeight);\n        if (count) {ncoins *= count;}\n        else {ncoins *= item.getCount();}\n        ncoins = Math.floor(this._costFactorShopBuys * ncoins);\n        return ncoins;\n    }\n\n    public abandonShop(): void {\n        this._shopkeeper = null;\n        this._isAbandoned = true;\n    }\n\n    /* Sets the shopkeeper.*/\n    public setShopkeeper(keeper): void {\n        if (!RG.isNullOrUndef([keeper])) {\n            this._shopkeeper = keeper;\n            this._isAbandoned = false;\n        }\n        else {\n            RG.err('Element.Shop', 'setShopkeeper',\n                'Shopkeeper must be non-null and defined.');\n        }\n    }\n\n    /* Returns the shopkeeper.*/\n    public getShopkeeper(): void {\n        return this._shopkeeper;\n    }\n\n    /* Sets the cost factors for selling and buying. .*/\n    public setCostFactor(buy: number, sell: number): void {\n        if (!RG.isNullOrUndef([buy, sell])) {\n            this._costFactorShopSells = sell;\n            this._costFactorShopBuys = buy;\n        }\n        else {\n            RG.err('Element.Shop', 'setCostFactor',\n                'Args buy/sell must be non-null and defined!');\n        }\n    }\n\n    /* Returns the cost factor for selling. .*/\n    public getCostFactorSell(): number {\n        return this._costFactorShopSells;\n    }\n\n    /* Returns the cost factor for buying. .*/\n    public getCostFactorBuy(): number {\n        return this._costFactorShopBuys;\n    }\n\n    public toJSON() {\n        let shopkeeperID = null;\n        if (this._shopkeeper) {\n            shopkeeperID = this._shopkeeper.getID();\n        }\n        const obj: any = {\n            type: 'shop',\n            isAbandoned: this._isAbandoned,\n            costFactorSell: this._costFactorShopSells,\n            costFactorBuy: this._costFactorShopBuys\n        };\n        if (shopkeeperID !== null) {\n            obj.shopkeeper = shopkeeperID;\n        }\n        return obj;\n    }\n}\n\nElement.Shop = ElementShop;\n\n/* An experience element which is found in the dungeons. */\nexport class ElementExploration extends Mixin.Locatable(ElementBase) {\n    constructor() {\n        super('exploration');\n        this.exp = 0;\n    }\n\n    public setData(data): void {\n        this.data = data;\n    }\n\n    public addData(key, val): void {\n        this.data[key] = val;\n    }\n\n    public getData() {return this.data;}\n\n    public hasData(): boolean {\n        if (this.data) {return true;}\n        return false;\n    }\n\n    public setExp(exp): void {\n        if (Number.isInteger(exp)) {\n            this.exp = exp;\n        }\n        else {\n            RG.err('ElementExploration', 'setExp',\n                `exp is not an integer: ${exp}`);\n        }\n    }\n\n    public getExp(): number {\n        return this.exp;\n    }\n\n\n    public toJSON() {\n        const json: any = {\n            type: this.getType(),\n            setExp: this.getExp()\n        };\n        if (this.hasData()) {\n            json.data = this.data;\n        }\n        return json;\n    }\n\n}\nElement.Exploration = ElementExploration;\n\n/* Base element for traps. */\nexport class ElementTrap extends Mixin.Locatable(ElementBase) {\n\n    constructor(type: string) {\n        super(type);\n    }\n\n    public onSystemAdd(cell: Cell): void {\n        const actors = cell.getSentientActors();\n        actors.forEach(actor => {\n            actor.add(new Component.Entrapped());\n        });\n    }\n\n    public onSystemRemove(cell: Cell): void {\n        const actors = cell.getSentientActors();\n        actors.forEach(actor => {\n            actor.remove('Entrapped');\n        });\n    }\n}\n\nexport class ElementWeb extends ElementTrap {\n\n    constructor() {\n        super('web');\n        const entrapComp = new Component.Entrapping();\n        entrapComp.setDestroyOnMove(true);\n        entrapComp.setDifficulty(20);\n        this.add(entrapComp);\n    }\n\n    public setDifficulty(diff: number): void {\n        this.get('Entrapping').setDifficulty(diff);\n    }\n\n}\nElement.Web = ElementWeb;\n\nexport class ElementSlime extends ElementTrap {\n\n    constructor() {\n        super('slime');\n        const entrapComp = new Component.Entrapping();\n        entrapComp.setDestroyOnMove(true);\n        entrapComp.setDifficulty(30);\n        this.add(entrapComp);\n    }\n\n    public setDifficulty(diff: number): void {\n        this.get('Entrapping').setDifficulty(diff);\n    }\n\n}\nElement.Slime = ElementSlime;\n\nexport class ElementHole extends ElementTrap {\n\n    constructor() {\n        super('hole');\n        const entrapComp = new Component.Entrapping();\n        entrapComp.setDestroyOnMove(false);\n        entrapComp.setDifficulty(50);\n        this.add(entrapComp);\n    }\n\n    public setDifficulty(diff: number): void {\n        this.get('Entrapping').setDifficulty(diff);\n    }\n\n}\nElement.Hole = ElementHole;\n\n/* Used in proc gen to denote places for actors, items and other elements. For\n* example, different places for stairs can be set, and then one chosen. */\nexport class ElementPlaceholder extends Mixin.Locatable(ElementBase) {\n    constructor() {\n        super('placeholder');\n    }\n}\nElement.PlaceHolder = ElementPlaceholder;\n\n/* Used in the debugging of levels only. Can be used to add arbitrary characters\n * into level maps when debugging. */\nexport class ElementMarker extends Mixin.Locatable(ElementBase) {\n    constructor(char) {\n        super('marker');\n        this.char = char;\n        this.tag = '';\n        this.className = false; // Uses default cell-element-marker\n    }\n\n    public getClassName() {return this.className;}\n    public setClassName(name) {this.className = name;}\n\n    public getChar() {return this.char;}\n    public setChar(char) {this.char = char;}\n\n    public setTag(tag) {this.tag = tag;}\n    public getTag() {return this.tag;}\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.char = this.char;\n        json.tag = this.tag;\n        return json;\n    }\n}\nElement.Marker = ElementMarker;\n\n\nexport const create = function(type: string, ...args): ElementBase {\n    const nameCap = type.capitalize();\n    if (Element.hasOwnProperty(type)) {\n        return new Element[type](...args);\n    }\n    return null;\n};\n\nElement.create = create;\n","\nimport RG from './rg';\nimport {Objects} from '../data/battles_objects';\nimport {ActorsData, adjustActorValues} from '../data/actors';\nimport * as Actor from './actor';\nimport * as Item from './item';\nimport {Effects} from '../data/effects';\nimport {Brain} from './brain';\n// import * as Brain from './brain';\nimport {Random} from './random';\nimport {ElementBase} from './element';\nimport * as Component from './component';\nimport {Dice} from './dice';\nimport {Spell} from '../data/spells';\n\nimport {ActorGen, IShell, StringMap} from '../data/actor-gen';\n\nconst RNG = Random.getRNG();\nexport const ObjectShell: any = {};\n\ntype AcceptFunc = (IShell) => boolean;\ntype BaseActor = Actor.BaseActor;\ntype ItemBase = Item.ItemBase;\n\nexport interface IShellInputData {\n    actors?: IShell[];\n    items?: IShell[];\n    elements?: IShell[];\n    effects?: IShell[];\n}\n\nexport interface IShellDb {\n    actors: StringMap<IShell>;\n    items: StringMap<IShell>;\n    elements: StringMap<IShell>;\n    effects?: StringMap<IShell>;\n}\n\nexport interface IShellDbDanger {\n    [key: number]: IShellDb;\n}\n\nexport interface IQueryDB {\n    name?: string;\n    categ?: string; // actors, items, elements\n    danger?: number;\n    func?: AcceptFunc; // Acceptance func for query\n}\n\nexport const Creator = function(db: IShellDb, dbNoRandom: IShellDb) {\n    this._db = db;\n    this._dbNoRandom = dbNoRandom;\n    /* Maps obj props to function calls. Essentially this maps bunch of setters\n     * to different names. Following formats supported:\n     *\n     * 1. {factory: funcObj, func: \"setter\"}\n     *  Call obj[\"setter\"]( funcObj(shell.field) )\n     *\n     * 2. {comp: \"CompName\", func: \"setter\"}\n     *  Create component comp of type \"CompName\".\n     *  Call comp[\"setter\"]( shell.field)\n     *  Call obj.add(comp)\n     *\n     * 3. {comp: \"CompName\"}\n     *  Create component comp of type \"CompName\" with new CompName(shell.field)\n     *  Call obj.add(comp)\n     *\n     * 4. \"setter\"\n     *   Call setter obj[\"setter\"](shell.field)\n     * */\n    const _propToCall: any = {\n        actors: {\n            type: 'setType',\n            attack: {comp: 'Combat', func: 'setAttack'},\n            defense: {comp: 'Combat', func: 'setDefense'},\n            damage: {comp: 'Combat', func: 'setDamageDie'},\n            speed: {comp: 'Stats', func: 'setSpeed'},\n\n            strength: {comp: 'Stats', func: 'setStrength'},\n            accuracy: {comp: 'Stats', func: 'setAccuracy'},\n            agility: {comp: 'Stats', func: 'setAgility'},\n            willpower: {comp: 'Stats', func: 'setWillpower'},\n            perception: {comp: 'Stats', func: 'setPerception'},\n            magic: {comp: 'Stats', func: 'setMagic'},\n\n            fovrange: {comp: 'Perception', func: 'setFOVRange'},\n\n            pp: {comp: 'SpellPower', func: ['setPP', 'setMaxPP']},\n            maxPP: {comp: 'SpellPower', func: 'setMaxPP'},\n            hp: {comp: 'Health', func: ['setHP', 'setMaxHP']},\n            danger: {comp: 'Experience', func: 'setDanger'},\n            brain: {func: 'setBrain', factory: this.createBrain}\n        },\n        items: {\n            // Generic item functions\n            type: 'setType',\n            value: 'setValue',\n            weight: {comp: 'Physical', func: 'setWeight'},\n            damageType: 'setDamageType',\n\n            armour: {\n                attack: 'setAttack',\n                defense: 'setDefense',\n                protection: 'setProtection',\n                armourType: 'setArmourType'\n            },\n\n            weapon: {\n                damage: 'setDamageDie',\n                attack: 'setAttack',\n                defense: 'setDefense',\n                weaponType: 'setWeaponType',\n                range: 'setAttackRange'\n            },\n            missile: {\n                damage: 'setDamageDie',\n                attack: 'setAttack',\n                range: 'setAttackRange'\n            },\n            food: {\n                energy: 'setEnergy'\n            }\n        },\n        elements: {\n            type: 'setType',\n            msg: 'setMsg'\n        }\n    };\n\n    _propToCall.items.missileweapon = _propToCall.items.weapon;\n    _propToCall.items.missileweapon.fireRate = 'setFireRate';\n    _propToCall.items.ammo = _propToCall.items.missile;\n    _propToCall.items.ammo.ammoType = 'setAmmoType';\n\n    /* Returns an object shell, given category and name.*/\n    this.get = (categ: string, name: string): IShell | null => {\n        if (this._dbNoRandom[categ][name]) {\n            return this._dbNoRandom[categ][name];\n        }\n        return this._db[categ][name];\n    };\n\n    /* Creates a component of specified type.*/\n    this.createComponent = (type, val) => {\n        switch (type) {\n            case 'Combat': return new Component.Combat();\n            case 'Experience': return new Component.Experience();\n            case 'Health': return new Component.Health(val);\n            case 'Stats': return new Component.Stats();\n            default:\n                if (Component.hasOwnProperty(type)) {\n                    return new Component[type]();\n                }\n                else {\n                    RG.err('Creator', 'createComponent',\n                        'Component |' + type + '| does not exist.');\n                }\n        }\n        return null;\n    };\n\n    /* Returns an actual game object when given category and name. Note that\n     * the blueprint must exist already in the database (blueprints must have\n     * been parsed before). */\n    this.createActualObj = function(categ: string, name: string) {\n        const shell = this.get(categ, name);\n        const propCalls = _propToCall[categ];\n        if (!shell) {\n            RG.err('Creator', 'createActualObj',\n                `shell for ${name} is not found.`);\n        }\n\n        const newObj = this.createNewObject(categ, shell);\n        if (!newObj) {\n            RG.err('ObjectShell.creator', 'createActualObj',\n                `Failed to create obj with ${JSON.stringify(shell)}`);\n        }\n\n        // Example: {name: 'bat', addComp: 'Flying'}\n        if (shell.hasOwnProperty('addComp')) {\n            this.addComponents(shell, newObj);\n        }\n\n        // If propToCall table has the same key as shell property, call\n        // function in _propToCall using the newly created object.\n        for (const p in shell) {\n\n            // Called for basic type: actors, items...\n            if (propCalls.hasOwnProperty(p)) {\n                const funcName = propCalls[p];\n                if (typeof funcName === 'object') {\n\n                    // 1. Add new component to the object\n                    if (funcName.hasOwnProperty('comp')) {\n                        this.addCompToObj(newObj, funcName, shell[p]);\n                    }\n                    // 2. Or use factory to create an object and add it to the\n                    // object. Only 'brain' supported for now.\n                    else if (funcName.hasOwnProperty('factory')) {\n                        if (p === 'brain') {\n                            const createdObj\n                                = funcName.factory(newObj, shell[p]);\n                            newObj[funcName.func](createdObj);\n                        }\n                    }\n                    // 3. Or call one of the object's methods with the value in\n                    // the object shell\n                    else {\n                        for (const f in funcName) {\n                            if (funcName.hasOwnProperty(f)) {\n                                const fName = funcName[f];\n                                if (newObj.hasOwnProperty(fName)) {\n                                    newObj[fName](shell[p]);\n                                }\n                            }\n                        }\n                    }\n                }\n                else { // 4. For strings, call the setter 'funcName' directly\n                    newObj[funcName](shell[p]);\n                }\n            }\n            // Check for subtypes\n            else if (shell.hasOwnProperty('type')) {\n\n                // No idea what this mess of code does\n                if (propCalls.hasOwnProperty(shell.type)) {\n                    const propTypeCalls = propCalls[shell.type];\n                    if (propTypeCalls.hasOwnProperty(p)) {\n                        const funcName2 = propTypeCalls[p];\n                        if (typeof funcName2 === 'object') {\n                            for (const f2 in funcName2) {\n                                if (funcName2.hasOwnProperty(f2)) {\n                                    const fName2 = funcName2[f2];\n                                    if (newObj.hasOwnProperty(fName2)) {\n                                        newObj[funcName2[f2]](shell[p]);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            newObj[funcName2](shell[p]);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (shell.hasOwnProperty('use')) {this.addUseEffects(shell, newObj);}\n\n        if (shell.hasOwnProperty('equip')) {\n            this.addEquippedItems(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('inv')) {\n            this.addInventoryItems(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('loot')) {\n            this.addLootComponents(shell, newObj);\n        }\n\n\n        if (shell.hasOwnProperty('poison')) {\n            this.addPoison(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('enemies')) {\n            this.addEnemies(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('spells')) {\n            this.addSpellbookAndSpells(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('onHit')) {\n            this.addOnHitProperties(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('onAttackHit')) {\n            this.addOnAttackHitProperties(shell, newObj);\n        }\n\n        if (shell.hasOwnProperty('onEquip')) {\n            this.addOnEquipProperties(shell, newObj);\n        }\n\n        // TODO map different props to function calls\n        return newObj;\n    };\n\n    /* Adds Poison as addOnHit property. */\n    this.addPoison = (shell: IShell, obj): void => {\n        const poison = shell.poison;\n        const poisonComp = new Component.Poison();\n        poisonComp.setProb(poison.prob);\n        poisonComp.setSource(obj);\n        poisonComp.setDamageDie(Dice.create(poison.damage));\n\n        const dieDuration = Dice.create(poison.duration);\n        poisonComp.setDurationDie(dieDuration);\n        const addOnHit = new Component.AddOnHit();\n        addOnHit.setComp(poisonComp);\n        obj.add(addOnHit);\n    };\n\n    /* Adds any component as AddOnHit property. */\n    this.addOnHitProperties = (shell: IShell, obj) => {\n        shell.onHit.forEach(onHit => {\n            this.processAddComp(onHit, obj);\n        });\n    };\n\n    this.addOnAttackHitProperties = (shell: IShell, obj) => {\n        shell.onAttackHit.forEach(onHit => {\n            const addOnHitComp = this.processAddComp(onHit, obj);\n            addOnHitComp.setOnDamage(false);\n            addOnHitComp.setOnAttackHit(true);\n        });\n    };\n\n    this.addOnEquipProperties = (shell: IShell, newObj) => {\n        shell.onEquip.forEach(onEquip => {\n            const isEquip = true;\n            this.processAddComp(onEquip, newObj, isEquip);\n        });\n    };\n\n    this.processAddComp = (onHit, obj, isEquip = false) => {\n        if (onHit.addComp) {\n            const comp = this.createComponent(onHit.addComp);\n            if (comp.setSource) {\n                if (RG.isActor(obj)) {\n                    comp.setSource(obj);\n                }\n            }\n\n            // Set the values of added component using functions provided in\n            // func array\n            if (Array.isArray(onHit.func)) {\n                onHit.func.forEach(func => {\n                    if (typeof comp[func.setter] === 'function') {\n                        comp[func.setter](func.value);\n                    }\n                    else {\n                        const str = comp.toJSON();\n                        RG.err('ObjectShellParser', 'addOnHitProperties',\n                            `Not a func: ${func.setter} in comp ${str}`);\n                    }\n                });\n            }\n\n            // Then create the AddOnHit component and wrap the original\n            // component into Duration to make it transient\n            const addedComp = comp;\n\n            let addOnHit = null;\n            if (isEquip) {\n                addOnHit = new Component.AddOnEquip();\n            }\n            else {\n                addOnHit = new Component.AddOnHit();\n            }\n\n            if (onHit.duration) {\n                const durDie = Dice.create(onHit.duration);\n                const durComponent = new Component.Duration();\n                durComponent.setDurationDie(durDie);\n                durComponent.setComp(addedComp);\n                addOnHit.setComp(durComponent);\n            }\n            else {\n                addOnHit.setComp(addedComp);\n            }\n            obj.add(addOnHit);\n            return addOnHit;\n        }\n        return null;\n    };\n\n\n    this.addEnemies = (shell: IShell, obj) => {\n        shell.enemies.forEach(enemyType => {\n            obj.getBrain().addEnemyType(enemyType);\n        });\n    };\n\n    /* Creates a spellbook and adds specified spells into it. */\n    this.addSpellbookAndSpells = (shell: IShell, obj) => {\n        obj.setBook(new Spell.SpellBook(obj));\n        shell.spells.forEach(spell => {\n            const usedSpell = this.getUsedObject(spell);\n            if (Spell[usedSpell]) {\n                obj.getBook().addSpell(new Spell[usedSpell]());\n            }\n            else {\n                const msg = `Spell |${usedSpell}| does not exist.`;\n                RG.err('Creator', 'addSpellbookAndSpells', msg);\n            }\n        });\n    };\n\n    this.getUsedObject = (strOrObj) => {\n        if (typeof strOrObj === 'object') {\n            if (strOrObj.random) {\n                return RNG.arrayGetRand(strOrObj.random);\n            }\n        }\n        return strOrObj;\n\n    };\n\n    /* Factory-method for creating the actual game objects.*/\n    this.createNewObject = (categ, obj) => {\n        switch (categ) {\n            case RG.TYPE_ACTOR:\n                const type = obj.type;\n                switch (type) {\n                    default: {\n                        switch (obj.actorType) {\n                            case 'BaseActor':\n                                return new Actor.BaseActor(obj.name);\n                            default: return new Actor.SentientActor(obj.name);\n                        }\n                    }\n                }\n            case RG.TYPE_ITEM:\n                const subtype = obj.type;\n                switch (subtype) {\n                    case 'armour': return new Item.Armour(obj.name);\n                    case 'book': return new Item.Book(obj.name);\n                    case 'food': return new Item.Food(obj.name);\n                    case 'gold': return new Item.Gold(obj.name);\n                    case 'goldcoin' : return new Item.GoldCoin(obj.name);\n                    case 'mineral': return new Item.Mineral(obj.name);\n                    case 'missile': return new Item.Missile(obj.name);\n                    case 'missileweapon':\n                        return new Item.MissileWeapon(obj.name);\n                    case 'ammo': return new Item.Ammo(obj.name);\n                    case 'potion': return new Item.Potion(obj.name);\n                    case 'rune': return new Item.Rune(obj.name);\n                    case 'spiritgem': return new Item.SpiritGem(obj.name);\n                    case 'weapon': return new Item.Weapon(obj.name);\n                    default: {\n                        if (subtype) {\n                            const item = new Item.ItemBase(obj.name);\n                            item.setType(obj.type);\n                            return item;\n                        }\n                        const json = JSON.stringify(obj);\n                        const msg =\n                            `Null/undef type: ${subtype}, obj: ${json}`;\n                        RG.err('', 'createNewObject', msg);\n                    }\n                }\n                break; // Unreachable\n            case RG.TYPE_ELEM: {\n                const usedType = obj.type || obj.name;\n                return new ElementBase(obj.name, usedType);\n            }\n            default: break;\n        }\n        return null;\n    };\n\n    /* Adds a component to the newly created object, or updates existing\n     * component if it exists already.*/\n    this.addCompToObj = function(newObj, compData, val) {\n        if (compData.hasOwnProperty('func')) {\n\n            // This 1st branch is used by Health only (needed?)\n            if (Array.isArray(compData.func)) {\n                compData.func.forEach(fname => {\n                    const compName = compData.comp;\n                    if (newObj.has(compName)) {\n                        // 1. Call existing comp with setter (fname)\n                        if (typeof newObj.get(compName)[fname] === 'function') {\n                            newObj.get(compName)[fname](val);\n                        }\n                        else {\n                            this.noFuncError(compName, fname, compData);\n                        }\n                    }\n                    else { // 2. Or create a new component\n                        const comp = this.createComponent(compName);\n                        if (typeof comp[fname] === 'function') {\n                            comp[fname](val); // Then call comp setter\n                            newObj.add(comp);\n                        }\n                        else {\n                            this.noFuncError(compName, fname, compData);\n                        }\n                    }\n                });\n            }\n            else {\n                const fname = compData.func;\n                const compName = compData.comp;\n                if (newObj.has(compName) && typeof fname === 'string') {\n                    // 1. Call existing comp with setter (fname)\n                    newObj.get(compName)[fname](val);\n                }\n                else { // 2. Or create a new component\n                    const comp = this.createComponent(compName);\n                    newObj.add(comp);\n                    if (typeof comp[fname] === 'function') {\n                        comp[fname](val); // Then call comp setter\n                    }\n                    else if (typeof fname === 'object') {\n                        const funcNames = Object.keys(compData.func);\n                        funcNames.forEach(funcName => {\n                            const newCompData = {\n                                func: funcName,\n                                comp: compName\n                            };\n                            const newVal = compData.func[funcName];\n                            this.addCompToObj(newObj, newCompData, newVal);\n                        });\n                    }\n                    else {\n                        RG.log(JSON.stringify(fname));\n                        RG.err('ObjectShellParser', 'addCompToObj',\n                            `No function ${fname} in ${compName}`);\n                    }\n                }\n            }\n        }\n        else if (newObj.has(compData.comp)) {\n            RG.err('ObjectShellParser', 'xxx',\n                'Not implemented');\n        }\n        else {\n            newObj.add(this.createComponent(compData.comp, val));\n        }\n    };\n\n    this.noFuncError = (compName: string, fname: string, compData) => {\n        const json = 'compData ' + JSON.stringify(compData);\n        RG.err('ObjectShellParser', 'addCompToObj',\n           `Comp: ${compName} no func ${fname}, ${json}`);\n    };\n\n    /* This function makes a pile of mess if used on non-entities. */\n    this.addComponents = (shell: IShell, entity) => {\n        if (typeof shell.addComp === 'string') {\n            _addCompFromString(shell.addComp, entity);\n        }\n        else if (Array.isArray(shell.addComp)) {\n            shell.addComp.forEach(comp => {\n                let usedComp = comp;\n                if (comp.random) {\n                    usedComp = RNG.arrayGetRand(comp.random);\n                }\n                if (typeof usedComp === 'string') {\n                    _addCompFromString(usedComp, entity);\n                }\n                else {\n                    _addCompFromObj(entity, usedComp);\n                }\n            });\n        }\n        else if (typeof shell.addComp === 'object') {\n            let usedComp = shell.addComp;\n            if (shell.addComp.random) {\n                usedComp = RNG.arrayGetRand(shell.addComp.random);\n            }\n            _addCompFromObj(entity, usedComp);\n        }\n        else {\n            RG.err('Creator', 'addComponents',\n                'Giving up. shell.addComp must be string, array or object.');\n        }\n    };\n\n    const _addCompFromString = (compName, entity) => {\n        try {\n            const comp = new Component[compName]();\n            entity.add(comp);\n        }\n        catch (e) {\n            let msg = `shell.addComp |${compName}|`;\n            msg += 'Component names are capitalized.';\n            RG.err('Creator', '_addCompFromString',\n                `${e.message} - ${msg}`);\n        }\n    };\n\n    const _addCompFromObj = (entity, compObj) => {\n        this.addCompToObj(entity, compObj, null);\n    };\n\n    // Adds the inventory items for the actors which are specified with 'inv'\n    this.addInventoryItems = function(shell, actor) {\n        const inv = shell.inv;\n        inv.forEach(item => {\n            const name = item.name || item;\n            const count = item.count || 1;\n            const itemObj = this.createActualObj(RG.TYPE_ITEM, name);\n            if (itemObj) {\n                itemObj.setCount(count);\n                actor.getInvEq().addItem(itemObj);\n            }\n            else {\n                RG.err('Creator', 'addInventoryItems',\n                    `itemObj for ${name} is null. Actor: ${actor.getName()}`);\n            }\n        });\n    };\n\n    // Adds the loot component to the Actor object\n    this.addLootComponents = function(shell: IShell, actor): void {\n        const loot = shell.loot;\n        const lootItem = this.createActualObj(RG.TYPE_ITEM, loot);\n        const lootComp = new Component.Loot(lootItem);\n        actor.add(lootComp);\n    };\n\n    /* Adds equipped items given with shell.equip into the actor. */\n    this.addEquippedItems = function(shell: IShell, actor): void {\n        const equip = shell.equip;\n        let needShuffle = false;\n        equip.forEach(item => {\n            const itemName = item.name || item;\n            const count = item.count || 1;\n            const itemObj = this.createActualObj(RG.TYPE_ITEM, itemName);\n            if (itemObj) {\n                itemObj.setCount(count);\n                if (!actor.getInvEq().restoreEquipped(itemObj)) {\n                    // Shuffle for the next round\n                    needShuffle = true;\n                }\n            }\n            else {\n                RG.err('Creator', 'addEquippedItems',\n                    `itemObj for ${item} is null. Actor: ${actor.getName()}`);\n            }\n        });\n        // Shell may have conflict equip such as 2 weapons or armour.\n        // Shuffle this for the next round\n        if (needShuffle) {\n            RNG.shuffle(shell.equip);\n        }\n    };\n\n    /* If shell has 'use', this adds specific use effect to the item.*/\n    this.addUseEffects = (shell: IShell, newObj): void => {\n        newObj.useFuncs = [];\n        newObj.useItem = this._db.effects.use.func.bind(newObj);\n        if (typeof shell.use === 'object'\n            && shell.use.hasOwnProperty('length')) {\n            for (let i = 0; i < shell.use.length; i++) {\n                _addUseEffectToItem(shell, newObj, shell.use[i]);\n            }\n        }\n        else if (typeof shell.use === 'object') {\n            for (const p in shell.use) {\n                if (shell.use.hasOwnProperty(p)) {\n                    _addUseEffectToItem(shell, newObj, p);\n                }\n            }\n        }\n        else {\n            _addUseEffectToItem(shell, newObj, shell.use);\n        }\n    };\n\n    const _addUseEffectToItem = (shell: IShell, item, useName) => {\n        const useFuncName = useName;\n        if (this._db.effects.hasOwnProperty(useFuncName)) {\n            const useEffectShell = this._db.effects[useFuncName];\n            const useFuncVar = useEffectShell.func;\n            item.useFuncs.push(useFuncVar);\n\n            if (useEffectShell.hasOwnProperty('requires')) {\n                if (shell.use.hasOwnProperty(useName)) {\n                    item.useArgs = {};\n                    const reqs = useEffectShell.requires;\n                    if (typeof reqs === 'object') {\n                        for (let i = 0; i < reqs.length; i++) {\n                            _verifyAndAddReq(shell.use[useName], item, reqs[i]);\n                        }\n                    }\n                    else {\n                        _verifyAndAddReq(shell.use[useName], item, reqs);\n                    }\n                }\n                else {\n                    RG.err('ObjectParser', 'addUseEffects',\n                        `useEffect shell has 'requires'.\n                        Item shell 'use' must be an object.`\n                    );\n                }\n            }\n            if (useEffectShell.hasOwnProperty('optional')) {\n                const opts = useEffectShell.optional;\n                opts.forEach(option => {\n                    if (shell.use[useName].hasOwnProperty(option)) {\n                        item.useArgs[option] = shell.use[useName][option];\n                    }\n                });\n            }\n        }\n        else {\n            RG.err('ObjectParser', 'addUseEffects',\n                'Unknown effect: |' + useFuncName + '|');\n        }\n    };\n\n    /* Verifies that the shell has all requirements, and adds them to the\n     * object, into useArgs.reqName. */\n    const _verifyAndAddReq = (obj, item, reqName) => {\n        if (obj.hasOwnProperty(reqName)) {\n            item.useArgs[reqName] = obj[reqName];\n        }\n        else {\n            RG.err('ObjectParser', '_verifyAndAddReq',\n                `Req |${reqName}| not specified in item shell. Item: ${item}`);\n        }\n    };\n\n    /* Creates actual game object from obj shell in given category.*/\n    this.createFromShell = function(categ: string, obj: IShell) {\n        if (obj) {\n            return this.createActualObj(categ, obj.name);\n        }\n        else {\n            RG.err('Creator', 'createFromShell',\n                'obj given must be defined.');\n        }\n        return null;\n    };\n\n};\nObjectShell.Creator = Creator;\n\nCreator.prototype.createBrain = function(actor, brainName: string): void {\n    if (Brain[brainName]) {\n        return new Brain[brainName](actor);\n    }\n    const msg = `ERROR. No brain type |${brainName}| found`;\n    RG.err('Creator', 'createBrain', msg);\n};\n\n\n/* Object handling the procedural generation. It has an object \"database\" and\n * objects can be pulled randomly from it. */\nexport const ProcGen = function(db, dbDanger, dbByName) {\n    this._db = db;\n    this._dbDanger = dbDanger;\n    this._dbByName = dbByName;\n\n    // Internal cache for proc generation\n    const _cache = {\n        actorWeights: {}\n    };\n\n    /* Returns entries from db based on the query. Returns null if nothing\n     * matches.*/\n    this.dbGet = (query: IQueryDB): IShell[] | StringMap<IShell> => {\n        const name = query.name;\n        const categ = query.categ;\n        const danger = query.danger;\n\n        // Specifying name returns an array\n        if (!RG.isNullOrUndef([name])) {\n            if (this._dbByName.hasOwnProperty(name)) {\n                return this._dbByName[name];\n            }\n            else {return [];}\n        }\n\n        if (!RG.isNullOrUndef([danger])) {\n            if (this._dbDanger.hasOwnProperty(danger)) {\n                const entries = this._dbDanger[danger];\n                if (typeof categ !== 'undefined') {\n                    if (entries.hasOwnProperty(categ)) {\n                        return entries[categ];\n                    }\n                    else {return {};}\n                }\n                else {\n                    return this._dbDanger[danger];\n                }\n            }\n            else {\n                return {};\n            }\n        }\n        // Fetch all entries of given category\n        else if (!RG.isNullOrUndef([categ])) {\n            if (this._db.hasOwnProperty(categ)) {\n                return this._db[categ];\n            }\n        }\n        return {};\n\n    };\n\n    /* Filters given category with a function. Func gets each object as arg,\n     * and must return either true or false. Function can be for example:\n     *   1.func(obj) {if (obj.name === 'wolf') return true;} Or\n     *   2.func(obj) {if (obj.hp > 25) return true;}.\n     *   And it can be as complex as needed of course.\n     * */\n    this.filterCategWithFunc = function(categ, func: AcceptFunc): IShell[] {\n        const objects: StringMap<IShell> = this.dbGet({categ});\n        const res: IShell[] = [];\n        const keys = Object.keys(objects);\n\n        for (let i = 0; i < keys.length; i++) {\n            const name = keys[i];\n            const obj: IShell = objects[name];\n            const acceptItem = func(obj);\n            if (acceptItem) {\n                res.push(obj);\n            }\n        }\n        return res;\n    };\n\n    //---------------------------------------------------\n    // RANDOMIZED METHODS for procedural generation\n    //---------------------------------------------------\n\n    /* Returns random object from the db. For example, {categ: \"actors\",\n     * danger: 2}\n     * returns a random actors with these constrains.\n     * Ex2: {danger: 3, num:1}\n     * returns randomly one entry which has danger 3.*/\n    this.dbGetRand = function(query: IQueryDB) {\n        const danger = query.danger;\n        const categ = query.categ;\n        if (typeof danger !== 'undefined') {\n            if (typeof categ !== 'undefined') {\n                if (this._dbDanger.hasOwnProperty(danger)) {\n                    const entries = this._dbDanger[danger][categ];\n                    return this.getRandFromObj(entries);\n                }\n            }\n        }\n        return null;\n    };\n\n\n    /* Creates a random actor based on danger value or a filter function.*/\n    this.getRandomActor = function(obj: IQueryDB) {\n        if (obj.hasOwnProperty('danger')) {\n            const danger = obj.danger;\n            const randShell = this.dbGetRand({danger, categ: RG.TYPE_ACTOR});\n            if (randShell !== null) {\n                return randShell;\n            }\n        }\n        else if (obj.hasOwnProperty('func')) {\n            const res = this.filterCategWithFunc( RG.TYPE_ACTOR, obj.func);\n            return RNG.arrayGetRand(res);\n        }\n        return null;\n    };\n\n    /* Returns a random item based on a selection function.\n     *\n     * Example:\n     *  const funcValueSel = function(item) {return item.value >= 100;}\n     *  const item = createRandomItem({func: funcValueSel});\n     *  // Above returns item with value > 100.\n     */\n    this.getRandomItem = function(obj: IQueryDB | AcceptFunc) {\n        if (typeof obj === 'function') {\n            const res = this.filterCategWithFunc(RG.TYPE_ITEM, obj);\n            return RNG.arrayGetRand(res);\n        }\n        else if (obj.hasOwnProperty('func')) {\n            const res = this.filterCategWithFunc(RG.TYPE_ITEM, (obj as IShell).func);\n            return RNG.arrayGetRand(res);\n        }\n        else {\n            RG.err('ProcGen', 'getRandomItem',\n                `No function with func. obj arg: ${JSON.stringify(obj)}`);\n        }\n        return null;\n    };\n\n    // Uses engine's internal weighting algorithm when given a level number.\n    // Note that this method can return null, if no correct danger level is\n    // found. You can supply {func: ...} as a fallback solution.\n    this.getRandomActorWeighted = function(min, max) {\n        const key = min + ',' + max;\n        if (!_cache.actorWeights.hasOwnProperty(key)) {\n            _cache.actorWeights[key] = RG.getDangerProb(min, max);\n        }\n        const danger = RNG.getWeighted(_cache.actorWeights[key]);\n        const actor = this.getRandomActor({danger});\n        return actor;\n    };\n\n    /* Returns a property from an object, selected randomly. For example,\n     * given object {a: 1, b: 2, c: 3}, may return 1,2 or 3 with equal\n     * probability.*/\n    this.getRandFromObj = obj => {\n        const keys = Object.keys(obj);\n        const randIndex = RNG.randIndex(keys);\n        return obj[keys[randIndex]];\n    };\n};\nObjectShell.ProcGen = ProcGen;\n\n/* Object parser for reading game data. Game data is contained within shell\n * objects which are simply object literals without functions etc. */\nexport const Parser = function() {\n\n    // NOTE: 'SHELL' means vanilla JS object, which has not been\n    // created with new:\n    //      SHELL:   const rat = {name: \"Rat\", type: \"animal\"};\n    //      OBJECT: const ratObj = new RG.Actor.Rogue(\"rat\");\n    //              ratObj.setType(\"animal\");\n    //\n    // Shells are used in external data file to describe game objects in a more\n    // concise way. Game objects are created from shells by this object.\n\n    // Stores the base shells\n    this._base = {\n        actors: {},\n        effects: {},\n        items: {},\n        elements: {}\n    } as IShellDb;\n\n    this._db = {\n        actors: {},\n        effects: {},\n        items: {},\n        elements: {}\n    } as IShellDb;\n\n    this._dbDanger = {} as IShellDbDanger; // All entries indexed by danger\n    this._dbByName = {} as StringMap<IShell>; // All entries indexed by name\n\n    this._dbNoRandom = {\n        actors: {},\n        items: {},\n        elements: {}\n    } as IShellDb; // All entries excluded from random generation\n\n    this._creator = new Creator(this._db, this._dbNoRandom);\n    this._procgen = new ProcGen(this._db, this._dbDanger,\n        this._dbByName);\n\n    this.getCreator = function() {\n        return this._creator;\n    };\n\n    this.getProcGen = function() {\n        return this._procgen;\n    };\n    //-----------------------------------------------------------------------\n    // \"PARSING\" METHODS\n    //-----------------------------------------------------------------------\n\n    /* Parses all shell data, items, monsters, level etc.*/\n    this.parseShellData = function(obj: IShellInputData): void {\n        const keys = Object.keys(obj);\n        for (let i = 0; i < keys.length; i++) {\n            this.parseShellCateg(keys[i], obj[keys[i]]);\n        }\n    };\n\n    /* Parses one specific shell category, ie items or monsters.*/\n    this.parseShellCateg = function(categ: string, objsArray: IShell[]): void {\n        for (let i = 0; i < objsArray.length; i++) {\n            this.parseObjShell(categ, objsArray[i]);\n        }\n    };\n\n    /* Parses an object shell. Returns null for invalid objects, and\n     * corresponding object for actual actors. If 'base' property exists,\n     * all base properties will be added to the returned object.\n     * */\n    this.parseObjShell = function(categ: string, obj: IShell): IShell {\n        if (this.validShellGiven(obj)) {\n            // Get properties from base shell\n            if (obj.hasOwnProperty('base')) {\n                const baseShells = typeof obj.base === 'string' ? [obj.base]\n                    : obj.base;\n                baseShells.forEach(bName => {\n                    if (this.baseExists(categ, bName)) {\n                        obj = this.extendObj(obj, this.getBase(categ, bName));\n                    }\n                    else {\n                        RG.err('ObjectParser', 'parseObjShell',\n                            'Unknown base ' + bName + ' specified for '\n                            + JSON.stringify(obj));\n                    }\n                });\n            }\n\n            // If type not given, use name as type\n            if (categ === RG.TYPE_ACTOR) {this.addTypeIfUntyped(obj);}\n\n            this.storeIntoDb(categ, obj);\n            return obj;\n        }\n        else {\n            return null;\n        }\n    };\n\n    /* Checks that the object shell given is correctly formed.*/\n    this.validShellGiven = (obj: IShell): boolean => {\n        if (!obj.hasOwnProperty('name')) {\n            RG.err('Parser', 'validShellGiven',\n                `shell doesn't have a name. shell: ${JSON.stringify(obj)}`);\n            return false;\n        }\n        return true;\n    };\n\n    /* If an object doesn't have type, the name is chosen as its type.*/\n    this.addTypeIfUntyped = (obj: IShell): void => {\n        if (!obj.hasOwnProperty('type')) {\n            obj.type = obj.name;\n        }\n    };\n\n    /* Returns an object shell, given category and name.*/\n    this.get = (categ: string, name: string): IShell => this._db[categ][name];\n\n    /* Return specified base shell.*/\n    this.getBase = (categ: string, name: string): IShell => this._base[categ][name];\n\n    /* All shells can be used as base, not only ones with\n     * 'dontCreate: true' */\n    this.storeForUsingAsBase = (categ: string, obj: IShell): void => {\n        this._base[categ][obj.name] = obj;\n    };\n\n    /* Stores the object into given category.*/\n    this.storeIntoDb = function(categ: string, obj: IShell): void {\n        if (this._db.hasOwnProperty(categ)) {\n            this.storeForUsingAsBase(categ, obj);\n\n            if (obj.hasOwnProperty('noRandom')) {\n                this._dbNoRandom[categ][obj.name] = obj;\n            }\n            else if (!obj.hasOwnProperty('dontCreate')) {\n                if (this._dbByName.hasOwnProperty(obj.name)) {\n                    this._dbByName[obj.name].push(obj);\n                }\n                else {\n                    const newArr = [];\n                    newArr.push(obj);\n                    this._dbByName[obj.name] = newArr;\n                }\n\n                this._db[categ][obj.name] = obj;\n                if (obj.hasOwnProperty('danger')) {\n                    const danger = obj.danger;\n                    if (!this._dbDanger.hasOwnProperty(danger)) {\n                        this._dbDanger[danger] = {};\n                    }\n                    if (!this._dbDanger[danger].hasOwnProperty(categ)) {\n                        this._dbDanger[danger][categ] = {};\n                    }\n                    this._dbDanger[danger][categ][obj.name] = obj;\n                }\n\n            } // dontCreate: true shells are skipped (used as base)\n        }\n        else {\n            RG.err('ObjectParser', 'storeIntoDb',\n                'Unknown category: ' + categ);\n        }\n        this.storeRenderingInfo(categ, obj);\n    };\n\n    /* Stores char/CSS className for the object for rendering purposes.*/\n    this.storeRenderingInfo = (categ, obj) => {\n        if (obj.hasOwnProperty('color')) {\n            if (RG.isNullOrUndef([obj.color])) {\n                const json = JSON.stringify(obj);\n                RG.err('Parser', 'storeRenderingInfo',\n                    `obj.color null/undef! obj: ${json}`);\n            }\n            let {fg, bg} = obj.color;\n\n            if (obj.hasOwnProperty('colorfg')) {\n                fg = obj.colorfg;\n            }\n            if (obj.hasOwnProperty('colorbg')) {\n                bg = obj.colorbg;\n            }\n            if (!fg || !bg) {\n                const json = JSON.stringify(obj.color);\n                RG.err('Parser', 'storeRenderingInfo',\n                    `fg and bg must be given. ${obj.name} Got: ${json}`);\n            }\n            if (!obj.className) {obj.className = '';}\n            obj.className += ' cell-fg-' + fg.toLowerCase() +\n                ' cell-bg-' + bg.toLowerCase();\n        }\n        if (obj.hasOwnProperty('char')) {\n            if (obj.hasOwnProperty('name')) {\n                RG.addCharStyle(categ, obj.name, obj.char);\n                if (obj.dontCreate) {\n                    RG.addCharStyle(categ, obj.type, obj.char);\n                }\n            }\n            else {\n                RG.addCharStyle(categ, obj.type, obj.char);\n            }\n        }\n        if (obj.hasOwnProperty('className')) {\n            if (obj.hasOwnProperty('name')) {\n                RG.addCellStyle(categ, obj.name, obj.className);\n                if (obj.dontCreate) {\n                    RG.addCellStyle(categ, obj.type, obj.className);\n                }\n            }\n            else {\n                RG.addCellStyle(categ, obj.type, obj.className);\n            }\n        }\n    };\n\n    /* Returns true if shell base exists.*/\n    this.baseExists = (categ: string, baseName: string): boolean => {\n        if (this._base.hasOwnProperty(categ)) {\n            return this._base[categ].hasOwnProperty(baseName);\n        }\n        return false;\n    };\n\n    /* Extends the given object shell with a given base shell.*/\n    this.extendObj = (obj: IShell, baseObj: IShell): IShell => {\n        for (const prop in baseObj) {\n            if (!obj.hasOwnProperty(prop)) {\n                if (prop !== 'dontCreate') {\n                    obj[prop] = baseObj[prop];\n                }\n            }\n        }\n        return obj;\n    };\n\n\n    //---------------------------------------------------------------\n    // CREATE METHODS (to be removed, but kept now because removing\n    //   these would break the API in major way)\n    //---------------------------------------------------------------\n\n    this.createEntity = function(name) {\n        if (this.hasObj(RG.TYPE_ITEM, name)) {\n            return this.createItem(name);\n        }\n        else if (this.hasObj(RG.TYPE_ACTOR, name)) {\n            return this.createActor(name);\n        }\n        return null;\n    };\n\n    this.createActor = function(name: string): BaseActor {\n        return this.createActualObj(RG.TYPE_ACTOR, name);\n    };\n\n    this.createItem = function(name: string): ItemBase {\n        return this.createActualObj(RG.TYPE_ITEM, name);\n    };\n\n    this.createElement = function(name: string) {\n        return this.createActualObj(RG.TYPE_ELEM, name);\n    };\n\n    this.hasItem = function(name: string) {\n        return this.hasObj(RG.TYPE_ITEM, name);\n    };\n\n    this.hasObj = function(categ: string, name: string): boolean {\n        return this.dbExists(categ, name);\n    };\n\n    /* Returns an actual game object when given category and name. Note that\n     * the shell must exist already in the database (shell must have\n     * been parser before). */\n    this.createActualObj = function(categ: string, name: string) {\n        if (!this.dbExists(categ, name)) {\n            RG.err('Parser', 'createActualObj',\n                `Categ: ${categ} Name: ${name} doesn't exist.`);\n            return null;\n        }\n        return this._creator.createActualObj(categ, name);\n    };\n\n    /* Creates actual game object from obj shell in given category.*/\n    this.createFromShell = (categ, obj) => (\n        this._creator.createFromShell(categ, obj)\n    );\n\n    //--------------------------------------------------------------------\n    // Query methods for object shells\n    //--------------------------------------------------------------------\n\n    this.dbExists = (categ, name) => {\n        if (this._db.hasOwnProperty(categ)) {\n            if (this._db[categ].hasOwnProperty(name)) {\n                return true;\n            }\n        }\n        if (this._dbNoRandom[categ][name]) {\n            return true;\n        }\n        return false;\n    };\n\n    /* Returns entries from db based on the query. Returns null if nothing\n     * matches.*/\n    this.dbGet = (query: IQueryDB) => this._procgen.dbGet(query);\n\n    this.dbGetRand = (query: IQueryDB) => this._procgen.dbGetRand(query);\n\n    this.filter = function(categ, func) {\n        return this._procgen.filterCategWithFunc(categ, func);\n    };\n\n    this.filterItems = function(func) {\n        return this._procgen.filterCategWithFunc(RG.TYPE_ITEM, func);\n    };\n\n    this.dbGetNoRandom = (query: IQueryDB): IShell[] => {\n        const name = query.name;\n        const categ = query.categ;\n        const danger = query.danger;\n\n        if (categ && this._dbNoRandom[categ]) {\n            if (!name) {\n                return Object.values(this._dbNoRandom[categ]);\n            }\n            else {\n                const found = this._dbNoRandom[categ][name];\n                if (found) {return [found];}\n            }\n        }\n        else if (categ && danger) {\n            RG.err('ProcGen', 'dbGetNoRandom',\n                'Query by danger not implemented yet');\n        }\n        return [];\n    };\n\n    //----------------------------------------------------------------------\n    // RANDOMIZED METHODS for procedural generation\n    //----------------------------------------------------------------------\n\n    /* Creates a random actor based on danger value or a filter function.*/\n    this.createRandomActor = obj => {\n        const randShell = this._procgen.getRandomActor(obj);\n        if (randShell) {\n            return this._creator.createFromShell(RG.TYPE_ACTOR, randShell);\n        }\n        return null;\n    };\n\n    // Uses engine's internal weighting algorithm when given a level number.\n    // Note that this method can return null, if no correct danger level is\n    // found. You can supply {func: ...} as a fallback solution.\n    this.createRandomActorWeighted = function(min, max, obj) {\n        const actorShell = this._procgen.getRandomActorWeighted(min, max);\n        if (actorShell) {\n            return this._creator.createFromShell(RG.TYPE_ACTOR, actorShell);\n        }\n        else if (!RG.isNullOrUndef([obj])) {\n            return this.createRandomActor(obj);\n        }\n        return null;\n    };\n\n    /* Creates a random item based on a selection function.\n     *\n     * Example:\n     *  const funcValueSel = function(item) {return item.value >= 100;}\n     *  const item = createRandomItem({func: funcValueSel});\n     *  // Above returns item with value > 100.\n     *  */\n    this.createRandomItem = (obj: IQueryDB | AcceptFunc) => {\n        const randShell = this._procgen.getRandomItem(obj);\n        if (randShell) {\n            return this._creator.createFromShell('items', randShell);\n        }\n        return null;\n    };\n\n    this.toJSON = function(): any {\n        return {\n            db: this._db\n        };\n    };\n\n};\nObjectShell.Parser = Parser;\n\nexport const createItem = function(nameOrShell: string | IShell) {\n    const parser = ObjectShell.getParser();\n    const creator = parser.getCreator();\n    if (typeof nameOrShell === 'string') {\n        return creator.createItem(nameOrShell);\n    }\n    else {\n        parser.parseObjShell(RG.TYPE_ITEM, nameOrShell);\n        return creator.createFromShell(RG.TYPE_ITEM, nameOrShell);\n    }\n};\n\nexport const getParser = function() {\n    if (!ObjectShell.parserInstance) {\n        const parser = new Parser();\n        parser.parseShellData(Effects);\n\n        const jsonStr = JSON.stringify(Objects);\n        const objectsNew = JSON.parse(jsonStr);\n        adjustActorValues(objectsNew.actors);\n\n        parser.parseShellData(objectsNew);\n        ObjectShell.parserInstance = parser;\n\n        const randActors = ActorGen.genActors(100);\n        parser.parseShellData({actors: randActors});\n    }\n    return ObjectShell.parserInstance;\n};\nObjectShell.getParser = getParser;\n","\nimport RG from './rg';\n\nexport interface Listener {\n    hasNotify: boolean;\n    notify: (evtName: string, args) => void;\n    listenerID?: number; // Added in EventPool\n}\n\nexport interface EvtArgs {\n    [key: string]: any;\n}\n\n/* Event pool can be used to emit events and register callbacks for listeners.\n * This decouples the emitter and listener from each other.\n * Each emitted event can contain an object 'args', which is emitted with the\n * event. This object can contain any data.\n */\nexport class EventPool  { // {{{2\n\n    public static poolInstance: EventPool;\n\n    public static getPool(): EventPool {\n        if (!EventPool.poolInstance) {\n            EventPool.poolInstance = new EventPool();\n        }\n        return EventPool.poolInstance;\n    }\n\n    private static id: number = 0;\n\n    private _listeners: {[key: string]: Listener[]};\n    private _nListeners: number;\n    private _listenerID: number;\n    private _lastEmitted: any;\n    private _lastRemoved: any;\n    private pendingRemoves: any[];\n    private notifyStackSize: number;\n    private _lastArgs: any;\n    private cannotRemove: boolean;\n\n    constructor() {\n        this._listeners = {};\n        this._nListeners = 0;\n        this._listenerID = 0;\n\n        this._lastEmitted = null;\n        this._lastRemoved = null;\n\n        this.pendingRemoves = [];\n\n        // Tracks that notify() call stack is fully unwound before\n        // listeners can be removed\n        this.notifyStackSize = 0;\n    }\n\n\n    public getNumListeners(): number {\n        return this._nListeners;\n    }\n\n    public getNumEventsListened(): number {\n        return Object.keys(this._listeners).length;\n    }\n\n    /* Emits an event with given name. args must be in object-notation ie.\n     * {data: \"abcd\"} */\n    public emitEvent(evtName: string, args: EvtArgs): void {\n        if (!RG.isNullOrUndef([evtName])) {\n            ++this.notifyStackSize;\n            if (process.env.NODE_ENV !== 'production') {\n                this._lastEmitted = evtName;\n                this._lastArgs = args;\n            }\n\n            if (this._listeners.hasOwnProperty(evtName)) {\n                this.cannotRemove = true; // Lock removals\n                const called = this._listeners[evtName];\n                for (let i = 0, len = called.length; i < len; i++) {\n                    called[i].notify(evtName, args);\n                }\n            }\n        }\n        else {\n            RG.nullOrUndefError('EventPool: emitEvent',\n                'Event name must be given.', evtName);\n        }\n        if (this.notifyStackSize === 1) {\n            this.cannotRemove = false; // Unlock removals\n            // And process pending removals\n            if (this.pendingRemoves.length > 0) {\n                this.pendingRemoves.forEach(obj => {\n                    this.removeListener(obj);\n                });\n                this.pendingRemoves = [];\n            }\n        }\n        --this.notifyStackSize;\n    }\n\n    /* Register an event listener. */\n    public listenEvent(evtName, obj: Listener): void {\n        if (!RG.isNullOrUndef([evtName])) {\n            if (obj.hasOwnProperty('notify') || obj.hasNotify) {\n                if (this._listeners.hasOwnProperty(evtName)) {\n                    const index = this._listeners[evtName].indexOf(obj);\n                    if (index === -1) {\n                        this._listeners[evtName].push(obj);\n                    }\n                }\n                else {\n                    this._listeners[evtName] = [];\n                    this._listeners[evtName].push(obj);\n                }\n                ++this._nListeners;\n                if (!obj.hasOwnProperty('listenerID')) {\n                    obj.listenerID = this._listenerID++;\n                }\n            }\n            else {\n                let msg = 'evtName: ' + evtName;\n                msg += '\\nprototype: ' + JSON.stringify(obj);\n                msg += '\\nCannot add object. Listener must implement notify()!';\n                RG.err('EventPool', 'listenEvent', msg);\n            }\n        }\n        else {\n            RG.err('EventPool', 'listenEvent', 'Event name not well defined.');\n        }\n    }\n\n    public isListener(obj): boolean {\n        let found = false;\n        this.forEachEvent(obj, foundObj => {\n            // As callback is called only for found object,\n            // we can set the found to true\n            found = true;\n        });\n        return found;\n    }\n\n    /* Calls callback with object for each event */\n    public forEachEvent(obj, cb): void {\n        const id = obj.listenerID;\n        const evtKeys = Object.keys(this._listeners);\n        evtKeys.forEach(evt => {\n            const index = this._listeners[evt].findIndex(sought =>\n                sought.listenerID === id);\n            if (index >= 0) {\n                cb(obj, evt);\n            }\n        });\n    }\n\n    /* Removes the object from a list of event listeners. Note that if remove is\n     * is triggered within notify() function of an object, the removal is made\n     * pending and processed once notify() finishes (see this.dontRemove). */\n    public removeListener(obj): void {\n        if (obj.hasOwnProperty('listenerID')) {\n            if (this.cannotRemove) {\n                this.pendingRemoves.push(obj);\n                return;\n            }\n            let nRemoved = 0;\n            const id = obj.listenerID;\n\n            const evtKeys = Object.keys(this._listeners);\n            evtKeys.forEach(evt => {\n                const index = this._listeners[evt].findIndex(sought =>\n                    sought.listenerID === id);\n                if (index >= 0) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        this._lastRemoved = this._listeners[evt][index];\n                    }\n                    this._listeners[evt].splice(index, 1);\n                    ++nRemoved;\n                    --this._nListeners;\n                    if (this._listeners[evt].length === 0) {\n                        delete this._listeners[evt];\n                    }\n                }\n            });\n            if (nRemoved === 0) {\n                RG.warn('EventPool', 'removeListener',\n                    `ListenerID ${obj.listenerID} not found`);\n            }\n            delete obj.listenerID;\n        }\n        else {\n            const json = JSON.stringify(obj);\n            RG.err('EventPool', 'removeListener',\n                `No prop listener ID from on object ${json}`);\n        }\n    }\n\n    public removeAll(): void {\n        if (!this.cannotRemove) {\n            const allListeners: {[key: number]: Listener} = {};\n            const evtKeys = Object.keys(this._listeners);\n            evtKeys.forEach(evt => {\n                const listenersEvt: Listener[] = this._listeners[evt];\n                listenersEvt.forEach(listener => {\n                    allListeners[listener.listenerID] = listener;\n                });\n            });\n\n            Object.values(allListeners).forEach(listener => {\n                this.removeListener(listener);\n            });\n\n        }\n        else {\n            RG.err('EventPool', 'removeAll', \n                'Cannot remove listeners. cannotRemove is set');\n        }\n    }\n\n    /* Returns listeners for the given event. */\n    public getListeners(evtName): Listener[] {\n        if (this._listeners.hasOwnProperty(evtName)) {\n            return this._listeners[evtName].slice();\n        }\n        return [];\n    }\n\n    public printListeners(): void {\n        Object.keys(this._listeners).forEach(evt => {\n            RG.diag(`Listeners for event ${String(evt)}`);\n            RG.diag(this._listeners[evt]);\n        });\n    }\n\n}\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","/* This file contains constants for elements. This is a flyweight pattern\n * in which each map element points to these constants only. */\n\nimport {ObjectShell} from '../src/objectshellparser';\nimport {ElementBase, ElementWall} from '../src/element';\n\nexport const ELEM: {[key: string]: ElementBase} = {};\n\nconst frz = Object.freeze;\n\nconst parser = ObjectShell.getParser();\n// Constant elements which can be used by all levels. freeze()\n// used to prevent any mutations. Note that elements with any state\n// in them should not be shared (unless state is common for all)\nELEM.BED = frz(parser.createElement('bed'));\nELEM.BRIDGE = frz(parser.createElement('bridge'));\nELEM.CHASM = frz(parser.createElement('chasm'));\n\nELEM.GRASS = frz(parser.createElement('grass'));\nELEM.GRASS_SNOW = frz(parser.createElement('snowy grass'));\nELEM.HIGH_ROCK = frz(parser.createElement('highrock'));\nELEM.LAVA = frz(parser.createElement('lava'));\nELEM.PATH = frz(parser.createElement('path'));\nELEM.ROAD = frz(parser.createElement('road'));\nELEM.SKY = frz(parser.createElement('sky'));\nELEM.SNOW = frz(parser.createElement('snow'));\nELEM.SNOW_TRACKS = frz(parser.createElement('snow with tracks'));\nELEM.SNOW_DEEP = frz(parser.createElement('deep snow'));\nELEM.SNOW_DEEP_TRACKS = frz(parser.createElement('deep snow with tracks'));\nELEM.SNOW_LIGHT = frz(parser.createElement('light snow'));\nELEM.SNOW_LIGHT_TRACKS = frz(parser.createElement('light snow with tracks'));\nELEM.STONE = frz(parser.createElement('stone'));\nELEM.TREE = frz(parser.createElement('tree'));\nELEM.TREE_SNOW = frz(parser.createElement('snow-covered tree'));\n\nELEM.WINDOW = frz(parser.createElement('closed window'));\n\nELEM.FLOOR = frz(parser.createElement('floor'));\nELEM.FLOOR_CASTLE = frz(parser.createElement('floorcastle'));\nELEM.FLOOR_CAVE = frz(parser.createElement('floorcave'));\nELEM.FLOOR_CRYPT = frz(parser.createElement('floorcrypt'));\nELEM.FLOOR_HOUSE = frz(parser.createElement('floorhouse'));\nELEM.FLOOR_WOODEN = frz(parser.createElement('floorwooden'));\n\nELEM.WALL = frz(new ElementWall('wall'));\nELEM.WALL_CASTLE = frz(new ElementWall('wallcastle'));\nELEM.WALL_CAVE = frz(new ElementWall('wallcave'));\nELEM.WALL_CRYPT = frz(new ElementWall('wallcrypt'));\nELEM.WALL_ICE = frz(new ElementWall('wallice'));\nELEM.WALL_WOODEN = frz(new ElementWall('wallwooden'));\nELEM.WALL_MOUNT = frz(new ElementWall('wallmount'));\n\n// ELEM.WATER = frz(new Element.Water());\nELEM.WATER = frz(parser.createElement('water'));\nELEM.WATER_FROZEN = frz(parser.createElement('frozen water'));\nELEM.FORT = frz(parser.createElement('fort'));\n\nexport const ELEM_MAP: any = {};\n\nELEM_MAP.elemTypeToObj = {};\nELEM_MAP.elemTypeToIndex = {};\nELEM_MAP.elemIndexToType = {};\nELEM_MAP.elemIndexToElemObj = {};\n\nlet elemIndex = 1;\nObject.keys(ELEM).forEach(key => {\n    const type = ELEM[key].getType();\n    ELEM_MAP.elemTypeToObj[type] = ELEM[key];\n    ELEM_MAP.elemTypeToIndex[type] = elemIndex;\n    ELEM_MAP.elemIndexToType[elemIndex] = type;\n    ELEM_MAP.elemIndexToElemObj[elemIndex] = ELEM[key];\n    ++elemIndex;\n});\n","/* For exporting all brain (AI) related modules. */\n\nexport * from './brain.base';\n\nexport * from './brain';\nimport {Brain} from './brain';\n\nexport * from './brain.player';\nexport * from './brain.memory';\n\nimport {BrainWeather} from './brain.weather';\nexport * from './brain.weather';\n\nimport {BrainVirtual} from './brain.virtual';\nexport * from './brain.virtual';\n\nimport * as BG from './brain.goaloriented';\nexport * from './brain.goaloriented';\n\nBrain.Animal = BG.BrainAnimal;\nBrain.Commander = BG.BrainCommander;\nBrain.Explorer = BG.BrainExplorer;\nBrain.GoalOriented = BG.BrainGoalOriented;\nBrain.SpellCaster = BG.BrainSpellCaster;\nBrain.Spirit = BG.BrainSpirit;\nBrain.Thief = BG.BrainThief;\nBrain.Flame = BG.BrainFlame;\nBrain.Cloud = BG.BrainCloud;\nBrain.Virtual = BrainVirtual;\nBrain.Weather = BrainWeather;\n\nexport {Brain};\n","\nimport RG from './rg';\nimport {Entity} from './entity';\nimport {Pickup} from './component/component';\nimport {compsToJSON} from './component/component.base';\nimport {Random} from './random';\nimport {EventPool} from './eventpool';\nimport {verifyLevelCache} from './verify';\nimport * as Mixin from './mixin';\nimport {ELEM} from '../data/elem-constants';\nimport * as Component from './component/component';\n\n// Import types only\nimport {TCoord, BBox} from './interfaces';\ntype ZoneBase = import('./world').ZoneBase;\ntype SubZoneBase = import('./world').SubZoneBase;\ntype Battle = import('./game.battle').Battle;\ntype Cell = import('./map.cell').Cell;\ntype CellMap = import('./map').CellMap;\ntype House = import('./houses').House;\ntype WorldShop = import('./world').WorldShop;\n\ntype ItemBase = import('./item').ItemBase;\ntype ElementBase = import('./element').ElementBase;\ntype ElementStairs = import('./element').ElementStairs;\ntype BaseActor = import('./actor').BaseActor;\ntype SentientActor = import('./actor').BaseActor;\n\ntype CellOrNull = Cell | null;\n\nconst POOL = EventPool.getPool();\nconst {TYPE_ACTOR, TYPE_ELEM, TYPE_ITEM} = RG;\n\nconst RNG = Random.getRNG();\n\n/* Possible callbacks:\n * showMsg: {msg: 'my msg'}\n */\n\n/* Possible callbacks for entering/exiting levels. */\nexport class LevelCallback {\n    public cbType: string;\n    public msg: string;\n\n    constructor(type) {\n        this.cbType = type;\n    }\n\n    public execute(): void {\n        RG.gameMsg(this.msg);\n    }\n\n    public getCbType() {\n        return this.cbType;\n    }\n\n    public toJSON() {\n        return {\n            cbType: this.getCbType(),\n            msg: this.msg\n        };\n    }\n}\n\ntype LocatableElement = ElementBase & Mixin.Locatable;\n\ntype LevelParent = Battle | SubZoneBase;\n\nexport type LevelExtraType = number | string | boolean | {[key: string]: LevelExtraType | LevelExtraType[]};\n\ninterface Extras {\n    [key: string]: LevelExtraType | LevelExtraType[];\n}\n\nexport type LevelExtras = Extras & {\n    points?: TCoord[];\n    startPoints?: TCoord[];\n    startPoint?: TCoord;\n    houses?: House[];\n    shops?: WorldShop[];\n    /* connectEdges?: boolean;\n    isCollapsed?: boolean;*/\n};\n\ninterface LevelProps {\n    actors: BaseActor[];\n    elements: LocatableElement[];\n    items: ItemBase[];\n}\n\n/* Object for the game levels. Contains map, actors and items.  */\n// const Level = function() {\nexport class Level extends Entity {\n\n    public static createLevelID() {\n        return Entity.createEntityID();\n    }\n\n    private _map: CellMap;\n    private _parent: any;\n    private _p: LevelProps;\n    private _levelNo: number;\n    private _callbacks: {[key: string]: (any) => void};\n    private _cbState: {[key: string]: boolean};\n\n    // Non-serializable property used during PCG\n    private _extras: LevelExtras;\n\n    constructor() {\n        super();\n        this._map = null;\n        this._parent = null; // Reference to dungeon,city,mountain...\n\n        // Level property cache (iteration through 100x100 cells is very\n        // slow. This fails if cells are manipulated directly\n        this._p = {\n            actors: [],\n            elements: [],\n            items: []\n        };\n\n        this._levelNo = 0;\n\n        //-----------------------------------------------------------------\n        // CALLBACKS\n        //----------------------------------------------------------------\n        this._callbacks = {};\n\n        this._cbState = {\n            onFirstEnterDone: false,\n            onFirstExitDone: false\n        };\n\n        this.add(new Component.Lore());\n    }\n\n    public setLevelNumber(no: number): void {this._levelNo = no;}\n\n    public getLevelNumber(): number {\n        return this._levelNo;\n    }\n\n    public getParent(): SubZoneBase {\n        return this._parent;\n    }\n\n    public getParentZone(): ZoneBase {\n        const subZoneParent = this.getParent();\n        if (subZoneParent) {\n            if ((subZoneParent as SubZoneBase).getParent) {\n                return subZoneParent.getParent() as ZoneBase;\n            }\n            RG.err('Level', 'getParentZone',\n                `No getParent() in ${JSON.stringify(subZoneParent)}`);\n        }\n        return null;\n    }\n\n    public setParent(parent: LevelParent): void {\n        if (!RG.isNullOrUndef([parent])) {\n            this._parent = parent;\n        }\n        else {\n            RG.err('Map.Level', 'setParent',\n                'Parent is not defined.');\n        }\n    }\n\n    public getActors(): BaseActor[] {return this._p.actors;}\n    public getItems(): ItemBase[] {return this._p.items;}\n    public getElements(): ElementBase[] {return this._p.elements;}\n\n    /* Returns all stairs elements. */\n    public getStairs(): ElementStairs[] {\n        const res = [];\n        this._p.elements.forEach(elem => {\n            if (this._isStairs(elem)) {\n                res.push(elem);\n            }\n        });\n        return res;\n    }\n\n    public getPassages(): ElementStairs[] {\n        const res = [];\n        this._p.elements.forEach(elem => {\n            if (elem.getName() === 'passage') {\n                const elemStairs: unknown = elem;\n                res.push(elemStairs as ElementStairs);\n            }\n        });\n        return res;\n    }\n\n    public getConnections(): ElementStairs[] {\n        const conn = [];\n        this._p.elements.forEach(elem => {\n            if (elem.getType() === 'connection') {\n                const elemStairs: unknown = elem;\n                conn.push(elemStairs as ElementStairs);\n            }\n        });\n        return conn;\n    }\n\n    public _isStairs(elem): elem is ElementStairs {\n        return (/stairs(Down|Up)/).test(elem.getName());\n    }\n\n    public setMap(map: CellMap): void {this._map = map;}\n    public getMap(): CellMap {return this._map;}\n\n    /* Given a level, returns stairs which lead to that level.*/\n    public getStairsToLevel(level: Level): ElementStairs | null {\n        if (RG.isNullOrUndef([level])) {\n            RG.err('Map.Level', 'getStairs', 'arg |level| required.');\n        }\n\n        const allStairs = this.getStairs();\n        for (let i = 0; i < allStairs.length; i++) {\n            if (allStairs[i].getTargetLevel() === level) {\n                return allStairs[i];\n            }\n        }\n        return null;\n    }\n\n    //---------------------------------------------------------------------\n    // STAIRS RELATED FUNCTIONS\n    //---------------------------------------------------------------------\n\n    /* Adds stairs for this level.*/\n    public addStairs(stairs: ElementStairs, x: number, y: number): boolean {\n        if (!RG.isNullOrUndef([x, y])) {\n            if (this._map.hasXY(x, y)) {\n              stairs.setSrcLevel(this);\n              // Prevents stairs on impassable squares\n              this._map.setBaseElemXY(x, y, ELEM.FLOOR);\n              return this._addPropToLevelXY(RG.TYPE_ELEM, stairs, x, y);\n            }\n            else {\n              const msg = `x,y ${x},${y} out of map bounds.`;\n              RG.err('Map.Level', 'addStairs',\n                  `${msg}: cols ${this._map.cols}, rows: ${this._map.rows}`);\n            }\n        }\n        else {\n            RG.err('Map.Level', 'addStairs',\n                'Cannot add stairs. x, y missing.');\n        }\n        return false;\n    }\n\n    /* Uses stairs for given actor if it's on top of the stairs.*/\n    public useStairs(actor: BaseActor): boolean {\n        const cell = this._map.getCell(actor.getX(), actor.getY());\n        if (cell.hasConnection()) {\n            const connection = cell.getConnection();\n            if (connection.useStairs(actor)) {\n                return true;\n            }\n            else {\n                RG.err('Level', 'useStairs', 'Failed to use connection.');\n            }\n        }\n        return false;\n    }\n\n    /* Adds one element into the level. */\n    public addElement(elem, x: number, y: number): boolean {\n        if (elem.getType() === 'connection') {\n            return this.addStairs(elem, x, y);\n        }\n        if (!RG.isNullOrUndef([x, y])) {\n            return this._addPropToLevelXY(RG.TYPE_ELEM, elem, x, y);\n        }\n        const [xCell, yCell] = this._getFreeCellXY();\n        if (RG.isNullOrUndef([xCell, yCell])) {\n            this.debugPrintInASCII();\n            RG.err('Level', 'addElement',\n                'Cannot add prop to null xy-coord');\n        }\n        return this._addPropToLevelXY(RG.TYPE_ELEM, elem, xCell, yCell);\n    }\n\n    public removeElement(elem, x: number, y: number): boolean {\n        return this._removePropFromLevelXY(RG.TYPE_ELEM, elem, x, y);\n    }\n\n    public addEntity(ent: Entity, x: number, y: number): boolean {\n        if (RG.isActor(ent)) {\n            return this.addActor(ent, x, y);\n        }\n        else if (RG.isItem(ent)) {\n              return this.addItem(ent, x, y);\n        }\n        else if (RG.isElement(ent)) {\n              return this.addElement(ent, x, y);\n        }\n        else {\n            RG.err('Level', 'addEntity',\n                'No support for ents without getPropType');\n        }\n        return false;\n    }\n\n    //---------------------------------------------------------------------\n    // ITEM RELATED FUNCTIONS\n    //---------------------------------------------------------------------\n\n    /* Adds one item to the given location on the level. If x,y not given,\n    *  adds it to random free cell. */\n    public addItem(item, x?: number, y?: number): boolean {\n        // verifyLevelCache(this);\n        if (!RG.isNullOrUndef([x, y])) {\n            return this._addPropToLevelXY(RG.TYPE_ITEM, item, x, y);\n        }\n        const [xCell, yCell] = this._getFreeCellXY();\n        return this._addPropToLevelXY(RG.TYPE_ITEM, item, xCell, yCell);\n    }\n\n    /* Removes an item from the level in x,y position.*/\n    public removeItem(item, x: number, y: number): boolean {\n        const res = this._removePropFromLevelXY(RG.TYPE_ITEM, item, x, y);\n        // verifyLevelCache(this);\n        return res;\n    }\n\n    public pickupItem(actor: BaseActor): void {\n        const pickup = new Pickup();\n        actor.add(pickup);\n    }\n\n    /* Moves the given object to x,y of this level. Note that object can reside\n    *  in another level before the move, and it's handled correctly. */\n    public moveActorTo(obj: BaseActor, x: number, y: number): boolean {\n        // Note that source level may be different than this level\n        const level = obj.getLevel();\n        const [oX, oY] = [obj.getX(), obj.getY()];\n        const propType = obj.getPropType();\n        if (level._removePropFromLevelXY(propType, obj, oX, oY)) {\n            return this._addPropToLevelXY(propType, obj, x, y);\n        }\n        return false;\n    }\n\n    //---------------------------------------------------------------------\n    // ACTOR RELATED FUNCTIONS\n    //---------------------------------------------------------------------\n\n    /* Adds an actor to the level. If x,y is given, tries to add there. If not,\n     * finds first free cells and adds there. Returns true on success.\n     */\n    public addActor(actor, x: number, y: number): boolean {\n        RG.debug(this, 'addActor called with x,y ' + x + ', ' + y);\n        if (!RG.isNullOrUndef([x, y])) {\n            if (this._map.hasXY(x, y)) {\n                this._addPropToLevelXY(RG.TYPE_ACTOR, actor, x, y);\n                RG.debug(this, 'Added actor to map x: ' + x + ' y: ' + y);\n                return true;\n            }\n            else {\n                RG.err('Level', 'addActor',\n                    'No coordinates ' + x + ', ' + y + ' in the map.');\n                return false;\n            }\n        }\n        else {\n            RG.nullOrUndefError('Level: addActor', 'arg |x|', x);\n            RG.nullOrUndefError('Level: addActor', 'arg |y|', y);\n            return false;\n        }\n    }\n\n    /* Using this method, actor can be added to a free cell without knowing the\n     * exact x,y coordinates. This is not random, such that top-left (0,0) is\n     * always preferred. */\n    public addActorToFreeCell(actor): boolean {\n        RG.debug(this, 'Adding actor to free slot');\n        const freeCells: Cell[] = this._map.getFree();\n        if (freeCells.length > 0) {\n            const xCell = freeCells[0].getX();\n            const yCell = freeCells[0].getY();\n            if (this._addPropToLevelXY(RG.TYPE_ACTOR, actor, xCell, yCell)) {\n                RG.debug(this,\n                    'Added actor to free cell in ' + xCell + ', ' + yCell);\n                return true;\n            }\n        }\n        else {\n            RG.err('Level', 'addActor', 'No free cells for the actor.');\n        }\n        return false;\n    }\n\n    /* Adds a prop 'obj' to level location x,y. Returns true on success,\n     * false on failure.*/\n    public _addPropToLevelXY(propType, obj, x: number, y: number): boolean {\n        if (this._p.hasOwnProperty(propType)) {\n            this._p[propType].push(obj);\n            if (!obj.isOwnable) {\n                obj.setXY(x, y);\n                obj.setLevel(this);\n            }\n            this._map.setProp(x, y, propType, obj);\n            POOL.emitEvent(RG.EVT_LEVEL_PROP_ADDED, {level: this, obj,\n                propType});\n            return true;\n        }\n        else {\n            RG.err('Map.Level', '_addPropToLevelXY',\n                `No prop ${propType} supported. Obj: ${JSON.stringify(obj)}`);\n        }\n        return false;\n    }\n\n    /* Adds virtual prop not associated with x,y position or a cell. */\n    public addVirtualProp(propType, obj): boolean {\n        if (this._p.hasOwnProperty(propType)) {\n            this._p[propType].push(obj);\n            obj.setLevel(this);\n            POOL.emitEvent(RG.EVT_LEVEL_PROP_ADDED, {level: this, obj,\n                propType});\n            return true;\n        }\n        else {\n            RG.err('Map.Level', 'addVirtualProp',\n                `No prop ${propType} supported. Obj: ${JSON.stringify(obj)}`);\n        }\n        return false;\n    }\n\n    /* Removes a prop 'obj' to level location x,y. Returns true on success,\n     * false on failure.*/\n    public _removePropFromLevelXY(\n        propType, obj, x: number, y: number\n    ): boolean {\n        if (this._p.hasOwnProperty(propType)) {\n            const index = this._p[propType].indexOf(obj);\n\n            if (index >= 0) {\n                this._p[propType].splice(index, 1);\n                if (!obj.getOwner) {\n                    obj.setXY(null, null);\n                    obj.unsetLevel();\n                }\n                POOL.emitEvent(RG.EVT_LEVEL_PROP_REMOVED,\n                    {level: this, obj, propType});\n                return this._map.removeProp(x, y, propType, obj);\n            }\n            else {\n                RG.err('Map.Level', '_removePropFromLevelXY',\n                    `Obj index not found in list this._p[${propType}]`);\n            }\n            return false;\n        }\n        else {\n            RG.err('Map.Level', '_removePropFromLevelXY',\n                `No prop ${propType} supported. Obj: ${JSON.stringify(obj)}`);\n        }\n        return false;\n    }\n\n    /* Removes a virtual property (virtual prop has no x,y position). */\n    public removeVirtualProp(propType: string, obj): boolean {\n        if (this._p.hasOwnProperty(propType)) {\n            const index = this._p[propType].indexOf(obj);\n            if (index >= 0) {\n                this._p[propType].splice(index, 1);\n                POOL.emitEvent(RG.EVT_LEVEL_PROP_REMOVED,\n                    {level: this, obj, propType});\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Removes given actor from level. Returns true if successful.*/\n    public removeActor(actor): boolean {\n        const index = this._p.actors.indexOf(actor);\n        const x = actor.getX();\n        const y = actor.getY();\n        if (this._map.removeProp(x, y, RG.TYPE_ACTOR, actor)) {\n            this._p.actors.splice(index, 1);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /* Explores the level from given actor's viewpoint. Sets new cells as\n     * explored. There's no exploration tracking per actor. This is mainly called\n     * from Brain.Player, as it marks cells as explored. */\n    public exploreCells(actor): Cell[] {\n        const visibleCells = this._map.getVisibleCells(actor);\n        for (let i = 0; i < visibleCells.length; i++) {\n            visibleCells[i].setExplored();\n        }\n        return visibleCells;\n    }\n\n    /* Returns all explored cells in the map.*/\n    public getExploredCells(): Cell[] {\n        return this._map.getExploredCells();\n    }\n\n    /* Can be used to add additional data to the level. Currently, this is used in\n     * proc gen only, and extras are not serialized/stored persistently.\n     * */\n    public setExtras(extras): void {\n        this._extras = extras;\n    }\n\n    public getExtras(): LevelExtras {\n        if (!this._extras) {this._extras = {};}\n        return this._extras;\n    }\n\n    public hasExtras(): boolean {\n        return !RG.isNullOrUndef([this._extras]) &&\n            Object.keys(this._extras).length > 0;\n    }\n\n    public addExtras(key: string, value: any): void {\n        if (!this._extras) {this._extras = {} as LevelExtras;}\n        this._extras[key] = value;\n    }\n\n    /* Returns the bounding box of the level (upper-left and lower-right\n     * coordinates). */\n    public getBbox(): BBox {\n        return {\n            ulx: 0, uly: 0,\n            lrx: this.getMap().cols - 1,\n            lry: this.getMap().rows - 1\n        };\n    }\n\n    public getColsRows(): [number, number] {\n        return [\n            this.getMap().cols,\n            this.getMap().rows\n        ];\n    }\n\n    public setOnEnter(cb): void {\n        this._callbacks.OnEnter = cb;\n    }\n\n    public setOnFirstEnter(cb): void {\n        this._callbacks.OnFirstEnter = cb;\n    }\n\n    public setOnExit(cb): void {\n        this._callbacks.OnExit = cb;\n    }\n\n    public setOnFirstExit(cb): void {\n        this._callbacks.OnFirstExit = cb;\n    }\n\n    public onEnter(): void {\n        if (this._callbacks.hasOwnProperty('OnEnter')) {\n            this._callbacks.OnEnter(this);\n        }\n    }\n\n    public onFirstEnter(): void {\n        if (!this._cbState.onFirstEnterDone) {\n            if (this._callbacks.hasOwnProperty('OnFirstEnter')) {\n                this._callbacks.OnFirstEnter(this);\n            }\n            this._cbState.onFirstEnterDone = true;\n        }\n    }\n\n    public onExit(): void {\n        if (this._callbacks.hasOwnProperty('OnExit')) {\n            this._callbacks.OnExit(this);\n        }\n    }\n\n    public onFirstExit(): void {\n        if (!this._cbState.onFirstExitDone) {\n            if (this._callbacks.hasOwnProperty('OnFirstExit')) {\n                this._callbacks.OnFirstExit(this);\n            }\n            this._cbState.onFirstExitDone = true;\n        }\n    }\n\n    /* Return random free cell on a given level.*/\n    public getFreeRandCell(): CellOrNull {\n        const freeCells = this.getMap().getFree();\n        if (freeCells.length > 0) {\n            const index = RNG.randIndex(freeCells);\n            return freeCells[index];\n        }\n        return null;\n    }\n\n    /* Returns random empty cells, or null if cannot find any.*/\n    public getEmptyRandCell(): CellOrNull {\n        const emptyCells = this.getMap().getEmptyCells();\n        if (emptyCells.length > 0) {\n            const index = RNG.randIndex(emptyCells);\n            return emptyCells[index];\n        }\n        return null;\n    }\n\n    public _getFreeCellXY(): [number, number] {\n        const freeCells = this._map.getFree();\n        if (freeCells.length > 0) {\n            const xCell = freeCells[0].getX();\n            const yCell = freeCells[0].getY();\n            return [xCell, yCell];\n        }\n        return [null, null];\n    }\n\n    public debugPrintInASCII(): void {\n        this.getMap().debugPrintInASCII();\n    }\n\n    /* Removes all elements matching the given function. */\n    public removeElements(filter: (elem) => boolean): void {\n        const toRemove = this._p.elements.filter(filter);\n        toRemove.forEach(elem => {\n          const eX = (elem as Mixin.Locatable).getX();\n          const eY = (elem as Mixin.Locatable).getY();\n          this.removeElement(elem, eX, eY);\n        });\n    }\n\n    public getCell(x: number, y: number): Cell {\n        return this._map.getCell(x, y);\n    }\n\n    /* Returns the player actor or null if player does not exist. */\n    public getPlayer(): SentientActor | null {\n        const pActor = this._p.actors.find(a => a.isPlayer && a.isPlayer());\n        return pActor as SentientActor;\n    }\n\n    /* Serializes the level object. */\n    public toJSON(): any {\n        const obj: any = {\n            isJSON: true,\n            id: this.getID(),\n            levelNumber: this.getLevelNumber(),\n            actors: [],\n            items: [],\n            elements: [],\n            map: this.getMap().toJSON(),\n            // map: this.getMap().toJSONEncoded(),\n            cbState: this._cbState\n        };\n\n        if (this._parent) {\n            obj.parent = this._parent.getName();\n            if (typeof obj.parent !== 'string') {\n                RG.err('Map.Level', 'toJSON',\n                    'Parent name not a string');\n            }\n        }\n\n        obj.components = compsToJSON(this);\n        // Must store x, y for each prop as well\n        const props = [TYPE_ACTOR, TYPE_ITEM, TYPE_ELEM];\n        props.forEach(propType => {\n            this._p[propType].forEach(prop => {\n                const propObj = {\n                    x: prop.getX(),\n                    y: prop.getY(),\n                    obj: prop.toJSON()\n                };\n\n                // Avoid storing player twice (stored in Game.Main already)\n                if (!propType === RG.TYPE_ACTOR) {\n                    obj[propType].push(propObj);\n                }\n                else if (!propObj.obj.isPlayer) {\n                    obj[propType].push(propObj);\n                }\n            });\n        });\n\n        return obj;\n    }\n}\n\n","/*\nCopyright (c) 2012-now(), Ondrej Zara\nModified work Copyright 2019 Tuomas Poikela\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\t* Redistributions of source code must retain the above copyright notice,\n\t  this list of conditions and the following disclaimer.\n\t* Redistributions in binary form must reproduce the above copyright notice,\n\t  this list of conditions and the following disclaimer in the documentation\n\t  and/or other materials provided with the distribution.\n\t* Neither the name of Ondrej Zara nor the names of its contributors may be used\n\t  to endorse or promote products derived from this software without specific\n\t  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* eslint-disable */\n/*\n    This is rot.js, the ROguelike Toolkit in JavaScript.\n    Version 0.6, generated on Mon Jun 13 11:12:41 CEST 2016.\n    */\n/*\n * @namespace Top-level ROT namespace\n */\nvar ROT = {\n    /*\n     * @returns {bool} Is rot.js supported by this browser?\n     */\n    isSupported: function() {\n        return !!(document.createElement('canvas')\n            .getContext && Function.prototype.bind);\n    },\n\n    /* Default with for display and map generators */\n    DEFAULT_WIDTH: 80,\n    /* Default height for display and map generators */\n    DEFAULT_HEIGHT: 25,\n\n    /* Directional constants. Ordering is important! */\n    DIRS: {\n        4: [\n            [ 0, -1],\n            [ 1, 0],\n            [ 0, 1],\n            [-1, 0]\n        ],\n        8: [\n            [ 0, -1],\n            [ 1, -1],\n            [ 1, 0],\n            [ 1, 1],\n            [ 0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1]\n        ],\n        6: [\n            [-1, -1],\n            [ 1, -1],\n            [ 2, 0],\n            [ 1, 1],\n            [-1, 1],\n            [-2, 0]\n        ]\n    },\n\n    /* Cancel key. */\n    VK_CANCEL: 3,\n    /* Help key. */\n    VK_HELP: 6,\n    /* Backspace key. */\n    VK_BACK_SPACE: 8,\n    /* Tab key. */\n    VK_TAB: 9,\n    /* 5 key on Numpad when NumLock is unlocked. */\n    VK_CLEAR: 12,\n    /* Return/enter key on the main keyboard. */\n    VK_RETURN: 13,\n    /* Reserved, but not used. */\n    VK_ENTER: 14,\n    /* Shift key. */\n    VK_SHIFT: 16,\n    /* Control key. */\n    VK_CONTROL: 17,\n    /* Alt (Option on Mac) key. */\n    VK_ALT: 18,\n    /* Pause key. */\n    VK_PAUSE: 19,\n    /* Caps lock. */\n    VK_CAPS_LOCK: 20,\n    /* Escape key. */\n    VK_ESCAPE: 27,\n    /* Space bar. */\n    VK_SPACE: 32,\n    /* Page Up key. */\n    VK_PAGE_UP: 33,\n    /* Page Down key. */\n    VK_PAGE_DOWN: 34,\n    /* End key. */\n    VK_END: 35,\n    /* Home key. */\n    VK_HOME: 36,\n    /* Left arrow. */\n    VK_LEFT: 37,\n    /* Up arrow. */\n    VK_UP: 38,\n    /* Right arrow. */\n    VK_RIGHT: 39,\n    /* Down arrow. */\n    VK_DOWN: 40,\n    /* Print Screen key. */\n    VK_PRINTSCREEN: 44,\n    /* Ins(ert) key. */\n    VK_INSERT: 45,\n    /* Del(ete) key. */\n    VK_DELETE: 46,\n    /* */\n    VK_0: 48,\n    /* */\n    VK_1: 49,\n    /* */\n    VK_2: 50,\n    /* */\n    VK_3: 51,\n    /* */\n    VK_4: 52,\n    /* */\n    VK_5: 53,\n    /* */\n    VK_6: 54,\n    /* */\n    VK_7: 55,\n    /* */\n    VK_8: 56,\n    /* */\n    VK_9: 57,\n    /* Colon (:) key. Requires Gecko 15.0 */\n    VK_COLON: 58,\n    /* Semicolon (;) key. */\n    VK_SEMICOLON: 59,\n    /* Less-than (<) key. Requires Gecko 15.0 */\n    VK_LESS_THAN: 60,\n    /* Equals (=) key. */\n    VK_EQUALS: 61,\n    /* Greater-than (>) key. Requires Gecko 15.0 */\n    VK_GREATER_THAN: 62,\n    /* Question mark (?) key. Requires Gecko 15.0 */\n    VK_QUESTION_MARK: 63,\n    /* Atmark (@) key. Requires Gecko 15.0 */\n    VK_AT: 64,\n    /* */\n    VK_A: 65,\n    /* */\n    VK_B: 66,\n    /* */\n    VK_C: 67,\n    /* */\n    VK_D: 68,\n    /* */\n    VK_E: 69,\n    /* */\n    VK_F: 70,\n    /* */\n    VK_G: 71,\n    /* */\n    VK_H: 72,\n    /* */\n    VK_I: 73,\n    /* */\n    VK_J: 74,\n    /* */\n    VK_K: 75,\n    /* */\n    VK_L: 76,\n    /* */\n    VK_M: 77,\n    /* */\n    VK_N: 78,\n    /* */\n    VK_O: 79,\n    /* */\n    VK_P: 80,\n    /* */\n    VK_Q: 81,\n    /* */\n    VK_R: 82,\n    /* */\n    VK_S: 83,\n    /* */\n    VK_T: 84,\n    /* */\n    VK_U: 85,\n    /* */\n    VK_V: 86,\n    /* */\n    VK_W: 87,\n    /* */\n    VK_X: 88,\n    /* */\n    VK_Y: 89,\n    /* */\n    VK_Z: 90,\n    /* */\n    VK_CONTEXT_MENU: 93,\n    /* 0 on the numeric keypad. */\n    VK_NUMPAD0: 96,\n    /* 1 on the numeric keypad. */\n    VK_NUMPAD1: 97,\n    /* 2 on the numeric keypad. */\n    VK_NUMPAD2: 98,\n    /* 3 on the numeric keypad. */\n    VK_NUMPAD3: 99,\n    /* 4 on the numeric keypad. */\n    VK_NUMPAD4: 100,\n    /* 5 on the numeric keypad. */\n    VK_NUMPAD5: 101,\n    /* 6 on the numeric keypad. */\n    VK_NUMPAD6: 102,\n    /* 7 on the numeric keypad. */\n    VK_NUMPAD7: 103,\n    /* 8 on the numeric keypad. */\n    VK_NUMPAD8: 104,\n    /* 9 on the numeric keypad. */\n    VK_NUMPAD9: 105,\n    /* * on the numeric keypad. */\n    VK_MULTIPLY: 106,\n    /* + on the numeric keypad. */\n    VK_ADD: 107,\n    /* */\n    VK_SEPARATOR: 108,\n    /* - on the numeric keypad. */\n    VK_SUBTRACT: 109,\n    /* Decimal point on the numeric keypad. */\n    VK_DECIMAL: 110,\n    /* / on the numeric keypad. */\n    VK_DIVIDE: 111,\n    /* F1 key. */\n    VK_F1: 112,\n    /* F2 key. */\n    VK_F2: 113,\n    /* F3 key. */\n    VK_F3: 114,\n    /* F4 key. */\n    VK_F4: 115,\n    /* F5 key. */\n    VK_F5: 116,\n    /* F6 key. */\n    VK_F6: 117,\n    /* F7 key. */\n    VK_F7: 118,\n    /* F8 key. */\n    VK_F8: 119,\n    /* F9 key. */\n    VK_F9: 120,\n    /* F10 key. */\n    VK_F10: 121,\n    /* F11 key. */\n    VK_F11: 122,\n    /* F12 key. */\n    VK_F12: 123,\n    /* F13 key. */\n    VK_F13: 124,\n    /* F14 key. */\n    VK_F14: 125,\n    /* F15 key. */\n    VK_F15: 126,\n    /* F16 key. */\n    VK_F16: 127,\n    /* F17 key. */\n    VK_F17: 128,\n    /* F18 key. */\n    VK_F18: 129,\n    /* F19 key. */\n    VK_F19: 130,\n    /* F20 key. */\n    VK_F20: 131,\n    /* F21 key. */\n    VK_F21: 132,\n    /* F22 key. */\n    VK_F22: 133,\n    /* F23 key. */\n    VK_F23: 134,\n    /* F24 key. */\n    VK_F24: 135,\n    /* Num Lock key. */\n    VK_NUM_LOCK: 144,\n    /* Scroll Lock key. */\n    VK_SCROLL_LOCK: 145,\n    /* Circumflex (^) key. Requires Gecko 15.0 */\n    VK_CIRCUMFLEX: 160,\n    /* Exclamation (!) key. Requires Gecko 15.0 */\n    VK_EXCLAMATION: 161,\n    /* Double quote () key. Requires Gecko 15.0 */\n    VK_DOUBLE_QUOTE: 162,\n    /* Hash (#) key. Requires Gecko 15.0 */\n    VK_HASH: 163,\n    /* Dollar sign ($) key. Requires Gecko 15.0 */\n    VK_DOLLAR: 164,\n    /* Percent (%) key. Requires Gecko 15.0 */\n    VK_PERCENT: 165,\n    /* Ampersand (&) key. Requires Gecko 15.0 */\n    VK_AMPERSAND: 166,\n    /* Underscore (_) key. Requires Gecko 15.0 */\n    VK_UNDERSCORE: 167,\n    /* Open parenthesis (() key. Requires Gecko 15.0 */\n    VK_OPEN_PAREN: 168,\n    /* Close parenthesis ()) key. Requires Gecko 15.0 */\n    VK_CLOSE_PAREN: 169,\n    /* Asterisk (*) key. Requires Gecko 15.0 */\n    VK_ASTERISK: 170,\n    /* Plus (+) key. Requires Gecko 15.0 */\n    VK_PLUS: 171,\n    /* Pipe (|) key. Requires Gecko 15.0 */\n    VK_PIPE: 172,\n    /* Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n    VK_HYPHEN_MINUS: 173,\n    /* Open curly bracket ({) key. Requires Gecko 15.0 */\n    VK_OPEN_CURLY_BRACKET: 174,\n    /* Close curly bracket (}) key. Requires Gecko 15.0 */\n    VK_CLOSE_CURLY_BRACKET: 175,\n    /* Tilde (~) key. Requires Gecko 15.0 */\n    VK_TILDE: 176,\n    /* Comma (,) key. */\n    VK_COMMA: 188,\n    /* Period (.) key. */\n    VK_PERIOD: 190,\n    /* Slash (/) key. */\n    VK_SLASH: 191,\n    /* Back tick (`) key. */\n    VK_BACK_QUOTE: 192,\n    /* Open square bracket ([) key. */\n    VK_OPEN_BRACKET: 219,\n    /* Back slash (\\) key. */\n    VK_BACK_SLASH: 220,\n    /* Close square bracket (]) key. */\n    VK_CLOSE_BRACKET: 221,\n    /* Quote (''') key. */\n    VK_QUOTE: 222,\n    /* Meta key on Linux, Command key on Mac. */\n    VK_META: 224,\n    /* AltGr key on Linux. Requires Gecko 15.0 */\n    VK_ALTGR: 225,\n    /* Windows logo key on Windows. Or Super or Hyper key on Linux.\n     * Requires Gecko 15.0 */\n    VK_WIN: 91,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANA: 21,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANGUL: 21,\n    /* 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */\n    VK_EISU: 22,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_JUNJA: 23,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_FINAL: 24,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANJA: 25,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANJI: 25,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_CONVERT: 28,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_NONCONVERT: 29,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_ACCEPT: 30,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_MODECHANGE: 31,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_SELECT: 41,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_PRINT: 42,\n    /* Linux support for this keycode was added in Gecko 4.0. */\n    VK_EXECUTE: 43,\n    /* Linux support for this keycode was added in Gecko 4.0.\t */\n    VK_SLEEP: 95\n};\n/*\n * @namespace\n * Contains text tokenization and breaking routines\n */\nROT.Text = {\n    RE_COLORS: /%([bc]){([^}]*)}/g,\n\n    /* token types */\n    TYPE_TEXT:\t0,\n    TYPE_NEWLINE:\t1,\n    TYPE_FG:\t2,\n    TYPE_BG:\t3,\n\n    /*\n     * Measure size of a resulting text block\n     */\n    measure: function(str, maxWidth) {\n        var result = {width: 0, height: 1};\n        var tokens = this.tokenize(str, maxWidth);\n        var lineWidth = 0;\n\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            switch (token.type) {\n                case this.TYPE_TEXT:\n                    lineWidth += token.value.length;\n                    break;\n\n                case this.TYPE_NEWLINE:\n                    result.height++;\n                    result.width = Math.max(result.width, lineWidth);\n                    lineWidth = 0;\n                    break;\n            }\n        }\n        result.width = Math.max(result.width, lineWidth);\n\n        return result;\n    },\n\n    /*\n     * Convert string to a series of a formatting commands\n     */\n    tokenize: function(str, maxWidth) {\n        var result = [];\n\n        /* first tokenization pass - split texts and color formatting commands */\n        var offset = 0;\n        str.replace(this.RE_COLORS, function(match, type, name, index) {\n            /* string before */\n            var part = str.substring(offset, index);\n            if (part.length) {\n                result.push({\n                    type: ROT.Text.TYPE_TEXT,\n                    value: part\n                });\n            }\n\n            /* color command */\n            result.push({\n                type: (type === 'c' ? ROT.Text.TYPE_FG : ROT.Text.TYPE_BG),\n                value: name.trim()\n            });\n\n            offset = index + match.length;\n            return '';\n        });\n\n        /* last remaining part */\n        var part = str.substring(offset);\n        if (part.length) {\n            result.push({\n                type: ROT.Text.TYPE_TEXT,\n                value: part\n            });\n        }\n\n        return this._breakLines(result, maxWidth);\n    },\n\n    /* insert line breaks into first-pass tokenized data */\n    _breakLines: function(tokens, maxWidth) {\n        if (!maxWidth) { maxWidth = Infinity; }\n\n        var i = 0;\n        var lineLength = 0;\n        var lastTokenWithSpace = -1;\n\n        while (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n            var token = tokens[i];\n            if (token.type === ROT.Text.TYPE_NEWLINE) { /* reset */\n                lineLength = 0;\n                lastTokenWithSpace = -1;\n            }\n            if (token.type != ROT.Text.TYPE_TEXT) { /* skip non-text tokens */\n                i++;\n                continue;\n            }\n\n            /* remove spaces at the beginning of line */\n            while (lineLength === 0 && token.value.charAt(0) === ' ') { token.value = token.value.substring(1); }\n\n            /* forced newline? insert two new tokens after this one */\n            var index = token.value.indexOf('\\n');\n            if (index != -1) {\n                token.value = this._breakInsideToken(tokens, i, index, true);\n\n                /* if there are spaces at the end, we must remove them (we do not want the line too long) */\n                var arr = token.value.split('');\n                while (arr.length && arr[arr.length - 1] === ' ') { arr.pop(); }\n                token.value = arr.join('');\n            }\n\n            /* token degenerated? */\n            if (!token.value.length) {\n                tokens.splice(i, 1);\n                continue;\n            }\n\n            if (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n\n                /* is it possible to break within this token? */\n                index = -1;\n                while (1) {\n                    var nextIndex = token.value.indexOf(' ', index + 1);\n                    if (nextIndex === -1) { break; }\n                    if (lineLength + nextIndex > maxWidth) { break; }\n                    index = nextIndex;\n                }\n\n                if (index != -1) { /* break at space within this one */\n                    token.value = this._breakInsideToken(tokens, i, index, true);\n                }\n                else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n                    token = tokens[lastTokenWithSpace];\n                    var breakIndex = token.value.lastIndexOf(' ');\n                    token.value = this._breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n                    i = lastTokenWithSpace;\n                }\n                else { /* force break in this token */\n                    token.value = this._breakInsideToken(tokens, i, maxWidth - lineLength, false);\n                }\n\n            }\n            else { /* line not long, continue */\n                lineLength += token.value.length;\n                if (token.value.indexOf(' ') != -1) { lastTokenWithSpace = i; }\n            }\n\n            i++; /* advance to next token */\n        }\n\n\n        tokens.push({type: ROT.Text.TYPE_NEWLINE}); /* insert fake newline to fix the last text line */\n\n        /* remove trailing space from text tokens before newlines */\n        var lastTextToken = null;\n        for (i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            switch (token.type) {\n                case ROT.Text.TYPE_TEXT: lastTextToken = token; break;\n                case ROT.Text.TYPE_NEWLINE:\n                    if (lastTextToken) { /* remove trailing space */\n                        var arr = lastTextToken.value.split('');\n                        while (arr.length && arr[arr.length - 1] === ' ') { arr.pop(); }\n                        lastTextToken.value = arr.join('');\n                    }\n                    lastTextToken = null;\n                    break;\n            }\n        }\n\n        tokens.pop(); /* remove fake token */\n\n        return tokens;\n    },\n\n    /*\n     * Create new tokens and insert them into the stream\n     * @param {object[]} tokens\n     * @param {int} tokenIndex Token being processed\n     * @param {int} breakIndex Index within current token's value\n     * @param {bool} removeBreakChar Do we want to remove the breaking character?\n     * @returns {string} remaining unbroken token value\n     */\n    _breakInsideToken: function(tokens, tokenIndex, breakIndex, removeBreakChar) {\n        var newBreakToken = {\n            type: ROT.Text.TYPE_NEWLINE\n        };\n        var newTextToken = {\n            type: ROT.Text.TYPE_TEXT,\n            value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n        };\n        tokens.splice(tokenIndex + 1, 0, newBreakToken, newTextToken);\n        return tokens[tokenIndex].value.substring(0, breakIndex);\n    }\n};\n/*\n * @returns {any} Randomly picked item, null when length=0\n */\nArray.prototype.random = Array.prototype.random || function() {\n    if (!this.length) { return null; }\n    return this[Math.floor(ROT.RNG.getUniform() * this.length)];\n};\n\n/*\n * @returns {array} New array with randomized items\n * FIXME destroys this!\n */\nArray.prototype.randomize = Array.prototype.randomize || function() {\n    var result = [];\n    while (this.length) {\n        var index = this.indexOf(this.random());\n        result.push(this.splice(index, 1)[0]);\n    }\n    return result;\n};\n/*\n * Always positive modulus\n * @param {int} n Modulus\n * @returns {int} this modulo n\n */\nNumber.prototype.mod = Number.prototype.mod || function(n) {\n    return ((this % n) + n) % n;\n};\n/*\n * @returns {string} First letter capitalized\n */\nString.prototype.capitalize = String.prototype.capitalize || function() {\n    return this.charAt(0).toUpperCase() + this.substring(1);\n};\n\n/*\n * Left pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.lpad = String.prototype.lpad || function(character, count) {\n    var ch = character || '0';\n    var cnt = count || 2;\n\n    var s = '';\n    while (s.length < (cnt - this.length)) { s += ch; }\n    s = s.substring(0, cnt - this.length);\n    return s + this;\n};\n\n/*\n * Right pad\n * @param {string} [character=\"0\"]\n * @param {int} [count=2]\n */\nString.prototype.rpad = String.prototype.rpad || function(character, count) {\n    var ch = character || '0';\n    var cnt = count || 2;\n\n    var s = '';\n    while (s.length < (cnt - this.length)) { s += ch; }\n    s = s.substring(0, cnt - this.length);\n    return this + s;\n};\n\n/*\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nString.format = String.format || function(template) {\n    var map = String.format.map;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var replacer = function(match, group1, group2, index) {\n        if (template.charAt(index - 1) === '%') { return match.substring(1); }\n        if (!args.length) { return match; }\n        var obj = args[0];\n\n        var group = group1 || group2;\n        var parts = group.split(',');\n        var name = parts.shift();\n        var method = map[name.toLowerCase()];\n        if (!method) { return match; }\n\n        var obj = args.shift();\n        var replaced = obj[method].apply(obj, parts);\n\n        var first = name.charAt(0);\n        if (first != first.toLowerCase()) { replaced = replaced.capitalize(); }\n\n        return replaced;\n    };\n    return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n};\n\nString.format.map = String.format.map || {\n    s: 'toString'\n};\n\n/*\n * Convenience shortcut to String.format(this)\n */\nString.prototype.format = String.prototype.format || function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(this);\n    return String.format.apply(String, args);\n};\n\nif (!Object.create) {\n    /*\n     * ES5 Object.create\n     */\n    Object.create = function(o) {\n        var tmp = function() {};\n        tmp.prototype = o;\n        return new tmp();\n    };\n}\n/*\n * Sets prototype of this function to an instance of parent function\n * @param {function} parent\n */\nFunction.prototype.extend = Function.prototype.extend || function(parent) {\n    this.prototype = Object.create(parent.prototype);\n    this.prototype.constructor = this;\n    return this;\n};\nif (typeof window !== 'undefined') {\n    window.requestAnimationFrame =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.oRequestAnimationFrame ||\n        window.msRequestAnimationFrame ||\n        function(cb) { return setTimeout(cb, 1000 / 60); };\n\n    window.cancelAnimationFrame =\n        window.cancelAnimationFrame ||\n        window.mozCancelAnimationFrame ||\n        window.webkitCancelAnimationFrame ||\n        window.oCancelAnimationFrame ||\n        window.msCancelAnimationFrame ||\n        function(id) { return clearTimeout(id); };\n}\n/*\n * @class Visual map display\n * @param {object} [options]\n * @param {int} [options.width=ROT.DEFAULT_WIDTH]\n * @param {int} [options.height=ROT.DEFAULT_HEIGHT]\n * @param {int} [options.fontSize=15]\n * @param {string} [options.fontFamily=\"monospace\"]\n * @param {string} [options.fontStyle=\"\"] bold/italic/none/both\n * @param {string} [options.fg=\"#ccc\"]\n * @param {string} [options.bg=\"#000\"]\n * @param {float} [options.spacing=1]\n * @param {float} [options.border=0]\n * @param {string} [options.layout=\"rect\"]\n * @param {bool} [options.forceSquareRatio=false]\n * @param {int} [options.tileWidth=32]\n * @param {int} [options.tileHeight=32]\n * @param {object} [options.tileMap={}]\n * @param {image} [options.tileSet=null]\n * @param {image} [options.tileColorize=false]\n */\nROT.Display = function(options) {\n    var canvas = document.createElement('canvas');\n    this._context = canvas.getContext('2d');\n    this._data = {};\n    this._dirty = false; /* false = nothing, true = all, object = dirty cells */\n    this._options = {};\n    this._backend = null;\n\n    var defaultOptions = {\n        width: ROT.DEFAULT_WIDTH,\n        height: ROT.DEFAULT_HEIGHT,\n        transpose: false,\n        layout: 'rect',\n        fontSize: 15,\n        spacing: 1,\n        border: 0,\n        forceSquareRatio: false,\n        fontFamily: 'monospace',\n        fontStyle: '',\n        fg: '#ccc',\n        bg: '#000',\n        tileWidth: 32,\n        tileHeight: 32,\n        tileMap: {},\n        tileSet: null,\n        tileColorize: false,\n        termColor: 'xterm'\n    };\n    for (var p in options) { defaultOptions[p] = options[p]; }\n    this.setOptions(defaultOptions);\n    this.DEBUG = this.DEBUG.bind(this);\n\n    this._tick = this._tick.bind(this);\n    requestAnimationFrame(this._tick);\n};\n\n/*\n * Debug helper, ideal as a map generator callback. Always bound to this.\n * @param {int} x\n * @param {int} y\n * @param {int} what\n */\nROT.Display.prototype.DEBUG = function(x, y, what) {\n    var colors = [this._options.bg, this._options.fg];\n    this.draw(x, y, null, null, colors[what % colors.length]);\n};\n\n/*\n * Clear the whole display (cover it with background color)\n */\nROT.Display.prototype.clear = function() {\n    this._data = {};\n    this._dirty = true;\n};\n\n/*\n * @see ROT.Display\n */\nROT.Display.prototype.setOptions = function(options) {\n    for (var p in options) { this._options[p] = options[p]; }\n    if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n        if (options.layout) {\n            this._backend = new ROT.Display[options.layout.capitalize()](this._context);\n        }\n\n        var font = (this._options.fontStyle ? this._options.fontStyle + ' ' : '') + this._options.fontSize + 'px ' + this._options.fontFamily;\n        this._context.font = font;\n        this._backend.compute(this._options);\n        this._context.font = font;\n        this._context.textAlign = 'center';\n        this._context.textBaseline = 'middle';\n        this._dirty = true;\n    }\n    return this;\n};\n\n/*\n * Returns currently set options\n * @returns {object} Current options object\n */\nROT.Display.prototype.getOptions = function() {\n    return this._options;\n};\n\n/*\n * Returns the DOM node of this display\n * @returns {node} DOM node\n */\nROT.Display.prototype.getContainer = function() {\n    return this._context.canvas;\n};\n\n/*\n * Compute the maximum width/height to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int[2]} cellWidth,cellHeight\n */\nROT.Display.prototype.computeSize = function(availWidth, availHeight) {\n    return this._backend.computeSize(availWidth, availHeight, this._options);\n};\n\n/*\n * Compute the maximum font size to fit into a set of given constraints\n * @param {int} availWidth Maximum allowed pixel width\n * @param {int} availHeight Maximum allowed pixel height\n * @returns {int} fontSize\n */\nROT.Display.prototype.computeFontSize = function(availWidth, availHeight) {\n    return this._backend.computeFontSize(availWidth, availHeight, this._options);\n};\n\n/*\n * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n * @param {Event} e event\n * @returns {int[2]} -1 for values outside of the canvas\n */\nROT.Display.prototype.eventToPosition = function(e) {\n    var x, y;\n    if (e.touches) {\n        x = e.touches[0].clientX;\n        y = e.touches[0].clientY;\n    }\n    else {\n        x = e.clientX;\n        y = e.clientY;\n    }\n\n    var rect = this._context.canvas.getBoundingClientRect();\n    x -= rect.left;\n    y -= rect.top;\n\n    x *= this._context.canvas.width / this._context.canvas.clientWidth;\n    y *= this._context.canvas.height / this._context.canvas.clientHeight;\n\n    if (x < 0 || y < 0 || x >= this._context.canvas.width || y >= this._context.canvas.height) { return [-1, -1]; }\n\n    return this._backend.eventToPosition(x, y);\n};\n\n/*\n * @param {int} x\n * @param {int} y\n * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n * @param {string} [fg] foreground color\n * @param {string} [bg] background color\n */\nROT.Display.prototype.draw = function(x, y, ch, fg, bg) {\n    if (!fg) { fg = this._options.fg; }\n    if (!bg) { bg = this._options.bg; }\n    this._data[x + ',' + y] = [x, y, ch, fg, bg];\n\n    if (this._dirty === true) { return; } /* will already redraw everything */\n    if (!this._dirty) { this._dirty = {}; } /* first! */\n    this._dirty[x + ',' + y] = true;\n};\n\n/*\n * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n * @param {int} x\n * @param {int} y\n * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n * @param {int} [maxWidth] wrap at what width?\n * @returns {int} lines drawn\n */\nROT.Display.prototype.drawText = function(x, y, text, maxWidth) {\n    var fg = null;\n    var bg = null;\n    var cx = x;\n    var cy = y;\n    var lines = 1;\n    if (!maxWidth) { maxWidth = this._options.width - x; }\n\n    var tokens = ROT.Text.tokenize(text, maxWidth);\n\n    while (tokens.length) { /* interpret tokenized opcode stream */\n        var token = tokens.shift();\n        switch (token.type) {\n            case ROT.Text.TYPE_TEXT:\n                var isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n                for (let i = 0; i < token.value.length; i++) {\n                    var cc = token.value.charCodeAt(i);\n                    var c = token.value.charAt(i);\n                    // Assign to `true` when the current char is full-width.\n                    isFullWidth = (cc > 0xff && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) && cc > 0xffee;\n                    // Current char is space, whatever full-width or half-width both are OK.\n                    isSpace = (c.charCodeAt(0) === 0x20 || c.charCodeAt(0) === 0x3000);\n                    // The previous char is full-width and\n                    // current char is nether half-width nor a space.\n                    if (isPrevFullWidth && !isFullWidth && !isSpace) { cx++; } // add an extra position\n                    // The current char is full-width and\n                    // the previous char is not a space.\n                    if (isFullWidth && !isPrevSpace) { cx++; } // add an extra position\n                    this.draw(cx++, cy, c, fg, bg);\n                    isPrevSpace = isSpace;\n                    isPrevFullWidth = isFullWidth;\n                }\n                break;\n\n            case ROT.Text.TYPE_FG:\n                fg = token.value || null;\n                break;\n\n            case ROT.Text.TYPE_BG:\n                bg = token.value || null;\n                break;\n\n            case ROT.Text.TYPE_NEWLINE:\n                cx = x;\n                cy++;\n                lines++;\n                break;\n        }\n    }\n\n    return lines;\n};\n\n/*\n * Timer tick: update dirty parts\n */\nROT.Display.prototype._tick = function() {\n    requestAnimationFrame(this._tick);\n\n    if (!this._dirty) { return; }\n\n    if (this._dirty === true) { /* draw all */\n        this._context.fillStyle = this._options.bg;\n        this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\n\n        for (var id in this._data) { /* redraw cached data */\n            this._draw(id, false);\n        }\n\n    }\n    else { /* draw only dirty */\n        for (var key in this._dirty) {\n            this._draw(key, true);\n        }\n    }\n\n    this._dirty = false;\n};\n\n/*\n * @param {string} key What to draw\n * @param {bool} clearBefore Is it necessary to clean before?\n */\nROT.Display.prototype._draw = function(key, clearBefore) {\n    var data = this._data[key];\n    if (data[4] != this._options.bg) { clearBefore = true; }\n\n    this._backend.draw(data, clearBefore);\n};\n/*\n * @class Abstract display backend module\n * @private\n */\nROT.Display.Backend = function(context) {\n    this._context = context;\n};\n\nROT.Display.Backend.prototype.compute = function(options) {\n};\n\nROT.Display.Backend.prototype.draw = function(data, clearBefore) {\n};\n\nROT.Display.Backend.prototype.computeSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.computeFontSize = function(availWidth, availHeight) {\n};\n\nROT.Display.Backend.prototype.eventToPosition = function(x, y) {\n};\n/*\n * @class Rectangular backend\n * @private\n */\nROT.Display.Rect = function(context) {\n    ROT.Display.Backend.call(this, context);\n\n    this._spacingX = 0;\n    this._spacingY = 0;\n    this._canvasCache = {};\n    this._options = {};\n};\nROT.Display.Rect.extend(ROT.Display.Backend);\n\nROT.Display.Rect.cache = false;\n\nROT.Display.Rect.prototype.compute = function(options) {\n    this._canvasCache = {};\n    this._options = options;\n\n    var charWidth = Math.ceil(this._context.measureText('W').width);\n    this._spacingX = Math.ceil(options.spacing * charWidth);\n    this._spacingY = Math.ceil(options.spacing * options.fontSize);\n\n    if (this._options.forceSquareRatio) {\n        this._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n    }\n\n    this._context.canvas.width = options.width * this._spacingX;\n    this._context.canvas.height = options.height * this._spacingY;\n};\n\nROT.Display.Rect.prototype.draw = function(data, clearBefore) {\n    if (this.constructor.cache) {\n        this._drawWithCache(data, clearBefore);\n    }\n    else {\n        this._drawNoCache(data, clearBefore);\n    }\n};\n\nROT.Display.Rect.prototype._drawWithCache = function(data, clearBefore) {\n    var x = data[0];\n    var y = data[1];\n    var ch = data[2];\n    var fg = data[3];\n    var bg = data[4];\n    var canvas;\n\n    var hash = '' + ch + fg + bg;\n    if (hash in this._canvasCache) {\n        canvas = this._canvasCache[hash];\n    }\n    else {\n        var b = this._options.border;\n        canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        canvas.width = this._spacingX;\n        canvas.height = this._spacingY;\n        ctx.fillStyle = bg;\n        ctx.fillRect(b, b, canvas.width - b, canvas.height - b);\n\n        if (ch) {\n            ctx.fillStyle = fg;\n            ctx.font = this._context.font;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n\n            var chars = [].concat(ch);\n            for (let i = 0; i < chars.length; i++) {\n                ctx.fillText(chars[i], this._spacingX / 2, Math.ceil(this._spacingY / 2));\n            }\n        }\n        this._canvasCache[hash] = canvas;\n    }\n\n    this._context.drawImage(canvas, x * this._spacingX, y * this._spacingY);\n};\n\nROT.Display.Rect.prototype._drawNoCache = function(data, clearBefore) {\n    var x = data[0];\n    var y = data[1];\n    var ch = data[2];\n    var fg = data[3];\n    var bg = data[4];\n\n    if (clearBefore) {\n        var b = this._options.border;\n        this._context.fillStyle = bg;\n        this._context.fillRect(x * this._spacingX + b, y * this._spacingY + b, this._spacingX - b, this._spacingY - b);\n    }\n\n    if (!ch) { return; }\n\n    this._context.fillStyle = fg;\n\n    var chars = [].concat(ch);\n    for (let i = 0; i < chars.length; i++) {\n        this._context.fillText(chars[i], (x + 0.5) * this._spacingX, Math.ceil((y + 0.5) * this._spacingY));\n    }\n};\n\nROT.Display.Rect.prototype.computeSize = function(availWidth, availHeight) {\n    var width = Math.floor(availWidth / this._spacingX);\n    var height = Math.floor(availHeight / this._spacingY);\n    return [width, height];\n};\n\nROT.Display.Rect.prototype.computeFontSize = function(availWidth, availHeight) {\n    var boxWidth = Math.floor(availWidth / this._options.width);\n    var boxHeight = Math.floor(availHeight / this._options.height);\n\n    /* compute char ratio */\n    var oldFont = this._context.font;\n    this._context.font = '100px ' + this._options.fontFamily;\n    var width = Math.ceil(this._context.measureText('W').width);\n    this._context.font = oldFont;\n    var ratio = width / 100;\n\n    var widthFraction = ratio * boxHeight / boxWidth;\n    if (widthFraction > 1) { /* too wide with current aspect ratio */\n        boxHeight = Math.floor(boxHeight / widthFraction);\n    }\n    return Math.floor(boxHeight / this._options.spacing);\n};\n\nROT.Display.Rect.prototype.eventToPosition = function(x, y) {\n    return [Math.floor(x / this._spacingX), Math.floor(y / this._spacingY)];\n};\n/*\n * @class Hexagonal backend\n * @private\n */\nROT.Display.Hex = function(context) {\n    ROT.Display.Backend.call(this, context);\n\n    this._spacingX = 0;\n    this._spacingY = 0;\n    this._hexSize = 0;\n    this._options = {};\n};\nROT.Display.Hex.extend(ROT.Display.Backend);\n\nROT.Display.Hex.prototype.compute = function(options) {\n    this._options = options;\n\n    /* FIXME char size computation does not respect transposed hexes */\n    var charWidth = Math.ceil(this._context.measureText('W').width);\n    this._hexSize = Math.floor(options.spacing * (options.fontSize + charWidth / Math.sqrt(3)) / 2);\n    this._spacingX = this._hexSize * Math.sqrt(3) / 2;\n    this._spacingY = this._hexSize * 1.5;\n\n    var xprop, yprop;\n    if (options.transpose) {\n        xprop = 'height';\n        yprop = 'width';\n    }\n    else {\n        xprop = 'width';\n        yprop = 'height';\n    }\n    this._context.canvas[xprop] = Math.ceil( (options.width + 1) * this._spacingX );\n    this._context.canvas[yprop] = Math.ceil( (options.height - 1) * this._spacingY + 2 * this._hexSize );\n};\n\nROT.Display.Hex.prototype.draw = function(data, clearBefore) {\n    var x = data[0];\n    var y = data[1];\n    var ch = data[2];\n    var fg = data[3];\n    var bg = data[4];\n\n    var px = [\n        (x + 1) * this._spacingX,\n        y * this._spacingY + this._hexSize\n    ];\n    if (this._options.transpose) { px.reverse(); }\n\n    if (clearBefore) {\n        this._context.fillStyle = bg;\n        this._fill(px[0], px[1]);\n    }\n\n    if (!ch) { return; }\n\n    this._context.fillStyle = fg;\n\n    var chars = [].concat(ch);\n    for (let i = 0; i < chars.length; i++) {\n        this._context.fillText(chars[i], px[0], Math.ceil(px[1]));\n    }\n};\n\nROT.Display.Hex.prototype.computeSize = function(availWidth, availHeight) {\n    if (this._options.transpose) {\n        availWidth += availHeight;\n        availHeight = availWidth - availHeight;\n        availWidth -= availHeight;\n    }\n\n    var width = Math.floor(availWidth / this._spacingX) - 1;\n    var height = Math.floor((availHeight - 2 * this._hexSize) / this._spacingY + 1);\n    return [width, height];\n};\n\nROT.Display.Hex.prototype.computeFontSize = function(availWidth, availHeight) {\n    if (this._options.transpose) {\n        availWidth += availHeight;\n        availHeight = availWidth - availHeight;\n        availWidth -= availHeight;\n    }\n\n    var hexSizeWidth = 2 * availWidth / ((this._options.width + 1) * Math.sqrt(3)) - 1;\n    var hexSizeHeight = availHeight / (2 + 1.5 * (this._options.height - 1));\n    var hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n\n    /* compute char ratio */\n    var oldFont = this._context.font;\n    this._context.font = '100px ' + this._options.fontFamily;\n    var width = Math.ceil(this._context.measureText('W').width);\n    this._context.font = oldFont;\n    var ratio = width / 100;\n\n    hexSize = Math.floor(hexSize) + 1; /* closest larger hexSize */\n\n    /* FIXME char size computation does not respect transposed hexes */\n    var fontSize = 2 * hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n\n    /* closest smaller fontSize */\n    return Math.ceil(fontSize) - 1;\n};\n\nROT.Display.Hex.prototype.eventToPosition = function(x, y) {\n    var nodeSize;\n    if (this._options.transpose) {\n        x += y;\n        y = x - y;\n        x -= y;\n        nodeSize = this._context.canvas.width;\n    }\n    else {\n        nodeSize = this._context.canvas.height;\n    }\n    var size = nodeSize / this._options.height;\n    y = Math.floor(y / size);\n\n    if (y.mod(2)) { /* odd row */\n        x -= this._spacingX;\n        x = 1 + 2 * Math.floor(x / (2 * this._spacingX));\n    }\n    else {\n        x = 2 * Math.floor(x / (2 * this._spacingX));\n    }\n\n    return [x, y];\n};\n\n/*\n * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n */\nROT.Display.Hex.prototype._fill = function(cx, cy) {\n    var a = this._hexSize;\n    var b = this._options.border;\n\n    this._context.beginPath();\n\n    if (this._options.transpose) {\n        this._context.moveTo(cx - a + b,\tcy);\n        this._context.lineTo(cx - a / 2 + b,\tcy + this._spacingX - b);\n        this._context.lineTo(cx + a / 2 - b,\tcy + this._spacingX - b);\n        this._context.lineTo(cx + a - b,\tcy);\n        this._context.lineTo(cx + a / 2 - b,\tcy - this._spacingX + b);\n        this._context.lineTo(cx - a / 2 + b,\tcy - this._spacingX + b);\n        this._context.lineTo(cx - a + b,\tcy);\n    }\n    else {\n        this._context.moveTo(cx,\t\t\t\t\tcy - a + b);\n        this._context.lineTo(cx + this._spacingX - b,\tcy - a / 2 + b);\n        this._context.lineTo(cx + this._spacingX - b,\tcy + a / 2 - b);\n        this._context.lineTo(cx,\t\t\t\t\tcy + a - b);\n        this._context.lineTo(cx - this._spacingX + b,\tcy + a / 2 - b);\n        this._context.lineTo(cx - this._spacingX + b,\tcy - a / 2 + b);\n        this._context.lineTo(cx,\t\t\t\t\tcy - a + b);\n    }\n    this._context.fill();\n};\n/*\n * @class Tile backend\n * @private\n */\nROT.Display.Tile = function(context) {\n    ROT.Display.Rect.call(this, context);\n\n    this._options = {};\n    this._colorCanvas = document.createElement('canvas');\n};\nROT.Display.Tile.extend(ROT.Display.Rect);\n\nROT.Display.Tile.prototype.compute = function(options) {\n    this._options = options;\n    this._context.canvas.width = options.width * options.tileWidth;\n    this._context.canvas.height = options.height * options.tileHeight;\n    this._colorCanvas.width = options.tileWidth;\n    this._colorCanvas.height = options.tileHeight;\n};\n\nROT.Display.Tile.prototype.draw = function(data, clearBefore) {\n    var x = data[0];\n    var y = data[1];\n    var ch = data[2];\n    var fg = data[3];\n    var bg = data[4];\n\n    var tileWidth = this._options.tileWidth;\n    var tileHeight = this._options.tileHeight;\n\n    if (clearBefore) {\n        if (this._options.tileColorize) {\n            this._context.clearRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n        }\n        else {\n            this._context.fillStyle = bg;\n            this._context.fillRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n        }\n    }\n\n    if (!ch) { return; }\n\n    var chars = [].concat(ch);\n    for (let i = 0; i < chars.length; i++) {\n        var tile = this._options.tileMap[chars[i]];\n        if (!tile) { throw new Error(\"Char '\" + chars[i] + \"' not found in tileMap\"); }\n\n        if (this._options.tileColorize) { /* apply colorization */\n            var canvas = this._colorCanvas;\n            var context = canvas.getContext('2d');\n            context.clearRect(0, 0, tileWidth, tileHeight);\n\n            context.drawImage(\n                this._options.tileSet,\n                tile[0], tile[1], tileWidth, tileHeight,\n                0, 0, tileWidth, tileHeight\n            );\n\n            if (fg != 'transparent') {\n                context.fillStyle = fg;\n                context.globalCompositeOperation = 'source-atop';\n                context.fillRect(0, 0, tileWidth, tileHeight);\n            }\n\n            if (bg != 'transparent') {\n                context.fillStyle = bg;\n                context.globalCompositeOperation = 'destination-over';\n                context.fillRect(0, 0, tileWidth, tileHeight);\n            }\n\n            this._context.drawImage(canvas, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n\n        }\n        else { /* no colorizing, easy */\n            this._context.drawImage(\n                this._options.tileSet,\n                tile[0], tile[1], tileWidth, tileHeight,\n                x * tileWidth, y * tileHeight, tileWidth, tileHeight\n            );\n        }\n    }\n};\n\nROT.Display.Tile.prototype.computeSize = function(availWidth, availHeight) {\n    var width = Math.floor(availWidth / this._options.tileWidth);\n    var height = Math.floor(availHeight / this._options.tileHeight);\n    return [width, height];\n};\n\nROT.Display.Tile.prototype.computeFontSize = function(availWidth, availHeight) {\n    var width = Math.floor(availWidth / this._options.width);\n    var height = Math.floor(availHeight / this._options.height);\n    return [width, height];\n};\n\nROT.Display.Tile.prototype.eventToPosition = function(x, y) {\n    return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n};\n/*\n * @namespace\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nROT.RNG = {\n    /*\n     * @returns {number}\n     */\n    getSeed: function() {\n        return this._seed;\n    },\n\n    /*\n     * @param {number} seed Seed the number generator\n     */\n    setSeed: function(seed) {\n        seed = (seed < 1 ? 1 / seed : seed);\n\n        this._seed = seed;\n        this._s0 = (seed >>> 0) * this._frac;\n\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s1 = seed * this._frac;\n\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s2 = seed * this._frac;\n\n        this._c = 1;\n        return this;\n    },\n\n    /*\n     * @returns {float} Pseudorandom value [0,1), uniformly distributed\n     */\n    getUniform: function() {\n        var t = 2091639 * this._s0 + this._c * this._frac;\n        this._s0 = this._s1;\n        this._s1 = this._s2;\n        this._c = t | 0;\n        this._s2 = t - this._c;\n        return this._s2;\n    },\n\n    /*\n     * @param {int} lowerBound The lower end of the range to return a value from, inclusive\n     * @param {int} upperBound The upper end of the range to return a value from, inclusive\n     * @returns {int} Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n     */\n    getUniformInt: function(lowerBound, upperBound) {\n        var max = Math.max(lowerBound, upperBound);\n        var min = Math.min(lowerBound, upperBound);\n        return Math.floor(this.getUniform() * (max - min + 1)) + min;\n    },\n\n    /*\n     * @param {float} [mean=0] Mean value\n     * @param {float} [stddev=1] Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n     * @returns {float} A normally distributed pseudorandom value\n     */\n    getNormal: function(mean, stddev) {\n        var r;\n        do {\n            var u = 2 * this.getUniform() - 1;\n            var v = 2 * this.getUniform() - 1;\n            r = u * u + v * v;\n        } while (r > 1 || r === 0);\n\n        var gauss = u * Math.sqrt(-2 * Math.log(r) / r);\n        return (mean || 0) + gauss * (stddev || 1);\n    },\n\n    /*\n     * @returns {int} Pseudorandom value [1,100] inclusive, uniformly distributed\n     */\n    getPercentage: function() {\n        return 1 + Math.floor(this.getUniform() * 100);\n    },\n\n    /*\n     * @param {object} data key=whatever, value=weight (relative probability)\n     * @returns {string} whatever\n     */\n    getWeightedValue: function(data) {\n        var total = 0;\n\n        for (var id in data) {\n            total += data[id];\n        }\n        var random = this.getUniform() * total;\n\n        var part = 0;\n        for (var id in data) {\n            part += data[id];\n            if (random < part) { return id; }\n        }\n\n        // If by some floating-point annoyance we have\n        // random >= total, just return the last id.\n        return id;\n    },\n\n    /*\n     * Get RNG state. Useful for storing the state and re-setting it via setState.\n     * @returns {?} Internal state\n     */\n    getState: function() {\n        return [this._s0, this._s1, this._s2, this._c];\n    },\n\n    /*\n     * Set a previously retrieved state.\n     * @param {?} state\n     */\n    setState: function(state) {\n        this._s0 = state[0];\n        this._s1 = state[1];\n        this._s2 = state[2];\n        this._c = state[3];\n        return this;\n    },\n\n    /*\n     * Returns a cloned RNG\n     */\n    clone: function() {\n        var clone = Object.create(this);\n        clone.setState(this.getState());\n        return clone;\n    },\n\n    _s0: 0,\n    _s1: 0,\n    _s2: 0,\n    _c: 0,\n    _frac: 2.3283064365386963e-10 /* 2^-32 */\n};\n\n// ROT.RNG.setSeed(Date.now());\nROT.RNG.setSeed(0);\n\n/*\n * @class (Markov process)-based string generator.\n * Copied from a <a href=\"http://www.roguebasin.roguelikedevelopment.org/index.php?title=Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme\">RogueBasin article</a>.\n * Offers configurable order and prior.\n * @param {object} [options]\n * @param {bool} [options.words=false] Use word mode?\n * @param {int} [options.order=3]\n * @param {float} [options.prior=0.001]\n */\nROT.StringGenerator = function(options) {\n    this._options = {\n        words: false,\n        order: 3,\n        prior: 0.001\n    };\n    for (var p in options) { this._options[p] = options[p]; }\n\n    this._boundary = String.fromCharCode(0);\n    this._suffix = this._boundary;\n    this._prefix = [];\n    for (let i = 0; i < this._options.order; i++) { this._prefix.push(this._boundary); }\n\n    this._priorValues = {};\n    this._priorValues[this._boundary] = this._options.prior;\n\n    this._data = {};\n};\n\n/*\n * Remove all learning data\n */\nROT.StringGenerator.prototype.clear = function() {\n    this._data = {};\n    this._priorValues = {};\n};\n\n/*\n * @returns {string} Generated string\n */\nROT.StringGenerator.prototype.generate = function() {\n    var result = [this._sample(this._prefix)];\n    while (result[result.length - 1] != this._boundary) {\n        result.push(this._sample(result));\n    }\n    return this._join(result.slice(0, -1));\n};\n\n/*\n * Observe (learn) a string from a training set\n */\nROT.StringGenerator.prototype.observe = function(string) {\n    var tokens = this._split(string);\n\n    for (let i = 0; i < tokens.length; i++) {\n        this._priorValues[tokens[i]] = this._options.prior;\n    }\n\n    tokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */\n\n    for (i = this._options.order; i < tokens.length; i++) {\n        var context = tokens.slice(i - this._options.order, i);\n        var event = tokens[i];\n        for (let j = 0; j < context.length; j++) {\n            var subcontext = context.slice(j);\n            this._observeEvent(subcontext, event);\n        }\n    }\n};\n\nROT.StringGenerator.prototype.getStats = function() {\n    var parts = [];\n\n    var priorCount = 0;\n    for (var p in this._priorValues) { priorCount++; }\n    priorCount--; /* boundary */\n    parts.push('distinct samples: ' + priorCount);\n\n    var dataCount = 0;\n    var eventCount = 0;\n    for (var p in this._data) {\n        dataCount++;\n        for (var key in this._data[p]) {\n            eventCount++;\n        }\n    }\n    parts.push('dictionary size (contexts): ' + dataCount);\n    parts.push('dictionary size (events): ' + eventCount);\n\n    return parts.join(', ');\n};\n\n/*\n * @param {string}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._split = function(str) {\n    return str.split(this._options.words ? /\\s+/ : '');\n};\n\n/*\n * @param {string[]}\n * @returns {string}\n */\nROT.StringGenerator.prototype._join = function(arr) {\n    return arr.join(this._options.words ? ' ' : '');\n};\n\n/*\n * @param {string[]} context\n * @param {string} event\n */\nROT.StringGenerator.prototype._observeEvent = function(context, event) {\n    var key = this._join(context);\n    if (!(key in this._data)) { this._data[key] = {}; }\n    var data = this._data[key];\n\n    if (!(event in data)) { data[event] = 0; }\n    data[event]++;\n};\n\n/*\n * @param {string[]}\n * @returns {string}\n */\nROT.StringGenerator.prototype._sample = function(context) {\n    context = this._backoff(context);\n    var key = this._join(context);\n    var data = this._data[key];\n\n    var available = {};\n\n    if (this._options.prior) {\n        for (var event in this._priorValues) { available[event] = this._priorValues[event]; }\n        for (event in data) { available[event] += data[event]; }\n    }\n    else {\n        available = data;\n    }\n\n    return ROT.RNG.getWeightedValue(available);\n};\n\n/*\n * @param {string[]}\n * @returns {string[]}\n */\nROT.StringGenerator.prototype._backoff = function(context) {\n    if (context.length > this._options.order) {\n        context = context.slice(-this._options.order);\n    }\n    else if (context.length < this._options.order) {\n        context = this._prefix.slice(0, this._options.order - context.length).concat(context);\n    }\n\n    while (!(this._join(context) in this._data) && context.length > 0) { context = context.slice(1); }\n\n    return context;\n};\n/*\n * @class Generic event queue: stores events and retrieves them based on their time\n */\nROT.EventQueue = function() {\n    this._time = 0;\n    this._events = [];\n    this._eventTimes = [];\n};\n\n/*\n * @returns {number} Elapsed time\n */\nROT.EventQueue.prototype.getTime = function() {\n    return this._time;\n};\n\n/*\n * Clear all scheduled events\n */\nROT.EventQueue.prototype.clear = function() {\n    this._events = [];\n    this._eventTimes = [];\n    return this;\n};\n\nconst insertOne = function(array, index, item) {\n    let i = array.length;\n    while (i-- >= index) {\n        array[i + 1] = array[i];\n    }\n    array[index] = item;\n    return array;\n};\n\n/*\n * @param {?} event\n * @param {number} time\n */\nROT.EventQueue.prototype.add = function(event, time) {\n    var index = this._events.length;\n    for (let i = 0; i < this._eventTimes.length; i++) {\n        if (this._eventTimes[i] > time) {\n            index = i;\n            break;\n        }\n    }\n\n    insertOne(this._events, index, event);\n    // this._events.splice(index, 0, event);\n    // this._eventTimes.splice(index, 0, time);\n    insertOne(this._eventTimes, index, time);\n};\n\n/*\n * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n * @returns {? || null} The event previously added by addEvent, null if no event available\n */\nROT.EventQueue.prototype.get = function() {\n    if (!this._events.length) { return null; }\n\n    // var time = this._eventTimes.splice(0, 1)[0];\n    var time = this._eventTimes.shift();\n    if (time > 0) { /* advance */\n        this._time += time;\n        for (let i = 0; i < this._eventTimes.length; i++) { this._eventTimes[i] -= time; }\n    }\n\n    // return this._events.splice(0, 1)[0];\n    return this._events.shift();\n};\n\n/*\n * Remove an event from the queue\n * @param {?} event\n * @returns {bool} success?\n */\nROT.EventQueue.prototype.remove = function(event) {\n    var index = this._events.indexOf(event);\n    if (index === -1) { return false; }\n    this._remove(index);\n    return true;\n};\n\nconst spliceOne = function(arr, index) {\n    const len = arr.length;\n    if (!len) {return;}\n    while (index < len) {\n        arr[index] = arr[index+1];\n        index++;\n    }\n    arr.length--;\n};\n\n/*\n * Remove an event from the queue\n * @param {int} index\n */\nROT.EventQueue.prototype._remove = function(index) {\n    // this._events.splice(index, 1);\n    // this._eventTimes.splice(index, 1);\n    spliceOne(this._events, index);\n    spliceOne(this._eventTimes, index);\n};\n/*\n * @class Abstract scheduler\n */\nROT.Scheduler = function() {\n    this._queue = new ROT.EventQueue();\n    this._repeat = [];\n    this._current = null;\n};\n\n/*\n * @see ROT.EventQueue#getTime\n */\nROT.Scheduler.prototype.getTime = function() {\n    return this._queue.getTime();\n};\n\n/*\n * @param {?} item\n * @param {bool} repeat\n */\nROT.Scheduler.prototype.add = function(item, repeat) {\n    if (repeat) { this._repeat.push(item); }\n    return this;\n};\n\n/*\n * Clear all items\n */\nROT.Scheduler.prototype.clear = function() {\n    this._queue.clear();\n    this._repeat = [];\n    this._current = null;\n    return this;\n};\n\n/*\n * Remove a previously added item\n * @param {?} item\n * @returns {bool} successful?\n */\nROT.Scheduler.prototype.remove = function(item) {\n    var result = this._queue.remove(item);\n\n    var index = this._repeat.indexOf(item);\n    if (index != -1) { this._repeat.splice(index, 1); }\n\n    if (this._current === item) { this._current = null; }\n\n    return result;\n};\n\n/*\n * Schedule next item\n * @returns {?}\n */\nROT.Scheduler.prototype.next = function() {\n    this._current = this._queue.get();\n    return this._current;\n};\n/*\n * @class Simple fair scheduler (round-robin style)\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Simple = function() {\n    ROT.Scheduler.call(this);\n};\nROT.Scheduler.Simple.extend(ROT.Scheduler);\n\n/*\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Simple.prototype.add = function(item, repeat) {\n    this._queue.add(item, 0);\n    return ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/*\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Simple.prototype.next = function() {\n    if (this._current && this._repeat.indexOf(this._current) != -1) {\n        this._queue.add(this._current, 0);\n    }\n    return ROT.Scheduler.prototype.next.call(this);\n};\n/*\n * @class Speed-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Speed = function() {\n    ROT.Scheduler.call(this);\n};\nROT.Scheduler.Speed.extend(ROT.Scheduler);\n\n/*\n * @param {object} item anything with \"getSpeed\" method\n * @param {bool} repeat\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Speed.prototype.add = function(item, repeat) {\n    this._queue.add(item, 1 / item.getSpeed());\n    return ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\n/*\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Speed.prototype.next = function() {\n    if (this._current && this._repeat.indexOf(this._current) != -1) {\n        this._queue.add(this._current, 1 / this._current.getSpeed());\n    }\n    return ROT.Scheduler.prototype.next.call(this);\n};\n/*\n * @class Action-based scheduler\n * @augments ROT.Scheduler\n */\nROT.Scheduler.Action = function() {\n    ROT.Scheduler.call(this);\n    this._defaultDuration = 1; /* for newly added */\n    this._duration = this._defaultDuration; /* for this._current */\n};\nROT.Scheduler.Action.extend(ROT.Scheduler);\n\n/*\n * @param {object} item\n * @param {bool} repeat\n * @param {number} [time=1]\n * @see ROT.Scheduler#add\n */\nROT.Scheduler.Action.prototype.add = function(item, repeat, time) {\n    this._queue.add(item, time || this._defaultDuration);\n    return ROT.Scheduler.prototype.add.call(this, item, repeat);\n};\n\nROT.Scheduler.Action.prototype.clear = function() {\n    this._duration = this._defaultDuration;\n    return ROT.Scheduler.prototype.clear.call(this);\n};\n\nROT.Scheduler.Action.prototype.remove = function(item) {\n    if (item === this._current) { this._duration = this._defaultDuration; }\n    return ROT.Scheduler.prototype.remove.call(this, item);\n};\n\n/*\n * @see ROT.Scheduler#next\n */\nROT.Scheduler.Action.prototype.next = function() {\n    if (this._current && this._repeat.indexOf(this._current) != -1) {\n        this._queue.add(this._current, this._duration || this._defaultDuration);\n        this._duration = this._defaultDuration;\n    }\n    return ROT.Scheduler.prototype.next.call(this);\n};\n\n/*\n * Set duration for the active item\n */\nROT.Scheduler.Action.prototype.setDuration = function(time) {\n    if (this._current) { this._duration = time; }\n    return this;\n};\n/*\n * @class Asynchronous main loop\n * @param {ROT.Scheduler} scheduler\n */\nROT.Engine = function(scheduler) {\n    this._scheduler = scheduler;\n    this._lock = 1;\n};\n\n/*\n * Start the main loop. When this call returns, the loop is locked.\n */\nROT.Engine.prototype.start = function() {\n    return this.unlock();\n};\n\n/*\n * Interrupt the engine by an asynchronous action\n */\nROT.Engine.prototype.lock = function() {\n    this._lock++;\n    return this;\n};\n\n/*\n * Resume execution (paused by a previous lock)\n */\nROT.Engine.prototype.unlock = function() {\n    if (!this._lock) { throw new Error('Cannot unlock unlocked engine'); }\n    this._lock--;\n\n    while (!this._lock) {\n        var actor = this._scheduler.next();\n        if (!actor) { return this.lock(); } /* no actors */\n        var result = actor.act();\n        if (result && result.then) { /* actor returned a \"thenable\", looks like a Promise */\n            this.lock();\n            result.then(this.unlock.bind(this));\n        }\n    }\n\n    return this;\n};\n/*\n * @class Base map generator\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n */\nROT.Map = function(width, height) {\n    this._width = width || ROT.DEFAULT_WIDTH;\n    this._height = height || ROT.DEFAULT_HEIGHT;\n};\n\nROT.Map.prototype.create = function(callback) {};\n\nROT.Map.prototype._fillMap = function(value) {\n    var map = [];\n    for (let i = 0; i < this._width; i++) {\n        map.push([]);\n        for (let j = 0; j < this._height; j++) { map[i].push(value); }\n    }\n    return map;\n};\n\nROT.Map.prototype.getCols = function() {\n    return this._width;\n};\n\nROT.Map.prototype.getRows = function() {\n    return this._height;\n};\n\nROT.Map.prototype.getCenterXY = function() {\n    return [\n        Math.floor(this._width / 2),\n        Math.floor(this._height / 2)\n    ];\n};\n\n/*\n * @class Simple empty rectangular room\n * @augments ROT.Map\n */\nROT.Map.Arena = function(width, height) {\n    ROT.Map.call(this, width, height);\n};\nROT.Map.Arena.extend(ROT.Map);\n\nROT.Map.Arena.prototype.create = function(callback) {\n    var w = this._width - 1;\n    var h = this._height - 1;\n    for (let i = 0; i <= w; i++) {\n        for (let j = 0; j <= h; j++) {\n            var empty = (i && j && i < w && j < h);\n            callback(i, j, empty ? 0 : 1);\n        }\n    }\n    return this;\n};\n/*\n * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method\n * @augments ROT.Map\n */\nROT.Map.DividedMaze = function(width, height) {\n    ROT.Map.call(this, width, height);\n    this._stack = [];\n};\nROT.Map.DividedMaze.extend(ROT.Map);\n\nROT.Map.DividedMaze.prototype.create = function(callback) {\n    var w = this._width;\n    var h = this._height;\n\n    this._map = [];\n\n    for (let i = 0; i < w; i++) {\n        this._map.push([]);\n        for (let j = 0; j < h; j++) {\n            var border = (i === 0 || j === 0 || i + 1 === w || j + 1 === h);\n            this._map[i].push(border ? 1 : 0);\n        }\n    }\n\n    this._stack = [\n        [1, 1, w - 2, h - 2]\n    ];\n    this._process();\n\n    for (let i = 0; i < w; i++) {\n        for (let j = 0; j < h; j++) {\n            callback(i, j, this._map[i][j]);\n        }\n    }\n    this._map = null;\n    return this;\n};\n\nROT.Map.DividedMaze.prototype._process = function() {\n    while (this._stack.length) {\n        var room = this._stack.shift(); /* [left, top, right, bottom] */\n        this._partitionRoom(room);\n    }\n};\n\nROT.Map.DividedMaze.prototype._partitionRoom = function(room) {\n    var availX = [];\n    var availY = [];\n\n    for (let i = room[0] + 1; i < room[2]; i++) {\n        var top = this._map[i][room[1] - 1];\n        var bottom = this._map[i][room[3] + 1];\n        if (top && bottom && !(i % 2)) { availX.push(i); }\n    }\n\n    for (let j = room[1] + 1; j < room[3]; j++) {\n        var left = this._map[room[0] - 1][j];\n        var right = this._map[room[2] + 1][j];\n        if (left && right && !(j % 2)) { availY.push(j); }\n    }\n\n    if (!availX.length || !availY.length) { return; }\n\n    var x = availX.random();\n    var y = availY.random();\n\n    this._map[x][y] = 1;\n\n    var walls = [];\n\n    var w = []; walls.push(w); /* left part */\n    for (let i = room[0]; i < x; i++) {\n        this._map[i][y] = 1;\n        w.push([i, y]);\n    }\n\n    var w = []; walls.push(w); /* right part */\n    for (let i = x + 1; i <= room[2]; i++) {\n        this._map[i][y] = 1;\n        w.push([i, y]);\n    }\n\n    var w = []; walls.push(w); /* top part */\n    for (let j = room[1]; j < y; j++) {\n        this._map[x][j] = 1;\n        w.push([x, j]);\n    }\n\n    var w = []; walls.push(w); /* bottom part */\n    for (let j = y + 1; j <= room[3]; j++) {\n        this._map[x][j] = 1;\n        w.push([x, j]);\n    }\n\n    var solid = walls.random();\n    for (let i = 0; i < walls.length; i++) {\n        var w = walls[i];\n        if (w === solid) { continue; }\n\n        var hole = w.random();\n        this._map[hole[0]][hole[1]] = 0;\n    }\n\n    this._stack.push([room[0], room[1], x - 1, y - 1]); /* left top */\n    this._stack.push([x + 1, room[1], room[2], y - 1]); /* right top */\n    this._stack.push([room[0], y + 1, x - 1, room[3]]); /* left bottom */\n    this._stack.push([x + 1, y + 1, room[2], room[3]]); /* right bottom */\n};\n/*\n * @class Icey's Maze generator\n * See http://www.roguebasin.roguelikedevelopment.org/index.php?title=Simple_maze for explanation\n * @augments ROT.Map\n */\nROT.Map.IceyMaze = function(width, height, regularity) {\n    ROT.Map.call(this, width, height);\n    this._regularity = regularity || 0;\n};\nROT.Map.IceyMaze.extend(ROT.Map);\n\nROT.Map.IceyMaze.prototype.create = function(callback) {\n    var width = this._width;\n    var height = this._height;\n\n    var map = this._fillMap(1);\n\n    width -= (width % 2 ? 1 : 2);\n    height -= (height % 2 ? 1 : 2);\n\n    var cx = 0;\n    var cy = 0;\n    var nx = 0;\n    var ny = 0;\n\n    var done = 0;\n    var blocked = false;\n    var dirs = [\n        [0, 0],\n        [0, 0],\n        [0, 0],\n        [0, 0]\n    ];\n    do {\n        cx = 1 + 2 * Math.floor(ROT.RNG.getUniform() * (width - 1) / 2);\n        cy = 1 + 2 * Math.floor(ROT.RNG.getUniform() * (height - 1) / 2);\n\n        if (!done) { map[cx][cy] = 0; }\n\n        if (!map[cx][cy]) {\n            this._randomize(dirs);\n            do {\n                if (Math.floor(ROT.RNG.getUniform() * (this._regularity + 1)) === 0) { this._randomize(dirs); }\n                blocked = true;\n                for (let i = 0; i < 4; i++) {\n                    nx = cx + dirs[i][0] * 2;\n                    ny = cy + dirs[i][1] * 2;\n                    if (this._isFree(map, nx, ny, width, height)) {\n                        map[nx][ny] = 0;\n                        map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\n\n                        cx = nx;\n                        cy = ny;\n                        blocked = false;\n                        done++;\n                        break;\n                    }\n                }\n            } while (!blocked);\n        }\n    } while (done + 1 < width * height / 4);\n\n    for (let i = 0; i < this._width; i++) {\n        for (let j = 0; j < this._height; j++) {\n            callback(i, j, map[i][j]);\n        }\n    }\n    this._map = null;\n    return this;\n};\n\nROT.Map.IceyMaze.prototype._randomize = function(dirs) {\n    for (let i = 0; i < 4; i++) {\n        dirs[i][0] = 0;\n        dirs[i][1] = 0;\n    }\n\n    switch (Math.floor(ROT.RNG.getUniform() * 4)) {\n        case 0:\n            dirs[0][0] = -1; dirs[1][0] = 1;\n            dirs[2][1] = -1; dirs[3][1] = 1;\n            break;\n        case 1:\n            dirs[3][0] = -1; dirs[2][0] = 1;\n            dirs[1][1] = -1; dirs[0][1] = 1;\n            break;\n        case 2:\n            dirs[2][0] = -1; dirs[3][0] = 1;\n            dirs[0][1] = -1; dirs[1][1] = 1;\n            break;\n        case 3:\n            dirs[1][0] = -1; dirs[0][0] = 1;\n            dirs[3][1] = -1; dirs[2][1] = 1;\n            break;\n    }\n};\n\nROT.Map.IceyMaze.prototype._isFree = function(map, x, y, width, height) {\n    if (x < 1 || y < 1 || x >= width || y >= height) { return false; }\n    return map[x][y];\n};\n/*\n * @class Maze generator - Eller's algorithm\n * See http://homepages.cwi.nl/~tromp/maze.html for explanation\n * @augments ROT.Map\n */\nROT.Map.EllerMaze = function(width, height) {\n    ROT.Map.call(this, width, height);\n};\nROT.Map.EllerMaze.extend(ROT.Map);\n\nROT.Map.EllerMaze.prototype.create = function(callback) {\n    var map = this._fillMap(1);\n    var w = Math.ceil((this._width - 2) / 2);\n\n    var rand = 9 / 24;\n\n    var L = [];\n    var R = [];\n\n    for (let i = 0; i < w; i++) {\n        L.push(i);\n        R.push(i);\n    }\n    L.push(w - 1); /* fake stop-block at the right side */\n\n    let lastJ = 0;\n    for (let j = 1; j + 3 < this._height; j += 2) {\n        /* one row */\n        for (let i = 0; i < w; i++) {\n            /* cell coords (will be always empty) */\n            var x = 2 * i + 1;\n            var y = j;\n            map[x][y] = 0;\n\n            /* right connection */\n            if (i != L[i + 1] && ROT.RNG.getUniform() > rand) {\n                this._addToList(i, L, R);\n                map[x + 1][y] = 0;\n            }\n\n            /* bottom connection */\n            if (i != L[i] && ROT.RNG.getUniform() > rand) {\n                /* remove connection */\n                this._removeFromList(i, L, R);\n            }\n            else {\n                /* create connection */\n                map[x][y + 1] = 0;\n            }\n        }\n        lastJ = j;\n    }\n\n    /* last row */\n    for (let i = 0; i < w; i++) {\n        /* cell coords (will be always empty) */\n        var x = 2 * i + 1;\n        var y = lastJ;\n        map[x][y] = 0;\n\n        /* right connection */\n        if (i != L[i + 1] && (i === L[i] || ROT.RNG.getUniform() > rand)) {\n            /* dig right also if the cell is separated, so it gets connected to the rest of maze */\n            this._addToList(i, L, R);\n            map[x + 1][y] = 0;\n        }\n\n        this._removeFromList(i, L, R);\n    }\n\n    for (let i = 0; i < this._width; i++) {\n        for (let j = 0; j < this._height; j++) {\n            callback(i, j, map[i][j]);\n        }\n    }\n\n    return this;\n};\n\n/*\n * Remove \"i\" from its list\n */\nROT.Map.EllerMaze.prototype._removeFromList = function(i, L, R) {\n    R[L[i]] = R[i];\n    L[R[i]] = L[i];\n    R[i] = i;\n    L[i] = i;\n};\n\n/*\n * Join lists with \"i\" and \"i+1\"\n */\nROT.Map.EllerMaze.prototype._addToList = function(i, L, R) {\n    R[L[i + 1]] = R[i];\n    L[R[i]] = L[i + 1];\n    R[i] = i + 1;\n    L[i + 1] = i;\n};\n/*\n * @class Cellular automaton map generator\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space\n * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive\n * @param {int} [options.topology] Topology 4 or 6 or 8\n */\nROT.Map.Cellular = function(width, height, options) {\n    ROT.Map.call(this, width, height);\n    this._options = {\n        born: [5, 6, 7, 8],\n        survive: [4, 5, 6, 7, 8],\n        topology: 8\n    };\n    this.setOptions(options);\n\n    this._dirs = ROT.DIRS[this._options.topology];\n    this._map = this._fillMap(0);\n};\nROT.Map.Cellular.extend(ROT.Map);\n\n/*\n * Fill the map with random values\n * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full\n */\nROT.Map.Cellular.prototype.randomize = function(probability) {\n    for (let i = 0; i < this._width; i++) {\n        for (let j = 0; j < this._height; j++) {\n            this._map[i][j] = (ROT.RNG.getUniform() < probability ? 1 : 0);\n        }\n    }\n    return this;\n};\n\n/*\n * Change options.\n * @see ROT.Map.Cellular\n */\nROT.Map.Cellular.prototype.setOptions = function(options) {\n    for (var p in options) { this._options[p] = options[p]; }\n};\n\nROT.Map.Cellular.prototype.set = function(x, y, value) {\n    this._map[x][y] = value;\n};\n\nROT.Map.Cellular.prototype.create = function(callback) {\n    var newMap = this._fillMap(0);\n    var born = this._options.born;\n    var survive = this._options.survive;\n\n\n    for (let j = 0; j < this._height; j++) {\n        var widthStep = 1;\n        var widthStart = 0;\n        if (this._options.topology === 6) {\n            widthStep = 2;\n            widthStart = j % 2;\n        }\n\n        for (let i = widthStart; i < this._width; i += widthStep) {\n\n            var cur = this._map[i][j];\n            var ncount = this._getNeighbors(i, j);\n\n            if (cur && survive.indexOf(ncount) != -1) { /* survive */\n                newMap[i][j] = 1;\n            }\n            else if (!cur && born.indexOf(ncount) != -1) { /* born */\n                newMap[i][j] = 1;\n            }\n        }\n    }\n\n    this._map = newMap;\n\n    this.serviceCallback(callback);\n};\n\nROT.Map.Cellular.prototype.serviceCallback = function(callback) {\n    if (!callback) { return; }\n\n    for (let j = 0; j < this._height; j++) {\n        var widthStep = 1;\n        var widthStart = 0;\n        if (this._options.topology === 6) {\n            widthStep = 2;\n            widthStart = j % 2;\n        }\n        for (let i = widthStart; i < this._width; i += widthStep) {\n            callback(i, j, this._map[i][j]);\n        }\n    }\n};\n\n/*\n * Get neighbor count at [i,j] in this._map\n */\nROT.Map.Cellular.prototype._getNeighbors = function(cx, cy) {\n    var result = 0;\n    for (let i = 0; i < this._dirs.length; i++) {\n        var dir = this._dirs[i];\n        var x = cx + dir[0];\n        var y = cy + dir[1];\n\n        if (x < 0 || x >= this._width || x < 0 || y >= this._width) { continue; }\n        result += (this._map[x][y] === 1 ? 1 : 0);\n    }\n\n    return result;\n};\n\n/*\n * Make sure every non-wall space is accessible.\n * @param {function} callback to call to display map when do\n * @param {int} value to consider empty space - defaults to 0\n * @param {function} callback to call when a new connection is made\n */\nROT.Map.Cellular.prototype.connect = function(callback, value, connectionCallback) {\n    if (!value) {value = 0;}\n\n    var allFreeSpace = [];\n    var notConnected = {};\n    // find all free space\n    for (let x = 0; x < this._width; x++) {\n        for (let y = 0; y < this._height; y++) {\n            if (this._freeSpace(x, y, value)) {\n                var p = [x, y];\n                notConnected[this._pointKey(p)] = p;\n                allFreeSpace.push([x, y]);\n            }\n        }\n    }\n    var start = allFreeSpace[ROT.RNG.getUniformInt(0, allFreeSpace.length - 1)];\n\n    var key = this._pointKey(start);\n    var connected = {};\n    connected[key] = start;\n    delete notConnected[key];\n\n    // find what's connected to the starting point\n    this._findConnected(connected, notConnected, [start], false, value);\n\n    while (Object.keys(notConnected).length > 0) {\n\n        // find two points from notConnected to connected\n        var p = this._getFromTo(connected, notConnected);\n        var from = p[0]; // notConnected\n        var to = p[1]; // connected\n\n        // find everything connected to the starting point\n        var local = {};\n        local[this._pointKey(from)] = from;\n        this._findConnected(local, notConnected, [from], true, value);\n\n        // connect to a connected square\n        this._tunnelToConnected(to, from, connected, notConnected, value, connectionCallback);\n\n        // now all of local is connected\n        for (var k in local) {\n            var pp = local[k];\n            this._map[pp[0]][pp[1]] = value;\n            connected[k] = pp;\n            delete notConnected[k];\n        }\n    }\n\n    this.serviceCallback(callback);\n};\n\n/*\n * Find random points to connect. Search for the closest point in the larger space.\n * This is to minimize the length of the passage while maintaining good performance.\n */\nROT.Map.Cellular.prototype._getFromTo = function(connected, notConnected) {\n    var from, to, d;\n    var connectedKeys = Object.keys(connected);\n    var notConnectedKeys = Object.keys(notConnected);\n    for (let i = 0; i < 5; i++) {\n        if (connectedKeys.length < notConnectedKeys.length) {\n            var keys = connectedKeys;\n            to = connected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n            from = this._getClosest(to, notConnected);\n        }\n        else {\n            var keys = notConnectedKeys;\n            from = notConnected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]];\n            to = this._getClosest(from, connected);\n        }\n        d = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\n        if (d < 64) {\n            break;\n        }\n    }\n    // console.log(\">>> connected=\" + to + \" notConnected=\" + from + \" dist=\" + d);\n    return [from, to];\n};\n\nROT.Map.Cellular.prototype._getClosest = function(point, space) {\n    var minPoint = null;\n    var minDist = null;\n    for (var k in space) {\n        var p = space[k];\n        var d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\n        if (minDist === null || d < minDist) {\n            minDist = d;\n            minPoint = p;\n        }\n    }\n    return minPoint;\n};\n\nROT.Map.Cellular.prototype._findConnected = function(connected, notConnected, stack, keepNotConnected, value) {\n    while (stack.length > 0) {\n        var p = stack.splice(0, 1)[0];\n        var tests = [\n            [p[0] + 1, p[1]],\n            [p[0] - 1, p[1]],\n            [p[0], p[1] + 1],\n            [p[0], p[1] - 1]\n        ];\n        for (let i = 0; i < tests.length; i++) {\n            var key = this._pointKey(tests[i]);\n            if (connected[key] === null && this._freeSpace(tests[i][0], tests[i][1], value)) {\n                connected[key] = tests[i];\n                if (!keepNotConnected) {\n                    delete notConnected[key];\n                }\n                stack.push(tests[i]);\n            }\n        }\n    }\n};\n\nROT.Map.Cellular.prototype._tunnelToConnected = function(to, from, connected, notConnected, value, connectionCallback) {\n    var key = this._pointKey(from);\n    var a, b;\n    if (from[0] < to[0]) {\n        a = from;\n        b = to;\n    }\n    else {\n        a = to;\n        b = from;\n    }\n    for (let xx = a[0]; xx <= b[0]; xx++) {\n        this._map[xx][a[1]] = value;\n        var p = [xx, a[1]];\n        var pkey = this._pointKey(p);\n        connected[pkey] = p;\n        delete notConnected[pkey];\n    }\n    if (connectionCallback && a[0] < b[0]) {\n        connectionCallback(a, [b[0], a[1]]);\n    }\n\n    // x is now fixed\n    var x = b[0];\n\n    if (from[1] < to[1]) {\n        a = from;\n        b = to;\n    }\n    else {\n        a = to;\n        b = from;\n    }\n    for (let yy = a[1]; yy < b[1]; yy++) {\n        this._map[x][yy] = value;\n        var p = [x, yy];\n        var pkey = this._pointKey(p);\n        connected[pkey] = p;\n        delete notConnected[pkey];\n    }\n    if (connectionCallback && a[1] < b[1]) {\n        connectionCallback([b[0], a[1]], [b[0], b[1]]);\n    }\n};\n\nROT.Map.Cellular.prototype._freeSpace = function(x, y, value) {\n    return x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] === value;\n};\n\nROT.Map.Cellular.prototype._pointKey = function(p) {\n    return p[0] + '.' + p[1];\n};\n\n/*\n * @class Dungeon map: has rooms and corridors\n * @augments ROT.Map\n */\nROT.Map.Dungeon = function(width, height) {\n    ROT.Map.call(this, width, height);\n    this._rooms = []; /* list of all rooms */\n    this._corridors = [];\n};\nROT.Map.Dungeon.extend(ROT.Map);\n\n/*\n * Get all generated rooms\n * @returns {ROT.Map.Feature.Room[]}\n */\nROT.Map.Dungeon.prototype.getRooms = function() {\n    return this._rooms;\n};\n\n/*\n * Get all generated corridors\n * @returns {ROT.Map.Feature.Corridor[]}\n */\nROT.Map.Dungeon.prototype.getCorridors = function() {\n    return this._corridors;\n};\n/*\n * @class Random dungeon generator using human-like digging patterns.\n * Heavily based on Mike Anderson's ideas from the \"Tyrant\" algo, mentioned at\n * http://www.roguebasin.roguelikedevelopment.org/index.php?title=Dungeon-Building_Algorithm.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Digger = function(width, height, options) {\n    ROT.Map.Dungeon.call(this, width, height);\n\n    this._options = {\n        roomWidth: [3, 9], /* room minimum and maximum width */\n        roomHeight: [3, 5], /* room minimum and maximum height */\n        corridorLength: [3, 10], /* corridor minimum and maximum length */\n        dugPercentage: 0.2, /* we stop after this percentage of level area has been dug out */\n        timeLimit: 1000 /* we stop after this much time has passed (msec) */\n    };\n    for (var p in options) { this._options[p] = options[p]; }\n\n    this._features = {\n        Room: 4,\n        Corridor: 4\n    };\n    this._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */\n    this._walls = {}; /* these are available for digging */\n\n    this._digCallback = this._digCallback.bind(this);\n    this._canBeDugCallback = this._canBeDugCallback.bind(this);\n    this._isWallCallback = this._isWallCallback.bind(this);\n    this._priorityWallCallback = this._priorityWallCallback.bind(this);\n};\nROT.Map.Digger.extend(ROT.Map.Dungeon);\n\n/*\n * Create a map\n * @see ROT.Map#create\n */\nROT.Map.Digger.prototype.create = function(callback) {\n    this._rooms = [];\n    this._map = this._fillMap(1);\n    this._walls = {};\n    this._dug = 0;\n\n    this._corridors = [];\n    var area = (this._width - 2) * (this._height - 2);\n\n    this._firstRoom();\n\n    var t1 = Date.now();\n\n    do {\n        var t2 = Date.now();\n        if (t2 - t1 > this._options.timeLimit) { break; }\n\n        /* find a good wall */\n        var wall = this._findWall();\n        if (!wall) { break; } /* no more walls */\n\n        var parts = wall.split(',');\n        var x = parseInt(parts[0]);\n        var y = parseInt(parts[1]);\n        var dir = this._getDiggingDirection(x, y);\n        if (!dir) { continue; } /* this wall is not suitable */\n\n        //\t\tconsole.log(\"wall\", x, y);\n\n        /* try adding a feature */\n        var featureAttempts = 0;\n        do {\n            featureAttempts++;\n            if (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */\n                // if (this._rooms.length + this._corridors.length === 2) {\n                // this._rooms[0].addDoor(x, y); } /* first room officially has doors */\n                this._removeSurroundingWalls(x, y);\n                this._removeSurroundingWalls(x - dir[0], y - dir[1]);\n                break;\n            }\n        } while (featureAttempts < this._featureAttempts);\n\n        var priorityWalls = 0;\n        for (var id in this._walls) {\n            if (this._walls[id] > 1) { priorityWalls++; }\n        }\n\n    } while (this._dug / area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */\n\n    this._addDoors();\n\n    if (callback) {\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n    }\n\n    this._walls = {};\n    this._map = null;\n\n    return this;\n};\n\nROT.Map.Digger.prototype._digCallback = function(x, y, value) {\n    if (value === 0 || value === 2) { /* empty */\n        this._map[x][y] = 0;\n        this._dug++;\n    }\n    else { /* wall */\n        this._walls[x + ',' + y] = 1;\n    }\n};\n\nROT.Map.Digger.prototype._isWallCallback = function(x, y) {\n    if (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n    return (this._map[x][y] === 1);\n};\n\nROT.Map.Digger.prototype._canBeDugCallback = function(x, y) {\n    if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) { return false; }\n    return (this._map[x][y] === 1);\n};\n\nROT.Map.Digger.prototype._priorityWallCallback = function(x, y) {\n    this._walls[x + ',' + y] = 2;\n};\n\nROT.Map.Digger.prototype._firstRoom = function() {\n    let room = this._startRoom;\n    if (!room) {\n        var cx = Math.floor(this._width / 2);\n        var cy = Math.floor(this._height / 2);\n        room = ROT.Map.Feature.Room.createRandomCenter(cx, cy, this._options);\n    }\n    this._rooms.push(room);\n    room.create(this._digCallback);\n    if (this._extraRooms) {\n        this._extraRooms.forEach(extraRoom => {\n            this._rooms.push(extraRoom);\n            extraRoom.create(this._digCallback);\n        });\n    }\n};\n\n/* Adds a starting room, which will be used as 1st room instead of the random\n * room. */\nROT.Map.Digger.prototype.startRoom = function(room) {\n    this._startRoom = room;\n};\n\n/* Adds extra rooms into the level. Does not check for overlapping with 1st\n * room. */\nROT.Map.Digger.prototype.addRoom = function(room) {\n    if (!this._startRoom) {\n        this._startRoom = room;\n    }\n    else {\n        if (!this._extraRooms) {this._extraRooms = [];}\n        this._extraRooms.push(room);\n    }\n};\n\n/*\n * Get a suitable wall\n */\nROT.Map.Digger.prototype._findWall = function() {\n    var prio1 = [];\n    var prio2 = [];\n    for (var id in this._walls) {\n        var prio = this._walls[id];\n        if (prio === 2) {\n            prio2.push(id);\n        }\n        else {\n            prio1.push(id);\n        }\n    }\n\n    var arr = (prio2.length ? prio2 : prio1);\n    if (!arr.length) { return null; } /* no walls :/ */\n\n    var id = arr.sort().random(); // sort to make deterministic\n    delete this._walls[id];\n\n    return id;\n};\n\n/*\n * Tries adding a feature\n * @returns {bool} was this a successful try?\n */\nROT.Map.Digger.prototype._tryFeature = function(x, y, dx, dy) {\n    var feature = ROT.RNG.getWeightedValue(this._features);\n    feature = ROT.Map.Feature[feature].createRandomAt(x, y, dx, dy, this._options);\n\n    if (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\n        //\t\tconsole.log(\"not valid\");\n        //\t\tfeature.debug();\n        return false;\n    }\n\n    feature.create(this._digCallback);\n    //\tfeature.debug();\n\n    if (feature instanceof ROT.Map.Feature.Room) { this._rooms.push(feature); }\n    if (feature instanceof ROT.Map.Feature.Corridor) {\n        feature.createPriorityWalls(this._priorityWallCallback);\n        this._corridors.push(feature);\n    }\n\n    return true;\n};\n\nROT.Map.Digger.prototype._removeSurroundingWalls = function(cx, cy) {\n    var deltas = ROT.DIRS[4];\n\n    for (let i = 0; i < deltas.length; i++) {\n        var delta = deltas[i];\n        var x = cx + delta[0];\n        var y = cy + delta[1];\n        delete this._walls[x + ',' + y];\n        var x = cx + 2 * delta[0];\n        var y = cy + 2 * delta[1];\n        delete this._walls[x + ',' + y];\n    }\n};\n\n/*\n * Returns vector in \"digging\" direction, or false, if this does not exist (or is not unique)\n */\nROT.Map.Digger.prototype._getDiggingDirection = function(cx, cy) {\n    if (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) { return null; }\n\n    var result = null;\n    var deltas = ROT.DIRS[4];\n\n    for (let i = 0; i < deltas.length; i++) {\n        var delta = deltas[i];\n        var x = cx + delta[0];\n        var y = cy + delta[1];\n\n        if (!this._map[x][y]) { /* there already is another empty neighbor! */\n            if (result) { return null; }\n            result = delta;\n        }\n    }\n\n    /* no empty neighbor */\n    if (!result) { return null; }\n\n    return [-result[0], -result[1]];\n};\n\n/*\n * Find empty spaces surrounding rooms, and apply doors.\n */\nROT.Map.Digger.prototype._addDoors = function() {\n    var data = this._map;\n    var isWallCallback = function(x, y) {\n        return (data[x][y] === 1);\n    };\n    for (let i = 0; i < this._rooms.length; i++ ) {\n        var room = this._rooms[i];\n        room.clearDoors();\n        room.addDoors(isWallCallback);\n    }\n};\n/*\n * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.\n * @augments ROT.Map.Dungeon\n */\nROT.Map.Uniform = function(width, height, options) {\n    ROT.Map.Dungeon.call(this, width, height);\n\n    this._options = {\n        roomWidth: [3, 9], /* room minimum and maximum width */\n        roomHeight: [3, 5], /* room minimum and maximum height */\n        roomDugPercentage: 0.1, /* we stop after this percentage of level area has been dug out by rooms */\n        timeLimit: 1000 /* we stop after this much time has passed (msec) */\n    };\n    for (var p in options) { this._options[p] = options[p]; }\n\n    this._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */\n    this._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */\n\n    this._connected = []; /* list of already connected rooms */\n    this._unconnected = []; /* list of remaining unconnected rooms */\n\n    this._digCallback = this._digCallback.bind(this);\n    this._canBeDugCallback = this._canBeDugCallback.bind(this);\n    this._isWallCallback = this._isWallCallback.bind(this);\n};\nROT.Map.Uniform.extend(ROT.Map.Dungeon);\n\n/*\n * Create a map. If the time limit has been hit, returns null.\n * @see ROT.Map#create\n */\nROT.Map.Uniform.prototype.create = function(callback) {\n    var t1 = Date.now();\n    while (1) {\n        var t2 = Date.now();\n        if (t2 - t1 > this._options.timeLimit) { return null; } /* time limit! */\n\n        this._map = this._fillMap(1);\n        this._dug = 0;\n        this._rooms = [];\n        this._unconnected = [];\n        this._generateRooms();\n\n        if (this._startRoom) {\n            this._rooms.push(this._startRoom);\n            this._startRoom.create(this._digCallback);\n        }\n        if (this._rooms.length < 2) { continue; }\n        if (this._generateCorridors()) { break; }\n    }\n\n    if (callback) {\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n    }\n\n    return this;\n};\n\nROT.Map.Uniform.prototype.startRoom = function(room) {\n    this._startRoom = room;\n};\n\n/*\n * Generates a suitable amount of rooms\n */\nROT.Map.Uniform.prototype._generateRooms = function() {\n    var w = this._width - 2;\n    var h = this._height - 2;\n\n    do {\n        var room = this._generateRoom();\n        /* achieved requested amount of free space */\n        if (this._dug / (w * h) > this._options.roomDugPercentage) { break; }\n    } while (room);\n\n    /* either enough rooms, or not able to generate more of them :) */\n};\n\n/*\n * Try to generate one room\n */\nROT.Map.Uniform.prototype._generateRoom = function() {\n    var count = 0;\n    while (count < this._roomAttempts) {\n        count++;\n\n        var room = ROT.Map.Feature.Room.createRandom(this._width, this._height, this._options);\n        if (!room.isValid(this._isWallCallback, this._canBeDugCallback)) { continue; }\n\n        room.create(this._digCallback);\n        this._rooms.push(room);\n        return room;\n    }\n\n    /* no room was generated in a given number of attempts */\n    return null;\n};\n\n/*\n * Generates connectors beween rooms\n * @returns {bool} success Was this attempt successfull?\n */\nROT.Map.Uniform.prototype._generateCorridors = function() {\n    var cnt = 0;\n    while (cnt < this._corridorAttempts) {\n        cnt++;\n        this._corridors = [];\n\n        /* dig rooms into a clear map */\n        this._map = this._fillMap(1);\n        for (let i = 0; i < this._rooms.length; i++) {\n            var room = this._rooms[i];\n            room.clearDoors();\n            room.create(this._digCallback);\n        }\n\n        this._unconnected = this._rooms.slice().randomize();\n        this._connected = [];\n        if (this._unconnected.length) { this._connected.push(this._unconnected.pop()); } /* first one is always connected */\n\n        while (1) {\n            /* 1. pick random connected room */\n            var connected = this._connected.random();\n\n            /* 2. find closest unconnected */\n            var room1 = this._closestRoom(this._unconnected, connected);\n\n            /* 3. connect it to closest connected */\n            var room2 = this._closestRoom(this._connected, room1);\n\n            var ok = this._connectRooms(room1, room2);\n            if (!ok) { break; } /* stop connecting, re-shuffle */\n\n            if (!this._unconnected.length) { return true; } /* done; no rooms remain */\n        }\n    }\n    return false;\n};\n\n/*\n * For a given room, find the closest one from the list\n */\nROT.Map.Uniform.prototype._closestRoom = function(rooms, room) {\n    var dist = Infinity;\n    var center = room.getCenter();\n    var result = null;\n\n    for (let i = 0; i < rooms.length; i++) {\n        var r = rooms[i];\n        var c = r.getCenter();\n        var dx = c[0] - center[0];\n        var dy = c[1] - center[1];\n        var d = dx * dx + dy * dy;\n\n        if (d < dist) {\n            dist = d;\n            result = r;\n        }\n    }\n\n    return result;\n};\n\nROT.Map.Uniform.prototype._connectRooms = function(room1, room2) {\n    /*\n        room1.debug();\n        room2.debug();\n        */\n\n    var center1 = room1.getCenter();\n    var center2 = room2.getCenter();\n\n    var diffX = center2[0] - center1[0];\n    var diffY = center2[1] - center1[1];\n\n    if (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */\n        var dirIndex1 = (diffY > 0 ? 2 : 0);\n        var dirIndex2 = (dirIndex1 + 2) % 4;\n        var min = room2.getLeft();\n        var max = room2.getRight();\n        var index = 0;\n    }\n    else { /* first try connecting east-west walls */\n        var dirIndex1 = (diffX > 0 ? 1 : 3);\n        var dirIndex2 = (dirIndex1 + 2) % 4;\n        var min = room2.getTop();\n        var max = room2.getBottom();\n        var index = 1;\n    }\n\n    var start = this._placeInWall(room1, dirIndex1); /* corridor will start here */\n    if (!start) { return false; }\n\n    if (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */\n        var end = start.slice();\n        var value = null;\n        switch (dirIndex2) {\n            case 0: value = room2.getTop() - 1; break;\n            case 1: value = room2.getRight() + 1; break;\n            case 2: value = room2.getBottom() + 1; break;\n            case 3: value = room2.getLeft() - 1; break;\n        }\n        end[(index + 1) % 2] = value;\n        this._digLine([start, end]);\n\n    }\n    else if (start[index] < min - 1 || start[index] > max + 1) { /* need to switch target wall (L-like) */\n\n        var diff = start[index] - center2[index];\n        switch (dirIndex2) {\n            case 0:\n            case 1:\tvar rotation = (diff < 0 ? 3 : 1); break;\n            case 2:\n            case 3:\tvar rotation = (diff < 0 ? 1 : 3); break;\n        }\n        dirIndex2 = (dirIndex2 + rotation) % 4;\n\n        var end = this._placeInWall(room2, dirIndex2);\n        if (!end) { return false; }\n\n        var mid = [0, 0];\n        mid[index] = start[index];\n        var index2 = (index + 1) % 2;\n        mid[index2] = end[index2];\n        this._digLine([start, mid, end]);\n\n    }\n    else { /* use current wall pair, but adjust the line in the middle (S-like) */\n\n        var index2 = (index + 1) % 2;\n        var end = this._placeInWall(room2, dirIndex2);\n        if (!end) { return false; }\n        var mid = Math.round((end[index2] + start[index2]) / 2);\n\n        var mid1 = [0, 0];\n        var mid2 = [0, 0];\n        mid1[index] = start[index];\n        mid1[index2] = mid;\n        mid2[index] = end[index];\n        mid2[index2] = mid;\n        this._digLine([start, mid1, mid2, end]);\n    }\n\n    room1.addDoor(start[0], start[1]);\n    room2.addDoor(end[0], end[1]);\n\n    var index = this._unconnected.indexOf(room1);\n    if (index != -1) {\n        this._unconnected.splice(index, 1);\n        this._connected.push(room1);\n    }\n\n    var index = this._unconnected.indexOf(room2);\n    if (index != -1) {\n        this._unconnected.splice(index, 1);\n        this._connected.push(room2);\n    }\n\n    return true;\n};\n\nROT.Map.Uniform.prototype._placeInWall = function(room, dirIndex) {\n    var start = [0, 0];\n    var dir = [0, 0];\n    var length = 0;\n\n    switch (dirIndex) {\n        case 0:\n            dir = [1, 0];\n            start = [room.getLeft(), room.getTop() - 1];\n            length = room.getRight() - room.getLeft() + 1;\n            break;\n        case 1:\n            dir = [0, 1];\n            start = [room.getRight() + 1, room.getTop()];\n            length = room.getBottom() - room.getTop() + 1;\n            break;\n        case 2:\n            dir = [1, 0];\n            start = [room.getLeft(), room.getBottom() + 1];\n            length = room.getRight() - room.getLeft() + 1;\n            break;\n        case 3:\n            dir = [0, 1];\n            start = [room.getLeft() - 1, room.getTop()];\n            length = room.getBottom() - room.getTop() + 1;\n            break;\n    }\n\n    var avail = [];\n    var lastBadIndex = -2;\n\n    for (let i = 0; i < length; i++) {\n        var x = start[0] + i * dir[0];\n        var y = start[1] + i * dir[1];\n        avail.push(null);\n\n        var isWall = (this._map[x][y] === 1);\n        if (isWall) {\n            if (lastBadIndex != i - 1) { avail[i] = [x, y]; }\n        }\n        else {\n            lastBadIndex = i;\n            if (i) { avail[i - 1] = null; }\n        }\n    }\n\n    for (let i = avail.length - 1; i >= 0; i--) {\n        if (!avail[i]) { avail.splice(i, 1); }\n    }\n    return (avail.length ? avail.random() : null);\n};\n\n/*\n * Dig a polyline.\n */\nROT.Map.Uniform.prototype._digLine = function(points) {\n    for (let i = 1; i < points.length; i++) {\n        var start = points[i - 1];\n        var end = points[i];\n        var corridor = new ROT.Map.Feature.Corridor(start[0], start[1], end[0], end[1]);\n        corridor.create(this._digCallback);\n        this._corridors.push(corridor);\n    }\n};\n\nROT.Map.Uniform.prototype._digCallback = function(x, y, value) {\n    this._map[x][y] = value;\n    if (value === 0) { this._dug++; }\n};\n\nROT.Map.Uniform.prototype._isWallCallback = function(x, y) {\n    if (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }\n    return (this._map[x][y] === 1);\n};\n\nROT.Map.Uniform.prototype._canBeDugCallback = function(x, y) {\n    if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) { return false; }\n    return (this._map[x][y] === 1);\n};\n\n/*\n * @author hyakugei\n * @class Dungeon generator which uses the \"orginal\" Rogue dungeon generation algorithm. See http://kuoi.com/~kamikaze/GameDesign/art07_rogue_dungeon.php\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.cellWidth=3] Number of cells to create on the horizontal (number of rooms horizontally)\n * @param {int[]} [options.cellHeight=3] Number of cells to create on the vertical (number of rooms vertically)\n * @param {int} [options.roomWidth] Room min and max width - normally set auto-magically via the constructor.\n * @param {int} [options.roomHeight] Room min and max height - normally set auto-magically via the constructor.\n */\nROT.Map.Rogue = function(width, height, options) {\n    ROT.Map.call(this, width, height);\n\n    this._options = {\n        cellWidth: 3,  // NOTE to self, these could probably work the same as the roomWidth/room Height values\n        cellHeight: 3  //     ie. as an array with min-max values for each direction....\n    };\n\n    for (var p in options) { this._options[p] = options[p]; }\n\n    /*\n    Set the room sizes according to the over-all width of the map,\n    and the cell sizes.\n    */\n\n    if (!this._options.hasOwnProperty('roomWidth')) {\n        this._options['roomWidth'] = this._calculateRoomSize(this._width, this._options['cellWidth']);\n    }\n    if (!this._options.hasOwnProperty('roomHeight')) {\n        this._options['roomHeight'] = this._calculateRoomSize(this._height, this._options['cellHeight']);\n    }\n\n};\n\nROT.Map.Rogue.extend(ROT.Map);\n\n/*\n * @see ROT.Map#create\n */\nROT.Map.Rogue.prototype.create = function(callback) {\n    this.map = this._fillMap(1);\n    this.rooms = [];\n    this.connectedCells = [];\n\n    this._initRooms();\n    this._connectRooms();\n    this._connectUnconnectedRooms();\n    this._createRandomRoomConnections();\n    this._createRooms();\n    this._createCorridors();\n\n    if (callback) {\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, this.map[i][j]);\n            }\n        }\n    }\n\n    return this;\n};\n\nROT.Map.Rogue.prototype._calculateRoomSize = function(size, cell) {\n    var max = Math.floor((size / cell) * 0.8);\n    var min = Math.floor((size / cell) * 0.25);\n    if (min < 2) {min = 2;}\n    if (max < 2) {max = 2;}\n    return [min, max];\n};\n\nROT.Map.Rogue.prototype._initRooms = function() {\n    // create rooms array. This is the \"grid\" list from the algo.\n    for (let i = 0; i < this._options.cellWidth; i++) {\n        this.rooms.push([]);\n        for (let j = 0; j < this._options.cellHeight; j++) {\n            this.rooms[i].push({x: 0, y: 0, width: 0, height: 0, connections: [], cellx: i, celly: j});\n        }\n    }\n};\n\nROT.Map.Rogue.prototype._connectRooms = function() {\n    // pick random starting grid\n    var cgx = ROT.RNG.getUniformInt(0, this._options.cellWidth - 1);\n    var cgy = ROT.RNG.getUniformInt(0, this._options.cellHeight - 1);\n\n    var idx;\n    var ncgx;\n    var ncgy;\n\n    var found = false;\n    var room;\n    var otherRoom;\n\n    // find  unconnected neighbour cells\n    do {\n\n        // var dirToCheck = [0,1,2,3,4,5,6,7];\n        var dirToCheck = [0, 2, 4, 6];\n        dirToCheck = dirToCheck.randomize();\n\n        do {\n            found = false;\n            idx = dirToCheck.pop();\n\n\n            ncgx = cgx + ROT.DIRS[8][idx][0];\n            ncgy = cgy + ROT.DIRS[8][idx][1];\n\n            if (ncgx < 0 || ncgx >= this._options.cellWidth) {continue;}\n            if (ncgy < 0 || ncgy >= this._options.cellHeight) {continue;}\n\n            room = this.rooms[cgx][cgy];\n\n            if (room['connections'].length > 0)\t\t\t{\n                // as long as this room doesn't already coonect to me, we are ok with it.\n                if (room['connections'][0][0] === ncgx &&\n                    room['connections'][0][1] === ncgy)\t\t\t\t{\n                    break;\n                }\n            }\n\n            otherRoom = this.rooms[ncgx][ncgy];\n\n            if (otherRoom['connections'].length === 0) {\n                otherRoom['connections'].push([cgx, cgy]);\n\n                this.connectedCells.push([ncgx, ncgy]);\n                cgx = ncgx;\n                cgy = ncgy;\n                found = true;\n            }\n\n        } while (dirToCheck.length > 0 && found === false);\n\n    } while (dirToCheck.length > 0);\n\n};\n\nROT.Map.Rogue.prototype._connectUnconnectedRooms = function() {\n    // While there are unconnected rooms, try to connect them to a random connected neighbor\n    // (if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).\n    var cw = this._options.cellWidth;\n    var ch = this._options.cellHeight;\n\n    var randomConnectedCell;\n    this.connectedCells = this.connectedCells.randomize();\n    var room;\n    var otherRoom;\n    var validRoom;\n\n    for (let i = 0; i < this._options.cellWidth; i++) {\n        for (let j = 0; j < this._options.cellHeight; j++) {\n\n            room = this.rooms[i][j];\n\n            if (room['connections'].length === 0) {\n                var directions = [0, 2, 4, 6];\n                directions = directions.randomize();\n\n                var validRoom = false;\n\n                do {\n\n                    var dirIdx = directions.pop();\n                    var newI = i + ROT.DIRS[8][dirIdx][0];\n                    var newJ = j + ROT.DIRS[8][dirIdx][1];\n\n                    if (newI < 0 || newI >= cw ||\n                        newJ < 0 || newJ >= ch) {\n                        continue;\n                    }\n\n                    otherRoom = this.rooms[newI][newJ];\n\n                    validRoom = true;\n\n                    if (otherRoom['connections'].length === 0) {\n                        break;\n                    }\n\n                    for (let k = 0; k < otherRoom['connections'].length; k++) {\n                        if (otherRoom['connections'][k][0] === i &&\n                            otherRoom['connections'][k][1] === j) {\n                            validRoom = false;\n                            break;\n                        }\n                    }\n\n                    if (validRoom) {break;}\n\n                } while (directions.length);\n\n                if (validRoom) {\n                    room['connections'].push( [otherRoom['cellx'], otherRoom['celly']] );\n                }\n                else {\n                    console.log('-- Unable to connect room.');\n                }\n            }\n        }\n    }\n};\n\nROT.Map.Rogue.prototype._createRandomRoomConnections = function(connections) {\n    // Empty for now.\n};\n\n\nROT.Map.Rogue.prototype._createRooms = function() {\n    // Create Rooms\n\n    var w = this._width;\n    var h = this._height;\n\n    var cw = this._options.cellWidth;\n    var ch = this._options.cellHeight;\n\n    var cwp = Math.floor(this._width / cw);\n    var chp = Math.floor(this._height / ch);\n\n    var roomw;\n    var roomh;\n    var roomWidth = this._options['roomWidth'];\n    var roomHeight = this._options['roomHeight'];\n    var sx;\n    var sy;\n    var tx;\n    var ty;\n    var otherRoom;\n\n    for (let i = 0; i < cw; i++) {\n        for (let j = 0; j < ch; j++) {\n            sx = cwp * i;\n            sy = chp * j;\n\n            if (sx === 0) {sx = 1;}\n            if (sy === 0) {sy = 1;}\n\n            roomw = ROT.RNG.getUniformInt(roomWidth[0], roomWidth[1]);\n            roomh = ROT.RNG.getUniformInt(roomHeight[0], roomHeight[1]);\n\n            if (j > 0) {\n                otherRoom = this.rooms[i][j - 1];\n                while (sy - (otherRoom['y'] + otherRoom['height'] ) < 3) {\n                    sy++;\n                }\n            }\n\n            if (i > 0) {\n                otherRoom = this.rooms[i - 1][j];\n                while (sx - (otherRoom['x'] + otherRoom['width']) < 3) {\n                    sx++;\n                }\n            }\n\n            var sxOffset = Math.round(ROT.RNG.getUniformInt(0, cwp - roomw) / 2);\n            var syOffset = Math.round(ROT.RNG.getUniformInt(0, chp - roomh) / 2);\n\n            while (sx + sxOffset + roomw >= w) {\n                if (sxOffset) {\n                    sxOffset--;\n                }\n                else {\n                    roomw--;\n                }\n            }\n\n            while (sy + syOffset + roomh >= h) {\n                if (syOffset) {\n                    syOffset--;\n                }\n                else {\n                    roomh--;\n                }\n            }\n\n            sx = sx + sxOffset;\n            sy = sy + syOffset;\n\n            this.rooms[i][j]['x'] = sx;\n            this.rooms[i][j]['y'] = sy;\n            this.rooms[i][j]['width'] = roomw;\n            this.rooms[i][j]['height'] = roomh;\n\n            for (let ii = sx; ii < sx + roomw; ii++) {\n                for (let jj = sy; jj < sy + roomh; jj++) {\n                    this.map[ii][jj] = 0;\n                }\n            }\n        }\n    }\n};\n\nROT.Map.Rogue.prototype._getWallPosition = function(aRoom, aDirection) {\n    var rx;\n    var ry;\n    var door;\n\n    if (aDirection === 1 || aDirection === 3) {\n        rx = ROT.RNG.getUniformInt(aRoom['x'] + 1, aRoom['x'] + aRoom['width'] - 2);\n        if (aDirection === 1) {\n            ry = aRoom['y'] - 2;\n            door = ry + 1;\n        }\n        else {\n            ry = aRoom['y'] + aRoom['height'] + 1;\n            door = ry - 1;\n        }\n\n        this.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n    }\n    else if (aDirection === 2 || aDirection === 4) {\n        ry = ROT.RNG.getUniformInt(aRoom['y'] + 1, aRoom['y'] + aRoom['height'] - 2);\n        if (aDirection === 2) {\n            rx = aRoom['x'] + aRoom['width'] + 1;\n            door = rx - 1;\n        }\n        else {\n            rx = aRoom['x'] - 2;\n            door = rx + 1;\n        }\n\n        this.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n\n    }\n    return [rx, ry];\n};\n\n/* *\n * @param startPosition a 2 element array\n * @param endPosition a 2 element array\n */\nROT.Map.Rogue.prototype._drawCorridore = function(startPosition, endPosition) {\n    var xOffset = endPosition[0] - startPosition[0];\n    var yOffset = endPosition[1] - startPosition[1];\n\n    var xpos = startPosition[0];\n    var ypos = startPosition[1];\n\n    var tempDist;\n    var xDir;\n    var yDir;\n\n    var move; // 2 element array, element 0 is the direction, element 1 is the total value to move.\n    var moves = []; // a list of 2 element arrays\n\n    var xAbs = Math.abs(xOffset);\n    var yAbs = Math.abs(yOffset);\n\n    var percent = ROT.RNG.getUniform(); // used to split the move at different places along the long axis\n    var firstHalf = percent;\n    var secondHalf = 1 - percent;\n\n    xDir = xOffset > 0 ? 2 : 6;\n    yDir = yOffset > 0 ? 4 : 0;\n\n    if (xAbs < yAbs) {\n        // move firstHalf of the y offset\n        tempDist = Math.ceil(yAbs * firstHalf);\n        moves.push([yDir, tempDist]);\n        // move all the x offset\n        moves.push([xDir, xAbs]);\n        // move sendHalf of the  y offset\n        tempDist = Math.floor(yAbs * secondHalf);\n        moves.push([yDir, tempDist]);\n    }\n    else {\n        //  move firstHalf of the x offset\n        tempDist = Math.ceil(xAbs * firstHalf);\n        moves.push([xDir, tempDist]);\n        // move all the y offset\n        moves.push([yDir, yAbs]);\n        // move secondHalf of the x offset.\n        tempDist = Math.floor(xAbs * secondHalf);\n        moves.push([xDir, tempDist]);\n    }\n\n    this.map[xpos][ypos] = 0;\n\n    while (moves.length > 0) {\n        move = moves.pop();\n        while (move[1] > 0) {\n            xpos += ROT.DIRS[8][move[0]][0];\n            ypos += ROT.DIRS[8][move[0]][1];\n            this.map[xpos][ypos] = 0;\n            move[1] = move[1] - 1;\n        }\n    }\n};\n\nROT.Map.Rogue.prototype._createCorridors = function() {\n    // Draw Corridors between connected rooms\n\n    var cw = this._options.cellWidth;\n    var ch = this._options.cellHeight;\n    var room;\n    var connection;\n    var otherRoom;\n    var wall;\n    var otherWall;\n\n    for (let i = 0; i < cw; i++) {\n        for (let j = 0; j < ch; j++) {\n            room = this.rooms[i][j];\n\n            for (let k = 0; k < room['connections'].length; k++) {\n\n                connection = room['connections'][k];\n\n                otherRoom = this.rooms[connection[0]][connection[1]];\n\n                // figure out what wall our corridor will start one.\n                // figure out what wall our corridor will end on.\n                if (otherRoom['cellx'] > room['cellx'] ) {\n                    wall = 2;\n                    otherWall = 4;\n                }\n                else if (otherRoom['cellx'] < room['cellx'] ) {\n                    wall = 4;\n                    otherWall = 2;\n                }\n                else if (otherRoom['celly'] > room['celly']) {\n                    wall = 3;\n                    otherWall = 1;\n                }\n                else if (otherRoom['celly'] < room['celly']) {\n                    wall = 1;\n                    otherWall = 3;\n                }\n\n                this._drawCorridore(this._getWallPosition(room, wall),\n                    this._getWallPosition(otherRoom, otherWall));\n            }\n        }\n    }\n};\n/*\n * @class Dungeon feature; has own .create() method\n */\nROT.Map.Feature = function() {};\nROT.Map.Feature.prototype.isValid = function(canBeDugCallback) {};\nROT.Map.Feature.prototype.create = function(digCallback) {};\nROT.Map.Feature.prototype.debug = function() {};\nROT.Map.Feature.createRandomAt = function(x, y, dx, dy, options) {};\n\n/*\n * @class Room\n * @augments ROT.Map.Feature\n * @param {int} x1\n * @param {int} y1\n * @param {int} x2\n * @param {int} y2\n * @param {int} [doorX]\n * @param {int} [doorY]\n */\nROT.Map.Feature.Room = function(x1, y1, x2, y2, doorX, doorY) {\n    this._x1 = x1;\n    this._y1 = y1;\n    this._x2 = x2;\n    this._y2 = y2;\n    this._doors = {};\n    this._feats = {};\n    this._stairs = {};\n    if (arguments.length > 4) { this.addDoor(doorX, doorY); }\n};\nROT.Map.Feature.Room.extend(ROT.Map.Feature);\n\n/*\n * Room of random size, with a given doors and direction\n */\nROT.Map.Feature.Room.createRandomAt = function(x, y, dx, dy, options) {\n    var min = options.roomWidth[0];\n    var max = options.roomWidth[1];\n    var width = ROT.RNG.getUniformInt(min, max);\n\n    var min = options.roomHeight[0];\n    var max = options.roomHeight[1];\n    var height = ROT.RNG.getUniformInt(min, max);\n\n    if (dx === 1) { /* to the right */\n        var y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n        return new this(x + 1, y2, x + width, y2 + height - 1, x, y);\n    }\n\n    if (dx === -1) { /* to the left */\n        var y2 = y - Math.floor(ROT.RNG.getUniform() * height);\n        return new this(x - width, y2, x - 1, y2 + height - 1, x, y);\n    }\n\n    if (dy === 1) { /* to the bottom */\n        var x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n        return new this(x2, y + 1, x2 + width - 1, y + height, x, y);\n    }\n\n    if (dy === -1) { /* to the top */\n        var x2 = x - Math.floor(ROT.RNG.getUniform() * width);\n        return new this(x2, y - height, x2 + width - 1, y - 1, x, y);\n    }\n\n    throw new Error('dx or dy must be 1 or -1');\n};\n\n/*\n * Room of random size, positioned around center coords\n */\nROT.Map.Feature.Room.createRandomCenter = function(cx, cy, options) {\n    var min = options.roomWidth[0];\n    var max = options.roomWidth[1];\n    var width = ROT.RNG.getUniformInt(min, max);\n\n    var min = options.roomHeight[0];\n    var max = options.roomHeight[1];\n    var height = ROT.RNG.getUniformInt(min, max);\n\n    var x1 = cx - Math.floor(ROT.RNG.getUniform() * width);\n    var y1 = cy - Math.floor(ROT.RNG.getUniform() * height);\n    var x2 = x1 + width - 1;\n    var y2 = y1 + height - 1;\n\n    return new this(x1, y1, x2, y2);\n};\n\n/*\n * Room of specified size, positioned exactly at center coords\n */\nROT.Map.Feature.Room.createCenter = function(cx, cy, options) {\n    var min = options.roomWidth[0];\n    var max = options.roomWidth[1];\n    var width = ROT.RNG.getUniformInt(min, max);\n\n    var min = options.roomHeight[0];\n    var max = options.roomHeight[1];\n    var height = ROT.RNG.getUniformInt(min, max);\n\n    var x1 = cx - Math.floor(width / 2);\n    var y1 = cy - Math.floor(height / 2);\n    var x2 = x1 + width - 1;\n    var y2 = y1 + height - 1;\n\n    return new this(x1, y1, x2, y2);\n};\n\n/*\n * Room of random size within a given dimensions\n */\nROT.Map.Feature.Room.createRandom = function(availWidth, availHeight, options) {\n    var min = options.roomWidth[0];\n    var max = options.roomWidth[1];\n    var width = ROT.RNG.getUniformInt(min, max);\n\n    var min = options.roomHeight[0];\n    var max = options.roomHeight[1];\n    var height = ROT.RNG.getUniformInt(min, max);\n\n    var left = availWidth - width - 1;\n    var top = availHeight - height - 1;\n\n    var x1 = 1 + Math.floor(ROT.RNG.getUniform() * left);\n    var y1 = 1 + Math.floor(ROT.RNG.getUniform() * top);\n    var x2 = x1 + width - 1;\n    var y2 = y1 + height - 1;\n\n    return new this(x1, y1, x2, y2);\n};\n\nROT.Map.Feature.Room.prototype.addDoor = function(x, y) {\n    this._doors[x + ',' + y] = 1;\n    return this;\n};\n\nROT.Map.Feature.Room.prototype.addStairs = function(x, y, isDown) {\n    this._stairs[x + ',' + y] = isDown;\n    return this;\n};\n\nROT.Map.Feature.Room.prototype.hasStairs = function(x, y) {\n    return Object.keys(this._stairs).length > 0;\n};\n\nROT.Map.Feature.Room.prototype.hasStairsUp = function(x, y) {\n    const vals = Object.values(this._stairs);\n    for (let i = 0; i < vals.length; i++) {\n        if (vals[i] === false) {\n            return true;\n        }\n    }\n    return false;\n};\n\nROT.Map.Feature.Room.add = function(name, x, y) {\n    if (!this._feats[x + ',' + y]) {\n        this._feats[x + ',' + y] = [];\n    }\n    this._feats[x + ',' + y].push(name);\n};\n\n/*\n * @param {function}\n */\nROT.Map.Feature.Room.prototype.getDoors = function(callback) {\n    for (var key in this._doors) {\n        var parts = key.split(',');\n        callback(parseInt(parts[0]), parseInt(parts[1]));\n    }\n    return this;\n};\n\nROT.Map.Feature.Room.prototype.clearDoors = function() {\n    this._doors = {};\n    return this;\n};\n\nROT.Map.Feature.Room.prototype.addDoors = function(isWallCallback) {\n    var left = this._x1 - 1;\n    var right = this._x2 + 1;\n    var top = this._y1 - 1;\n    var bottom = this._y2 + 1;\n\n    for (let x = left; x <= right; x++) {\n        for (let y = top; y <= bottom; y++) {\n            if (x != left && x != right && y != top && y != bottom) { continue; }\n            if (isWallCallback(x, y)) { continue; }\n\n            this.addDoor(x, y);\n        }\n    }\n\n    return this;\n};\n\nROT.Map.Feature.Room.prototype.debug = function() {\n    console.log('room', this._x1, this._y1, this._x2, this._y2);\n};\n\nROT.Map.Feature.Room.prototype.isValid = function(isWallCallback, canBeDugCallback) {\n    var left = this._x1 - 1;\n    var right = this._x2 + 1;\n    var top = this._y1 - 1;\n    var bottom = this._y2 + 1;\n\n    for (let x = left; x <= right; x++) {\n        for (let y = top; y <= bottom; y++) {\n            if (x === left || x === right || y === top || y === bottom) {\n                if (!isWallCallback(x, y)) { return false; }\n            }\n            else if (!canBeDugCallback(x, y)) { return false; }\n        }\n    }\n\n    return true;\n};\n\n/*\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.\n */\nROT.Map.Feature.Room.prototype.create = function(digCallback) {\n    var left = this._x1 - 1;\n    var right = this._x2 + 1;\n    var top = this._y1 - 1;\n    var bottom = this._y2 + 1;\n\n    var value = 0;\n    for (let x = left; x <= right; x++) {\n        for (let y = top; y <= bottom; y++) {\n            if (x + ',' + y in this._doors) {\n                value = 2;\n            }\n            else if (x === left || x === right || y === top || y === bottom) {\n                value = 1;\n            }\n            else {\n                value = 0;\n            }\n            digCallback(x, y, value);\n        }\n    }\n};\n\nROT.Map.Feature.Room.prototype.getWidth = function() {\n    return this._x2 - this._x1;\n};\n\nROT.Map.Feature.Room.prototype.getHeight = function() {\n    return this._y2 - this._y1;\n};\n\nROT.Map.Feature.Room.prototype.getCorners = function() {\n    return {\n        nw: [this._x1, this._y1],\n        ne: [this._x2, this._y1],\n        sw: [this._x1, this._y2],\n        se: [this._x2, this._y2]\n    };\n};\n\nROT.Map.Feature.Room.prototype.isTerm = function() {\n    return this.getDoors().length === 1;\n};\n\nROT.Map.Feature.Room.prototype.getID = function() {\n    return this._roomID;\n};\n\nROT.Map.Feature.Room.prototype.setID = function(id) {\n    this._roomID = id;\n};\n\nROT.Map.Feature.Room.prototype.getCenter = function() {\n    return [Math.round((this._x1 + this._x2) / 2), Math.round((this._y1 + this._y2) / 2)];\n};\n\nROT.Map.Feature.Room.prototype.getLeft = function() {\n    return this._x1;\n};\n\nROT.Map.Feature.Room.prototype.getRight = function() {\n    return this._x2;\n};\n\nROT.Map.Feature.Room.prototype.getTop = function() {\n    return this._y1;\n};\n\nROT.Map.Feature.Room.prototype.getBottom = function() {\n    return this._y2;\n};\n\n/* tpoikela: Returns the bounding box of the room. */\nROT.Map.Feature.Room.prototype.getBbox = function() {\n    return {\n        ulx: this._x1, uly: this._y1,\n        lrx: this._x2, lry: this._y2\n    };\n};\n\nROT.Map.Feature.Room.prototype.getOuterBbox = function() {\n    return {\n        ulx: this._x1 - 1, uly: this._y1 - 1,\n        lrx: this._x2 + 1, lry: this._y2 + 1\n    };\n};\n\n/* Returns the inner bounding box (thus excluding walls of the room). */\nROT.Map.Feature.prototype.getInnerBbox = function(halo = 1) {\n    const ulx = this._x1 + halo;\n    const lrx = this._x2 - halo;\n    if (ulx > lrx) {return {};}\n    const uly = this._y1 + halo;\n    const lry = this._y2 - halo;\n    if (uly > lry) {return {};}\n    return {ulx, uly, lrx, lry};\n};\n\nROT.Map.Feature.Room.prototype.getAreaSize = function() {\n    return (this._x2 - this._x1) * (this._y2 - this._y1);\n};\n\n/*\n * @class Corridor\n * @augments ROT.Map.Feature\n * @param {int} startX\n * @param {int} startY\n * @param {int} endX\n * @param {int} endY\n */\nROT.Map.Feature.Corridor = function(startX, startY, endX, endY) {\n    this._startX = startX;\n    this._startY = startY;\n    this._endX = endX;\n    this._endY = endY;\n    this._endsWithAWall = true;\n};\nROT.Map.Feature.Corridor.extend(ROT.Map.Feature);\n\nROT.Map.Feature.Corridor.createRandomAt = function(x, y, dx, dy, options) {\n    var min = options.corridorLength[0];\n    var max = options.corridorLength[1];\n    var length = ROT.RNG.getUniformInt(min, max);\n\n    return new this(x, y, x + dx * length, y + dy * length);\n};\n\nROT.Map.Feature.Corridor.prototype.debug = function() {\n    console.log('corridor', this._startX, this._startY, this._endX, this._endY);\n};\n\nROT.Map.Feature.Corridor.prototype.isValid = function(isWallCallback, canBeDugCallback) {\n    var sx = this._startX;\n    var sy = this._startY;\n    var dx = this._endX - sx;\n    var dy = this._endY - sy;\n    var length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n\n    if (dx) { dx = dx / Math.abs(dx); }\n    if (dy) { dy = dy / Math.abs(dy); }\n    var nx = dy;\n    var ny = -dx;\n\n    var ok = true;\n    for (let i = 0; i < length; i++) {\n        var x = sx + i * dx;\n        var y = sy + i * dy;\n\n        if (!canBeDugCallback( x, y)) { ok = false; }\n        if (!isWallCallback(x + nx, y + ny)) { ok = false; }\n        if (!isWallCallback(x - nx, y - ny)) { ok = false; }\n\n        if (!ok) {\n            length = i;\n            this._endX = x - dx;\n            this._endY = y - dy;\n            break;\n        }\n    }\n\n    /*\n     * If the length degenerated, this corridor might be invalid\n     */\n\n    /* not supported */\n    if (length === 0) { return false; }\n\n    /* length 1 allowed only if the next space is empty */\n    if (length === 1 && isWallCallback(this._endX + dx, this._endY + dy)) { return false; }\n\n    /*\n     * We do not want the corridor to crash into a corner of a room;\n     * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.\n     *\n     * Situation:\n     * #######1\n     * .......?\n     * #######2\n     *\n     * The corridor was dug from left to right.\n     * 1, 2 - problematic corners, ? = N+1th cell (not dug)\n     */\n    var firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\n    var secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\n    this._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\n    if ((firstCornerBad || secondCornerBad) && this._endsWithAWall) { return false; }\n\n    return true;\n};\n\n/*\n * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.\n */\nROT.Map.Feature.Corridor.prototype.create = function(digCallback) {\n    var sx = this._startX;\n    var sy = this._startY;\n    var dx = this._endX - sx;\n    var dy = this._endY - sy;\n    var length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n\n    if (dx) { dx = dx / Math.abs(dx); }\n    if (dy) { dy = dy / Math.abs(dy); }\n    var nx = dy;\n    var ny = -dx;\n\n    for (let i = 0; i < length; i++) {\n        var x = sx + i * dx;\n        var y = sy + i * dy;\n        digCallback(x, y, 0);\n    }\n\n    return true;\n};\n\nROT.Map.Feature.Corridor.prototype.createPriorityWalls = function(priorityWallCallback) {\n    if (!this._endsWithAWall) { return; }\n\n    var sx = this._startX;\n    var sy = this._startY;\n\n    var dx = this._endX - sx;\n    var dy = this._endY - sy;\n    if (dx) { dx = dx / Math.abs(dx); }\n    if (dy) { dy = dy / Math.abs(dy); }\n    var nx = dy;\n    var ny = -dx;\n\n    priorityWallCallback(this._endX + dx, this._endY + dy);\n    priorityWallCallback(this._endX + nx, this._endY + ny);\n    priorityWallCallback(this._endX - nx, this._endY - ny);\n};\n/*\n * @class Base noise generator\n */\nROT.Noise = function() {\n};\n\nROT.Noise.prototype.get = function(x, y) {};\n/*\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\n\n/*\n * @class 2D simplex noise generator\n * @param {int} [gradients=256] Random gradients\n */\nROT.Noise.Simplex = function(gradients) {\n    ROT.Noise.call(this);\n\n    this._F2 = 0.5 * (Math.sqrt(3) - 1);\n    this._G2 = (3 - Math.sqrt(3)) / 6;\n\n    this._gradients = [\n        [ 0, -1],\n        [ 1, -1],\n        [ 1, 0],\n        [ 1, 1],\n        [ 0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1]\n    ];\n\n    var permutations = [];\n    var count = gradients || 256;\n    for (let i = 0; i < count; i++) { permutations.push(i); }\n    permutations = permutations.randomize();\n\n    this._perms = [];\n    this._indexes = [];\n\n    for (let i = 0; i < 2 * count; i++) {\n        this._perms.push(permutations[i % count]);\n        this._indexes.push(this._perms[i] % this._gradients.length);\n    }\n\n};\nROT.Noise.Simplex.extend(ROT.Noise);\n\nROT.Noise.Simplex.prototype.get = function(xin, yin) {\n    var perms = this._perms;\n    var indexes = this._indexes;\n    var count = perms.length / 2;\n    var G2 = this._G2;\n\n    var n0 = 0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * this._F2; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\n    var Y0 = j - t;\n    var x0 = xin - X0; // The x,y distances from the cell origin\n    var y0 = yin - Y0;\n\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n    }\n    else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        i1 = 0;\n        j1 = 1;\n    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n\n    // Work out the hashed gradient indices of the three simplex corners\n    var ii = i.mod(count);\n    var jj = j.mod(count);\n\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 >= 0) {\n        t0 *= t0;\n        gi = indexes[ii + perms[jj]];\n        var grad = this._gradients[gi];\n        n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 >= 0) {\n        t1 *= t1;\n        gi = indexes[ii + i1 + perms[jj + j1]];\n        var grad = this._gradients[gi];\n        n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 >= 0) {\n        t2 *= t2;\n        gi = indexes[ii + 1 + perms[jj + 1]];\n        var grad = this._gradients[gi];\n        n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n};\n/*\n * @class Abstract FOV algorithm\n * @param {function} lightPassesCallback Does the light pass through x,y?\n * @param {object} [options]\n * @param {int} [options.topology=8] 4/6/8\n */\nROT.FOV = function(lightPassesCallback, options) {\n    this._lightPasses = lightPassesCallback;\n    this._options = {\n        topology: 8\n    };\n    for (var p in options) { this._options[p] = options[p]; }\n};\n\n/*\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.prototype.compute = function(x, y, R, callback) {};\n\n/*\n * Return all neighbors in a concentric ring\n * @param {int} cx center-x\n * @param {int} cy center-y\n * @param {int} r range\n */\nROT.FOV.prototype._getCircle = function(cx, cy, r) {\n    var result = [];\n    var dirs, countFactor, startOffset;\n\n    switch (this._options.topology) {\n        case 4:\n            countFactor = 1;\n            startOffset = [0, 1];\n            dirs = [\n                ROT.DIRS[8][7],\n                ROT.DIRS[8][1],\n                ROT.DIRS[8][3],\n                ROT.DIRS[8][5]\n            ];\n            break;\n\n        case 6:\n            dirs = ROT.DIRS[6];\n            countFactor = 1;\n            startOffset = [-1, 1];\n            break;\n\n        case 8:\n            dirs = ROT.DIRS[4];\n            countFactor = 2;\n            startOffset = [-1, 1];\n            break;\n    }\n\n    /* starting neighbor */\n    var x = cx + startOffset[0] * r;\n    var y = cy + startOffset[1] * r;\n\n    /* circle */\n    for (let i = 0; i < dirs.length; i++) {\n        for (let j = 0; j < r * countFactor; j++) {\n            result.push([x, y]);\n            x += dirs[i][0];\n            y += dirs[i][1];\n\n        }\n    }\n\n    return result;\n};\n/*\n * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.\n * @augments ROT.FOV\n */\nROT.FOV.DiscreteShadowcasting = function(lightPassesCallback, options) {\n    ROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.DiscreteShadowcasting.extend(ROT.FOV);\n\n/*\n * @see ROT.FOV#compute\n */\nROT.FOV.DiscreteShadowcasting.prototype.compute = function(x, y, R, callback) {\n    var center = this._coords;\n    var map = this._map;\n\n    /* this place is always visible */\n    callback(x, y, 0, 1);\n\n    /* standing in a dark place. FIXME is this a good idea?  */\n    if (!this._lightPasses(x, y)) { return; }\n\n    /* start and end angles */\n    var DATA = [];\n\n    var A, B, cx, cy, blocks;\n\n    /* analyze surrounding cells in concentric rings, starting from the center */\n    for (let r = 1; r <= R; r++) {\n        var neighbors = this._getCircle(x, y, r);\n        var angle = 360 / neighbors.length;\n\n        for (let i = 0; i < neighbors.length; i++) {\n            cx = neighbors[i][0];\n            cy = neighbors[i][1];\n            A = angle * (i - 0.5);\n            B = A + angle;\n\n            blocks = !this._lightPasses(cx, cy);\n            if (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) { callback(cx, cy, r, 1); }\n\n            if (DATA.length === 2 && DATA[0] === 0 && DATA[1] === 360) { return; } /* cutoff? */\n\n        } /* for all cells in this ring */\n    } /* for all rings */\n};\n\n/*\n * @param {int} A start angle\n * @param {int} B end angle\n * @param {bool} blocks Does current cell block visibility?\n * @param {int[][]} DATA shadowed angle pairs\n */\nROT.FOV.DiscreteShadowcasting.prototype._visibleCoords = function(A, B, blocks, DATA) {\n    if (A < 0) {\n        var v1 = arguments.callee(0, B, blocks, DATA);\n        var v2 = arguments.callee(360 + A, 360, blocks, DATA);\n        return v1 || v2;\n    }\n\n    var index = 0;\n    while (index < DATA.length && DATA[index] < A) { index++; }\n\n    if (index === DATA.length) { /* completely new shadow */\n        if (blocks) { DATA.push(A, B); }\n        return true;\n    }\n\n    var count = 0;\n\n    if (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */\n        while (index < DATA.length && DATA[index] < B) {\n            index++;\n            count++;\n        }\n\n        if (count === 0) { return false; }\n\n        if (blocks) {\n            if (count % 2) {\n                DATA.splice(index - count, count, B);\n            }\n            else {\n                DATA.splice(index - count, count);\n            }\n        }\n\n        return true;\n\n    }\n    else { /* this shadow starts outside an existing shadow, or within a starting boundary */\n        while (index < DATA.length && DATA[index] < B) {\n            index++;\n            count++;\n        }\n\n        /* visible when outside an existing shadow, or when overlapping */\n        if (A === DATA[index - count] && count === 1) { return false; }\n\n        if (blocks) {\n            if (count % 2) {\n                DATA.splice(index - count, count, A);\n            }\n            else {\n                DATA.splice(index - count, count, A, B);\n            }\n        }\n\n        return true;\n    }\n};\n/*\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nROT.FOV.PreciseShadowcasting = function(lightPassesCallback, options) {\n    ROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.PreciseShadowcasting.extend(ROT.FOV);\n\n/*\n * @see ROT.FOV#compute\n */\nROT.FOV.PreciseShadowcasting.prototype.compute = function(x, y, R, callback) {\n    /* this place is always visible */\n    callback(x, y, 0, 1);\n\n    /* standing in a dark place. FIXME is this a good idea?  */\n    if (!this._lightPasses(x, y)) { return; }\n\n    /* list of all shadows */\n    var SHADOWS = [];\n\n    var cx, cy, blocks, A1, A2, visibility;\n\n    /* analyze surrounding cells in concentric rings, starting from the center */\n    for (let r = 1; r <= R; r++) {\n        var neighbors = this._getCircle(x, y, r);\n        var neighborCount = neighbors.length;\n\n        for (let i = 0; i < neighborCount; i++) {\n            cx = neighbors[i][0];\n            cy = neighbors[i][1];\n            /* shift half-an-angle backwards to maintain consistency of 0-th cells */\n            A1 = [i ? 2 * i - 1 : 2 * neighborCount - 1, 2 * neighborCount];\n            A2 = [2 * i + 1, 2 * neighborCount];\n\n            blocks = !this._lightPasses(cx, cy);\n            visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n            if (visibility) { callback(cx, cy, r, visibility); }\n\n            if (SHADOWS.length === 2 && SHADOWS[0][0] === 0 && SHADOWS[1][0] === SHADOWS[1][1]) { return; } /* cutoff? */\n\n        } /* for all cells in this ring */\n    } /* for all rings */\n};\n\n/*\n * @param {int[2]} A1 arc start\n * @param {int[2]} A2 arc end\n * @param {bool} blocks Does current arc block visibility?\n * @param {int[][]} SHADOWS list of active shadows\n */\nROT.FOV.PreciseShadowcasting.prototype._checkVisibility = function(A1, A2, blocks, SHADOWS) {\n    if (A1[0] > A2[0]) { /* split into two sub-arcs */\n        var v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n        var v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n        return (v1 + v2) / 2;\n    }\n\n    /* index1: first shadow >= A1 */\n    var index1 = 0, edge1 = false;\n    while (index1 < SHADOWS.length) {\n        var old = SHADOWS[index1];\n        var diff = old[0] * A1[1] - A1[0] * old[1];\n        if (diff >= 0) { /* old >= A1 */\n            if (diff === 0 && !(index1 % 2)) { edge1 = true; }\n            break;\n        }\n        index1++;\n    }\n\n    /* index2: last shadow <= A2 */\n    var index2 = SHADOWS.length, edge2 = false;\n    while (index2--) {\n        var old = SHADOWS[index2];\n        var diff = A2[0] * old[1] - old[0] * A2[1];\n        if (diff >= 0) { /* old <= A2 */\n            if (diff === 0 && (index2 % 2)) { edge2 = true; }\n            break;\n        }\n    }\n\n    var visible = true;\n    if (index1 === index2 && (edge1 || edge2)) {  /* subset of existing shadow, one of the edges match */\n        visible = false;\n    }\n    else if (edge1 && edge2 && index1 + 1 === index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n        visible = false;\n    }\n    else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n        visible = false;\n    }\n\n    if (!visible) { return 0; } /* fast case: not visible */\n\n    var visibleLength, P;\n\n    /* compute the length of visible arc, adjust list of shadows (if blocking) */\n    var remove = index2 - index1 + 1;\n    if (remove % 2) {\n        if (index1 % 2) { /* first edge within existing shadow, second outside */\n            var P = SHADOWS[index1];\n            visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\n            if (blocks) { SHADOWS.splice(index1, remove, A2); }\n        }\n        else { /* second edge within existing shadow, first outside */\n            var P = SHADOWS[index2];\n            visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\n            if (blocks) { SHADOWS.splice(index1, remove, A1); }\n        }\n    }\n    else if (index1 % 2) { /* both edges within existing shadows */\n        var P1 = SHADOWS[index1];\n        var P2 = SHADOWS[index2];\n        visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\n        if (blocks) { SHADOWS.splice(index1, remove); }\n    }\n    else { /* both edges outside existing shadows */\n        if (blocks) { SHADOWS.splice(index1, remove, A1, A2); }\n        return 1; /* whole arc visible! */\n    }\n\n    var arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\n\n    return visibleLength / arcLength;\n};\n/*\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nROT.FOV.RecursiveShadowcasting = function(lightPassesCallback, options) {\n    ROT.FOV.call(this, lightPassesCallback, options);\n};\nROT.FOV.RecursiveShadowcasting.extend(ROT.FOV);\n\n/* Octants used for translating recursive shadowcasting offsets */\nROT.FOV.RecursiveShadowcasting.OCTANTS = [\n    [-1, 0, 0, 1],\n    [ 0, -1, 1, 0],\n    [ 0, -1, -1, 0],\n    [-1, 0, 0, -1],\n    [ 1, 0, 0, -1],\n    [ 0, 1, -1, 0],\n    [ 0, 1, 1, 0],\n    [ 1, 0, 0, 1]\n];\n\n/*\n * Compute visibility for a 360-degree circle\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute = function(x, y, R, callback) {\n    // You can always see your own tile\n    callback(x, y, 0, 1);\n    for (let i = 0; i < ROT.FOV.RecursiveShadowcasting.OCTANTS.length; i++) {\n        this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[i], R, callback);\n    }\n};\n\n/*\n * Compute visibility for a 180-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute180 = function(x, y, R, dir, callback) {\n    // You can always see your own tile\n    callback(x, y, 0, 1);\n    var previousOctant = (dir - 1 + 8) % 8; // Need to retrieve the previous octant to render a full 180 degrees\n    var nextPreviousOctant = (dir - 2 + 8) % 8; // Need to retrieve the previous two octants to render a full 180 degrees\n    var nextOctant = (dir + 1 + 8) % 8; // Need to grab to next octant to render a full 180 degrees\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextPreviousOctant], R, callback);\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextOctant], R, callback);\n};\n\n/*\n * Compute visibility for a 90-degree arc\n * @param {int} x\n * @param {int} y\n * @param {int} R Maximum visibility radius\n * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype.compute90 = function(x, y, R, dir, callback) {\n    // You can always see your own tile\n    callback(x, y, 0, 1);\n    var previousOctant = (dir - 1 + 8) % 8; // Need to retrieve the previous octant to render a full 90 degrees\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);\n    this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);\n};\n\n/*\n * Render one octant (45-degree arc) of the viewshed\n * @param {int} x\n * @param {int} y\n * @param {int} octant Octant to be rendered\n * @param {int} R Maximum visibility radius\n * @param {function} callback\n */\nROT.FOV.RecursiveShadowcasting.prototype._renderOctant = function(x, y, octant, R, callback) {\n    // Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n    this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n};\n\n/*\n * Actually calculates the visibility\n * @param {int} startX The starting X coordinate\n * @param {int} startY The starting Y coordinate\n * @param {int} row The row to render\n * @param {float} visSlopeStart The slope to start at\n * @param {float} visSlopeEnd The slope to end at\n * @param {int} radius The radius to reach out to\n * @param {int} xx\n * @param {int} xy\n * @param {int} yx\n * @param {int} yy\n * @param {function} callback The callback to use when we hit a block that is visible\n */\nROT.FOV.RecursiveShadowcasting.prototype._castVisibility = function(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n    if (visSlopeStart < visSlopeEnd) { return; }\n    for (let i = row; i <= radius; i++) {\n        var dx = -i - 1;\n        var dy = -i;\n        var blocked = false;\n        var newStart = 0;\n\n        // 'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n        while (dx <= 0) {\n            dx += 1;\n\n            // Translate from relative coordinates to map coordinates\n            var mapX = startX + dx * xx + dy * xy;\n            var mapY = startY + dx * yx + dy * yy;\n\n            // Range of the row\n            var slopeStart = (dx - 0.5) / (dy + 0.5);\n            var slopeEnd = (dx + 0.5) / (dy - 0.5);\n\n            // Ignore if not yet at left edge of Octant\n            if (slopeEnd > visSlopeStart) { continue; }\n\n            // Done if past right edge\n            if (slopeStart < visSlopeEnd) { break; }\n\n            // If it's in range, it's visible\n            if ((dx * dx + dy * dy) < (radius * radius)) {\n                callback(mapX, mapY, i, 1);\n            }\n\n            if (!blocked) {\n                // If tile is a blocking tile, cast around it\n                if (!this._lightPasses(mapX, mapY) && i < radius) {\n                    blocked = true;\n                    this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n                    newStart = slopeEnd;\n                }\n            }\n            else {\n                // Keep narrowing if scanning across a block\n                if (!this._lightPasses(mapX, mapY)) {\n                    newStart = slopeEnd;\n                    continue;\n                }\n\n                // Block has ended\n                blocked = false;\n                visSlopeStart = newStart;\n            }\n        }\n        if (blocked) { break; }\n    }\n};\n/*\n * @namespace Color operations\n */\nROT.Color = {\n    fromString: function(str) {\n        var cached, r;\n        if (str in this._cache) {\n            cached = this._cache[str];\n        }\n        else {\n            if (str.charAt(0) === '#') { /* hex rgb */\n\n                var values = str.match(/[0-9a-f]/gi).map(function(x) { return parseInt(x, 16); });\n                if (values.length === 3) {\n                    cached = values.map(function(x) { return x * 17; });\n                }\n                else {\n                    for (let i = 0; i < 3; i++) {\n                        values[i + 1] += 16 * values[i];\n                        values.splice(i, 1);\n                    }\n                    cached = values;\n                }\n\n            }\n            else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { /* decimal rgb */\n                cached = r[1].split(/\\s*,\\s*/).map(function(x) { return parseInt(x); });\n            }\n            else { /* html name */\n                cached = [0, 0, 0];\n            }\n\n            this._cache[str] = cached;\n        }\n\n        return cached.slice();\n    },\n\n    /*\n     * Add two or more colors\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @returns {number[]}\n     */\n    add: function(color1, color2) {\n        var result = color1.slice();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 1; j < arguments.length; j++) {\n                result[i] += arguments[j][i];\n            }\n        }\n        return result;\n    },\n\n    /*\n     * Add two or more colors, MODIFIES FIRST ARGUMENT\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @returns {number[]}\n     */\n    add_: function(color1, color2) {\n        for (let i = 0; i < 3; i++) {\n            for (let j = 1; j < arguments.length; j++) {\n                color1[i] += arguments[j][i];\n            }\n        }\n        return color1;\n    },\n\n    /*\n     * Multiply (mix) two or more colors\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @returns {number[]}\n     */\n    multiply: function(color1, color2) {\n        var result = color1.slice();\n        for (let i = 0; i < 3; i++) {\n            for (let j = 1; j < arguments.length; j++) {\n                result[i] *= arguments[j][i] / 255;\n            }\n            result[i] = Math.round(result[i]);\n        }\n        return result;\n    },\n\n    /*\n     * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @returns {number[]}\n     */\n    multiply_: function(color1, color2) {\n        for (let i = 0; i < 3; i++) {\n            for (let j = 1; j < arguments.length; j++) {\n                color1[i] *= arguments[j][i] / 255;\n            }\n            color1[i] = Math.round(color1[i]);\n        }\n        return color1;\n    },\n\n    /*\n     * Interpolate (blend) two colors with a given factor\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @param {float} [factor=0.5] 0..1\n     * @returns {number[]}\n     */\n    interpolate: function(color1, color2, factor) {\n        if (arguments.length < 3) { factor = 0.5; }\n        var result = color1.slice();\n        for (let i = 0; i < 3; i++) {\n            result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n        }\n        return result;\n    },\n\n    /*\n     * Interpolate (blend) two colors with a given factor in HSL mode\n     * @param {number[]} color1\n     * @param {number[]} color2\n     * @param {float} [factor=0.5] 0..1\n     * @returns {number[]}\n     */\n    interpolateHSL: function(color1, color2, factor) {\n        if (arguments.length < 3) { factor = 0.5; }\n        var hsl1 = this.rgb2hsl(color1);\n        var hsl2 = this.rgb2hsl(color2);\n        for (let i = 0; i < 3; i++) {\n            hsl1[i] += factor * (hsl2[i] - hsl1[i]);\n        }\n        return this.hsl2rgb(hsl1);\n    },\n\n    /*\n     * Create a new random color based on this one\n     * @param {number[]} color\n     * @param {number[]} diff Set of standard deviations\n     * @returns {number[]}\n     */\n    randomize: function(color, diff) {\n        if (!(diff instanceof Array)) { diff = Math.round(ROT.RNG.getNormal(0, diff)); }\n        var result = color.slice();\n        for (let i = 0; i < 3; i++) {\n            result[i] += (diff instanceof Array ? Math.round(ROT.RNG.getNormal(0, diff[i])) : diff);\n        }\n        return result;\n    },\n\n    /*\n     * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n     * @param {number[]} color\n     * @returns {number[]}\n     */\n    rgb2hsl: function(color) {\n        var r = color[0] / 255;\n        var g = color[1] / 255;\n        var b = color[2] / 255;\n\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0; // achromatic\n        }\n        else {\n            var d = max - min;\n            s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n\n        return [h, s, l];\n    },\n\n    /*\n     * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n     * @param {number[]} color\n     * @returns {number[]}\n     */\n    hsl2rgb: function(color) {\n        var l = color[2];\n\n        if (color[1] === 0) {\n            l = Math.round(l * 255);\n            return [l, l, l];\n        }\n        else {\n            var hue2rgb = function(p, q, t) {\n                if (t < 0) {t += 1;}\n                if (t > 1) {t -= 1;}\n                if (t < 1 / 6) {return p + (q - p) * 6 * t;}\n                if (t < 1 / 2) {return q;}\n                if (t < 2 / 3) {return p + (q - p) * (2 / 3 - t) * 6;}\n                return p;\n            };\n\n            var s = color[1];\n            var q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n            var p = 2 * l - q;\n            var r = hue2rgb(p, q, color[0] + 1 / 3);\n            var g = hue2rgb(p, q, color[0]);\n            var b = hue2rgb(p, q, color[0] - 1 / 3);\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        }\n    },\n\n    toRGB: function(color) {\n        return 'rgb(' + this._clamp(color[0]) + ',' + this._clamp(color[1]) + ',' + this._clamp(color[2]) + ')';\n    },\n\n    toHex: function(color) {\n        var parts = [];\n        for (let i = 0; i < 3; i++) {\n            parts.push(this._clamp(color[i]).toString(16).lpad('0', 2));\n        }\n        return '#' + parts.join('');\n    },\n\n    _clamp: function(num) {\n        if (num < 0) {\n            return 0;\n        }\n        else if (num > 255) {\n            return 255;\n        }\n        else {\n            return num;\n        }\n    },\n\n    _cache: {\n        black: [0, 0, 0],\n        navy: [0, 0, 128],\n        darkblue: [0, 0, 139],\n        mediumblue: [0, 0, 205],\n        blue: [0, 0, 255],\n        darkgreen: [0, 100, 0],\n        green: [0, 128, 0],\n        teal: [0, 128, 128],\n        darkcyan: [0, 139, 139],\n        deepskyblue: [0, 191, 255],\n        darkturquoise: [0, 206, 209],\n        mediumspringgreen: [0, 250, 154],\n        lime: [0, 255, 0],\n        springgreen: [0, 255, 127],\n        aqua: [0, 255, 255],\n        cyan: [0, 255, 255],\n        midnightblue: [25, 25, 112],\n        dodgerblue: [30, 144, 255],\n        forestgreen: [34, 139, 34],\n        seagreen: [46, 139, 87],\n        darkslategray: [47, 79, 79],\n        darkslategrey: [47, 79, 79],\n        limegreen: [50, 205, 50],\n        mediumseagreen: [60, 179, 113],\n        turquoise: [64, 224, 208],\n        royalblue: [65, 105, 225],\n        steelblue: [70, 130, 180],\n        darkslateblue: [72, 61, 139],\n        mediumturquoise: [72, 209, 204],\n        indigo: [75, 0, 130],\n        darkolivegreen: [85, 107, 47],\n        cadetblue: [95, 158, 160],\n        cornflowerblue: [100, 149, 237],\n        mediumaquamarine: [102, 205, 170],\n        dimgray: [105, 105, 105],\n        dimgrey: [105, 105, 105],\n        slateblue: [106, 90, 205],\n        olivedrab: [107, 142, 35],\n        slategray: [112, 128, 144],\n        slategrey: [112, 128, 144],\n        lightslategray: [119, 136, 153],\n        lightslategrey: [119, 136, 153],\n        mediumslateblue: [123, 104, 238],\n        lawngreen: [124, 252, 0],\n        chartreuse: [127, 255, 0],\n        aquamarine: [127, 255, 212],\n        maroon: [128, 0, 0],\n        purple: [128, 0, 128],\n        olive: [128, 128, 0],\n        gray: [128, 128, 128],\n        grey: [128, 128, 128],\n        skyblue: [135, 206, 235],\n        lightskyblue: [135, 206, 250],\n        blueviolet: [138, 43, 226],\n        darkred: [139, 0, 0],\n        darkmagenta: [139, 0, 139],\n        saddlebrown: [139, 69, 19],\n        darkseagreen: [143, 188, 143],\n        lightgreen: [144, 238, 144],\n        mediumpurple: [147, 112, 216],\n        darkviolet: [148, 0, 211],\n        palegreen: [152, 251, 152],\n        darkorchid: [153, 50, 204],\n        yellowgreen: [154, 205, 50],\n        sienna: [160, 82, 45],\n        brown: [165, 42, 42],\n        darkgray: [169, 169, 169],\n        darkgrey: [169, 169, 169],\n        lightblue: [173, 216, 230],\n        greenyellow: [173, 255, 47],\n        paleturquoise: [175, 238, 238],\n        lightsteelblue: [176, 196, 222],\n        powderblue: [176, 224, 230],\n        firebrick: [178, 34, 34],\n        darkgoldenrod: [184, 134, 11],\n        mediumorchid: [186, 85, 211],\n        rosybrown: [188, 143, 143],\n        darkkhaki: [189, 183, 107],\n        silver: [192, 192, 192],\n        mediumvioletred: [199, 21, 133],\n        indianred: [205, 92, 92],\n        peru: [205, 133, 63],\n        chocolate: [210, 105, 30],\n        tan: [210, 180, 140],\n        lightgray: [211, 211, 211],\n        lightgrey: [211, 211, 211],\n        palevioletred: [216, 112, 147],\n        thistle: [216, 191, 216],\n        orchid: [218, 112, 214],\n        goldenrod: [218, 165, 32],\n        crimson: [220, 20, 60],\n        gainsboro: [220, 220, 220],\n        plum: [221, 160, 221],\n        burlywood: [222, 184, 135],\n        lightcyan: [224, 255, 255],\n        lavender: [230, 230, 250],\n        darksalmon: [233, 150, 122],\n        violet: [238, 130, 238],\n        palegoldenrod: [238, 232, 170],\n        lightcoral: [240, 128, 128],\n        khaki: [240, 230, 140],\n        aliceblue: [240, 248, 255],\n        honeydew: [240, 255, 240],\n        azure: [240, 255, 255],\n        sandybrown: [244, 164, 96],\n        wheat: [245, 222, 179],\n        beige: [245, 245, 220],\n        whitesmoke: [245, 245, 245],\n        mintcream: [245, 255, 250],\n        ghostwhite: [248, 248, 255],\n        salmon: [250, 128, 114],\n        antiquewhite: [250, 235, 215],\n        linen: [250, 240, 230],\n        lightgoldenrodyellow: [250, 250, 210],\n        oldlace: [253, 245, 230],\n        red: [255, 0, 0],\n        fuchsia: [255, 0, 255],\n        magenta: [255, 0, 255],\n        deeppink: [255, 20, 147],\n        orangered: [255, 69, 0],\n        tomato: [255, 99, 71],\n        hotpink: [255, 105, 180],\n        coral: [255, 127, 80],\n        darkorange: [255, 140, 0],\n        lightsalmon: [255, 160, 122],\n        orange: [255, 165, 0],\n        lightpink: [255, 182, 193],\n        pink: [255, 192, 203],\n        gold: [255, 215, 0],\n        peachpuff: [255, 218, 185],\n        navajowhite: [255, 222, 173],\n        moccasin: [255, 228, 181],\n        bisque: [255, 228, 196],\n        mistyrose: [255, 228, 225],\n        blanchedalmond: [255, 235, 205],\n        papayawhip: [255, 239, 213],\n        lavenderblush: [255, 240, 245],\n        seashell: [255, 245, 238],\n        cornsilk: [255, 248, 220],\n        lemonchiffon: [255, 250, 205],\n        floralwhite: [255, 250, 240],\n        snow: [255, 250, 250],\n        yellow: [255, 255, 0],\n        lightyellow: [255, 255, 224],\n        ivory: [255, 255, 240],\n        white: [255, 255, 255]\n    }\n};\n/*\n * @class Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.\n * @param {function} reflectivityCallback Callback to retrieve cell reflectivity (0..1)\n * @param {object} [options]\n * @param {int} [options.passes=1] Number of passes. 1 equals to simple FOV of all light sources, >1 means a *highly simplified* radiosity-like algorithm.\n * @param {int} [options.emissionThreshold=100] Cells with emissivity > threshold will be treated as light source in the next pass.\n * @param {int} [options.range=10] Max light range\n */\nROT.Lighting = function(reflectivityCallback, options) {\n    this._reflectivityCallback = reflectivityCallback;\n    this._options = {\n        passes: 1,\n        emissionThreshold: 100,\n        range: 10\n    };\n    this._fov = null;\n\n    this._lights = {};\n    this._reflectivityCache = {};\n    this._fovCache = {};\n\n    this.setOptions(options);\n};\n\n/*\n * Adjust options at runtime\n * @see ROT.Lighting\n * @param {object} [options]\n */\nROT.Lighting.prototype.setOptions = function(options) {\n    for (var p in options) { this._options[p] = options[p]; }\n    if (options && options.range) { this.reset(); }\n    return this;\n};\n\n/*\n * Set the used Field-Of-View algo\n * @param {ROT.FOV} fov\n */\nROT.Lighting.prototype.setFOV = function(fov) {\n    this._fov = fov;\n    this._fovCache = {};\n    return this;\n};\n\n/*\n * Set (or remove) a light source\n * @param {int} x\n * @param {int} y\n * @param {null || string || number[3]} color\n */\nROT.Lighting.prototype.setLight = function(x, y, color) {\n    var key = x + ',' + y;\n\n    if (color) {\n        this._lights[key] = (typeof (color) === 'string' ? ROT.Color.fromString(color) : color);\n    }\n    else {\n        delete this._lights[key];\n    }\n    return this;\n};\n\n/*\n * Remove all light sources\n */\nROT.Lighting.prototype.clearLights = function() {\n    this._lights = {};\n};\n\n/*\n * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.\n */\nROT.Lighting.prototype.reset = function() {\n    this._reflectivityCache = {};\n    this._fovCache = {};\n\n    return this;\n};\n\n/*\n * Compute the lighting\n * @param {function} lightingCallback Will be called with (x, y, color) for every lit cell\n */\nROT.Lighting.prototype.compute = function(lightingCallback) {\n    var doneCells = {};\n    var emittingCells = {};\n    var litCells = {};\n\n    for (var key in this._lights) { /* prepare emitters for first pass */\n        var light = this._lights[key];\n        emittingCells[key] = [0, 0, 0];\n        ROT.Color.add_(emittingCells[key], light);\n    }\n\n    for (let i = 0; i < this._options.passes; i++) { /* main loop */\n        this._emitLight(emittingCells, litCells, doneCells);\n        if (i + 1 === this._options.passes) { continue; } /* not for the last pass */\n        emittingCells = this._computeEmitters(litCells, doneCells);\n    }\n\n    for (var litKey in litCells) { /* let the user know what and how is lit */\n        var parts = litKey.split(',');\n        var x = parseInt(parts[0]);\n        var y = parseInt(parts[1]);\n        lightingCallback(x, y, litCells[litKey]);\n    }\n\n    return this;\n};\n\n/*\n * Compute one iteration from all emitting cells\n * @param {object} emittingCells These emit light\n * @param {object} litCells Add projected light to these\n * @param {object} doneCells These already emitted, forbid them from further calculations\n */\nROT.Lighting.prototype._emitLight = function(emittingCells, litCells, doneCells) {\n    for (var key in emittingCells) {\n        var parts = key.split(',');\n        var x = parseInt(parts[0]);\n        var y = parseInt(parts[1]);\n        this._emitLightFromCell(x, y, emittingCells[key], litCells);\n        doneCells[key] = 1;\n    }\n    return this;\n};\n\n/*\n * Prepare a list of emitters for next pass\n * @param {object} litCells\n * @param {object} doneCells\n * @returns {object}\n */\nROT.Lighting.prototype._computeEmitters = function(litCells, doneCells) {\n    var result = {};\n\n    for (var key in litCells) {\n        if (key in doneCells) { continue; } /* already emitted */\n\n        var color = litCells[key];\n\n        if (key in this._reflectivityCache) {\n            var reflectivity = this._reflectivityCache[key];\n        }\n        else {\n            var parts = key.split(',');\n            var x = parseInt(parts[0]);\n            var y = parseInt(parts[1]);\n            var reflectivity = this._reflectivityCallback(x, y);\n            this._reflectivityCache[key] = reflectivity;\n        }\n\n        if (reflectivity === 0) { continue; } /* will not reflect at all */\n\n        /* compute emission color */\n        var emission = [];\n        var intensity = 0;\n        for (let i = 0; i < 3; i++) {\n            var part = Math.round(color[i] * reflectivity);\n            emission[i] = part;\n            intensity += part;\n        }\n        if (intensity > this._options.emissionThreshold) { result[key] = emission; }\n    }\n\n    return result;\n};\n\n/*\n * Compute one iteration from one cell\n * @param {int} x\n * @param {int} y\n * @param {number[]} color\n * @param {object} litCells Cell data to by updated\n */\nROT.Lighting.prototype._emitLightFromCell = function(x, y, color, litCells) {\n    var key = x + ',' + y;\n    if (key in this._fovCache) {\n        var fov = this._fovCache[key];\n    }\n    else {\n        var fov = this._updateFOV(x, y);\n    }\n\n    for (var fovKey in fov) {\n        var formFactor = fov[fovKey];\n\n        if (fovKey in litCells) { /* already lit */\n            var result = litCells[fovKey];\n        }\n        else { /* newly lit */\n            var result = [0, 0, 0];\n            litCells[fovKey] = result;\n        }\n\n        for (let i = 0; i < 3; i++) { result[i] += Math.round(color[i] * formFactor); } /* add light color */\n    }\n\n    return this;\n};\n\n/*\n * Compute FOV (\"form factor\") for a potential light source at [x,y]\n * @param {int} x\n * @param {int} y\n * @returns {object}\n */\nROT.Lighting.prototype._updateFOV = function(x, y) {\n    var key1 = x + ',' + y;\n    var cache = {};\n    this._fovCache[key1] = cache;\n    var range = this._options.range;\n    var cb = function(x, y, r, vis) {\n        var key2 = x + ',' + y;\n        var formFactor = vis * (1 - r / range);\n        if (formFactor === 0) { return; }\n        cache[key2] = formFactor;\n    };\n    this._fov.compute(x, y, range, cb.bind(this));\n\n    return cache;\n};\n/*\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nROT.Path = function(toX, toY, passableCallback, options) {\n    this._toX = toX;\n    this._toY = toY;\n    this._fromX = null;\n    this._fromY = null;\n    this._passableCallback = passableCallback;\n    this._options = {\n        topology: 8\n    };\n    for (var p in options) { this._options[p] = options[p]; }\n\n    this._dirs = ROT.DIRS[this._options.topology];\n    if (this._options.topology === 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n        this._dirs = [\n            this._dirs[0],\n            this._dirs[2],\n            this._dirs[4],\n            this._dirs[6],\n            this._dirs[1],\n            this._dirs[3],\n            this._dirs[5],\n            this._dirs[7]\n        ];\n    }\n};\n\n/*\n * Compute a path from a given point\n * @param {int} fromX\n * @param {int} fromY\n * @param {function} callback Will be called for every path item with arguments \"x\" and \"y\"\n */\nROT.Path.prototype.compute = function(fromX, fromY, callback) {\n};\n\nROT.Path.prototype._getNeighbors = function(cx, cy) {\n    var result = [];\n    for (let i = 0; i < this._dirs.length; i++) {\n        var dir = this._dirs[i];\n        var x = cx + dir[0];\n        var y = cy + dir[1];\n\n        if (!this._passableCallback(x, y)) { continue; }\n        result.push([x, y]);\n    }\n\n    return result;\n};\n/*\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.Dijkstra = function(toX, toY, passableCallback, options) {\n    ROT.Path.call(this, toX, toY, passableCallback, options);\n\n    this._computed = {};\n    this._todo = [];\n    this._add(toX, toY, null);\n};\nROT.Path.Dijkstra.extend(ROT.Path);\n\n/*\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.Dijkstra.prototype.compute = function(fromX, fromY, callback) {\n    var key = fromX + ',' + fromY;\n    if (!(key in this._computed)) { this._compute(fromX, fromY); }\n    if (!(key in this._computed)) { return; }\n\n    var item = this._computed[key];\n    while (item) {\n        callback(item.x, item.y);\n        item = item.prev;\n    }\n};\n\n/*\n * Compute a non-cached value\n */\nROT.Path.Dijkstra.prototype._compute = function(fromX, fromY) {\n    while (this._todo.length) {\n        var item = this._todo.shift();\n        if (item.x === fromX && item.y === fromY) { return; }\n\n        var neighbors = this._getNeighbors(item.x, item.y);\n\n        for (let i = 0, nlen = neighbors.length; i < nlen; i++) {\n            var x = neighbors[i][0];\n            var y = neighbors[i][1];\n            var id = x + ',' + y;\n            if (id in this._computed) { continue; } /* already done */\n            this._add(id, x, y, item);\n        }\n    }\n};\n\nROT.Path.Dijkstra.prototype._add = function(id, x, y, prev) {\n    var obj = {\n        x: x,\n        y: y,\n        prev: prev\n    };\n    this._computed[id] = obj;\n    this._todo.push(obj);\n};\n/*\n * @class Simplified A* algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nROT.Path.AStar = function(toX, toY, passableCallback, options) {\n    ROT.Path.call(this, toX, toY, passableCallback, options);\n\n    this._todo = [];\n    this._done = {};\n    this._fromX = null;\n    this._fromY = null;\n};\nROT.Path.AStar.extend(ROT.Path);\n\n/*\n * Compute a path from a given point\n * @see ROT.Path#compute\n */\nROT.Path.AStar.prototype.compute = function(fromX, fromY, callback) {\n    this._todo = [];\n    this._done = {};\n    this._fromX = fromX;\n    this._fromY = fromY;\n    this._add(this._toX, this._toY, null);\n\n    // Terminates the search early if from point is surrounded by obstacles\n    const fromNeighbors = this._getNeighbors(fromX, fromY);\n    if (fromNeighbors.length === 0) {return;}\n\n    while (this._todo.length) {\n        const item = this._todo.shift();\n        if (item.x === fromX && item.y === fromY) { break; }\n\n        /* var id = item.x + ',' + item.y;\n\t\tif (id in this._done) { continue; }\n\t\tthis._done[id] = item;*/\n\n        const neighbors = this._getNeighbors(item.x, item.y);\n\n        for (let i = 0; i < neighbors.length; i++) {\n            const neighbor = neighbors[i];\n            const x = neighbor[0];\n            const y = neighbor[1];\n            const id = x + ',' + y;\n            if (id in this._done) { continue; }\n            this._add(x, y, item);\n        }\n    }\n\n    let item = this._done[fromX + ',' + fromY];\n    if (!item) { return; }\n\n    while (item) {\n        callback(item.x, item.y);\n        item = item.prev;\n    }\n};\n\nROT.Path.AStar.prototype._add = function(x, y, prev) {\n    var h = this._distance(x, y);\n    var obj = {\n        x: x,\n        y: y,\n        prev: prev,\n        g: (prev ? prev.g + 1 : 0),\n        h: h\n    };\n    this._done[x + ',' + y] = obj;\n\n    /* insert into priority queue */\n\n    var f = obj.g + obj.h;\n    for (let i = 0; i < this._todo.length; i++) {\n        var item = this._todo[i];\n        var itemF = item.g + item.h;\n        if (f < itemF || (f === itemF && h < item.h)) {\n            // this._todo.splice(i, 0, obj);\n            insertOne(this._todo, i, obj);\n            return;\n        }\n    }\n\n    this._todo.push(obj);\n};\n\nROT.Path.AStar.prototype._distance = function(x, y) {\n    return Math.max(Math.abs(x - this._fromX), Math.abs(y - this._fromY));\n};\n\nexport default ROT;\n","\nimport RG from '../rg';\n\nimport * as Mixin from '../mixin';\nimport {ChatTrainer, ChatQuest} from '../chat';\nimport {ComponentBase, Component} from './component.base';\nimport {EventPool} from '../eventpool';\nimport {Entity} from '../entity';\nimport {Dice} from '../dice';\nimport {Geometry} from '../geometry';\nimport {TCoord} from '../interfaces';\n\nconst POOL = EventPool.getPool();\n\nconst DataComponent = Component.DataComponent;\nconst UniqueDataComponent = Component.UniqueDataComponent;\nconst UniqueTransientDataComponent = Component.UniqueDataComponent;\nconst TransientDataComponent = Component.TransientDataComponent;\nconst TransientTagComponent = Component.TransientTagComponent;\nconst TagComponent = Component.TagComponent;\nconst UniqueTagComponent = Component.UniqueTagComponent;\n\nconst BaseProto = ComponentBase.prototype;\n\nconst NO_TYPE = Object.freeze('');\n\ntype Cell = import('../map.cell').Cell;\n\n/* Action component is added to all schedulable acting entities.*/\nexport const Action = UniqueTransientDataComponent('Action',\n    {energy: 0, active: false});\n\n\nAction.prototype.addEnergy = function(energy) {\n    this.energy += energy;\n};\n\nAction.prototype.resetEnergy = function() {this.energy = 0;};\n\nAction.prototype.enable = function() {\n    if (this.active === false) {\n        POOL.emitEvent(RG.EVT_ACT_COMP_ENABLED,\n            {actor: this.getEntity()});\n        this.active = true;\n    }\n    else {\n        const name = this.getEntity().getName();\n        const id = this.getEntity().getID();\n        const entInfo = `${name} ${id}`;\n    }\n};\n\nAction.prototype.disable = function() {\n    if (this.active === true) {\n        POOL.emitEvent(RG.EVT_ACT_COMP_DISABLED,\n            {actor: this.getEntity()});\n        this.active = false;\n    }\n};\n\nexport const Location = UniqueDataComponent('Location', {\n    x: -1, y: -1, level: null});\n\nLocation.prototype.getXY = function(): TCoord {return [this.x, this.y];};\nLocation.prototype.setXY = function(x, y): void {\n    this.x = x;\n    this.y = y;\n};\n\nLocation.prototype.unsetLevel = function() {\n    if (this.level) {\n        this.level = null;\n    }\n    else {\n        RG.err('Location', 'unsetLevel',\n            'Trying to unset already null level.');\n    }\n};\n\n/* Returns true if object is located at a position on a level.*/\nLocation.prototype.isLocated = function() {\n    return (this.x >= 0) && (this.y >= 0)\n        && (this.level !== null);\n};\n\n/* Returns true if object is located at a position on a level.*/\nLocation.prototype.getCell = function(): Cell | null {\n    if (this.level) {\n        return this.level.getMap().getCell(this.x, this.y);\n    }\n    return null;\n};\n\nLocation.prototype.toJSON = function() {\n    const obj: any = {\n        setType: this.getType(), setID: this.getID(),\n        setX: this.x, setY: this.y\n    };\n    if (this.level) {\n        obj.setLevel = RG.getObjRef('entity', this.level);\n    }\n    return obj;\n};\n\nexport const Typed = UniqueDataComponent('Typed', {\n    objType: NO_TYPE, propType: NO_TYPE\n});\n\nTyped.prototype._init = function(type, propType) {\n    this.objType = type;\n    this.propType = propType;\n};\n\n/* Component is added to all items. To check if an entity is item, has('Item')\n * is enough. */\nexport const Item = UniqueDataComponent('Item', {\n    value: 1, damageType: RG.DMG.BLUNT, count: 1\n});\n\nItem.prototype.incrCount = function(count) {\n    this.count += count;\n};\n\nItem.prototype.decrCount = function(count) {\n    this.count -= count;\n};\n\n/* Component which takes care of hunger and satiation. */\nexport const Hunger = UniqueDataComponent('Hunger',\n    {energy: 20000, maxEnergy: 20000, minEnergy: -5000});\n\nHunger.prototype.addEnergy = function(energy) {\n    this.energy += energy;\n    if (this.energy > this.maxEnergy) {\n        this.energy = this.maxEnergy;\n    }\n};\n\nHunger.prototype.decrEnergy = function(energy) {\n    this.energy -= energy;\n    if (this.energy < this.minEnergy) {\n        this.energy = this.minEnergy;\n    }\n};\n\nHunger.prototype.isStarving = function() {\n    return this.energy <= 0;\n};\n\nHunger.prototype.isFull = function() {\n    return this.energy === this.maxEnergy;\n};\n\n/*\n * Health component takes care of HP and such. */\nexport const Health = UniqueDataComponent('Health',\n    {HP: 10, maxHP: 10});\n\nHealth.prototype.addHP = function(hp) {\n    this.HP += hp;\n    if (this.HP > this.maxHP) {this.HP = this.maxHP;}\n};\n\nHealth.prototype.decrHP = function(hp) {this.HP -= hp;};\n\nHealth.prototype.isAlive = function() {\n    return this.HP > 0;\n};\n\nHealth.prototype.isDead = function() {return this.HP <= 0;};\n\nHealth.prototype.hpLost = function() {\n    return this.maxHP - this.HP;\n};\n\nHealth.prototype._init = function(hp) {\n    this.HP = hp;\n    this.maxHP = hp;\n};\n\n/* Tag component to mark Dead actors (different from Undead) */\nexport const Dead = UniqueTagComponent('Dead');\n\n/* Tag component for entities with physical body. */\nexport const Corporeal = UniqueTagComponent('Corporeal');\n\n/* Component used to pass damage information between systems. */\nexport const Damage = TransientDataComponent('Damage', {\n    damage: 0, weapon: null, damageType: '', damageCateg: '',\n    source: null, // Source of the damage (ie weapon)\n    sourceActor: null // Actor who did the action to cause damage\n});\n\nDamage.prototype._init = function(dmg, type) {\n    this.damage = dmg;\n    this.damageType = type;\n};\n\n/* In contrast to Damage (which is transient), DirectDamage can be\n * combined with Comp.AddOnHit to inflict additional damage\n * to an actor. */\nexport const DirectDamage = DataComponent('DirectDamage', {\n    damage: 0, damageType: '', damageCateg: '', prob: 1.0,\n    source: null\n});\n\n\nDirectDamage.prototype.toJSON = function() {\n    const obj = ComponentBase.prototype.toJSON.call(this);\n    if (this.source) {\n        obj.setSource = RG.getObjRef('entity', this.source);\n    }\n    else {\n        delete obj.setSource;\n    }\n    return obj;\n};\n\n/* Component to entities which can be damaged (but have no health. */\nexport const Damaged = UniqueDataComponent('Damaged',\n    {damageLevel: 0}\n);\n\n/* Added to broken items/elements. Prevents their use. */\nexport const Broken = UniqueTagComponent('Broken');\n\n/* Component to tag entities that block light from passing through. */\nexport const Impassable = UniqueDataComponent('Impassable', {\n    canFlyOver: true, canJumpOver: true, spellPasses: true\n});\n\nImpassable.prototype.setAllImpassable = function() {\n    this.canFlyOver = false;\n    this.spellPasses = false;\n};\n\n/* Component to tag entities that block light from passing through. */\nexport const Opaque = UniqueTagComponent('Opaque');\n\n/* Component used in entities gaining experience.*/\nexport const Experience = UniqueDataComponent('Experience',\n    {exp: 0, expLevel: 1, danger: 1});\n\n/* This component is added when entity gains experience. It is removed after\n* system evaluation and added to Experience component. */\nexport const ExpPoints = TransientDataComponent('ExpPoints',\n    {expPoints: null, skillPoints: null}\n);\n\nExpPoints.prototype._init = function(expPoints) {\n    this.expPoints = expPoints;\n    this.skills = {};\n};\n\nExpPoints.prototype.addSkillPoints = function(skill, pts) {\n    this.skills[skill] = pts;\n};\n\nExpPoints.prototype.addExpPoints = function(exp) {\n    this.expPoints += exp;\n};\n\n/* Combat component holds all combat-related information for actors. */\nexport const Combat = UniqueDataComponent('Combat', {\n    attack: 1, defense: 1, protection: 0, attackRange: 1, damageDie: null\n});\n\nCombat.prototype._init = function() {\n    this.damageDie = Dice.create('1d4');\n};\n\nCombat.prototype.rollDamage = function() {\n    return this.damageDie.roll();\n};\n\nCombat.prototype.setDamageDie = function(strOrDie) {\n    if (typeof strOrDie === 'string') {\n        this.damageDie = Dice.create(strOrDie);\n    }\n    else {\n        this.damageDie = strOrDie;\n    }\n};\n\nCombat.prototype.copy = function(rhs) {\n    BaseProto.copy.call(this, rhs);\n    this.damageDie = rhs.getDamageDie().clone();\n};\n\nCombat.prototype.toJSON = function() {\n    const obj = BaseProto.toJSON.call(this);\n    obj.setDamageDie = this.damageDie.toString();\n    return obj;\n};\n\n/* Modifiers for the Combat component.*/\nexport const CombatMods = DataComponent('CombatMods', {\n    attack: 0, defense: 0, protection: 0, attackRange: 0, damage: 0,\n    tag: ''\n});\n\n/* This component stores entity stats like speed, agility etc.*/\nexport const Stats = UniqueDataComponent('Stats', {\n    accuracy: 5, agility: 5, strength: 5,\n    willpower: 5, perception: 5, magic: 5, speed: 100\n});\n\nStats.prototype.clearValues = function() {\n    this.setAccuracy(0);\n    this.setAgility(0);\n    this.setStrength(0);\n    this.setWillpower(0);\n    this.setPerception(0);\n    this.setSpeed(0);\n    this.setMagic(0);\n};\n\n/* Convenience function for increase a stat. */\nStats.prototype.incrStat = function(statName, addValue) {\n    const setter = 'set' + statName.capitalize();\n    const getter = 'get' + statName.capitalize();\n    const currValue = this[getter]();\n    this[setter](currValue + addValue);\n};\n\nStats.prototype.toString = function() {\n    let result = '';\n    RG.GET_STATS.forEach((getter, i) => {\n        const value = this[getter]();\n        if (value !== 0) { // Show also neg. values\n            result += RG.STATS_ABBR[i] + ': ' + value;\n        }\n    });\n    return result;\n};\n\nStats.prototype.equals = function(rhs) {\n    let res = this.getType() === rhs.getType();\n    res = res && this.getAccuracy() === rhs.getAccuracy();\n    res = res && this.getAgility() === rhs.getAgility();\n    res = res && this.getStrength() === rhs.getStrength();\n    res = res && this.getWillpower() === rhs.getWillpower();\n    res = res && this.getSpeed() === rhs.getSpeed();\n    res = res && this.getPerception() === rhs.getPerception();\n    res = res && this.getMagic() === rhs.getMagic();\n    return res;\n};\n\n/* Stats modifier component. */\nexport const StatsMods = DataComponent('StatsMods', {\n    accuracy: 0, agility: 0, strength: 0,\n    willpower: 0, perception: 0, magic: 0, speed: 0,\n    tag: ''\n});\n\n/* Perception component holds data related to actor perception. */\nexport const Perception = UniqueDataComponent('Perception',\n    {FOVRange: RG.NPC_FOV_RANGE});\n\n/* Attack component is added to the actor when it attacks. Thus, source of the\n * attack is the entity having Attack component. */\nexport const Attack = TransientDataComponent('Attack', {target: null});\n\n/* Transient component added to a moving entity.*/\nexport const Movement = TransientDataComponent('Movement', {\n    x: 0, y: 0, level: null\n});\n\nMovement.prototype.setXY = function(x, y) {\n    this.x = x;\n    this.y = y;\n};\n\nMovement.prototype.getXY = function() {\n    return [this.x, this.y];\n};\n\nMovement.prototype._init = function(x, y, level) {\n    this.x = x;\n    this.y = y;\n    this.level = level;\n};\n\n/* Transient component representing a chat action between actors. */\nexport const Chat = TransientDataComponent('Chat', {args: null});\n\n/* Data component added to trainer actors. */\nexport const Trainer = UniqueDataComponent('Trainer', {\n    chatObj: null\n});\n\n// Hack to prevent serialisation of chatObj\ndelete Trainer.prototype.setChatObj;\n\nTrainer.prototype._init = function() {\n    this.chatObj = new ChatTrainer();\n\n    const _addCb = () => {\n      this.chatObj.setTrainer(this.getEntity());\n    };\n    this.addCallback('onAdd', _addCb);\n};\n\n/* Missile component is added to entities such as arrows and rocks\n * when they have been launched. */\nexport const Missile = TransientDataComponent('Missile', {\n    x: null, y: null, source: null, level: null,\n    flying: true,\n    targetX: null, targetY: null,\n    range: 0, attack: 0, damage: 0, path: null\n});\n\nMissile.prototype._init = function(source) {\n    this.source = source;\n    this.x = source.getX();\n    this.y = source.getY();\n    this.level = source.getLevel();\n    this.path = [];\n    this.pathIter = -1;\n};\n\nMissile.prototype.hasRange = function() {\n    return this.range > 0;\n};\n\nMissile.prototype.isFlying = function() {\n    return this.flying;\n};\n\nMissile.prototype.stopMissile = function() {\n    this.flying = false;\n};\n\nMissile.prototype.setTargetXY = function(x, y) {\n    this.path = Geometry.getBresenham(this.x, this.y, x, y);\n    this.targetX = x;\n    this.targetY = y;\n    if (this.path.length > 0) {this.pathIter = 0;}\n};\n\n/* Returns true if missile has reached its target map cell.*/\nMissile.prototype.inTarget = function() {\n    return this.x === this.targetX && this.y === this.targetY;\n};\n\nMissile.prototype.iteratorValid = function() {\n    return this.pathIter >= 0 && this.pathIter < this.path.length;\n};\n\nMissile.prototype.setValuesFromIterator = function() {\n    const coord = this.path[this.pathIter];\n    this.x = coord[0];\n    this.y = coord[1];\n};\n\n/* Resets the path iterator to the first x,y. */\nMissile.prototype.first = function() {\n    this.pathIter = 0;\n    this.setValuesFromIterator();\n    return [this.x, this.y];\n};\n\n/* Moves to next cell in missile's path. Returns null if path is finished.\n * */\nMissile.prototype.next = function() {\n    if (this.iteratorValid()) {\n        --this.range;\n        ++this.pathIter;\n        this.setValuesFromIterator();\n        return true;\n    }\n    return null;\n};\n\n/* Returns the prev cell in missile's path. Moves iterator backward. */\nMissile.prototype.prev = function() {\n    if (this.iteratorValid()) {\n        ++this.range;\n        --this.pathIter;\n        this.setValuesFromIterator();\n        return true;\n    }\n    return null;\n};\n\n/* This component holds loot that is dropped when given entity is destroyed.*/\nexport const Loot = function(lootEntity) {\n    ComponentBase.call(this, 'Loot');\n\n    // This will be dropped as loot\n    this._lootEntity = lootEntity;\n};\nRG.extend2(Loot, ComponentBase);\nComponent.Loot = Loot;\n\n/* Drops the loot to the given cell.*/\nLoot.prototype.dropLoot = function(cell) {\n    const level = this.getEntity().getLevel();\n    if (this._lootEntity.getPropType) {\n        const propType = this._lootEntity.getPropType();\n        if (propType === 'elements') {\n            this.setElemToCell(cell);\n        }\n        else if (propType === RG.TYPE_ITEM) {\n            level.addItem(this._lootEntity, cell.getX(), cell.getY());\n            // cell.setProp(propType, this._lootEntity);\n        }\n        else {\n            RG.err('Component.Loot', 'dropLoot',\n               'Unsupported propType for entity: ' + propType);\n        }\n    }\n    else {\n        RG.err('Loot', 'dropLoot', 'Loot has no propType!');\n    }\n};\n\nLoot.prototype.setElemToCell = function(cell) {\n    const entLevel = this.getEntity().getLevel();\n    if (this._lootEntity.hasOwnProperty('useStairs')) {\n        RG.debug(this, 'Added stairs to ' + cell.getX()\n            + ', ' + cell.getY());\n        entLevel.addStairs(this._lootEntity, cell.getX(), cell.getY());\n    }\n};\n\nLoot.prototype.setLootEntity = function(lootEntity) {\n    this._lootEntity = lootEntity;\n};\n\nLoot.prototype.toJSON = function() {\n    const json = ComponentBase.prototype.toJSON.call(this);\n    const lootJSON = this._lootEntity.toJSON();\n    if (this._lootEntity.getPropType() === RG.TYPE_ITEM) {\n        json.setLootEntity = {\n            createFunc: 'createItem',\n            value: lootJSON\n        };\n    }\n    else if (this._lootEntity.getPropType() === RG.TYPE_ACTOR) {\n        json.setLootEntity = {\n            createFunc: 'createActor',\n            value: lootJSON\n        };\n    }\n    else {\n        RG.err('Loot', 'toJSON',\n            'Only items/actors loot types are supported');\n    }\n    return json;\n};\n\n/* This component is added to entities receiving communication. Communication\n * is used to point out enemies and locations of items, for example.*/\nexport const Communication = TransientDataComponent('Communication',\n    {msg: null});\n\nCommunication.prototype._init = function() {\n    this.msg = [];\n};\n\nCommunication.prototype.addMsg = function(obj) {\n    this.msg.push(obj);\n};\n\n/* Added to entities which can cause damage without attack such as fire. Used\n * for AI navigation purposes at the moment. */\nexport const Damaging = DataComponent('Damaging', {\n    damage: 1, damageType: ''\n});\n\n/* Added to entities which are destroyed after use. */\nexport const OneShot = UniqueTagComponent('OneShot');\n\n/* Entities with physical components have weight and size.*/\nexport const Physical = UniqueDataComponent('Physical',\n    {weight: 1, size: 1});\n\n/* Ethereal entities are visible but don't have normal interaction with\n * matter. */\nexport const Ethereal = TagComponent('Ethereal',\n    {description: 'Ethereal beings cannot interact physically with others'}\n);\n\n/* Stun component prevents actor from taking many actions like moving and\n * attacking. */\nexport const Stun = DataComponent('Stun', {source: null});\n\nStun.prototype.toJSON = function() {\n    const obj = ComponentBase.prototype.toJSON.call(this);\n    if (RG.isActorActive(this.source)) {\n        obj.setSource = RG.getObjRef('entity', this.source);\n    }\n    return obj;\n};\nStun.description = 'Stunning prevents some actions to be done';\n\n/* Paralysis component prevents actor from taking many actions like moving and\n * attacking. */\nexport const Paralysis = DataComponent('Paralysis', {source: null});\nParalysis.description = 'Paralysed actors cannot perform any actions';\n\nParalysis.prototype.toJSON = function() {\n    const obj = ComponentBase.prototype.toJSON.call(this);\n    if (RG.isActorActive(this.source)) {\n        obj.setSource = RG.getObjRef('entity', this.source);\n    }\n    return obj;\n};\n\n/* Component added to summoned/created actors. */\nexport const Created = UniqueDataComponent('Created', {creator: null});\n\nCreated.prototype.toJSON = function() {\n    const obj = ComponentBase.prototype.toJSON.call(this);\n    obj.setCreator = RG.getObjRef('entity', this.creator);\n    return obj;\n};\n\nexport const Named = UniqueDataComponent('Named',\n    {name: '', uniqueName: ''}\n);\n\nNamed.prototype.prepend = function(name: string): void {\n    this.name = name + this.name;\n};\n\nNamed.prototype.getBaseName = function(): string {\n    return this.name;\n};\n\nNamed.prototype.getFullName = function() {\n    if (this.uniqueName !== '') {\n        return `${this.uniqueName}, ${this.name}`;\n    }\n    return this.name;\n};\n\n/* Poison component which damages the entity.*/\nexport class Poison extends Mixin.DurationRoll(Mixin.DamageRoll(ComponentBase)) {\n\n    public static description: string;\n\n    constructor() {\n        super('Poison');\n        this._src = null;\n        this._prob = 0.05; // Prob. of poison kicking in\n    }\n\n    public getProb() {return this._prob;}\n    public setProb(prob) {this._prob = prob;}\n\n    public getSource() {return this._src;}\n    public setSource(src) {this._src = src;}\n\n    public copy(rhs) {\n        super.copy(rhs);\n        this._prob = rhs.getProb();\n        this._src = rhs.getSource();\n    }\n\n    public toJSON() {\n        const obj = super.toJSON();\n        obj.setType = this.getType();\n        obj.setProb = this._prob;\n        // May not be present in items etc\n        if (RG.isActorActive(this._src)) {\n            obj.setSource = RG.getObjRef('entity', this._src);\n        }\n        return obj;\n    }\n}\nPoison.description = 'Poison causes damage periodically until it stop';\nComponent.Poison = Poison;\n\nexport const Coldness = TagComponent('Coldness',\n  {description: 'Coldness will gradually freeze a non-resistant beings'});\n\nexport const Heat = TagComponent('Heat');\n\nexport const BodyTemp = UniqueDataComponent('BodyTemp',\n    {temp: 100, maxTemp: 100, minTemp: -100});\n\nBodyTemp.prototype.incr = function() {\n    if (this.temp < this.maxTemp) {\n        this.temp += 1;\n    }\n};\n\nBodyTemp.prototype.decr = function() {\n    if (this.temp > this.minTemp) {\n        this.temp -= 1;\n    }\n};\n\nBodyTemp.prototype.isFreezing = function() {\n    return this.temp <= 0;\n};\n\nBodyTemp.prototype.isFrozen = function() {\n    return this.temp === this.minTemp;\n};\n\n/* For branding entity belonging to certain other entity. */\nexport const Owned = UniqueDataComponent('Owned', {owner: null});\n\n/* For branding stolen goods.*/\nexport const Stolen = TagComponent('Stolen');\n\n/* Added to unpaid items in shops. Removed once the purchase is done.*/\nexport const Unpaid = TagComponent('Unpaid');\n\nexport const Breakable = UniqueTagComponent('Breakable');\nexport const Indestructible = UniqueTagComponent('Indestructible');\nexport const Ammo = TagComponent('Ammo');\nexport const Flying = TagComponent('Flying',\n  {description: 'Flying beings can avoid difficult terrain and obstacles'});\nexport const Undead = TagComponent('Undead');\nexport const Summoned = TagComponent('Summoned');\nexport const Sharpener = TagComponent('Sharpener',\n  {description: 'You can sharpen weapons (once per weapoon'});\nexport const Sharpened = TagComponent('Sharpened');\nexport const Possessed = TagComponent('Possessed');\n\nexport const Flame = TransientDataComponent('Flame',\n    {damageType: '', damage: 1, source: null});\n\nexport const Weakness = DataComponent('Weakness', {\n    effect: '',\n    level: RG.WEAKNESS.MINOR\n},\n    {description: 'Weakness increases damage from attacks of that type'}\n);\n\nexport const Resistance = DataComponent('Resistance', {\n    effect: '',\n    level: RG.RESISTANCE.MINOR\n},\n    {description: 'Resistance reduces damage from attacks of that type'}\n);\n\n/* Used currently for magical arrows to distinguish them from shot/thrown\n * projectiles. */\nexport const Magical = UniqueTagComponent('Magical');\n\n/* Used for non-sentient actors such as fire and moving doors. */\nexport const NonSentient = UniqueTagComponent('NonSentient');\n\n/* Component which stores the actor class object. */\nexport const ActorClass = function() {\n    ComponentBase.call(this, 'ActorClass');\n    this._class = null;\n    this._className = null;\n\n    this.setClassName = name => {\n        this._className = name;\n    };\n\n    this.getClassName = () => this._className;\n\n    this.getClass = () => this._class;\n    this.setActorClass = actorClass => {\n        this._class = actorClass;\n    };\n\n};\nRG.extend2(ActorClass, ComponentBase);\nComponent.ActorClass = ActorClass;\n\nActorClass.prototype.toJSON = function() {\n    const json = BaseProto.toJSON.call(this);\n    json.setActorClass = {\n        createFunc: 'createActorClass',\n        value: {\n            className: this._className,\n            actorRef: RG.getObjRef('entity', this.getEntity())\n        }\n    };\n    return json;\n};\n\n//---------------------------------------------------------------------------\n// MELEE COMBAT COMPONENTS\n//---------------------------------------------------------------------------\nexport const Defender = UniqueTagComponent('Defender',\n    {description: 'Grants a minor defense (Def) bonus'});\nexport const Attacker = UniqueTagComponent('Attacker',\n    {description: 'Grants a minor attack (Att) bonus'});\nexport const BiDirStrike = UniqueTagComponent('BiDirStrike',\n    {description: 'You can attack to 2 opposite directions'});\nexport const CounterAttack = UniqueTagComponent('CounterAttack',\n    {desciption: 'You perform a counterattack when attacked by enemies'});\nexport const Ambidexterity = UniqueTagComponent('Ambidexterity');\nexport const LongReach = UniqueTagComponent('LongReach');\n\nexport const FirstStrike = UniqueTagComponent('FirstStrike', {\n    description: 'You can hit enemies first before they attack you'\n});\n\n/* Component which gives reduces equipment weight by 50%. */\nexport const MasterEquipper = DataComponent('MasterEquipper',\n    {factor: 0.5});\n\n/* Component which gives an actor chance to bypass armor. */\nexport const BypassProtection = DataComponent('BypassProtection',\n    {chance: 0.0});\n\n/* Component which can prevent an attack being made. */\nexport const Charm = DataComponent('Charm', {\n    level: 1, targetActor: RG.NO_TARGET\n});\n\n//--------------------------------------------\n// ALPINIST COMPONENTS\n//--------------------------------------------\nexport const Climber = UniqueTagComponent('Climber');\nexport const Jumper = UniqueDataComponent('Jumper', {jumpRange: 2});\nexport const Camouflage = UniqueTagComponent('Camouflage');\nexport const SnowWalk = UniqueTagComponent('SnowWalk');\n\nexport const Amphibious = UniqueTagComponent('Amphibious');\n//--------------------------------------------\n// RANGED COMBAT COMPONENTS\n//--------------------------------------------\n\nexport const EagleEye = TagComponent('EagleEye', {\n    description: 'Grants bonus to missile range and visibility'\n});\nexport const StrongShot = TagComponent('StrongShot', {\n    description: 'Strength (Str) adds extra damage to missile attacks'\n});\nexport const ThroughShot = TagComponent('ThroughShot', {\n    description: 'You can shoot through enemies to hit another target'\n});\nexport const MixedShot = TagComponent('MixedShot', {\n    description: 'Allows mixing of ammo from different type of weapons'\n});\nexport const LongRangeShot = TagComponent('LongRangeShot', {\n    description: 'Doubles missile attack range'\n});\nexport const RangedEvasion = TagComponent('RangedEvasion', {\n    description: 'Grants 50% chance to evade missile/ranged spell attacks'\n});\nexport const CriticalShot = TagComponent('CriticalShot');\nexport const DoubleShot = TagComponent('DoubleShot');\n\n//--------------------------------------------\n// Spellcasting related components\n//--------------------------------------------\n\nexport const SpellPower = UniqueDataComponent('SpellPower', {\n    PP: 10, maxPP: 10\n});\n\nSpellPower.prototype.addPP = function(pp) {\n    this.PP += pp;\n    if (this.PP > this.maxPP) {this.PP = this.maxPP;}\n};\n\nSpellPower.prototype.decrPP = function(pp) {\n    this.PP -= pp;\n};\n\nSpellPower.prototype.hasPower = function() {\n    return this.PP > 0;\n};\n\nSpellPower.prototype.canCast = function(spellPP) {\n    return this.PP >= spellPP;\n};\n\n/* PowerDrain component which is cancels a SpellCast and adds spell power to\n * holder of PowerDrain. */\nexport const PowerDrain = DataComponent('PowerDrain', {\n    drainDist: 5\n});\nPowerDrain.description =\n    'Counters any spell cast near you, gives you power and then disappears';\n\nexport const SpellBase = function(type) {\n    ComponentBase.call(this, type);\n\n    let _spell = null;\n    let _src = null;\n    let _args = null;\n\n    this.getSpell = () => _spell;\n    this.setSpell = spell => {_spell = spell;};\n\n    this.getSource = () => _src;\n    this.setSource = src => {_src = src;};\n\n    this.getArgs = () => _args;\n    this.setArgs = args => {_args = args;};\n\n};\nRG.extend2(SpellBase, ComponentBase);\n\n/* SpellCasting component which is added to an actor when it casts a spell. */\nexport const SpellCast = function() {\n    SpellBase.call(this, 'SpellCast');\n};\nRG.extend2(SpellCast, SpellBase);\n\nexport const SpellRay = function() {\n    SpellBase.call(this, 'SpellRay');\n};\nRG.extend2(SpellRay, SpellBase);\n\nexport const SpellMissile = function() {\n    SpellBase.call(this, 'SpellMissile');\n};\nRG.extend2(SpellMissile, SpellBase);\n\nexport const SpellCell = function() {\n    SpellBase.call(this, 'SpellCell');\n};\nRG.extend2(SpellCell, SpellBase);\n\nexport const SpellArea = function() {\n    SpellBase.call(this, 'SpellArea');\n};\nRG.extend2(SpellArea, SpellBase);\n\nexport const SpellSelf = function() {\n    SpellBase.call(this, 'SpellSelf');\n};\nRG.extend2(SpellSelf, SpellBase);\n\n/* Added to actors which stop spells from passing through. */\nexport const SpellStop = UniqueTagComponent('SpellStop');\n\n//--------------------------------------------\n// Adventurer components\n//--------------------------------------------\n\n/* Triples the energy gained from eating foods. */\nexport const NourishedOne = UniqueTagComponent('NourishedOne', {\n    description: 'You gain triple amount of energy from food'\n});\n\n//--------------------------------------------\n// Spirit-related components\n//--------------------------------------------\n\n/* Used when gem binding into item is attempted. */\nexport const SpiritBind = TransientDataComponent('SpiritBind',\n    {binder: null, target: null});\n\n/* This component enables entity to bind gems into items. */\nexport const GemBound = UniqueDataComponent('GemBound', {gem: null});\nGemBound.prototype.toJSON = function() {\n    return {\n        setID: this.getID(),\n        setType: 'GemBound',\n        setGem: {\n            createFunc: 'createItem',\n            value: this.getGem().toJSON()\n        }\n    };\n};\n\n/* This component enables entity to bind gems into items. */\nexport const SpiritItemCrafter = UniqueTagComponent('SpiritItemCrafter', {\n    description: 'Grants ability to bind gems to items such as weapons/armour'\n});\n\n//--------------------------------------------\n// Comps related to the skill system\n//--------------------------------------------\n\nexport const Skills = function() {\n    ComponentBase.call(this, 'Skills');\n    this._isUnique = true;\n\n    this._skills = {};\n\n    this.hasSkill = skill => this._skills.hasOwnProperty(skill);\n    this.addSkill = skill => {\n        this._skills[skill] = {name: skill, level: 1, points: 0};\n    };\n\n    /* Returns the skill level, or 0 if no skill exists. */\n    this.getLevel = skill => {\n        if (this.hasSkill(skill)) {\n            return this._skills[skill].level;\n        }\n        return 0;\n    };\n    this.setLevel = (skill, level) => {this._skills[skill].level = level;};\n    this.getPoints = skill => this._skills[skill].points;\n\n    this.resetPoints = skill => {this._skills[skill].points = 0;};\n    this.addPoints = (skill, points) => {\n        if (this.hasSkill(skill)) {\n            this._skills[skill].points += points;\n        }\n    };\n\n    this.getSkills = () => this._skills;\n    this.setSkills = skills => {this._skills = skills;};\n\n    this.toJSON = () => {\n        return {\n            setID: this.getID(),\n            setType: this.getType(),\n            setSkills: this._skills\n        };\n    };\n};\nRG.extend2(Skills, ComponentBase);\nComponent.Skills = Skills;\nexport const SkillsExp = TransientDataComponent('SkillsExp',\n    {skill: '', points: 0});\n\n/* Component added to shopkeeper. */\nexport const Shopkeeper = UniqueDataComponent('Shopkeeper',\n    {levelID: -1, cells: null, doorXY: null}\n);\n\nShopkeeper._init = function() {\n    this.cells = [];\n};\n\n/* Component which models a shop transaction. */\nexport const Transaction = TransientDataComponent('Transaction', {args: null});\n\n//--------------------------------------------\n// Battle-related components\n//--------------------------------------------\n\n// Added to all entities inside a battle\nexport const InBattle = function() {\n    ComponentBase.call(this, 'InBattle');\n    this._isUnique = true;\n    let _data = null;\n    this.setData = data => {_data = data;};\n    this.getData = () => _data;\n    this.updateData = data => {_data = Object.assign(_data || {}, data);};\n};\nRG.extend2(InBattle, ComponentBase);\nComponent.InBattle = InBattle;\n\n/* Added to entity once it uses a skill or destroys an opposing actor inside a\n * battle. */\nexport const BattleExp = function() {\n    ComponentBase.call(this, 'BattleExp');\n\n    let _data = null;\n\n    this.setData = data => {_data = data;};\n    this.getData = () => _data;\n    this.updateData = data => {_data = Object.assign(_data || {}, data);};\n\n};\nRG.extend2(BattleExp, ComponentBase);\nComponent.BattleExp = BattleExp;\n\n/* This component is placed on entities when the battle is over. It signals to\n * the Battle.System that experience should be processed now. After this, the\n * system processed and removed this and BattleExp components. */\nexport const BattleOver = UniqueTagComponent('BattleOver');\n\n/* Badges are placed on entities that survived a battle. */\nexport const BattleBadge = function() {\n    ComponentBase.call(this, 'BattleBadge');\n\n    let _data = null;\n\n    this.setData = data => {_data = data;};\n    this.getData = () => _data;\n    this.updateData = data => {_data = Object.assign(_data, data);};\n\n    this.isWon = () => _data.status === 'Won';\n    this.isLost = () => _data.status === 'Lost';\n};\nRG.extend2(BattleBadge, ComponentBase);\nComponent.BattleBadge = BattleBadge;\n\n/* An order given during battle. Used to give order to player at the moment. */\nexport const BattleOrder = DataComponent('BattleOrder', {args: null});\n\n/* Used for battle commanders. */\nexport const Commander = TagComponent('Commander');\n\n/* This component is added to entity when it gains reputation in some event, and\n * it keeps track of the amount and type of reputation. */\nexport const Reputation = function() {\n    ComponentBase.call(this, 'Reputation');\n\n    let _data = null;\n\n    this.setData = data => {_data = data;};\n    this.getData = () => _data;\n    this.updateData = data => {_data = Object.assign(_data, data);};\n\n    this.addToFame = nFame => {\n        if (!_data) {_data = {};}\n        if (_data.hasOwnProperty('fame')) {\n            _data.fame += nFame;\n        }\n        else {\n            _data.fame = nFame;\n        }\n    };\n};\nRG.extend2(Reputation, ComponentBase);\nComponent.Reputation = Reputation;\n\n/* Component used to pass data between systems. */\nexport const Event = TransientDataComponent('Event', {args: null});\n\nEvent.prototype._init = function(args) {\n    this.args = args;\n};\n\nexport const Effects = TransientDataComponent('Effects',\n    {args: null, effectType: ''}\n);\nEffects.prototype._init = function(args) {\n    this.args = args || {};\n};\n\n/* Can be added to actors when they're under player control. */\nexport const PlayerControlled = UniqueTagComponent('PlayerControlled');\n\n/* Component added only to the actual player actor. */\nexport const Player = UniqueTagComponent('Player');\n\n//--------------------------------------------\n// Comps that add or remove other components\n//--------------------------------------------\n\nexport const AddOnHit = DataComponent('AddOnHit', {\n    comp: null,\n    onDamage: true, // Apply when damage is dealt\n    onAttackHit: false // Apply on successful hit (damage irrelevant)\n});\n\nAddOnHit.prototype.toJSON = function() {\n    const jsonComp = this.comp.toJSON();\n    return {\n        setID: this.getID(),\n        setType: this.getType(),\n        setComp: {createComp: jsonComp},\n        setOnDamage: this.onDamage,\n        setOnAttackHit: this.onAttackHit\n    };\n};\n\n/* Used to equip/unequip items. */\nexport const Equip = TransientDataComponent('Equip', {\n    args: null, item: null, isRemove: false\n});\n\n/* Adds a component to given entity on equip (or removes it on unequip. */\nexport const AddOnEquip = DataComponent('AddOnEquip', {\n    comp: null, addedToActor: false\n});\n\nAddOnEquip.prototype.toJSON = function() {\n    const json: any = {\n        setID: this.getID(),\n        setType: this.getType(),\n        setAddedToActor: this.addedToActor\n    };\n    if (!this.addedToActor) {\n        const jsonComp = this.comp.toJSON();\n        json.setComp = {createComp: jsonComp};\n    }\n    else {\n        json.setComp = {createComp: this.comp}; // Store ID only\n    }\n    return json;\n};\n\n/* Can be used to modify a value of another component at certain\n * intervals. Placed on entity when regeneration is needed, and removed\n * once all values have regenerated. */\nexport const RegenEffect = DataComponent('RegenEffect', {\n    PP: 1, HP: 1, waitPP: 30, waitHP: 30, maxWaitPP: 60, maxWaitHP: 60\n});\n\nexport const Telepathy = DataComponent('Telepathy', {\n    target: null, source: null\n}, {\n    description: 'Grants ability to see through eyes of another being'\n});\n\nTelepathy.prototype.toJSON = function() {\n    const json: any = {\n        setID: this.getID(),\n        setType: this.getType()\n    };\n    if (RG.isActorActive(this.target)) {\n        json.setTarget = RG.getObjRef('entity', this.target);\n    }\n    if (RG.isActorActive(this.source)) {\n        json.setSource = RG.getObjRef('entity', this.source);\n    }\n    return json;\n};\n\n/* Animation comp is used to pass data from other systems to Animation\n * System. */\nexport const Animation = TransientDataComponent('Animation',\n    {args: null}\n);\n\nAnimation.prototype._init = function(args) {\n    this.args = args;\n};\n\n/* Adds a component into expiration component for given entity. */\nexport const addToExpirationComp = (\n    entity: Entity, comp: ComponentBase, dur: number, msg?: string\n) => {\n    if (entity.has('Expiration')) {\n        entity.get('Expiration').addEffect(comp, dur, msg);\n    }\n    else {\n        const expComp = new Expiration();\n        expComp.addEffect(comp, dur, msg);\n        entity.add(expComp);\n    }\n    if (!entity.has(comp)) {\n        entity.add(comp);\n    }\n};\n\n//---------------------------------------------------------------------------\n// BASE ACTIONS (transient components, not serialized, stored ever)\n//---------------------------------------------------------------------------\n\n/* Added to a entity giving an item. */\nexport const Give = TransientDataComponent('Give',\n    {giveTarget: null, item: null});\n\n/* Added to a jumping entity. */\nexport const Jump = TransientDataComponent('Jump', {x: -1, y: -1});\n\n/* Added to entity when it's opening a door. */\nexport const OpenDoor = TransientDataComponent('OpenDoor', {door: null});\n\n/* Added to entity when it's picking up something. */\nexport const Pickup = TransientTagComponent('Pickup');\n\n/* Added to an entity reading something. */\nexport const Read = TransientDataComponent('Read', {readTarget: null});\n\nexport const Rest = TransientTagComponent('Rest');\n\nexport const UseElement = TransientDataComponent('UseElement',\n    {element: null, useType: ''});\n\nexport const UseItem = TransientDataComponent('UseItem',\n    {item: null, useType: '', target: null, targetType: null, effect: null});\n\n/* Added to entity when it's using stairs to move to another level. */\nexport const UseStairs = TransientTagComponent('UseStairs');\n\n//---------------------------------------------------------------------------\n// PLAYER-related data components\n//---------------------------------------------------------------------------\n\n/* Added to player to record various event in the game. */\nexport const GameInfo = UniqueDataComponent('GameInfo', {\n    data: null});\n\nGameInfo.prototype._init = function() {\n    this.data = {zones: {}};\n};\n\n/* Updates the data with given object. */\nGameInfo.prototype.updateData = function(data) {\n    const oldData = this.data;\n    this.data = Object.assign(oldData, data);\n};\n\nGameInfo.prototype.addZone = function(id) {\n    this.data.zones[id] = true;\n};\n\nGameInfo.prototype.hasZone = function(id) {\n    return this.data.zones[id];\n};\n\nGameInfo.prototype.addZoneType = function(type) {\n    const data = this.data;\n    if (!data.zones.hasOwnProperty(type)) {\n        data.zones[type] = 1;\n    }\n    else {\n        data.zones[type] += 1;\n    }\n    this.data = data;\n};\n\n\n//---------------------------------------------------------------------------\n// TIME-related components\n//---------------------------------------------------------------------------\n\n/* Fading component is added to entities which disappear eventually */\nexport const Fading = DataComponent('Fading', {duration: 0});\n\nFading.prototype.decrDuration = function() {\n    this.duration -= 1;\n};\n\n/* Expiration component handles expiration of time-based effects. Any component\n * can be made transient by using this Expiration component. For example, to\n * have transient, non-persistent Ethereal, you can use this component. */\nexport const Expiration = DataComponent('Expiration',\n    {duration: null, expireMsg: null});\n\nExpiration.prototype._init = function() {\n    this.expireMsg = {};\n};\n\n/* Adds one effect to time-based components.*/\nExpiration.prototype.addEffect = function(comp, dur, msg) {\n    if (!this.duration) {this.duration = {};}\n    const compID = comp.getID();\n    if (!this.duration.hasOwnProperty(compID)) {\n        this.duration[compID] = dur;\n\n        comp.addCallback('onRemove', () => {\n            this.removeEffect(comp);\n        });\n    }\n    else { // increase existing duration\n        this.duration[compID] += dur;\n    }\n    if (msg) {\n        if (!this.expireMsg) {this.expireMsg = {};}\n        this.expireMsg[compID] = msg;\n    }\n};\n\n/* Decreases duration of all time-based effects.*/\nExpiration.prototype.decrDuration = function() {\n    for (const compIDStr in this.duration) {\n        const compID: number = parseInt(compIDStr, 10);\n        if (compID >= 0) {\n            this.duration[compID] -= 1;\n            if (this.duration[compID] === 0) {\n                const ent = this.getEntity();\n                if (this.expireMsg && this.expireMsg[compID]) {\n                    const msg = this.expireMsg[compID];\n                    RG.gameMsg({cell: ent.getCell(), msg});\n                }\n                else {\n                    const msg = 'An effect wears of from ' + ent.getName();\n                    RG.gameMsg({cell: ent.getCell(), msg});\n                }\n                ent.remove(compID);\n                delete this.duration[compID];\n            }\n        }\n    }\n};\n\n/* Returns true if component has any time-effects with non-zero duration.*/\nExpiration.prototype.hasEffects = function() {\n    return Object.keys(this.duration).length > 0;\n};\n\nExpiration.prototype.hasEffect = function(comp) {\n    const compID = comp.getID();\n    return this.duration.hasOwnProperty(compID);\n};\n\n/* Should be called to remove a specific effect, for example upon death of\n * an actor. */\nExpiration.prototype.removeEffect = function(comp) {\n    const compID = comp.getID();\n    if (this.duration.hasOwnProperty(compID)) {\n        delete this.duration[compID];\n    }\n    if (this.expireMsg && this.expireMsg.hasOwnProperty(compID)) {\n        delete this.expireMsg[compID];\n    }\n};\n\nExpiration.prototype.cleanup = function() {\n    const entity = this.getEntity();\n    Object.keys(this.duration).forEach(compID => {\n        entity.remove(parseInt(compID, 10));\n    });\n};\n\n/* This component can be added to any other component to make that component\n * stay for a specific duration only. */\nexport class Duration extends Mixin.DurationRoll(ComponentBase) {\n\n    constructor() {\n        super('Duration');\n        this._comp = null;\n        this._source = null;\n        // Behaves differently when on actor\n        this._addedOnActor = false;\n    }\n\n    public setSource(source ) {\n        this._source = source;\n    }\n\n    public getSource() {\n        return this._source;\n    }\n\n    public setComp(comp) {\n        this._comp = comp;\n        if (!this._addedOnActor) {\n\n            // Moves the comp to actor, and stores only comp ID\n            // inside this object\n            const _addCb = () => {\n                this.getEntity().add(this._comp);\n                if (this._comp.setSource && this._source) {\n                    this._comp.setSource(this._source);\n                }\n                this._comp = this._comp.getID();\n                this._addedOnActor = true;\n                this.removeCallbacks('onAdd');\n            };\n            this.addCallback('onAdd', _addCb);\n        }\n\n        const _removeCb = () => {\n            // Comp might've been removed due to cure\n            if (this.getEntity().has(this._comp)) {\n                this.getEntity().remove(this._comp);\n            }\n        };\n\n        this.addCallback('onRemove', _removeCb);\n    }\n\n    public getComp() {return this._comp;}\n\n    public copy(rhs) {\n        super.copy(rhs);\n        const comp = rhs.getComp().clone();\n        this.setComp(comp);\n    }\n\n    public clone() {\n        const newComp = super.clone();\n        newComp.copy(this);\n        return newComp;\n    }\n\n    public setAddedOnActor(added) {\n        this._addedOnActor = added;\n    }\n\n    public getAddedOnActor() {return this._addedOnActor;}\n\n    public toJSON() {\n        const json = super.toJSON();\n        if (RG.isActorActive(this._source)) {\n            json.setSource = RG.getObjRef('entity', this._source);\n        }\n        if (!this._addedOnActor) {\n            const jsonComp = this._comp.toJSON();\n            return Object.assign(json, {setComp: {createComp: jsonComp}});\n        }\n        else {\n            return Object.assign(json, {setAddedOnActor: true,\n                setComp: this._comp // Contains an ID only\n            });\n        }\n    }\n\n\n}\nComponent.Duration = Duration;\n\n//--------------------------------------------\n// QUEST COMPONENTS\n//--------------------------------------------\n\nconst NO_QUEST_REWARD = -1;\nconst NO_SUB_QUEST = -1;\n\n/* QuestGiver is added to actors who can give quests. Only one comp\n * supported per actor. */\nexport const QuestGiver = UniqueDataComponent('QuestGiver', {\n    hasGivenQuest: false, descr: '',\n    questID: -1, danger: 1, reward: NO_QUEST_REWARD,\n    hasGivenReward: false,\n    questTargets: null\n});\n\nQuestGiver.prototype._init = function(descr) {\n    this.chatObj = new ChatQuest();\n    this.descr = descr;\n    this.questID = this.getID();\n    this.questTargets = [];\n\n    const _addCb = () => {\n      this.chatObj.setQuestGiver(this.getEntity());\n    };\n    this.addCallback('onAdd', _addCb);\n};\n\nQuestGiver.prototype.hasReward = function() {\n    return this.reward && (this.reward !== NO_QUEST_REWARD);\n};\n\nQuestGiver.prototype.giveQuest = function(target) {\n    if (target) {\n        this.questGivenTo = target;\n        this.hasGivenQuest = true;\n    }\n    else {\n        this.hasGivenQuest = false;\n    }\n};\n\nQuestGiver.prototype.addTarget = function(targetType, target) {\n    if (!target) {\n        RG.err('QuestGiver', 'addTarget',\n            `No target given. Type ${targetType}`);\n    }\n    const name = RG.getName(target);\n    if (!RG.isEmpty(name)) {\n        const targetData = {\n            id: target.getID(), name, targetType,\n            subQuestID: -1\n        };\n        const qTarget = target.get('QuestTarget');\n        if (qTarget.getSubQuestID() !== NO_SUB_QUEST) {\n            targetData.subQuestID = qTarget.getSubQuestID();\n        }\n        this.questTargets.push(targetData);\n    }\n    else {\n        RG.err('QuestGiver', 'addTarget',\n            `Empty name got for target ${JSON.stringify(target)}`);\n    }\n};\n\nQuestGiver.prototype.toJSON = function() {\n    const json = BaseProto.toJSON.call(this);\n    // json.setQuestData = this.questData.toJSON();\n    if (this.questGivenTo) {\n        json.giveQuest = RG.getObjRef('entity', this.questGivenTo);\n    }\n    return json;\n};\n\nQuestGiver.prototype.getChatObj = function() {\n    return this.chatObj;\n};\n\n/* QuestTarget Comp is added to quest targets (items, actors etc). */\nexport const QuestTarget = DataComponent('QuestTarget', {\n    targetType: '', target: null, isCompleted: false,\n    targetID: -1, questID: -1, subQuestID: NO_SUB_QUEST\n});\n\nQuestTarget.prototype.isKill = function() {\n    return this.targetType === 'kill';\n};\n\nQuestTarget.prototype.toString = function() {\n    let name = '';\n    if (this.target.getName) {\n        name = this.target.getName();\n    }\n    else if (this.target.getParent) {\n        const parent = this.target.getParent();\n        if (parent) {\n            name = parent.getName();\n        }\n        if (parent.getParent) {\n            const topParent = parent.getParent();\n            name += ' of ' + topParent.getName();\n        }\n    }\n    return `${this.targetType} ${name}`;\n};\n\nQuestTarget.prototype.toJSON = function() {\n    const json = BaseProto.toJSON.call(this);\n    json.setTargetType = this.targetType;\n    if (this.target.$objID) {\n        json.setTarget = RG.getObjRef('object', this.target);\n    }\n    else {\n        json.setTarget = RG.getObjRef('entity', this.target);\n    }\n    return json;\n};\n\nexport const QuestEscortTarget = DataComponent('QuestEscortTarget', {\n    escortTo: -1, question: 'Can I help you safely somewhere?'\n});\n\nQuestEscortTarget.prototype.toJSON = function() {\n    const json = BaseProto.toJSON.call(this);\n    json.setEscortTo = RG.getObjRef('entity', this.escortTo);\n    return json;\n};\n\n/* Quest component contains all info related to a single quest. */\nexport const Quest = DataComponent('Quest', {\n    giver: null, questTargets: null, questID: -1, descr: ''\n});\n\nQuest.prototype._init = function() {\n    this.questTargets = [];\n};\n\nQuest.prototype.addTarget = function(targetData) {\n    this.questTargets.push(targetData);\n};\n\nQuest.prototype.isInThisQuest = function(targetComp) {\n    return this.getQuestID() === targetComp.getQuestID();\n};\n\nQuest.prototype.getTargetsByType = function(targetType) {\n    return this.questTargets.filter(obj => (\n        obj.targetType === targetType\n    ));\n};\n\n/* Returns first quest target matching the given targetType. */\nQuest.prototype.first = function(targetType) {\n    const targetObj = this.questTargets.find(obj => (\n        obj.targetType === targetType\n    ));\n    if (targetObj) {return targetObj;}\n    return null;\n};\n\n/* Returns true if all QuestTarget comps have been completed. */\nQuest.prototype.isCompleted = function() {\n    return this.questTargets.reduce((acc, obj) => acc && obj.isCompleted,\n        true);\n};\n\nQuest.prototype.isTargetInQuest = function(targetComp) {\n    const target = targetComp.getTarget();\n    for (let i = 0; i < this.questTargets.length; i++) {\n        const curr = this.questTargets[i];\n        if (curr.id === target.getID()) {\n            return true;\n        }\n    }\n    return false;\n};\n\nQuest.prototype.toString = function() {\n    let res = '';\n    this.questTargets.forEach((obj, i) => {\n        if (i > 0) {res += '. ';}\n        if (obj.targetType === 'subquest') {\n            res += 'Talk to ' + obj.name;\n        }\n        else {\n            res += obj.targetType + ' ' + obj.name;\n        }\n    });\n    return res;\n};\n\nexport const QuestInfo = DataComponent('QuestInfo', {\n    question: '', info: '',\n    givenBy: -1 // ID of the info source\n});\n\nexport const QuestReport = DataComponent('QuestReport', {\n    expectInfoFrom: -2\n});\n\nexport const QuestCompleted = TransientDataComponent('QuestCompleted',\n    {giver: null}\n);\n\nexport const GiveQuest = TransientDataComponent('GiveQuest',\n    {target: null, giver: null}\n);\n\nexport const QuestTargetEvent = TransientDataComponent('QuestTargetEvent',\n    {targetComp: null, args: null, eventType: ''}\n);\n\nQuestTargetEvent.prototype.setTargetComp = function(target) {\n    RG.assertType(target, 'QuestTarget');\n    this.targetComp = target;\n};\n\n//---------------------\n// Weather components\n//---------------------\nexport const Weather = DataComponent('Weather', {\n    weatherType: 'clear'\n});\n\nexport const WeatherEffect = TransientDataComponent('WeatherEffect', {\n    effectType: 'clear'\n});\n\n/* Added to elements that are indoors. */\nexport const Indoor = UniqueTagComponent('Indoor');\n\n/* Added to elements having some snow. */\nexport const Snowy = UniqueTagComponent('Snowy');\n\n\nexport const Entrapping = UniqueDataComponent('Entrapping', {\n    difficulty: 1, destroyOnMove: false\n});\n\nexport const Entrapped = UniqueTagComponent('Entrapped');\n\n/* Component attached to Level/Places for Lore. */\nexport const Lore = UniqueDataComponent('Lore', {\n    topics: null\n});\n\nLore.prototype.addTopic = function(key: string, msg: any): void {\n    if (!this.topics[key]) {\n        this.topics[key] = [];\n    }\n    this.topics[key].push(msg);\n};\n\nLore.prototype._init = function() {\n    this.topics = {};\n};\n","/* Contains code for low-level map generation. This generates the base\n * elements and some other elements like doors. Items and actors are\n * not generated here. */\n\nimport RG from './rg';\nimport ROT from '../../lib/rot';\nimport {CellMap} from './map';\nimport {Path} from './path';\nimport {BSP} from '../../lib/bsp';\nimport {Builder} from './builder';\n\nimport {TemplateLevel} from './template.level';\nimport {Crypt} from '../data/tiles.crypt';\nimport {Castle} from '../data/tiles.castle';\nimport {House, HouseGenerator} from './houses';\nimport {Geometry} from './geometry';\nimport {ELEM} from '../data/elem-constants';\nimport {Random} from './random';\n\nimport {MapForest} from '../../lib/map.forest';\nimport {MapMiner} from '../../lib/map.miner';\nimport {MapMountain} from '../../lib/map.mountain';\nimport {MapWall} from '../../lib/map.wall';\nimport * as Element from './element';\nimport {BBox, TCoord} from './interfaces';\n\nconst ElementMarker = Element.ElementMarker;\ntype ElementBase = Element.ElementBase;\n\nconst RNG = Random.getRNG();\n\nconst inRange = function(val, min, max) {\n    if (val >= min && val <= max) {\n        return true;\n    }\n    return false;\n};\n\nexport interface MapConf {\n    callbacks?: {[key: string]: () => void};\n    constraintFunc?: () => void;\n    floorType?: string;\n    freeOnly?: boolean;\n    genParams?: number[];\n    levelType?: string;\n    models?: any;\n    nGates?: number;\n    roomCount?: number;\n    ratio?: number;\n    startRoomFunc?: () => void;\n    templates?: string;\n    tilesX?: number;\n    tilesY?: number;\n    wallType?: string;\n    snowRatio?: number;\n    rng?: Random;\n}\n\ninterface MapObj {\n    map: CellMap;\n    tiles?: any;\n    paths?: any[];\n    mapGen?: any;\n    houses?: House[];\n    unused?: any[];\n}\n\ninterface HouseObj extends BBox {\n    walls: TCoord[];\n    floor: TCoord[];\n    door: TCoord;\n}\n\ntype ElemMapFunc = (map: CellMap, x: number, y: number) => void;\ninterface ASCIIToElemMap {\n    [key: string]: ElementBase | ElemMapFunc;\n}\n\n/* Returns true if given coordinates are in allowed area. */\nconst inAllowedArea = function(x0, y0, x1, y1, conf) {\n    let ok = true;\n    if (conf.exclude) {\n        if (conf.exclude.bbox) {\n            const {ulx, uly, lrx, lry} = conf.exclude.bbox;\n            if (inRange(x0, ulx, lrx) && inRange(y0, uly, lry)) {\n                ok = false;\n            }\n            if (inRange(x1, ulx, lrx) && inRange(y1, uly, lry)) {\n                ok = false;\n            }\n        }\n    }\n    else if (conf.maxY) {\n        ok = y1 <= conf.maxY;\n    }\n    return ok;\n};\n\n/* Map generator for the roguelike game.  */\nexport class MapGenerator {\n\n    public static options: {[key: string]: any};\n\n    // Maps snow fall to different elements\n    public static snowElemMap: {[key: string]: ElementBase};\n    public static snowMeltMap: {[key: string]: ElementBase};\n\n    public static getAndSetRNG(conf?: MapConf): Random {\n        if (conf) {\n            if (conf.rng) {return conf.rng;}\n            else {conf.rng = RNG;}\n        }\n        return RNG;\n    }\n\n    /* Decorates the given map with snow. ratio is used to control how much\n     * snow to put. */\n    public static addRandomSnow(map: CellMap, ratio: number, conf?): void {\n        const freeCells = map.getFree().filter(c => c.isOutdoors());\n        const rng = MapGenerator.getAndSetRNG(conf);\n\n        for (let i = 0; i < freeCells.length; i++) {\n            const addSnow = rng.getUniform();\n            const cell = freeCells[i];\n            if (addSnow <= ratio) {\n                const baseType = cell.getBaseElem().getType();\n                let snowElem = MapGenerator.snowElemMap.default;\n                if (MapGenerator.snowElemMap[baseType]) {\n                    snowElem = MapGenerator.snowElemMap[baseType];\n                }\n                freeCells[i].setBaseElem(snowElem);\n            }\n        }\n    }\n\n    /* Given 2-d ascii map, and mapping from ascii to Element, constructs the\n     * map of base elements, and returns it. */\n    public static fromAsciiMap(\n        asciiMap: string[][], asciiToElem: ASCIIToElemMap\n    ): MapObj {\n        const cols = asciiMap.length;\n        const rows = asciiMap[0].length;\n        const map = new CellMap(cols, rows);\n\n        for (let x = 0; x < cols; x++) {\n            for (let y = 0; y < rows; y++) {\n                const char = asciiMap[x][y];\n                if (char === '+') {\n                    const marker = new Element.ElementMarker('+');\n                    marker.setTag('door');\n                    // door.setXY(x, y);\n                    map.setBaseElemXY(x, y, asciiToElem['.'] as ElementBase);\n                    map.setElemXY(x, y, marker);\n                }\n                else if (asciiToElem.hasOwnProperty(char)) {\n                    const value = asciiToElem[char];\n                    if (typeof value !== 'function') {\n                        map.setBaseElemXY(x, y, value);\n                    }\n                    else {\n                        value(map, x, y);\n                    }\n                }\n            }\n        }\n        return {\n            map\n        };\n    }\n\n    public static getWallElem(wallType: string): Element.ElementWall {\n        switch (wallType) {\n            case 'cave': return ELEM.WALL_CAVE;\n            case 'wallcave': return ELEM.WALL_CAVE;\n            case 'castle': return ELEM.WALL_CASTLE;\n            case 'wallcastle': return ELEM.WALL_CASTLE;\n            case 'crypt': return ELEM.WALL_CRYPT;\n            case 'wallcrypt': return ELEM.WALL_CRYPT;\n            case 'ice': return ELEM.WALL_ICE;\n            case 'wallice': return ELEM.WALL_ICE;\n            case 'wooden': return ELEM.WALL_WOODEN;\n            case 'wallwooden': return ELEM.WALL_WOODEN;\n            default: return ELEM.WALL;\n        }\n    }\n\n    public static getFloorElem(floorType): Element.ElementBase {\n        switch (floorType) {\n            case 'cave': // fallthrough\n            case 'floorcave': return ELEM.FLOOR_CAVE;\n            case 'castle': // fallthrough\n            case 'floorcastle': return ELEM.FLOOR_CASTLE;\n            case 'crypt': // fallthrough\n            case 'floorcrypt': return ELEM.FLOOR_CRYPT;\n            case 'ice': // fallthrough\n            case 'floorice': return ELEM.FLOOR_ICE;\n            case 'wooden': // fallthrough\n            case 'floorwooden': return ELEM.FLOOR_WOODEN;\n            default: return ELEM.FLOOR;\n        }\n    }\n\n    public static createSplashes(cols, rows, conf): MapObj {\n        const elem = conf.elem || ELEM.WATER;\n        const map = new CellMap(cols, rows);\n        const mapGen = new MapForest(cols, rows, conf);\n        mapGen.create((x, y, val) => {\n            map.setBaseElemXY(x, y, ELEM.FLOOR);\n            if (val === 1) {\n                map.setBaseElemXY(x, y, elem);\n            }\n        });\n        return {map};\n    }\n\n    /* Returns a clone of the requested level options. */\n    public static getOptions(value) {\n        if (MapGenerator.options[value]) {\n            return Object.assign({}, MapGenerator.options[value]);\n        }\n        else {\n            RG.warn('MapGenerator', 'getOptions',\n                `Unknown map type ${value}`);\n        }\n        return {};\n    }\n\n    public cols: number;\n    public rows: number;\n    public defaultMapElem: Element.ElementBase;\n    private _mapGen: any;\n    private _mapType: string | null;\n    private _wall: number;\n\n    constructor() { // {{{2\n        this.cols = RG.LEVEL_MEDIUM_X;\n        this.rows = RG.LEVEL_MEDIUM_Y;\n        this._mapGen = new ROT.Map.Arena(this.cols, this.rows);\n        this._mapType = null;\n        this._wall = 1;\n        this.defaultMapElem = ELEM.FLOOR;\n    }\n\n    public createEmptyMap(): MapObj {\n        const map = new CellMap(this.cols, this.rows, this.defaultMapElem);\n        const obj = {map};\n        return obj;\n    }\n\n    /* Returns an object containing randomized map + all special features\n     * based on initialized generator settings. */\n    public getMap(conf: MapConf = {}): MapObj {\n        const obj: any = {};\n        if (typeof this._mapGen === 'function') {\n            obj.map = this._mapGen();\n        }\n        else {\n            const wallElem = MapGenerator.getWallElem(conf.wallType);\n            const floorElem = MapGenerator.getFloorElem(conf.floorType);\n            const map = new CellMap(this.cols, this.rows, this.defaultMapElem);\n            this._mapGen.create((x, y, val) => {\n                if (val === this._wall) {\n                    map.setBaseElemXY(x, y, wallElem);\n                }\n                else {\n                    map.setBaseElemXY(x, y, floorElem);\n                }\n            });\n            obj.map = map;\n            if (this._mapType === 'uniform' || this._mapType === 'digger') {\n                obj.rooms = this._mapGen.getRooms();\n                obj.corridors = this._mapGen.getCorridors();\n            }\n        }\n        return obj;\n    }\n\n    /* Creates \"ruins\" type level with open outer edges and inner\n     * \"fortress\" with some tunnels. */\n    public createRuins(cols, rows, conf = {}) {\n        let ruinsConf = {born: [4, 5, 6, 7, 8],\n            survive: [2, 3, 4, 5], connected: true};\n        ruinsConf = Object.assign(ruinsConf, conf);\n        const map = new ROT.Map.Cellular(cols, rows, ruinsConf);\n        map.randomize(0.9);\n        for (let i = 0; i < 5; i++) {map.create();}\n        map.connect(null, 1);\n        this._wall = 0;\n        return map;\n    }\n\n    /* Creates a cellular type dungeon and makes all areas connected.*/\n    public createCellular(cols, rows) {\n        const map = new ROT.Map.Cellular(cols, rows,\n            {connected: true});\n        map.randomize(0.52);\n        for (let i = 0; i < 5; i++) {map.create();}\n        map.connect(null, 1);\n        this._wall = 0;\n        return map;\n    }\n\n    public createRooms(cols, rows) {\n        const map = new ROT.Map.Digger(cols, rows,\n            {roomWidth: [5, 20], dugPercentage: 0.7});\n        return map;\n    }\n\n    public createTownBSP(cols, rows, conf): MapObj {\n        const maxHouseX = conf.maxHouseX || 100;\n        const maxHouseY = conf.maxHouseY || 100;\n\n        // Controls how big the slots for houses are, for bigger levels it\n        // should be higher to generate small houses\n        const bspIter = 7;\n\n        const haloAroundX = 2; // Prevents house placement on edges\n        const haloAroundY = 2; // Prevents house placement on edges\n\n        const rng = MapGenerator.getAndSetRNG(conf);\n        const bspGen = new BSP.BSPGen({rng});\n        const bspX0 = haloAroundX - 1;\n        const bspY0 = haloAroundY - 1;\n        const bspCols = cols - 2 * bspX0;\n        const bspRows = rows - 2 * bspY0;\n\n        const mainContainer = new BSP.Container(0, 0, bspCols, bspRows);\n        const containerTree = bspGen.splitContainer(mainContainer, bspIter);\n        const leaves = containerTree.getLeafs();\n\n        // Adjust leaves x,y based on bspX0,Y\n        leaves.forEach(leaf => {\n            leaf.x += bspX0;\n            leaf.y += bspY0;\n        });\n\n        rng.shuffle(leaves); // Introduce some randomness\n\n        const floorElem = MapGenerator.getFloorElem(conf.floorType);\n        const map = new CellMap(cols, rows, floorElem);\n        const freeLeaves = [];\n\n        // Now each leaf can be safely used for placing a house in\n        // non-colliding manner\n        const houses: House[] = [];\n        const houseGen = new HouseGenerator();\n        leaves.forEach(leaf => {\n            const {w, h} = leaf;\n            let colsHouse = w - 1;\n            let rowsHouse = h - 1;\n            if (colsHouse > maxHouseX) {\n                colsHouse = Math.round(colsHouse / 2);\n            }\n            if (rowsHouse > maxHouseY) {\n                rowsHouse = Math.round(rowsHouse / 2);\n            }\n            if (leaf.x === bspX0) {\n                leaf.x += 1;\n                leaf.w -= 1;\n                colsHouse -= 1;\n            }\n            else if (leaf.x === cols - 1) {\n                leaf.x -= 1;\n                leaf.w -= 1;\n                colsHouse -= 1;\n            }\n\n            if (leaf.y === bspY0) {\n                leaf.y += 1;\n                leaf.h -= 1;\n                rowsHouse -= 1;\n            }\n            else if (leaf.y === rows - 1) {\n                leaf.y -= 1;\n                leaf.h -= 1;\n                rowsHouse -= 1;\n            }\n            // TODO place row/col of houses\n\n            if (colsHouse >= 5 && rowsHouse >= 5) {\n                if (colsHouse > 10 && colsHouse % 2 !== 0) {\n                    colsHouse -= 1;\n                }\n                if (rowsHouse > 10 && rowsHouse % 2 !== 0) {\n                    rowsHouse -= 1;\n                }\n\n                const houseConf: any = {cols: colsHouse, rows: rowsHouse};\n                houseConf.addWindows = conf.addWindows;\n                const house = houseGen.createHouse(houseConf);\n                if (house) {\n                    this.placeHouse(house, map, leaf.x, leaf.y, conf);\n                    houses.push(house);\n                }\n            }\n            else {\n                freeLeaves.push(leaf);\n            }\n        });\n        return {map, houses, unused: freeLeaves};\n    }\n\n    public placeHouse(house: House, map: CellMap, x, y, conf): void {\n        const coord = house.coord;\n        const keys = Object.keys(coord);\n        const wallElem = MapGenerator.getWallElem(conf.wallType);\n        keys.forEach(elemChar => {\n\n            if (elemChar === '#') {\n                coord[elemChar].forEach(xy => {\n                    const x0 = xy[0] + x;\n                    const y0 = xy[1] + y;\n                    map.setBaseElemXY(x0, y0, wallElem);\n                });\n            }\n            else if (elemChar === '+') {\n                /* const doorXY = coord[elemChar][0];\n                house.door = [doorXY[0] + x, doorXY[1] + y];*/\n            }\n            else if (elemChar === ':') {\n                coord[elemChar].forEach(xy => {\n                    const x0 = xy[0] + x;\n                    const y0 = xy[1] + y;\n                    map.setBaseElemXY(x0, y0, ELEM.FLOOR_HOUSE);\n                });\n            }\n            else if (elemChar === 'windows') {\n                coord[elemChar].forEach(xy => {\n                    const x0 = xy[0] + x;\n                    const y0 = xy[1] + y;\n                    map.setBaseElemXY(x0, y0, ELEM.WINDOW);\n                });\n            }\n        });\n        house.adjustCoord(x, y);\n    }\n\n    /* Creates a forest map. Uses the same rng but instead of walls, populates\n     * using trees. Ratio is conversion ratio of walls to trees. For example,\n     * 0.5 on average replaces half the walls with tree, and removes rest of\n     * the walls. */\n    public createForest(conf?: MapConf): MapObj {\n        const map = new CellMap(this.cols, this.rows, this.defaultMapElem);\n        this.addForestToMap(map, conf);\n        return {map};\n    }\n\n    public addForestToMap(map: CellMap, conf?: MapConf): void {\n        const ratio = conf.ratio;\n        const {freeOnly} = conf;\n        const rng = MapGenerator.getAndSetRNG(conf);\n        this._mapGen = new MapForest(this.cols, this.rows, conf);\n        if (freeOnly) {\n            this._mapGen.create((x, y, val) => {\n                const createTree = rng.getUniform() <= ratio;\n                if (val === 1 && createTree) {\n                    if (map.getCell(x, y).isFree()) {\n                        map.setBaseElemXY(x, y, ELEM.TREE);\n                    }\n                }\n                else if (val === 1) {\n                    if (map.getCell(x, y).isFree()) {\n                        map.setBaseElemXY(x, y, ELEM.GRASS);\n                    }\n                }\n            });\n        }\n        else {\n            this._mapGen.create((x, y, val) => {\n                const createTree = rng.getUniform() <= ratio;\n                if (val === 1 && createTree) {\n                    map.setBaseElemXY(x, y, ELEM.TREE);\n                }\n                else if (val === 1) {\n                    map.setBaseElemXY(x, y, ELEM.GRASS);\n                }\n            });\n        }\n    }\n\n    public createLakes(conf) {\n        const map = new CellMap(this.cols, this.rows, this.defaultMapElem);\n        this._mapGen = new MapForest(this.cols, this.rows, conf);\n        this.addLakesToMap(map, conf);\n        return {map};\n    }\n\n    public addLakesToMap(map: CellMap, conf): void {\n        if (conf.freeOnly) {\n            this._mapGen.create((x, y, val) => {\n                // map.setBaseElemXY(x, y, ELEM.FLOOR);\n                if (val === 1 /* && createDeep */) {\n                    if (map.getCell(x, y).isFree()) {\n                        map.setBaseElemXY(x, y, ELEM.WATER);\n                    }\n                }\n            });\n        }\n        else {\n            this._mapGen.create((x, y, val) => {\n                map.setBaseElemXY(x, y, ELEM.FLOOR);\n                if (val === 1 /* && createDeep */) {\n                    map.setBaseElemXY(x, y, ELEM.WATER);\n                }\n            });\n        }\n    }\n\n    public addLakes(map: CellMap, conf, bbox: BBox): void {\n        const cols = bbox.lrx - bbox.ulx;\n        const rows = bbox.lry - bbox.uly;\n        this.setGen('lakes', cols, rows);\n        const lakeMap = this.createLakes(conf).map;\n\n        RG.forEach2D(lakeMap._map, (x, y) => {\n            const nX = x + bbox.ulx;\n            const nY = y + bbox.uly;\n            if (Geometry.isInBbox(nX, nY, bbox) && map.hasXY(nX, nY)) {\n                const baseElem = lakeMap.getBaseElemXY(x, y);\n                if (baseElem.getType() === 'water') {\n                    if (conf.skipTypes) {\n                        const elemType = map.getBaseElemXY(nX, nY).getType();\n                        if (!conf.skipTypes.hasOwnProperty(elemType)) {\n                            map.setBaseElemXY(nX, nY, baseElem);\n                        }\n                    }\n                    else {\n                        map.setBaseElemXY(nX, nY, baseElem);\n                    }\n                }\n            }\n        });\n    }\n\n    public createWall(cols, rows, conf) {\n        const map: CellMap = new CellMap(cols, rows, this.defaultMapElem);\n        const wallElem = conf.wallElem || ELEM.WALL;\n        this._mapGen = new MapWall(cols, rows, conf);\n        this._mapGen.create((x, y, val) => {\n            if (val === 1 /* && createDeep */) {\n                map.setBaseElemXY(x, y, wallElem);\n            }\n        });\n        return {map};\n    }\n\n    public createMountain(cols, rows, conf): MapObj {\n        const map = new CellMap(cols, rows, this.defaultMapElem);\n        if (!conf) {\n            conf = MapGenerator.getOptions('mountain');\n        }\n\n        const rng = MapGenerator.getAndSetRNG(conf);\n        this._mapGen = new MapMountain(this.cols, this.rows, conf);\n        this._mapGen.create((x, y, val) => {\n            if (val > conf.highRockThr) {\n                map.setBaseElemXY(x, y, ELEM.HIGH_ROCK);\n            }\n            else if (val > conf.stoneThr) {\n                map.setBaseElemXY(x, y, ELEM.STONE);\n            }\n            else if (val < conf.chasmThr) {\n                map.setBaseElemXY(x, y, ELEM.CHASM);\n            }\n            else {\n                const addSnow = rng.getUniform();\n                if (addSnow < conf.snowRatio) {\n                    map.setBaseElemXY(x, y, ELEM.SNOW);\n                }\n                else {\n                    map.setBaseElemXY(x, y, ELEM.FLOOR);\n                }\n            }\n        });\n        let paths = [];\n        if (conf.nRoadTurns > 0) {\n            paths = this.createMountainPath(map, conf);\n        }\n        return {map, paths};\n    }\n\n    /* Creates a zig-zagging road across the level from south to north. */\n    public createMountainPath(map: CellMap, conf) {\n        const paths = [];\n        const nTurns = conf.nRoadTurns || 10;\n        let yPerTurn = Math.floor(map.rows / nTurns);\n        if (conf.yPerTurn) {yPerTurn = conf.yPerTurn;}\n        if (yPerTurn < 4) {\n            yPerTurn = 4; // Prevents too little path progression\n        }\n        const xLeft = 2;\n        const xRight = map.cols - 3;\n        const xCenter = Math.floor(map.cols / 2);\n        const xPoints = [xLeft, xRight, xCenter];\n\n        let inBounds = true;\n        let prevX = -1;\n        let prevY = -1;\n\n        const passableFuncs = [\n            (x, y) => map.hasXY(x, y) && map.getCell(x, y).isFree(),\n            (x, y) => (\n                map.hasXY(x, y) &&\n                map.getCell(x, y).getBaseElem().getType() !== 'highrock'\n            )\n        ];\n\n        const rng = MapGenerator.getAndSetRNG(conf);\n        for (let i = 0; inBounds && i < nTurns; i++) {\n            inBounds = false;\n\n            let x0 = prevX;\n            let y0 = prevY;\n            if (i === 0) {\n                x0 = Number.isInteger(conf.startX) ? conf.startX :\n                    rng.arrayGetRand(xPoints);\n                y0 = conf.startY ? conf.startY : 0;\n            }\n            const x1 = rng.arrayGetRand(xPoints);\n            const y1 = (i + 1) * yPerTurn + y0;\n\n            // Compute 2 paths: Shortest and shortest passable. Then calculate\n            // weights. Choose one with lower weight.\n            if (inAllowedArea(x0, y0, x1, y1, conf)) {\n                const coord = Path.getMinWeightOrShortest(map, x0, y0, x1,\n                    y1, passableFuncs);\n                if (coord) {\n                    const chosenCoord = Builder.addPathToMap(map, coord);\n                    if (chosenCoord.length > 0) {inBounds = true;}\n                    paths.push(chosenCoord);\n                    prevX = x1;\n                    prevY = y1;\n                }\n                else {\n                    inBounds = true;\n                }\n            }\n            else {\n                inBounds = true;\n            }\n        }\n\n        // If last point is not at maxY, create last path\n        if (conf.maxY && paths.length > 0) {\n            const lastPath = paths[paths.length - 1];\n            if (lastPath.length > 0) {\n                const lastXY = lastPath[lastPath.length - 1];\n                const [x0, y0] = [lastXY.x, lastXY.y];\n                let x1 = rng.arrayGetRand(xPoints);\n                const y1 = conf.maxY;\n                if (conf.endX) {x1 = conf.endX;}\n                if (y1 > y0) {\n                    if (inAllowedArea(x0, y0, x1, y1, conf)) {\n                        const coord = Path.getMinWeightOrShortest(map, x0, y0,\n                            x1, y1, passableFuncs);\n                        if (coord) {\n                            const chosenCoord = Builder.addPathToMap(map, coord);\n                            paths.push(chosenCoord);\n                        }\n                    }\n                }\n            }\n        }\n\n        return paths;\n    }\n\n    /* Creates a mountain summit. */\n    public createSummit(cols, rows, conf): MapObj {\n        const map = new CellMap(cols, rows, ELEM.SKY);\n\n        const ratio = conf.ratio || 0.3;\n        let [cX, cY] = [Math.floor(cols / 2), Math.floor(rows / 2)];\n        const totalCells = cols * rows;\n\n        const placedCoord = [[cX, cY]];\n        map.setBaseElemXY(cX, cY, ELEM.FLOOR);\n        let placedCells = 1;\n\n        const rng = MapGenerator.getAndSetRNG(conf);\n        let watchdog = 10000;\n        while (placedCells / totalCells < ratio) {\n            [cX, cY] = rng.arrayGetRand(placedCoord);\n            const [dX, dY] = rng.getRandDir();\n            cX += dX;\n            cY += dY;\n            if (map.hasXY(cX, cY)) {\n                if (map.getBaseElemXY(cX, cY).getType() === 'sky') {\n                    placedCoord.push([cX, cY]);\n                    ++placedCells;\n                    map.setBaseElemXY(cX, cY, ELEM.FLOOR);\n                }\n            }\n            --watchdog;\n            if (watchdog <= 0) {break;}\n        }\n\n        return {map};\n    }\n\n    /* Creates a single cave level. */\n    public createCave(cols, rows, conf): MapObj {\n        this._mapGen = new MapMiner(cols, rows, conf);\n        const map = new CellMap(cols, rows, this.defaultMapElem);\n        const wallElem = conf.wallElem || ELEM.WALL_CAVE;\n        const floorElem = conf.floorElem || ELEM.FLOOR_CAVE;\n        this._mapGen.create((x, y, val) => {\n            if (val === 1) {\n                map.setBaseElemXY(x, y, wallElem);\n            }\n            else {\n                map.setBaseElemXY(x, y, floorElem);\n            }\n        });\n        return {map, mapGen: this._mapGen};\n    }\n\n    /* Creates a single crypt level. */\n    public createCryptNew(cols, rows, conf: MapConf = {}): MapObj {\n        const tilesX = conf.tilesX || 12;\n        const tilesY = conf.tilesY || 7;\n        const level = new TemplateLevel(tilesX, tilesY);\n        level.use(Crypt);\n\n        // const genParams = conf.genParams || [1, 1, 1, 1];\n        const genParams = conf.genParams || [2, 2, 2, 2];\n        const roomCount = conf.roomCount || 40;\n        level.setGenParams(genParams);\n        level.setRoomCount(roomCount);\n        level.create();\n\n        const asciiToElem = {\n            '#': ELEM.WALL_CRYPT,\n            '.': ELEM.FLOOR_CRYPT\n        };\n        const mapObj: MapObj = MapGenerator.fromAsciiMap(level.map, asciiToElem);\n        mapObj.tiles = level.getPlacedData();\n        return mapObj;\n    }\n\n    /* Creates a castle map using Template.Level and castle tiles. */\n    public createCastle(cols, rows, conf: MapConf = {}): MapObj {\n        const genParams = conf.genParams || [1, 1, 1, 1];\n        const tileSizeX = 5 + genParams[0] + genParams[1];\n        const tileSizeY = 5 + genParams[2] + genParams[3];\n        const tilesX = conf.tilesX || Math.ceil(cols / tileSizeX);\n        const tilesY = conf.tilesY || Math.ceil(rows / tileSizeY);\n\n        const level = new TemplateLevel(tilesX, tilesY);\n        level.use(Castle);\n        if (!conf.models && !conf.templates) {\n            level.setTemplates(Castle.Models.full);\n        }\n        else if (typeof conf.models === 'string') {\n            level.setTemplates(Castle.Models[conf.models]);\n        }\n        else if (typeof conf.templates === 'string') {\n            level.setTemplates(Castle.templates[conf.templates]);\n        }\n        else {\n            level.setTemplates(conf.models);\n        }\n\n        if (conf.nGates === 2) {\n          level.setStartRoomFunc(Castle.startFuncTwoGates);\n        }\n        else if (conf.startRoomFunc) {\n          level.setStartRoomFunc(conf.startRoomFunc);\n        }\n\n        if (conf.constraintFunc) {\n            level.setConstraintFunc(conf.constraintFunc);\n        }\n\n        const roomCount = conf.roomCount || 40;\n        level.setGenParams(genParams);\n        level.setRoomCount(roomCount);\n\n        if (conf.callbacks) {\n            Object.keys(conf.callbacks).forEach(name => {\n                level.addCallback(name, conf.callbacks[name]);\n            });\n        }\n\n        level.create();\n        const mapObj = this.createCastleMapObj(level, conf);\n        return mapObj;\n    }\n\n    /* Constructs only outer castle wall. Can be used for fortified cities etc.\n     * */\n    public createCastleWall(cols, rows, conf: MapConf = {}): MapObj {\n        const tilesX = conf.tilesX || Math.ceil(cols / 7);\n        const tilesY = conf.tilesY || Math.ceil(rows / 7);\n\n        const level = new TemplateLevel(tilesX, tilesY);\n        level.use(Castle);\n        level.setTemplates(Castle.Models.outerWall);\n        level.setFiller(Castle.tiles.fillerFloor);\n\n        if (conf.nGates === 2) {\n          level.setStartRoomFunc(Castle.startFuncTwoGates);\n        }\n        else if (conf.startRoomFunc) {\n          level.setStartRoomFunc(conf.startRoomFunc);\n        }\n\n        if (conf.constraintFunc) {\n            level.setConstraintFunc(conf.constraintFunc);\n        }\n        level.create();\n\n        const wallElem = MapGenerator.getWallElem(conf.wallType);\n        const floorElem = MapGenerator.getFloorElem(conf.floorType);\n        const asciiToElem = {\n            '#': wallElem,\n            '.': floorElem\n        };\n        const castleMapObj: MapObj = MapGenerator.fromAsciiMap(level.map, asciiToElem);\n        castleMapObj.tiles = level.getPlacedData();\n        return castleMapObj;\n    }\n\n    /* Creates the actual castle Map.CellList after ascii has been generated from\n     * the template. */\n    public createCastleMapObj(level, conf): MapObj {\n        const createLeverMarker = (map, x, y) => {\n            map.setBaseElemXY(x, y, MapGenerator.getFloorElem(conf.floorType));\n            if (conf.preserveMarkers) {\n                const marker = new ElementMarker('&');\n                marker.setTag('lever');\n                map.getCell(x, y).setProp(RG.TYPE_ELEM, marker);\n            }\n        };\n\n        const createLeverDoorMarker = (map, x, y) => {\n            map.setBaseElemXY(x, y, MapGenerator.getFloorElem(conf.floorType));\n            if (conf.preserveMarkers) {\n                const marker = new ElementMarker('|');\n                marker.setTag('leverdoor');\n                map.getCell(x, y).setProp(RG.TYPE_ELEM, marker);\n            }\n        };\n\n        const createLivingQuarterMarker = (map, x, y) => {\n            map.setBaseElemXY(x, y, ELEM.FLOOR_HOUSE);\n            if (conf.preserveMarkers) {\n                const marker = new ElementMarker(':');\n                marker.setTag('living_quarter');\n                map.getCell(x, y).setProp(RG.TYPE_ELEM, marker);\n            }\n        };\n\n        const asciiToElem = {\n            '#': MapGenerator.getWallElem(conf.wallType),\n            '.': MapGenerator.getFloorElem(conf.floorType),\n            '&': createLeverMarker,\n            '|': createLeverDoorMarker,\n            ':': createLivingQuarterMarker\n        };\n        const mapObj: MapObj = MapGenerator.fromAsciiMap(level.map, asciiToElem);\n        mapObj.tiles = level.getPlacedData();\n        return mapObj;\n    }\n\n    public createTownWithWall(cols, rows, conf: MapConf = {}): MapObj {\n        const tileSize = 7;\n        const tilesX = Math.ceil(cols / tileSize);\n        const tilesY = Math.ceil(rows / tileSize);\n        const castleMapObj = this.createCastleWall(cols, rows, conf);\n\n        conf.levelType = 'empty' || conf.levelType;\n        const colsTown = (tilesX - 2) * tileSize;\n        const rowsTown = (tilesY - 2) * tileSize;\n        const townMapObj = this.createTownBSP(colsTown, rowsTown, conf);\n\n        const finalMap = castleMapObj.map;\n        Geometry.mergeMapBaseElems(finalMap, townMapObj.map,\n            tileSize, tileSize);\n\n        // Adjust house coordinates due to map merging\n        const houses = townMapObj.houses;\n        houses.forEach(house => {\n            house.moveHouse(tileSize, tileSize);\n        });\n\n        const unused = townMapObj.unused;\n        if (unused) {\n            unused.forEach(leaf => {\n                leaf.x += tileSize;\n                leaf.y += tileSize;\n            });\n        }\n\n        return {\n            map: finalMap,\n            houses,\n            unused,\n            tiles: castleMapObj.tiles\n        };\n    }\n\n    public createArctic(cols, rows, conf: MapConf = {}): MapObj {\n        const snowRatio = conf.snowRatio || 1.0;\n        this.setGen('empty', cols, rows);\n        const map = new CellMap(cols, rows, this.defaultMapElem);\n        MapGenerator.addRandomSnow(map, snowRatio);\n        return {map};\n    }\n\n    /* Sets the generator for room generation.*/\n    public setGen(type, cols, rows): void {\n        this.cols = cols;\n        this.rows = rows;\n        type = type.toLowerCase();\n        this._mapType = type;\n        switch (type) {\n            case 'arctic': this._mapGen = new ROT.Map.Dungeon(cols, rows); break;\n            case 'arena': this._mapGen = new ROT.Map.Arena(cols, rows); break;\n            case 'cave': this._mapGen = new MapMiner(cols, rows); break;\n            case 'cellular': this._mapGen = this.createCellular(cols, rows); break;\n            case 'castle': break;\n            case 'crypt': this._mapGen = new ROT.Map.Uniform(cols, rows); break;\n            case 'digger': this._mapGen = new ROT.Map.Digger(cols, rows); break;\n            case 'divided':\n                this._mapGen = new ROT.Map.DividedMaze(cols, rows); break;\n            case 'dungeon': this._mapGen = new ROT.Map.Rogue(cols, rows); break;\n            case 'empty': this._mapGen = new ROT.Map.Dungeon(cols, rows); break;\n            case 'eller': this._mapGen = new ROT.Map.EllerMaze(cols, rows); break;\n            case 'forest': this._mapGen = new MapForest(cols, rows); break;\n            case 'lakes': this._mapGen = new MapForest(cols, rows); break;\n            case 'labyrinth':\n                this._mapGen = new ROT.Map.DividedMaze(cols, rows); break;\n            case 'miner': this._mapGen = new MapMiner(cols, rows); break;\n            case 'mountain': this._mapGen = new MapMountain(cols, rows); break;\n            case 'icey': this._mapGen = new ROT.Map.IceyMaze(cols, rows); break;\n            case 'rogue': this._mapGen = new ROT.Map.Rogue(cols, rows); break;\n            case 'uniform': this._mapGen = new ROT.Map.Uniform(cols, rows); break;\n            case 'ruins': this._mapGen = this.createRuins(cols, rows); break;\n            case 'rooms': this._mapGen = this.createRooms(cols, rows); break;\n            case 'town': this._mapGen = new ROT.Map.Arena(cols, rows); break;\n            case 'townwithwall': break;\n            case 'summit': break;\n            case 'wall': this._mapGen = new MapWall(cols, rows); break;\n            default: RG.err('MapGen',\n                'setGen', 'this._mapGen type ' + type + ' is unknown');\n        }\n    }\n\n}\n\nMapGenerator.options = {};\nMapGenerator.options.mountain = Object.freeze({\n    noiseMult: 1,\n    noiseDivider: 20,\n    highRockThr: 0.75,\n    stoneThr: 0.5,\n    chasmThr: -0.4,\n    nRoadTurns: 8,\n    snowRatio: 0.0\n});\n\nMapGenerator.snowElemMap = {\n    'floor': ELEM.SNOW_LIGHT,\n    'light snow': ELEM.SNOW,\n    'light snow with tracks': ELEM.SNOW,\n    'snow': ELEM.SNOW_DEEP,\n    'snow with tracks': ELEM.SNOW,\n    'tree': ELEM.TREE_SNOW,\n    'snow-covered tree': ELEM.TREE_SNOW,\n    'water': ELEM.WATER_FROZEN,\n    'frozen water': ELEM.WATER_FROZEN,\n    'grass': ELEM.GRASS_SNOW,\n    'snowy grass': ELEM.GRASS_SNOW,\n    'deep snow': ELEM.SNOW_DEEP,\n    'deep snow with tracks': ELEM.SNOW_DEEP,\n};\n\nMapGenerator.snowMeltMap = {\n    'light snow': ELEM.FLOOR,\n    'light snow with tracks': ELEM.FLOOR,\n    'snow': ELEM.SNOW_LIGHT,\n    'snow with tracks': ELEM.SNOW_LIGHT,\n    'snow-covered tree': ELEM.TREE,\n    'frozen water': ELEM.WATER,\n    'snowy grass': ELEM.GRASS,\n    'deep snow': ELEM.SNOW,\n    'deep snow with tracks': ELEM.SNOW,\n};\n\n","\nimport ROT from '../../lib/rot';\nimport RG from './rg';\nimport {CellMap} from './map';\n\nexport const Path: any = {};\n\nexport interface CoordXY {\n    x: number;\n    y: number;\n}\n\nconst NO_PATH = Object.freeze([]);\n\nexport type PathFunc = (CellMap, x0: number, y0: number, x1: number, y1: number) => CoordXY[];\n\n/* Returns shortest path (array of x,y pairs) between two points. Does not\n* check if any of the cells are passable, unless a callback is given, which\n* is called with (x, y). */\nPath.getShortestPath = function(x0, y0, x1, y1, cb = () => true): CoordXY[] {\n    const coords = [];\n    const passableCallback = cb;\n    const finder = new ROT.Path.AStar(x1, y1, passableCallback);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n    return coords;\n};\n\nPath.getShortestSeenPath = function(actor, map, x1, y1): CoordXY[] {\n    const seenCells = actor.getBrain().getSeenCells();\n    const lut = {};\n\n    // Create LUT for better lookup in passable callback\n    seenCells.forEach(cell => {\n        lut[cell.getKeyXY()] = cell;\n    });\n\n    const passableCb = (x, y) => {\n        // Assume that each seen cell is within map boundaries\n        if (lut.hasOwnProperty(x + ',' + y)) {\n            return (\n                map.isPassable(x, y) || (x === x0 && y === y0)\n                || (x === x1 && y === y1)\n            );\n        }\n        return false;\n    };\n\n    const [x0, y0] = actor.getXY();\n    if (isSourceBlocked(x0, y0, map, passableCb)) {\n        return NO_PATH as CoordXY[];\n    }\n\n    const coords = [];\n    const finder = new ROT.Path.AStar(x1, y1, passableCb);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n\n    removeSourceAndTarget(coords);\n    return coords;\n};\n\n\n/* NOTE: This has problem that if x0,y0 or x1,y1 have actors, returns no path at\n * all. */\nPath.getShortestPassablePath = function(map, x0, y0, x1, y1): CoordXY[] {\n    const coords = [];\n    const passableCallback = (x, y) => map.isPassable(x, y);\n    const finder = new ROT.Path.AStar(x1, y1, passableCallback);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n    return coords;\n};\n\n/* Returns shortest actor to actor path. Returns shortest path between two\n * actors excluding the source and destination points. */\nPath.getActorToActorPath = function(map, x0, y0, x1, y1): CoordXY[] {\n    const coords = [];\n    const passableCb = (x, y) => {\n        if (map.hasXY(x, y)) {\n            return (\n                map.isPassable(x, y) || (x === x0 && y === y0)\n                || (x === x1 && y === y1)\n            );\n        }\n        return false;\n    };\n\n    // Terminate search immediately if source is completely blocked\n    if (isSourceBlocked(x0, y0, map, passableCb)) {\n        return NO_PATH as CoordXY[];\n    }\n\n    const finder = new ROT.Path.AStar(x1, y1, passableCb);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n\n    removeSourceAndTarget(coords);\n    return coords;\n};\n\n/* Returns shortest path for actor in x0,y0, excluding the source point. If\n * destination point is impassable, returns an empty array. */\nPath.getShortestActorPath = function(map, x0, y0, x1, y1, cb): CoordXY[] {\n    const coords = [];\n    const passableCb = (x, y) => {\n        if (map.hasXY(x, y)) {\n            if (cb) {\n                return cb(x, y) || (x === x0 && y === y0);\n            }\n            return (\n                map.isPassable(x, y) || (x === x0 && y === y0)\n            );\n        }\n        return false;\n    };\n    if (isSourceBlocked(x0, y0, map, passableCb)) {\n        return NO_PATH as CoordXY[];\n    }\n\n    const finder = new ROT.Path.AStar(x1, y1, passableCb);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n\n    removeSource(coords);\n    return coords;\n};\n\nPath.getShortestPassablePathWithDoors = function(map, x0, y0, x1, y1) {\n    const coords = [];\n    const passableCbDoor = (x, y) => {\n        if (map.hasXY(x, y)) {\n            return map.isPassable(x, y) || map.getCell(x, y).hasDoor();\n        }\n        return false;\n    };\n    const finder = new ROT.Path.AStar(x1, y1, passableCbDoor);\n    finder.compute(x0, y0, (x, y) => {\n        coords.push({x, y});\n    });\n    return coords;\n};\n\n\n/* Returns shortest distance (in cells) between two points.*/\nPath.shortestDist = function(x0, y0, x1, y1): number {\n    const coords = Path.getShortestPath(x0, y0, x1, y1);\n    return coords.length - 1; // Subtract one because starting cell included\n};\n\n/* Returns a weight for given path. */\nPath.getPathWeight = (map, coord) => {\n    let w = 0;\n    coord.forEach(c => {\n        if (map.hasXY(c.x, c.y)) {\n            const elem = map.getBaseElemXY(c.x, c.y);\n            switch (elem.getType()) {\n                case 'floor': w += 1; break;\n                case 'forest': w += 2; break;\n                case 'stone': w += 2; break;\n                case 'water': w += 4; break;\n                case 'highrock': w += 4; break;\n                case 'chasm': w += 5; break;\n                case 'wall': w += 20; break;\n                default: w += 0; break;\n            }\n        }\n    });\n    return w;\n};\n\n/* Gets the minimum weight path between x0,y0 and x1,y1 of two options.\n * This algorithm will\n * tunnel through any obstacles eventually. Optionally takes the path function\n * as last argument or uses the default getShortestPassablePath. */\nPath.getMinWeightPath = function(map, x0, y0, x1, y1, pathFunc) {\n    let coordPassable = [];\n    if (pathFunc) {\n        coordPassable = pathFunc(map, x0, y0, x1, y1);\n    }\n    else {\n        coordPassable = Path.getShortestPassablePath(map, x0, y0, x1, y1);\n    }\n\n    const coordShortest = Path.getShortestPath(x0, y0, x1, y1);\n    const passableWeight = Path.getPathWeight(map, coordPassable);\n    const shortestWeight = Path.getPathWeight(map, coordShortest);\n\n    let coord = null;\n    if (coordPassable.length === 0) {\n        coord = coordShortest;\n    }\n    else {\n        coord = passableWeight >= shortestWeight ? coordShortest\n            : coordPassable;\n    }\n    return coord;\n};\n\n/* Given map and two x,y points, calculates min paths between these points using\n * the list of path functions. */\nPath.getMinWeightOrShortest = function(map, x0, y0, x1, y1, passableFuncs) {\n    const coordShortest = Path.getShortestPath(x0, y0, x1, y1);\n    const paths = [];\n    passableFuncs.forEach(passableCb => {\n        const path = Path.getShortestPath(x0, y0, x1, y1, passableCb);\n        if (path.length > 0) {\n            paths.push(path);\n        }\n    });\n    paths.push(coordShortest);\n\n    let minPath = null;\n    let minWeight = -1;\n    paths.forEach(path => {\n        const pathWeight = Path.getPathWeight(map, path);\n        if (minWeight === -1 || pathWeight < minWeight) {\n            minWeight = pathWeight;\n            minPath = path;\n        }\n    });\n    return minPath;\n};\n\n/* This algorithm divides the path into nSegments, then computes minimum\n * weighted path for each of those segments. This makes the\n * path look more realistic, but of course less optimal.\n */\nPath.getWeightPathSegmented = function(map, x0, y0, x1, y1, nSeg, pathFunc) {\n    const dX = x1 - x0;\n    const dY = y1 - y0;\n    const segX = Path.getPathSeg(dX, nSeg);\n    const segY = Path.getPathSeg(dY, nSeg);\n    let finalPath = [];\n\n    let [startX, startY] = [x0, y0];\n    for (let i = 0; i < nSeg; i++) {\n        const [endX, endY] = [startX + segX[i], startY + segY[i]];\n        const segmentPath = Path.getMinWeightPath(map, startX, startY,\n            endX, endY, pathFunc);\n        [startX, startY] = [endX, endY];\n        finalPath = finalPath.concat(segmentPath);\n    }\n    return finalPath;\n};\n\n\n/* Returns the path segment sizes. For example, dist=17, nSeg=4,\n * produces [4, 4, 4, 5] */\nPath.getPathSeg = function(dist, nSeg) {\n    let remain = dist;\n    const result = [];\n    const segSize = Math.floor(dist / nSeg);\n    for (let i = 0; i < nSeg - 1; i++) {\n        result.push(segSize);\n        remain -= segSize;\n    }\n    result.push(remain);\n    return result;\n};\n\n/* HELPER FUNCTIONS. */\n\nfunction isSourceBlocked(x0, y0, map, passableCb) {\n    for (let x = x0 - 1; x <= x0 + 1; x++) {\n        for (let y = y0 - 1; y <= y0 + 1; y++) {\n            if (map.hasXY(x, y)) {\n                if (passableCb(x, y)) {return false;}\n            }\n        }\n    }\n    return true;\n}\n\nfunction removeSource(coords) {\n    if (coords.length > 0) {\n        coords.shift();\n    }\n}\n\nfunction removeSourceAndTarget(coords) {\n    if (coords.length > 1) {\n        coords.shift(); // Remove source x,y\n        coords.pop(); // Remove target x,y\n    }\n}\n","\nimport RG from './rg';\nimport {Random} from './random';\n\n// RNG used for dynamic \"micro\" stuff like damage rolls etc level ups\n\n// Can be either '1d6 + 4' or [1, 6, 4] for example\ntype IDiceInputArg = string | [number, number, number];\n\ntype DiceValue = Dice | IDiceInputArg;\n\n/* Each die has number of throws, type of dice (d6, d20, d200...) and modifier\n * which is +/- X. */\nexport class Dice {\n\n    public static RNG: Random;\n    public static DIE_RE = /\\s*(\\d+)d(\\d+)\\s*(\\+|-)?\\s*(\\d+)?/;\n    public static DIE_NUMBER = /^\\s*(-?\\d+)\\s*$/;\n\n    /* Creates a new die object from array or die expression '2d4 + 3' etc.*/\n    public static create(strOrArray: IDiceInputArg): Dice {\n        const numDiceMod: number[] = Dice.parseDieSpec(strOrArray);\n        if (numDiceMod.length === 3) {\n            return new Dice(numDiceMod[0], numDiceMod[1], numDiceMod[2]);\n        }\n        else {\n            RG.err('Dice', 'create', 'Could not create dice properly');\n        }\n    }\n\n\n    public static getValue(strOrNumOrDie: DiceValue) {\n        if (typeof strOrNumOrDie === 'number') {\n            if (Number.isInteger((strOrNumOrDie as number))) {\n                return strOrNumOrDie;\n            }\n            else {\n            }\n        }\n        else if (typeof strOrNumOrDie === 'string') {\n            const arr: number[] = Dice.parseDieSpec((strOrNumOrDie as string));\n            return new Dice(arr[0], arr[1], arr[2]).roll();\n        }\n        else {\n            return (strOrNumOrDie as Dice).roll();\n        }\n    }\n\n\n    /* Parses die expression like '2d4' or '3d5 + 4' and returns it as an array [2,\n     * 4, 0] or [3, 5, 4]. Returns empty array for invalid expressions.*/\n    public static parseDieSpec(strOrArray: IDiceInputArg): number[] {\n        if (typeof strOrArray === 'object') {\n            if (strOrArray.length >= 3) {\n                return [strOrArray[0], strOrArray[1], strOrArray[2]];\n            }\n        }\n        else {\n            const match = Dice.DIE_RE.exec(strOrArray);\n            if (match !== null) {\n                const num = match[1];\n                const dType = match[2];\n                let mod = null;\n                if (!RG.isNullOrUndef([match[3], match[4]])) {\n                    if (match[3] === '+') {mod = match[4];}\n                    else {mod = '-' + match[4];}\n                }\n                else {\n                    mod = '0';\n                }\n                return [num, dType, mod];\n            }\n            else if (Dice.DIE_NUMBER.test(strOrArray)) {\n                return [0, 0, parseInt(strOrArray, 10)];\n            }\n            else {\n                RG.err('RG', 'parseDieSpec', 'Cannot parse: ' + strOrArray);\n            }\n        }\n        return [];\n    }\n\n    private _num: number;\n    private _dice: number;\n    private _mod: number;\n\n\n    constructor(num, dice, mod) {\n        this._num = parseInt(num, 10);\n        this._dice = parseInt(dice, 10);\n        this._mod = parseInt(mod, 10);\n    }\n\n    public getNum(): number {return this._num;}\n    public setNum(num: number): void {this._num = num;}\n    public getDice() {return this._dice;}\n    public setDice(dice) {this._dice = dice;}\n    public getMod() {return this._mod;}\n    public setMod(mod) {this._mod = mod;}\n\n    public roll(): number {\n        let res = 0;\n        for (let i = 0; i < this._num; i++) {\n            res += Dice.RNG.getUniformInt(1, this._dice);\n        }\n        return res + this._mod;\n    }\n\n    public toString(): string {\n        let modStr = '+ ' + this._mod;\n        if (this._mod < 0) {modStr = '- ' + this._mod;}\n        else if (this._mod === 0) {modStr = '';}\n        return this._num + 'd' + this._dice + ' ' + modStr;\n    }\n\n    public copy(rhs): void {\n        this._num = rhs.getNum();\n        this._dice = rhs.getDice();\n        this._mod = rhs.getMod();\n    }\n\n    public clone(): Dice {\n        return new Dice(this._num, this._dice, this._mod);\n    }\n\n    /* Returns true if dice are equal.*/\n    public equals(rhs): boolean {\n        let res = this._num === rhs.getNum();\n        res = res && (this._dice === rhs.getDice());\n        res = res && (this._mod === rhs.getMod());\n        return res;\n    }\n\n    public toJSON(): number[] {\n        return [this._num, this._dice, this._mod];\n    }\n}\nDice.RNG = new Random(new Date().getTime());\n","\nimport RG from './rg';\nimport {MapGenerator} from './map.generator';\nimport {Level} from './level';\nimport {ElementDoor} from './element';\nimport * as Verify from './verify';\nimport {DungeonPopulate} from './dungeon-populate';\n\nexport class FactoryLevel {\n\n    private _verif: Verify.Conf;\n\n    public static createLevel(\n        type: string, cols: number, rows: number, conf?\n    ): Level {\n        const factLevel = new FactoryLevel();\n        return factLevel.createLevel(type, cols, rows, conf);\n    }\n\n    constructor() {\n        this._verif = new Verify.Conf('FactoryLevel');\n    }\n\n    /* Factory method for creating levels.*/\n    createLevel(levelType, cols, rows, conf?): Level {\n        const mapgen = new MapGenerator();\n        let mapObj = null;\n        const level = new Level();\n        mapgen.setGen(levelType, cols, rows);\n\n        if (levelType === 'empty') {\n            mapObj = mapgen.createEmptyMap();\n        }\n        else if (levelType === 'town') {\n            mapObj = mapgen.createTownBSP(cols, rows, conf);\n            level.setMap(mapObj.map);\n            this.createHouseElements(level, mapObj);\n            this.createShops(level, mapObj, conf);\n            this.createTrainers(level, conf);\n        }\n        else if (levelType === 'townwithwall') {\n            mapObj = mapgen.createTownWithWall(cols, rows, conf);\n            level.setMap(mapObj.map);\n            this.createHouseElements(level, mapObj);\n            this.createShops(level, mapObj, conf);\n            this.createTrainers(level, conf);\n        }\n        else if (levelType === 'forest') {\n            mapObj = mapgen.createForest(conf);\n        }\n        else if (levelType === 'lakes') {\n            mapObj = mapgen.createLakes(conf);\n        }\n        else if (levelType === 'mountain') {\n            mapObj = mapgen.createMountain(cols, rows, conf);\n        }\n        else if (levelType === 'summit') {\n            mapObj = mapgen.createSummit(cols, rows, conf);\n        }\n        else if (levelType === 'crypt') {\n            mapObj = mapgen.createCryptNew(cols, rows, conf);\n        }\n        else if (levelType === 'cave') {\n            mapObj = mapgen.createCave(cols, rows, conf);\n        }\n        else if (levelType === 'castle') {\n            mapObj = mapgen.createCastle(cols, rows, conf);\n        }\n        else if (levelType === 'wall') {\n            mapObj = mapgen.createWall(cols, rows, conf);\n        }\n        else if (levelType === 'arctic') {\n            mapObj = mapgen.createArctic(cols, rows, conf);\n        }\n        else {\n            mapObj = mapgen.getMap();\n        }\n\n        if (mapObj) {\n            level.setMap(mapObj.map);\n        }\n        else {\n            const msg = JSON.stringify(conf);\n            RG.err('FactoryBase', 'createLevel',\n                `mapObj is null. type: ${levelType}. ${msg}`);\n        }\n        this.setLevelExtras(level, mapObj);\n        return level;\n    }\n\n    setLevelExtras(level, mapObj) {\n        const extras = {};\n        const possibleExtras = ['rooms', 'corridors', 'vaults', 'houses',\n            'paths'];\n        possibleExtras.forEach(extra => {\n            if (mapObj.hasOwnProperty(extra)) {\n                extras[extra] = mapObj[extra];\n            }\n        });\n        level.setExtras(extras);\n    }\n\n    createHouseElements(level, mapObj) {\n        if (!mapObj.hasOwnProperty('houses')) {return;}\n        const houses = mapObj.houses;\n        for (let i = 0; i < houses.length; i++) {\n            const doorXY = houses[i].door;\n            const door = new ElementDoor(true);\n            level.addElement(door, doorXY[0], doorXY[1]);\n        }\n    }\n\n    /* Creates a shop and a shopkeeper into a random house in the given level.\n     * Level should already contain empty houses where the shop is created at\n     * random. */\n    createShops(level, mapObj, conf) {\n        this._verif.verifyConf('createShops', conf, ['nShops']);\n        const dungPopul = new DungeonPopulate();\n        level.addExtras('houses', mapObj.houses);\n        dungPopul.createShops(level, conf);\n    };\n\n    /* Creates trainers for the given level. */\n    createTrainers(level, conf) {\n        const dungPopul = new DungeonPopulate();\n        dungPopul.createTrainers(level, conf);\n    }\n\n}\n","\nimport RG from '../rg';\nimport '../utils';\n\nexport const Component: any = {};\nComponent.createdCompDecls = {};\n\n// Used by components which cannot be serialized\n// In your component, add the following:\n//   this.toJSON = NO_SERIALISATION;\nexport const NO_SERIALISATION = (): any => null;\nComponent.NO_SERIALISATION = NO_SERIALISATION as any;\n\n// These attributes are never assigned to component instances\nconst staticAttr = new Set<string>([\n  'description'\n]);\n\n/* Can be used to create simple Component object constructors with no other data\n * fields. Usage:\n *   const MyComponent = TagComponent('MyComponent');\n *   const compInst = new MyComponent();\n */\nexport const TagComponent = function(type: string, compAttrib: any = {}) {\n    errorIfCompDeclExists(type);\n    const CompDecl = function() {\n        ComponentBase.call(this, type);\n        Object.keys(compAttrib).forEach(key => {\n            if (!staticAttr.has(key)) {\n                this[key] = compAttrib[key];\n            }\n        });\n    };\n    RG.extend2(CompDecl, ComponentBase);\n    Component.createdCompDecls[type] = CompDecl;\n    handleCompAttrib(CompDecl, compAttrib);\n    addNewCompDecl(type, CompDecl);\n    return CompDecl;\n};\nComponent.TagComponent = TagComponent;\n\nfunction handleCompAttrib(CompDecl: any, compAttrib: any) {\n    staticAttr.forEach((attr: string) => {\n        if (compAttrib.hasOwnProperty(attr)) {\n            CompDecl[attr] = compAttrib[attr];\n        }\n    });\n}\n\nfunction addNewCompDecl(type: string, CompDecl: any) {\n    if (!Component.hasOwnProperty(type)) {\n        Component[type] = CompDecl;\n    }\n    else {\n        RG.err('Component', 'addCompDecl',\n            `Comp ${type} exists already!`);\n    }\n}\n\n/* Can be used to create simple data components with setters/getters.\n * Usage:\n *   const Immunity = DataComponent('Immunity', {value: 1, dmgType: 'Fire'});\n *   const immunityComp = new Immunity();\n *   immunityComp.setDmgType('Fire')\n *   ...etc\n * NOTE: There's difference between members and compAttrib. Component\n * attributes are things like serialisation and uniqueness.\n * (only one comp per entity of that type). There are convenience functions\n * below to define unique and non-serialisable (Transient) components. See\n * TransientTagComponent and TransientDataComponent below.\n *\n * Legal values for compAttrib:\n *  - isUnique: true|false (see UniqueXXXComponent)\n *  - toJSON: NO_SERIALISATION (see TransientXXXComponent)\n *  - objRefs: {memberName: 'type'}, type must be 'entity'|'level'\n */\n\nexport const DataComponent = (type: string, members: any, compAttrib: any = {}) => {\n    errorIfCompDeclExists(type);\n    if (typeof type !== 'string') {\n        const json = JSON.stringify(type);\n        RG.err('component.base.js', 'DataComponent: NO TYPE GIVEN',\n            'First arg must be string! Got: |' + json + '|');\n    }\n    if (typeof members !== 'object' || Array.isArray(members)) {\n        RG.err('component.base.js', `DataComponent: ${type}`,\n            'Members must be given as key/value pairs.');\n    }\n\n    // This is the constructor function to be returned\n    const CompDecl = function(...argsList: any) {\n        ComponentBase.call(this, type);\n        Object.keys(compAttrib).forEach(key => {\n            this[key] = compAttrib[key];\n        });\n\n        // Setup the default values, either from args given to constructor,\n        // or use default values passed to members\n        Object.keys(members).forEach(key => {\n            if (argsList && argsList[0] && argsList[0].hasOwnProperty(key)) {\n                this[key] = argsList[0][key];\n            }\n            else if (typeof members[key] === 'object') {\n                // Unless cloned, the object ref is same for all\n                // instances of this component.\n                this[key] = JSON.parse(JSON.stringify(members[key]));\n            }\n            else {\n                this[key] = members[key];\n            }\n        });\n        // User can define _init function if complex initialisation required\n        // For example, onAdd/onRemove callbacks can be given here\n        if (this._init && typeof this._init === 'function') {\n            this._init(...argsList);\n        }\n    };\n    RG.extend2(CompDecl, ComponentBase);\n\n    // Create the member functions (getters/setters) for prototype\n    Object.keys(members).forEach((propName: string) => {\n        // Check that we are not overwriting anything in base class\n        if (ComponentBase.prototype.hasOwnProperty(propName)) {\n            RG.err('component.js', `DataComponent: ${type}`,\n                `${propName} is reserved in Base`);\n        }\n\n        // Create the setter method unless it exists in Base\n        const setter: string = formatSetterName(propName);\n        if (ComponentBase.prototype.hasOwnProperty(setter)) {\n            RG.err('component.js', `DataComponent: ${type}`,\n                `${setter} is reserved in Base`);\n        }\n        CompDecl.prototype[setter] = function(value: any) {\n            this[propName] = value;\n        };\n\n        // Create the getter method unless it exists in Base\n        const getter: string = formatGetterName(propName);\n        if (ComponentBase.prototype.hasOwnProperty(setter)) {\n            RG.err('component.js', `DataComponent: ${type}`,\n                `${getter} is reserved in Base`);\n        }\n        CompDecl.prototype[getter] = function() {\n            return this[propName];\n        };\n    });\n\n    // Record down the objects refs here (for serialisation)\n    if (compAttrib.objRefs) {\n        CompDecl.prototype.objRefs = Object.freeze(compAttrib.objRefs);\n    }\n\n    CompDecl.prototype.members = Object.freeze(members);\n    handleCompAttrib(CompDecl, compAttrib);\n    Component.createdCompDecls[type] = CompDecl;\n    addNewCompDecl(type, CompDecl);\n    return CompDecl;\n};\nComponent.DataComponent = DataComponent;\n\nfunction formatGetterName(propName: string) {\n    return 'get' + propName.capitalize();\n}\nfunction formatSetterName(propName: string) {\n    return 'set' + propName.capitalize();\n}\n\n/* Same TagComponent, except only one per entity is preserved. Adding another\n * will remove the existing one. */\nexport const UniqueTagComponent = (type: string, compAttrib: any = {}) => {\n    return TagComponent(type, Object.assign({_isUnique: true}, compAttrib));\n};\nComponent.UniqueTagComponent = UniqueTagComponent;\n\n/* Same DataComponent, except only one per entity is preserved. Adding another\n * will remove the existing one. */\nexport const UniqueDataComponent = (type: string, members: any, compAttrib: any = {}) => {\n    return DataComponent(type, members,\n        Object.assign({_isUnique: true}, compAttrib));\n};\nComponent.UniqueDataComponent = UniqueDataComponent;\n\n/* Same as TagComponent but removes serialisation. This component is used by\n* systems for transient stuff like Attacks, Move and SpellCasting. */\nexport const TransientTagComponent = (type: string, compAttrib: any = {}) => {\n    return TagComponent(type,\n        Object.assign({toJSON: NO_SERIALISATION}, compAttrib));\n};\nComponent.TransientTagComponent = TransientTagComponent;\n\n/* Same as TransientTagComponent, but allows specifying data fields. */\nexport const TransientDataComponent = (type: string, members: any, compAttrib: any = {}) => {\n    return DataComponent(type, members,\n        Object.assign({toJSON: NO_SERIALISATION}, compAttrib));\n};\nComponent.TransientDataComponent = TransientDataComponent;\n\nexport const UniqueTransientDataComponent = (type: string, members: any, compAttrib = {}) => {\n    return DataComponent(type, members,\n        Object.assign({\n            _isUnique: true,\n            toJSON: NO_SERIALISATION\n        }, compAttrib)\n    );\n};\nComponent.UniqueTransientDataComponent = UniqueTransientDataComponent;\n// TODO UniqueTransientTagComponent\n\n/* Raises an error if two comp declarations with same type are created. */\nfunction errorIfCompDeclExists(type: string) {\n    if (Component.createdCompDecls[type]) {\n        RG.err('Component', 'Tag/DataComponent',\n            `Duplicate decl: ${type}`);\n    }\n}\n//---------------------------------------------------------------------------\n// ECS COMPONENTS\n//---------------------------------------------------------------------------\n\n/* Important Guidelines:\n * =====================\n *\n *  A component constructor must NOT take any\n *  parameters. Call Base constructor with the type. (which must be identical\n *  to the Object type). Don't forget extend2() at the end. See existing comps\n *  for details.\n *\n *  To benefit from serialisation, all methods should be named:\n *    setXXX - getXXX\n *  Note that if you have any methods starting with set/get, these are used in\n *  the serialisation UNLESS you override toJSON() method.\n *\n *  If only one instance of component should exist for an entity, set\n *    this._unique = true.\n *  inside the component.\n *\n *  If serialisation using toJSON is completely undesirable, use the following:\n *    this.toJSON = NO_SERIALISATION;\n *  inside your component.\n *\n *  WARNING: don't mess with or override getType/setType functions. This will\n *  almost certainly break the logic.\n *\n *  If the component requires refs to other custom objects (ie Entities, Comps),\n *  you must write custom toJSON(), and use RG.getObjRef() for serialize those\n *  fields.\n */\n\n/* Given an entity, serializes its components. */\nexport const compsToJSON = (ent): {[key: string]: any} => {\n    const components = {};\n    const thisComps = ent.getComponents();\n    Object.keys(thisComps).forEach(id => {\n        const compJson = thisComps[id].toJSON();\n        if (compJson) {\n            components[id] = compJson;\n        }\n    });\n    return components;\n};\nComponent.compsToJSON = compsToJSON;\n\nComponent.idCount = 0;\n\nexport function getIDCount() {\n    return Component.idCount;\n}\n\nexport function setIDCount(idCount) {\n    return Component.idCount = idCount;\n}\nComponent.setIDCount = setIDCount;\n\n/* Base class for all components. Provides callback hooks, copying and cloning.\n * */\nexport const ComponentBase = function(type: string) {\n    this._type = type;\n    this._entity = null;\n    this._id = Component.idCount++;\n    this._isUnique = false;\n\n    this._onAddCallbacks = [];\n    this._onRemoveCallbacks = [];\n};\nComponent.ComponentBase = ComponentBase;\n\nComponentBase.prototype.getID = function(): number {return this._id;};\nComponentBase.prototype.setID = function(id: number): void {this._id = id;};\n\nComponentBase.prototype.getEntity = function() {return this._entity;};\nComponentBase.prototype.setEntity = function(entity) {\n    if (this._entity === null && entity !== null) {\n        this._entity = entity;\n    }\n    else if (entity === null) {\n        this._entity = null;\n    }\n    else {\n        RG.err('Base', 'setEntity', 'Entity already set.');\n    }\n};\n\n/* Used when entity (item) with component is cloned. The component is\n * also cloned, but entity ref must be changed. */\nComponentBase.prototype.changeEntity = function(newEntity) {\n    // Check done for error detection purposes, so that changeEntity() is not\n    // called on new comps withot existing entity\n    if (!RG.isNullOrUndef([this._entity])) {\n        this._entity.remove(this.getID());\n        newEntity.add(this);\n    }\n    else {\n        RG.err('Base', 'changeEntity',\n            'No entity set. Use setEntity() instead of changeEntity()');\n    }\n};\n\nComponentBase.prototype.isUnique = function() {return this._isUnique;};\n\nComponentBase.prototype.getType = function() {return this._type;};\nComponentBase.prototype.setType = function(type) {this._type = type;};\n\n// Called when a component is added to the entity\nComponentBase.prototype.entityAddCallback = function(entity) {\n    this.setEntity(entity);\n    for (let i = 0; i < this._onAddCallbacks.length; i++) {\n        this._onAddCallbacks[i]();\n    }\n};\n\n// Called when a component is removed from the entity\nComponentBase.prototype.entityRemoveCallback = function() {\n    for (let i = 0; i < this._onRemoveCallbacks.length; i++) {\n        this._onRemoveCallbacks[i]();\n    }\n    this.setEntity(null);\n};\n\nComponentBase.prototype.addCallback = function(name, cb) {\n    if (name === 'onAdd') {this._onAddCallbacks.push(cb);}\n    else if (name === 'onRemove') {this._onRemoveCallbacks.push(cb);}\n    else {\n        RG.err('Base',\n            'addCallback', 'CB name ' + name + ' must be onAdd/onRemove');\n    }\n};\n\n/* Removes all callbacks of given type. */\nComponentBase.prototype.removeCallbacks = function(name) {\n    if (name === 'onAdd') {\n        this._onAddCallbacks = [];\n    }\n    else if (name === 'onRemove') {\n        this._onRemoveCallbacks = [];\n    }\n    else {\n        this._onAddCallbacks = [];\n        this._onRemoveCallbacks = [];\n    }\n};\n\n/* Works correctly for any component having only simple getters and setters. For\n * more complex components, roll out a separate clone function. */\nComponentBase.prototype.clone = function() {\n    const compType = this.getType();\n    if (Component.hasOwnProperty(compType)) {\n        const comp = new Component[compType]();\n        comp.copy(this);\n        return comp;\n    }\n    else {\n        RG.err('Base', 'clone',\n            `No type |${compType}| in Component.`);\n    }\n    return null;\n};\n\n/* Works for any component implementing getXXX/setXXX functions. Does a shallow\n * copy of properties only though. */\nComponentBase.prototype.copy = function(rhs) {\n    for (const p in this) {\n        if (/^get/.test(p)) {\n            const getter = p;\n            if (getter !== 'getEntity' && getter !== 'getID') {\n                const setter = getter.replace('get', 'set');\n                if (typeof rhs[getter] === 'function') {\n                    if (typeof this[setter] === 'function') {\n                        const attrVal = rhs[getter]();\n                        this[setter](attrVal);\n                    }\n                }\n            }\n        }\n    }\n};\n\nComponentBase.prototype.equals = function(rhs) {\n    return this.getType() === rhs.getType();\n};\n\nComponentBase.prototype.toString = function() {\n    return 'Component: ' + this.getType();\n};\n\n/* Creates a simple JSON representation of the component. NOTE: This relies on\n * getters and setters being named similarly, ie getABC/setABC! Don't rely on\n * this function if you need something more sophisticated. */\nComponentBase.prototype.toJSON = function() {\n    const obj = {};\n    for (const p in this) {\n        if (/^get/.test(p)) {\n            const getter = p;\n            if (getter !== 'getEntity') {\n                if (typeof this[getter] === 'function') {\n                    const setter = getter.replace('get', 'set');\n                    if (typeof this[setter] === 'function') {\n                        // To de-serialize, we can then do\n                        //   obj[setter](json[setter])\n                        obj[setter] = this[getter]();\n                    }\n                }\n            }\n        }\n    }\n    return obj;\n};\nComponent.Base = ComponentBase;\n\nexport interface ComponentBase {\n    getEntity(): any;\n}\n\n/* Factory function that should be used instead of new Component[varName]. */\nexport const create = function(compName: string, ...args) {\n    if (Component[compName]) {\n        return new Component[compName](...args);\n    }\n    RG.err('Component', 'create',\n        `Comp type |${compName}| does not exist.`);\n    return null;\n};\nComponent.create = create;\n\nexport const defineComponent = function(name: string, args) {\n    if (!Component.hasOwnProperty(name)) {\n        const CompDecl = DataComponent(name, args);\n        return CompDecl;\n    }\n    RG.err('Component', 'defineComponent',\n        `Component ${name} already defined`);\n    return null;\n};\nComponent.defineComponent = defineComponent;\n\nexport const undefineComponent = function(type) {\n    delete Component.createdCompDecls[type];\n    delete Component[type];\n};\nComponent.undefineComponent = undefineComponent;\n","\nimport RG from './rg';\nimport {compsToJSON} from './component/component.base';\nimport * as Component from './component/component';\nimport * as Mixin from './mixin';\nimport {Entity} from './entity';\nimport {EventPool} from '../src/eventpool';\nimport {Dice} from './dice';\nimport {TCoord} from './interfaces';\n\ntype SentientActor = import('./actor').SentientActor;\n\nconst POOL = EventPool.getPool();\n\n//---------------------------------------------------------------------------\n// ITEMS\n//---------------------------------------------------------------------------\n\nexport const Item: any = {};\n\n/* Models an item. Each item is ownable by someone. During game, there are no\n * items with null owners. Ownership shouldn't be ever set to null. */\nexport class ItemBase extends Entity {\n\n    public isOwnable: boolean;\n    public useArgs: any;\n    public isUsable: boolean;\n    protected _owner: SentientActor | ItemBase;\n    private _name: string;\n\n    constructor(name: string) {\n        super();\n        this.isOwnable = true;\n        this._owner = null;\n        this._name = name;\n        this.isUsable = false;\n        this.add(new Component.Typed(RG.ITEM.BASE, RG.TYPE_ITEM));\n        this.add(new Component.Item());\n        this.add(new Component.Physical());\n    }\n\n    public setOwner(owner): void {\n        if (RG.isNullOrUndef([owner])) {\n            RG.err('ItemBase', 'setOwner', 'Owner cannot be null.');\n        }\n        else {\n            this._owner = owner;\n        }\n    }\n\n    /* Returns the top-level owner. Used mainly to recover actor owner of items\n     * inside inventory. */\n    public getTopOwner() {\n        let owner = this._owner;\n        while ((owner as ItemBase).getOwner) {\n            owner = (owner as ItemBase).getOwner();\n        }\n        return owner;\n    }\n\n    /* Returns the direct owner of this object.*/\n    public getOwner() {return this._owner;}\n\n    public getX(): number {\n        if (this._owner) {return this._owner.getX();}\n        return null;\n    }\n\n    public getY(): number {\n        if (this._owner) {return this._owner.getY();}\n        return null;\n    }\n\n    public getXY(): TCoord {\n        if (this._owner) {return this._owner.getXY();}\n        return null;\n    }\n\n    public getLevel() {\n        if (this._owner) {return this._owner.getLevel();}\n        return null;\n    }\n\n    public setName(name) {this._name = name;}\n    public getName() {return this._name;}\n\n    public setWeight(weight: number): void {\n        this.get('Physical').setWeight(weight);\n    }\n\n    public getWeight(): number {return this.get('Physical').getWeight();}\n\n    public setValue(value: number): void {this.get('Item').setValue(value);}\n    public getValue(): number {return this.get('Item').getValue();}\n\n    public incrCount(count: number): void {this.get('Item').incrCount(count);}\n    public decrCount(count: number): void {this.get('Item').decrCount(count);}\n    public getCount(): number {return this.get('Item').getCount();}\n    public setCount(count: number): void {this.get('Item').setCount(count);}\n\n    public getType(): string {return this.get('Typed').getObjType();}\n    public setType(type: string): void {return this.get('Typed').setObjType(type);}\n    public getPropType(): string {return this.get('Typed').getPropType();}\n    public setPropType(type: string): void {\n        return this.get('Typed').setPropType(type);\n    }\n\n    public setDamageType(type: string): void {this.get('Item').setDamageType(type);}\n    public getDamageType(): string {return this.get('Item').getDamageType();}\n\n    public getNameWithCount(): string {\n        const name = this.getName();\n        const count = this.getCount();\n        return `${name} (x${count})`;\n    }\n\n\n    /* Used when showing the item in inventory lists etc. */\n    public toString(): string {\n        let txt = this.getName() + ', ' + this.getType() + ', ';\n        const totalWeight = this.getWeight() * this.getCount();\n        txt += totalWeight.toFixed(2) + 'kg';\n        txt = this.getCount() + ' x ' + txt;\n        if (this.has('GemBound')) {\n            txt += ' (Bound)';\n        }\n        if (this.has('Stats')) {\n            txt += ' ' + this.get('Stats').toString();\n        }\n        return txt;\n    }\n\n    public copy(rhs: ItemBase): void {\n        this.setName(rhs.getName());\n        this.setType(rhs.getType());\n        this.setWeight(rhs.getWeight());\n        this.setValue(rhs.getValue());\n\n        if (rhs.useArgs) {\n            this.useArgs = rhs.useArgs;\n        }\n        if (rhs.isUsable) {\n            this.useItem = rhs.useItem.bind(this);\n        }\n\n        const comps = Object.values(rhs.getComponents());\n        comps.forEach((comp: any) => {\n            this.add(comp.clone());\n        });\n    }\n\n    public useItem(obj): boolean {\n        return false;\n    }\n\n    public clone(): ItemBase {\n        const newItem = new ItemBase(this.getName());\n        newItem.copy(this);\n        return newItem;\n    }\n\n    public equals(item: ItemBase): boolean {\n        if (this.getType() !== item.getType()) {return false;}\n        if (this.getID() === item.getID()) {\n            return true;\n        }\n        let res = this.getName() === item.getName();\n        res = res && (this.getWeight() === item.getWeight());\n        res = res && !(this.has('GemBound') || item.has('GemBound'));\n        return res;\n    }\n\n    public toJSON(): any {\n        const json: any = {\n            setID: this.getID(),\n            setName: this.getName(),\n            setType: this.getType(),\n            isUsable: this.isUsable\n        };\n        json.components = compsToJSON(this);\n        return json;\n    }\n\n}\nItem.Base = ItemBase;\n\n//----------------\n/* RGItemFood */\n//----------------\nexport class Food extends ItemBase {\n\n    protected _energy: number;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.FOOD);\n        this._energy = 0; // per 0.1 kg\n        this.isUsable = true;\n    }\n\n    public setEnergy(energy: number): void {this._energy = energy;}\n    public getEnergy(): number {return this._energy;}\n\n    /* Uses (eats) the food item.*/\n    public useItem(obj: any): boolean {\n        // TODO move this into the system\n        if (obj.hasOwnProperty('target')) {\n            const cell = obj.target;\n            if (cell.hasActors()) {\n                const target = cell.getProp('actors')[0];\n                if (target.has('Hunger')) {\n                    let totalEnergy = this.getConsumedEnergy();\n                    if (target.has('NourishedOne')) {\n                        totalEnergy *= 3;\n                    }\n                    target.get('Hunger').addEnergy(totalEnergy);\n                    if (this.getCount() === 1) {\n                        const msg = {item: this};\n                        POOL.emitEvent(RG.EVT_DESTROY_ITEM, msg);\n                        RG.gameMsg(target.getName() + ' consumes ' +\n                            this.getName());\n                    }\n                    else {\n                        this.decrCount(1);\n                    }\n                    return true;\n                }\n                else {\n                    RG.gameWarn(target.getName() +\n                        ' is not interested in eating.');\n                }\n            }\n            else {\n                RG.gameWarn('There\\'s no one to give food to.');\n            }\n        }\n        else {\n            RG.err('ItemFood', 'useItem', 'No target given in obj.');\n        }\n        return false;\n    }\n\n    public getConsumedEnergy(): number {\n        return Math.round(this.getWeight() * this._energy / 0.1);\n    }\n\n    public toJSON(): any {\n        const json = super.toJSON();\n        json.setEnergy = this.getEnergy();\n        return json;\n    }\n\n    public clone(): Food {\n        const newFood = new Item.Food(this.getName());\n        newFood.copy(this);\n        newFood.setEnergy(this.getEnergy());\n        return newFood;\n    }\n}\n\nItem.Food = Food;\n\n//------------------\n/* Corpse */\n//------------------\nexport class Corpse extends ItemBase {\n    protected actorName: string;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.CORPSE);\n    }\n\n    public setActorName(name: string): void {\n        this.actorName = name;\n    }\n\n    public getActorName(): string {\n        return this.actorName;\n    }\n}\nItem.Corpse = Corpse;\n\n//------------------\n/* Weapon */\n//------------------\nexport class Weapon extends Mixin.Damage(ItemBase) {\n\n    private _weaponType: string;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.WEAPON);\n        this._weaponType = '';\n    }\n\n    public copy(rhs: Weapon): void {\n        super.copy(rhs);\n        this._weaponType = rhs.getWeaponType();\n    }\n\n    public clone(): Weapon {\n        const weapon = new Weapon(this.getName());\n        weapon.copy(this);\n        return weapon;\n    }\n\n    public setWeaponType(type: string): void {\n        this._weaponType = type;\n    }\n\n    public getWeaponType(): string {\n        return this._weaponType;\n    }\n\n    public toJSON(): any {\n        const json = super.toJSON();\n        json.setWeaponType = this._weaponType;\n        return json;\n    }\n\n}\n\nItem.Weapon = Weapon;\n\n//-------------------------\n/* MissileWeapon */\n//-------------------------\nexport class MissileWeapon extends Weapon {\n\n    private _fireRate: number;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.MISSILE_WEAPON);\n        this._fireRate = 1;\n    }\n\n    public setFireRate(rate: number): void {\n        this._fireRate = rate;\n    }\n\n    public getFireRate(): number {\n        return this._fireRate;\n    }\n\n    public copy(rhs: MissileWeapon): void {\n        super.copy(rhs);\n        this.setFireRate(rhs.getFireRate());\n    }\n\n    public clone(): MissileWeapon {\n        const weapon = new MissileWeapon(this.getName());\n        weapon.copy(this);\n        return weapon;\n    }\n\n    public equals(rhs): boolean {\n        if (super.equals(rhs)) {\n            return this._fireRate === rhs.getFireRate();\n        }\n        return false;\n    }\n\n    public toJSON(): any {\n        const json = super.toJSON();\n        json.setFireRate = this._fireRate;\n        return json;\n    }\n\n}\nItem.MissileWeapon = MissileWeapon;\n\n//---------------------------------------\n/* Ammo Object for ammunition. */\n//---------------------------------------\nexport class Ammo extends Weapon {\n    private _ammoType: string;\n\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.AMMUNITION);\n        this.add(new Component.Ammo());\n        this._ammoType = '';\n    }\n\n    public setAmmoType(type) {this._ammoType = type;}\n    public getAmmoType() {return this._ammoType;}\n\n    public copy(rhs: Ammo): void {\n        super.copy(rhs);\n        this.setAmmoType(rhs.getAmmoType());\n    }\n\n    public clone(): Ammo {\n        const ammo = new Ammo(this.getName());\n        ammo.copy(this);\n        return ammo;\n    }\n\n    public equals(rhs): boolean {\n        if (super.equals(rhs)) {\n            return this._ammoType === rhs.getAmmoType();\n        }\n        return false;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setAmmoType = this._ammoType;\n        return json;\n    }\n\n}\n\nItem.Ammo = Ammo;\n\n//-------------------------------------------\n/* Armour Object for armour items. */\n//-------------------------------------------\nexport class Armour extends Mixin.Defense(ItemBase) {\n\n    private _armourType: string;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.ARMOUR);\n        this._armourType = null;\n\n    }\n\n    public setArmourType(type: string): void {this._armourType = type;}\n    public getArmourType(): string {return this._armourType;}\n\n    public copy(rhs: Armour): void {\n        super.copy(rhs);\n        this.setArmourType(rhs.getArmourType());\n    }\n\n    public clone(): Armour {\n        const armour = new Armour(this.getName());\n        armour.copy(this);\n        return armour;\n    }\n\n    public equals(rhs): boolean {\n        let res = super.equals(rhs);\n        res = res && this._armourType === rhs.getArmourType();\n        return res;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setArmourType = this.getArmourType();\n        return json;\n    }\n}\n\nItem.Armour = Armour;\n\n//--------------------------------------\n/* Potion Object for potions. */\n//--------------------------------------\nexport class Potion extends ItemBase {\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.POTION);\n        this.isUsable = true;\n    }\n\n    public useItem(obj): boolean {\n        if (obj.hasOwnProperty('target')) {\n            const cell = obj.target;\n            if (cell.hasActors()) {\n                const target = cell.getProp('actors')[0];\n                const die = new Dice(1, 10, 2);\n                const pt = die.roll();\n                if (target.has('Health')) {\n                    target.get('Health').addHP(pt);\n                    const owner = (this.getOwner() as ItemBase).getOwner();\n                    const useItemComp = new Component.UseItem();\n                    useItemComp.setTarget(target);\n                    useItemComp.setItem(this);\n                    useItemComp.setUseType(RG.USE.DRINK);\n                    owner.add(useItemComp);\n                    return false;\n                }\n            }\n            else {\n                RG.gameWarn('Cannot see anyone there for using the potion.');\n            }\n        }\n        else {\n            RG.err('ItemPotion', 'useItem', 'No target given in obj.');\n        }\n        return false;\n    }\n\n    public clone(): Potion {\n        const newPotion = new Item.Potion(this.getName());\n        newPotion.copy(this);\n        return newPotion;\n    }\n}\n\nItem.Potion = Potion;\n\n//----------------------------------------\n/* Rune Object for rune stones. */\n//----------------------------------------\nexport class Rune extends ItemBase {\n\n    private _charges: number;\n\n    constructor(name: string) {\n        super(name);\n        this.setType(RG.ITEM.RUNE);\n\n        this._charges = 1;\n    }\n\n    public getCharges(): number {return this._charges;}\n    public setCharges(charges: number): void {this._charges = charges;}\n\n    public clone(): Rune {\n        const rune = new Rune(this.getName());\n        rune.copy(this);\n        return rune;\n    }\n\n    public copy(rhs: Rune): void {\n        super.copy(rhs);\n        this.setCharges(rhs.getCharges());\n    }\n\n    public equals(rhs): boolean {\n        let res = super.equals(rhs);\n        if (rhs.getCharges) {\n            res = res && this.getCharges() === rhs.getCharges();\n            return res;\n        }\n        return false;\n    }\n\n    public toString(): string {\n        let res = super.toString();\n        res += ` charges: ${this.getCharges()}`;\n        return res;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setCharges = this.getCharges();\n        return json;\n    }\n}\nItem.Rune = Rune;\n\n//----------------------------------------------\n/* Missile Object for thrown missile. */\n//----------------------------------------------\nexport class Missile extends Weapon {\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.MISSILE);\n    }\n\n    public clone(): Missile {\n        const weapon = new Missile(this.getName());\n        weapon.copy(this);\n        return weapon;\n    }\n\n}\n\nItem.Missile = Missile;\n\n//------------------------------------------------------\n/* Container An item which holds other items. */\n//------------------------------------------------------\nexport class Container extends ItemBase {\n\n    private _items: ItemBase[];\n    private _iter: number;\n    private _removedItem: null | ItemBase;\n\n    constructor(owner) {\n        super('container');\n        this.setOwner(owner);\n\n        this._items = [];\n        this._iter = 0;\n        this._removedItem = null; // Last removed item\n    }\n\n    /* Adds one item to container. Always succeeds. */\n    public _addItem(item: ItemBase): void {\n        let matchFound = false;\n        for (let i = 0; i < this._items.length; i++) {\n            if (this._items[i].equals(item)) {\n                this._items[i].incrCount(item.getCount());\n                matchFound = true;\n                break;\n            }\n        }\n\n        if (!matchFound) {\n            item.setOwner(this);\n            this._items.push(item);\n        }\n    }\n\n    /* Returns the total weight of the container.*/\n    public getWeight(): number {\n        let sum = 0;\n        for (let i = 0; i < this._items.length; i++) {\n            sum += this._items[i].getWeight() * this._items[i].getCount();\n        }\n        return sum;\n    }\n\n    /* Adds an item. Container becomes item's owner.*/\n    public addItem(item: ItemBase): void {\n        if (item.getCount() <= 0) {\n            const str = JSON.stringify(item);\n            RG.warn('Container', 'addItem',\n                `Possible bug. Tried to add item with count 0: ${str}`);\n        }\n        if (item.getType() === 'container') {\n            if (this.getOwner() !== item) {\n                this._addItem(item);\n            }\n            else {\n                RG.err('Item', 'addItem',\n                    'Added item is container\\'s owner. Impossible.');\n            }\n        }\n        else {\n            this._addItem(item);\n        }\n    }\n\n    public getItems(): ItemBase[] {return this._items.slice();}\n\n    /* Check by pure obj ref. Returns true if contains item ref.*/\n    public hasItemRef(item: ItemBase): boolean {\n        const index = this._items.indexOf(item);\n        if (index !== -1) {return true;}\n        return false;\n    }\n\n    /* Used for stacking/equip purposes only. Uses item.equals(), much slower\n     * than hasItemRef(). */\n    public hasItem(item: ItemBase): boolean {\n        if (this.hasItemRef(item)) {return true;}\n        const index = this._getMatchingItemIndex(item);\n        return index >= 0;\n    }\n\n    /* Tries to remove an item. Returns true on success, false otherwise.*/\n    public removeItem(item: ItemBase): boolean {\n        if (this.hasItem(item)) {\n            return this._removeItem(item);\n        }\n        this._removedItem = null;\n        return false;\n    }\n\n    public _getMatchingItemIndex(item: ItemBase): number {\n        for (let i = 0; i < this._items.length; i++) {\n            if (item.equals(this._items[i])) {return i;}\n        }\n        return -1;\n    }\n\n    public _removeItem(item: ItemBase): boolean {\n        const i = this._getMatchingItemIndex(item);\n\n        if (i === -1) {\n            RG.err('ItemContainer', '_removeItem',\n                'Negative index found. Horribly wrong.');\n            return false;\n        }\n\n        if (this._items[i].getCount() === 1) {\n            this._removedItem = item;\n            this._items.splice(i, 1);\n        }\n        else {\n            this._removedItem = RG.removeStackedItems(this._items[i], 1);\n            if (this._items[i].getCount() === 0) {this._items.splice(i, 1);}\n        }\n        return true;\n    }\n\n    /* Returns last removed item if removeItem returned true.*/\n    public getRemovedItem(): ItemBase {return this._removedItem;}\n\n    /* Removes N items from the inventory of given type.*/\n    public removeNItems(item: ItemBase, n: number): boolean {\n        let count = 0;\n        while ((count < n) && this.removeItem(item)) {\n            ++count;\n        }\n\n        if (this._removedItem !== null) {\n            this._removedItem.setCount(count);\n        }\n        else {\n            RG.err('ItemContainer', 'removeNItems',\n                'this._removedItem was null. It should be a valid item.');\n            return false;\n        }\n\n        if (count > 0) {return true;}\n        return false;\n    }\n\n    /* Returns first item or null for empty container.*/\n    public first(): ItemBase | null {\n        if (this._items.length > 0) {\n            this._iter = 1;\n            return this._items[0];\n        }\n        return null;\n    }\n\n    /* Returns next item from container or null if there are no more items.*/\n    public next(): ItemBase | null {\n        if (this._iter < this._items.length) {\n            return this._items[this._iter++];\n        }\n        return null;\n    }\n\n    public last() {\n        return this._items[this._items.length - 1];\n    }\n\n        /* Returns true for empty container.*/\n    public isEmpty(): boolean {\n        return this._items.length === 0;\n    }\n\n    public toString(): string {\n        let str = 'Container: ' + this.getName() + '\\n';\n        const items = this.getItems();\n        for (let i = 0; i < items.length; i++) {\n            str += items[i].toString() + '\\n';\n        }\n        return str;\n    }\n\n    public toJSON() {\n        const json = [];\n        const items = this.getItems();\n        for (let i = 0; i < items.length; i++) {\n            json.push(items[i].toJSON());\n        }\n        return json;\n    }\n}\nItem.Container = Container;\n\n//----------------\n/* Gold */\n//----------------\nexport class Gold extends ItemBase {\n\n    protected _purity: number;\n\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.GOLD);\n        this._purity = 1.0;\n    }\n\n    public getPurity() {\n        return this._purity;\n    }\n\n    public setPurity(purity) {\n        this._purity = purity;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setType = this.getType();\n        json.setPurity = this._purity;\n        return json;\n    }\n}\n\nItem.Gold = Gold;\n\n\n//-------------------------------------------\n/* GoldCoin because we need money. */\n//-------------------------------------------\n/* Gold coins have standard weight and are (usually) made of pure gold.*/\nexport class GoldCoin extends Gold {\n    constructor(name?: string) {\n        const _name = name || RG.GOLD_COIN_NAME;\n        super(_name);\n        this.setType(RG.ITEM.GOLD_COIN);\n        this._purity = 1.0;\n        this.setWeight(0.03);\n    }\n}\nItem.GoldCoin = GoldCoin;\n\n//-------------------------------------------\n/* SpiritGem for capturing spirits. */\n//-------------------------------------------\nexport class SpiritGem extends ItemBase {\n\n    private _spirit: SentientActor;\n    private _hasSpirit: boolean;\n\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.SPIRITGEM);\n\n        this._spirit = null;\n        this._hasSpirit = false;\n\n    }\n\n    public getArmourType(): string {return this.getType();}\n\n    public hasSpirit(): boolean {return this._hasSpirit;}\n    public getSpirit(): SentientActor {return this._spirit;}\n\n    public setSpirit(spirit: SentientActor): void {\n        if (!this._hasSpirit) {\n            this._hasSpirit = true;\n            this._spirit = spirit;\n        }\n        else {\n            RG.err('Item.SpiritGem', 'setSpirit', 'Tried to overwrite spirit');\n        }\n    }\n\n    /* Used for capturing the spirits inside the gem.*/\n    public useItem(obj): boolean {\n        const binder = (this.getOwner() as ItemBase).getOwner();\n        if (binder) {\n            const bindComp = new Component.SpiritBind();\n            bindComp.setTarget(obj.target);\n            bindComp.setBinder(binder);\n            this.add(bindComp);\n            return true;\n        }\n        else {\n            const msg = `binder is null. obj: ${JSON.stringify(obj)}`;\n            RG.err('Item.SpiritGem', 'useItem', msg);\n        }\n        return false;\n    }\n\n    public clone(): SpiritGem {\n        const gem = new SpiritGem(this.getName());\n        gem.copy(this);\n        return gem;\n    }\n\n    public copy(rhs: SpiritGem): void {\n        super.copy(rhs);\n        if (rhs.hasSpirit()) {this.setSpirit(rhs.getSpirit());}\n    }\n\n    public equals(rhs): boolean {\n        let res = super.equals(rhs);\n        res = res && (this.getSpirit() === rhs.getSpirit());\n        return res;\n    }\n\n    public toString(): string {\n        let txt = super.toString();\n        if (this.hasSpirit()) {\n            const stats = this.getSpirit().get('Stats');\n            txt += '(' + this.getSpirit().getName() + ')';\n            txt += ' Str: ' + stats.getStrength();\n            txt += ' Agi: ' + stats.getAgility();\n            txt += ' Acc: ' + stats.getAccuracy();\n            txt += ' Wil: ' + stats.getWillpower();\n        }\n        else {txt += '(Empty)';}\n        return txt;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.hasSpirit = this.hasSpirit();\n        if (json.hasSpirit) {json.setSpirit = this.getSpirit().toJSON();}\n        return json;\n    }\n}\nItem.SpiritGem = SpiritGem;\n\nexport interface SpiritGem {\n    getAccuracy(): number;\n    getAgility(): number;\n    getMagic(): number;\n    getPerception(): number;\n    getStrength(): number;\n    getWillpower(): number;\n}\n\nfor (let i = 0; i < RG.GET_STATS.length; i++) {\n    SpiritGem.prototype[RG.GET_STATS[i]] = function(): number {\n        return (\n            () => {\n            const funcName: string = RG.GET_STATS[i];\n            if (!this._hasSpirit) {return 0;}\n            return this._spirit.get('Stats')[funcName]();\n        })(); // Immediately call the function\n    };\n}\n\n//------------------\n/* Mineral */\n//------------------\nexport class Mineral extends ItemBase {\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.MINERAL);\n    }\n}\nItem.Mineral = Mineral;\n\nexport interface BookData {\n    [key: string]: any[];\n}\n\nexport class Book extends ItemBase {\n\n    public text: string[];\n    public metaData: BookData;\n\n    constructor(name) {\n        super(name);\n        this.setType(RG.ITEM.BOOK);\n        this.text = []; // Shown to player\n        this.metaData = {}; // Used in quests etc\n    }\n\n    public addMetaData(key, obj) {\n        if (!this.metaData.hasOwnProperty[key]) {\n            this.metaData[key] = [];\n        }\n        this.metaData[key].push(obj);\n    }\n\n    public setMetaData(data) {\n        this.metaData = data;\n    }\n\n    public getMetaData(key) {\n        return this.metaData[key];\n    }\n\n    public useItem(): boolean {\n        const owner = this.getTopOwner();\n        if (owner) {\n            const compRead = new Component.Read();\n            compRead.setReadTarget(this);\n            owner.add(compRead);\n            return true;\n        }\n        return false;\n    }\n\n    public getText() {\n        return this.text;\n    }\n\n    public addText(textLine) {\n        this.text.push(textLine);\n    }\n\n    public setText(text) {\n        this.text = text;\n    }\n\n    public clone() {\n        const book = new Book(this.getName());\n        book.copy(this);\n        return book;\n    }\n\n    public copy(rhs) {\n        super.copy(rhs);\n        const text = rhs.getText().slice();\n        this.setText(text);\n        this.metaData = JSON.parse(JSON.stringify(rhs.metaData));\n    }\n\n    public equals(rhs) {\n        // Never stack any books\n        if (this.getID() === rhs.getID()) {return true;}\n        return false;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setText = this.text;\n        json.setMetaData = this.metaData;\n        return json;\n    }\n}\nItem.Book = Book;\n","\nimport RG from './rg';\n\ntype Level = import('./level').Level;\ntype Cell = import('./map.cell').Cell;\n\ninterface IConfData {\n    [key: string]: any;\n}\n\n/* This file contains verification functions for game logic. */\n\n/* Verifies that all stairs are properly connected. */\nexport const verifyStairsConnections = function(game, msg) {\n    const levels = game.getLevels();\n    const stairsLists = levels.map(lv => lv.getStairs());\n    stairsLists.forEach(sList => {\n        sList.forEach(s => {\n            if (typeof s.isConnected !== 'function') {\n                RG.err('verify.js', 'verifyStairsConnections',\n                    'stairs not correct type: ' + JSON.stringify(s));\n            }\n            else if (!s.isConnected()) {\n                let errMsg = '|' + msg + '| stairs: ' + JSON.stringify(s);\n\n                const srcLevel = s.getSrcLevel();\n                if (!srcLevel) {\n                    errMsg += ' srcLevel missing,';\n                }\n                else {\n                    errMsg += ' srcLevel parent ' + srcLevel.getParent() + ',';\n                }\n\n                const targetLevel = s.getTargetStairs();\n                if (!targetLevel) {\n                    errMsg += ' targetLevel missing,';\n                }\n                else {\n                    errMsg += ' targetLevel parent: ' + targetLevel.getParent();\n                }\n\n                if (!s.getTargetStairs()) {\n                    errMsg += ' targetStairs missing';\n                }\n                RG.err('verify.js', 'verifyConnections', errMsg);\n            }\n        });\n    });\n};\n\nexport class Conf {\n\n    private _name: string;\n\n    constructor(objName: string) {\n        this._name = objName;\n    }\n\n    /* Verifies that configuration contains all required keys.*/\n    public verifyConf(funcName: string, conf: IConfData, required: string[]) {\n        let ok = true;\n        let errorMsg = '';\n        required.forEach(req => {\n            if (!this.verifyReq(conf, req)) {\n                ok = false;\n                errorMsg += ` Missing: ${req}`;\n            }\n            else if (reqHasNullValue(conf, req)) {\n                ok = false;\n                errorMsg += ` Undef/null value in: ${req}`;\n            }\n        });\n        if (!ok) {\n            RG.err(this._name, 'verifyConf', `${funcName} ${errorMsg}`);\n        }\n        return ok;\n    }\n\n    /* Verifies that a requirement is met, ie it exists. */\n    public verifyReq(conf: IConfData, req: string) {\n        const allReqs = req.split('|');\n        let ok = false;\n        allReqs.forEach(givenReq => {\n            if (conf.hasOwnProperty(givenReq)) {\n                if (!ok) {\n                    ok = true;\n                }\n                else {\n                    const confJSON = JSON.stringify(conf);\n                    const msg = `Req ${req} is mutex. Conf: ${confJSON}`;\n                    RG.err(this._name, 'verifyReq', msg);\n                }\n            }\n        });\n        return ok;\n    }\n\n\n}\n\n/* Returns true if a requirement has a null value. */\nfunction reqHasNullValue(conf: IConfData, req: string): boolean {\n    const allReqs = req.split('|');\n    const ok = allReqs.length > 0;\n    let hasNull = false;\n    for (const givenReq of allReqs) {\n        if (conf.hasOwnProperty(givenReq)) {\n            if (RG.isNullOrUndef([conf[givenReq]])) {\n                hasNull = true;\n            }\n        }\n    }\n    return !ok && hasNull;\n}\n\nexport const verifySaveData = function(data, failFast = true) {\n    traverseObj(data, failFast);\n};\n\nconst stack = [];\nexport function traverseObj(obj: any, failFast?: boolean, maxStack = 30) {\n    const allErrors = [];\n    for (const prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            stack.push(prop);\n            if (stack.length < maxStack) {\n                if (typeof obj[prop] === 'object') {\n                    traverseObj(obj[prop]);\n                }\n                else if (typeof obj[prop] === 'function') {\n                    let msg = `Error. Func in ${JSON.stringify(stack)}`;\n                    msg += `\\n\\tProp: ${prop}`;\n                    msg += `\\n\\tValue: ${obj[prop].toString()}`;\n                    if (failFast) {\n                        throw new Error(msg);\n                    }\n                    else {\n                        allErrors.push(msg);\n                    }\n                }\n                else if (typeof obj[prop] === 'string') {\n                    if (/function/.test(obj[prop])) {\n                        let msg = `function in string <<${obj[prop]}>>\\n`;\n                        msg += `\\tStack is ${stack.join('.')}`;\n                        throw new Error(msg);\n                    }\n\n                }\n            }\n            stack.pop();\n        }\n    }\n    if (allErrors.length > 0) {\n        const msg = allErrors.join('\\n');\n        throw new Error(msg);\n    }\n}\n\n/* Checks that cell items match the level cache of items. */\nexport function verifyLevelCache(level: Level) {\n    const items = level.getItems();\n    const map = level.getMap();\n    const cells: Cell[] = map.getCells();\n\n    const cellItems = {};\n    cells.forEach((cell: Cell) => {\n        if (cell.hasItems()) {\n            const cItems = cell.getItems();\n            cItems.forEach(item => {\n                cellItems[item.getID()] = item;\n            });\n        }\n    });\n\n    const levelItems = {};\n    items.forEach(item => {\n        levelItems[item.getID()] = item;\n    });\n\n    const nCellItems = Object.keys(cellItems).length;\n    const nLevelItems = Object.keys(levelItems).length;\n    if (nLevelItems !== nCellItems) {\n        let msg = `nCellItems: ${nCellItems}`;\n        msg += `, nLevelItems: ${nLevelItems}`;\n        console.error('Mismatch in cell/level item length:', msg);\n    }\n\n    const inCellsButNotLevel = [];\n    Object.keys(cellItems).forEach(id => {\n        if (levelItems.hasOwnProperty(id)) {\n            delete levelItems[id];\n        }\n        else {\n            inCellsButNotLevel.push(cellItems[id]);\n        }\n    });\n\n    const inLevelButNotCells = [];\n    Object.keys(levelItems).forEach(id => {\n        if (cellItems.hasOwnProperty(id)) {\n            delete cellItems[id];\n        }\n        else {\n            inLevelButNotCells.push(levelItems[id]);\n        }\n    });\n\n    inCellsButNotLevel.forEach(item => {\n        console.error('\\tIn cells but NOT level: ', item.getName());\n    });\n    inLevelButNotCells.forEach(item => {\n        console.error('\\tIn level but NOT cells: ', item.getName());\n    });\n}\n\n","/*\n * Contains objects related to the game world in Battles. This includes areas,\n * dungeons, dungeon branches etc.\n */\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:world');\n\nimport RG from './rg';\nimport * as Element from './element';\nimport {GameObject} from './game-object';\nimport {EventPool} from './eventpool';\nimport {Random} from './random';\nimport {Level} from './level';\nimport {Cell} from './map.cell';\nimport {SentientActor} from './actor';\nimport {FactoryLevel} from './factory.level';\nimport * as Component from './component';\nimport {TCoord} from './interfaces';\nimport {Entity} from './entity';\n\nconst POOL: EventPool = EventPool.getPool();\n\ntype Stairs = Element.ElementStairs;\nconst ElementStairs = Element.ElementStairs;\n\nexport const World: any = {};\n\ntype SubZoneArg = SubZoneBase | string;\nexport type SubZoneConn = [SubZoneArg, SubZoneArg, number, number];\n\ntype ZoneObj = SubZoneBase | ZoneBase;\n\ninterface Entrance {\n    levelNumber: number;\n    x: number;\n    y: number;\n}\n\nexport interface IAreaTileJSON {\n    level: number;\n    [key: string]: any;\n    isJSON: boolean;\n}\n\nexport type AreaTileObj = AreaTile | IAreaTileJSON;\n\nconst RNG = Random.getRNG();\n\nconst oppositeEdge = {\n    east: 'west',\n    north: 'south',\n    south: 'north',\n    west: 'east'\n};\n\nfunction removeExistingConnection(level: Level, x: number, y: number): void {\n    const cell = level.getMap().getCell(x, y);\n    if (cell.hasConnection()) {\n        const conn = cell.getConnection();\n        debug(`world.js Removing conn@${x},${y}`);\n        if (!level.removeElement(conn, x, y)) {\n            RG.err('world.ts', 'removeExistingConnection',\n               `Failed to remove conn @ ${x}, ${y}`);\n\n        }\n    }\n}\n\n/* Adds exits (ie passages/stairs) to the given edge (or any edge) of the level.\n * Returns an array of created connections. */\nexport const addExitsToEdge = (\n    level: Level, exitType = 'passage', edge = 'any', overwrite = false\n): Stairs[] => {\n    // level, exitType = 'passage', edge = 'any', overwrite = false) => {\n    const map = level.getMap();\n    const cols = map.cols;\n    const rows = map.rows;\n    const exitsAdded = [];\n\n    for (let row = 1; row < rows - 1; row++) {\n        if (edge === 'any' || edge === 'west') {\n            if (map.isPassable(0, row) || overwrite) {\n                const exitWest = new ElementStairs(exitType, level);\n                removeExistingConnection(level, 0, row);\n                if (!overwrite) {level.addElement(exitWest, 0, row);}\n                else {level.addStairs(exitWest, 0, row);}\n                exitsAdded.push(exitWest);\n            }\n        }\n        if (edge === 'any' || edge === 'east') {\n            if (map.isPassable(cols - 1, row) || overwrite) {\n                const exitEast = new ElementStairs(exitType, level);\n                removeExistingConnection(level, cols - 1, row);\n                if (!overwrite) {level.addElement(exitEast, cols - 1, row);}\n                else {level.addStairs(exitEast, cols - 1, row);}\n                exitsAdded.push(exitEast);\n            }\n        }\n    }\n\n    for (let col = 1; col < cols - 1; col++) {\n        if (edge === 'any' || edge === 'north') {\n            if (map.isPassable(col, 0) || overwrite) {\n                const exitNorth = new ElementStairs(exitType, level);\n                removeExistingConnection(level, col, 0);\n                if (!overwrite) {level.addElement(exitNorth, col, 0);}\n                else {level.addStairs(exitNorth, col, 0);}\n                exitsAdded.push(exitNorth);\n            }\n        }\n        if (edge === 'any' || edge === 'south') {\n            if (map.isPassable(col, rows - 1) || overwrite) {\n                const exitSouth = new ElementStairs(exitType, level);\n                removeExistingConnection(level, col, rows - 1);\n                if (!overwrite) {level.addElement(exitSouth, col, rows - 1);}\n                else {level.addStairs(exitSouth, col, rows - 1);}\n                exitsAdded.push(exitSouth);\n            }\n        }\n    }\n    return exitsAdded;\n};\n\n/* Returns true if given level edge has any connections. If edge=any, then\n * checks all edges. edge can also be 'north', 'south', 'west', 'east' */\nexport const edgeHasConnections = (level: Level, edge: string): boolean => {\n    const map = level.getMap();\n    const cols = map.cols;\n    const rows = map.rows;\n    for (let row = 1; row < rows - 1; row++) {\n        if (edge === 'any' || edge === 'west') {\n            if (map.getCell(0, row).hasConnection()) {\n                return true;\n            }\n        }\n        if (edge === 'any' || edge === 'east') {\n            if (map.getCell(cols - 1, row).hasConnection()) {\n                return true;\n            }\n        }\n    }\n    for (let col = 1; col < cols - 1; col++) {\n        if (edge === 'any' || edge === 'north') {\n            if (map.getCell(col, 0).hasConnection()) {\n                return true;\n            }\n        }\n        if (edge === 'any' || edge === 'south') {\n            if (map.getCell(col, rows - 1).hasConnection()) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/* Returns stairs leading to other zones. Used only for testing\n* purposes. */\nfunction getStairsOther(name: string, levels: Level[]): Stairs[] {\n    const stairs = [];\n    levels.forEach(level => {\n        const sList = level.getStairs();\n        sList.forEach((s: Stairs) => {\n            const levelStair = s.getTargetLevel();\n            if (levelStair && (levelStair as Level).getParent) {\n                const levelParent = (levelStair as Level).getParent();\n                if (levelParent && levelParent.getName() !== name) {\n                    stairs.push(s);\n                }\n            }\n        });\n    });\n    return stairs;\n}\n\n/* Finds a level from a named zone such as city quarter, dungeon branch or\n * mountain face. */\nfunction findLevel(name: string, zones: ZoneObj[], nLevel): Level | null {\n    const zone = zones.find(z => {\n        return z.getName() === name;\n    });\n    if (zone) {\n        const levels = zone.getLevels();\n        if (levels.length > nLevel) {\n            return levels[nLevel];\n        }\n        else {\n            const msg = `Name: ${name}`;\n            RG.err('world.js', 'findLevel',\n                `${msg} nLev ${nLevel} out of bounds (${levels.length - 1})`);\n        }\n    }\n    // If level null, issue warning\n    return null;\n}\n\nfunction findSubZone(name: string, subZones: SubZoneBase[]): SubZoneBase {\n    const subZone = subZones.find(sz => (\n        sz.getName() === name\n    ));\n    return subZone;\n}\n\n/* Returns a random free cell with any existing connections to avoid\n * piling up two connections. */\nfunction getFreeCellWithoutConnection(level: Level): Cell {\n    let stairCell = level.getFreeRandCell();\n    while (stairCell.hasConnection()) {\n        stairCell = level.getFreeRandCell();\n    }\n    return stairCell;\n}\n\n/* Does linear connection of levels to given direction. */\nfunction connectLevelsLinear(levels: Level[]): void {\n    const nLevels = levels.length;\n    const arrStairsDown = [];\n    const arrStairsUp = [];\n\n    for (let nl = 0; nl < nLevels; nl++) {\n        const src: Level = levels[nl];\n\n        let extrasSrc = null;\n        if (src.hasExtras()) {extrasSrc = src.getExtras();}\n\n        // Create stairs down\n        if (nl < nLevels - 1) {\n            const targetDown: Level = levels[nl + 1];\n\n            const stairsDown = new ElementStairs('stairsDown', src, targetDown);\n            const stairCell = getFreeCellWithoutConnection(src);\n            let [sX, sY] = [stairCell.getX(), stairCell.getY()];\n            if (extrasSrc) {\n                if (extrasSrc.endPoint) {\n                    [sX, sY] = extrasSrc.endPoint;\n                }\n            }\n\n            src.addStairs(stairsDown, sX, sY);\n            arrStairsDown.push(stairsDown);\n        }\n\n        // Create stairs up\n        if (nl > 0) {\n            const targetUp = levels[nl - 1];\n            const stairsUp = new ElementStairs('stairsUp', src, targetUp);\n\n            const stairCell = getFreeCellWithoutConnection(src);\n            let [sX, sY] = [stairCell.getX(), stairCell.getY()];\n            if (extrasSrc) {\n                if (extrasSrc.startPoint) {\n                    [sX, sY] = extrasSrc.startPoint;\n                }\n            }\n\n            src.addStairs(stairsUp, sX, sY);\n            arrStairsUp.push(stairsUp);\n        }\n    }\n\n    // Finally connect the stairs together\n    for (let nl = 0; nl < nLevels; nl++) {\n        if (nl < nLevels - 1) {\n            arrStairsDown[nl].connect(arrStairsUp[nl]);\n        }\n    }\n}\nWorld.connectLevelsLinear = connectLevelsLinear;\n\n/* Can be used to connect two levels and constraining the placement of the\n * connections with the level. */\nfunction connectLevelsConstrained(conf1, conf2): void {\n    const level1 = conf1.level;\n    const level2 = conf2.level;\n    let x1 = Math.floor(level1.getMap().cols / 2);\n    let y1 = conf1.y();\n\n    // Iterate until we find cell without connection close to top of the\n    // level\n    const map1 = level1.getMap();\n    let cell1 = map1.getCell(x1, y1);\n    while (cell1.hasConnection()) {\n        x1 += 1;\n        if (x1 === map1.cols) {\n            x1 = 0;\n            if (y1 > 0) {--y1;}\n        }\n        cell1 = map1.getCell(x1, y1);\n    }\n\n    const cell2 = getFreeCellWithoutConnection(level2);\n    const [x2, y2] = [cell2.getX(), cell2.getY()];\n\n    const l1Stairs = new ElementStairs('stairsUp', level1, level2);\n    const l2Stairs = new ElementStairs('stairsDown', level2, level1);\n    l1Stairs.connect(l2Stairs);\n    level1.addStairs(l1Stairs, x1, y1);\n    level2.addStairs(l2Stairs, x2, y2);\n}\n\n/* Tries to connect stairs to level N in the given list of levels. This creates\n * a new connection element into the target level. */\nfunction connectLevelToStairs(levels: Level[], nLevel, stairs): boolean {\n    if (nLevel < levels.length) {\n        const level = levels[nLevel];\n        const otherQuartLevel = stairs.getSrcLevel();\n\n        if (!RG.isNullOrUndef([otherQuartLevel])) {\n            const down = !stairs.isDown();\n            const name = down ? 'stairsDown' : 'stairsUp';\n            const newStairs = new ElementStairs(name,\n                level, otherQuartLevel);\n\n            const cell = getFreeCellWithoutConnection(level);\n            level.addStairs(newStairs, cell.getX(), cell.getY());\n            newStairs.connect(stairs);\n            return true;\n        }\n    }\n    else {\n        RG.err('world.js', 'connectLevelToStairs',\n            `nLevel: ${nLevel} out of bounds (${levels.length})`);\n\n    }\n    return false;\n}\n\nfunction getSubZoneArgs(subZones, sz1Arg, sz2Arg): [SubZoneBase, SubZoneBase] {\n    let sz1 = sz1Arg;\n    let sz2 = sz2Arg;\n\n    // Lookup objects by name if they are string\n    if (typeof sz1Arg === 'string' && typeof sz2Arg === 'string') {\n        sz1 = subZones.find(sz => sz.getName() === sz1Arg);\n        sz2 = subZones.find(sz => sz.getName() === sz2Arg);\n    }\n    return [sz1, sz2];\n}\n\n/* Connects 2 sub-zones like dungeon branch or city quarter together.*/\nfunction connectSubZones(subZones: SubZoneBase[], sz1Arg, sz2Arg, l1, l2) {\n    if (RG.isNullOrUndef([l1, l2])) {\n        RG.err('World', 'connectSubZones',\n            `l1 (${l1}) and l2 (${l2}) must be non-null and integers.`);\n    }\n    const [sz1, sz2] = getSubZoneArgs(subZones, sz1Arg, sz2Arg);\n\n    if (RG.isNullOrUndef([sz1, sz2])) {\n        RG.err('World', 'connectSubZones',\n            'Cannot connect null subZones. Check the names/refs.');\n    }\n\n    let s2IsDown = true;\n    if (l1 > l2) {s2IsDown = false;}\n    const name = s2IsDown ? 'stairsDown' : 'stairsUp';\n    const b2Stairs = new ElementStairs(name);\n    const sz2Levels = sz2.getLevels();\n    if (l2 < sz2Levels.length) {\n        const cell = getFreeCellWithoutConnection(sz2Levels[l2]);\n        sz2Levels[l2].addStairs(b2Stairs, cell.getX(), cell.getY());\n        b2Stairs.setSrcLevel(sz2Levels[l2]);\n        sz1.connectLevelToStairs(l1, b2Stairs);\n    }\n    else {\n        RG.err('World', 'connectSubZones',\n            'Level ' + l2 + ' doesn\\'t exist in sub-zone ' + sz2.getName());\n    }\n\n}\n\n/* Connects a random (unconnected) edge of two levels together. */\nfunction connectSubZoneEdges(subZones, sz1Arg, sz2Arg, l1, l2): boolean {\n    const edge1 = RNG.arrayGetRand(['north', 'south', 'east', 'west']);\n    const edge2 = oppositeEdge[edge1];\n    const [sz1, sz2] = getSubZoneArgs(subZones, sz1Arg, sz2Arg);\n\n    const sz1Level = sz1.getLevel(l1);\n    const sz2Level = sz2.getLevel(l2);\n\n    /* sz1Level.getMap().debugPrintInASCII();\n    sz2Level.getMap().debugPrintInASCII();*/\n\n    const newExits1: Stairs[] = addExitsToEdge(sz1Level, 'exit', edge1, true);\n    const newExits2: Stairs[] = addExitsToEdge(sz2Level, 'exit', edge2, true);\n\n    /* sz1Level.getMap().debugPrintInASCII();\n    sz2Level.getMap().debugPrintInASCII();*/\n\n    if (newExits1.length === 0 || newExits2.length === 0) {\n        return false;\n    }\n\n    const conn1 = newExits1;\n    const conn2 = newExits2;\n\n    const conn1Len = conn1.length;\n    const conn2Len = conn2.length;\n    const maxLen = conn1Len <= conn2Len ? conn1Len : conn2Len;\n\n    for (let i = 0; i < maxLen; i++) {\n        conn1[i].connect(conn2[i]);\n    }\n    return true;\n}\n\nfunction getEntrance(levels, entrance): Stairs {\n    if (entrance === null) {return null;}\n    const {x, y} = entrance;\n    const entrLevel = levels[entrance.levelNumber];\n    const entrCell = entrLevel.getMap().getCell(x, y);\n    return entrCell.getStairs();\n}\n\n/* Connects given array of area tiles together. */\nfunction connectTiles(tiles, sizeX, sizeY): void {\n    if (sizeX === 1 || sizeY === 1) {\n        RG.err('world.js', 'connectTiles',\n            'sizeX or sizeY == 1 not implemented.');\n    }\n    for (let x = 0; x < sizeX; x++) {\n        for (let y = 0; y < sizeY; y++) {\n            debug(`Trying to connect tile ${x},${y} now`);\n            if (x < sizeX - 1 && y < sizeY - 1) {\n                debug(`>> Connecting tile ${x},${y} now`);\n                tiles[x][y].connect(\n                    tiles[x + 1][y], tiles[x][y + 1]);\n            }\n            else if (x < sizeX - 1) {\n                debug(`>> Connecting tile ${x},${y} now`);\n                tiles[x][y].connect(tiles[x + 1][y], null);\n            }\n            else if (y < sizeY - 1) {\n                debug(`>> Connecting tile ${x},${y} now`);\n                tiles[x][y].connect(null, tiles[x][y + 1]);\n            }\n        }\n    }\n}\n\n\nWorld.addExitsToEdge = addExitsToEdge;\nWorld.edgeHasConnections = edgeHasConnections;\n\n//----------------\n// WorldBase\n//----------------\n\nexport interface IWorldBaseJSON {\n    hierName: string;\n    id: number;\n    name: string;\n    type: string;\n    parent?: number;\n    components?: {[key: string]: any};\n}\n\nexport interface IZoneBaseJSON extends IWorldBaseJSON {\n    x: number;\n    y: number;\n}\n\nexport interface ISubZoneBaseJSON extends IWorldBaseJSON {\n    nLevels: number;\n    levels: number[];\n}\n\n/* Base class for world places. Each place has name and type + full hierarchical\n* name to trace where the place is in hierarchy. */\nexport class WorldBase extends Entity {\n\n    public name: string;\n    public hierName: string;\n    public type: string;\n    public parent: WorldBase | null;\n\n    constructor(name) {\n        super();\n        this.name = name;\n        this.type = 'base';\n        this.parent = null;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getHierName(): string {\n        return this.hierName;\n    }\n\n    public setHierName(hierName: string): void {\n        this.hierName = hierName;\n    }\n\n    public getType(): string {\n        return this.type;\n    }\n\n    public setType(type: string) {\n        this.type = type;\n    }\n\n    public getParent(): WorldBase {\n        return this.parent;\n    }\n\n    public setParent(parent: WorldBase) {\n        this.parent = parent;\n    }\n\n    public toJSON(): IWorldBaseJSON {\n        const obj: IWorldBaseJSON = { // TODO fix typings\n            hierName: this.hierName,\n            id: this.getID(),\n            name: this.name,\n            type: this.type\n        };\n        if (this.parent) {\n            obj.parent = this.parent.getID();\n        }\n        obj.components = Component.compsToJSON(this);\n        return obj;\n    }\n}\n\nWorld.Base = WorldBase;\n\n//---------------------\n// ZoneBase\n//---------------------\n\nexport class ZoneBase extends WorldBase {\n    public tileX: number;\n    public tileY: number;\n    protected _subZones: SubZoneBase[];\n\n    constructor(name) {\n        super(name);\n        this._subZones = [];\n    }\n\n    public getSubZoneArgs(s1Arg, s2Arg) {\n        return getSubZoneArgs(this._subZones, s1Arg, s2Arg);\n    }\n\n    public setTileXY(x: number, y: number): void {\n        this.tileX = x;\n        this.tileY = y;\n    }\n\n    public getTileXY(): TCoord {\n        return [this.tileX, this.tileY];\n    }\n\n    public addSubZone(subZone: SubZoneBase): boolean {\n        if (subZone.getID() === this.getID()) {\n            RG.err('ZoneBase', 'addSubZone',\n                'Tried to add itself as sub zone: ' + this.getName());\n        }\n        if (!RG.isNullOrUndef([subZone])) {\n            subZone.setParent(this);\n            this._subZones.push(subZone);\n            return true;\n        }\n        return false;\n    }\n\n    public hasSubZone(subZone: SubZoneBase): boolean {\n        const index = this._subZones.indexOf(subZone);\n        return index >= 0;\n    }\n\n    public getLevels(): Level[] {\n        let res = [];\n        this._subZones.forEach(subFeat => {\n            res = res.concat(subFeat.getLevels());\n        });\n        return res;\n    }\n\n    public getPlaceEntities(): Entity[] {\n        let res: Entity[] = [this];\n        this._subZones.forEach(subFeat => {\n            res.push(subFeat);\n        });\n        return res;\n    }\n\n    public connectSubZones(s1Arg, s2Arg, l1, l2): void {\n        connectSubZones(this._subZones, s1Arg, s2Arg, l1, l2);\n    }\n\n    public findLevel(name: string, nLevel: number): Level {\n        const level = findLevel(name, this._subZones, nLevel);\n        return level;\n    }\n\n    public findSubZone(name: string): SubZoneBase {\n        const subZone = findSubZone(name, this._subZones);\n        return subZone;\n    }\n\n    /* Returns each entrance in each subzone. */\n    public getEntrances(): Stairs[] {\n        const entrances = [];\n        this._subZones.forEach(sz => {\n            const szEntr = sz.getEntrance();\n            if (szEntr) {\n                entrances.push(szEntr);\n            }\n        });\n        return entrances;\n    }\n\n    public removeListeners(): void {\n        this._subZones.forEach(sz => {\n            sz.removeListeners();\n        });\n    }\n\n    public toJSON(): IZoneBaseJSON {\n        const json = <IZoneBaseJSON>super.toJSON();\n        json.x = this.tileX;\n        json.y = this.tileY;\n        return json;\n    }\n\n    public getID2Place(): {[key: number]: WorldBase} {\n        const res: {[key: number]: WorldBase} = {[this.getID()]: this};\n        this._subZones.forEach(sz => {\n            res[sz.getID()] = sz;\n        });\n        return res;\n    }\n}\n\nWorld.ZoneBase = ZoneBase;\n\n//--------------------------\n// SubZoneBase\n//--------------------------\n/* Base class for sub-zones like branches, quarters and mountain faces.\n * Mostly has logic to\n * manipulate level features like shops, armorers etc.\n */\nexport class SubZoneBase extends WorldBase {\n\n    protected _levels: Level[];\n    protected _entrance: Entrance | null;\n    protected _levelFeatures: Map<string, any[]>;\n    protected _levelCount: number;\n\n    constructor(name: string) {\n        super(name);\n        this._levelFeatures = new Map();\n        this._levels = [];\n        this._levelCount = 0;\n    }\n\n    /* Returns entrance/exit for the branch.*/\n    public getEntrance(): Stairs {\n        return getEntrance(this._levels, this._entrance);\n    }\n\n    public getLevelN(nLevel: number): Level {\n        if (nLevel < this._levels.length) {\n            return this._levels[nLevel];\n        }\n        else {\n            const nLevels = this._levels.length;\n            RG.err('SubZoneBase', 'getLevels',\n                `No nLevel ${nLevel} found. Max: ${nLevels}`);\n        }\n        return null;\n    }\n\n    public getLevels(): Level[] {\n        return this._levels.slice();\n    }\n\n    public hasLevel(level: Level): boolean {\n        const index = this._levels.indexOf(level);\n        return index >= 0;\n    }\n\n    public connectLevelToStairs(nLevel: number, stairs: Stairs) {\n        if (!connectLevelToStairs(this._levels, nLevel, stairs)) {\n            RG.err('SubZoneBase', 'connectLevelToStairs',\n                'Stairs must be first connected to other level.');\n        }\n    }\n\n    /* Returns stairs leading to other sub-zones. Used only for testing\n    * purposes. */\n    public getStairsOther(): Stairs[] {\n        return getStairsOther(this.getName(), this._levels);\n    }\n\n    public addLevelFeature(feat): void {\n        const type = feat.getType();\n        if (!this._levelFeatures.has(type)) {\n            this._levelFeatures[type] = [];\n        }\n        this._levelFeatures[type].push(feat);\n    }\n\n    public removeListeners() {\n        // Should be implemented in the derived class\n        // Does nothing if there are no listeners to remove\n    }\n\n    public getLevel(nLevel: number): Level {\n        if (nLevel < this._levels.length) {\n            return this._levels[nLevel];\n        }\n        else {\n            const info = `${this.getType()}, ${this.getName()}`;\n            const hasLevels = `Has ${this._levels.length} levels`;\n            RG.err('SubZoneBase', 'getLevel',\n                `${info}, nLevel: ${nLevel}, ${hasLevels}`);\n        }\n        return null;\n    }\n\n    /* Adds one level into the sub-zone. Checks for various possible errors like\n     * duplicate levels. */\n    public addLevel(level: Level): void {\n        if (!RG.isNullOrUndef([level])) {\n            if (!this.hasLevel(level)) {\n                level.setLevelNumber(this._levelCount++);\n                this._levels.push(level);\n                level.setParent(this);\n            }\n            else {\n                let msg = 'Trying to add existing level. ';\n                msg += ' ID: ' + level.getID();\n                RG.err('SubZoneBase', 'addLevel', msg);\n            }\n        }\n        else {\n            RG.err('SubZoneBase', 'addLevel',\n                'Level is not defined.');\n        }\n    }\n\n    public toJSON(): ISubZoneBaseJSON {\n        const json = <ISubZoneBaseJSON>super.toJSON();\n        json.nLevels = this._levels.length;\n        json.levels = this._levels.map(level => level.getID());\n        return json;\n    }\n}\nWorld.SubZoneBase = SubZoneBase;\n\n//------------------\n// World.Branch\n//------------------\n/* World.Branch is a branch of dungeon. A branch is linear\n * progression of connected levels (usually with increasing difficulty).\n * A branch can have\n * entry points to other branches (or out of the dungeon). */\nexport class Branch extends SubZoneBase {\n\n    constructor(name: string) {\n        super(name);\n        this.setType('branch');\n        this._entrance = null;\n    }\n\n    public addEntrance(levelNumber: number): void {\n        const entrStairs = new ElementStairs('stairsUp');\n        this.setEntrance(entrStairs, levelNumber);\n    }\n\n    /* Adds entrance stairs for this branch. */\n    public setEntrance(stairs: Stairs, levelNumber: number): void {\n        if (levelNumber < this._levels.length) {\n            const level = this._levels[levelNumber];\n\n            const cell = getFreeCellWithoutConnection(level);\n            let [x, y] = cell.getXY();\n            if (level.hasExtras()) {\n                const extras = level.getExtras();\n                if (extras.startPoint) {\n                    [x, y] = extras.startPoint;\n                }\n            }\n\n            level.addStairs(stairs, x, y);\n            this._entrance = {levelNumber, x, y};\n        }\n        else {\n            RG.err('World.Branch', 'setEntrance',\n                `Invalid level number. Must be < ${this._levels.length}`);\n        }\n    }\n\n    public setEntranceLocation(entrance) {\n        if (!RG.isNullOrUndef([entrance])) {\n            this._entrance = entrance;\n        }\n        else {\n            RG.err('World.Branch', 'setEntranceLocation',\n                'Arg entrance is not defined.');\n        }\n    }\n\n    /* Returns entrance/exit for the branch.*/\n    public getEntrance(): Stairs {\n        return getEntrance(this._levels, this._entrance);\n    }\n\n\n    /* Connects the added levels together.*/\n    public connectLevels(): void {\n        connectLevelsLinear(this._levels);\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        const obj: any = {};\n        if (this._entrance) {\n            obj.entrance = this._entrance;\n        }\n        return Object.assign(obj, json);\n    }\n\n}\nWorld.Branch = Branch;\n\n//------------------\n// World.Dungeon\n//------------------\n/* Dungeons is a collection of branches.*/\nexport class Dungeon extends ZoneBase {\n\n    private _entranceNames: string[];\n\n    constructor(name) {\n        super(name);\n        this.setType('dungeon');\n        this._entranceNames = [];\n    }\n\n\n    /* Returns true if the dungeon has given branch.*/\n    public hasBranch(branch): boolean {\n        return this.hasSubZone(branch);\n    }\n\n    public getBranches(): Branch[] {\n        return this._subZones as Branch[];\n    }\n\n    /* Sets the entry branch(es) for the dungeon. */\n    public setEntrance(branchName): void {\n        if (typeof branchName === 'string') {\n            this._entranceNames = [branchName];\n        }\n        else {\n            this._entranceNames = branchName;\n        }\n    }\n\n    /* Adds one branch to the dungeon. Returns true if OK. */\n    public addBranch(branch: Branch): boolean {\n        if (!this.hasBranch(branch)) {\n            this._subZones.push(branch);\n            // branch.setDungeon(this);\n            branch.setParent(this);\n\n            // By default, have at least one entrance\n            if (this._subZones.length === 1) {\n                this.setEntrance(branch.getName());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /* Returns all entrances/exits for the dungeon.*/\n    public getEntrances(): Stairs[] {\n        const res = [];\n        const nSubFeats = this._subZones.length;\n        for (let i = 0; i < nSubFeats; i++) {\n            const branch = this._subZones[i];\n            if (this._entranceNames.indexOf(branch.getName()) >= 0) {\n                const entr = branch.getEntrance();\n                if (!RG.isNullOrUndef([entr])) {\n                    res.push(entr);\n                }\n            }\n        }\n        return res;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        const obj = {\n            branch: this._subZones.map(br => br.toJSON()),\n            entranceNames: this._entranceNames,\n            nBranches: this._subZones.length\n        };\n        return Object.assign(obj, json);\n    }\n\n}\nWorld.Dungeon = Dungeon;\n\n//------------------\n// AreaTile\n//------------------\n/* Area-tile is a level which has entry/exit points on a number of edges.\n * It is also used as container for zones such as cities and dungeons. */\nexport class AreaTile {\n\n    public cols: number;\n    public rows: number;\n    public zones: {[key: string]: ZoneBase[]};\n\n    private _tileX: number;\n    private _tileY: number;\n    private _area: Area;\n\n    private _level: Level;\n\n    constructor(x, y, area) {\n        this._tileX = x;\n        this._tileY = y;\n        this._area = area;\n\n        this.cols = null;\n        this.rows = null;\n\n        this._level = null;\n\n        // All zones inside this tile\n        this.zones = {\n            Dungeon: [],\n            Mountain: [],\n            City: [],\n            BattleZone: []\n        };\n\n    }\n\n    public getLevel(): Level {\n        return this._level;\n    }\n    public getTileX(): number {\n        return this._tileX;\n    }\n    public getTileY(): number {\n        return this._tileY;\n    }\n\n    public isNorthEdge(): boolean {\n        return this._tileY === 0;\n    }\n    public isSouthEdge(): boolean {\n        return this._tileY === (this._area.getSizeY() - 1);\n    }\n    public isWestEdge(): boolean {\n        return this._tileX === 0;\n    }\n    public isEastEdge(): boolean {\n        return this._tileX === (this._area.getSizeX() - 1);\n    }\n\n    /* Returns true for edge tiles.*/\n    public isEdge(): boolean {\n        if (this.isNorthEdge()) {return true;}\n        if (this.isSouthEdge()) {return true;}\n        if (this.isWestEdge()) {return true;}\n        if (this.isEastEdge()) {return true;}\n        return false;\n    }\n\n    /* Sets the level for this tile.*/\n    public setLevel(level: Level): void {\n        this._level = level;\n        this.cols = this._level.getMap().cols;\n        this.rows = this._level.getMap().rows;\n    }\n\n    /* Connect this tile to east and south tiles */\n    public connect(eastTile, southTile) {\n        const lastX = this.cols - 1;\n        const lastY = this.rows - 1;\n\n        // Connect to east tile, in y-direction\n        if (!RG.isNullOrUndef([eastTile])) {\n            const levelEast = eastTile.getLevel();\n            const map = this._level.getMap();\n            const mapEast = levelEast.getMap();\n\n            for (let y = 1; y <= lastY - 1; y++) {\n                const cell = map.getCell(lastX, y);\n                const cellEast = mapEast.getCell(0, y);\n\n                if (cell.isFree() && cellEast.isFree()) {\n                    const stairs = new ElementStairs('passage',\n                        this._level, levelEast);\n                    const stairsEast = new ElementStairs('passage',\n                        levelEast, this._level);\n                    stairs.setTargetStairs(stairsEast);\n                    stairsEast.setTargetStairs(stairs);\n\n                    this._level.addStairs(stairs, lastX, y);\n                    levelEast.addStairs(stairsEast, 0, y);\n                }\n            }\n        }\n\n        // Connect to south tile, in x-direction\n        if (!RG.isNullOrUndef([southTile])) {\n            const levelSouth = southTile.getLevel();\n            const map = this._level.getMap();\n            const mapSouth = levelSouth.getMap();\n\n            for (let x = 1; x <= lastX - 1; x++) {\n                const cell = map.getCell(x, lastY);\n                const cellSouth = mapSouth.getCell(x, 0);\n\n                if (cell.isFree() && cellSouth.isFree()) {\n                    const stairs = new ElementStairs('passage',\n                        this._level, levelSouth);\n                    const connSouth = new ElementStairs('passage',\n                        levelSouth, this._level);\n                    stairs.setTargetStairs(connSouth);\n                    connSouth.setTargetStairs(stairs);\n\n                    this._level.addStairs(stairs, x, lastY);\n                    levelSouth.addStairs(connSouth, x, 0);\n                }\n            }\n        }\n    }\n\n    public addZone(type: string, zone: ZoneBase): void {\n        if (RG.isNullOrUndef([zone.tileX, zone.tileY])) {\n            RG.err('AreaTile', 'addZone',\n                'No tileX/tileY given!');\n        }\n        if (!this.zones[type]) {\n            this.zones[type] = [];\n        }\n        this.zones[type].push(zone);\n    }\n\n    public getZones(type?: string): ZoneBase[] {\n        if (type) {\n            return this.zones[type];\n        }\n        let zones = [];\n        Object.keys(this.zones).forEach((tt: string) => {\n            zones = zones.concat(this.zones[tt]);\n        });\n        return zones;\n    }\n\n    public getLevels(): Level[] {\n        let res = [this._level];\n        Object.keys(this.zones).forEach(type => {\n            this.zones[type].forEach(z => {res = res.concat(z.getLevels());});\n        });\n\n        if (debug.enabled) {\n            let msg = this.toString();\n            msg = ` Tile ${msg} has ${res.length} levels from toJSON()`;\n            if (this._level.getID() === 1344) {\n                msg += `\\tLevels: ${res.map(l => l.getID())}`;\n            }\n            console.error(msg);\n        }\n\n        return res;\n    }\n\n    public getPlaceEntities(): Entity[] {\n        let res: Entity[] = [];\n        Object.keys(this.zones).forEach(type => {\n            this.zones[type].forEach(z => {res = res.concat(z.getPlaceEntities());});\n        });\n        return res;\n    }\n\n    public toString(): string {\n        let msg = `${this._tileX},${this._tileY}, ID: ${this._level.getID()}`;\n        msg += ` nZones: ${this.getZones().length}`;\n        return msg;\n    }\n\n    public toJSON() {\n        return {\n            x: this._tileX,\n            y: this._tileY,\n            level: this._level.getID(),\n            levels: this.getLevels().map(l => l.toJSON()),\n            // TODO split somehow between created/not created zones\n            nDungeons: this.zones.Dungeon.length,\n            dungeon: this.getZones('Dungeon').map(dg => dg.toJSON()),\n            nMountains: this.zones.Mountain.length,\n            mountain: this.getZones('Mountain').map(mt => mt.toJSON()),\n            nCities: this.zones.City.length,\n            city: this.getZones('City').map(city => city.toJSON()),\n            nBattleZones: this.zones.BattleZone.length,\n            battlezone: this.getZones('BattleZone').map(bz => bz.toJSON())\n        };\n    }\n\n    public removeListeners(): void {\n        Object.values(this.zones).forEach(zoneList => {\n            zoneList.forEach(zone => {\n                zone.removeListeners();\n            });\n        });\n    }\n}\nWorld.AreaTile = AreaTile;\n\n//------------------\n// Area\n//------------------\n/* Area is N x M area of tiles, with no linear progression like in dungeons.\n * Moving between tiles of areas happens by travelling to the edges of a tile.\n * Each tile is a level with special edge tiles.\n * */\nexport class Area extends WorldBase {\n\n    // Keeps track which tiles contains real AreaTile objects\n    public tilesLoaded: boolean[][];\n\n    // Control which tile has its zones created\n    public zonesCreated: {[key: string]: boolean};\n\n    private _sizeX: number;\n    private _sizeY: number;\n    private _cols: number;\n    private _rows: number;\n\n    private _tiles: AreaTileObj[][];\n\n    private _conf: {[key: string]: any};\n\n    constructor(name, sizeX, sizeY, cols, rows, levels?: Level[][]) {\n        super(name);\n        this.setType('area');\n        this._sizeX = parseInt(sizeX, 10);\n        this._sizeY = parseInt(sizeY, 10);\n\n        this._cols = cols || 30;\n        this._rows = rows || 30;\n\n        this._tiles = [];\n\n        this._conf = {};\n\n        // Control which tile has its zones created\n        this.zonesCreated = {};\n\n        // Keeps track which tiles contains real AreaTile objects\n        this.tilesLoaded = [];\n\n        // TODO move to class methods\n\n        this._init(levels);\n\n    }\n\n    public getSizeX(): number {\n        return this._sizeX;\n    }\n    public getSizeY(): number {\n        return this._sizeY;\n    }\n\n    public isLoaded(x, y): boolean {\n        return this.tilesLoaded[x][y];\n    }\n\n    public setLoaded(x, y): void {\n        this.tilesLoaded[x][y] = true;\n    }\n\n    public setUnloaded(x, y): void {\n        this.tilesLoaded[x][y] = false;\n    }\n\n    public markAllZonesCreated(): void {\n        Object.keys(this.zonesCreated).forEach(key => {\n            this.zonesCreated[key] = true;\n        });\n    }\n\n    public markTileZonesCreated(x, y): void {\n        this.zonesCreated[x + ',' + y] = true;\n    }\n\n    public tileHasZonesCreated(x, y): boolean {\n        return this.zonesCreated[x + ',' + y];\n    }\n\n    public getTiles(): AreaTileObj[][] {\n        return this._tiles;\n    }\n\n    public setTile(x, y, tile: AreaTile) {\n        this._tiles[x][y] = tile;\n    }\n\n    public setConf(conf) {\n        this._conf = conf;\n    }\n\n    public getConf() {\n        return this._conf;\n    }\n\n    public _init(levels?: Level[][]): void {\n        // Create the tiles\n        for (let x = 0; x < this._sizeX; x++) {\n            const tileColumn = [];\n            this.tilesLoaded.push([]);\n            for (let y = 0; y < this._sizeY; y++) {\n                this.zonesCreated[x + ',' + y] = false;\n                const newTile = new AreaTile(x, y, this);\n\n                // Scale the forest gen based on tile size\n                const forestConf = RG.getForestConf(this._cols, this._rows);\n                let level = null;\n                if (levels) {\n                    level = levels[x][y];\n                }\n                else {\n                    const factLevel = new FactoryLevel();\n                    level = factLevel.createLevel('forest',\n                        this._cols, this._rows, forestConf);\n                }\n\n                if (level !== RG.LEVEL_NOT_LOADED) {\n                    this.tilesLoaded[x][y] = true;\n                    level.setParent(this);\n                    newTile.setLevel(level);\n                    tileColumn.push(newTile);\n                }\n                else {\n                    this.tilesLoaded[x][y] = false;\n                    tileColumn.push(RG.TILE_NOT_LOADED);\n                }\n            }\n            this._tiles.push(tileColumn);\n        }\n\n        // Connect the tiles, unless levels already given (and connected)\n        // If levels are not connect, need to call connectTiles() manually\n        if (!levels) {\n            this.connectTiles();\n        }\n    }\n\n    /* Connects all tiles together from the sides. */\n    public connectTiles() {\n        connectTiles(this._tiles, this._sizeX, this._sizeY);\n    }\n\n    public getLevels(): Level[] {\n        let res = [];\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                // If tile is in-memory/not serialized, query levels\n                if (this.tilesLoaded[x][y]) {\n                    res = res.concat(this._tiles[x][y].getLevels());\n                }\n            }\n        }\n        return res;\n    }\n\n\n    /* Returns tile X,Y which has the level with given ID. */\n    public findTileXYById(id): TCoord | null {\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                if (this.tilesLoaded[x][y]) {\n                    const currId = this._tiles[x][y].getLevel().getID();\n                    try {\n                        if (currId === id) {\n                            return [x, y];\n                        }\n                    }\n                    catch (e) {\n                        let msg = `Area ${this.getID()} ERROR`;\n                        msg += `\\nFailed to call getLevel for tile ${x},${y}`;\n                        msg += `Tile as JSON: ', this._tiles[x][y]`;\n                        console.error(msg);\n                        throw new Error(e);\n                    }\n                }\n            }\n        }\n        this.printLevelIDs();\n        return null;\n    }\n\n    /* Returns true if the area has given level as a tile level. */\n    public hasTileWithId(id: number): boolean {\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                if (this.tilesLoaded[x][y]) {\n                    if (this._tiles[x][y].getLevel().getID() === id) {\n                        return true;\n                    }\n                }\n                else if ((this._tiles[x][y] as IAreaTileJSON).level === id) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Returns true if the area has tiles with given levels or level IDs. */\n    public hasTiles(arr): boolean {\n        let result = arr.length > 0;\n        arr.forEach(level => {\n            if (typeof level.getID === 'function') {\n                result = result && this.hasTileWithId(level.getID());\n            }\n            else if (Number.isInteger(level)) {\n                result = result && this.hasTileWithId(level);\n            }\n            else {\n                const str = JSON.stringify(level);\n                RG.err('Area', 'hasTiles',\n                    `Invalid level given ${str}. Must be Map.Level/ID`);\n            }\n        });\n        return result;\n    }\n\n    public getTileXY(x, y): AreaTileObj {\n        if (x >= 0 && x < this.getSizeX() && y >= 0 && y < this.getSizeY()) {\n            return this._tiles[x][y];\n        }\n        else {\n            const sizeX = this.getSizeX();\n            const sizeY = this.getSizeY();\n            RG.err('Area', 'getTileXY',\n                `Tile x,y (${x}, ${y}) is out of bounds (${sizeX}, ${sizeY}).`);\n        }\n        return null;\n    }\n\n    public addZone(type, zone: ZoneBase): void {\n        if (RG.isNullOrUndef([zone.tileX, zone.tileY])) {\n            RG.err('Area', 'addZone',\n                'No tileX/tileY given!');\n        }\n        this._tiles[zone.tileX][zone.tileY].addZone(type, zone);\n        zone.setParent(this);\n    }\n\n    public getZones(type): ZoneBase[] {\n        let res = [];\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                if (this.tilesLoaded[x][y]) {\n                    res = res.concat(this._tiles[x][y].getZones(type));\n                }\n            }\n        }\n        return res;\n    }\n\n    public createAreaConfig() {\n        return {\n            name: this.getName(),\n            maxX: this._sizeX,\n            maxY: this._sizeY\n        };\n    }\n\n    /* Serializes the Area into JSON. */\n    public toJSON() {\n        const json = super.toJSON();\n        const tilesJSON = [];\n        this._tiles.forEach((tileCol, x) => {\n            const tileColJSON = tileCol.map((tile, y) => {\n                if (this.tilesLoaded[x][y]) {\n                    return tile.toJSON();\n                }\n                else {\n                    return tile;\n                }\n            });\n            tilesJSON.push(tileColJSON);\n        });\n\n        const obj = {\n            isJSON: true,\n            conf: this.getConf(),\n            maxX: this._sizeX, maxY: this._sizeY,\n            cols: this._cols, rows: this._rows,\n            tiles: tilesJSON,\n            tilesLoaded: this.tilesLoaded,\n            zonesCreated: this.zonesCreated\n        };\n        return Object.assign(obj, json);\n    }\n\n    /* Execute function cb for each loaded tile. */\n    public forEachTileLoaded(cb) {\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                if (this.tilesLoaded[x][y]) {\n                    cb(x, y, this._tiles[x][y]);\n                }\n            }\n        }\n    }\n\n\n    /* Execute callback for each tile. */\n    public forEachTile(cb: (x: number, y: number, tile: AreaTileObj) => void) {\n        for (let x = 0; x < this._tiles.length; x++) {\n            for (let y = 0; y < this._tiles[x].length; y++) {\n                cb(x, y, this._tiles[x][y]);\n            }\n        }\n    }\n\n    public getPlaceEntities(): Entity[] {\n        let res: Entity[] = [this];\n        this.forEachTileLoaded((x, y, tile) => {\n            res = res.concat(this._tiles[x][y].getPlaceEntities());\n        });\n        return res;\n    }\n\n    public printLevelIDs(): void {\n        const allIDs: number[] = [];\n        this.forEachTile((x, y, tile) => {\n            if (this.tilesLoaded[x][y]) {\n                allIDs.push(this._tiles[x][y].getLevel().getID());\n            }\n            else {\n                allIDs.push((this._tiles[x][y] as IAreaTileJSON).level);\n            }\n\n        });\n    }\n\n    public printDebugInfo(): void {\n        const tilesJSON: TCoord[] = [];\n        const loadedTiles: TCoord[] = [];\n        const tilesOther: TCoord[] = [];\n        this.forEachTile((x, y, tile) => {\n            if ((tile as IAreaTileJSON).isJSON) {tilesJSON.push([x, y]);}\n            else if (this.tilesLoaded[x][y]) {loadedTiles.push([x, y]);}\n            else {tilesOther.push([x, y]);}\n        });\n\n        let msg = `Area ID ${this.getID()} debug info:\\n`;\n        msg += `\\t\\nTiles as JSON: ${tilesJSON.join(' | ')}`;\n        msg += `\\t\\nTiles LOADED: ${loadedTiles.join(' | ')}`;\n        msg += `\\t\\nTiles OTHER: ${tilesOther.join(' | ')}`;\n        this.printLevelIDs();\n        console.log('Tile[0][2]: ', this._tiles[0][2]);\n        console.log(msg);\n    }\n\n}\nWorld.Area = Area;\n\n//------------------\n// World.Mountain\n//------------------\n/* Mountains are places consisting of tiles and dungeons. Mountain has few\n * special tiles representing the summit.\n */\nexport class Mountain extends ZoneBase {\n\n    constructor(name) {\n        super(name);\n        this.setType('mountain');\n\n    /* MountainFace, 5 stages:\n            |       <- Summit\n           /|\\\n          /|||\\\n         /|||||\\\n        /|||||||\\\n       /|||||||||\\\n\n    4 tiletypes:\n        1. Summit (connect to all faces)\n        2. Left side tile (connect to face)\n        3. Right side tile (connect to face)\n        4. Central tiles (connect on all sides)\n\n    Summit is top-down view, while face is more of climbing,\n    from-the-angle view. Bit weird but should be fine.\n\n    Not implemented yet.\n    */\n\n    }\n\n    public findLevel(name: string, nLevel: number): Level {\n        const faces = this.getFaces();\n        const summits = this.getSummits();\n        let level = findLevel(name, faces, nLevel);\n        if (!level) {\n            level = findLevel(name, summits, nLevel);\n        }\n        return level;\n    }\n\n    public addSummit(summit): void {\n        this.addSubZone(summit);\n    }\n\n    public addFace(face): void {\n        this.addSubZone(face);\n    }\n\n    public getFaces() {\n        return this._subZones.filter(sz => sz.getType() === 'face');\n    }\n\n    public getSummits() {\n        return this._subZones.filter(sz => sz.getType() === 'summit');\n    }\n\n    public connectFaceAndSummit(face, summit, l1, l2) {\n        const [sz1, sz2] = this.getSubZoneArgs(face, summit);\n        if (sz2.getType() !== 'summit') {\n            const type = sz2.getType();\n            RG.err('World.Mountain', 'connectFaceAndSummit',\n                `Expected 2nd arg summit, got: ${type}`);\n        }\n        const level1 = sz1.getLevelN(l1);\n        const level2 = sz2.getLevelN(l2);\n        const connFace = {y: () => 0, level: level1};\n        const connSummit = {level: level2};\n        connectLevelsConstrained(connFace, connSummit);\n    }\n\n    public connectSubZones(s1Arg, s2Arg, l1, l2) {\n        const [sz1, sz2] = this.getSubZoneArgs(s1Arg, s2Arg);\n        // const sz1 = this.findSubZone(s1Arg);\n        // const sz2 = this.findSubZone(s2Arg);\n        if (sz1.getType() === 'face') {\n            if (sz2.getType() === 'summit') {\n                this.connectFaceAndSummit(sz1, sz2, l1, l2);\n                return;\n            }\n        }\n        else if (sz1.getType() === 'summit') {\n            if (sz2.getType() === 'face') {\n                // Note the re-ordered args here\n                this.connectFaceAndSummit(sz2, sz1, l2, l1);\n                return;\n            }\n        }\n        // face-face and summit-summit connections done here\n        super.connectSubZones(s1Arg, s2Arg, l1, l2);\n    }\n\n    /* Serializes the World.Mountain object. */\n    public toJSON() {\n        const json = super.toJSON();\n        const obj = {\n            nFaces: this.getFaces().length,\n            face: this.getFaces().map(face => face.toJSON()),\n            nSummits: this.getSummits().length,\n            summit: this.getSummits().map(summit => summit.toJSON())\n        };\n        return Object.assign(obj, json);\n    }\n}\nWorld.Mountain = Mountain;\n\n//----------------------\n// MountainFace\n//----------------------\n/* One side (face) of the mountain. Each side consists of stages, of X by 1\n * Areas. This is also re-used as a mountain summit because internally it's the\n * same. */\nexport class MountainFace extends SubZoneBase {\n\n    constructor(name) {\n        super(name);\n        this.setType('face');\n        this._entrance = null;\n    }\n\n    public setEntrance(stairs): void {\n        this._entrance = stairs;\n    }\n\n    public setEntranceLocation(entrance): void {\n        if (!RG.isNullOrUndef([entrance])) {\n            this._entrance = entrance;\n        }\n        else {\n            RG.err('MountainFace', 'setEntranceLocation',\n                'Arg entrance is not defined.');\n        }\n    }\n\n    public getEntrance(): Stairs {\n        return getEntrance(this._levels, this._entrance);\n    }\n\n    public toJSON(): any {\n        const json = super.toJSON();\n        const obj: any = {};\n        if (this._entrance) {\n            obj.entrance = this._entrance;\n        }\n        return Object.assign(obj, json);\n    }\n\n    /* Entrance is created at the bottom by default. */\n    public addEntrance(levelNumber: number): void {\n        if (this._entrance === null) {\n            const level = this._levels[levelNumber];\n            const stairs = new ElementStairs('stairsDown', level);\n            const map = level.getMap();\n            const midX = Math.floor(map.cols / 2);\n            const maxY = map.rows - 1;\n\n            let x = midX;\n            let y = maxY;\n            // Verify that there's a path from these stairs. Start scanning from\n            // bottom y, mid x. First scan the row to the left, then right. If\n            // nothing free is found, go to the row above.\n            while (!map.getCell(x, y).isFree()) {\n                if (x === 0) {x = midX + 1;}\n                if (x <= midX) {--x;}\n                if (x > midX) {++x;}\n                if (x === map.cols - 1) {\n                    x = midX;\n                    --y;\n                }\n            }\n\n            level.addStairs(stairs, x, y);\n            this._entrance = {levelNumber, x, y};\n        }\n        else {\n            RG.err('MountainFace', 'addEntrance',\n                'Entrance already added.');\n        }\n    }\n}\nWorld.MountainFace = MountainFace;\n\n//-------------------------\n// World.MountainSummit\n//-------------------------\n/* A summit of the mountain consisting of at least one Map.Level. */\nexport class MountainSummit extends SubZoneBase {\n    constructor(name) {\n        super(name);\n        this.setType('summit');\n    }\n\n    public getEntrance() {\n        return null;\n    }\n\n}\n\nWorld.MountainSummit = MountainSummit;\n\n//-------------------------\n// World.City\n//-------------------------\n/* A city in the world. A special features of the city can be queried through\n* this object. */\nexport class City extends ZoneBase {\n    constructor(name) {\n        super(name);\n        this.setType('city');\n    }\n\n    public getQuarters() {\n        return this._subZones;\n    }\n\n    public addQuarter(quarter) {\n        if (!this.addSubZone(quarter)) {\n            RG.err('World.City', 'addQuarter',\n                `City ${this.getName()} quarter not defined.`);\n        }\n    }\n\n    public abutQuarters(q1, q2, l1, l2) {\n        const res = connectSubZoneEdges(this._subZones, q1, q2, l1, l2);\n        return res;\n    }\n\n    public hasQuarter(q) {\n        return this.hasSubZone(q);\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        const obj = {\n            nQuarters: this._subZones.length,\n            quarter: this._subZones.map(q => q.toJSON())\n        };\n        return Object.assign(obj, json);\n    }\n}\nWorld.City = City;\n\n//-----------------------------\n// CityQuarter\n//-----------------------------\n/* City quarter is a subset of the City. It contains the actual level and\n * special features for that level. */\nexport class CityQuarter extends SubZoneBase {\n\n    private _shops: WorldShop[];\n\n    constructor(name) {\n        super(name);\n        this.setType('quarter');\n        this._entrance = null;\n        this._shops = [];\n    }\n\n    public removeListeners() {\n        this._shops.forEach(shop => {\n            if (!shop.isAbandoned()) {\n                // Must clean up these to avoid memory leaks\n                POOL.removeListener(shop);\n            }\n        });\n    }\n\n    public addShop(shop) {\n        this._shops.push(shop);\n    }\n\n    public getShops() {\n        return this._shops;\n    }\n\n    public setEntranceLocation(entrance) {\n        if (!RG.isNullOrUndef([entrance])) {\n            this._entrance = entrance;\n        }\n        else {\n            RG.err('CityQuarter', 'setEntranceLocation',\n                'Arg entrance is not defined.');\n        }\n    }\n\n    /* Returns entrance/exit for the quarter.*/\n    public getEntrance() {\n        return getEntrance(this._levels, this._entrance);\n    }\n\n    public addEntrance(levelNumber: number): void {\n        if (this._entrance === null) {\n            const level = this._levels[levelNumber];\n            const stairs = new ElementStairs('stairsDown', level);\n            level.addStairs(stairs, 1, 1);\n            this._entrance = {levelNumber, x: 1, y: 1};\n        }\n        else {\n            RG.err('CityQuarter', 'addEntrance',\n                'Entrance already added.');\n        }\n    }\n\n\n    /* Connects levels in linear fashion 0->1->2->...->N. */\n    public connectLevels() {\n        connectLevelsLinear(this._levels);\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        const obj: any = {\n            shops: this._shops.map(shop => shop.toJSON())\n        };\n        if (this._entrance) {\n            obj.entrance = this._entrance;\n        }\n        return Object.assign(obj, json);\n    }\n}\nWorld.CityQuarter = CityQuarter;\n\n//-------------------------\n// World.BattleZone\n//-------------------------\n/* A battle zone encapsulates battle construct, armies and the battle level. */\nexport class BattleZone extends ZoneBase {\n    private _levels: Level[];\n\n    constructor(name) {\n        super(name);\n        this.setType('battlezone');\n        this._levels = [];\n    }\n\n    public addLevel(level) {\n        return this._levels.push(level);\n    }\n\n    public getLevels(): Level[] {\n        return this._levels;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        const nLevels = this._levels.length;\n        const obj = {\n          nLevels,\n          levels: this._levels.map(l => l.getID())\n        };\n        if (nLevels === 0) {\n            RG.err('World.BattleZone', 'toJSON',\n                `Bz ${this.getName()} called without levels`);\n        }\n        return Object.assign(obj, json);\n    }\n}\nWorld.BattleZone = BattleZone;\n\n//-----------------------------\n// WorldTop\n//-----------------------------\n/* Largest place at the top of hierarchy. Contains a number of areas,\n * mountains, dungeons and cities. */\nexport class WorldTop extends WorldBase {\n\n    public currAreaIndex: number;\n\n    private _areas: Area[];\n    private _conf: {[key: string]: any};\n\n    constructor(name) {\n        super(name);\n        this.setType('world');\n\n        this._areas = [];\n\n        this.currAreaIndex = 0; // Points to current area\n        this._conf = {};\n    }\n\n    public getConf() {\n        return this._conf;\n    }\n\n    public setConf(conf) {this._conf = conf;}\n\n    /* Adds an area into the world. */\n    public addArea(area: Area): void {\n        area.setParent(this);\n        this._areas.push(area);\n    }\n\n    public getLevels(): Level[] {\n        let levels = [];\n        this._areas.map(area => {\n            levels = levels.concat(area.getLevels());\n        });\n        return levels;\n    }\n\n    public getAreas(): Area[] {\n        return this._areas;\n    }\n\n    /* Returns all zones of given type. */\n    public getZones(type?: string): ZoneBase[] {\n        let zones = [];\n        this._areas.forEach(a => {\n            zones = zones.concat(a.getZones(type));\n        });\n        return zones;\n    }\n\n    /* Returns all stairs in the world. */\n    public getStairs(): Stairs[] {\n        const res = [];\n        this.getZones().forEach(zone =>\n            zone.getLevels().forEach(l =>\n                l.getStairs().forEach(stair =>\n                    res.push(stair)\n                )\n            )\n        );\n        return res;\n    }\n\n    /* Returns all entities related to places in world hierarchy. This excludes all \n     * actors, items, levels and elements. */\n    public getPlaceEntities(): Entity[] {\n        let entities: Entity[] = [this];\n        this._areas.map(area => {\n            entities = entities.concat(area.getPlaceEntities());\n        });\n        return entities;\n    }\n\n    public getCurrentArea(): Area {\n        return this._areas[this.currAreaIndex];\n    }\n\n    public toJSON(): any {\n        const json = super.toJSON();\n        const area = this._areas.map(ar => ar.toJSON());\n        let createAllZones = true;\n        if (this.getConf().hasOwnProperty('createAllZones')) {\n            createAllZones = this.getConf().createAllZones;\n        }\n        const obj = {\n            conf: this.getConf(),\n            nAreas: this._areas.length,\n            area,\n            createAllZones\n        };\n        if (!obj.conf.area) {\n            obj.conf.area = this.createAreaConfig();\n        }\n        return Object.assign(obj, json);\n    }\n\n    /* Creates config for each area. This is mainly required for testing. */\n    public createAreaConfig() {\n        const areaConf = [];\n        this._areas.forEach(function(area) {\n            areaConf.push(area.createAreaConfig());\n        });\n        return areaConf;\n    }\n\n    public getID2Place() {\n        let res: {[key: string]: WorldBase} = {[this.getID()]: this};\n        this._areas.forEach(area => {\n            res[area.getID()] = area;\n        });\n        const zones = this.getZones();\n        zones.forEach(zone => {\n            res[zone.getID()] = zone;\n            const id2Place = zone.getID2Place();\n            res = Object.assign(res, id2Place);\n        });\n        return res;\n    }\n}\nWorld.WorldTop = WorldTop;\n\n//---------------------------------------------------------------------------\n// LEVEL FEATURES\n//---------------------------------------------------------------------------\n\nexport class WorldShop {\n    public hasNotify: boolean;\n    public _isAbandoned: boolean;\n\n    private _shopkeeper: SentientActor;\n    private _level: Level;\n    private _coord: TCoord[];\n\n    constructor() {\n        this._shopkeeper = null;\n        this._level = null;\n        this._coord = [];\n        this._isAbandoned = false;\n\n\n        this.hasNotify = true;\n    }\n\n    public setLevel(level: Level): void {\n        this._level = level;\n    }\n\n    public setCoord(coord: TCoord[]): void {\n        this._coord = coord;\n    }\n\n    public isAbandoned(): boolean {\n        return this._isAbandoned;\n    }\n\n    /* Listens to shopkeeper killed event. */\n    public notify(evtName, args) {\n        if (this._shopkeeper) {\n            if (args.actor.getID() === this._shopkeeper.getID()) {\n                this.setShopAbandoned();\n                POOL.removeListener(this);\n            }\n        }\n    }\n\n    public getLevel(): Level {\n        return this._level;\n    }\n\n    public getShopkeeper(): SentientActor {\n        return this._shopkeeper;\n    }\n\n    public setShopkeeper(keeper: SentientActor) {\n        if (keeper) {\n            this._shopkeeper = keeper;\n            POOL.listenEvent(RG.EVT_ACTOR_KILLED, this);\n        }\n        else {\n            RG.err('WorldShop', 'setShopkeeper',\n                'Tried to set null shopkeeper');\n        }\n    }\n\n    public setShopAbandoned(): void {\n        this._isAbandoned = true;\n        this._shopkeeper = null;\n        this._coord.forEach(xy => {\n            const cell = this.getCell(xy);\n            const shopElem = cell.getShop();\n            shopElem.abandonShop();\n            const items = cell.getItems();\n            if (items) {\n                items.forEach(item => {\n                    if (item.has('Unpaid')) {\n                        item.remove('Unpaid');\n                    }\n                });\n            }\n        });\n    }\n\n    public getCell(xy): Cell {\n        return this._level.getMap().getCell(xy[0], xy[1]);\n    }\n\n    public reclaimShop(actor): void {\n        if (this._isAbandoned) {\n            this._isAbandoned = false;\n            this.setShopkeeper(actor);\n            this._coord.forEach(xy => {\n                const cell = this.getCell(xy);\n                const shopElem = cell.getShop();\n                shopElem.reclaim(actor);\n                const items = cell.getItems();\n                if (items) {\n                    items.forEach(item => {\n                        if (!item.has('Unpaid')) {\n                            item.add(new Component.Unpaid());\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /* Get empty cells of the shop (no items in cells). */\n    public emptyCells(): Cell[] {\n        const result = [];\n        this._coord.forEach(xy => {\n            const cell = this._level.getMap().getCell(xy[0], xy[1]);\n            if (!cell.hasItems()) {\n                result.push(cell);\n            }\n        });\n        return result;\n    }\n\n    /* Adds new items to the empty cells of the shop. */\n    public refreshShopItems(newItems): void {\n        let nItem = 0;\n        this._coord.forEach(xy => {\n            const cell = this._level.getMap().getCell(xy[0], xy[1]);\n            if (!cell.hasItems()) {\n                if (nItem < newItems.length) {\n                    newItems[nItem].add(new Component.Unpaid());\n                    this._level.addItem(newItems[nItem], xy[0], xy[1]);\n                    ++nItem;\n                }\n            }\n        });\n    }\n\n    public toJSON() {\n        const obj: any = {\n            isAbandoned: this._isAbandoned,\n            level: this._level.getID(),\n            coord: this._coord\n        };\n        if (!this._isAbandoned) {\n            obj.shopkeeper = this._shopkeeper.getID();\n        }\n        return obj;\n    }\n}\n\nWorld.WorldShop = WorldShop;\n\nWorld.isZone = function(feature: WorldBase): boolean {\n    if (feature.getType) {\n        const type = feature.getType();\n        return (/(city|battlezone|mountain|dungeon)/).test(type);\n    }\n    return false;\n};\n","/* This file contains ASCII menus rendered as a monospace text over the game\n * board. */\n\n/* Several menus are available as templates:\n *   1. Vanilla menu with no menu-specific functionality given (MenuBase)\n *   2. Menu for showing information only, has quit-option only (MenuInfoOnly)\n *   3. Menu with quit option provided (MenuWithQuit)\n *     - User must add their own selection choices\n *   4. Menu requiring a valid selection (MenuSelectRequired)\n *     - User must add their own selection choices\n *   5. Menu for selecting a cell (MenuSelectCell).\n */\n\n/* Menus should follow these conventions:\n *   Each menu must have a select() function:\n *     select() function:\n *       return Menu.EXIT_MENU when the menu should be closed\n *       return a Menu object for nested menu\n *       return a function for action to take.\n *       Other values are invalid, and should not be returned\n *\n *   Each Menu must have getMenu(), unless showMenu() returns false.\n *\n *   Menu items for new() can be given as follows:\n *   1.\n *\n */\n\nimport RG from './rg';\nimport {Keys} from './keymap';\n\nconst {KeyMap} = Keys;\n\nexport const Menu: any = {};\nMenu.EXIT_MENU = null;\nMenu.NO_ACTION = 'NO_ACTION';\nMenu.NEXT_STATE = 'NEXT_STATE';\n\ntype SelectionFunc = () => void;\n\nexport interface IMenu {\n    [key: string]: string | string[];\n}\n\n/*\nexport type IMenu = {\n    pre?: string[];\n    post?: string[];\n} & IMenuObj;\n*/\n\nexport interface SelectionObject {\n    showMenu: () => boolean;\n    getMenu?: () => IMenu;\n    select: (code: number) => SelectionObject | SelectionFunc | null;\n    showMsg?: () => void;\n    funcToCall?: () => void;\n}\n\n\ntype VoidFunc = () => void;\ninterface MenuCallObj {\n    funcToCall: VoidFunc;\n}\ntype MenuPair = [string, any];\ntype MenuItem = MenuBase | VoidFunc | MenuPair | MenuCallObj;\n\ninterface MenuTable {\n    [key: string]: MenuItem;\n}\n\ntype MenuFunction = (args: any) => void;\n\ninterface MenuArgObj {\n    key: number; // Key code to select this specific item\n    menu?: MenuBase;\n    func?: MenuFunction;\n    funcToCall?: MenuFunction;\n}\n\ntype MenuArgArray = [string, MenuFunction];\n\ntype MenuArg = MenuArgObj | MenuArgArray;\n\nconst createMenuTable = function(args: MenuArg[]): MenuTable {\n    const table = {};\n    args.forEach((item, i) => {\n        const index = Keys.menuIndices[i];\n        if ((item as MenuArgObj).key) {\n            const itemObj = item as MenuArgObj;\n            const ii = Keys.codeToIndex(itemObj.key);\n            if (itemObj.menu) {\n                table[ii] = itemObj.menu;\n            }\n            else if (itemObj.func) {\n                table[ii] = itemObj.func;\n            }\n            else if (itemObj.funcToCall) {\n                table[ii] = {funcToCall: itemObj.funcToCall};\n            }\n        }\n        else if ((item as MenuArgArray).length === 2) {\n            table[index] = item;\n        }\n        else {\n            let msg = 'Each item must have 2 values: menu msg and ret val';\n            msg += '\\nItem can also be {key: , menu: } for nested menus';\n            RG.err('menu.js', 'createMenuTable', msg);\n        }\n    });\n    return table;\n};\n\nMenu.isSelectionDone = function(selection): boolean {\n    return typeof selection === 'function';\n};\n\nMenu.isMenuItem = function(selection): boolean {\n    return selection && typeof selection === 'object';\n};\n\n//------------------------------\n/* Base class for all menus. */\n//------------------------------\nexport class MenuBase {\n\n    public name: string;\n    public msg: string;\n    public pre: string[];\n    public post: string[];\n    public parent: MenuBase | null;\n    public table: MenuTable;\n    public callback: (any) => void;\n    protected _showMenu: boolean;\n\n    constructor(args: MenuArg[] = []) {\n        this.table = createMenuTable(args);\n        this.msg = '';\n        this.pre = [];\n        this.post = [];\n        this._showMenu = true;\n\n        this.parent = null; // Parent menu for this object\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public setMsg(msg: string): void {\n        this.msg = msg;\n    }\n\n    public showMsg(): void {\n        if (this.msg.length > 0) {\n            RG.gameMsg(this.msg);\n        }\n    }\n\n    public setParent(parent: MenuBase | null) {\n        this.parent = parent;\n    }\n\n    public getParent(): MenuBase | null {\n        return this.parent;\n    }\n\n    public addItem(code: number, item) {\n        const index = Keys.codeToIndex(code);\n        this.table[index] = item;\n    }\n\n    public showMenu() {return this._showMenu;}\n\n    public setCallback(cb) {\n        this.callback = cb;\n    }\n\n    public getMenu() {\n        const obj = {pre: [], post: []};\n        Object.keys(this.table).forEach(index => {\n            const char = Keys.menuIndices[index];\n            obj[char] = this.table[index][0];\n        });\n        obj.pre = this.pre;\n        obj.post = this.post;\n        return obj;\n    }\n\n    public addPost(item: string | string[]): void {\n        if (Array.isArray(item)) {\n            this.post = this.post.concat(item);\n        }\n        else {\n            this.post.push(item);\n        }\n    }\n\n    public addPre(item: string | string[]): void {\n        if (Array.isArray(item)) {\n            this.pre = this.pre.concat(item);\n        }\n        else {\n            this.pre.push(item);\n        }\n    }\n\n    public dbg(...args): void {\n        console.log(`MENU ${this.name}`, ...args);\n    }\n\n    public select(code) {\n        const selectIndex = Keys.codeToIndex(code);\n        if (this.table.hasOwnProperty(selectIndex)) {\n            const selection = this.table[selectIndex];\n            if ((selection as MenuPair).length === 2) {\n                return selection[1];\n            }\n            else if ((selection as MenuCallObj).funcToCall) {\n                return (selection as MenuCallObj).funcToCall;\n            }\n            else {\n                return selection;\n            }\n        }\n    }\n}\n\nMenu.Base = MenuBase;\n\n/* InfoOnly menu does not contain actual selection, but is intended to show\n * player crucial info they should not miss. Menu can be exited only by pressing\n * a specific key. */\nexport class MenuInfoOnly extends MenuBase {\n    constructor() {\n        super();\n    }\n\n    public select(code) {\n        const selection = Keys.codeToIndex(code);\n        if (selection === 0) {\n            return Menu.EXIT_MENU;\n        }\n        return this;\n    }\n\n    public getMenu() {\n        const obj = {\n            0: 'Back to game.',\n            pre: this.pre,\n            post: this.post\n        };\n        return obj;\n    }\n}\n\nRG.extend2(MenuInfoOnly, MenuBase);\nMenu.InfoOnly = MenuInfoOnly;\n\n/* This menu can be used when quit option is required. You can add a callback by\n * setting onQuit to a desired function. */\nexport class MenuWithQuit extends MenuBase {\n    public onQuit: VoidFunc | boolean;\n\n    constructor(args) {\n        super(args);\n        const quitIndex = Keys.codeToIndex(Keys.KEY.QUIT_MENU);\n        this.table[quitIndex] = ['Quit menu', Menu.EXIT_MENU];\n    }\n\n    public select(code) {\n        const selection = Keys.codeToIndex(code);\n        if (this.table.hasOwnProperty(selection)) {\n            const value = this.table[selection][1];\n            if (value === Menu.EXIT_MENU && this.onQuit) {\n                (this.onQuit as VoidFunc)();\n            }\n            return value;\n        }\n        return this;\n    }\n}\nMenu.WithQuit = MenuWithQuit;\n\n/* This menu can be used for functionality requiring always a selection. */\nexport class MenuSelectRequired extends MenuBase {\n    constructor(args) {\n        super(args);\n    }\n\n    public select(code) {\n        const selection = Keys.codeToIndex(code);\n        if (this.table.hasOwnProperty(selection)) {\n            return this.table[selection][1];\n        }\n        return this;\n    }\n}\n\nMenu.SelectRequired = MenuSelectRequired;\n\n/* This menu can be used when a cell needs to be selected. It does not shown a\n * menu. You should communicate with RG.gameMsg() what player needs to do with\n * this menu. */\nexport class MenuSelectCell extends MenuBase {\n    private _enableSelectAll: boolean;\n\n    constructor(args: MenuArg[] = []) {\n        super(args);\n        this._enableSelectAll = false;\n        this._showMenu = false;\n    }\n\n    public enableSelectAll(): void {\n        this._enableSelectAll = true;\n    }\n\n    public select(code) {\n        if (KeyMap.inMoveCodeMap(code)) {\n            this.callback(code);\n            return this;\n        }\n        else if (KeyMap.isSelect(code)) {\n            const keyIndex = Keys.codeToIndex(code);\n            const retVal = this.table[keyIndex];\n            if ((retVal as MenuCallObj).funcToCall) {\n                return (retVal as MenuCallObj).funcToCall;\n            }\n            return retVal;\n        }\n        else if (this._enableSelectAll && KeyMap.isSelectAll(code)) {\n            this.callback(code);\n            return this;\n        }\n        return Menu.EXIT_MENU;\n    }\n}\n\nRG.extend2(MenuSelectCell, MenuBase);\nMenu.SelectCell = MenuSelectCell;\n\n//---------------------------------------------------------------------------\n\nexport class MenuSelectTarget extends MenuSelectCell {\n\n    public targetCallback: (any) => void;\n\n    constructor(args: MenuArg[] = []) {\n        super(args);\n        this.targetCallback = null;\n    }\n\n    public select(code) {\n        const val = MenuSelectCell.prototype.select.call(this, code);\n        if (val === Menu.EXIT_MENU) {\n            if (KeyMap.isNextTarget(code)) {\n                if (this.targetCallback) {\n                    this.targetCallback(code);\n                }\n                return this; // Keep menu open\n            }\n            else if (KeyMap.isPrevTarget(code)) {\n                if (this.targetCallback) {\n                    this.targetCallback(code);\n                }\n                return this; // Keep menu open\n            }\n            else if (code === KeyMap.KEY.TARGET) {\n                const keyIndex = Keys.codeToIndex(code);\n                const retVal = this.table[keyIndex];\n                if ((retVal as MenuCallObj).funcToCall) {\n                    return (retVal as MenuCallObj).funcToCall;\n                }\n                return retVal;\n            }\n            return Menu.EXIT_MENU;\n        }\n        return val;\n    }\n}\n\n/* This menu can be used when direction selection is required. */\nexport class MenuSelectDir extends MenuBase {\n    constructor(args) {\n        super(args);\n        this._showMenu = false;\n    }\n\n    public select(code) {\n        if (KeyMap.inMoveCodeMap(code)) {\n            const dXdY = Keys.KeyMap.getDir(code);\n            return this.callback.bind(null, dXdY);\n        }\n        return Menu.EXIT_MENU;\n    }\n}\nMenu.SelectDir = MenuSelectDir;\n\n/* This menu is used when player does missile targeting. */\nexport class PlayerMissileMenu extends MenuSelectCell {\n\n    public actor: any;\n\n    constructor(args: MenuArg[] = [], actor) {\n        super(args);\n        this.actor = actor;\n        this._showMenu = false;\n        const brain = this.actor.getBrain();\n        if (brain.selectCell) {\n            const cellCb = brain.selectCell.bind(brain);\n            this.setCallback(cellCb);\n        }\n        else {\n            RG.err('PlayerMissileMenu', 'constructor',\n                'brain does not have selectCell() function');\n        }\n        // If there are enemies, auto-target most recent/new\n        brain.startTargeting();\n        if (!brain.hasTargetSelected()) {\n            // Otherwise let player select a cell\n            // brain.cancelTargeting();\n            brain.selectCell();\n            console.log('Brain no target selected. Using cell.');\n        }\n        else {\n            console.log('Brain has target selected');\n        }\n        // brain.selectCell();\n    }\n\n    public select(code) {\n        const val = MenuSelectCell.prototype.select.call(this, code);\n        if (val !== Menu.EXIT_MENU) {\n            return val;\n        }\n\n        // Base class did't return anything meaningful, thus process code\n        switch (code) {\n            case Keys.KEY.NEXT: {\n                this.actor.getBrain().nextTarget();\n                return this;\n            }\n            case Keys.KEY.PREV: {\n                this.actor.getBrain().prevTarget();\n                return this;\n            }\n            case Keys.KEY.TARGET: {\n                const keyIndex = Keys.codeToIndex(code);\n                return this.table[keyIndex];\n            }\n            default: {\n                return Menu.EXIT_MENU;\n            }\n        }\n        return Menu.EXIT_MENU;\n    }\n\n}\n\n//---------------------------------------------------------------------------\n/* Menu which has multiple states. An example is a selection menu, which has C-D\n * bound to delete item. Thus, normally a menu is in a selection state, but then\n * user hits C-D, it goes to a deletion state. In this case, selection callback\n * is replaced by deletion callback. */\n//---------------------------------------------------------------------------\nexport class MenuWithState extends MenuWithQuit {\n\n    public menuState: string;\n    public keyToState: {[key: string]: string};\n    public stateToTable: {[key: string]: MenuTable};\n\n    public stateToPost: {[key: string]: string};\n    public stateToPre: {[key: string]: string};\n\n    constructor(args) {\n        super(args);\n        this._showMenu = true;\n\n        // Maps key presses to transitions into new state\n        this.keyToState = {};\n\n        // Maps state to a table of options/functions\n        this.stateToTable = {};\n\n        // State-specific pre/post texts\n        this.stateToPost = {};\n        this.stateToPre = {};\n\n        // Current menu state\n        this.menuState = '';\n\n    }\n\n    public select(code) {\n        if (this.keyToState.hasOwnProperty(code)) {\n            this.menuState = this.keyToState[code];\n            return this;\n        }\n        else {\n            const selection = Keys.codeToIndex(code);\n            if (this.table.hasOwnProperty(selection)) {\n                const value = this.table[selection][1];\n                if (value === Menu.EXIT_MENU && this.onQuit) {\n                    (this.onQuit as VoidFunc)();\n                }\n                return value;\n            }\n            const menuTable = this.stateToTable[this.menuState];\n            if (menuTable.hasOwnProperty(selection)) {\n                const value = menuTable[selection][1];\n                return value;\n            }\n            return this;\n        }\n    }\n\n    public addState(state, menuArgs) {\n        this.stateToTable[state] = createMenuTable(menuArgs);\n    }\n\n    public addTransition(state, code) {\n        this.keyToState[code] = state;\n    }\n\n    /* Returns the menu which should be shown. */\n    public getMenu() {\n        const quitObj = MenuWithQuit.prototype.getMenu.call(this);\n        const state = this.menuState;\n        const table = this.stateToTable[state];\n        let obj = {pre: this.pre, post: this.post};\n        Object.keys(table).forEach(index => {\n            const char = Keys.menuIndices[index];\n            obj[char] = table[index][0];\n        });\n        obj = Object.assign(obj, quitObj);\n        if (this.stateToPre[state]) {\n            obj.pre.push(this.stateToPre[state]);\n        }\n        if (this.stateToPost[state]) {\n            obj.post.push(this.stateToPost[state]);\n        }\n        return obj;\n    }\n\n    public addPreState(item, state) {\n        if (state) {\n            this.stateToPre[state] = item;\n        }\n        else {\n            MenuWithQuit.prototype.addPre.call(this, item);\n        }\n    }\n\n    public addPostState(item, state) {\n        if (state) {\n            this.stateToPost[state] = item;\n        }\n        else {\n            MenuWithQuit.prototype.addPost.call(this, item);\n        }\n    }\n}\n\nMenu.WithState = MenuWithState;\n","/* Base class for entities such as actors and items in the game. Each entity can\n * contain any number of components. The base class provides functionality such\n * as emitting specific events when component is added/removed. Each entity has\n * also unique ID which is preserved throughout a single game (including\n * saving/restoring the game). */\n\nimport RG from './rg';\nimport {GameObject} from './game-object';\nimport {EventPool} from '../src/eventpool';\n\n\n// Helper function for faster splice\nconst spliceOne = function(arr: any[], index: number): void {\n    const len = arr.length;\n    if (!len) {return;}\n    while (index < len) {\n        arr[index] = arr[index + 1];\n        index++;\n    }\n    arr.length--;\n};\n\n/* Entity is used to represent actors, items and elements. It can have any\n * arbitrary properties by attaching components to it. See the basic\n * methods add(), get(), has() and remove() particularly.\n */\nexport class Entity extends GameObject {\n\n    public static POOL: EventPool;\n    public static num: {[key: string]: number};\n\n    public static createEntityID(): number {\n        return GameObject.createObjectID();\n    }\n\n    public static setPool(pool): void {\n        Entity.POOL = pool;\n    }\n\n    public static getIDCount(): number {\n        return GameObject.ID;\n    }\n\n    public comps: any;\n    public compsByType: any;\n\n    constructor(...args: any[]) {\n        super();\n        // Stores the comps by ID, used for serialisation\n        this.comps = {};\n\n        // Cache for faster access, NOT serialised\n        this.compsByType = {};\n    }\n\n    /* Removes given component type or component.\n     * 1. If object is given, retrieves its id using getID().\n     * 2. If integer given, uses it as ID to remove the component.\n     * 3. If string is given, either\n     *    a) removes first comp of matching type.\n     *    b) Uses parseInt() to convert it to ID, then uses this ID.\n     */\n    public remove(nameOrCompOrId) {\n        ++Entity.num.remove;\n        if (typeof nameOrCompOrId === 'object') {\n            const id = nameOrCompOrId.getID();\n            if (this.comps.hasOwnProperty(id)) {\n                const comp = this.comps[id];\n                const compName = comp.getType();\n                comp.entityRemoveCallback(this);\n                delete this.comps[id];\n\n                const index = this.compsByType[compName].indexOf(comp);\n                spliceOne(this.compsByType[compName], index);\n                if (this.compsByType[compName].length === 0) {\n                    delete this.compsByType[compName];\n                }\n                Entity.POOL.emitEvent(compName, {entity: this, remove: true});\n            }\n        }\n        else if (Number.isInteger(nameOrCompOrId)) {\n            const compID = nameOrCompOrId;\n            if (this.comps[compID]) {\n                this.remove(this.comps[compID]);\n            }\n        }\n        else {\n            const compObj = this.get(nameOrCompOrId);\n            if (compObj) {\n                this.remove(compObj);\n            }\n            else {\n                const compID = parseInt(nameOrCompOrId, 10);\n                if (compID) {\n                    this.remove(compID);\n                }\n                else {\n                    const type = typeof nameOrCompOrId;\n                    RG.warn('Entity', 'remove',\n                        `No comp found ->  |${nameOrCompOrId}|, type: ${type}`);\n                }\n            }\n        }\n    }\n\n    public equals(rhs: Entity): boolean {\n        return this.getID() === rhs.getID();\n    }\n\n    /* Gets component with given name. If entity has multiple of them, returns\n     * the first found. */\n    public get(typeName: string): any {\n        ++Entity.num.get;\n        if (this.compsByType[typeName]) {\n            return this.compsByType[typeName][0];\n        }\n        return null;\n    }\n\n    /* Fast lookup by ID only. Caller must check the result for validity. */\n    public getByID(compID: number) {\n        return this.comps[compID];\n    }\n\n    /* SLOW method to get comps of given type. Don't use in internal methods. */\n    public getList(typeName: string): any[] {\n        ++Entity.num.getList;\n        if (this.compsByType[typeName]) {\n            return this.compsByType[typeName].slice();\n        }\n        return [];\n    }\n\n    /* Adds a new component into the entity. */\n    public add(compObj: any): void {\n        if (typeof compObj === 'string') {\n            RG.err('Entity', 'add', 'No string support anymore');\n        }\n        ++Entity.num.add;\n        const compName = compObj.getType();\n        if (compObj.isUnique() && this.has(compName)) {\n            this.removeAll(compName);\n        }\n\n        this.comps[compObj.getID()] = compObj;\n        if (!this.compsByType.hasOwnProperty(compName)) {\n            this.compsByType[compName] = [compObj];\n        }\n        else {\n            this.compsByType[compName].push(compObj);\n        }\n        compObj.entityAddCallback(this);\n        Entity.POOL.emitEvent(compName, {entity: this, add: true});\n    }\n\n    /* Returns true if entity has given component. Lookup by ID is much faster\n     * than with name. */\n    public has(nameOrId): boolean {\n        ++Entity.num.has;\n        if (this.compsByType.hasOwnProperty(nameOrId)) {\n            return true;\n        }\n        return this.comps.hasOwnProperty(nameOrId);\n    }\n\n    /* Returns true if entity has any of the components. */\n    public hasAny(compNames) {\n        ++Entity.num.hasAny;\n        for (const compName of compNames) {\n            if (this.compsByType.hasOwnProperty(compName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public hasNone(compNames) {\n        return !this.hasAny(compNames);\n    }\n\n    /* Returns true if entity has all of given comps. */\n    public hasAll(compNames) {\n        for (const compName of compNames) {\n            if (!this.compsByType.hasOwnProperty(compName)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /* Removes all components of the given type. */\n    public removeAll(nameOrComp) {\n        ++Entity.num.removeAll;\n        let compName = nameOrComp;\n        if (typeof nameOrComp === 'object') {\n            compName = nameOrComp.getType();\n        }\n        if (this.has(compName)) {\n            const list = this.compsByType[compName].slice();\n            list.forEach(comp => {this.remove(comp);});\n        }\n    }\n\n    /* Replaces ALL components of the given type. */\n    public replace(nameOrComp, comp) {\n        this.removeAll(nameOrComp);\n        if (comp) {\n            this.add(comp);\n        }\n        else {\n            this.add(nameOrComp);\n        }\n    }\n\n    public getComponents() {\n        return this.comps;\n    }\n\n    public copy(rhs: any): void {\n        throw new Error('copy() not implemented in Entity');\n    }\n\n    public clone(): any {\n        throw new Error('clone() not implemented in Entity');\n    }\n\n    public toJSON(): any {\n        throw new Error('toJSON() not implemented in Entity');\n    }\n\n}\nEntity.setPool(EventPool.getPool());\n\n/* For histogramming purposes, to see how many calls are done per function. */\nEntity.num = {};\nEntity.num.add = 0;\nEntity.num.get = 0;\nEntity.num.getList = 0;\nEntity.num.has = 0;\nEntity.num.hasAny = 0;\nEntity.num.hasAll = 0;\nEntity.num.remove = 0;\nEntity.num.removeAll = 0;\n","\n/* Contains functions to place props into levels. */\nimport RG from './rg';\nimport {Random} from './random';\n\nconst RNG = Random.getRNG();\nexport const Placer: any = {};\n\nimport {TCoord, BBox} from './interfaces';\ntype Cell = import('./map.cell').Cell;\ntype Level = import('./level').Level;\ntype Entity = import('./entity').Entity;\n\nPlacer.addPropsToFreeCells = function(level, props, type) {\n    const freeCells = level.getMap().getFree();\n    Placer.addPropsToCells(level, freeCells, props, type);\n};\n\n/* Adds to the given level, and its cells, all props given in the list. Assumes\n * that all props are of given type (placement function is different for\n * different types. */\nPlacer.addPropsToCells = function(level: Level, cells: Cell[], props, type) {\n    for (let i = 0; i < props.length; i++) {\n        if (cells.length > 0) {\n            const index = RNG.randIndex(cells);\n            const cell = cells[index];\n            if (type === RG.TYPE_ACTOR) {\n                level.addActor(props[i], cell.getX(), cell.getY());\n            }\n            else if (type === RG.TYPE_ITEM) {\n                level.addItem(props[i], cell.getX(), cell.getY());\n            }\n            else {\n                RG.err('Placer', 'addPropsToCells',\n                    `Type ${type} not supported`);\n            }\n            cells.splice(index, 1); // remove used cell\n        }\n    }\n};\n\nPlacer.addPropsToRoom = function(level: Level, room, props) {\n    if (!Array.isArray(props)) {\n        RG.err('Placer', 'addPropsToRoom',\n            `props must be an array. Got: ${props}`);\n    }\n    const bbox: BBox = room.getBbox();\n    const prop = props[0];\n    if (RG.isActor(prop)) {\n        Placer.addActorsToBbox(level, bbox, props);\n    }\n    else if (RG.isItem(prop)) {\n        Placer.addItemsToBbox(level, bbox, props);\n    }\n    else {\n        RG.err('Placer', 'addPropsToRoom',\n            `Prop type not supported: ${prop}`);\n    }\n};\n\nPlacer.addActorsToBbox = function(level: Level, bbox: BBox, actors) {\n    const nActors = actors.length;\n    const freeCells = level.getMap().getFreeInBbox(bbox);\n    if (freeCells.length < nActors) {\n        RG.warn('Factory', 'addActorsToBbox',\n            'Not enough free cells');\n    }\n    Placer.addPropsToCells(level, freeCells, actors, RG.TYPE_ACTOR);\n};\n\n\nPlacer.addItemsToBbox = function(level: Level, bbox: BBox, items) {\n    const freeCells = level.getMap().getFreeInBbox(bbox);\n    Placer.addPropsToCells(level, freeCells, items, RG.TYPE_ITEM);\n};\n\n/* Adds entity to a random cell of matching filterFunc. Returns true if success,\n * otherwise returns false (for example if no cells found). */\nPlacer.addEntityToCellType = function(entity: Entity, level: Level, filterFunc) {\n    let ok = false;\n    const cells: Cell[] = level.getMap().getCells(filterFunc);\n    if (cells.length === 0) {return false;}\n    const randCell = RNG.arrayGetRand(cells);\n    const [x, y] = randCell.getXY();\n    if (RG.isActor(entity)) {\n        ok = level.addActor(entity, x, y);\n    }\n    else if (RG.isItem(entity)) {\n        ok = level.addItem(entity, x, y);\n    }\n    else if (RG.isElement(entity)) {\n        ok = level.addElement(entity, x, y);\n    }\n    return ok;\n};\n","/* This file contains factory objects for creating different types\n * of items. */\n\nimport RG from './rg';\nimport {Random} from './random';\nimport {Placer} from './placer';\nimport {ObjectShell} from './objectshellparser';\nimport * as Component from './component';\n\nconst RNG = Random.getRNG();\n\n/* This object is used to randomize item properties during procedural\n * generation.*/\nexport const ItemRandomizer = function() {\n\n    /* Only public function. All logic is deferred to private functions.\n     * Adjusts the properties of given item, based also on maxValue.*/\n    this.adjustItem = (item, val) => {\n        const itemType = item.getType();\n        if (_adjustFunctions.hasOwnProperty(itemType)) {\n            _adjustFunctions[itemType](item, val);\n        }\n    };\n\n    /* Distr. of food weights.*/\n    const _foodWeights = RG.getFoodWeightDistr();\n\n    const _adjustFoodItem = food => {\n        const weight = RNG.getWeighted(_foodWeights);\n        food.setWeight(weight);\n    };\n\n    const _adjustGoldCoin = (gold, nLevel) => {\n        if (!RG.isNullOrUndef([nLevel])) {\n            const goldWeights = RG.getGoldCoinCountDistr(nLevel);\n            const count = RNG.getWeighted(goldWeights);\n            gold.setCount(parseInt(count, 10));\n        }\n        else {\n            RG.err('ItemRandomizer', '_adjustGoldCoin',\n                'nLevel is not defined.');\n        }\n    };\n\n    const _adjustMissile = missile => {\n        const count = RNG.getUniformInt(5, 15);\n        missile.setCount(count);\n    };\n\n    const _isCombatMod = val => val >= 0.0 && val <= 0.02;\n    const _isStatsMod = val => val >= 0.1 && val <= 0.12;\n\n    const _getRandStat = () => RNG.arrayGetRand(RG.STATS);\n\n    /* Adjust damage, attack, defense and value of a weapon. */\n    const _adjustWeapon = weapon => {\n        const randVal = RNG.getUniform();\n        if (_isCombatMod(randVal)) {\n            const bonus = RNG.getUniformInt(1, 5);\n            const type = RNG.getUniformInt(0, 4);\n            switch (type) {\n                case 0: // Fall through\n                case 1: {\n                    weapon.setAttack(weapon.getAttack() + bonus);\n                    break;\n                }\n                case 2: // Fall through\n                case 3: {\n                    weapon.setDefense(weapon.getDefense() + bonus);\n                    break;\n                }\n                case 4: {\n                    weapon.setProtection(weapon.getProtection() + bonus);\n                    break;\n                }\n                default: break;\n            }\n            RG.scaleItemValue('combat', bonus, weapon);\n        }\n        else if (_isStatsMod(randVal)) {\n            const bonus = RNG.getUniformInt(1, 3);\n            let stats = null;\n            if (weapon.has('Stats')) {\n                stats = weapon.get('Stats');\n            }\n            else {\n                stats = new Component.Stats();\n                stats.clearValues();\n                weapon.add(stats);\n            }\n            const randStat = _getRandStat();\n            const getName = 'get' + randStat;\n            const setName = 'set' + randStat;\n            stats[setName](stats[getName]() + bonus);\n            RG.scaleItemValue('stats', bonus, weapon);\n        }\n    };\n\n    const _adjustArmour = armour => {\n        _adjustWeapon(armour); // The same function works fine for this\n    };\n\n    const _runeWeights = RG.getRuneChargeDistr();\n    const _adjustRune = rune => {\n        const charges = RNG.getWeighted(_runeWeights);\n        rune.setCharges(charges);\n    };\n\n    /* const _adjustMineral = mineral => {\n\n    };*/\n\n    /* LUT for functions to call on specific items.*/\n    const _adjustFunctions = {\n        food: _adjustFoodItem,\n        goldcoin: _adjustGoldCoin,\n        missile: _adjustMissile,\n        weapon: _adjustWeapon,\n        armour: _adjustArmour,\n        ammo: _adjustMissile,\n        rune: _adjustRune\n        // mineral: _adjustMineral\n    };\n\n};\n\n/* Factory object for creating items. */\nexport const FactoryItem = function() {\n    this._itemRandomizer = new ItemRandomizer();\n\n    /* Called for random items. Adjusts some of their attributes randomly.*/\n    const _doItemSpecificAdjustments = (item, val) => {\n        this._itemRandomizer.adjustItem(item, val);\n    };\n\n    this.createItem = function(query) {\n        const parser = ObjectShell.getParser();\n        return parser.createRandomItem(query);\n    };\n\n    /* Adds N random items to the given level. Uses parser to generate the\n     * items. */\n    this.addNRandItems = (level, conf) => {\n        const items = this.generateItems(conf);\n        const parser = ObjectShell.getParser();\n\n        if (conf.food) {\n            const food = parser.createRandomItem({\n                func: item => item.type === 'food'\n            });\n\n            if (food) {\n                _doItemSpecificAdjustments(food, conf.maxValue);\n                items.push(food);\n            }\n            else {\n                RG.warn('FactoryItem', 'addNRandItems',\n                    'Item.Food was not created properly.');\n            }\n        }\n        Placer.addPropsToFreeCells(level, items, RG.TYPE_ITEM);\n        return items.length;\n    };\n\n    this.generateItems = function(conf) {\n        const nItems = conf.itemsPerLevel || conf.nItems;\n        const items = [];\n        const parser = ObjectShell.getParser();\n        for (let j = 0; j < nItems; j++) {\n            const item = parser.createRandomItem({func: conf.func});\n            if (item) {\n                _doItemSpecificAdjustments(item, conf.maxValue);\n                items.push(item);\n            }\n        }\n        return items;\n    };\n\n    this.generateGold = function(conf) {\n        const nGold = conf.goldPerLevel || conf.nGold;\n        const parser = ObjectShell.getParser();\n        const goldItems = [];\n        for (let i = 0; i < nGold; i++) {\n            const gold = parser.createActualObj(RG.TYPE_ITEM,\n                RG.GOLD_COIN_NAME);\n            _doItemSpecificAdjustments(gold, conf.nLevel);\n            goldItems.push(gold);\n        }\n        return goldItems;\n    };\n\n    /* Adds a random number of gold coins to the level. */\n    this.addRandomGold = (level, parser, conf) => {\n        const goldItems = this.generateGold(conf);\n        Placer.addPropsToFreeCells(level, goldItems, RG.TYPE_ITEM);\n    };\n\n    /* Returns a shop item based on the configuration. */\n    this.getShopItem = (n, conf) => {\n        let item = null;\n        if (conf.shopFunc) {\n            if (typeof conf.shopFunc[n] === 'function') {\n                item = conf.parser.createRandomItem({\n                    func: conf.shopFunc[n]\n                });\n            }\n            else {\n                RG.err('FactoryItem', 'createShop -> getShopItem',\n                    'shopFunc must be a function.');\n            }\n        }\n        else if (Array.isArray(conf.shopType)) {\n            item = conf.parser.createRandomItem({\n                func: item => item.type === conf.shopType[n]\n            });\n        }\n        else if (typeof conf.shopType === 'string') {\n            item = conf.parser.createRandomItem({\n                func: item => item.type === conf.shopType\n            });\n        }\n        else { // Fallback, if no config\n            item = conf.parser.createRandomItem({\n                func: item => item.value <= 50 + n * 100\n            });\n        }\n        _doItemSpecificAdjustments(item, 50 + n * 100);\n        return item;\n    };\n\n    this.addItemsToCells = function(level, parser, cells, conf) {\n        if (!conf.maxValue) {\n            RG.err('FactoryItem', 'addItemsToCells',\n                'conf is missing maxValue');\n        }\n        const items = this.generateItems(conf);\n        Placer.addPropsToCells(level, cells, items, RG.TYPE_ITEM);\n    };\n};\n\nFactoryItem.addItemsToActor = function(actor, items) {\n    const parser = ObjectShell.getParser();\n    let createdItem = null;\n    items.forEach(item => {\n        if (typeof item === 'string') {\n            createdItem = parser.createItem(item);\n        }\n        else if (typeof item === 'object') {\n            createdItem = parser.createItem(item.name);\n        }\n        if (createdItem) {\n            actor.getInvEq().addItem(createdItem);\n        }\n    });\n};\n\n/* Given actor and gear type (mithril, ruby, permaice ...), tries to\n * equip a full gear of items to the actor. */\nFactoryItem.equipFullGearType = function(actor, type) {\n    const parser = ObjectShell.getParser();\n    const nameRegexp = new RegExp(type);\n    const items = parser.filterItems(item => (\n        item.type === 'armour' && nameRegexp.test(item.name)\n    ));\n    return FactoryItem.equipItemsToActor(actor, items);\n};\n\n/* Equips one melee weapon of given type to the actor. */\nFactoryItem.equipWeaponOfType = function(actor, type) {\n    const parser = ObjectShell.getParser();\n    const nameRegexp = new RegExp(type);\n    const items = parser.filterItems(item => (\n        item.type === 'weapon' && nameRegexp.test(item.name)\n    ));\n    const oneWeapon = RNG.arrayGetRand(items);\n    return FactoryItem.equipItemsToActor(actor, [oneWeapon]);\n};\n\n/* Tries to equip the list of given items to actor. Each item can be a\n * string or {name: 'xxx', count: 3} object. */\nFactoryItem.equipItemsToActor = function(actor, items) {\n    const parser = ObjectShell.getParser();\n    let createdItem = null;\n    let ok = true;\n    items.forEach(item => {\n        if (typeof item === 'string') {\n            createdItem = parser.createItem(item);\n        }\n        else if (typeof item === 'object') {\n            createdItem = parser.createItem(item.name);\n            const itemCount = item.count || 1;\n            createdItem.setCount(itemCount);\n        }\n        if (createdItem) {\n            const count = createdItem.getCount();\n            actor.getInvEq().addItem(createdItem);\n            ok = ok && actor.getInvEq().equipNItems(createdItem, count);\n        }\n    });\n    return ok;\n};\n","\n/* This file contains action evaluators used in combination with actor Goals to\n * implement more diverse computational intelligence for NPCs.\n * Each evaluator should return a desirability of given action, which is a\n * number between 0 and 1.\n */\nimport RG from './rg';\nimport {Goal, GoalBase} from './goals';\nimport {GoalThief} from './goal.thief';\nimport {SentientActor} from './actor';\nimport {Random} from './random';\nimport {SpellArgs} from './spell';\nimport {Brain} from './brain';\nimport {TCoord} from './interfaces';\n\nGoal.Thief = GoalThief;\n\nexport const Evaluator: any = {};\nEvaluator.hist = {};\n\n// Should be returned if evaluator is not applicable to current situation\nEvaluator.NOT_POSSIBLE = RG.BIAS.NOT_POSSIBLE;\n\n// Should be returned if the case is always executed\nEvaluator.ALWAYS = RG.BIAS.ALWAYS;\n\nconst RNG = Random.getRNG();\n\n/* Base class for all evaluators. Provides only the basic constructor. */\nexport class EvaluatorBase {\n\n    public actorBias: number;\n    public type: string;\n\n    constructor(actorBias) {\n        /* if (!Number.isFinite(actorBias)) {\n            RG.err('EvaluatorBase', 'constructor',\n                `bias must number. Got: ${actorBias}`);\n        }*/\n        this.actorBias = actorBias;\n        this.type = 'Base';\n    }\n\n    public calculateDesirability(actor) {\n        throw new Error('Pure virtual function');\n    }\n\n    public setActorGoal(actor, ...args) {\n        const topGoal = actor.getBrain().getGoal();\n        if (Goal[this.type]) {\n            const goal = new Goal[this.type](actor, ...args);\n            topGoal.addGoal(goal);\n            ++Evaluator.hist[this.type];\n        }\n        else {\n            RG.err('EvaluatorBase', 'setActorGoal',\n                `No Goal.${this.type} found!`);\n        }\n    }\n\n    public isOrder() {return false;}\n\n    public getType() {return this.type;}\n\n    public setBias(bias) {\n        this.actorBias = bias;\n    }\n\n    public toJSON() {\n        return {\n            type: this.getType(),\n            bias: this.actorBias\n        };\n    }\n\n    /* Called by FromJSON. */\n    public setArgs(args) {}\n\n}\nEvaluator.Base = EvaluatorBase;\n\n\nexport class EvaluatorAttackActor extends EvaluatorBase {\n\n    public enemyActor: SentientActor;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'AttackActor';\n    }\n\n    public calculateDesirability(actor) {\n        const brain = actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const enemyCell = brain.findEnemyCell(seenCells);\n        if (enemyCell) {\n            const result = 1;\n            this.enemyActor = enemyCell.getActors()[0];\n            return this.actorBias * result * 2;\n        }\n        return Evaluator.NOT_POSSIBLE;\n    }\n\n    public setActorGoal(actor) {\n        super.setActorGoal(actor, this.enemyActor);\n        /* const topGoal = actor.getBrain().getGoal();\n        const goal = new Goal.AttackActor(actor, this.enemyActor);\n        topGoal.addGoal(goal);\n        ++Evaluator.hist[this.type];*/\n    }\n\n}\nEvaluator.AttackActor = EvaluatorAttackActor;\nEvaluator.hist.AttackActor = 0;\n\n/* Evaluator to check if an actor should resort to exploring the area. */\nexport class EvaluatorExplore extends EvaluatorBase {\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Explore';\n    }\n\n    public calculateDesirability(/* actor */) {\n        /* const enemyCells = RG.Brain.getEnemyCellsAround(actor);\n        if (enemyCells.length > 0) {\n            return 0.01;\n        }*/\n        return this.actorBias;\n    }\n\n}\nEvaluator.Explore = EvaluatorExplore;\nEvaluator.hist.Explore = 0;\n\n/* Evaluator to check if actor should flee from a fight. */\nexport class EvaluatorFlee extends EvaluatorBase {\n\n    public enemyActor: SentientActor;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Flee';\n    }\n\n    public calculateDesirability(actor) {\n        const enemies = actor.getBrain().getSeenEnemies();\n        if (enemies.length > 0) {\n            const health = actor.get('Health');\n            const maxHP = health.getMaxHP();\n            const HP = health.getHP();\n            const propHP = HP / maxHP;\n            if (propHP < this.actorBias) {\n                let index = -1;\n                if (this.enemyActor) {\n                    index = enemies.findIndex(e =>\n                        e.getID() === this.enemyActor.getID()\n                    );\n                }\n                if (index === -1) {\n                    this.enemyActor = enemies[0];\n                }\n\n                const div = Math.pow(propHP, 2);\n                return this.actorBias * (1.0 - propHP) / div;\n            }\n        }\n        this.enemyActor = null;\n        return Evaluator.NOT_POSSIBLE;\n    }\n\n    public setActorGoal(actor) {\n        if (this.enemyActor) {\n            const topGoal = actor.getBrain().getGoal();\n            const goal = new Goal.FleeFromActor(actor, this.enemyActor);\n            topGoal.addGoal(goal);\n            ++Evaluator.hist[this.type];\n        }\n        else {\n            RG.err('EvaluatorFlee', 'setActorGoal',\n                'Enemy actor is null. Cannot flee.');\n        }\n    }\n\n}\nEvaluator.Flee = EvaluatorFlee;\nEvaluator.hist.Flee = 0;\n\n/* Evaluator to check if actor should guard between given points. */\nexport class EvaluatorPatrol extends EvaluatorBase {\n\n    public coords: TCoord[];\n\n    constructor(actorBias, coord = []) {\n        super(actorBias);\n        this.type = 'Patrol';\n        this.coords = coord;\n    }\n\n    public setCoords(coords) {\n        this.coords = coords;\n    }\n\n    public calculateDesirability() {\n        return this.actorBias;\n    }\n\n    public setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const coords = this.coords;\n        if (coords.length > 0) {\n            const goal = new Goal.Patrol(actor, coords);\n            topGoal.addGoal(goal);\n            ++Evaluator.hist[this.type];\n        }\n        else {\n            RG.err('EvaluatorPatrol', 'setActorGoal',\n                'No guard points set with setCoords()');\n        }\n    }\n\n    public setArgs(args) {\n        this.coords = args.coords;\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.args = {\n            coords: this.coords\n        };\n        return json;\n    }\n}\nEvaluator.Patrol = EvaluatorPatrol;\nEvaluator.hist.Patrol = 0;\n\n/* Evaluator to check if actor should guard the given point. */\nexport class EvaluatorGuard extends EvaluatorBase {\n\n    public x: number;\n    public y: number;\n\n    constructor(actorBias, xy) {\n        super(actorBias);\n        this.type = 'Guard';\n        if (xy) {this.setXY(xy);}\n    }\n\n    public setXY(xy) {\n        this.x = xy[0];\n        this.y = xy[1];\n    }\n\n    public setArgs(args) {\n        const {xy} = args;\n        this.setXY(xy);\n    }\n\n    public calculateDesirability() {\n        return this.actorBias;\n    }\n\n    public setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const goal = new Goal.Guard(actor, [this.x, this.y]);\n        topGoal.addGoal(goal);\n        ++Evaluator.hist[this.type];\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.args = {xy: [this.x, this.y]};\n        return json;\n    }\n}\nEvaluator.Guard = EvaluatorGuard;\nEvaluator.hist.Guard = 0;\n\n/* Evaluator to check if actor should flee from a fight. */\nexport class EvaluatorOrders extends EvaluatorBase {\n\n    public goal: GoalBase;\n    public srcActor: SentientActor;\n    public subEval: EvaluatorBase;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Orders';\n        this.goal = null;\n    }\n\n    /* Sets the arguments used for goal injection for commanded actor. */\n    public setArgs(args) {\n        this.goal = args.goal;\n        this.srcActor = args.srcActor;\n    }\n\n    public calculateDesirability() {\n        // TODO evaluate srcActor status\n        // Evaluate difficulty of goal\n        const commanderMult = 1.0;\n        const goalCateg = this.goal.getCategory();\n        let mult = goalCateg === Goal.Types.Kill ? 0.5 : 1.0;\n        mult *= this.actorBias;\n        if (this.acceptsOrdersFromSource()) {\n            return mult * commanderMult;\n        }\n        return 0;\n    }\n\n    public acceptsOrdersFromSource() {\n        if (this.srcActor.has('Commander')) {\n            return true;\n        }\n        else if (this.srcActor.isPlayer()) {\n            return true;\n        }\n        return false;\n    }\n\n    public setActorGoal(actor) {\n        if (this.goal) {\n            const topGoal = actor.getBrain().getGoal();\n            topGoal.addGoal(this.goal);\n            ++Evaluator.hist[this.type];\n        }\n        else {\n            RG.err('EvaluatorOrder', 'setActorGoal',\n                'this.goal must not be null');\n        }\n    }\n\n    public setSubEvaluator(evaluator) {\n        this.subEval = evaluator;\n    }\n\n    public isOrder() {return true;}\n\n}\nEvaluator.Orders = EvaluatorOrders;\nEvaluator.hist.Orders = 0;\n\n/* Calculates the desirability to cast a certain spell. */\nexport class EvaluatorCastSpell extends EvaluatorBase {\n\n    public _castingProb: number;\n    public spell: any; // TODO fix to correct type\n    public spellArgs: SpellArgs;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'CastSpell';\n        this._castingProb = 0.2;\n    }\n\n    public setCastingProbability(prob) {\n        this._castingProb = prob;\n    }\n\n    public getCastingProbability() {\n        return this._castingProb;\n    }\n\n    public calculateDesirability(actor) {\n        this.spell = this.getRandomSpell(actor);\n        if (!this.spell) {return 0;}\n\n        if (this.canCastSpell(actor)) {\n            if (this.shouldCastSpell(actor)) {\n                return this.actorBias;\n            }\n        }\n        return 0;\n    }\n\n    public setActorGoal(actor) {\n        if (this.spell) {\n            const topGoal = actor.getBrain().getGoal();\n            const goal = new Goal.CastSpell(actor, this.spell, this.spellArgs);\n            topGoal.addGoal(goal);\n            ++Evaluator.hist[this.type];\n        }\n        else {\n            RG.err('EvaluatorFlee', 'setActorGoal',\n                'Enemy actor is null. Cannot flee.');\n        }\n    }\n\n    public getRandomSpell(actor) {\n        const book = actor.getBook();\n        if (book && book.getSpells().length > 0) {\n            const spell = RNG.arrayGetRand(book.getSpells());\n            return spell;\n        }\n        return null;\n    }\n\n    /* Returns true if spellcaster can cast a spell. */\n    public canCastSpell(actor) {\n        if (actor.has('SpellPower')) {\n            const spellPower = actor.get('SpellPower');\n            if (spellPower.getPP() >= this.spell.getCastingPower()) {\n                if (RNG.getUniform() <= this._castingProb) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Returns true if spellcaster should cast the spell. */\n    public shouldCastSpell(actor) {\n        const brain = actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const enemyCell = brain.findEnemyCell(seenCells);\n        const actorCellsAround = Brain.getActorCellsAround(actor);\n        const args: any = {actor, actorCellsAround};\n        if (enemyCell) {\n            args.enemy = enemyCell.getActors()[0];\n        }\n        if (this.spell.aiShouldCastSpell) {\n            return this.spell.aiShouldCastSpell(args, (act, newArgs) => {\n                this.spellArgs = newArgs;\n            });\n        }\n        else {\n            let msg = `Spell ${this.spell.getName()} cannot be cast by AI`;\n            msg += ' no aiShouldCastSpell() defined for the spell';\n            RG.warn('Evaluator.CastSpell', 'shouldCastSpell', msg);\n        }\n        return false;\n    }\n\n}\nEvaluator.CastSpell = EvaluatorCastSpell;\nEvaluator.hist.CastSpell = 0;\n\n/* Evaluator used by shopkeeper actors to check if they should carry on\n * with shopkeeping duties. */\nexport class EvaluatorShopkeeper extends EvaluatorBase {\n\n    public x: number;\n    public y: number;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Shopkeeper';\n    }\n\n    public calculateDesirability(actor) {\n        // TODO calculate dist from shop etc\n        if (actor.has('Shopkeeper')) {\n            return this.actorBias;\n        }\n        RG.err('EvaluatorShopkeeper', 'calculateDesirability',\n            `An actor is not shopkeeper: ${actor}`);\n        return 0;\n    }\n\n    public setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const goal = new Goal.Shopkeeper(actor, this.x, this.y);\n        topGoal.addGoal(goal);\n        ++Evaluator.hist[this.type];\n    }\n\n    public setArgs(args) {\n        const {xy} = args;\n        this.x = xy[0];\n        this.y = xy[1];\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.args = {xy: [this.x, this.y]};\n        return json;\n    }\n\n}\nEvaluator.Shopkeeper = EvaluatorShopkeeper;\nEvaluator.hist.Shopkeeper = 0;\n\n/* Evaluator added to actors having home and wanting to spend time there\n * now and then. */\nexport class EvaluatorGoHome extends EvaluatorBase {\n    public timeToHomeSick: number;\n    public timeToStay: number;\n    public maxDistHome: number;\n    public x: number;\n    public y: number;\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'GoHome';\n        this.timeToHomeSick = RNG.getUniformInt(20, 40);\n        this.timeToStay = 0;\n        this.maxDistHome = 5;\n    }\n\n    public calculateDesirability(actor) {\n        if (this.timeToHomeSick > 0) {\n            this.timeToHomeSick -= 1;\n            return 0.0;\n        }\n        else if (this.timeToHomeSick === 0) {\n            this.timeToHomeSick = -1;\n            this.timeToStay = RNG.getUniformInt(20, 40);\n        }\n\n        if (this.timeToStay > 0) {\n            const xy = [this.x, this.y];\n            if (RG.withinRange(this.maxDistHome, xy, actor)) {\n                this.timeToStay -= 1;\n            }\n            return this.actorBias;\n        }\n        else if (this.timeToStay === 0) {\n            this.timeToStay = -1;\n            this.timeToHomeSick = RNG.getUniformInt(20, 40);\n        }\n        return 0.0;\n    }\n\n    public setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const goal = new Goal.GoHome(actor, this.x, this.y, this.maxDistHome);\n        topGoal.addGoal(goal);\n        ++Evaluator.hist[this.type];\n    }\n\n    public setArgs(args) {\n        const {xy} = args;\n        this.x = xy[0];\n        this.y = xy[1];\n        this.timeToHomeSick = args.timeToHomeSick;\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.args = {\n            xy: [this.x, this.y],\n            timeToHomeSick: this.timeToHomeSick\n        };\n        return json;\n    }\n\n}\nEvaluator.GoHome = EvaluatorGoHome;\nEvaluator.hist.GoHome = 0;\n\nexport class EvaluatorThief extends EvaluatorBase {\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Thief';\n    }\n\n    public calculateDesirability(/* actor */) {\n        return this.actorBias;\n    }\n\n}\nEvaluator.Thief = EvaluatorThief;\nEvaluator.hist.Thief = 0;\n\nexport class EvaluatorCommunicate extends EvaluatorBase {\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'Communicate';\n    }\n\n    public calculateDesirability(actor): number {\n        if (this.willCommunicate(actor)) {\n            return this.actorBias;\n        }\n    }\n\n    /* Returns true if actor will communicate something. */\n    public willCommunicate(actor): boolean {\n        const brain = actor.getBrain();\n        const communicateOrAttack = RNG.getUniform();\n        const seenCells = brain.getSeenCells();\n        const friendCell = brain.findFriendCell(seenCells);\n        const memory = brain.getMemory();\n\n        let friendActor = null;\n        if (RG.isNullOrUndef([friendCell])) {\n            return false;\n        }\n        else {\n            friendActor = friendCell.getActors()[0];\n            if (memory.hasCommunicatedWith(friendActor)) {\n                return false;\n            }\n            else if (friendActor.has('Communication')) {\n                return false;\n            }\n        }\n\n        if (communicateOrAttack < (1.0 - this.actorBias)) {\n            return false;\n        }\n        return true;\n    }\n}\nEvaluator.Communicate = EvaluatorCommunicate;\n","\nimport ROT from '../../lib/rot';\nimport RG from './rg';\nimport {Cell, CellJSON} from './map.cell';\nimport {ElementBase, ElementWall, ElementMarker} from './element';\nimport {TCoord, BBox} from './interfaces';\nimport {ELEM_MAP} from '../data/elem-constants';\n\nconst FLOOR = new ElementBase('floor');\nconst WALL = new ElementWall('wall');\n\ntype YAndIndex = [number, number];\n\nexport interface CellMapJSON {\n    cols: number;\n    rows: number;\n    cells: CellJSON[];\n    explored: TCoord[];\n    elements: any[];\n\n    encoded?: boolean;\n    cellsXY?: {[key: string]: YAndIndex[]};\n    defaultType: string;\n}\n\n/* Map cell list object which contains a number of cells. Map.CellList is used\n * for rendering while the Map.Level contains high-level information about\n * game objects such as actors, items and elements (stairs/traps). */\nexport class CellMap {\n    public static fromJSON: (json) => CellMap;\n\n    public static invertMap(map: CellMap): void {\n        for (let x = 0; x < map.cols; x++) {\n            for (let y = 0; y < map.rows; y++) {\n                const type = map._map[x][y].getBaseElem().getType();\n                if (type === 'wall') {\n                    map._map[x][y].setBaseElem(FLOOR);\n                }\n                else if (type === 'floor') {\n                    map._map[x][y].setBaseElem(WALL);\n                }\n            }\n        }\n    }\n\n    public static createWithoutCells(cols: number, rows: number): CellMap {\n        const map = new CellMap(0, 0);\n        map._map = new Array(cols);\n        for (let x = 0; x < cols; x++) {\n            map._map[x] = new Array(rows);\n        }\n        map.cols = cols;\n        map.rows = rows;\n        return map;\n    }\n\n    public _map: Cell[][];\n    public cols: number;\n    public rows: number;\n    public fov: any;\n\n    private _isRowOptimized: boolean;\n    private _rowMap: Cell[][];\n\n    constructor(cols: number, rows: number, baseElem = FLOOR) {\n        this._map = [];\n        this.cols = cols;\n        this.rows = rows;\n\n        if (typeof this.cols !== 'number' || typeof this.rows !== 'number') {\n            RG.err('Map.CellList', 'constructor',\n                'Map.CellList(rows, cols) expects 2 integers.');\n        }\n\n        this._map = new Array(this.cols);\n        for (let x = 0; x < this.cols; x++) {\n            this._map[x] = new Array(this.rows);\n            for (let y = 0; y < this.rows; y++) {\n                this._map[x][y] = new Cell(x, y, baseElem);\n            }\n        }\n\n        this.fov = new ROT.FOV.RecursiveShadowcasting(\n            this.lightPasses.bind(this));\n\n        this.passableCallback = this.passableCallback.bind(this);\n        this.passableCallbackFlying = this.passableCallbackFlying.bind(this);\n    }\n\n    /* Returns true if x,y are in the this._map.*/\n    public hasXY(x: number, y: number): boolean {\n        return (x >= 0) && (x < this.cols) && (y >= 0) && (y < this.rows);\n    }\n\n    /* Sets a property for the underlying cell.*/\n    public setProp(x: number, y: number, prop: string, obj): void {\n        this._map[x][y].setProp(prop, obj);\n    }\n\n    public removeProp(x, y, prop: string, obj): boolean {\n        return this._map[x][y].removeProp(prop, obj);\n    }\n\n    public moveProp(fromXY, toXY, prop: string, obj): boolean {\n        if (this.removeProp(fromXY[0], fromXY[1], prop, obj)) {\n            this.setProp(toXY[0], toXY[1], prop, obj);\n            return true;\n        }\n        return false;\n    }\n\n    public setElemXY(x: number, y: number, obj): void {\n        this.setProp(x, y, RG.TYPE_ELEM, obj);\n    }\n\n    public setBaseElemXY(x: number, y: number, elem: ElementBase) {\n        this._map[x][y].setBaseElem(elem);\n    }\n\n    public getBaseElemXY(x: number, y: number): ElementBase {\n        return this._map[x][y].getBaseElem();\n    }\n\n    public getCell(x: number, y: number): Cell {\n        return this._map[x][y];\n    }\n\n    public isExplored(x: number, y: number): boolean {\n        return this._map[x][y].isExplored();\n    }\n\n    public getBaseElemRow(y: number): ElementBase[] {\n        const row = [];\n        for (let i = 0; i < this.cols; ++i) {\n            row.push(this._map[i][y].getBaseElem());\n        }\n        return row;\n    }\n\n    public getCellRow(y: number): Cell[] {\n        const row = [];\n        for (let i = 0; i < this.cols; ++i) {\n            row.push(this._map[i][y]);\n        }\n        return row;\n    }\n\n    /* Returns all free cells in the this._map. 'free' means that cell can be\n    * traversed and is passable. */\n    public getFree(): Cell[] {\n        const freeCells = [] as Cell[];\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                if (this._map[x][y].isFree()) {\n                    freeCells.push(this._map[x][y]);\n                }\n            }\n        }\n        return freeCells;\n    }\n\n    public getFreeNotOnEdge(): Cell[] {\n        const freeCells: Cell[] = this.getFree();\n        return freeCells.filter((c: Cell) => (\n            c._x > 0 && c._x < (this.cols - 1) &&\n            c._y > 0 && c._y < (this.rows - 1)\n        ));\n    }\n\n    /* Returns the first free cell starting from right edge of the level.\n    * Range of y-coord can be given, if not, searches all y-coordinates starting\n    * from 0.\n    */\n    public getFirstFreeFromRight(y0 = 0, y1 = this.rows - 1): Cell | null {\n        for (let x = this.cols - 1; x >= 0; x--) {\n            for (let y = y0; y <= y1; y++) {\n                if (this._map[x][y].isFree()) {\n                    return this._map[x][y];\n                }\n            }\n        }\n        return null;\n    }\n\n    /* Returns all free cells in the given bounding box. */\n    public getFreeInBbox(bbox: BBox): Cell[] {\n        const freeCells = [];\n        for (let x = bbox.ulx; x <= bbox.lrx; x++) {\n            for (let y = bbox.uly; y < bbox.lry; y++) {\n                if (this._map[x][y].isFree()) {\n                    freeCells.push(this._map[x][y]);\n                }\n            }\n        }\n        return freeCells;\n    }\n\n    /* Returns all empty cells. Cell is empty, if it has only the base\n     * element, but no props. */\n    public getEmptyCells(): Cell[] {\n        const emptyCells: Cell[] = [];\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                if (!this._map[x][y].hasProps()) {\n                    emptyCells.push(this._map[x][y]);\n                }\n            }\n        }\n        return emptyCells;\n    }\n\n    /* Returns true if light passes through this cell.*/\n    public lightPasses(x: number, y: number): boolean {\n        if (this.hasXY(x, y)) {\n            return this._map[x][y].lightPasses(); // delegate to cell\n        }\n        return false;\n    }\n\n    public hasObstacle(x: number, y: number): boolean {\n        if (this.hasXY(x, y)) {\n            return this._map[x][y].hasObstacle();\n        }\n        return false;\n    }\n\n    public isPassable(x: number, y: number): boolean {\n        if (this.hasXY(x, y)) {\n            return this._map[x][y].isPassable();\n        }\n        return false;\n    }\n\n    public isPassableByAir(x: number, y: number): boolean {\n        if (this.hasXY(x, y)) {\n            return this._map[x][y].isPassableByAir();\n        }\n        return false;\n    }\n\n    /* Returns visible cells for given actor.*/\n    public getVisibleCells(actor): Cell[] {\n        const cells = [];\n        const [xA, yA] = actor.getXY();\n        const range = actor.getFOVRange();\n\n        if (actor.isLocated()) {\n            if (actor.getLevel().getMap() === this) {\n\n                this.fov.compute(xA, yA, range, (x, y, r, visibility) => {\n                    if (visibility) {\n                        if (this.hasXY(x, y)) {\n                            cells.push(this._map[x][y]);\n                        }\n                    }\n                });\n            }\n        }\n        return cells;\n    }\n\n    /* Returns all cells explored by the player.*/\n    public getExploredCells(): Cell[] {\n        const cells = [];\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                if (this._map[x][y].isExplored()) {\n                    cells.push(this._map[x][y]);\n                }\n            }\n        }\n        return cells;\n    }\n\n    public exploreAll(isExplored = true): void {\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                this._map[x][y]._explored = isExplored;\n            }\n        }\n    }\n\n    /* Returns true if x,y is located at this._map border cells.*/\n    public isBorderXY(x: number, y: number): boolean {\n        if (x === 0) {return true;}\n        if (y === 0) {return true;}\n        if (x === this.cols - 1) {return true;}\n        if (y === this.rows - 1) {return true;}\n        return false;\n    }\n\n    /* Prints the this._map in ASCII. */\n    public debugPrintInASCII(): void {\n        let mapInASCII = '';\n        for (let y = 0; y < this.rows; y++) {\n            let row = '';\n            for (let x = 0; x < this.cols; x++) {\n                const cell = this._map[x][y];\n                const baseElem = cell.getBaseElem();\n                if (!baseElem) {\n                    row += 'X';\n                    continue;\n                }\n                const baseType = baseElem.getType();\n                if (cell.hasActors()) {\n                    if (cell.getFirstActor().isPlayer()) {\n                        row += '@';\n                    }\n                    else {\n                        row += 'A';\n                    }\n                }\n                else if (cell.hasItems()) {row += 'I';}\n                else if (cell.getStairs() !== null) {row += '>';}\n                else if (cell.hasConnection()) {row += 'c';}\n                else if (cell.hasElements()) {\n                    const elem = cell.getElements()[0];\n                    if (elem.getType() === 'marker') {\n                        const markerElem: unknown = elem;\n                        row += (markerElem as ElementMarker).char;\n                    }\n                    else if (elem.getType() === 'door') {\n                        row += '+';\n                    }\n                    else {\n                        row += 'E';\n                    }\n                }\n                else if ((/floor/).test(baseType)) {row += '.';}\n                else if ((/water|chasm|lava/).test(baseType)) {row += '~';}\n                else if ((/wall/).test(baseType)) {row += '#';}\n                else if ((/tree/).test(baseType)) {row += 'T';}\n                else if ((/grass/).test(baseType)) {row += '\"';}\n                else if ((/highrock/).test(baseType)) {row += '^';}\n                else if ((/road/).test(baseType)) {row += 'R';}\n                else if ((/arctic/).test(baseType)) {row += '.';}\n                else {row += '?';}\n            }\n            mapInASCII += row + '\\n';\n        }\n        RG.diag(mapInASCII);\n    }\n\n    /* Queries a row of cells. _optimizeForRowAccess must be called before this\n     * function is used. */\n    public getCellRowFast(y: number): Cell[] {\n        if (!this._isRowOptimized) {this._optimizeForRowAccess();}\n        return this._rowMap[y];\n    }\n\n    /* Slow find for debugging. Tries to find all objects matching the\n     * filterFunc. */\n    public findObj(filterFunc: (obj: any) => boolean): any[] {\n        let result = [];\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                result = result.concat(this._map[x][y].findObj(filterFunc));\n            }\n        }\n        return result;\n    }\n\n    /* Get cells that return true for the given filter function. For example:\n     *   cell => cell.hasActors()\n     * OR\n     *   cell => cell.getBaseElem().getType() === 'floor'\n     */\n    public getCells(filter = (cell: Cell) => true): Cell[] {\n        const result = [];\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                if (filter(this._map[x][y])) {\n                    result.push(this._map[x][y]);\n                }\n            }\n        }\n        return result;\n    }\n\n    public getCellsWithCoord(coord: TCoord[]): Cell[] {\n        const result = [];\n        coord.forEach(xy => {\n            if (this.hasXY(xy[0], xy[1])) {\n                result.push(this._map[xy[0]][xy[1]]);\n            }\n        });\n        return result;\n    }\n\n    public setBaseElems(coord: TCoord[], elem: ElementBase): void {\n        coord.forEach(xy => {\n            this._map[xy[0]][xy[1]].setBaseElem(elem);\n        });\n    }\n\n    public has(xy, query): boolean {\n        const [x, y] = xy;\n        if (this.hasXY(x, y)) {\n            const cell = this.getCell(x, y);\n            if (typeof query === 'string') {\n                const baseElem = cell.getBaseElem();\n                if (baseElem.getType() === query) {return true;}\n            }\n        }\n        return false;\n    }\n\n    /* Creates another internal representation of the map. This can be used for fast\n     * row access. */\n    public _optimizeForRowAccess(): void {\n        this._rowMap = [];\n        for (let y = 0; y < this.rows; y++) {\n            this._rowMap[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                this._rowMap[y][x] = this._map[x][y];\n            }\n        }\n        this._isRowOptimized = true;\n    }\n\n    public toJSON() {\n        const map = new Array(this.cols);\n        const elements = {};\n        const explored = [];\n        const baseTypes = {};\n\n        for (let x = 0; x < this.cols; x++) {\n            map[x] = new Array(this.rows);\n            for (let y = 0; y < this.rows; y++) {\n                const json = this.getCell(x, y).toJSON();\n                map[x][y] = json.t;\n                baseTypes[json.t] = 0;\n                if (json.ex) {explored.push([x, y]);}\n                if (json.elements) {\n                    elements[x + ',' + y] = elements;\n                }\n            }\n        }\n        return {\n            cols: this.cols,\n            rows: this.rows,\n            cells: map,\n            explored,\n            elements,\n            baseTypes\n        };\n    }\n\n    /* Does special encoding to reduce the size of the map. */\n    public toJSONEncoded(): any {\n        const json: any = this.toJSON();\n        const {cells, baseTypes} = json;\n        const typeHist = {};\n        const newCells = [];\n\n        // Create histogram of the cells\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                baseTypes[cells[x][y]] += 1;\n            }\n        }\n\n        let defaultType = -1;\n        let highestCount = 0;\n        Object.keys(baseTypes).forEach(type => {\n            if (baseTypes[type] > highestCount) {\n                highestCount = baseTypes[type];\n                defaultType = parseInt(type, 10);\n            }\n        });\n\n        const cellsXY = {};\n        for (let x = 0; x < this.cols; x++) {\n            for (let y = 0; y < this.rows; y++) {\n                if (cells[x][y] !== defaultType) {\n                    if (!cellsXY[x]) {cellsXY[x] = [];}\n                    cellsXY[x].push([y,cells[x][y]]);\n                }\n            }\n        }\n\n        delete json.cells;\n        json.defaultType = defaultType;\n        json.cellsXY = cellsXY;\n        json.encoded = true;\n        return json;\n    }\n\n\n    public getShortestPathTo(actor, toX, toY): Cell[] {\n        const [sX, sY] = actor.getXY();\n        let passCb = this.passableCallback.bind(null, sX, sY);\n        if (actor.has('Flying')) {\n            passCb = this.passableCallbackFlying.bind(null, sX, sY);\n        }\n        const pathFinder = new ROT.Path.AStar(toX, toY, passCb);\n        const path = [];\n        pathFinder.compute(sX, sY, (x, y) => {\n            if (this.hasXY(x, y)) {\n                path.push(this._map[x][y]);\n            }\n        });\n        return path;\n    }\n\n    public getShortestPathCached(actor, toX, toY): Cell[] {\n        // TODO\n        return [];\n    }\n\n    public passableCallback(sX, sY, x, y): boolean {\n        let res = this.isPassable(x, y);\n        if (!res) {\n            res = (x === sX) && (y === sY);\n        }\n        return res;\n    }\n\n    public passableCallbackFlying(sX, sY, x, y): boolean {\n        let res = this.isPassableByAir(x, y);\n        if (!res) {\n            res = (x === sX) && (y === sY);\n        }\n        return res;\n\n    }\n\n    public moveCellUnsafe(x: number, y: number, cell: Cell): void {\n        cell.setXY([x, y]);\n        this._map[x][y] = cell;\n    }\n}\n\nCellMap.fromJSON = function(json: any): CellMap {\n    if (json.encoded) {\n        const {defaultType} = json;\n        const elemObj = ELEM_MAP.elemIndexToElemObj[defaultType];\n        const map = new CellMap(json.cols, json.rows, elemObj);\n\n        Object.keys(json.cellsXY).forEach(x => {\n            const xCol = json.cellsXY[x];\n            const xNum = parseInt(x, 10);\n            xCol.forEach(yAndIndex => {\n                const elem = ELEM_MAP.elemIndexToElemObj[yAndIndex[1]];\n                map.setBaseElemXY(xNum, yAndIndex[0], elem);\n            });\n        });\n\n        json.explored.forEach(xy => {\n            const [x, y] = xy;\n            map._map[x][y].setExplored();\n        });\n        return map;\n    }\n};\n","\nimport RG from './rg';\nimport {Random} from './random';\nimport {Geometry} from './geometry';\nimport {Evaluator} from './evaluators';\n\nimport {Placer} from './placer';\nimport {FactoryItem} from './factory.items';\nimport {FactoryActor} from './factory.actors';\nimport * as Component from './component';\nimport {WorldShop} from './world';\nimport * as Item from './item';\nimport * as Element from './element';\nimport {ObjectShell} from './objectshellparser';\n\nconst MIN_ACTORS_ROOM = 2;\nconst RNG = Random.getRNG();\n\nimport {TCoord} from './interfaces';\ntype Level = import('./level').Level;\ntype House = import('./houses').House;\n\nconst popOptions = ['NOTHING', 'LOOT', 'GOLD', 'GUARDIAN', 'ELEMENT', 'CORPSE',\n    'TIP'];\n\ninterface PopulConf {\n    theme?: string;\n    maxDanger?: number;\n    maxValue?: number;\n}\n\nexport class DungeonPopulate {\n\n    public actorFunc: (shell) => boolean;\n\n    private theme: string;\n    private maxDanger: number;\n    private maxValue: number;\n\n    private _itemFact: FactoryItem;\n    private _actorFact: any;\n\n    constructor(conf: PopulConf = {}) {\n        this.theme = conf.theme ||  '';\n        this.maxDanger = conf.maxDanger || 5;\n        this.maxValue = conf.maxValue || 50;\n\n        this._itemFact = new FactoryItem();\n        this._actorFact = new FactoryActor();\n    }\n\n    /* Populates the level with actors and items. Some potential features to use\n    * here in extras:\n    *   1. startPoint: No monsters spawn in vicinity\n    *   2. terms: Good items, tough monsters\n    *   3. bigRooms: spawn depending on theme\n    *   4. Critical path: Gold coins?\n    */\n    public populateLevel(level) {\n        const extras = level.getExtras();\n        const maxDanger = this.maxDanger;\n        const maxValue = this.maxValue;\n\n        let mainLootAdded = false;\n        const roomsDone = {}; // Keep track of finished rooms\n\n        if (extras.bigRooms) {\n            extras.bigRooms.forEach(bigRoom => {\n                const {room, type} = bigRoom;\n                const bbox = room.getBbox();\n                const areaSize = room.getAreaSize();\n                const actorConf = {\n                    maxDanger,\n                    func: actor => actor.danger <= maxDanger + 2,\n                    nActors: 0 // To be set later\n                };\n                if (/cross/.test(type)) {\n                    // Cross has lower density as its huge\n                    actorConf.nActors = Math.floor(areaSize / 6);\n                    this.addActorsToBbox(level, bbox, actorConf);\n                }\n                else {\n                    actorConf.nActors = Math.floor(areaSize / 3);\n                    this.addActorsToBbox(level, bbox, actorConf);\n                }\n\n                // Add main loot\n                if (!mainLootAdded) {\n                    const center = room.getCenter();\n                    mainLootAdded = this.addMainLoot(level, center, maxValue);\n                }\n\n                roomsDone[room.getID()] = true;\n            });\n        }\n\n        // Add something nasty into terminal room\n        // Some possible design patterns:\n        //   1. Stairs + guardian\n        //   2. Guardian + strong item\n        //   3. Special feature\n        //   4. Pack or group of actors\n        if (extras.terms) {\n            extras.terms.forEach(room => {\n                // Don't populate stairs Up room\n                if (!room.hasStairsUp()) {\n                    const bbox = room.getBbox();\n\n                    if (!mainLootAdded) {\n                        const center = room.getCenter();\n                        mainLootAdded = this.addMainLoot(level, center, maxValue);\n                    }\n\n                    // Add optional, less potent loot stuff\n                    const areaSize = room.getAreaSize();\n                    const nItems = Math.ceil(areaSize / 10);\n                    const itemConf = {maxValue, itemsPerLevel: nItems,\n                        func: item => item.value <= maxValue\n                    };\n                    this.addItemsToBbox(level, bbox, itemConf);\n\n                    const coord = Geometry.getCoordBbox(bbox);\n                    coord.forEach(xy => {\n                        const enemy = new Element.ElementMarker('e');\n                        enemy.setTag('enemy');\n                        level.addElement(enemy, xy[0], xy[1]);\n                    });\n                }\n                roomsDone[room.getID()] = true;\n            });\n        }\n\n        // Process rest of the rooms\n        if (extras.rooms) {\n            extras.rooms.forEach(room => {\n                const bbox = room.getBbox();\n                const areaSize = room.getAreaSize();\n\n                // Add actors into the room\n                const actorConf = {\n                    maxDanger,\n                    func: actor => actor.danger <= maxDanger,\n                    nActors: Math.floor(areaSize / 6)\n                };\n                if (actorConf.nActors < MIN_ACTORS_ROOM) {\n                    actorConf.nActors = MIN_ACTORS_ROOM;\n                }\n                this.addActorsToBbox(level, bbox, actorConf);\n\n                // Add items into the room\n                const nItems = Math.ceil(areaSize / 20);\n                const itemConf = {maxValue, itemsPerLevel: nItems,\n                    func: item => item.value <= maxValue\n                };\n                this.addItemsToBbox(level, bbox, itemConf);\n\n                roomsDone[room.getID()] = true;\n            });\n        }\n\n        // Add an endpoint guardian\n        if (extras.endPoint) {\n            this.addPointGuardian(level, extras.endPoint, maxDanger);\n        }\n    }\n\n    public setActorFunc(func) {\n        if (typeof func === 'function') {\n            this.actorFunc = func;\n        }\n        else {\n            RG.err('DungeonPopulate', 'setActorFunc',\n                `Tried to set non-function ${func} as actorFunc`);\n        }\n    }\n\n    public addPointGuardian(level: Level, point: TCoord, maxDanger) {\n        const eXY = point;\n        if (RG.isNullOrUndef([maxDanger]) || maxDanger < 1) {\n            RG.err('DungeonPopulate', 'addPointGuardian',\n                `maxDanger must be > 0. Got: |${maxDanger}|`);\n        }\n\n        const guardian = this.getEndPointGuardian(maxDanger);\n        if (guardian) {\n            if (guardian.getBrain().getGoal) {\n                const guardEval = new Evaluator.Guard(RG.BIAS.Guard, eXY);\n                guardian.getBrain().getGoal().addEvaluator(guardEval);\n            }\n            level.addActor(guardian, eXY[0], eXY[1]);\n        }\n        else {\n            const msg = `Could not get guardian for endpoint: ${point}`;\n            RG.warn('DungeonPopulate', 'addPointGuardian', msg);\n        }\n    }\n\n    public getEndPointGuardian(maxDanger) {\n        let currDanger = maxDanger;\n        let guardian = null;\n        let actorFunc = actor => actor.danger <= currDanger;\n        if (this.actorFunc) {\n            actorFunc = actor => (\n                this.actorFunc(actor) && actor.danger <= currDanger\n            );\n        }\n        while (!guardian && currDanger > 0) {\n            // TODO add some theming for the guardian\n            guardian = this._actorFact.createRandomActor({func: actorFunc});\n            --currDanger;\n        }\n        return guardian;\n    }\n\n    public addMainLoot(level, center, maxValue) {\n        const [cx, cy] = center;\n        // Add main loot\n        // 1. Scale is from 2-4 normal value, this scales the\n        // guardian danger as well\n        const scaleLoot = RNG.getUniformInt(2, 3);\n        const maxPrizeValue = scaleLoot * maxValue;\n        const minPrizeValue = (scaleLoot - 1) * maxValue;\n        const lootPrize = this._itemFact.createItem(\n            {func: item => item.value >= minPrizeValue\n                && item.value <= maxPrizeValue}\n        );\n        if (lootPrize) {\n            level.addItem(lootPrize, cx, cy);\n            return true;\n        }\n        return false;\n    }\n\n    /* Given level and x,y coordinate, tries to populate that point with content. */\n    public populatePoint(level, point, conf) {\n        const {maxDanger} = conf;\n        const type = RNG.arrayGetRand(popOptions);\n        // const [pX, pY] = point;\n        switch (type) {\n            case 'NOTHING': break;\n            case 'LOOT': this.addLootToPoint(level, point); break;\n            case 'GUARDIAN':\n                this.addPointGuardian(level, point, maxDanger);\n                break;\n            case 'ELEMENT': this.addElementToPoint(level, point, conf); break;\n            case 'CORPSE': this.addCorpseToPoint(level, point, conf); break;\n            case 'GOLD': this.addGoldToPoint(level, point); break;\n            case 'TIP': this.addTipToPoint(level, point, conf); break;\n            default: break;\n        }\n    }\n\n    /* DungeonPopulate.prototype.addActorGroup = function(level, point, conf) {\n\n    };*/\n\n    /* Adds an element into the given point. */\n    public addElementToPoint(level, point, conf) {\n        if (conf.true) {\n            // console.log('DungeonPopulate', level, conf, point); // TODO\n        }\n    }\n\n    /* Creates a corpse to the given point, and adds some related loot there. */\n    public addCorpseToPoint(level, point, conf) {\n        if (conf.true) {\n            // console.log('DungeonPopulate', level, conf, point); // TODO\n        }\n    }\n\n    public addLootToPoint(level, point) {\n        const maxValue = this.maxValue;\n        const lootTypes = [RG.ITEM_POTION, RG.ITEM_SPIRITGEM, RG.ITEM_AMMUNITION,\n            RG.ITEM_POTION, RG.ITEM_RUNE];\n        const generatedType = RNG.arrayGetRand(lootTypes);\n\n        const parser = ObjectShell.getParser();\n        const lootPrize = parser.createRandomItem(\n            {func: item => item.type >= generatedType\n                && item.value <= maxValue}\n        );\n        if (lootPrize) {\n            const [cx, cy] = point;\n            level.addItem(lootPrize, cx, cy);\n            return true;\n        }\n        return false;\n    }\n\n    public addGoldToPoint(level, point) {\n        const numCoins = this.maxValue;\n        const gold = new Item.GoldCoin();\n        gold.setCount(numCoins);\n        const [cx, cy] = point;\n        level.addItem(gold, cx, cy);\n    }\n\n    /* Adds a tip/hint to the given point. These hints can reveal information\n     * about world map etc. */\n    public addTipToPoint(level, point, conf) {\n        if (conf.true) {\n            // console.log('DungeonPopulate', level, conf, point); // TODO\n        }\n    }\n\n    public createShops(level: Level, conf): House[] {\n        const extras = level.getExtras();\n        const shopHouses: House[] = [];\n        if (extras.hasOwnProperty('houses')) {\n            const houses = extras.houses;\n\n            const usedHouses: number[] = [];\n            let watchDog = 0;\n            extras.shops = [];\n            for (let n = 0; n < conf.nShops; n++) {\n                const shopObj = new WorldShop();\n\n                // Find the next (unused) index for a house\n                let index = RNG.randIndex(houses);\n                while (usedHouses.indexOf(index) >= 0) {\n                    index = RNG.randIndex(houses);\n                    ++watchDog;\n                    if (watchDog === (2 * houses.length)) {\n                        RG.err('DungeonPopulate', 'createShops',\n                            'WatchDog reached max houses');\n                    }\n                }\n                usedHouses.push(index);\n\n                const house = extras.houses[index];\n                shopHouses.push(house);\n                const floor = house.floor;\n                const [doorX, doorY] = house.door;\n                const doorCell = level.getMap().getCell(doorX, doorY);\n                if (!doorCell.hasDoor()) {\n                    const door = new Element.ElementDoor(true);\n                    level.addElement(door, doorX, doorY);\n                }\n\n                const keeper = this.createShopkeeper(conf);\n                const shopCoord = [];\n                let keeperAdded = false;\n                for (let i = 0; i < floor.length; i++) {\n                    const xy = floor[i];\n\n                    const shopElem = new Element.ElementShop();\n                    shopElem.setShopkeeper(keeper);\n                    level.addElement(shopElem, xy[0], xy[1]);\n\n                    if (i === 0) {\n                        keeperAdded = true;\n                        level.addActor(keeper, xy[0], xy[1]);\n                    }\n\n                    const item = this._itemFact.getShopItem(n, conf);\n                    if (!item) {\n                        const msg = 'item null. ' +\n                            `conf: ${JSON.stringify(conf)}`;\n                        RG.err('DungeonPopulate', 'createShop',\n                            `${msg} shopFunc/type${n} not well defined.`);\n                    }\n                    else {\n                        item.add(new Component.Unpaid());\n                        level.addItem(item, xy[0], xy[1]);\n                        shopCoord.push(xy);\n                    }\n                }\n\n                if (!keeperAdded) {\n                    const json = JSON.stringify(house);\n                    RG.err('DungeonPopulate', 'createShops',\n                        'Could not add keeper to ' + json);\n                }\n\n                if (keeper.has('Shopkeeper')) {\n                    const shopKeep = keeper.get('Shopkeeper');\n                    shopKeep.setCells(shopCoord);\n                    shopKeep.setLevelID(level.getID());\n                    shopKeep.setDoorXY(doorCell.getXY());\n                    const name = keeper.getType() + ' shopkeeper';\n                    keeper.setName(name);\n                    RG.addCellStyle(RG.TYPE_ACTOR, name,\n                        'cell-actor-shopkeeper');\n                    const randXY = RNG.arrayGetRand(shopCoord);\n                    if (keeper.getBrain().getGoal) {\n                        const evalShop = new Evaluator.Shopkeeper(1.5);\n                        evalShop.setArgs({xy: randXY});\n                        keeper.getBrain().getGoal().addEvaluator(evalShop);\n                    }\n                }\n\n                shopObj.setShopkeeper(keeper);\n                shopObj.setLevel(level);\n                shopObj.setCoord(shopCoord);\n                extras.shops.push(shopObj);\n            }\n        }\n        else {\n            RG.err('DungeonPopulate', 'createShops', 'No houses in extras.');\n        }\n        return shopHouses;\n    }\n\n    /* Creates a shopkeeper actor. */\n    public createShopkeeper(conf) {\n        let keeper = null;\n        if (conf.parser) {\n            if (conf.actor) {\n                keeper = conf.parser.createRandomActor({\n                    func: conf.actor});\n                if (!keeper) {\n                    let msg = 'conf.actor given but no actor found';\n                    if (typeof conf.actor === 'function') {\n                        msg += ' conf.actor |\\n' + conf.actor.toString() + '|';\n                    }\n                    else {\n                        msg += ' conf.actor must be function';\n                    }\n                    RG.err('Factory', 'createShopkeeper', msg);\n                }\n            }\n            else {\n                keeper = conf.parser.createActor('shopkeeper');\n            }\n        }\n        else {\n            keeper = this._actorFact.createActor('shopkeeper', {brain: 'Human'});\n        }\n\n        keeper.add(new Component.Shopkeeper());\n        const gold = new Item.GoldCoin(RG.GOLD_COIN_NAME);\n        gold.setCount(RNG.getUniformInt(50, 200));\n        keeper.getInvEq().addItem(gold);\n\n        let keeperLevel = 10;\n        if (conf.maxDanger >= 6) {\n            keeperLevel = 2 * conf.maxDanger;\n        }\n        RG.levelUpActor(keeper, keeperLevel);\n\n        return keeper;\n    }\n\n    public createTrainers(level, conf) {\n        const houses: House[] = level.getExtras().houses;\n        if (RG.isSuccess(RG.TRAINER_PROB)) {\n            let trainer = null;\n            if (conf.parser) {\n                trainer = conf.parser.createActor('trainer');\n            }\n            else {\n                const trainerConf = {\n                    maxDanger: 5,\n                    actorFunc: actor => RG.ALL_RACES.findIndex(actor.type) >= 0\n                };\n                trainer = this.createActor(trainerConf);\n            }\n            const trainComp = new Component.Trainer();\n            trainer.add(trainComp);\n            const cell = level.getFreeRandCell();\n            level.addActor(trainer, cell.getX(), cell.getY());\n            if (houses) {\n                const house = RNG.arrayGetRand(houses);\n                if (trainer.getBrain().getGoal) {\n                    const evalHome = new Evaluator.GoHome(1.5);\n                    const xy = house.getCenter();\n                    evalHome.setArgs({xy});\n                    trainer.getBrain().getGoal().addEvaluator(evalHome);\n                    return [house];\n                }\n            }\n        }\n        return [];\n    }\n\n    public populateHouse(level: Level, house: House, conf): void {\n        const floorPerActor = 9;\n        const numFloor = house.numFloor;\n        let numActors = Math.round(numFloor / floorPerActor);\n        if (numActors === 0) {numActors = 1;}\n\n        for (let i = 0; i < numActors; i++) {\n            const actor = this.createActor(conf);\n            if (actor.getBrain().getGoal) {\n                const evalHome = new Evaluator.GoHome(1.5);\n                const xy = house.getCenter();\n                evalHome.setArgs({xy});\n                actor.getBrain().getGoal().addEvaluator(evalHome);\n            }\n            const floorXY = RNG.arrayGetRand(house.floor);\n            level.addActor(actor, floorXY[0], floorXY[1]);\n        }\n    }\n\n    public createActor(conf) {\n        const parser = ObjectShell.getParser();\n        const maxDanger = conf.maxDanger || this.maxDanger;\n        let actor = null;\n        if (maxDanger > 0) {\n            let actorFunc = aa => aa.danger <= maxDanger;\n            if (this.actorFunc) {\n                actorFunc = aa => (\n                    this.actorFunc(aa) && aa.danger <= maxDanger\n                );\n            }\n            else if (conf.actorFunc) {\n                actorFunc = aa => (\n                    conf.actorFunc(aa) && aa.danger <= maxDanger\n                );\n            }\n            actor = parser.createRandomActor({func: actorFunc});\n        }\n        else {\n            RG.err('DungeonPopulate', 'createActor',\n                'maxDanger must be > 0');\n        }\n        return actor;\n    }\n\n    public addActorsToBbox(level, bbox, conf) {\n        const nActors = conf.nActors || 4;\n        const {maxDanger, func} = conf;\n        const actors = this._actorFact.generateNActors(nActors, func, maxDanger);\n        Placer.addActorsToBbox(level, bbox, actors);\n    }\n\n    /* Adds N items to the given level in bounding box coordinates. */\n    public addItemsToBbox(level, bbox, conf) {\n        const nItems = conf.nItems || 4;\n        const itemConf = Object.assign({itemsPerLevel: nItems}, conf);\n        const items = this._itemFact.generateItems(itemConf);\n        Placer.addItemsToBbox(level, bbox, items);\n    }\n}\n\n","\ninterface String {\n    capitalize();\n}\n\nString.prototype.capitalize = String.prototype.capitalize || function() {\n    return this.charAt(0).toUpperCase() + this.substring(1);\n};\n\ninterface Function {\n    extend(any);\n}\n","\nimport RG from '../rg';\nimport * as Component from '../component';\nimport {BaseActor, SentientActor} from '../actor';\nimport {CellMap} from '../map';\nimport {Cell} from '../map.cell';\nimport {Geometry} from '../geometry';\nimport {BrainBase} from './brain.base';\nimport {Memory} from './brain.memory';\nimport {Random} from '../random';\n\ntype ActionCallback = import('../time').ActionCallback;\n\n// Dummy callback to return, if the actor's action provides a state\n// changing action without callback.\nexport const ACTION_ALREADY_DONE = Object.freeze(() => {});\nexport const NO_ACTION_TAKEN = Object.freeze(() => {});\n\nconst RNG = Random.getRNG();\n\n//---------------------------------------------------------------------------\n// BRAINS\n//---------------------------------------------------------------------------\n\nexport const Brain: any = {};\n\nfunction shortestDist(eX, eY, aX, aY): number {\n    const path = Geometry.getBresenham(eX, eY, aX, aY);\n    const getDist = path.length - 1;\n    return getDist > 0 ? getDist : 0;\n}\n\n/* Returns a list of cells around the actor. The distance d can be specified.\n* For example, d=1 gives 3x3 region, d=2 5x5 region, d=3 7x7 ... */\nBrain.getCellsAroundActor = (actor: BaseActor, d = 1): Cell[] => {\n    const map: CellMap = actor.getLevel().getMap();\n    const [x, y] = actor.getXY();\n    const cells: Cell[] = [];\n\n    for (let xx = x - d; xx <= x + d; xx++) {\n        for (let yy = y - d; yy <= y + d; yy++) {\n            if (map.hasXY(xx, yy)) {\n                if (xx !== x || yy !== y) {\n                    cells.push(map.getCell(xx, yy));\n                }\n            }\n        }\n    }\n    return cells;\n};\n\nBrain.getBoxOfFreeCellsAround = (actor: BaseActor, d: number): Cell[] => {\n    const map = actor.getLevel().getMap();\n    const [x, y] = actor.getXY();\n    // Grab free cells around the player in the new level, and try\n    // to place actors into them\n    let coordAround = Geometry.getBoxAround(x, y, d);\n    coordAround = coordAround.filter(xy => (\n        map.hasXY(xy[0], xy[1])\n    ));\n    let cells = coordAround.map(xy => map.getCell(xy[0], xy[1]));\n    cells = cells.filter(cell => cell.isFree());\n    return cells;\n};\n\n/* Returns all cells with actors in them from list of seen cells. */\nBrain.findCellsWithActors = (actor: BaseActor, seenCells: Cell[], filterFunc): Cell[] => {\n    const cells = [];\n    for (let i = 0, iMax = seenCells.length; i < iMax; i++) {\n        if (seenCells[i].hasProp('actors')) {\n            const actors = seenCells[i].getProp('actors');\n            // Exclude itself from list\n            if (actors[0].getID() !== actor.getID()) {\n                if (filterFunc && filterFunc(actors)) {\n                    cells.push(seenCells[i]);\n                }\n                else {\n                    cells.push(seenCells[i]);\n                }\n            }\n        }\n    }\n    return cells;\n};\n\nBrain.getActorsInCells = (seenCells: Cell[], filterFunc): BaseActor[] => {\n    const cells = [];\n    for (let i = 0, iMax = seenCells.length; i < iMax; i++) {\n        if (seenCells[i].hasProp('actors')) {\n            const actors = seenCells[i].getProp('actors');\n            if (actors.length === 1) {\n                if (filterFunc) {\n                    if (filterFunc(actors[0])) {\n                        cells.push(actors[0]);\n                    }\n                }\n                else {\n                    cells.push(actors[0]);\n                }\n            }\n            else {\n                actors.forEach(foundActor => {\n                    if (filterFunc) {\n                        if (filterFunc(foundActor)) {\n                            cells.push(foundActor);\n                        }\n                    }\n                    else {\n                        cells.push(foundActor);\n                    }\n                });\n            }\n        }\n    }\n    return cells;\n};\n\nBrain.getSeenHostiles = (ent): SentientActor[] => {\n    const seenCells = ent.getBrain().getSeenCells();\n    const filterFunc = (actor) => actor.isEnemy(ent);\n    const enemies = Brain.getActorsInCells(seenCells, filterFunc);\n    return enemies as SentientActor[];\n};\n\nBrain.findCellsWithFriends = (actor: BaseActor, seenCells: Cell[]): Cell[] => {\n    const cells = [];\n    for (let i = 0, iMax = seenCells.length; i < iMax; i++) {\n        if (seenCells[i].hasActors()) {\n            const actors = seenCells[i].getSentientActors();\n            actors.forEach(actorFound => {\n                if (actorFound.getID() !== actor.getID()) {\n                    if (!actorFound.isEnemy(actor)) {\n                        cells.push(seenCells[i]);\n                    }\n                }\n            });\n        }\n    }\n    return cells;\n};\n\n/* Returns all cells with actors in them around the actor. */\nBrain.getActorCellsAround = (actor: BaseActor): Cell[] => {\n    const cellsAround = Brain.getCellsAroundActor(actor);\n    const res = cellsAround.filter(cell => cell.hasActors());\n    return res;\n};\n\n/* Returns all cells with actors in them around the actor. */\nBrain.getActorsAround = (actor: BaseActor): BaseActor[] => {\n    const cellsAround = Brain.getCellsAroundActor(actor);\n    let actors = [];\n    cellsAround.forEach(c => {\n        if (c.hasActors()) {actors = actors.concat(c.getActors());}\n    });\n    return actors;\n};\n\nBrain.getEnemyCellsAround = (actor: BaseActor): Cell[] => {\n    const cellsAround = Brain.getCellsAroundActor(actor);\n    const res = cellsAround.filter(cell => (\n        cell.hasActors() &&\n            actor.getBrain().getMemory().isEnemy(cell.getActors()[0])\n    ));\n    return res;\n};\n\nBrain.getFriendCellsAround = (actor: BaseActor): Cell[] => {\n    const cellsAround = Brain.getCellsAroundActor(actor);\n    const res = cellsAround.filter(cell => (\n        cell.hasActors() &&\n            actor.getBrain().getMemory().isFriend(cell.getActors()[0])\n    ));\n    return res;\n};\n\nBrain.distToActor = (actor1: BaseActor, actor2: BaseActor): number => {\n    const [eX, eY] = actor1.getXY();\n    const [aX, aY] = actor2.getXY();\n    const getDist = shortestDist(eX, eY, aX, aY);\n    return getDist;\n};\n\nBrain.getTelepathyCells = function(actor: BaseActor): Cell[] {\n    const actorLevelID = actor.getLevel().getID();\n    const tepathyComps = actor.getList('Telepathy');\n    let cells = [];\n    tepathyComps.forEach(teleComp => {\n        const target = teleComp.getTarget();\n        const targetLevel = target.getLevel();\n        if (RG.isActorActive(target)) {\n            if (targetLevel.getID() === actorLevelID) {\n                const newCells = targetLevel.getMap().getVisibleCells(target);\n                cells = cells.concat(newCells);\n            }\n        }\n    });\n    return cells;\n};\n\n//-----------------\n// BRAIN BASE\n//-----------------\n\nexport class BrainNonSentient extends BrainBase {\n    constructor(actor) {\n        super(actor);\n        this.setType('NonSentient');\n    }\n\n    public decideNextAction(obj?: any): ActionCallback | null {\n        return NO_ACTION_TAKEN;\n    }\n}\nBrain.NonSentient = BrainNonSentient;\n\n/* Brain is used by the AI to perform and decide on actions. Brain returns\n * actionable callbacks but doesn't know Action objects.  */\nexport class BrainSentient extends BrainBase {\n    protected _explored: {[key: string]: boolean};\n    protected _memory: Memory;\n    protected _cache: {[key: string]: any[]};\n\n    constructor(actor) {\n        super(actor);\n        this._explored = {}; // Memory of explored cells\n        this._type = 'Sentient';\n        this._memory = new Memory();\n        this._cache = {\n            seen: null\n        };\n        // this._passableCallback = this._passableCallback.bind(this);\n    }\n\n    public getMemory(): Memory {\n        return this._memory;\n    }\n\n    public addEnemy(actor) {\n        this._memory.addEnemy(actor);\n    }\n\n    public addFriend(actor) {\n        this._memory.addFriend(actor);\n    }\n\n    public addEnemyType(type) {\n        this._memory.addEnemyType(type);\n    }\n\n    /* Main function for retrieving the actionable callback. */\n    public decideNextAction(obj?: any): ActionCallback {\n        this._cache.seen = null;\n        RG.err('BrainSentient', 'decideNextAction',\n            'Not implemented in this class');\n        return null;\n    }\n\n    // Returns cells seen by this actor\n    public getSeenCells(): Cell[] {\n        if (this._cache.seen) {\n            return this._cache.seen;\n        }\n        const map = this._actor.getLevel().getMap();\n        this._cache.seen = map.getVisibleCells(this._actor);\n        if (this._actor.has('Telepathy')) {\n            const otherSeen = Brain.getTelepathyCells(this._actor);\n            this._cache.seen = this._cache.seen.concat(otherSeen);\n        }\n        return this._cache.seen;\n    }\n\n    /* Checks if the actor can melee attack given x,y coordinate.*/\n    public canMeleeAttack(x: number, y: number): boolean {\n        const attackRange = this._actor.get('Combat').getAttackRange();\n        const [dX, dY] = RG.dXdYAbs([x, y], this._actor);\n        if (dX <= attackRange && dY <= attackRange) {return true;}\n        return false;\n    }\n\n    public findSeenCell(func: (Cell) => boolean): Cell[] {\n        const seenCells = this.getSeenCells();\n        return seenCells.filter(func);\n    }\n\n    /* Returns true if this actor can see the given actor. */\n    public canSeeActor(actor: BaseActor): boolean {\n        const seenCells = this.getSeenCells();\n        const cells = Brain.findCellsWithActors(this._actor, seenCells);\n        let canSee = false;\n        cells.forEach(cell => {\n            const actors = cell.getActors();\n            actors.forEach(a => {\n                if (a.getID() === actor.getID()) {\n                    canSee = true;\n                }\n            });\n        });\n        return canSee;\n    }\n\n    /* Given a list of cells, returns a cell with an enemy in it or null.*/\n    public findEnemyCell(seenCells: Cell[]): Cell {\n        const enemyCells = [];\n        const cells = Brain.findCellsWithActors(this._actor, seenCells);\n        for (let i = 0; i < cells.length; i++) {\n            const actors = cells[i].getSentientActors();\n            for (let j = 0; j < actors.length; j++) {\n                if (this._memory.isEnemy(actors[j])) {\n                    this._memory.addEnemySeenCell(actors[j]);\n                    if (this._memory.wasLastAttacked(actors[j])) {\n                        return cells[i];\n                    }\n                    else {\n                        enemyCells.push(cells[i]);\n                    }\n                }\n            }\n        }\n        // Return random enemy cell to make behav less predictable\n        if (enemyCells.length > 0) {\n            return RNG.arrayGetRand(enemyCells);\n        }\n        return null;\n    }\n\n    /* Finds a friend cell among seen cells.*/\n    public findFriendCell(seenCells: Cell[]): Cell | null {\n        const memory = this.getMemory();\n        const cells = Brain.findCellsWithActors(this._actor, seenCells);\n        for (let i = 0; i < cells.length; i++) {\n            const actors = cells[i].getActors();\n            if (!memory.isEnemy(actors[0])) {return cells[i];}\n        }\n        return null;\n    }\n\n    public toJSON(): any {\n        return {\n            type: this.getType(),\n            memory: this.getMemory().toJSON()\n        };\n    }\n\n    public canPickupItem(): boolean {\n        const cell = this._actor.getCell();\n        if (cell.hasItems()) {\n            const topItem = cell.getItems()[0];\n            return (this._actor as SentientActor).getInvEq().canCarryItem(topItem);\n        }\n        return false;\n    }\n\n    public pickupItem(): () => void {\n        return () => {\n            const pickup = new Component.Pickup();\n            this._actor.add(pickup);\n        };\n    }\n\n    /* Takes action towards given enemy cell.*/\n    public actionTowardsEnemy(enemyCell: Cell): () => void {\n        const level = this._actor.getLevel();\n        const playX = enemyCell.getX();\n        const playY = enemyCell.getY();\n        if (this.canMeleeAttack(playX, playY)) {\n            return () => {\n                const cell = level.getMap().getCell(playX, playY);\n                const target = cell.getProp('actors')[0];\n                const attackComp = new Component.Attack({target});\n                this._actor.add(attackComp);\n            };\n        }\n        else { // Move closer\n            return this.tryToMoveTowardsCell(enemyCell);\n        }\n    }\n\n    public tryToMoveTowardsCell(cell: Cell): () => void {\n        // Simple dX,dY computation as first option\n        const level = this._actor.getLevel();\n        const [aX, aY] = this._actor.getXY();\n        const [cX, cY] = [cell.getX(), cell.getY()];\n        let [dX, dY] = [cX - aX, cY - aY];\n        dX = dX !== 0 ? dX / Math.abs(dX) : 0;\n        dY = dY !== 0 ? dY / Math.abs(dY) : 0;\n\n        const [newX, newY] = [aX + dX, aY + dY];\n        const newCell = level.getMap().getCell(newX, newY);\n        if (newCell.isPassable()) {\n            return () => {\n                const movComp = new Component.Movement(newX, newY, level);\n                this._actor.add(movComp);\n            };\n        }\n\n        // If simple option fails, resort to path finding\n        const pathCells = this.getShortestPathTo(cell);\n        if (pathCells.length > 1) {\n            const x = pathCells[1].getX();\n            const y = pathCells[1].getY();\n            return () => {\n                const movComp = new Component.Movement(x, y, level);\n                this._actor.add(movComp);\n            };\n        }\n        else {\n            return NO_ACTION_TAKEN; // Don't move, rest\n        }\n    }\n\n    /* Returns all friends that are visible to the brain's actor. */\n    public getSeenFriends(): BaseActor[] {\n        const friends = [];\n        const memory = this.getMemory();\n        const seenCells = this.getSeenCells();\n        const cells = Brain.findCellsWithActors(this._actor, seenCells);\n        for (let i = 0; i < cells.length; i++) {\n            const actors = cells[i].getActors();\n            if (memory.isFriend(actors[0])) {\n                friends.push(actors[0]);\n            }\n        }\n        return friends;\n    }\n\n    /* Returns all enemies that are visible to the brain's actor. */\n    public getSeenEnemies(): SentientActor[] {\n        const memory = this.getMemory();\n        const seenCells = this.getSeenCells();\n        const filterFunc = actor => memory.isEnemy(actor);\n        const enemies = Brain.getActorsInCells(seenCells, filterFunc);\n        return enemies as SentientActor[];\n    }\n\n    /* Based on seenCells, AI explores the unexplored free cells, or picks on\n     * cell randomly, if everything's explored.*/\n    public exploreLevel(seenCells) {\n        // Wander around exploring\n        let index = -1;\n        let perms = [];\n        for (let j = 0; j < seenCells.length; j++) {perms.push(j);}\n        perms = RNG.shuffle(perms);\n\n        for (let i = 0, ll = perms.length; i < ll; i++) {\n            const ci = perms[i];\n            const cell = seenCells[ci];\n            if (cell.isFree()) {\n                const xy = cell.getX() + ',' + cell.getY();\n                if (!this._explored.hasOwnProperty(xy)) {\n                    this._explored[xy] = true;\n                    index = ci;\n                    break;\n                }\n            }\n            else if (cell.hasDoor()) {\n                const door = cell.getPropType('door')[0];\n                if (door.canToggle()) {\n                    const comp = new Component.OpenDoor();\n                    comp.setDoor(door);\n                    this._actor.add(comp);\n                    return ACTION_ALREADY_DONE;\n                }\n            }\n        }\n\n        if (index === -1) { // Everything explored, choose random cell\n            index = RNG.randIndex(seenCells);\n        }\n        return this.tryToMoveTowardsCell(seenCells[index]);\n\n    }\n\n    /* Returns shortest path from actor to the given cell. Resulting cells are\n     * returned in order: closest to the actor first. Thus moving to the\n     * next cell can be done by taking the first returned cell.*/\n    public getShortestPathTo(cell: Cell) {\n        const [toX, toY] = cell.getXY();\n        const map = this._actor.getLevel().getMap();\n        return map.getShortestPathTo(this._actor, toX, toY);\n    }\n\n    /* Flees from the given cell or explores randomly if cannot. */\n    public fleeFromCell(cell: Cell, seenCells: Cell[]): () => void {\n        const x = cell.getX();\n        const y = cell.getY();\n        const thisX = this._actor.getX();\n        const thisY = this._actor.getY();\n        const deltaX = x - thisX;\n        const deltaY = y - thisY;\n        // delta determines the direction to flee\n        const newX = thisX - deltaX;\n        const newY = thisY - deltaY;\n        if (this._actor.getLevel().getMap().hasXY(newX, newY)) {\n            const newCell = this._actor.getLevel().getMap().getCell(newX, newY);\n            if (newCell.isPassable()) {\n                return this.tryToMoveTowardsCell(newCell);\n            }\n            else if (this._actor.has('Flying') && newCell.isPassableByAir()) {\n                return this.tryToMoveTowardsCell(newCell);\n            }\n        }\n        return this.exploreLevel(seenCells);\n    }\n\n    /* Returns all free cells around the actor owning the brain.*/\n    public getFreeCellsAround(): Cell[] {\n        const cellsAround = Brain.getCellsAroundActor(this._actor);\n        return cellsAround.filter(cell => cell.isFree());\n    }\n\n    public getRandAdjacentFreeCell(): Cell {\n        const cellsAround = this.getFreeCellsAround();\n        if (cellsAround.length > 0) {\n            return RNG.arrayGetRand(cellsAround);\n        }\n        return null;\n    }\n}\n\nBrain.Sentient = BrainSentient;\n\n/* Brain object used by archers. */\n/*\nexport class BrainArcher extends BrainSentient {\n    constructor(actor) {\n        super(actor);\n        this.setType('Archer');\n    }\n\n    public canDoRangedAttack(): boolean {\n        const seenCells = this.getSeenCells();\n        const enemy = this.findEnemyCell(seenCells);\n        const x = enemy.getX();\n        const y = enemy.getY();\n        const actorX = this._actor.getX();\n        const actorY = this._actor.getY();\n        const miss = (this._actor as SentientActor).getInvEq().getEquipment().getItem('missile');\n        if (miss) {\n            const range = RG.getMissileRange(this._actor, miss);\n            const getDist = shortestDist(x, y, actorX, actorY);\n            if (getDist <= range) {return true;}\n            // TODO test for a clean shot\n        }\n        return false;\n    }\n\n    public doRangedAttack(): () => void {\n        const seenCells = this.getSeenCells();\n        const enemy = this.findEnemyCell(seenCells);\n        const x = enemy.getX();\n        const y = enemy.getY();\n        const mComp = new Component.Missile(this._actor);\n\n        const invEq = (this._actor as SentientActor).getInvEq();\n        const missile = invEq.unequipAndGetItem('missile', 1, 0);\n        mComp.setTargetXY(x, y);\n        mComp.setDamage(RG.getMissileDamage(this._actor, missile));\n        mComp.setAttack(RG.getMissileAttack(this._actor, missile));\n        mComp.setRange(RG.getMissileRange(this._actor, missile));\n        missile.add(mComp);\n        return ACTION_ALREADY_DONE;\n    }\n\n    public decideNextAction(): ActionCallback | null {\n        this._cache.seen = null;\n        // return BTree.startBehavTree(Models.Archer.tree, this._actor)[0];\n        RG.err('BrainArcher', 'decideNextAction', 'Not supported anymore');\n        return null;\n    }\n}\nBrain.Archer = BrainArcher;\n*/\n","\nimport RG from './rg';\nimport {Entity} from './entity';\nimport * as Mixin from './mixin';\nimport {TCoord} from './interfaces';\n\nimport * as Component from './component/component';\nimport {compsToJSON} from './component/component.base';\n\nimport {BrainBase, BrainGoalOriented} from './brain';\nimport {BrainPlayer} from './brain/brain.player';\n\nimport {Inventory} from './inv';\nimport * as Time from './time';\ntype Level = import('./level').Level;\n\ntype ActionCallback = Time.ActionCallback;\ntype ItemArmour = import('./item').Armour;\ntype MissileWeapon = import('./item').MissileWeapon;\ntype Cell = import('./map.cell').Cell;\n\nexport const Actor: any = {};\n\nexport const ACTOR_NO_ACTION = Object.freeze(() => {});\nconst EMPTY_ARGS = Object.freeze({});\nconst SPEED_COEFF = RG.BASE_SPEED * RG.ACTION_DUR;\n\nexport interface StatsData {\n    [key: string]: string | number | [number, number];\n}\n\nexport class BaseActor extends Entity {\n\n    protected _brain: BrainBase;\n\n    constructor(name: string) {\n        super({propType: RG.TYPE_ACTOR, type: null});\n        const named = new Component.Named();\n        named.setName(name);\n        this.add(named);\n        this.add(new Component.Action());\n        this.add(new Component.Location());\n        this.add(new Component.Typed('BaseActor', RG.TYPE_ACTOR));\n    }\n\n    public getType() {return this.get('Typed').getObjType();}\n    public setType(type) {return this.get('Typed').setObjType(type);}\n    public getPropType() {return this.get('Typed').getPropType();}\n    public setPropType(type) {return this.get('Typed').setPropType(type);}\n\n    public getCell(): Cell | null {\n        return this.get('Location').getCell();\n    }\n    public isLocated(): boolean {\n        return this.get('Location').isLocated();\n    }\n    public unsetLevel(): void {\n        this.get('Location').unsetLevel();\n    }\n    public setLevel(level: Level): void {\n        return this.get('Location').setLevel(level);\n    }\n    public getLevel() {return this.get('Location').getLevel();}\n    public getX(): number {return this.get('Location').getX();}\n    public getY(): number {return this.get('Location').getY();}\n    public getXY(): TCoord {return this.get('Location').getXY();}\n    public setXY(x, y): void {\n        this.get('Location').setXY(x, y);\n    }\n\n    /* Returns true if actor is a player.*/\n    public isPlayer() {\n        return this.has('Player') || this.has('PlayerControlled');\n    }\n\n    public isEnemy(actor: BaseActor): boolean {return false;}\n    public addEnemy(actor: BaseActor): void {/* No implementation here */}\n    public addEnemyType(type: string): void {/* No implementation here */}\n\n    public setName(name: string) {this.get('Named').setName(name);}\n    public getName(): string {\n        return this.get('Named').getFullName();\n    }\n\n    public getBrain(): BrainBase {return this._brain;}\n\n    public setBrain(brain: BrainBase): void {\n        this._brain = brain;\n        this._brain.setActor(this);\n    }\n\n    public getSpeed(): number {\n        return RG.BASE_SPEED;\n    }\n\n    public getEquipProtection(): number {return 0;}\n\n    /* Returns the next action for this actor.*/\n    public nextAction(obj?): Time.Action | null {\n        // Use actor brain to determine the action\n        const cb: ActionCallback = this._brain.decideNextAction(obj);\n        let action = null;\n\n        if (cb !== null) {\n            const duration = Math.round(SPEED_COEFF / this.getSpeed());\n            action = new Time.Action(duration, cb);\n        }\n        else {\n            action = new Time.Action(0, ACTOR_NO_ACTION);\n        }\n\n        if (this._brain.hasOwnProperty('energy')) {\n            const bp = this._brain as unknown;\n            action.energy = (bp as BrainPlayer).energy;\n        }\n        action.actor = this;\n        return action;\n    }\n\n    /* Serializes the virtual actor. */\n    public toJSON() {\n        let levelID = null;\n        if (this.getLevel()) {\n            levelID = this.getLevel().getID();\n        }\n        const obj: any = {\n            id: this.getID(),\n            // name: this.getName(),\n            type: this.getType(),\n            levelID,\n            brain: this._brain.toJSON(),\n            new: 'Base' // Must match a constr function name in Actor\n        };\n\n        obj.components = compsToJSON(this);\n\n        if (obj.type === null) {\n            RG.err('Actor.Virtual', 'toJSON',\n                `Type null for ${JSON.stringify(obj)}`);\n        }\n\n        return obj;\n    }\n\n}\nActor.Base = BaseActor;\n\n\n/* Object representing a game actor who takes actions.  */\nexport class SentientActor extends BaseActor {\n\n    public static getFormattedStats: (actor: SentientActor) => StatsData;\n\n    protected _invEq: Inventory;\n    protected _maxWeight: number;\n    protected _actorClass: any;\n    protected _spellbook?: any;\n    protected _actualBrain?: any;\n    protected _brain: BrainGoalOriented | BrainPlayer;\n\n    constructor(name) { // {{{2\n        super(name);\n\n        this._brain = new BrainGoalOriented(this);\n        this._brain.getMemory().addEnemyType('player');\n\n        this._invEq = new Inventory(this);\n        this._maxWeight = 10.0;\n\n        // Components for this entity\n        this.add(new Component.Experience());\n        this.add(new Component.Combat());\n        this.add(new Component.Stats());\n        this.add(new Component.Health(50));\n        this.add(new Component.Corporeal());\n\n        const perception = new Component.Perception();\n        perception.setFOVRange(RG.NPC_FOV_RANGE);\n        this.add(perception);\n    }\n\n    public getFOVRange() {\n        let range = this.get('Perception').getFOVRange();\n        if (this.has('EagleEye')) {range += 2;}\n        return range;\n    }\n\n    public setFOVRange(range) {\n        this.get('Perception').setFOVRange(range);\n    }\n\n    //---------------------------------\n    // Brain-related methods\n    //---------------------------------\n\n    public addEnemyType(type: string): void {\n        this._brain.getMemory().addEnemyType(type);\n    }\n    public addEnemy(actor: BaseActor): void {\n        (this._brain as BrainGoalOriented).addEnemy(actor);\n    }\n    public addFriend(actor: BaseActor): void {\n        (this._brain as BrainGoalOriented).addFriend(actor);\n    }\n\n    public isEnemy(actor: BaseActor): boolean {\n        return this._brain.getMemory().isEnemy(actor);\n    }\n\n    public isFriend(actor: BaseActor): boolean {\n        return this._brain.getMemory().isFriend(actor);\n    }\n\n    //---------------------------------\n    // Equipment related methods\n    //---------------------------------\n\n    public getInvEq() { return this._invEq; }\n\n    /* Returns weapon that is wielded by the actor.*/\n    public getWeapon() {return this._invEq.getWeapon();}\n\n    /* Returns weapon that is wielded by the actor.*/\n    public getMissileWeapon(): MissileWeapon | null {\n        return this._invEq.getMissileWeapon();\n    }\n\n    /* Returns missile equipped by the player.*/\n    public getMissile() {\n        return this._invEq.getEquipment().getItem('missile');\n    }\n\n    public getEquipAttack() {\n        let att = this._invEq.getEquipment().getAttack();\n        if (this.has('Skills')) {\n            att += this.get('Skills').getLevel('Melee');\n        }\n        return att;\n    }\n\n    public getEquipDefense() {\n        let def = this._invEq.getEquipment().getDefense();\n        if (this.has('Skills')) {\n            def += this.get('Skills').getLevel('Shields');\n        }\n        return def;\n    }\n\n    public getEquipProtection() {\n        return this._invEq.getEquipment().getProtection();\n    }\n\n    public getShieldDefense() {\n        const shield = this._invEq.getEquipment().getEquipped('shield');\n        let bonus = 0;\n        if (shield) {\n            const armour = shield as unknown;\n            bonus = (armour as ItemArmour).getDefense();\n            if (this.has('Skills')) {\n                bonus += this.get('Skills').getLevel('Shields');\n            }\n        }\n        return bonus;\n    }\n\n    public setActorClass(classObj) {\n        this._actorClass = classObj;\n    }\n\n    public getActorClass() {\n        return this._actorClass;\n    }\n\n    public setBook(book) {\n        this._spellbook = book;\n    }\n\n    public getBook() {\n        return this._spellbook;\n    }\n\n    /* Returns carrying capacity of the actor.*/\n    public getMaxWeight() {\n        const statStr = this.get('Stats').getStrength();\n        const eqStr = this._invEq.getEquipment().getStrength();\n        return 2 * statStr + 2 * eqStr + this._maxWeight;\n    }\n\n    /* Marks actor as player. Cannot unset player.*/\n    public setIsPlayer(isPlayer) {\n        if (isPlayer) {\n            this._brain = new BrainPlayer(this);\n            addPlayerBrainComps(this);\n            this.add(new Component.Player());\n            if (!this.has('SpellPower')) {\n                this.add(new Component.SpellPower());\n            }\n        }\n        else {\n            RG.err('Actor.Sentient', 'setIsPlayer',\n                'Actor cannot be changed from player to mob.');\n        }\n    }\n\n    /* Used when controlling other actors with the \"real player\" actor .*/\n    public setPlayerCtrl(isPlayer) {\n        if (isPlayer) {\n            this.add(new Component.PlayerControlled());\n            this._actualBrain = this._brain;\n            this._brain = new BrainPlayer(this);\n            addPlayerBrainComps(this);\n            this.add(new Component.Possessed());\n        }\n        else {\n            this.remove('PlayerControlled');\n            this.remove('Possessed');\n            removePlayerBrainComps(this);\n            this._brain = this._actualBrain;\n            delete this._actualBrain;\n        }\n    }\n\n    /* Returns the cell where this actor is located at.*/\n    public getCell() {\n        const x = this.getX();\n        const y = this.getY();\n        const level = this.getLevel();\n        if (level) {\n            return level.getMap().getCell(x, y);\n        }\n        return null;\n    }\n\n    public isInLevel(level) {\n        if (this.getLevel()) {\n            return this.getLevel().getID() === level.getID();\n        }\n        return false;\n    }\n\n    public toJSON() {\n        let levelID = null;\n        if (this.getLevel()) {\n            levelID = this.getLevel().getID();\n        }\n        const obj: any = {\n            id: this.getID(),\n            name: this.getName(),\n            type: this.getType(),\n            x: this.getX(),\n            y: this.getY(),\n            fovRange: this.getFOVRange(),\n            levelID,\n            inventory: this.getInvEq().getInventory().toJSON(),\n            equipment: this.getInvEq().getEquipment().toJSON(),\n            brain: this._brain.toJSON(),\n            new: 'Sentient', // Must match a constr function name in Actor\n            components: compsToJSON(this)\n        };\n\n        if (obj.type === null) {\n            RG.err('Actor.Sentient', 'toJSON',\n                `Type null for ${JSON.stringify(obj)}`);\n        }\n\n        if (this._spellbook) {\n            obj.spellbook = this._spellbook.toJSON();\n        }\n        if (this.has('Player')) {\n            obj.isPlayer = true;\n        }\n        if (this._actualBrain) {\n            obj.brain = this._actualBrain.toJSON();\n        }\n\n        return obj;\n    }\n\n    //---------------------------------\n    // Combat-related methods\n    //---------------------------------\n\n    public getAttack(): number {\n        let attack = this.get('Combat').getAttack();\n        attack += this.getEquipAttack();\n        attack += this._addFromCompList('CombatMods', 'getAttack');\n        attack += RG.accuracyToAttack(this.getAccuracy());\n        return attack;\n    }\n\n    public getDefense(): number {\n        let defense = this.get('Combat').getDefense();\n        defense += this.getEquipDefense();\n        defense += this._addFromCompList('CombatMods', 'getDefense');\n        defense += RG.agilityToDefense(this.getAgility());\n        return defense;\n    }\n\n    public getProtection(): number {\n        let protection = this.get('Combat').getProtection();\n        protection += this.getEquipProtection();\n        protection += this._addFromCompList('CombatMods', 'getProtection');\n        return protection;\n    }\n\n    public getDamage(): number {\n        let damage = this.get('Combat').rollDamage();\n        const weapon = this.getWeapon();\n        if (weapon) {\n            const wpnDamage = RG.getItemDamage(weapon);\n            if (wpnDamage > damage) {\n                damage = wpnDamage;\n            }\n        }\n        const strength = this.getStrength();\n        damage += RG.strengthToDamage(strength);\n        damage += this._addFromCompList('CombatMods', 'getDamage');\n        return damage;\n\n    }\n\n    public getCombatBonus(funcName: string): number {\n        return this._addFromCompList('CombatMods', funcName);\n    }\n\n    public _addFromCompList(compType: string, func): number {\n        const compList = this.getList(compType);\n        if (compList.length > 0) {\n            return compList.reduce((acc, val) => {\n                return acc + val[func]();\n            }, 0);\n        }\n        return 0;\n    }\n\n    //-------------------------------------------------------------\n    // Stats-related methods (these take eq and boosts into account\n    //-------------------------------------------------------------\n\n    public getAccuracy(): number {\n        let acc = this.get('Stats').getAccuracy();\n        acc += this.getInvEq().getEquipment().getAccuracy();\n        acc += this._addFromCompList('StatsMods', 'getAccuracy');\n        return acc;\n    }\n\n    public getAgility(): number {\n        let agi = this.get('Stats').getAgility();\n        agi += this.getInvEq().getEquipment().getAgility();\n        agi += this._addFromCompList('StatsMods', 'getAgility');\n        return agi;\n    }\n\n    public getStrength(): number {\n        let str = this.get('Stats').getStrength();\n        str += this.getInvEq().getEquipment().getStrength();\n        str += this._addFromCompList('StatsMods', 'getStrength');\n        return str;\n    }\n\n    public getWillpower(): number {\n        let wil = this.get('Stats').getWillpower();\n        wil += this.getInvEq().getEquipment().getWillpower();\n        wil += this._addFromCompList('StatsMods', 'getWillpower');\n        return wil;\n    }\n\n    public getSpeed(): number {\n        let speed = this.get('Stats').getSpeed();\n        speed += this.getInvEq().getEquipment().getSpeed();\n        speed += this._addFromCompList('StatsMods', 'getSpeed');\n        return speed;\n    }\n\n    public getPerception(): number {\n        let per = this.get('Stats').getPerception();\n        per += this.getInvEq().getEquipment().getPerception();\n        per += this._addFromCompList('StatsMods', 'getPerception');\n        return per;\n    }\n\n    public getMagic(): number {\n        let mag = this.get('Stats').getMagic();\n        mag += this.getInvEq().getEquipment().getMagic();\n        mag += this._addFromCompList('StatsMods', 'getMagic');\n        return mag;\n    }\n\n    /* Returns bonuses applied to given stat. */\n    public getStatBonus(funcName: string): number {\n        return this._addFromCompList('StatsMods', funcName);\n    }\n}\n\nconst playerBrainComps = ['StatsMods', 'CombatMods'];\n\nfunction addPlayerBrainComps(actor): void {\n    playerBrainComps.forEach(compName => {\n        let hasTag = false;\n        if (actor.has(compName)) {\n            const list = actor.getList(compName);\n            list.forEach(comp => {\n                if (comp.getTag() === 'brain-player') {\n                    hasTag = true;\n                }\n            });\n        }\n\n        if (!hasTag) {\n            const statsMods = new Component[compName]();\n            statsMods.setTag('brain-player');\n            actor.add(statsMods);\n        }\n    });\n}\n\nfunction removePlayerBrainComps(actor: Entity): void {\n    playerBrainComps.forEach(compName => {\n        let compID = -1;\n        if (actor.has(compName)) {\n            const list = actor.getList(compName);\n            list.forEach(comp => {\n                if (comp.getTag() === 'brain-player') {\n                    compID = comp.getID();\n                }\n            });\n        }\n        if (compID !== -1) {\n            actor.remove(compID);\n        }\n    });\n}\nActor.Sentient = SentientActor;\n\n/* Returns an objected containing stats data for the given actor. */\nSentientActor.getFormattedStats = function(actor): StatsData {\n    const dungeonLevel = actor.getLevel().getLevelNumber();\n    const location = RG.formatLocationName(actor.getLevel());\n\n    let PP = null;\n    if (actor.has('SpellPower')) {\n      PP = actor.get('SpellPower').getPP() + '/'\n      + actor.get('SpellPower').getMaxPP();\n    }\n\n    // Compile final stats information\n    // Add typings\n    const stats: any = {\n      HP: actor.get('Health').getHP() + '/'\n      + actor.get('Health').getMaxHP(),\n      PP,\n\n      Att: [actor.getAttack(), actor.getCombatBonus('getAttack')],\n      Def: [actor.getDefense(), actor.getCombatBonus('getDefense')],\n      Pro: [actor.getProtection(), actor.getCombatBonus('getProtection')],\n\n      Str: [actor.getStrength(), actor.getStatBonus('getStrength')],\n      Agi: [actor.getAgility(), actor.getStatBonus('getAgility')],\n      Acc: [actor.getAccuracy(), actor.getStatBonus('getAccuracy')],\n      Wil: [actor.getWillpower(), actor.getStatBonus('getWillpower')],\n      Per: [actor.getPerception(), actor.getStatBonus('getPerception')],\n      Mag: [actor.getMagic(), actor.getStatBonus('getMagic')],\n\n      Speed: [actor.getSpeed(), actor.getStatBonus('getSpeed')],\n      XP: actor.get('Experience').getExp(),\n      XL: actor.get('Experience').getExpLevel(),\n      DL: dungeonLevel,\n      Loc: location\n    };\n\n    if (actor.has('Hunger')) {\n        stats.E = actor.get('Hunger').getEnergy();\n    }\n\n    return stats;\n};\n\nexport function isSentient(target: BaseActor): target is SentientActor {\n    if (target) {\n        const brain = target.getBrain() as BrainGoalOriented;\n        return (typeof brain.getGoal === 'function');\n    }\n}\n","\nimport ROT from '../../lib/rot';\nimport RG from './rg';\nimport {EventPool} from '../src/eventpool';\n\nconst POOL = EventPool.getPool();\n\nexport const Time = {};\n\nexport type ActionCallback = () => void;\n\n/* Models an action. Each action has a duration and a callback.  */\nexport class Action {\n    private _duration: number;\n    private _cb: ActionCallback;\n    private _energy: number;\n\n    constructor(dur, cb) {\n        this._duration = dur;\n        this._cb = cb; // Action callback\n        this._energy = 0;\n    }\n\n    setEnergy(en) {this._energy = en;};\n    getEnergy() {return this._energy;};\n    getDuration() {return this._duration;};\n    doAction() {this._cb();};\n}\n\n//---------------------------------------------------------------------------\n// GAME EVENTS\n//---------------------------------------------------------------------------\n\n/* Event is something that is scheduled and takes place but it's not an actor.\n * An example is regeneration or poison effect.*/\nexport const GameEvent = function(dur, cb, repeat, offset) {\n\n    // var _cb = cb;\n    let _repeat = repeat;\n    // var _nTimes = 1;\n    let _offset = offset;\n\n    let _level = null; // Level associated with the event, if null, global\n\n    this.isEvent = true; // Needed for the scheduler\n\n    /* Clunky for events, but must implement for the scheduler.*/\n    this.isPlayer = () => false;\n\n    this.nextAction = () => new Action(dur, cb);\n\n    this.getRepeat = () => _repeat;\n    this.setRepeat = repeat => {_repeat = repeat;};\n\n    this.getOffset = () => _offset;\n    this.setOffset = offset => {_offset = offset;};\n\n    this.setLevel = level => {_level = level;};\n    this.getLevel = () => _level;\n\n};\n\n/* Regeneration event. Initialized with an actor. */\nexport const RegenEvent = function(actor, dur) {\n    this._dur = dur; // Duration between events\n\n    const _regenerate = () => {\n        actor.get('Health').addHP(1);\n    };\n\n    GameEvent.call(this, this._dur, _regenerate, true);\n};\nRG.extend2(RegenEvent, GameEvent);\n\n/* Regeneration power points event. Initialized with an actor. */\nexport const RegenPPEvent = function(actor, dur) {\n    this._dur = dur; // Duration between events\n\n    const _regeneratePower = () => {\n        actor.get('SpellPower').addPP(1);\n    };\n\n    GameEvent.call(this, this._dur, _regeneratePower, true);\n};\nRG.extend2(RegenPPEvent, GameEvent);\n\n/* Event that is executed once after an offset.*/\nexport const OneShotEvent = function(cb, offset, msg) {\n\n    // Wraps the callback into function and emits a message\n    var _cb = () => {\n        if (!RG.isNullOrUndef([msg])) {\n            RG.gameMsg(msg);\n        }\n        cb();\n    };\n\n    GameEvent.call(this, 0, _cb, false, offset);\n};\nRG.extend2(OneShotEvent, GameEvent);\n\n/* Scheduler for the game actions. Time-based scheduler where each actor/event\n* is scheduled based on speed.  */\nexport const Scheduler = function() { // {{{2\n\n    // Internally use ROT scheduler\n    this._scheduler = new ROT.Scheduler.Action();\n    this._scheduler._defaultDuration = 0;\n    this._scheduler._duration = 0;\n\n    // Store the scheduled events\n    this._events = [];\n    this._actors = [];\n\n    this.hasNotify = true;\n\n    // When an actor is killed, removes it from the scheduler.*/\n    POOL.listenEvent(RG.EVT_ACTOR_KILLED, this);\n\n}; // }}} Scheduler\n\n/* Adds an actor or event to the scheduler.*/\nScheduler.prototype.add = function(actOrEvent, repeat, offset) {\n    this._scheduler.add(actOrEvent, repeat, offset);\n    if (actOrEvent.hasOwnProperty('isEvent')) {\n        this._events.push(actOrEvent);\n    }\n    else {\n        this._actors.push(actOrEvent);\n    }\n};\n\n// Returns next actor/event or null if no next actor exists.\nScheduler.prototype.next = function() {\n    return this._scheduler.next();\n};\n\n/* Must be called after next() to re-schedule next slot for the\n * actor/event.*/\nScheduler.prototype.setAction = function(action) {\n    this._scheduler.setDuration(action.getDuration());\n};\n\n/* Tries to remove an actor/event, Return true if success.*/\nScheduler.prototype.remove = function(actOrEvent) {\n    if (actOrEvent.hasOwnProperty('isEvent')) {\n        return this.removeEvent(actOrEvent);\n    }\n    else {\n        const index = this._actors.indexOf(actOrEvent);\n        if (index !== -1) {\n            this._actors.splice(index, 1);\n        }\n    }\n    return this._scheduler.remove(actOrEvent);\n};\n\n/* Removes an event from the scheduler. Returns true on success.*/\nScheduler.prototype.removeEvent = function(actOrEvent) {\n    let index = -1;\n    if (actOrEvent.hasOwnProperty('isEvent')) {\n        index = this._events.indexOf(actOrEvent);\n        if (index !== -1) {\n            this._events.splice(index, 1);\n        }\n    }\n    return this._scheduler.remove(actOrEvent);\n};\n\nScheduler.prototype.getTime = function() {\n    return this._scheduler.getTime();\n};\n\nScheduler.prototype.notify = function(evtName, args) {\n    if (evtName === RG.EVT_ACTOR_KILLED) {\n        if (args.hasOwnProperty('actor')) {\n            this.remove(args.actor);\n        }\n    }\n};\n","\n/* This file contains Brain objects for virtual actors such as spawners. */\n\nimport RG from '../rg';\nimport {Constraints} from '../constraints';\nimport {BrainBase} from './brain.base';\nimport {IConstraint} from '../interfaces';\nimport {ObjectShell} from '../objectshellparser';\n\nconst spawnProb = 0.10;\n\n/* Brains for virtual actors such as spawners. */\nexport class BrainVirtual extends BrainBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('Virtual');\n    }\n}\n\n/* Brain object used by Spawner virtual actors. */\nexport class BrainSpawner extends BrainVirtual {\n\n    public constraint: IConstraint;\n    protected _constraintFunc: (shell) => boolean;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('Spawner');\n        this.constraint = null;\n        this._constraintFunc = null;\n    }\n\n\n    public setConstraint(constraint: IConstraint) {\n        this.constraint = constraint;\n        this._constraintFunc = new Constraints().getConstraints(constraint);\n    }\n\n    /* Spawns an actor to the current level (if any). */\n    public decideNextAction(): () => void {\n        if (RG.isSuccess(spawnProb)) {\n            return () => {\n                const level = this.getActor().getLevel();\n                const freeCell = level.getFreeRandCell();\n                const [x, y] = [freeCell.getX(), freeCell.getY()];\n\n                const parser = ObjectShell.getParser();\n                const newActor = parser.createRandomActor(\n                    {func: this._constraintFunc});\n                if (newActor) {\n                    level.addActor(newActor, x, y);\n                    RG.gameMsg(`You feel danger at ${x}, ${y}`);\n                }\n            };\n        }\n        return () => {};\n    }\n\n    public toJSON() {\n        return {\n            type: this.getType(),\n            constraint: this.constraint\n        };\n    }\n\n}\n","/* Contains the in-game actors. */\n/* eslint comma-dangle: 0 */\n\nimport RG from '../src/rg';\nimport {meleeHitDamage, color} from './shell-utils';\n// const Colors = require('./colors');\n\nconst defaultBrain = 'GoalOriented';\nconst demonBrain = 'GoalOriented';\nconst undeadBrain = 'GoalOriented';\n\nexport interface Color {\n    fg: string;\n    bg: string;\n}\n\ninterface ItemObj {\n    name: string;\n    count: number;\n}\n\ntype Item = string | ItemObj;\n\n// Defines all possible attributes which can be given\nexport interface ActorShell {\n    name: string; // Only name is mandatory\n\n    // Meta-attributes\n    actorType?: string;\n    base?: string;\n    char?: string;\n    colorfg?: string;\n    colorbg?: string;\n    color?: Color;\n    className?: string;\n    dontCreate?: boolean;\n    noRandom?: boolean;\n\n    // Direct attributes of actor\n    accuracy?: number;\n    agility?: number;\n    attack?: number;\n    brain?: string;\n    damage?: number | string;\n    danger?: number;\n    defense?: number;\n    enemies?: string[];\n    fovrange?: number;\n    hp?: number;\n    magic?: number;\n    maxPP?: number;\n    perception?: number;\n    pp?: number;\n    protection?: number;\n    power?: number;\n    range?: number;\n    speed?: number;\n    strength?: number;\n    spells?: string[];\n    type?: string;\n    unique?: boolean;\n    willpower?: number;\n\n    // TODO more complex typings\n    onHit?: any;\n    onAttackHit?: any;\n    addComp?: any;\n    poison?: any;\n    equip?: Item[];\n    inv?: Item[];\n\n}\n\n/* Instructions:\n *   base: 'baseName' inherits all properties from the base object (expect\n *   the special property dontCreate). You can chain as many base objects and\n *   use multiple bases but the order is important in that case. The base\n *   objects have to be specified before the objects using them as base.\n *\n * dontCreate: true prevents creation of Actor objects from object. This is\n * useful for \"base\" objects.\n *\n * noRandom: true  excludes the actor from random generation. This is useful for\n * bosses etc fixed actors.\n *\n * color: {fg: <css-color>, bg: <css-color>} can be used for custom coloring\n * of actors without adding any styles to CSS file.\n */\n\nexport const ActorsData: ActorShell[] = [\n\n    // ANIMALS\n    {\n        name: 'animal', dontCreate: true, type: 'animal',\n        className: 'cell-actor-animal',\n        attack: 1, defense: 1, hp: 5,\n        protection: 0,\n        range: 1, danger: 1, speed: 100, brain: 'Animal',\n        enemies: RG.ACTOR_RACES\n    },\n    {\n        name: 'rat', char: 'r', base: 'animal'\n    },\n    {\n        name: 'cloud of insects', char: 'i', base: 'animal',\n        color: color('Green', 'black'),\n        damage: '1d1',\n        defense: 2, addComp: 'Flying',\n        onHit: [{addComp: 'Paralysis', duration: '1'}]\n    },\n    {\n        name: 'bat', char: 'b', base: 'animal',\n        defense: 2, addComp: 'Flying'\n    },\n    {\n        name: 'giant ant', char: 'a', base: 'animal',\n        defense: 2, hp: 7\n    },\n    {\n        name: 'badger', char: 'c', base: 'animal',\n        attack: 1, defense: 4, damage: '1d4',\n        hp: 10, danger: 2\n    },\n    {\n        name: 'coyote', char: 'c', base: 'animal',\n        colorfg: 'Yellow',\n        attack: 3, defense: 3, damage: '1d4',\n        hp: 12, danger: 2\n    },\n    {\n        name: 'lynx', char: 'f', base: 'animal',\n        colorfg: 'Orange',\n        attack: 5, defense: 1, damage: '1d6',\n        hp: 12, danger: 3\n    },\n    {\n        name: 'hawk', char: 'H', base: 'animal',\n        attack: 4, defense: 1, damage: '1d5',\n        hp: 9, danger: 3, addComp: 'Flying'\n    },\n    {\n        name: 'wolf', char: 'w', base: 'animal',\n        attack: 4, defense: 2, damage: '1d6',\n        hp: 15, danger: 3\n    },\n    {\n        name: 'rattlesnake', char: 's', base: 'animal',\n        attack: 2, defense: 3, damage: '1d3',\n        hp: 10, danger: 3,\n        poison: {duration: '1d6', damage: '1d10', prob: '0.1'}\n    },\n    {\n        name: 'cave spider', char: 'S', base: 'animal',\n        attack: 2, defense: 4, damage: '1d5',\n        hp: 15, danger: 4,\n        poison: {duration: '3d6', damage: '1d4 + 1', prob: '0.15'}\n    },\n    {\n        name: 'woolly spider', char: 'S', base: 'animal',\n        attack: 4, defense: 4, damage: '1d6 + 2',\n        hp: 20, danger: 4,\n        poison: {duration: '3d6', damage: '1d4 + 1', prob: '0.15'},\n        onHit: [{addComp: 'Paralysis', duration: '1'}]\n    },\n    {\n        name: 'wolverine', char: 'W', base: 'animal',\n        attack: 4, defense: 4, damage: '1d7',\n        hp: 20, danger: 4\n    },\n    {\n        name: 'auroch', char: 'A', base: 'animal',\n        attack: 2, defense: 4, protection: 5, damage: '1d7',\n        hp: 23, danger: 4\n    },\n    {\n        name: 'eagle', char: 'E', base: 'animal',\n        attack: 4, defense: 4, damage: '1d7',\n        hp: 20, danger: 4, addComp: 'Flying'\n    },\n    {\n        name: 'dire wolf', char: 'w', base: 'animal',\n        colorfg: 'Gray',\n        attack: 6, defense: 2, damage: '1d8 + 2',\n        hp: 23, danger: 5\n    },\n    {\n        name: 'giant spider', char: 'S', base: 'animal',\n        colorfg: 'Green',\n        attack: 6, defense: 3, damage: '1d8 + 2',\n        hp: 17, danger: 5,\n        poison: {duration: '4d6', damage: '1d4 + 2', prob: '0.20'},\n    },\n    {\n        name: 'black vulture', char: 'V', base: 'animal',\n        attack: 5, defense: 5, damage: '1d7',\n        hp: 25, danger: 5, addComp: 'Flying'\n    },\n    {\n        name: 'giant scorpion', char: 'S', base: 'animal',\n        attack: 5, defense: 5, damage: '1d6 + 1',\n        hp: 19, danger: 5, brain: 'SpellCaster',\n        spells: ['ScorpionsTail'], maxPP: 1, pp: 1,\n        poison: {duration: '4d6', damage: '1d4 + 2', prob: '0.20'},\n    },\n    {\n        name: 'bear', char: 'B', base: 'animal',\n        attack: 5, defense: 5, damage: '1d9',\n        hp: 30, danger: 5\n    },\n    {\n        name: 'mountain lion', char: 'f', base: 'animal',\n        attack: 6, defense: 3, damage: '2d4',\n        hp: 25, danger: 5\n    },\n    {\n        name: 'sabretooth tiger', char: 'f', base: 'animal',\n        attack: 8, defense: 3, damage: '3d3',\n        colorfg: 'Red',\n        hp: 25, danger: 5, speed: 110\n    },\n    {\n        name: 'dire bear', char: 'B', base: 'animal',\n        colorfg: 'Gray',\n        attack: 8, defense: 5, damage: '4d4',\n        hp: 40, danger: 6\n    },\n    {\n        name: 'griffin', char: 'G', base: 'animal',\n        attack: 7, defense: 4, damage: '3d3',\n        hp: 35, danger: 6, addComp: 'Flying', speed: 130\n    },\n    {\n        name: 'polar bear', char: 'B', base: 'animal',\n        color: color('blue', 'white'),\n        attack: 10, defense: 5, protection: 7, damage: '4d4 + 5',\n        hp: 50, danger: 8,\n        onHit: [\n            {addComp: 'Stun', duration: '1d2 + 1'}\n        ],\n        addComp: [resistance('ICE', 'HIGH')]\n    },\n    {\n        name: 'mammoth', char: 'M', base: 'animal',\n        attack: 4, defense: 4, protection: 7, damage: '1d9',\n        strength: 30, hp: 40, danger: 8,\n        addComp: [resistance('ICE', 'MEDIUM')]\n    },\n    {\n        name: 'dire mammoth', char: 'M', base: 'animal',\n        attack: 4, defense: 4, protection: 10, damage: '1d15',\n        strength: 35, hp: 50, danger: 9,\n        colorfg: 'Gray',\n        addComp: [resistance('ICE', 'MEDIUM')]\n    },\n    {\n        name: 'polar bear king', char: 'B', base: 'animal',\n        color: color('cyan', 'white'),\n        attack: 15, defense: 7, damage: '5d5 + 5',\n        hp: 75, danger: 10,\n        onHit: [\n            {addComp: 'Stun', duration: '1d2 + 1'}\n        ],\n        addComp: [resistance('ICE', 'IMMUNITY')]\n    },\n    {\n        name: 'thunderbird', char: 'G', base: 'animal',\n        attack: 7, defense: 7, damage: '2d8',\n        hp: 45, danger: 10, addComp: 'Flying', brain: 'SpellCaster',\n        spells: ['LightningArrow'], maxPP: 30, pp: 30\n    },\n    {\n        name: 'manticore', char: 'M', base: 'animal',\n        attack: 7, defense: 7, damage: '2d10',\n        hp: 50, danger: 10, addComp: 'Flying',\n        onHit: [{addComp: 'Paralysis', duration: '1d4 + 1'}]\n    },\n    {\n        name: 'forest wurm', char: 'W', base: 'animal',\n        color: color('Green', 'Brown'),\n        attack: 12, defense: 7, protection: 15, damage: '3d10',\n        hp: 70, danger: 10\n    },\n    {\n        name: 'spider queen', char: 'S', base: 'animal',\n        color: color('Purple', 'Green'),\n        attack: 7, defense: 7, protection: 7, damage: '2d8 + 7',\n        hp: 45, danger: 11, brain: 'SpellCaster',\n        spells: ['SummonSpiders', 'ArrowOfWebs'], maxPP: 40, pp: 40,\n        poison: {duration: '10d6', damage: '1d5 + 3', prob: '0.20'},\n    },\n    {\n        name: 'ancient manticore', char: 'M', base: 'animal',\n        color: color('Gray', 'Brown'),\n        attack: 15, defense: 10, protection: 10, damage: '2d10 + 10',\n        hp: 75, danger: 15, addComp: 'Flying',\n        onHit: [{addComp: 'Paralysis', duration: '1d6 + 1'}],\n        spells: ['SummonKin'], maxPP: 30, pp: 30\n    },\n\n    // BEASTS TODO\n    {\n        name: 'BeastBase', type: 'beast',\n        dontCreate: true,\n        enemies: RG.ACTOR_RACES\n    },\n    {\n        name: 'cave dweller', base: 'BeastBase',\n        char: 'C', color: color('Black', 'Red'),\n        attack: 5, defense: 5, protection: 5, damage: '1d10 + 2',\n        hp: 30, danger: 5,\n        brain: 'SpellCaster', spells: ['SlimeBolt'],\n        maxPP: 18, pp: 18\n    },\n    {\n        name: 'hezrou', base: 'BeastBase',\n        char: 'B', className: 'cell-actor-poison',\n        attack: 5, defense: 5, protection: 3,\n        hp: 50, danger: 11, damage: '4d4',\n        addComp: [resistance('POISON', 'IMMUNITY')],\n        brain: 'SpellCaster', spells: ['PoisonCloud'],\n        maxPP: 40, pp: 40\n    },\n\n    // CONSTRUCTS ETC\n    {\n        name: 'ConstructBase', type: 'construct',\n        dontCreate: true,\n        enemies: RG.ACTOR_RACES\n    },\n    {\n        name: 'water elemental', base: 'ConstructBase',\n        char: 'E', className: 'cell-actor-water',\n        attack: 5, defense: 5, protection: 3,\n        hp: 38, danger: 9, damage: '4d4',\n        addComp: 'Amphibious',\n        brain: 'SpellCaster', spells: ['WaterBolt'],\n        maxPP: 40, pp: 40\n    },\n    {\n        name: 'air elemental', base: 'ConstructBase',\n        char: 'E', className: 'cell-actor-air',\n        attack: 5, defense: 5, protection: 3,\n        hp: 38, danger: 9, damage: '4d4',\n        addComp: 'Flying',\n        brain: 'SpellCaster', spells: ['LightningBolt'],\n        maxPP: 40, pp: 40\n    },\n    {\n        name: 'earth elemental', base: 'ConstructBase',\n        char: 'E', className: 'cell-actor-earth',\n        attack: 6, defense: 3, protection: 12,\n        hp: 47, danger: 11, damage: '4d4',\n        brain: 'SpellCaster', spells: ['RockStorm'],\n        maxPP: 70, pp: 70\n    },\n    {\n        name: 'void elemental', base: 'ConstructBase',\n        color: color('Purple', 'Black'),\n        char: 'E', className: 'cell-actor-void',\n        attack: 7, defense: 7, protection: 7,\n        hp: 60, danger: 13, damage: '5d4',\n        brain: 'SpellCaster', spells: ['PowerDrain'],\n        addComp: ['SpellStop',\n            resistance('MAGIC', 'ABSORB'),\n            resistance('VOID', 'IMMUNITY')\n        ],\n        maxPP: 70, pp: 70\n    },\n\n    // GOBLINS\n    {\n        name: 'goblin', char: 'g', type: 'goblin',\n        className: 'cell-actor-goblin',\n        attack: 1, defense: 1, damage: '1d6', range: 1, hp: 7,\n        protection: 1,\n        danger: 2, enemies: ['human'],\n        brain: defaultBrain\n    },\n    {\n        name: 'goblin slinger', base: 'goblin',\n        attack: 2, defense: 1, hp: 10,\n        equip: [{name: 'Rock', count: 10}]\n    },\n    {\n        name: 'goblin fighter', base: 'goblin',\n        attack: 2, defense: 3, protection: 1, hp: 12,\n        danger: 2\n    },\n    {\n        name: 'goblin healer', base: 'goblin',\n        attack: 2, defense: 4, protection: 2, hp: 15,\n        danger: 3,\n        brain: 'SpellCaster', pp: 18, maxPP: 18,\n        spells: ['Heal']\n    },\n    {\n        name: 'goblin sergeant', base: 'goblin',\n        damage: '1d7',\n        attack: 4, defense: 4, protection: 2, hp: 21,\n        danger: 4\n    },\n    {\n        name: 'goblin summoner', base: 'goblin',\n        attack: 2, defense: 4, protection: 2, hp: 25,\n        maxPP: 20, pp: 20,\n        brain: 'SpellCaster', spells: ['SummonAnimal'],\n        danger: 5\n    },\n    {\n        name: 'goblin lord', base: 'goblin',\n        attack: 5, defense: 4, protection: 3, hp: 30,\n        danger: 7\n    },\n    {\n        name: 'goblin king', base: 'goblin',\n        attack: 7, defense: 7, protection: 3, hp: 40,\n        danger: 10\n    },\n\n    {\n        name: 'HyrmBase', char: 'Y', type: 'hyrm',\n        color: color('Black', 'Purple'), dontCreate: true,\n        attack: 1, defense: 1, damage: '1d4', range: 1, hp: 10,\n        danger: 2, brain: defaultBrain,\n        enemies: ['player']\n    },\n    {\n        name: 'hyrm warrior', base: 'HyrmBase',\n        attack: 3, defense: 3, damage: '1d8', hp: 15,\n        danger: 2,\n    },\n    {\n        name: 'hyrm catapulter', base: 'HyrmBase',\n        attack: 3, defense: 3, damage: '1d8', hp: 25,\n        danger: 4,\n        equip: [{name: 'Large rock', count: 4}]\n    },\n    {\n        name: 'hyrm runemage', base: 'HyrmBase',\n        attack: 3, defense: 3, damage: '1d8', hp: 25,\n        danger: 5, brain: 'SpellCaster',\n        spells: ['SummonKin', 'StunningTouch'],\n        maxPP: 20, pp: 20\n    },\n    {\n        name: 'hyrm hulk', base: 'HyrmBase',\n        attack: 6, defense: 3, damage: '2d8', hp: 40,\n        strength: 15, speed: 90,\n        danger: 7,\n    },\n\n    // HUMANOIDS\n    {\n        name: 'humanoid', char: 'h', type: 'humanoid',\n        attack: 1, defense: 1, damage: '1d4', range: 1, hp: 10,\n        danger: 2, brain: defaultBrain,\n        enemies: ['human', 'player']\n    },\n    {\n        name: 'dark warrior', char: 'h', type: 'humanoid',\n        className: 'cell-actor-void',\n        attack: 6, defense: 4, protection: 2,\n        damage: '2d5 + 3', range: 1, hp: 25,\n        enemies: RG.ACTOR_RACES, brain: 'SpellCaster',\n        spells: ['SummonFlyingEyes'], maxPP: 16, pp: 16, danger: 5\n    },\n    {\n        name: 'dark archer', char: 'h', type: 'humanoid',\n        className: 'cell-actor-void',\n        attack: 8, defense: 3, protection: 4,\n        damage: '2d5', range: 1, hp: 30,\n        enemies: RG.ACTOR_RACES, brain: 'SpellCaster',\n        spells: ['SummonFlyingEyes'], maxPP: 16, pp: 16, danger: 7,\n        equip: ['Iron bow', {name: 'Steel arrow', count: 8}],\n        addComp: ['LongRangeShot']\n    },\n    {\n        name: 'dark assassin', char: 'h', type: 'humanoid',\n        className: 'cell-actor-void',\n        attack: 10, defense: 5, protection: 6, damage: '3d5 + 3', range: 1, hp: 50,\n        enemies: RG.ACTOR_RACES, brain: 'SpellCaster',\n        spells: ['SummonFlyingEyes'], maxPP: 30, pp: 30, danger: 10,\n        addComp: [resistance('POISON', 'IMMUNITY')],\n        poison: {duration: '4d6', damage: '1d4 + 2', prob: '0.20'},\n    },\n    {\n        name: 'dark lord', char: 'h', type: 'humanoid',\n        color: color('Yellow', 'Purple'),\n        attack: 12, defense: 10, protection: 8, damage: '4d5 + 5', range: 1, hp: 75,\n        enemies: RG.ACTOR_RACES, brain: 'SpellCaster',\n        spells: ['SummonFlyingEyes', 'PoisonArrow'], maxPP: 60, pp: 60,\n        danger: 15, addComp: [resistance('POISON', 'IMMUNITY')],\n        poison: {duration: '4d6', damage: '2d4 + 2', prob: '0.25'},\n    },\n\n    // AVIAN\n    {\n        name: 'AvianFolkBase', char: 'A', className: 'cell-actor-avianfolk',\n        type: 'avianfolk', dontCreate: true,\n        enemies: ['player', 'human', 'catfolk', 'dogfolk', 'wolfclan'],\n        brain: defaultBrain, addComp: 'Flying',\n        attack: 2, defense: 2, damage: '1d6', range: 1,\n        protection: 1, hp: 15, danger: 2\n    },\n    {\n        name: 'avian townsfolk', base: 'AvianFolkBase', danger: 1,\n        attack: 1, defense: 1, damage: '1d4', hp: 10\n    },\n    {\n        name: 'avian scout', base: 'AvianFolkBase', danger: 2,\n        attack: 3, defense: 3, damage: '2d4', hp: 20,\n        speed: 110, fovrange: 6\n    },\n    {\n        name: 'avian fighter', base: 'AvianFolkBase', danger: 4,\n        attack: 6, defense: 7, damage: '3d4', hp: 30\n    },\n    {\n        name: 'avian arbalist', base: 'AvianFolkBase', danger: 5,\n        attack: 6, defense: 7, damage: '3d4', hp: 30,\n        equip: ['Wooden crossbow', {name: 'Wooden bolt', count: 10}]\n    },\n    {\n        name: 'avian duelist', base: 'AvianFolkBase', danger: 8,\n        attack: 7, defense: 10, damage: '3d5', hp: 40,\n        addComp: ['CounterAttack', 'Flying']\n    },\n    {\n        name: 'avian judicator', base: 'AvianFolkBase', danger: 9,\n        attack: 7, defense: 10, damage: '4d4', hp: 45,\n        addComp: ['FirstStrike', 'Flying']\n    },\n    {\n        name: 'avian archmage', base: 'AvianFolkBase', danger: 11,\n        attack: 5, defense: 10, damage: '3d4', hp: 45,\n        brain: 'SpellCaster', spells: ['SummonAirElemental'],\n        pp: 40, maxPP: 40\n    },\n    {\n        name: 'avian emperor', base: 'AvianFolkBase', danger: 16,\n        attack: 8, defense: 14, damage: '5d5', hp: 85,\n        addComp: ['Flying', BypassComp(0.15)]\n    },\n\n    // BEARFOLK\n    {\n        name: 'BearfolkBase', char: 'B', className: 'cell-actor-bearfolk',\n        dontCreate: true, type: 'bearfolk',\n        attack: 1, defense: 1, damage: '1d5 + 1', range: 1, hp: 10,\n        danger: 1, enemies: ['goblin', 'dwarf', 'undead', 'demon'],\n        brain: defaultBrain\n    },\n    {\n      name: 'bearfolk thief', base: 'BearfolkBase',\n      color: color('Yellow', 'Black'),\n      damage: '1d7', brain: 'Thief',\n      attack: 1, defense: 1, danger: 2, hp: 12\n    },\n    {\n      name: 'bearfolk fighter', base: 'BearfolkBase',\n      damage: '1d8',\n      attack: 2, defense: 2, danger: 2, hp: 15\n    },\n    {\n      name: 'bearfolk archer', base: 'BearfolkBase',\n      damage: '1d6',\n      attack: 2, defense: 2, danger: 3, hp: 13,\n      equip: ['Wooden bow', {name: 'Wooden arrow', count: 10}]\n    },\n    {\n      name: 'bearfolk mage', base: 'BearfolkBase',\n      damage: '1d6',\n      attack: 2, defense: 2, danger: 4, hp: 15,\n      equip: ['Robe', 'Wooden staff'],\n      brain: 'SpellCaster', spells: ['SummonKin'],\n      pp: 20, maxPP: 20\n    },\n    {\n      name: 'bearfolk magistrate', base: 'BearfolkBase',\n      damage: '1d10 + 2',\n      colorfg: 'Purple',\n      attack: 4, defense: 4, danger: 5, hp: 30,\n      equip: ['Leather armour']\n    },\n    {\n        name: 'bearfolk elite', base: 'BearfolkBase',\n        damage: '2d6',\n        attack: 5, defense: 5, hp: 37, danger: 6,\n        onHit: [\n            {addComp: 'Stun', duration: '1d4 + 1'}\n        ]\n    },\n    {\n      name: 'bearfolk king', base: 'BearfolkBase',\n      damage: '3d6', strength: 16,\n      attack: 7, defense: 7, protection: 5, danger: 8, hp: 75\n    },\n\n    // UNDEAD\n    {\n        name: 'UndeadBase', className: 'cell-actor-undead',\n        color: color('White', 'Black'),\n        dontCreate: true, addComp: 'Undead', brain: undeadBrain,\n        attack: 1, defense: 1, protection: 0,\n        range: 1, enemies: RG.ACTOR_RACES, type: 'undead'\n    },\n    {\n        name: 'skeletal dog', char: 'd', base: 'UndeadBase',\n        damage: '1d6', danger: 1,\n        brain: 'Animal',\n        hp: 6\n    },\n    {\n        name: 'skeletal spider', char: 'S', base: 'UndeadBase',\n        attack: 2, defense: 1, damage: '1d4', danger: 1, hp: 5,\n        brain: 'Animal',\n        poison: {duration: '2d10', damage: '1d2', prob: '0.2'}\n    },\n    {\n        name: 'necrocentipede', char: 'w', base: 'UndeadBase',\n        attack: 1, defense: 1, damage: '1d7', danger: 2,\n        brain: 'Animal', speed: 125, hp: 6\n    },\n    {\n        name: 'skeleton', char: 'z', base: 'UndeadBase',\n        attack: 2, defense: 1, damage: '1d5', danger: 1,\n        hp: 9\n    },\n    {\n        name: 'zombie', char: 'z', base: 'UndeadBase',\n        colorfg: 'Brown',\n        attack: 2, defense: 2, damage: '1d6', danger: 2,\n        hp: 12\n    },\n    {\n        name: 'skeleton archer', char: 'z', base: 'UndeadBase',\n        colorfg: 'Yellow',\n        attack: 4, defense: 2, damage: '1d8', danger: 4,\n        hp: 15,\n        equip: ['Wooden bow', {name: 'Wooden arrow', count: 5}]\n    },\n    {\n        name: 'skeleton warrior', char: 'z', base: 'UndeadBase',\n        attack: 3, defense: 3, damage: '1d8 + 2', danger: 4,\n        hp: 20\n    },\n    {\n        name: 'necrowurm', char: 'W', base: 'UndeadBase',\n        attack: 4, defense: 4, damage: '1d9', danger: 5,\n        brain: 'Animal', speed: 115, hp: 21\n    },\n    {\n        name: 'skeleton berserker', char: 'z', base: 'UndeadBase',\n        colorfg: 'Pink',\n        attack: 6, defense: 1, damage: '1d10 + 4', danger: 5,\n        hp: 15\n    },\n    {\n        name: 'ghoul', char: 'z', base: 'UndeadBase',\n        colorfg: 'LightGray',\n        attack: 3, defense: 3, damage: '1d7 + 2', danger: 5,\n        hp: 15, onHit: [{addComp: 'Paralysis', duration: '1d4'}]\n    },\n    {\n        name: 'crypt zombie', char: 'z', base: 'UndeadBase',\n        colorfg: 'Yellow',\n        attack: 2, defense: 2, protection: 4,\n        damage: '3d5', danger: 6, hp: 30,\n    },\n    {\n        name: 'ghost', char: 'G', base: 'UndeadBase',\n        attack: 4, defense: 4, damage: '2d5 + 2', danger: 6,\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setSpeed', value: -5}],\n                duration: '3d10'}\n        ],\n        hp: 25\n    },\n    {\n        name: 'wraith', char: 'Z', base: 'UndeadBase',\n        colorfg: 'Cyan',\n        attack: 5, defense: 5, damage: '2d5 + 2', danger: 6,\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setStrength', value: -1}],\n                duration: '2d10'}\n        ],\n        hp: 25\n    },\n    {\n        name: 'specter', char: 'Z', base: 'UndeadBase',\n        colorfg: 'Blue',\n        attack: 6, defense: 6, damage: '2d5 + 5', danger: 7,\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setMagic', value: -1}],\n                duration: '10d10'}\n        ],\n        hp: 25,\n        addComp: ['Flying', resistance('ICE', 'HIGH')]\n    },\n    {\n        name: 'boneclaw', char: 'B', base: 'UndeadBase',\n        attack: 12, defense: 4, damage: '2d7 + 2', danger: 9,\n        speed: 100,\n        onAttackHit: [\n            {addComp: 'DirectDamage', func: [\n                {setter: 'setDamage', value: 2},\n                {setter: 'setDamageType', value: RG.DMG.NECRO},\n                {setter: 'setDamageCateg', value: RG.DMG.MELEE}\n            ],\n                duration: '1d8 + 2'\n            }\n        ],\n        hp: 35\n    },\n    {\n        name: 'ghost lord', char: 'G', base: 'UndeadBase',\n        colorfg: 'LightGray',\n        attack: 7, defense: 7, damage: '2d5 + 2', danger: 8,\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setSpeed', value: -10}],\n                duration: '3d10'}\n        ],\n        hp: 35\n    },\n    {\n        name: 'skeleton king', char: 'Z', base: 'UndeadBase',\n        colorfg: 'red',\n        attack: 6, defense: 6, damage: '3d5 + 5', danger: 9,\n        hp: 45,\n        addComp: [\n            resistance('PIERCE', 'HIGH'),\n            resistance('SLASH', 'HIGH'),\n            resistance('ICE', 'HIGH')\n        ]\n    },\n    {\n        name: 'vampire', char: 'V', base: 'UndeadBase',\n        colorfg: 'Purple',\n        attack: 6, defense: 6, damage: '3d5 + 2', danger: 9,\n        speed: 120,\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setStrength', value: -2}],\n                duration: '5d10'}\n        ],\n        hp: 40\n    },\n    {\n        name: 'undead unicorn', char: 'U', base: 'UndeadBase',\n        colorfg: 'GhostWhite',\n        attack: 7, defense: 7, protection: 7, damage: '2d5 + 5', danger: 9,\n        speed: 102, hp: 50,\n        addComp: [BypassComp(0.25)]\n    },\n    {\n        name: 'necrowyrm', char: 'W', base: 'UndeadBase',\n        colorfg: 'GhostWhite',\n        attack: 7, defense: 7, protection: 7, damage: '3d5', danger: 10,\n        brain: 'Animal', speed: 107, hp: 50,\n        addComp: ['Flying']\n    },\n    {\n        name: 'ghost king', char: 'G', base: 'UndeadBase',\n        colorfg: 'Yellow',\n        attack: 7, defense: 7, damage: '3d5 + 2', danger: 12,\n        brain: 'SpellCaster',\n        onHit: [\n            {addComp: 'StatsMods', func: [{setter: 'setSpeed', value: -15}],\n                duration: '3d10'}\n        ],\n        hp: 50,\n        addComp: [BypassComp(0.20)]\n    },\n    {\n        name: 'lich', char: 'L', base: 'UndeadBase',\n        attack: 4, defense: 8, protection: 4,\n        damage: '1d8 + 6', danger: 12,\n        hp: 50, brain: 'SpellCaster',\n        spells: ['GraspOfWinter', 'SummonDead'], maxPP: 50, pp: 50,\n        addComp: [resistance('ICE', 'MEDIUM')]\n    },\n    {\n        name: 'lich king', char: 'L', base: 'UndeadBase',\n        colorfg: 'Yellow',\n        attack: 8, defense: 8, protection: 6,\n        damage: '2d8 + 2', danger: 17,\n        hp: 75, brain: 'SpellCaster',\n        spells: ['SummonDead', 'AnimateDead'], maxPP: 75, pp: 75,\n        onHit: [\n            meleeHitDamage(4, '1d6', 'NECRO')\n        ],\n        addComp: [\n            resistance('ICE', 'MEDIUM'),\n            resistance('POISON', 'IMMUNITY'),\n            resistance('NECRO', 'IMMUNITY')\n        ]\n    },\n\n    // DEMONS AND WINTRY BEINGS\n    {\n        name: 'WinterBeingBase', // className: 'cell-actor-winter',\n        dontCreate: true, enemies: RG.ACTOR_RACES,\n        color: color('Blue', 'White'),\n        addComp: ['SnowWalk', resistance('ICE', 'MEDIUM')]\n    },\n    {\n        name: 'Crevasse worm', char: 'w', base: 'WinterBeingBase',\n        attack: 1, defense: 1, damage: '1d4', speed: 110,\n        danger: 1, hp: 5, type: 'animal'\n    },\n    {\n        name: 'Ice bat', char: 'b', base: 'WinterBeingBase',\n        attack: 1, defense: 1, damage: '1d6', speed: 110,\n        danger: 2, hp: 8, brain: 'Animal',\n        addComp: ['Flying', resistance('ICE', 'MEDIUM')],\n        type: 'animal'\n    },\n    {\n        name: 'Arctic fox', char: 'f', base: 'WinterBeingBase',\n        attack: 4, defense: 1, damage: '1d7 + 3', speed: 105,\n        danger: 3, hp: 12, brain: 'Animal', type: 'animal'\n    },\n    {\n        name: 'Frost goblin', char: 'g', base: 'WinterBeingBase',\n        attack: 3, defense: 3, protection: 1, damage: '1d7', hp: 12,\n        danger: 3, type: 'icebeing', brain: defaultBrain\n    },\n    {\n        name: 'Frost viper', char: 's', base: 'WinterBeingBase',\n        attack: 3, defense: 3, protection: 3, damage: '1d7', hp: 18,\n        danger: 4, type: 'animal',\n        poison: {duration: '1d6 + 5', damage: '1d6', prob: '0.1'}\n    },\n    {\n        name: 'Arctic Wolf', char: 'w', base: 'WinterBeingBase',\n        attack: 4, defense: 2, damage: '1d8', brain: 'Animal',\n        hp: 21, danger: 5, type: 'animal'\n    },\n    {\n        name: 'Glacial shaman', char: '@', base: 'WinterBeingBase',\n        colorfg: 'CadetBlue',\n        attack: 4, defense: 4, protection: 3, damage: '1d7 + 2',\n        type: 'icebeing',\n        danger: 5, hp: 25, spells: ['IcyPrison'], maxPP: 22, pp: 21,\n        brain: 'SpellCaster'\n    },\n    {\n        name: 'Glacial golem', char: 'G', base: 'WinterBeingBase',\n        attack: 4, defense: 4, protection: 3, damage: '2d4', speed: 90,\n        danger: 5, hp: 30, type: 'construct'\n    },\n    {\n        name: 'Ice minion', base: 'WinterBeingBase', char: 'm',\n        attack: 4, defense: 4, protection: 2, damage: '2d4',\n        hp: 20, danger: 5, type: 'demon',\n        onHit: [{addComp: 'Coldness', duration: '10d10'}]\n    },\n    {\n        name: 'Mighty raven', base: 'WinterBeingBase', char: 'R',\n        attack: 4, defense: 10, damage: '2d4 + 2', range: 1, hp: 20,\n        danger: 5, brain: 'Animal',\n        addComp: ['Flying', resistance('ICE', 'MEDIUM')],\n    },\n    {\n        name: 'Snow leopard', base: 'WinterBeingBase', char: 'f',\n        attack: 8, defense: 4, damage: '1d6 + 5', range: 1, hp: 25,\n        danger: 5, brain: 'Animal', type: 'animal', speed: 120\n    },\n    {\n        name: 'Cryomancer', base: 'WinterBeingBase', char: '@',\n        type: 'icebeing',\n        attack: 4, defense: 4, damage: '1d6', range: 1, hp: 30,\n        danger: 5, spells: ['FrostBolt'], maxPP: 22, pp: 21,\n        brain: 'SpellCaster'\n    },\n    {\n        name: 'Winter demon', type: 'demon', char: '&',\n        colorfg: 'CadetBlue',\n        attack: 5, defense: 5, protection: 2, damage: '3d3', range: 1,\n        hp: 30, danger: 10, brain: demonBrain, base: 'WinterBeingBase'\n    },\n    {\n        name: 'Harbinger of winter', type: 'demon', char: '@',\n        colorfg: 'DarkBlue',\n        attack: 5, defense: 5, protection: 2, damage: '3d3', range: 1,\n        hp: 35, danger: 10, brain: 'SpellCaster', base: 'WinterBeingBase',\n        spells: ['GraspOfWinter'], maxPP: 30, pp: 30\n    },\n    {\n        name: 'Stormrider', type: 'demon', char: '&',\n        colorfg: 'DarkBlue',\n        attack: 6, defense: 6, protection: 3, damage: '4d3', range: 1,\n        hp: 40, danger: 12, brain: demonBrain, base: 'WinterBeingBase',\n        equip: ['Permaice short sword']\n    },\n    {\n        name: 'Ice archon', type: 'demon', char: 'A',\n        attack: 6, defense: 6, protection: 3, damage: '4d3', range: 1,\n        hp: 40, danger: 12, base: 'WinterBeingBase', brain: 'SpellCaster',\n        pp: 30, maxPP: 30, spells: ['RingOfFrost']\n    },\n    {\n        name: 'Ice djinn', type: 'demon', char: '&',\n        attack: 7, defense: 6, protection: 6, damage: '3d5+5', range: 1,\n        hp: 45, danger: 14, brain: demonBrain, base: 'WinterBeingBase'\n    },\n    {\n        name: 'Blizzard beast', type: 'demon', char: 'B',\n        colorfg: 'CadetBlue',\n        attack: 7, defense: 6, protection: 8, damage: '3d5+5', range: 1,\n        hp: 50, danger: 16, brain: demonBrain, base: 'WinterBeingBase'\n    },\n    {\n        name: 'Ice behemoth', type: 'demon', char: 'B',\n        colorfg: 'DarkBlue',\n        attack: 10, defense: 3, protection: 8, damage: '4d5+5', range: 2,\n        hp: 65, danger: 16, brain: demonBrain, base: 'WinterBeingBase',\n        onHit: [{addComp: 'Coldness'}]\n    },\n    {\n        name: 'Frost Titan', type: 'giant', char: 'H',\n        attack: 8, defense: 7, protection: 12, damage: '5d5', range: 1,\n        hp: 80, danger: 18, brain: demonBrain, base: 'WinterBeingBase',\n        onHit: [{addComp: 'Stun', duration: '1d8'}]\n    },\n    {\n        name: 'Frostburn monarch', type: 'demon', char: 'M',\n        attack: 10, defense: 10, protection: 10, damage: '4d5', range: 1,\n        hp: 70, danger: 20, brain: 'SpellCaster', base: 'WinterBeingBase',\n        onHit: [{addComp: 'Coldness'}], spells: ['FrostBolt',\n            'SummonIceMinion'],\n        pp: 50, maxPP: 50\n    },\n    // DWARVES\n    {\n        name: 'dwarf', char: 'h', type: 'dwarf',\n        className: 'cell-actor-dwarf',\n        attack: 2, defense: 2, protection: 1, damage: '1d4',\n        range: 1, hp: 20, danger: 3, enemies: ['human', 'undead', 'demon'],\n        brain: defaultBrain\n    },\n    {\n        name: 'dwarven fighter', base: 'dwarf',\n        attack: 4, defense: 4, protection: 2, damage: '1d7',\n        range: 1, hp: 30, danger: 4,\n        equip: ['Spear']\n    },\n    {\n        name: 'dwarven axeman', base: 'dwarf',\n        attack: 4, defense: 4, protection: 3, damage: '1d8',\n        range: 1, hp: 40, danger: 5,\n        equip: ['Battle axe', 'Chain armour']\n    },\n    {\n        name: 'dwarven hammerer', base: 'dwarf',\n        attack: 4, defense: 6, protection: 4, damage: '1d10',\n        range: 1, hp: 45, danger: 6,\n        equip: ['Dwarven pick-axe', 'Leather armour']\n    },\n    {\n        name: 'dwarven bolter', base: 'dwarf',\n        attack: 7, defense: 3, damage: '1d8',\n        range: 1, hp: 40, danger: 7, fovrange: 7,\n        equip: ['Steel crossbow', {name: 'Steel bolt', count: 7}]\n    },\n    {\n        name: 'dwarven rifleman', base: 'dwarf',\n        attack: 4, defense: 4, damage: '1d8',\n        range: 1, hp: 40, danger: 8, fovrange: 7,\n        equip: ['Rifle', {name: 'Steel bullet', count: 10}]\n    },\n    {\n        name: 'dwarven elite', base: 'dwarf',\n        attack: 5, defense: 6, damage: '3d5 + 3',\n        range: 1, hp: 50, danger: 9,\n        equip: ['Battle axe', 'Steel armour']\n    },\n    {\n        name: 'dwarven commander', base: 'dwarf',\n        attack: 8, defense: 8, protection: 7, damage: '2d5',\n        range: 1, hp: 60, danger: 10,\n        equip: ['Great battle axe', 'Steel armour']\n    },\n    {\n        name: 'dwarven king', base: 'dwarf',\n        colorfg: 'red',\n        attack: 12, defense: 12, protection: 10, damage: '4d5 + 5',\n        range: 1, hp: 75, danger: 15,\n        equip: ['Mithril armour']\n    },\n    // HUMANS\n    {\n        name: 'human', char: '@', type: 'human',\n        className: 'cell-actor-human',\n        attack: 2, defense: 2, damage: '1d4',\n        range: 1, hp: 20, danger: 3,\n        brain: defaultBrain\n    },\n    {\n        name: 'townsfolk', base: 'human',\n        attack: 1, defense: 1, damage: '1d4',\n        range: 1, hp: 10, danger: 1\n    },\n    {\n        name: 'robber', base: 'human',\n        attack: 2, defense: 4, danger: 3,\n        enemies: ['player']\n    },\n    {\n        name: 'miner', base: 'human',\n        attack: 4, danger: 4, damage: '1d5', equip: ['Pick-axe']\n    },\n    {\n        name: 'fighter', base: 'human', hp: 25,\n        attack: 4, defense: 4, damage: '1d8',\n        danger: 5\n    },\n    {\n        name: 'warlord', char: 'W', base: 'human', hp: 35,\n        attack: 5, defense: 6, damage: '3d3',\n        danger: 6\n    },\n    {\n        name: 'trainer', char: '@', base: 'human', hp: 50,\n        attack: 10, defense: 10, protection: 5, damage: '3d3',\n        className: 'cell-actor-trainer', noRandom: true,\n        danger: 6, inv: [{name: 'Gold coin', count: 50}],\n        addComp: 'Trainer'\n    },\n    {\n        name: 'shopkeeper', char: '@', base: 'human', hp: 50,\n        attack: 10, defense: 10, protection: 5, damage: '3d3',\n        className: 'cell-actor-shopkeeper', noRandom: true,\n        danger: 6, inv: [{name: 'Gold coin', count: 100}]\n    },\n    {\n        name: 'summoner', char: '@', base: 'human', hp: 50,\n        attack: 7, defense: 7, protection: 3, damage: '2d4',\n        brain: 'SpellCaster',\n        spells: ['SummonKin'], maxPP: 30, pp: 30,\n        danger: 10\n    },\n\n    // WILDLINGS\n    {\n        name: 'wildling', char: 'I', className: 'cell-actor-wildling',\n        type: 'wildling', brain: defaultBrain,\n        attack: 2, defense: 1, damage: '1d6', range: 1,\n        hp: 15, danger: 3, enemies: ['player', 'human']\n    },\n    {\n        name: 'wildling hunter', base: 'wildling', char: 'I',\n        attack: 3, defense: 3, damage: '1d6', hp: 20, danger: 3,\n        equip: ['Tomahawk']\n    },\n    {\n        name: 'wildling archer', base: 'wildling', char: 'I',\n        attack: 3, defense: 3, damage: '1d6', hp: 20, danger: 4,\n        equip: ['Wooden bow', {name: 'Wooden arrow', count: 10}],\n        colorfg: 'Yellow',\n        brain: defaultBrain\n    },\n    {\n        name: 'wildling fighter', base: 'wildling', char: 'I',\n        attack: 4, defense: 3, damage: '1d9', hp: 25, danger: 5\n    },\n    {\n        name: 'wildling elite', base: 'wildling', char: 'I',\n        attack: 5, defense: 3, damage: '1d10', hp: 32, danger: 6\n    },\n    {\n        name: 'wildling warlord', base: 'wildling', char: 'I',\n        attack: 6, defense: 3, damage: '1d12', hp: 40, danger: 7,\n        colorfg: 'YellowGreen'\n    },\n    {\n        name: 'wildling king', base: 'wildling', char: 'I',\n        attack: 8, defense: 5, damage: '1d15', hp: 50, danger: 10,\n        colorfg: 'Red'\n    },\n\n    // CATFOLK\n    {\n        name: 'CatfolkBase', char: 'f', className: 'cell-actor-catfolk',\n        type: 'catfolk', dontCreate: true,\n        attack: 1, defense: 1, protection: 1, damage: '1d6', range: 1,\n        hp: 10, danger: 1, enemies: ['player', 'human', 'dogfolk', 'wolfclan'],\n        brain: defaultBrain\n    },\n    {\n        name: 'catfolk townsfolk', base: 'CatfolkBase',\n        attack: 1, defense: 1, hp: 10, danger: 1\n    },\n    {\n        name: 'catfolk hunter', base: 'CatfolkBase',\n        attack: 1, defense: 4, damage: '3d2', hp: 15, danger: 2\n    },\n    {\n        name: 'catfolk darter', base: 'CatfolkBase',\n        attack: 1, defense: 4, damage: '3d2', hp: 15, danger: 3,\n        brain: defaultBrain, equip: [{name: 'Iron dart', count: 9}]\n    },\n    {\n        name: 'catfolk warrior', base: 'CatfolkBase',\n        attack: 2, defense: 5, damage: '4d2', hp: 20, danger: 4\n    },\n    {\n        name: 'catfolk elite', base: 'CatfolkBase',\n        attack: 3, defense: 7, damage: '5d2', hp: 27, danger: 5,\n        addComp: 'CounterAttack'\n    },\n    {\n        name: 'catfolk wizard', base: 'CatfolkBase',\n        attack: 3, defense: 6, damage: '4d2', hp: 25, danger: 6,\n        brain: 'SpellCaster',\n        spells: ['EnergyArrow'], maxPP: 20, pp: 20\n    },\n    {\n        name: 'catfolk warlord', base: 'CatfolkBase',\n        attack: 4, defense: 8, damage: '6d2', hp: 35, danger: 7\n    },\n    {\n        name: 'catfolk queen', base: 'CatfolkBase',\n        attack: 6, defense: 15, damage: '7d3', hp: 45, danger: 10,\n        colorfg: 'Purple', addComp: 'FirstStrike'\n    },\n    {\n        name: 'catfolk king', base: 'CatfolkBase',\n        attack: 10, defense: 12, protection: 6,\n        damage: '7d3 + 5', hp: 60, danger: 13,\n        colorfg: 'Red'\n    },\n\n    // WOLFCLAN\n    {\n        name: 'WolfclanBase', dontCreate: true, danger: 1,\n        attack: 1, defense: 1, damage: '1d4', range: 1,\n        protection: 2,\n        className: 'cell-actor-wolfclan', char: 'w',\n        type: 'wolfclan',\n        enemies: ['player', 'human', 'catfolk', 'dogfolk', 'bearfolk'],\n        brain: defaultBrain\n    },\n    {\n        name: 'wolfclan folk', base: 'WolfclanBase', danger: 1,\n        hp: 12,\n        attack: 2, defense: 1, damage: '1d6', range: 1\n    },\n    {\n        name: 'wolfclan brave', base: 'WolfclanBase', danger: 4,\n        attack: 4, defense: 3, damage: '2d4', hp: 25\n    },\n    {\n        name: 'wolfclan skirmisher', base: 'WolfclanBase', danger: 5,\n        attack: 5, defense: 4, damage: '2d4+3', hp: 30\n    },\n    {\n        name: 'wolfclan scourger', base: 'WolfclanBase', danger: 6,\n        attack: 7, defense: 5, damage: '2d4+7', hp: 35\n    },\n    {\n        name: 'wolfclan mage', base: 'WolfclanBase', danger: 7,\n        attack: 7, defense: 5, damage: '2d4+7', hp: 35,\n        spells: ['PowerDrain'], maxPP: 30, pp: 30,\n        brain: 'SpellCaster'\n    },\n    {\n        name: 'wolfclan elite', base: 'WolfclanBase', danger: 8,\n        attack: 8, defense: 5, protection: 5, damage: '2d4+10', hp: 50,\n        addComp: 'CounterAttack'\n    },\n    {\n        name: 'wolfclan judicator', base: 'WolfclanBase', danger: 9,\n        attack: 8, defense: 8, damage: '3d4+6', hp: 55,\n        addComp: 'FirstStrike' // , equip: ['Steel armour']\n    },\n    {\n        name: 'wolfclan commander', base: 'WolfclanBase', danger: 10,\n        attack: 10, defense: 5, damage: '4d4+10', hp: 60\n    },\n    {\n        name: 'wolfclan king', base: 'WolfclanBase', danger: 14,\n        attack: 10, defense: 10, damage: '5d4+10', hp: 75\n    },\n\n    // DOGFOLK\n    {\n        name: 'DogfolkBase', dontCreate: true,\n        className: 'cell-actor-dogfolk', char: 'd', type: 'dogfolk',\n        protection: 1,\n        enemies: ['player', 'catfolk', 'wolfclan'],\n        brain: defaultBrain\n    },\n    {\n        name: 'dogfolk gatherer', base: 'DogfolkBase',\n        attack: 1, defense: 3, damage: '1d4 + 1', hp: 10, danger: 1\n    },\n    {\n        name: 'dogfolk hunter', base: 'DogfolkBase',\n        attack: 2, defense: 3, damage: '6d1', hp: 15, danger: 2\n    },\n    {\n        name: 'dogfolk thrower', base: 'DogfolkBase',\n        attack: 2, defense: 3, damage: '6d1+1', hp: 15, danger: 3,\n        equip: [{name: 'Throwing axe', count: 7}]\n    },\n    {\n        name: 'dogfolk warrior', base: 'DogfolkBase', danger: 4,\n        attack: 3, defense: 3, damage: '7d1+3', hp: 20\n    },\n    {\n        name: 'dogfolk skirmisher', base: 'DogfolkBase', danger: 5,\n        attack: 4, defense: 3, damage: '9d1+3', hp: 25\n    },\n    {\n        name: 'dogfolk elite', base: 'DogfolkBase', danger: 8,\n        attack: 6, defense: 6, damage: '8d2+4', hp: 35,\n        addComp: 'CounterAttack'\n    },\n    {\n        name: 'dogfolk commander', base: 'DogfolkBase', danger: 10,\n        attack: 8, defense: 8, damage: '8d3+4', hp: 50\n    },\n    {\n        name: 'dogfolk king', base: 'DogfolkBase', danger: 13,\n        colorfg: 'red', colorbg: 'white',\n        attack: 12, defense: 8, damage: '8d3+8', hp: 65\n    },\n\n    // SPIRITS\n    {\n        name: 'SpiritBase', char: 'Q', className: 'cell-actor-spirit',\n        type: 'spirit', dontCreate: true,\n        addComp: ['Ethereal'], brain: 'Spirit'\n    },\n    {\n        name: 'Rat spirit', base: 'SpiritBase',\n        strength: 0, accuracy: 0, agility: 1, willpower: 0, power: 1,\n        danger: 1\n    },\n    {\n        name: 'Wolf spirit', base: 'SpiritBase',\n        strength: 1, accuracy: 0, agility: 1, willpower: 0, power: 2,\n        danger: 2\n    },\n    {\n        name: 'Bear spirit', base: 'SpiritBase',\n        strength: 2, accuracy: 0, agility: 1, willpower: 0, power: 3,\n        danger: 3\n    },\n    {\n        name: 'Fighter spirit', base: 'SpiritBase',\n        strength: 2, accuracy: 2, agility: 1, willpower: 0, power: 4,\n        danger: 4\n    },\n    {\n        name: 'Shaman spirit', base: 'SpiritBase',\n        strength: 0, accuracy: 0, agility: 0, willpower: 6, power: 5,\n        danger: 5\n    },\n    {\n        name: 'Winter demon spirit', base: 'SpiritBase',\n        strength: 3, accuracy: 3, agility: 3, willpower: 3, power: 7,\n        danger: 7\n    },\n    {\n        name: 'Monarch spirit', base: 'SpiritBase',\n        strength: 6, accuracy: 0, agility: 1, willpower: 6, power: 10,\n        danger: 12\n    },\n\n    // HYRKHIANS\n    {\n      name: 'HyrkhianBase', dontCreate: true, className: 'cell-actor-hyrkh',\n      char: 'y', enemies: ['undead', 'demon', 'beast', 'animal'],\n      damage: '1d6',\n      type: 'hyrkhian', brain: defaultBrain\n    },\n    {\n      name: 'Hyrkhian townsfolk', base: 'HyrkhianBase',\n      damage: '1d6',\n      attack: 1, defense: 1, protection: 1, hp: 7, danger: 1\n    },\n    {\n      name: 'Hyrkhian footman', base: 'HyrkhianBase',\n      attack: 2, defense: 2, protection: 2, hp: 15, danger: 3,\n      equip: ['Longsword']\n    },\n    {\n      name: 'Hyrkhian phalanx', base: 'HyrkhianBase',\n      attack: 4, defense: 4, protection: 2, hp: 25, danger: 5,\n      equip: ['Chain armour', 'Spear']\n    },\n    {\n      name: 'Hyrkhian archer', base: 'HyrkhianBase',\n      attack: 4, defense: 4, protection: 2, damage: '1d8', hp: 20,\n      equip: ['Steel bow', {name: 'Steel arrow', count: 15}], danger: 6\n    },\n    {\n      name: 'Hyrkhian adept', base: 'HyrkhianBase',\n      attack: 4, defense: 4, protection: 2, hp: 25,\n      danger: 7, maxPP: 30, pp: 30, brain: 'SpellCaster',\n      spells: ['Heal', 'MagicArmor']\n    },\n    {\n      name: 'Hyrkhian elite', base: 'HyrkhianBase',\n      attack: 6, defense: 6, protection: 3, hp: 35, brain: defaultBrain,\n      strength: 13,\n      equip: ['Mithril short sword', 'Chain armour', 'Chain helmet'], danger: 8\n    },\n    {\n      name: 'Hyrkhian commander', base: 'HyrkhianBase',\n      attack: 8, defense: 8, protection: 4, hp: 50, brain: defaultBrain,\n      strength: 15,\n      equip: ['Great battle axe', 'Steel armour', 'Steel helmet'], danger: 10\n    },\n\n    // SPECIAL ACTORS\n    {\n        name: 'SpecialBase', noRandom: true, actorType: 'BaseActor',\n        dontCreate: true\n    },\n    {\n      name: 'Fire', className: 'cell-actor-fire', base: 'SpecialBase',\n      char: '*', type: 'flame', brain: 'Flame',\n      addComp: ['Ethereal', 'NonSentient',\n          {comp: 'Damaging', func: {setDamageType: RG.DMG.FIRE}}\n      ]\n    },\n    {\n      name: 'Ice flame', className: 'cell-actor-winter', base: 'SpecialBase',\n      char: '*', type: 'flame', brain: 'Flame',\n      addComp: ['Ethereal', 'NonSentient',\n          {comp: 'Damaging', func: {setDamageType: RG.DMG.ICE}}\n      ],\n      onHit: [{addComp: 'Coldness', duration: '10d10'}]\n    },\n    {\n      name: 'Poison gas', className: 'cell-actor-poison', base: 'SpecialBase',\n      char: '*', type: 'flame', brain: 'Cloud',\n      color: color('Green', 'Gray'),\n      addComp: ['Ethereal', 'NonSentient',\n          {comp: 'Damaging', func: {setDamageType: RG.DMG.POISON}}\n      ],\n      poison: {duration: '1d10', damage: '1d10', prob: '0.1'}\n    },\n    {\n      name: 'Forcefield', className: 'cell-actor-forcefield',\n      base: 'SpecialBase',\n      char: '*', type: 'forcefield', brain: 'NonSentient',\n      speed: 1, hp: 25, defense: 0,\n      addComp: ['Health', 'NonSentient', 'Combat', 'SpellStop', 'Breakable',\n        {comp: 'Weakness', func: {\n            setEffect: RG.DMG.MAGIC, setLevel: RG.WEAKNESS.FATAL\n        }}\n      ]\n    },\n    {\n        name: 'flying eye', className: 'cell-actor-void',\n        base: 'SpecialBase', char: 'e', type: 'eye',\n        addComp: ['Ethereal'], brain: 'Explorer', hp: 1,\n        speed: 130, fovrange: 3, actorType: 'Sentient'\n    },\n\n    // UNIQUES\n    {\n        name: 'UniqueBase', dontCreate: true, className: 'cell-actor-unique',\n        noRandom: true, unique: true, addComp: ['RegenEffect'],\n        color: color('DarkViolet', 'Beige'),\n    },\n    {\n        name: 'Thabba, Son of Ice', base: 'UniqueBase',\n        char: '@', danger: 200, enemies: ['human'], type: 'finalboss',\n        spells: ['FrostBolt', 'RingOfFrost'], hp: 266, pp: 100,\n        brain: 'SpellCaster', damage: '4d5',\n        strength: 30, accuracy: 15, agility: 20, willpower: 20, perception: 15,\n        magic: 30, attack: 30, defense: 30, protection: 10,\n        equip: ['Permaice katana', 'Permaice armour'],\n        addComp: ['SnowWalk', resistance('ICE', 'HIGH'), 'RegenEffect']\n    },\n    {\n        name: 'Zamoned, Son of Frost', base: 'UniqueBase',\n        char: '@', danger: 200, enemies: ['human'], type: 'finalboss',\n        hp: 200, pp: 100, brain: defaultBrain,\n        strength: 20, accuracy: 25, agility: 35, willpower: 15, perception: 25,\n        magic: 10, attack: 30, defense: 30, protection: 10,\n        damage: '4d5',\n        equip: ['Permaice axe', 'Permaice armour', 'Bow of Defense',\n            {name: 'Runed arrow', count: 100}],\n        addComp: ['SnowWalk', resistance('ICE', 'HIGH'), 'RegenEffect']\n    },\n\n    {\n        name: 'Hag of North', type: 'wolfclan', base: 'UniqueBase',\n        char: 'w', danger: 100,\n        damage: '4d4+5', hp: 75, pp: 50, brain: 'SpellCaster',\n        spells: ['IcyPrison', 'FrostBolt'],\n        strength: 15, accuracy: 15, agility: 15, willpower: 30, perception: 25,\n        magic: 25, attack: 15, defense: 15, protection: 5,\n        equip: ['Ruby glass armour', 'Ruby glass collar'],\n        addComp: ['SnowWalk', resistance('ICE', 'HIGH'), 'RegenEffect']\n    },\n\n    {\n        name: 'Aime Aeon en Nev, Mighty spellsinger', type: 'dogfolk',\n        base: 'UniqueBase', char: 'd', danger: 100,\n        damage: '5d5 + 5', hp: 100, pp: 75, brain: 'SpellCaster',\n        spells: ['Paralysis', 'Flying', 'Heal', 'LightningArrow'],\n        strength: 18, accuracy: 19, agility: 18, willpower: 28, perception: 15,\n        magic: 25, attack: 20, defense: 15, protection: 5,\n        equip: ['Runed armour', 'Runed collar'],\n        onHit: [\n            {addComp: 'Stun', duration: '1d4 + 1'}\n        ],\n        addComp: ['RegenEffect']\n    },\n    {\n        name: 'Aspelin Primoen, the Blacksmith', type: 'dogfolk',\n        base: 'UniqueBase', char: 'd', danger: 75,\n        damage: '3d7 + 3', hp: 134, brain: defaultBrain,\n        strength: 25, accuracy: 20, agility: 19, willpower: 15, perception: 19,\n        magic: 13, attack: 25, defense: 15, protection: 10,\n        equip: ['Hammer of Void', 'Mithril armour'],\n    },\n\n    {\n        name: 'Elene Immolate Kinin, Queen of cats', type: 'catfolk',\n        base: 'UniqueBase', char: 'f', danger: 100,\n        damage: '10d3 + 3', hp: 123, pp: 50, brain: 'SpellCaster',\n        spells: ['ScorpionsTail', 'EnergyArrow', 'SummonKin'],\n        strength: 15, accuracy: 25, agility: 25, willpower: 17, perception: 25,\n        magic: 17, attack: 25, defense: 15, protection: 5,\n        equip: ['Steel armour', 'Runed collar'],\n        addComp: ['FirstStrike', 'RangedEvasion', 'RegenEffect']\n    },\n\n    // Undead uniques\n    {\n        name: 'Tajun Eon en Lotus, lich lord', type: 'undead',\n        base: 'UniqueBase', char: 'L', danger: 85,\n        color: {fg: 'Red', bg: 'Black'}, enemies: RG.ACTOR_RACES,\n        damage: '2d9 + 4', hp: 90, pp: 100, maxPP: 100, brain: 'SpellCaster',\n        strength: 14, accuracy: 15, agility: 14, willpower: 25, perception: 19,\n        magic: 30, attack: 25, defense: 15, protection: 10,\n        equip: ['Runed robe'],\n        onHit: [\n            meleeHitDamage(4, '2d8 + 2', 'NECRO')\n        ],\n        spells: ['SummonDead', 'FrostBolt', 'GraspOfWinter'],\n        addComp: ['RegenEffect']\n    },\n    {\n        name: 'Zargoth, undead sorcerer', type: 'undead',\n        base: 'UniqueBase', char: 'Z', danger: 75,\n        color: {fg: 'DarkSalmon', bg: 'Black'}, enemies: RG.ACTOR_RACES,\n        damage: '2d9 + 4', hp: 100, pp: 75, maxPP: 75, brain: 'SpellCaster',\n        strength: 17, accuracy: 20, agility: 17, willpower: 21, perception: 19,\n        magic: 25, attack: 25, defense: 15, protection: 10, fovrange: 7,\n        onHit: [\n            meleeHitDamage(2, '1d8 + 2', 'NECRO')\n        ],\n        spells: ['SummonUndeadUnicorns', 'ShadowRay'],\n        addComp: ['RegenEffect']\n    },\n\n    {\n        name: 'Emption Agana Sunkist, Emperor bear', type: 'bearfolk',\n        base: 'UniqueBase', char: 'B', danger: 75,\n        damage: '4d7 + 3', hp: 123, brain: defaultBrain,\n        strength: 35, accuracy: 17, agility: 17, willpower: 17, perception: 17,\n        magic: 10, attack: 35, defense: 35, protection: 15,\n        equip: ['Mithril armour', 'Mithril shield'],\n        onHit: [\n            meleeHitDamage(8, '1d2', 'LIGHTNING'),\n            {addComp: 'Stun', duration: '1d4 + 1'}\n        ]\n    },\n\n    {\n        name: 'Dvaling, dwarven sharpshooter', type: 'dwarf',\n        base: 'UniqueBase', char: 'h', danger: 70,\n        damage: '4d7 + 3', hp: 123, brain: defaultBrain,\n        strength: 35, accuracy: 17, agility: 17, willpower: 17, perception: 30,\n        magic: 10, attack: 35, defense: 35, protection: 5,\n        fovrange: 9,\n        equip: ['Chain armour', 'Chain helmet', 'Chain boots',\n            'Double crossbow', {name: 'Void bolt', count: 30}],\n        addComp: ['EagleEye', 'RangedEvasion', 'StrongShot', 'RegenEffect']\n    },\n\n    {\n        name: 'Sierra Lilith Hupoith Zoic, the arcavian', type: 'avianfolk',\n        base: 'UniqueBase', char: 'A', danger: 77,\n        damage: '4d7 + 3', hp: 123, brain: defaultBrain,\n        strength: 20, accuracy: 21, agility: 21, willpower: 17, perception: 23,\n        magic: 22, attack: 25, defense: 25, protection: 7,\n        fovrange: 7,\n        equip: ['Ruby glass armour', 'Mithril helmet', 'Mithril shield'],\n        addComp: ['Flying', 'RegenEffect', 'RangedEvasion']\n    },\n\n    // UNIQUES TODO\n    // {type: 'goblin'}\n    // {type: 'human'}\n    // {type: 'hyrkhian'}\n    // {type: 'wildling'}\n\n\n];\n\n// TODO here we can generate procedurally some actor shells to make things\n// more interesting. These can be pushed to the array\n\n//---------------------------------------------------------------------------\n// HELPER FUNCTIONS\n// These are used to scale the values of all actors. This is useful for\n// fine-tuning the game balance.\n//---------------------------------------------------------------------------\n\nexport const Actors: any = {};\n\n// Multiplies each given value in all actors\nActors.scaleValue = function(actorsData, valName, multiply) {\n    actorsData.forEach(actor => {\n        if (Number.isInteger(actor[valName])) {\n            actor[valName] = Math.round(multiply * actor[valName]);\n        }\n    });\n};\n\n// Adds to the given value in all actors (subtract by giving negative number)\nActors.addValue = function(actorsData, valName, addedVal) {\n    actorsData.forEach(actor => {\n        if (Number.isInteger(actor[valName])) {\n            actor[valName] += addedVal;\n        }\n    });\n};\n\nActors.scale = {\n    attack: 2,\n    danger: 1,\n    hp: 1.5\n};\n\n// Adds the given value for each actor\nActors.add = {\n    attack: 4\n};\n\nActors.modToFunc = {\n    scale: 'scaleValue',\n    add: 'addValue'\n};\n\nActors.modOrder = ['scale', 'add'];\n\n/* Should be called to apply the adjusted values. It's not called by default, as\n * changing the values breaks unit tests fairly easily. If\n * RG.ObjectShell.getParser()\n * is used (recommended), the adjustment is applied automatically. */\nexport const adjustActorValues = (actorsData, order = Actors.modOrder) => {\n    order.forEach(mod => {\n        const funcName = Actors.modToFunc[mod];\n        Object.keys(Actors[mod]).forEach(item => {\n            Actors[funcName](actorsData, item, Actors[mod][item]);\n        });\n    });\n};\n\nexport function resistance(type, level) {\n    return {\n        comp: 'Resistance', func: {\n            setEffect: RG.DMG[type.toUpperCase()],\n            setLevel: RG.RESISTANCE[level.toUpperCase()]\n        }\n    };\n}\n\nexport function BypassComp(value) {\n    return {comp: 'BypassProtection', func: {setChance: value}};\n}\n\n","\nimport RG from './rg';\nimport {ELEM} from '../data/elem-constants';\nimport {CellMap} from './map';\nimport {Level} from './level';\nimport {FactoryLevel} from './factory.level';\n\nexport interface CoordXY {\n    x: number;\n    y: number;\n}\n\nexport const Builder: any = {};\n\nBuilder.addPathToMap = function(map: CellMap, coord: CoordXY[]): CoordXY[] {\n    const chosenCoord = [];\n    for (let j = 0; j < coord.length; j++) {\n        const c = coord[j];\n        if (map.hasXY(c.x, c.y)) {\n            const baseElem = map.getBaseElemXY(c.x, c.y);\n            const type = baseElem.getType();\n            if (type.match(/(chasm|water)/)) {\n                map.setBaseElemXY(c.x, c.y, ELEM.BRIDGE);\n            }\n            else if ((/stone|highrock/).test(type)) {\n                map.setBaseElemXY(c.x, c.y, ELEM.PATH);\n            }\n            else {\n                map.setBaseElemXY(c.x, c.y, ELEM.ROAD);\n            }\n            chosenCoord.push(c);\n        }\n    }\n    return chosenCoord;\n};\n\n/* Splits a larger level into a matrix of X by Y sublevels. This does\n* not preserve the original level for efficiency reasons, but extracts\n* all entities and moves them to smaller levels. */\nBuilder.splitLevel = function(level: Level, conf): Level[][] {\n    const levels: Level[][] = [];\n    const width = level.getMap().cols / conf.nLevelsX;\n    const height = level.getMap().rows / conf.nLevelsY;\n\n    const actors = level.getActors().slice();\n    const items = level.getItems().slice();\n    const hasProps = actors.length > 0 || items.length > 0;\n\n    for (let x = 0; x < conf.nLevelsX; x++) {\n        const levelCol = [];\n        for (let y = 0; y < conf.nLevelsY; y++) {\n            let subLevel = null;\n            if (hasProps) {\n                subLevel = new FactoryLevel().createLevel('empty', width, height);\n            }\n            else {\n                subLevel = new Level();\n                const subMap = CellMap.createWithoutCells(width, height);\n                subLevel.setMap(subMap);\n            }\n            levelCol.push(subLevel);\n        }\n        levels.push(levelCol);\n    }\n\n    const getSubLevel = (x, y) => {\n        const subIndexX = Math.floor(x / width);\n        const subIndexY = Math.floor(y / height);\n        return levels[subIndexX][subIndexY];\n    };\n\n    const getSubX = x => x % width;\n    const getSubY = y => y % height;\n\n    // Copy the base elements\n    const map = level.getMap();\n    for (let x = 0; x < map.cols; x++) {\n        for (let y = 0; y < map.rows; y++) {\n\n            // Get correct sub-level\n            const subLevel = getSubLevel(x, y);\n            // Translate x,y to sub-level x,y\n            const subX = getSubX(x);\n            const subY = getSubY(y);\n\n            if (hasProps) {\n                subLevel.getMap().setBaseElemXY(\n                    subX, subY, map.getBaseElemXY(x, y));\n            }\n            else {\n                subLevel.getMap().moveCellUnsafe(subX, subY,\n                    map.getCell(x, y));\n            }\n        }\n    }\n\n    // Move actors\n    actors.forEach(actor => {\n        const aX = actor.getX();\n        const aY = actor.getY();\n        if (level.removeActor(actor)) {\n            const subLevel = getSubLevel(aX, aY);\n            const subX = getSubX(aX);\n            const subY = getSubY(aY);\n            subLevel.addActor(actor, subX, subY);\n        }\n        else {\n            RG.warn('Geometry', 'splitLevel',\n                `removeActor failed on ${JSON.stringify(actor)}`);\n        }\n    });\n\n    // Move items\n    items.forEach(item => {\n        const aX = item.getX();\n        const aY = item.getY();\n        level.removeItem(item, aX, aY);\n\n        const subLevel = getSubLevel(aX, aY);\n        const subX = getSubX(aX);\n        const subY = getSubY(aY);\n        subLevel.addItem(item, subX, subY);\n    });\n\n    // Warn about existing stairs\n    const stairs = level.getStairs();\n    if (stairs.length > 0) {\n        RG.warn('Geometry', 'splitLevel',\n            'Function does not move stairs correctly (yet).');\n    }\n\n    return levels;\n};\n","\nimport RG from './rg';\nexport const Template: any = {};\n\nTemplate.$DEBUG = 0;\n\nconst genRegex = /[A-Z]/;\nconst paramSplitRegex = /\\s*=\\s*/;\nconst propSplitRegex = /\\s*:\\s*/;\n\nconst debug = msg => {\n    if (Template.$DEBUG) {\n        console.log('[DEBUG ' + msg);\n    }\n};\n\nexport interface ElemTemplate {\n    setProps: (props: any) => void;\n    getProp: (prop: string) => any;\n    getChars: () => string[];\n    getDir: () => string;\n    setProp: (key: string, val: any) => void;\n}\n\n/* Creates and return ElemTemplate from a string.\n */\nTemplate.createTemplate = function(str: string): ElemTemplate {\n    const lines = str.split('\\n');\n    let nLine = 0;\n    let currLine = lines[0];\n\n    // Skip possible empty line\n    if (currLine.length === 0) {currLine = lines[++nLine];}\n\n    const elemMap = {};\n    const elemPropMap = {};\n\n    // Find params 'X=#' and props 'key:val'\n    while (currLine && currLine.length > 0) {\n        if (paramSplitRegex.test(currLine)) {\n            const keyAndVal = currLine.split(paramSplitRegex);\n            if (keyAndVal.length === 2) {\n                const key = keyAndVal[0];\n                const val = keyAndVal[1];\n                if (key.length === val.length) {\n                    elemMap[keyAndVal[0]] = keyAndVal[1];\n                }\n                else {\n                    RG.err('Template', 'createTemplate',\n                        `Key ${key}, val ${val} have different len`);\n                }\n            }\n        }\n        else if (propSplitRegex.test(currLine)) {\n            const keyAndVal = currLine.split(propSplitRegex);\n            if (keyAndVal.length === 2) {\n                const key = keyAndVal[0];\n                const val = keyAndVal[1];\n                elemPropMap[key] = val;\n            }\n            else {\n                RG.warn('Template', 'createTemplate',\n                    `Prop must be key:val. Ignoring line ${currLine}`);\n            }\n        }\n        // TODO maybe add logic to skip empty lines\n        ++nLine;\n        currLine = lines[nLine];\n    }\n\n    if (nLine === lines.length) {\n        RG.err('Template', 'createTemplate',\n            'No empty line between header and template section.');\n    }\n\n    ++nLine; // Skip empty line\n    const asciiLines = [];\n    while (nLine < lines.length) {\n        asciiLines.push(lines[nLine]);\n        ++nLine;\n    }\n\n    // Parse x-generators from first line\n    let currLineArr = asciiLines[0].split('');\n    const {genPos: xGenPos, widths: xWidths} = getWidthsAndGenPos(currLineArr);\n    debug(JSON.stringify(xGenPos));\n    debug(JSON.stringify(xWidths));\n\n    const firstCol = [];\n    const rows = [];\n    let y = 0;\n    for (let i = 0; i < asciiLines.length; i++) {\n        let xSrc = 0;\n        let xTarget = 0;\n        rows.push([]);\n        currLineArr = asciiLines[i].split('');\n        debug(JSON.stringify(`y: ${y} currLineArr: ${currLineArr}`));\n        firstCol.push(currLineArr[0]);\n\n        for (let j = 0; j < xWidths.length; j++) {\n            const w = xWidths[j];\n            const elem = currLineArr.slice(xSrc, xSrc + w);\n            debug(`x: ${xSrc}, w: ${w}, elem: ${elem}`);\n            if (elem) {\n                rows[y][xTarget] = elem;\n            }\n            xSrc += w;\n            ++xTarget;\n        }\n        ++y;\n    }\n\n    rows.forEach((r, i) => {\n        debug(`Row[${i}]: ${JSON.stringify(r)}`);\n    });\n\n    debug('firstCols is: ' + JSON.stringify(firstCol));\n\n    const {genPos: yGenPos, widths: yWidths} = getWidthsAndGenPos(firstCol);\n    debug('@yGenPos: ' + JSON.stringify(yGenPos));\n    debug('@yWidths: ' + JSON.stringify(yWidths));\n\n    const conf = {\n        xGenPos, yGenPos,\n        xWidths, yWidths,\n        rows,\n        elemMap\n    };\n\n    const template = new ElemTemplate(conf);\n    template.setProps(elemPropMap);\n    return template;\n};\n\nfunction getWidthsAndGenPos(currLineArr) {\n    const lineLen = currLineArr.length;\n    const xGenPos = {};\n    const xWidths = [1];\n    let prevChar = '';\n    let currChar = '';\n    let genXLen = 0;\n    for (let x = 1; x < lineLen; x++) {\n        currChar = currLineArr[x];\n        if (genRegex.test(currChar)) {\n            if (genXLen > 0) {\n                if (prevChar === currChar) {\n                    ++genXLen;\n                }\n                else {\n                    xGenPos[xWidths.length] = genXLen;\n                    xWidths.push(genXLen);\n                    genXLen = 1;\n                }\n            }\n            else {\n                ++genXLen;\n            }\n        }\n        else if (genXLen > 0) {\n            // xGenPos[x - genXLen] = genXLen;\n            xGenPos[xWidths.length] = genXLen;\n            xWidths.push(genXLen);\n            xWidths.push(1);\n            genXLen = 0;\n        }\n        else {\n            xWidths.push(1);\n        }\n        prevChar = currChar;\n    }\n    if (genXLen > 0) {\n        // xGenPos[lineLen - genXLen] = genXLen;\n        xGenPos[xWidths.length] = genXLen;\n        xWidths.push(genXLen);\n    }\n    return {\n        genPos: xGenPos,\n        widths: xWidths\n    };\n}\n\nexport const ElemTemplate = function(conf?) {\n    if (conf) {\n        this.elemMap = conf.elemMap;\n        this.nMaps = Object.keys(this.elemMap).length;\n        this.sizeX = conf.xWidths.length;\n        this.sizeY = conf.rows.length;\n\n        this.xWidths = conf.xWidths;\n        this.yWidths = conf.yWidths;\n\n        // Indicates which cells have generators\n        this.xGenPos = conf.xGenPos;\n        this.yGenPos = conf.yGenPos;\n    }\n    this.elemPropMap = {};\n    this.elemArr = [];\n    this.hasGenRow = {};\n\n    if (conf) {\n        // Before Gen madness, place normal cells\n        for (let x = 0; x < this.sizeX; x++) {\n            this.elemArr[x] = [];\n            for (let y = 0; y < this.sizeY; y++) {\n                this.elemArr[x][y] = conf.rows[y][x].join('');\n            }\n        }\n\n        Object.keys(this.xGenPos).forEach(x => {\n            for (let y = 0; y < this.sizeY; y++) {\n                const str = this.elemArr[x][y];\n                this.elemArr[x][y] = new ElemGenX(str);\n            }\n        });\n    }\n\n    this.setProps = function(props) {\n        this.elemPropMap = props;\n    };\n\n    this.getProp = function(name) {\n        return this.elemPropMap[name];\n    };\n\n    /* Returns direction (dir property) as sorted string. */\n    this.getDir = function(): string {\n        const dir = this.getProp('dir');\n        if (dir) {\n            return dir.split('').sort().join('');\n        }\n        return '';\n    };\n\n    this.setProp = function(key, val): void {\n        this.elemPropMap[key] = val;\n    };\n\n    // Find Y-generator\n    this.getChars = function(arr): string[] {\n        if (!arr) {\n            arr = [];\n            for (let i = 0; i < this.nMaps; i++) {\n                arr.push(1);\n            }\n        }\n        else if (Number.isInteger(arr)) {\n            const val = arr;\n            arr = [];\n            for (let i = 0; i < this.nMaps; i++) {\n                arr.push(val);\n            }\n        }\n\n        if (arr.length > 0 && arr.length < this.nMaps) {\n            RG.err('ElemTemplate', 'getChars',\n                `Input array length must be ${this.nMaps}.`);\n        }\n        else {\n            let index = 0; // Points to the generator array value\n            let incrIndex = false; // Increment only on generators\n            const xGenResult = [];\n            for (let x = 0; x < this.sizeX; x++) {\n                xGenResult[x] = [];\n                for (let y = 0; y < this.sizeY; y++) {\n                    if (typeof this.elemArr[x][y] === 'object') {\n                        const val = arr[index];\n                        // const expVal = this.elemArr[x][y].getChars(val);\n                        xGenResult[x][y] = this.elemArr[x][y].getChars(val);\n                        incrIndex = true;\n                    }\n                    else {\n                        xGenResult[x][y] = this.elemArr[x][y];\n                    }\n                }\n                if (incrIndex) {\n                    ++index; // Gen value changes per column\n                    incrIndex = false;\n                }\n            }\n\n            this.substituteXMaps(xGenResult);\n            debug('X before split: ' + JSON.stringify(xGenResult));\n            const splitRes = this.splitMultiElements(xGenResult);\n            debug('After-X, Before-Y: ' + JSON.stringify(splitRes));\n            // X is fine, now apply Y-generators\n            if (Object.keys(this.yGenPos).length > 0) {\n                const yGenResult = [];\n                // Use yWidths to generate a new array\n                for (let x = 0; x < this.sizeX; x++) {\n                    yGenResult[x] = [];\n                    let y = 0;\n                    let xGenY = 0;\n\n                    // Take w amount of rows from xGenResult\n                    this.yWidths.forEach(w => {\n                        yGenResult[x][y] =\n                            xGenResult[x].slice(xGenY, xGenY + w);\n                            // splitRes[x].slice(xGenY, xGenY + w);\n                        ++y;\n                        xGenY += w;\n                    });\n\n                }\n                debug('y after widths ' + JSON.stringify(yGenResult));\n\n                // Finally we expand the y-gens inline\n                Object.keys(this.yGenPos).forEach(yPos => {\n                    for (let x = 0; x < this.sizeX; x++) {\n                        yGenResult[x][yPos] = this.expandYGen(arr[index],\n                            yGenResult[x][yPos]);\n                    }\n                    ++index;\n                });\n\n                const flattened = RG.flattenTo2D(yGenResult);\n                debug('y after flatten ' + JSON.stringify(flattened));\n                const splitRes = this.splitMultiElements(flattened);\n                debug('y after flatten ' + JSON.stringify(splitRes));\n\n                this.substituteYMaps(splitRes);\n                return splitRes;\n            }\n            else {\n                debug('X-Before subst: ' + JSON.stringify(xGenResult));\n                debug('X-After, split: ' + JSON.stringify(splitRes));\n\n                return splitRes;\n            }\n        }\n        return [];\n    };\n\n    this.expandYGen = (val, elem) => {\n        debug(`expandYGen ${val} -> ${elem}`);\n        const newElem = [];\n        for (let i = 0; i < val; i++) {\n           newElem.push(elem);\n        }\n        return newElem;\n    };\n\n    /* Substitutes the [A-Z] maps for specified ascii chars. */\n    this.substituteXMaps = function(arr) {\n        const sizeX = arr.length;\n        Object.keys(this.elemMap).forEach(map => {\n            const mapRe = new RegExp(map, 'g'); // Need re for global replace\n            for (let x = 0; x < sizeX; x++) {\n                arr[x][0] = arr[x][0].replace(mapRe, this.elemMap[map]);\n            }\n        });\n    };\n\n    /* Need to substitute the first column only. Arr is otherwise in correct\n    * shape. */\n    this.substituteYMaps = function(arr) {\n        let firstCol = [];\n        const sizeY = arr[0].length;\n        for (let y = 0; y < sizeY; y++) {\n            firstCol.push(arr[0][y]);\n        }\n        debug('firstCol is now: ' + JSON.stringify(firstCol));\n        let str = firstCol.join('');\n        Object.keys(this.elemMap).forEach(map => {\n            const mapRe = new RegExp(map, 'g'); // Need re for global replace\n            str = str.replace(mapRe, this.elemMap[map]);\n        });\n\n        // Convert string back to 1st column array\n        firstCol = str.split('');\n        debug('firstCol END: ' + JSON.stringify(firstCol));\n\n        if (Template.$DEBUG) {\n            RG.printMap(arr);\n        }\n        // Re-apply the substituted column\n        for (let y = 0; y < sizeY; y++) {\n            arr[0][y] = firstCol[y];\n        }\n    };\n\n    /* Splits elements like [aa, bb, cc] into [a, b, c], [a, b, c]\n    * Has no impact on single elemns like [a, b, c] */\n    this.splitMultiElements = arr => {\n        const sizeX = arr.length;\n        const res = [];\n        let realX = 0;\n        for (let x = 0; x < sizeX; x++) {\n            const col = arr[x];\n            const nChars = col[0].length;\n            if (nChars > 1) { // Need to split this\n                debug(`Splitting ${nChars} nChars: ${col}`);\n                for (let y = 0; y < col.length; y++) {\n                   // Take one char per y\n                   const row = col[y];\n                   let writeIndex = realX;\n                   row.split('').forEach(char => {\n                       if (y === 0) {\n                           // Create new array on 1st index\n                           res.push([char]);\n                           debug('\\tres push ' + JSON.stringify(res));\n                       }\n                       else {\n                           // ..and push to array on 2nd,3rd etc\n                           res[writeIndex++].push(char);\n                           debug('\\tres[x] push ' + JSON.stringify(res));\n                       }\n                   });\n                }\n                realX += nChars; // Real X dim was expanded by nChars\n            }\n            else {\n                ++realX;\n                res.push(col);\n            }\n        }\n        return res;\n    };\n\n    /* Clones the template into a new object and returns it. */\n    this.clone = () => {\n        const newElem = new ElemTemplate();\n        const newTempl = JSON.parse(JSON.stringify(this));\n        Object.keys(newTempl).forEach(key => {\n            newElem[key] = newTempl[key];\n        });\n        Object.keys(this.xGenPos).forEach(xPos => {\n            for (let y = 0; y < this.sizeY; y++) {\n                const char = newElem.elemArr[xPos][y].genX;\n                newElem.elemArr[xPos][y] = new ElemGenX(char);\n            }\n        });\n        return newElem;\n    };\n};\nTemplate.ElemTemplate = ElemTemplate;\n\nconst ElemGenX = function(str) {\n    const len = str.length;\n\n    this.length = () => len;\n\n    this.getChars = (N = 1) => str.repeat(N);\n\n    this.toJSON = () => {\n        return {genX: str};\n    };\n\n};\nTemplate.ElemGenX = ElemGenX;\n\n/* Two transformations are needed to achieve all possible orientations:\n * 1. Rotation 90 degrees to right (clockwise): R90\n * 2. Flipping (mirroring) over vertical (y-axis): flipY\n */\n\n// Transforms don't change the generator locations, but the generator tiles must\n// be swapped of course. To transform:\n//   1. Replace generator vars with their tiles,\n//   2. Then do the transformation of x- and y-coordinates\n//   3. Add gen vars back to their original place, but change the gen var tiles\n\nconst r90ExitMap = {N: 'E', E: 'S', S: 'W', W: 'N'};\nconst EXIT_MAPS: any = {\n    rotate90: r90ExitMap,\n    rotate180: r90ExitMap,\n    rotate270: r90ExitMap,\n};\n\n/* Rotates the template 90 degrees to the right.*/\nTemplate.rotateR90 = function(templ, exitMap = r90ExitMap) {\n    const newTempl = templ.clone();\n    remapExits(newTempl, exitMap);\n    const genVars = [];\n    let nGenVars = Object.keys(newTempl.xGenPos).length;\n    nGenVars += Object.keys(newTempl.yGenPos).length;\n    for (let n = 0; n < nGenVars; n++) {\n        genVars.push(1);\n    }\n    const ascii = newTempl.getChars(genVars);\n    const sizeY = ascii[0].length;\n    const rotated = new Array(sizeY);\n    for (let y = 0; y < sizeY; y++) {\n        rotated[y] = [];\n    }\n\n    for (let x = 0; x < ascii.length; x++) {\n        for (let y = 0; y < sizeY; y++) {\n            rotated[sizeY - 1 - y].push(ascii[x][y]);\n        }\n    }\n\n    // Switch x/y gen position\n    newTempl.yGenPos = Object.assign({}, templ.xGenPos);\n    const rotSizeX = rotated.length;\n\n    newTempl.xGenPos = {};\n    Object.keys(templ.yGenPos).forEach(yPos => {\n        const newYPos = rotSizeX - 1 - parseInt(yPos, 10);\n        newTempl.xGenPos[newYPos] = templ.yGenPos[yPos];\n    });\n\n    newTempl.elemArr = rotated;\n    // Replace string with X generators\n    Object.keys(newTempl.xGenPos).forEach(xPos => {\n        for (let y = 0; y < newTempl.sizeY; y++) {\n            try {\n                newTempl.elemArr[xPos][y] = new ElemGenX(\n                    newTempl.elemArr[xPos][y]);\n            }\n            catch (e) {\n                console.log('Template:', newTempl.getProp('name'));\n                console.log('xGenPos: ', newTempl.xGenPos);\n                throw new Error(e);\n            }\n        }\n    });\n\n    return newTempl;\n};\n\n\nTemplate.rotateR180 = function(templ, exitMap = r90ExitMap) {\n    const newTempl = Template.rotateR90(templ, exitMap);\n    return Template.rotateR90(newTempl, exitMap);\n};\n\nTemplate.rotateR270 = function(templ, exitMap = r90ExitMap) {\n    const newTempl = Template.rotateR180(templ, exitMap);\n    return Template.rotateR90(newTempl, exitMap);\n};\n\nconst flipVerExitMap = {E: 'W', W: 'E'};\nEXIT_MAPS.flipVer = flipVerExitMap;\n\n/* Flips the template over vertical axis. */\nTemplate.flipVer = function(templ, exitMap = flipVerExitMap) {\n    const newTempl = templ.clone();\n\n    // Only need to mirror E -> W or\n    remapExits(newTempl, exitMap);\n\n    const genVars = [];\n    let nGenVars = Object.keys(newTempl.xGenPos).length;\n    nGenVars += Object.keys(newTempl.yGenPos).length;\n    for (let n = 0; n < nGenVars; n++) {\n        genVars.push(1);\n    }\n\n    const sizeX = newTempl.sizeX;\n    const flipped = new Array(sizeX);\n    for (let x = 0; x < sizeX; x++) {\n        flipped[x] = [];\n    }\n\n    const sizeY = newTempl.sizeY;\n    const ascii = newTempl.getChars(genVars);\n\n    // Flip x,y coords here. y is unchanged, x flips\n    for (let x = 0; x < sizeX; x++) {\n        for (let y = 0; y < sizeY; y++) {\n            flipped[sizeX - 1 - x][y] = ascii[x][y];\n        }\n    }\n\n    const flippedSizeX = flipped.length;\n    // x-gen positions must also be flipped\n    newTempl.xGenPos = {};\n    Object.keys(templ.xGenPos).forEach(xPos => {\n        if (parseInt(xPos, 10) < (flippedSizeX - 1)) {\n            const newXPos = flippedSizeX - 1 - parseInt(xPos, 10);\n            newTempl.xGenPos[newXPos] = templ.xGenPos[xPos];\n        }\n        else { // Cannot flip on last position, so preserve it\n            const newXPos = xPos;\n            newTempl.xGenPos[newXPos] = templ.xGenPos[xPos];\n        }\n    });\n\n    newTempl.elemArr = flipped;\n    // Finally, replace string with X generators\n    Object.keys(newTempl.xGenPos).forEach(xPos => {\n        for (let y = 0; y < newTempl.sizeY; y++) {\n            newTempl.elemArr[xPos][y] = new ElemGenX(newTempl.elemArr[xPos][y]);\n        }\n    });\n\n    return newTempl;\n};\n\nfunction remapExits(templ, exitMap) {\n    const dirStr = templ.getProp('dir');\n    if (dirStr) {\n        const dir = dirStr.split('');\n        dir.forEach((val, i) => {\n            if (exitMap.hasOwnProperty(val)) {\n                dir[i] = exitMap[val];\n            }\n        });\n        templ.setProp('dir', dir.join(''));\n    }\n}\n\n/* Creates all specified transforms for the given list of templates. */\nfunction transformList(templates, transforms, exitMap) {\n    if (RG.isNullOrUndef([templates])) {\n        RG.err('Template', 'transformList',\n            'Input list templates is null');\n    }\n    let result = [];\n\n    // Default option is to transform all, usually unnecessary due to symmetry\n    // in many tiles, but does not require any setup from the user\n    if (!transforms) {\n        transforms = {\n            all: '*', flipVer: [], rotateR90: [], rotateR180: [],\n            rotateR270: []\n        };\n    }\n\n    // Transformation of each template added\n    Object.keys(transforms).forEach(func => {\n        if (func !== 'all') {\n            const created = [];\n\n            let names = transforms[func];\n            if (transforms.all === '*') {\n                names = templates.map(t => t.getProp('name'));\n            }\n            else {\n                names = names.concat(transforms.all);\n            }\n\n            names.forEach(name => {\n                const templ = templates.find(t => (\n                    t.getProp('name') === name\n                ));\n\n                if (templ) {\n                    const map = exitMap ? exitMap[func] : EXIT_MAPS[func];\n                    const newTempl = Template[func](templ, map);\n                    setTransformName(func, newTempl);\n                    created.push(newTempl);\n                    if (func === 'flipVer') {\n                        const rotations = getRotations(transforms, name);\n                        rotations.forEach(rot => {\n                            const map = exitMap ? exitMap[rot] : EXIT_MAPS[rot];\n                            const rotTempl = Template[rot](newTempl, map);\n                            setTransformName(rot, rotTempl);\n                            created.push(rotTempl);\n                        });\n                    }\n                }\n\n            });\n            result = result.concat(created);\n        }\n    });\n    return result;\n}\nTemplate.transformList = transformList;\n\n/* Finds which rotations need to be applied to given template by name. This is\n * mainly used when flipping vertical to find which rotations must be done. */\nfunction getRotations(transforms, name) {\n    const found = [];\n    const rotations = ['rotateR90', 'rotateR180', 'rotateR270'];\n    rotations.forEach(rot => {\n        if (transforms[rot].indexOf(name) >= 0 || transforms.all === '*') {\n            found.push(rot);\n        }\n    });\n    return found;\n}\n\nfunction setTransformName(func, templ) {\n    let name = templ.getProp('name');\n    switch (func) {\n        case 'rotateR90': name += '_r90'; break;\n        case 'rotateR180': name += '_r180'; break;\n        case 'rotateR270': name += '_r270'; break;\n        case 'flipVer': name += '_flip'; break;\n        default: break;\n    }\n    templ.setProp('name', name);\n}\n\n","\n/* Contains the code for base class of level generator. */\nimport RG from './rg';\nimport {ElementMarker, ElementDoor} from './element';\nimport {Level} from './level';\n\nimport {TCoord} from './interfaces';\n\nexport abstract class LevelGenerator {\n    public shouldRemoveMarkers: boolean;\n\n    constructor() {\n        this.shouldRemoveMarkers = true;\n    }\n\n    public abstract create(cols, rows, conf): Level;\n\n    /* Adds markers for start and endpoint for given level. */\n    public addStartAndEndPoint(level: Level, start: TCoord, end: TCoord): void {\n        if (start) {\n            const [sX, sY] = start;\n            const startPointElem = new ElementMarker('<');\n            startPointElem.setTag('start_point');\n            level.addElement(startPointElem, sX, sY);\n        }\n\n        if (end) {\n            const [eX, eY] = end;\n            const goalPoint = new ElementMarker('>');\n            goalPoint.setTag('end_point');\n            level.addElement(goalPoint, eX, eY);\n        }\n    }\n\n    /* Removes the markers which are used during PCG, but should not be visible\n     * to player. */\n    public removeMarkers(level: Level, conf): void {\n        let markersPreserved = ['start_point', 'end_point', 'critical_path'];\n        if (conf.markersPreserved) {\n            markersPreserved = markersPreserved.concat(conf.markersPreserved);\n        }\n        else if (conf.markersPreserved === false) {\n            markersPreserved = [];\n        }\n\n        if (!RG.isNullOrUndef([conf.shouldRemoveMarkers])) {\n            this.shouldRemoveMarkers = conf.shouldRemoveMarkers;\n        }\n\n        if (this.shouldRemoveMarkers) {\n            level.removeElements(e => {\n                if (e.getTag) {\n                    const tag = e.getTag();\n                    if (markersPreserved.indexOf(tag) < 0) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n    }\n}\n","\nimport RG from './rg';\n\nimport {Cell} from './map.cell';\nimport {Level} from './level';\nimport {MapGenerator} from './map.generator';\nimport * as Verify from './verify';\nimport {Placer} from './placer';\n\nimport {FactoryActor} from './factory.actors';\nimport {FactoryItem} from './factory.items';\nimport {FactoryLevel} from './factory.level';\nimport {DungeonPopulate} from './dungeon-populate';\nimport {EventPool} from '../src/eventpool';\nimport {Random} from './random';\nimport * as Element from './element';\nimport {ELEM_MAP} from '../data/elem-constants';\n\nconst POOL = EventPool.getPool();\n\nconst RNG = Random.getRNG();\n\nconst ItemConf = function(conf) {\n    const req = ['itemsPerLevel', 'maxValue', 'func'];\n    req.forEach(prop => {\n        if ((prop in conf)) {\n            this[prop] = conf[prop];\n        }\n        else {\n            const msg = `${prop} must be given`;\n            RG.err('ItemConf', 'new', msg);\n        }\n    });\n};\n\nexport const Factory: any = {};\n\n/* Returns a basic configuration for a city level. */\nFactory.cityConfBase = conf => {\n    const userConf = conf || {};\n    const obj = {\n        nShops: 1,\n        shopFunc: [\n            item => item.type === RNG.arrayGetRand(RG.SHOP_TYPES)\n        ],\n        shopType: '', levelType: 'arena'\n    };\n    const result = Object.assign(obj, userConf);\n    return result;\n};\n\n\n//---------------------------------------------------------------------------\n// FACTORY OBJECTS\n//---------------------------------------------------------------------------\n\n/* Factory object for creating actors. */\n\n/* Factory object for creating some commonly used objects. */\nexport const FactoryBase = function() {\n    this._verif = new Verify.Conf('FactoryBase');\n    this._actorFact = new FactoryActor();\n    this._itemFact = new FactoryItem();\n    this._levelFact = new FactoryLevel();\n\n    /* Creates a new die object from array or die expression '2d4 + 3' etc.*/\n    this.createDie = strOrArray => {\n        return RG.createDie(strOrArray);\n    };\n\n    /* Factory method for players.*/\n    this.createPlayer = (name, obj) => this._actorFact.createPlayer(name, obj);\n\n    /* Factory method for monsters.*/\n    this.createActor = (name, obj = {}) => (\n        this._actorFact.createActor(name, obj)\n    );\n\n    /* Factory method for AI brain creation.*/\n    this.createBrain = (actor, brainName) =>\n        this._actorFact.createBrain(actor, brainName);\n\n    /* Factory method for Spell creation. */\n    this.createSpell = name => this._actorFact.createSpell(name);\n\n    this.createElement = (elemType) => {\n        if (ELEM_MAP.elemTypeToObj[elemType]) {\n            return ELEM_MAP.elemTypeToObj[elemType];\n        }\n        switch (elemType) {\n            case 'door' : return new Element.ElementDoor(true);\n            case 'opendoor' : return new Element.ElementDoor(false);\n            default: return null;\n        }\n    };\n\n    this.createFloorCell = (x, y): Cell =>\n        new Cell(x, y, new Element.ElementBase('floor'));\n\n    this.createWallCell = (x, y): Cell =>\n        new Cell(x, y, new Element.ElementWall('wall'));\n\n    /* Factory method for creating levels.*/\n    this.createLevel = function(levelType, cols, rows, conf): Level {\n        return this._levelFact.createLevel(levelType, cols, rows, conf);\n    };\n\n\n    /* Adds N random items to the level based on maximum value.*/\n    this.addNRandItems = (level, parser, conf) => {\n        this._verif.verifyConf('addNRandItems', conf, ['func', 'maxValue']);\n        // Generate the items randomly for this level\n        return this._itemFact.addNRandItems(level, parser, conf);\n    };\n\n    /* Adds N random monsters to the level based on given danger level.\n     * Returns the number of actors added. */\n    this.addNRandActors = (level, parser, conf) => {\n        this._verif.verifyConf('addNRandActors', conf,\n            ['maxDanger', 'actorsPerLevel']);\n        // Generate the enemies randomly for this level\n        const maxDanger = conf.maxDanger;\n\n        const actors = this.generateNActors(conf.actorsPerLevel, conf.func,\n            maxDanger);\n        if (!actors) {\n            return 0;\n        }\n        Placer.addPropsToFreeCells(level, actors, RG.TYPE_ACTOR);\n        return actors.length;\n    };\n\n    this.setParser = parser => {\n        this._parser = parser;\n    };\n\n    this.generateNActors = (nActors, func, maxDanger) => {\n        return this._actorFact.generateNActors(nActors, func, maxDanger);\n    };\n\n\n    /* Adds a random number of gold coins to the level. */\n    this.addRandomGold = (level, parser, conf) => {\n        this._itemFact.addRandomGold(level, parser, conf);\n    };\n\n    this.createHumanArmy = (level, parser) => {\n        for (let y = 0; y < 2; y++) {\n            for (let x = 0; x < 20; x++) {\n                const human = parser.createActualObj('actors', 'fighter');\n                level.addActor(human, x + 1, 4 + y);\n            }\n\n            const warlord = parser.createActualObj('actors', 'warlord');\n            level.addActor(warlord, 10, y + 7);\n        }\n    };\n\n    this.createDemonArmy = (level, parser) => {\n        for (let y = 0; y < 2; y++) {\n            for (let i = 0; i < 10; i++) {\n                const demon = parser.createActualObj('actors', 'Winter demon');\n                level.addActor(demon, i + 10, 14 + y);\n                POOL.emitEvent(RG.EVT_ACTOR_CREATED, {actor: demon,\n                    level, msg: 'DemonSpawn'});\n            }\n        }\n    };\n\n    this.createBeastArmy = function(level, parser) {\n        const x0 = level.getMap().cols / 2;\n        const y0 = level.getMap().rows / 2;\n        for (let y = y0; y < y0 + 2; y++) {\n            for (let x = x0; x < x0 + 10; x++) {\n                const beast = parser.createActualObj('actors',\n                    'Blizzard beast');\n                const xAct = x + 10;\n                const yAct = y + 14;\n                if (level.getMap().hasXY(xAct, yAct)) {\n                    level.addActor(beast, xAct, yAct);\n                    POOL.emitEvent(RG.EVT_ACTOR_CREATED, {actor: beast,\n                        level, msg: 'DemonSpawn'});\n                }\n                else {\n                    RG.warn('FactoryBase', 'createBeastArmy',\n                        `Cannot put beast to ${xAct}, ${yAct}.`);\n                }\n            }\n        }\n    };\n\n    this.addActorsToBbox = (level, bbox, conf) => {\n        const nActors = conf.nActors || 4;\n        const {maxDanger, func} = conf;\n        const actors = this.generateNActors(nActors, func, maxDanger);\n        Placer.addActorsToBbox(level, bbox, actors);\n    };\n\n    /* Adds N items to the given level in bounding box coordinates. */\n    this.addItemsToBbox = (level, bbox, conf) => {\n        const nItems = conf.nItems || 4;\n        let itemConf = Object.assign({itemsPerLevel: nItems}, conf);\n        itemConf = new ItemConf(itemConf);\n        const itemFact = new FactoryItem();\n        const items = itemFact.generateItems(itemConf);\n        const freeCells = level.getMap().getFreeInBbox(bbox);\n        Placer.addPropsToCells(level, freeCells, items, RG.TYPE_ITEM);\n    };\n\n};\n","\nimport RG from './rg';\nimport {LevelFactory} from '../data/level-factory';\nimport {Constraints} from './constraints';\n\nconst dbg = require('debug');\nconst debug = dbg('bitn:Factory.World');\n\nimport * as Verify from './verify';\nimport {ConfStack} from './conf-stack';\nimport * as World from './world';\nimport {Factory, FactoryBase} from './factory';\nimport {FactoryZone} from './factory.zone';\nimport {ObjectShell} from './objectshellparser';\n\nimport {DungeonGenerator} from './dungeon-generator';\nimport {CaveGenerator} from './cave-generator';\nimport {CastleGenerator} from './castle-generator';\nimport {CryptGenerator} from './crypt-generator';\n\nimport {QuestPopulate} from './quest';\nimport {Level} from './level';\nimport {DungeonFeatures} from './dungeon-features';\n\nimport * as Element from './element';\nimport * as IF from './interfaces';\n\nconst Stairs = Element.ElementStairs;\nconst ZONE_TYPES = ['City', 'Mountain', 'Dungeon', 'BattleZone'];\n\ntype Random = import('./random').Random;\ntype Stairs = Element.ElementStairs;\ntype WorldTop = World.WorldTop;\ntype Area = World.Area;\ntype ConcreteSubZone = World.Branch | World.CityQuarter |\n    World.MountainFace;\n\ninterface GlobalConf {\n    levelSize: string;\n    dungeonX: number;\n    dungeonY: number;\n    sqrPerActor: number;\n    sqrPerItem: number;\n    set: boolean;\n}\n\ninterface LevelConf {\n    x?: number;\n    y?: number;\n    actor?: (actor) => boolean;\n    actorsPerLevel?: number;\n    dungeonType?: string;\n    food?: () => boolean;\n    func?: (shell) => boolean;\n    gold?: () => boolean;\n    item?: (shell) => boolean;\n    itemsPerLevel?: number;\n    maxDanger: number;\n    maxValue: number;\n    sqrPerActor?: number;\n    sqrPerItem?: number;\n    nLevel?: number;\n    markersPreserved?: boolean;\n}\n\n/* Determines the x-y sizes for different types of levels. */\nconst levelSizes = {\n    tile: {\n        Small: {x: 40, y: 20},\n        Medium: {x: 60, y: 30},\n        Large: {x: 80, y: 40},\n        Huge: {x: 140, y: 60}\n    },\n    mountain: {\n        Small: {x: 40, y: 20},\n        Medium: {x: 60, y: 30},\n        Large: {x: 80, y: 40},\n        Huge: {x: 140, y: 60}\n    },\n    dungeon: {\n        Small: {x: RG.LEVEL_SMALL_X, y: RG.LEVEL_SMALL_Y},\n        Medium: {x: RG.LEVEL_MEDIUM_X, y: RG.LEVEL_MEDIUM_Y},\n        Large: {x: RG.LEVEL_LARGE_X, y: RG.LEVEL_LARGE_Y},\n        Huge: {x: RG.LEVEL_HUGE_X, y: RG.LEVEL_HUGE_Y}\n    },\n    city: {\n        Small: {x: 40, y: 20},\n        Medium: {x: 60, y: 30},\n        Large: {x: 80, y: 40},\n        Huge: {x: 140, y: 60}\n    }\n};\n\n/* Factory object for creating worlds and zones. Uses conf object which is\n * somewhat involved. For an example, see ../data/conf.world.js. This Factory\n * does not have any procedural generation. The configuration object can be\n * generated procedurally, and the factory will then use the configuration for\n * building the world. Separation of concerns, you know.\n */\nexport const FactoryWorld = function() {\n    this._verif = new Verify.Conf('FactoryWorld');\n    this.factZone = new FactoryZone();\n\n    // Creates all zones when the area is created if true. Setting it to true\n    // makes creation of game very slow, as the full game is built in one go\n    this.createAllZones = true;\n    this.worldElemByID = {}; // Stores world elements by ID\n\n    this.presetLevels = {};\n\n    this._conf = new ConfStack();\n\n    // Can be used to pass already created levels to different zones. For\n    // example, after restore game, no new levels should be created\n    this.id2level = {};\n    this.id2levelSet = false;\n    this.id2entity = {};\n\n    //----------------------------------------------------------------------\n    // FUNCTIONS\n    //----------------------------------------------------------------------\n    this.setRNG = function(rng: Random): void {\n        this.factZone.setRNG(rng);\n    };\n\n\n    this.setPresetLevels = function(levels) {\n        this.presetLevels = levels;\n        this.debug('PresetLevels were set.');\n    };\n\n    /* If id2level is set, factory does not construct any levels. It uses\n     * id2level as a lookup table instead. This is mainly used when restoring a\n     * saved game. */\n    this.setId2Level = function(id2level) {\n        if (Object.keys(id2level).length === 0) {\n            RG.warn('FactoryWorld', 'setId2Level',\n                'There are no levels/keys present in id2level map. Bug?');\n        }\n        this.id2level = id2level;\n        this.id2levelSet = true;\n        this.debug('Id2Level was set OK.');\n    };\n\n    /* Pushes the hier name and configuration on the stack. Config can be\n    * queried with getConf(). */\n    this.pushScope = function(conf) {\n        this._conf.pushScope(conf);\n    };\n\n    /* Removes given config and the name it contains from stacks. Reports an\n    * error if removed name does not match the name in conf. */\n    this.popScope = function(conf) {\n        this._conf.popScope(conf);\n    };\n\n    /* Initializes the global configuration such as level size. */\n    this.setGlobalConf = function(conf: any = {}) {\n        const levelSize = conf.levelSize || 'Medium';\n        const sqrPerActor = conf.sqrPerActor || RG.ACTOR_MEDIUM_SQR;\n        const globalConf: GlobalConf = {\n            levelSize,\n            dungeonX: levelSizes.dungeon[levelSize].x,\n            dungeonY: levelSizes.dungeon[levelSize].y,\n            sqrPerActor,\n            sqrPerItem: conf.sqrPerItem || RG.LOOT_MEDIUM_SQR,\n            set: true\n        };\n        this._conf.setGlobalConf(globalConf);\n        this.debug('globalConf set to ' + JSON.stringify(globalConf));\n    };\n\n    this.getGlobalConf = function() {\n        return this._conf.getGlobalConf();\n    };\n\n    /* Returns a config value. */\n    this.getConf = function(keys) {\n        return this._conf.getConf(keys);\n    };\n\n    this.setOverWorld = function(overworld) {\n        this.overworld = overworld;\n    };\n\n    /* Returns the full hierarchical name of the zone. */\n    this.getHierName = () => this._conf.getScope().join('.');\n\n    /* Creates a world using given configuration. */\n    this.createWorld = function(conf): World.WorldTop {\n        this._verif.verifyConf('createWorld', conf, ['name', 'nAreas']);\n        if (!this.getGlobalConf().set) {\n            this.setGlobalConf({});\n        }\n        if (conf.hasOwnProperty('createAllZones')) {\n            this.createAllZones = conf.createAllZones;\n            this.debug('createAllZones set to ' + this.createAllZones);\n        }\n        this.pushScope(conf);\n        const world = new World.WorldTop(conf.name);\n        world.setConf(conf);\n        for (let i = 0; i < conf.nAreas; i++) {\n            const areaConf = conf.area[i];\n            const area = this.createArea(areaConf);\n            if (areaConf.zonesCreated) { // Only during restore game\n                this.restoreCreatedZones(world, area, areaConf);\n            }\n            world.addArea(area);\n            this.addWorldID(areaConf, area);\n        }\n        this.popScope(conf);\n        this.addWorldID(conf, world);\n        return world;\n    };\n\n\n    /* Creates an area which can be added to a world. */\n    this.createArea = function(conf): World.Area {\n        this._verif.verifyConf('createArea', conf,\n            ['name', 'maxX', 'maxY']);\n        this.pushScope(conf);\n\n        const hierName = this.getHierName();\n\n        let areaLevels = null;\n        if (this.id2levelSet) {\n            areaLevels = this.getAreaLevels(conf);\n        }\n        else {\n            areaLevels = this.getPresetLevels(hierName, conf);\n            if (!areaLevels || areaLevels.length === 0) {\n                areaLevels = null;\n            }\n        }\n\n        const area = new World.Area(conf.name, conf.maxX, conf.maxY,\n            conf.cols, conf.rows, areaLevels);\n        area.setConf(conf);\n        area.setHierName(this.getHierName());\n\n        // When player enters a given area tile, create zones for that tile\n        if (this.createAllZones) {\n            this._createAllZones(area, conf);\n            area.markAllZonesCreated();\n        }\n        else {\n            this.debug('Skipping the zone creating due to createZones=false');\n        }\n        this.popScope(conf);\n        return area;\n    };\n\n    this.restoreCreatedZones = (world: WorldTop, area: Area, areaConf): void => {\n        Object.keys(areaConf.zonesCreated).forEach(keyXY => {\n            const [xStr, yStr] = keyXY.split(',');\n            const [x, y] = [parseInt(xStr, 10), parseInt(yStr, 10)];\n            if (areaConf.zonesCreated[keyXY]) {\n                this.debug(`\\tRestoring created zones for tile ${x},${y}`);\n                this.createZonesForTile(world, area, x, y);\n            }\n        });\n    };\n\n    /* Creates zones for given area tile x,y with located in area areaName. */\n    this.createZonesForTile = (world: WorldTop, area: Area, x, y): void => {\n        // Setup the scope & conf stacks\n        if (!area.tileHasZonesCreated(x, y)) {\n            this.debug(`Creating Area ${x},${y} zones (not created yet)`);\n            const worldConf = world.getConf();\n            this.pushScope(worldConf);\n            const areaConf = area.getConf();\n            this.pushScope(areaConf);\n\n            this.populateAreaLevel(area, x, y);\n\n            this._createAllZones(area, areaConf, x, y);\n            area.markTileZonesCreated(x, y);\n\n            // Create quests for this tile x,y\n            // Unsupported for now, need to change serialisation scheme\n            this.createQuests(world, area, x, y);\n\n            // Cleanup the scope & conf stacks\n            this.popScope(areaConf);\n            this.popScope(worldConf);\n        }\n        else {\n            this.debug(`Area ${x},${y} zones already created`);\n        }\n    };\n\n    /* Adds actors and items into AreaTile level. Config for world/area should\n     * already exists in the stack, so calling this.getConf() gets it. */\n    this.populateAreaLevel = (area: Area, x, y): void => {\n        const playerX = Math.floor(area.getSizeX() / 2);\n        const playerY = area.getSizeY() - 1;\n        const parser = ObjectShell.getParser();\n\n        const level = area.getTileXY(x, y).getLevel();\n\n        const xDiff = Math.abs(playerX - x);\n        const yDiff = playerY - y;\n\n        const itemsPerLevel = 7 + xDiff + 2 * yDiff;\n        const actorsPerLevel = (yDiff + 1) * 10 + 2 * xDiff + 10;\n\n        const fact = new FactoryBase();\n        fact.setParser(parser);\n\n        const maxValue = RG.getMaxValue(xDiff, yDiff);\n        const maxDanger = RG.getMaxDanger(xDiff, yDiff);\n\n        const levelConf: LevelConf = {\n            itemsPerLevel,\n            item: item => (\n                item.value <= maxValue\n                && item.type !== 'food'\n            ),\n            actor: actor => (\n                actor.danger <= maxDanger\n            ),\n            gold: () => false,\n            food: () => false,\n            maxValue,\n            actorsPerLevel, maxDanger\n        };\n        this.setAreaLevelConstraints(levelConf, x, y);\n\n        levelConf.func = levelConf.item;\n        fact.addNRandItems(level, parser, levelConf);\n        levelConf.func = levelConf.actor;\n        fact.addNRandActors(level, parser, levelConf);\n    };\n\n    this._createAllZones = (area, conf, tx = -1, ty = -1): void => {\n        this.debug(`_createAllZones ${tx}, ${ty}`);\n        if (!conf.tiles) {\n            // Is this ever entered? Can be removed?\n            this.createZonesFromArea(area, conf, tx, ty);\n        }\n        else if (tx < 0 || ty < 0) {\n            // RG.err('Factory', 'createAllZones',\n                // 'Cannot use -1 to create all tiles here');\n            this.createZonesFromArea(area, conf, tx, ty);\n        }\n        else {\n            const areaTileConf = conf.tiles[tx][ty];\n            this.createZonesFromTile(area, areaTileConf, tx, ty);\n        }\n    };\n\n    this.createZonesFromArea = (area: Area, conf, tx = -1, ty = -1): void => {\n        this.debug(`createZonesFromArea ${tx}, ${ty}`);\n        ZONE_TYPES.forEach(type => {\n            const typeLc = type.toLowerCase();\n            const createFunc = 'create' + type;\n            let nZones = 0;\n            if (Array.isArray(conf[typeLc])) {\n                nZones = conf[typeLc].length;\n            }\n            this.debug(`\\tnZones (${type}) is now ${nZones}`);\n\n            for (let i = 0; i < nZones; i++) {\n                const zoneConf = conf[typeLc][i];\n                const {x, y} = zoneConf;\n\n                // If tx,ty given, create only zones for tile tx,ty\n                // Otherwise, create zones for all tiles\n                if ((tx === -1 || tx === x) && (ty === -1 || ty === y)) {\n                    // calls createDungeon, createCity, createMountain...\n                    const zone = this[createFunc](zoneConf);\n                    zone.setTileXY(x, y);\n                    area.addZone(type, zone);\n                    this.addWorldID(zoneConf, zone);\n                    if (!this.id2levelSet) {\n                        this.createAreaZoneConnection(area, zone, zoneConf);\n                    }\n                }\n            }\n\n        });\n    };\n\n    /* Used when 'tiles' exists inside areaConf. Usually when restoring a saved\n     * game. */\n    this.createZonesFromTile = (area: Area, areaTileConf, tx, ty): void => {\n        ZONE_TYPES.forEach(type => {\n            const typeLc = type.toLowerCase();\n            let nZones = 0;\n            if (Array.isArray(areaTileConf[typeLc])) {\n                nZones = areaTileConf[typeLc].length;\n            }\n            this.debug(`\\t[${tx}][${ty}]: nZones (${type}) is now ${nZones}`);\n            for (let i = 0; i < nZones; i++) {\n                const zoneConf = areaTileConf[typeLc][i];\n                const createFunc = 'create' + type;\n                const {x, y} = zoneConf;\n\n                // If tx,ty given, create only zones for tile tx,ty\n                // Otherwise, create zones for all tiles\n                if ((tx === -1 || tx === x) && (ty === -1 || ty === y)) {\n                    const zone = this[createFunc](zoneConf);\n                    zone.setTileXY(x, y);\n                    area.addZone(type, zone);\n                    this.addWorldID(zoneConf, zone);\n                    if (!this.id2levelSet) {\n                        this.createAreaZoneConnection(area, zone, zoneConf);\n                    }\n                }\n            }\n\n        });\n    };\n\n    /* Used when creating area from existing levels. Uses id2level lookup table\n     * to construct 2-d array of levels.*/\n    this.getAreaLevels = (conf): Level[][] => {\n        const levels: Level[][] = [];\n        if (conf.tiles) {\n            conf.tiles.forEach((tileCol) => {\n                const levelCol: Level[] = [];\n                tileCol.forEach((tile) => {\n                    const level: Level = this.id2level[tile.level];\n                    if (level) {\n                        levelCol.push(level);\n                    }\n                    else {\n                        RG.err('FactoryWorld', 'getAreaLevels',\n                            `No level ID ${tile.level} in id2level`);\n                    }\n                });\n                levels.push(levelCol);\n            });\n        }\n        else {\n            RG.err('FactoryWorld', 'getAreaLevels',\n                'conf.tiles null/undefined, but id2levelSet true');\n\n        }\n        return levels;\n    };\n\n    this.createDungeon = function(conf): World.Dungeon {\n        this._verif.verifyConf('createDungeon', conf,\n            ['name', 'nBranches']);\n        this.pushScope(conf);\n\n        const dungeon = new World.Dungeon(conf.name);\n        dungeon.setHierName(this.getHierName());\n\n        if (conf.nBranches !== conf.branch.length) {\n            const len = conf.branch.length;\n            RG.err('Factory.World', 'createDungeon',\n                `Branch number mismatch [] = ${len}, n: ${conf.nBranches}`);\n        }\n\n        for (let i = 0; i < conf.nBranches; i++) {\n            const branchConf = conf.branch[i];\n            const branch = this.createBranch(branchConf);\n            dungeon.addBranch(branch);\n            this.addWorldID(branchConf, branch);\n        }\n\n        if (conf.entrance) {\n            dungeon.setEntrance(conf.entrance);\n        }\n\n        // Connect branches according to configuration\n        if (!this.id2levelSet) {\n            if (conf.nBranches > 1) {\n                if (conf.connectLevels) {\n                    conf.connectLevels.forEach(conn => {\n                        if (conn.length === 4) {\n                            // conn has len 4, spread it out\n                            dungeon.connectSubZones(...conn as World.SubZoneConn);\n                        }\n                        else {\n                            RG.err('Factory.World', 'createDungeon',\n                                'Each connection.length must be 4.');\n                        }\n                    });\n                }\n                else {\n                    RG.err('Factory.World', 'createDungeon',\n                        'nBranches > 1, but no conf.connectLevels.');\n                }\n            }\n        }\n\n        this.popScope(conf);\n        return dungeon;\n    };\n\n    /* Creates one dungeon branch and all levels inside it. */\n    this.createBranch = function(conf): World.Branch {\n        this._verif.verifyConf('createBranch', conf,\n            ['name', 'nLevels']);\n        this.pushScope(conf);\n\n        const branch = new World.Branch(conf.name);\n        const hierName = this.getHierName();\n        branch.setHierName(hierName);\n\n        const presetLevels = this.getPresetLevels(hierName, conf);\n\n        for (let i = 0; i < conf.nLevels; i++) {\n            const maxDanger = this.getConf('maxDanger');\n            const maxValue = this.getConf('maxValue');\n\n            const levelConf: LevelConf = {\n                x: this.getConf('dungeonX'),\n                y: this.getConf('dungeonY'),\n                sqrPerActor: this.getConf('sqrPerActor'),\n                sqrPerItem: this.getConf('sqrPerItem'),\n                maxValue: maxValue ? (maxValue + i * 20) : 20 * (i + 1),\n                maxDanger: maxDanger ? (maxDanger + i) : (2 + i),\n                nLevel: i\n            };\n\n            const dungeonType = this.getConf('dungeonType');\n            if (dungeonType) {\n                levelConf.dungeonType = dungeonType;\n            }\n\n            this.setLevelConstraints(levelConf);\n\n            // First try to find a preset level\n            let level = this.getFromPresetLevels(i, presetLevels);\n\n            // If preset not found, either restore or create a new one\n            if (!level) {\n                if (conf.levels) { // Restore level\n                    level = this.id2level[conf.levels[i]];\n                }\n                else {\n                    const [cols, rows] = [levelConf.x, levelConf.y];\n                    levelConf.markersPreserved = false;\n                    if ((/(crypt)/i).test(dungeonType)) {\n                        const cryptGen = new CryptGenerator();\n                        level = cryptGen.create(cols, rows, levelConf);\n                        this.factZone.addItemsAndActors(level, levelConf);\n                        this.factZone.addExtraDungeonFeatures(level, levelConf);\n                    }\n                    else if ((/cave/).test(dungeonType)) {\n                        const caveGen = new CaveGenerator();\n                        level = caveGen.create(cols, rows, levelConf);\n                        this.factZone.addItemsAndActors(level, levelConf);\n                        this.factZone.addExtraDungeonFeatures(level, levelConf);\n                    }\n                    else if (/(fort|castle)/.test(dungeonType)) {\n                        const castleGen = new CastleGenerator();\n                        level = castleGen.create(cols, rows, levelConf);\n                    }\n                    else {\n                        const dungGen = new DungeonGenerator();\n                        level = dungGen.create(cols, rows, levelConf);\n                    }\n                    // For creating 'fixed' items and actors\n                    this.addFixedFeatures(i, level, branch);\n                    const dungFeat = new DungeonFeatures('dungeon');\n                    if (i === (conf.nLevels - 1)) {\n                        dungFeat.addLastLevelFeatures(i, level, levelConf);\n                    }\n                }\n            }\n            else if (conf.createPresetLevels && conf.create) {\n                this.addFixedFeatures(i, level, branch);\n            }\n\n            branch.addLevel(level);\n        }\n\n        // Do connecting only if not restoring the branch\n        if (!this.id2levelSet) {\n            branch.connectLevels();\n            if (conf.hasOwnProperty('entranceLevel')) {\n                branch.addEntrance(conf.entranceLevel);\n            }\n        }\n        else if (conf.hasOwnProperty('entrance')) {\n            branch.setEntranceLocation(conf.entrance);\n        }\n\n        this.popScope(conf);\n        return branch;\n    };\n\n    /* Returns a level from presetLevels if any exist for the current level\n     * number. */\n    this.getFromPresetLevels = (i, presetLevels): Level =>  {\n        let foundLevel = null;\n        if (presetLevels.length > 0) {\n            const levelObj = presetLevels.find(lv => lv.nLevel === i);\n            if (levelObj) {\n                foundLevel = levelObj.level;\n            }\n        }\n        return foundLevel;\n    };\n\n    const _errorOnFunc = val => {\n        if (typeof val === 'function') {\n            RG.err('Factory', '_errorOnFunc',\n                `Function constraint not supported anymore: ${val.toString()}`);\n        }\n    };\n\n    /* Sets the randomization constraints for the level based on current\n     * configuration. */\n    this.setLevelConstraints = function(levelConf): void {\n        const constraint = this.getConf('constraint');\n        const constrFact = new Constraints();\n        if (constraint) {\n            const hierName = this.getHierName();\n            // this._verifyConstraintKeys(constraint);\n            if (constraint.actor) {\n                _errorOnFunc(constraint.actor);\n                levelConf.actor = constrFact.getConstraints(constraint.actor);\n                const str = JSON.stringify(constraint.actor);\n                this.debug(`Found actor constraint for ${hierName}: ${str}`);\n            }\n            if (constraint.item) {\n                _errorOnFunc(constraint.item);\n                levelConf.item = constrFact.getConstraints(constraint.item);\n                const str = JSON.stringify(constraint.item);\n                this.debug(`Found item constraint for ${hierName}: ${str}`);\n            }\n            if (constraint.food) {\n                _errorOnFunc(constraint.food);\n                levelConf.food = constrFact.getConstraints(constraint.food);\n                const str = JSON.stringify(constraint.food);\n                this.debug(`Found food constraint for ${hierName}: ${str}`);\n            }\n            if (constraint.gold) {\n                _errorOnFunc(constraint.gold);\n                levelConf.gold = constrFact.getConstraints(constraint.gold);\n                const str = JSON.stringify(constraint.gold);\n                this.debug(`Found gold constraint for ${hierName}: ${str}`);\n            }\n            if (constraint.shop) {\n                const shopFunc = [];\n                constraint.shop.forEach(con => {\n                    shopFunc.push(constrFact.getConstraints(con));\n                });\n                levelConf.shopFunc = shopFunc;\n                const str = JSON.stringify(constraint.shop);\n                this.debug(`Found shop constraint for ${hierName}: ${str}`);\n            }\n            if (constraint.disposition) {\n                const disp = constraint.disposition;\n                levelConf.disposition = constraint.disposition;\n            }\n            if (constraint.cellsAround) {\n                const {cellsAround} = constraint;\n                levelConf.cellsAround = cellsAround;\n            }\n        }\n\n        const groupType = this.getConf('groupType');\n        const cityType = this.getConf('cityType');\n        const quarterType = this.getConf('quarterType');\n        const alignment = this.getConf('alignment');\n        const wallType = this.getConf('wallType');\n        const floorType = this.getConf('floorType');\n        const isFriendly = this.getConf('friendly');\n        if (groupType) {levelConf.groupType = groupType;}\n        if (cityType) {levelConf.cityType = cityType;}\n        if (quarterType) {levelConf.cityType = quarterType;}\n        if (alignment) {levelConf.alignment = alignment;}\n        if (wallType) {levelConf.wallType = wallType;}\n        if (floorType) {levelConf.floorType = floorType;}\n        if (isFriendly) {levelConf.friendly = true;}\n    };\n\n    this._verifyConstraintKeys = function(constraint): void {\n        const keys = new Set(['actor', 'item', 'food', 'gold', 'shop',\n            'disposition'\n        ]);\n        Object.keys(constraint).forEach(key => {\n            if (!keys.has(key)) {\n                const json = JSON.stringify(constraint);\n                RG.err('Factory.World', '_verifyConstraintKeys',\n                    `Unsupported key ${key} in ${json}`);\n            }\n        });\n    };\n\n    this.setAreaLevelConstraints = function(levelConf, aX, aY): void {\n        const key = aX + ',' + aY;\n        const constraints = this.getConf('constraint');\n        if (constraints && constraints.hasOwnProperty(key)) {\n            const conf = {\n                name: 'AreaLevel[' + key + ']',\n                constraint: constraints[key]\n            };\n            this.pushScope(conf);\n            this.setLevelConstraints(levelConf);\n            this.popScope(conf);\n        }\n    };\n\n    /* Adds fixed features such as stairs, actors and items into the level. */\n    this.addFixedFeatures = function(nLevel, level, zone): void {\n        const create = this.getConf('create');\n\n        // Actor creation\n        if (create && create.actor) {\n            const createActors = create.actor;\n            createActors.forEach(createActor => {\n                if (createActor.nLevel === nLevel) {\n                    const actorName = createActor.name;\n                    if (createActor.hasOwnProperty('target') &&\n                        zone.getName() === createActor.target) {\n                        this.factZone.addActorToLevel(actorName, level);\n                    }\n                    else {\n                        this.factZone.addActorToLevel(actorName, level);\n                    }\n                }\n            });\n        }\n\n        // Stairs creation\n        if (create && create.stairs) {\n            const createStairs = create.stairs;\n            createStairs.forEach(sConf => {\n                if (sConf.nLevel === nLevel) {\n                    const {x, y, isDown} = sConf;\n                    const name = isDown ? 'stairsDown' : 'stairsUp';\n                    const stairs = new Stairs(name, level);\n                    level.addStairs(stairs, x, y);\n                }\n            });\n        }\n    };\n\n    /* Returns preset levels (if any) for the current zone. */\n    this.getPresetLevels = function(hierName, subZoneConf) {\n\n        // First check the configuration\n        const presetLevels = this.getConf('presetLevels');\n        if (presetLevels) {\n            const names = Object.keys(presetLevels);\n            const keyFound = names.find(item => {\n                return new RegExp(item + '$').test(hierName);\n            });\n            if (keyFound) {\n                return presetLevels[keyFound];\n            }\n        }\n\n        // Then check the global preset levels\n        const keys = Object.keys(this.presetLevels);\n        const foundKey = keys.find(item => new RegExp(item + '$').test(hierName));\n        if (foundKey) {\n            return this.presetLevels[foundKey];\n        }\n\n        // Finally, check subZoneConf.createPresetLevels: ...\n        if (subZoneConf && subZoneConf.createPresetLevels) {\n            const {createPresetLevels} = subZoneConf;\n            const levelFact = new LevelFactory(this);\n            const levels = levelFact.create(createPresetLevels.new,\n                createPresetLevels.args);\n            if (!levels) {\n                let msg = 'Found createPresetLevels but no levels created';\n                msg += ' conf: ' + JSON.stringify(subZoneConf);\n                RG.err('Factory', 'getPresetLevels', msg);\n            }\n            return levels;\n        }\n\n        return [];\n    };\n\n    this.createMountain = function(conf: IF.MountainConf): World.Mountain {\n        this._verif.verifyConf('createMountain', conf,\n            ['name', 'nFaces', 'face']);\n        this.pushScope(conf);\n\n        const mountain = new World.Mountain(conf.name);\n        mountain.setHierName(this.getHierName());\n\n        if (conf.nFaces !== conf.face.length) {\n            const len = conf.face.length;\n            RG.err('Factory.World', 'createMountain',\n                `Face number mismatch [] = ${len}, n: ${conf.nFaces}`);\n        }\n\n        // Create the faces of the mountain\n        for (let i = 0; i < conf.nFaces; i++) {\n            const faceConf = conf.face[i];\n            const mountainFace = this.createMountainFace(faceConf);\n            mountain.addSubZone(mountainFace);\n            this.addWorldID(faceConf, mountainFace);\n        }\n\n        // Create the mountain summits\n        for (let i = 0; i < conf.nSummits; i++) {\n            const summitConf = conf.summit[i];\n            const mountainSummit = this.createSummit(summitConf);\n            mountain.addSubZone(mountainSummit);\n            this.addWorldID(summitConf, mountainSummit);\n        }\n\n        if (!this.id2levelSet) {\n            if (conf.nFaces > 1 || conf.nFaces === 1 && conf.nSummits > 0) {\n                if (conf.connectLevels && conf.connectLevels.length > 0) {\n                    conf.connectLevels.forEach(conn => {\n                        if (conn.length === 4) {\n                            // conn has len 4, spread it out\n                            mountain.connectSubZones(...conn as World.SubZoneConn);\n                        }\n                        else {\n                            RG.err('Factory.World', 'createMountain',\n                                'Each connection.length must be 4.');\n                        }\n                    });\n\n                    // TODO verify that levels are passable\n                }\n                else {\n                    RG.err('Factory.World', 'createMountain',\n                        'nFaces > 1, but no conf.connectLevels.');\n                }\n            }\n        }\n\n        this.popScope(conf);\n        return mountain;\n    };\n\n    this.createMountainFace = function(conf: IF.FaceConf): World.MountainFace {\n        if (this.id2levelSet) {\n            this._verif.verifyConf('createMountainFace', conf,\n                ['name', 'nLevels']);\n        }\n        else {\n            this._verif.verifyConf('createMountainFace',\n                conf, ['name', 'nLevels', 'x', 'y']);\n        }\n\n        const faceName = conf.name;\n        this.pushScope(conf);\n        const face = new World.MountainFace(faceName);\n        const mLevelConf = { x: conf.x, y: conf.y};\n\n        this.setLevelConstraints(mLevelConf);\n\n        for (let i = 0; i < conf.nLevels; i++) {\n            let level = null;\n            if (!this.id2levelSet) {\n                level = this.factZone.createMountainLevel(mLevelConf);\n            }\n            else {\n                const id = conf.levels[i];\n                level = this.id2level[id];\n            }\n            face.addLevel(level);\n        }\n\n        this._addEntranceToSubZone(face, conf);\n        this.popScope(conf);\n        return face;\n    };\n\n    /* Creates a subzone for mountain summit. Creates the levels contained in\n     * that subzone. */\n    this.createSummit = function(conf: IF.SummitConf): World.MountainSummit {\n        this._verif.verifyConf('createSummit', conf, ['name', 'nLevels']);\n        this.pushScope(conf);\n        const summit = new World.MountainSummit(conf.name);\n\n        const summitLevelConf = Object.assign({}, conf);\n        this.setLevelConstraints(summitLevelConf);\n        this.addMaxDangerIfMissing(summitLevelConf);\n\n        for (let i = 0; i < conf.nLevels; i++) {\n            let level = null;\n            if (!this.id2levelSet) {\n                level = this.factZone.createSummitLevel(summitLevelConf);\n                const dungFeat = new DungeonFeatures('mountain');\n                if (i === (conf.nLevels - 1)) {\n                    dungFeat.addLastLevelFeatures(i, level, summitLevelConf);\n                }\n            }\n            else {\n                const id = conf.levels[i];\n                level = this.id2level[id];\n            }\n            summit.addLevel(level);\n        }\n\n        this._addEntranceToSubZone(summit, conf);\n        this.popScope(conf);\n        return summit;\n    };\n\n    this.addMaxDangerIfMissing = function(conf): void {\n        if (!Number.isInteger(conf.maxDanger)) {\n            conf.maxDanger = this.getConf('maxDanger');\n        }\n        if (!Number.isInteger(conf.maxValue)) {\n            const maxValue = this.getConf('maxValue');\n            if (maxValue) {\n                conf.maxValue = maxValue;\n            }\n        }\n    };\n\n    this._addEntranceToSubZone = function(subZone: ConcreteSubZone, conf): void {\n        if (conf.hasOwnProperty('entranceLevel')) {\n            subZone.addEntrance(conf.entranceLevel);\n        }\n        else if (conf.hasOwnProperty('entrance')) {\n            subZone.setEntranceLocation(conf.entrance);\n        }\n    };\n\n    /* Creates a City and all its sub-zones. */\n    this.createCity = function(conf: IF.CityConf): World.City {\n        this._verif.verifyConf('createCity',\n            conf, ['name', 'nQuarters']);\n        this.pushScope(conf);\n\n        const city = new World.City(conf.name);\n        city.setHierName(this.getHierName());\n\n        if (conf.nQuarters !== conf.quarter.length) {\n            const len = conf.quarter.length;\n            RG.err('Factory.World', 'createCity',\n                `Quarter number mismatch [] = ${len}, n: ${conf.nQuarters}`);\n        }\n\n        for (let i = 0; i < conf.nQuarters; i++) {\n            const qConf = conf.quarter[i];\n            const quarter = this.createCityQuarter(qConf);\n            city.addSubZone(quarter);\n            this.addWorldID(qConf, quarter);\n        }\n\n        // Connect city quarters according to configuration\n        if (!this.id2levelSet) {\n            if (conf.nQuarters > 1) {\n                if (conf.connectLevels) {\n                    conf.connectLevels.forEach(conn => {\n                        if (conn.length === 4) {\n                            // conn has len 4, spread it out\n                            // city.connectSubZones(...conn);\n                            city.abutQuarters(...conn as World.SubZoneConn);\n                        }\n                        else {\n                            RG.err('Factory.World', 'createCity',\n                                'Each connection.length must be 4.');\n                        }\n                    });\n                }\n                else {\n                    let msg = 'nQuarters > 1, but no conf.connectLevels.';\n                    msg += `cityConf: ${JSON.stringify(conf)}`;\n                    RG.err('Factory.World', 'createCity', msg);\n                }\n            }\n        }\n\n        this.popScope(conf);\n        return city;\n    };\n\n    /* Createa CityQuarter which can be added to a city. */\n    this.createCityQuarter = function(conf: IF.QuarterConf): World.CityQuarter {\n        this._verif.verifyConf('createCityQuarter',\n            conf, ['name', 'nLevels']);\n        this.pushScope(conf);\n\n        const quarter = new World.CityQuarter(conf.name);\n        const hierName = this.getHierName();\n        quarter.setHierName(hierName);\n\n        const presetLevels = this.getPresetLevels(hierName, conf);\n\n        const cityLevelConf = {\n            x: conf.x || 80, y: conf.y || 40,\n            nShops: conf.nShops || 1,\n            shopFunc: conf.shop ||\n                [item => (item.value <= (50 + 50 * conf.nLevels))]\n        };\n        if (conf.nShops === 0) {cityLevelConf.nShops = 0;}\n\n        // This bunch of data must be passed in conf because featFact does not\n        // have access to it via getConf\n        this.setLevelConstraints(cityLevelConf);\n\n        for (let i = 0; i < conf.nLevels; i++) {\n            let level = this.getFromPresetLevels(i, presetLevels);\n\n            if (!level) {\n\n                if (!this.id2levelSet) {\n                    level = this.factZone.createCityLevel(i, cityLevelConf);\n                    this.addFixedFeatures(i, level, quarter);\n                }\n                else {\n                    const id = conf.levels[i];\n                    level = this.id2level[id];\n                }\n            }\n            else if (level.stub) {\n                const levelFact = new LevelFactory(this);\n                level = levelFact.create(level.new, level.args);\n                if (!level) {\n                    RG.err('Factory', 'createCityQuarter',\n                        'Stub found but cannot create level');\n                }\n                if (debug.enabled) {\n                    this.debug('Creating level from stub ' +\n                        JSON.stringify(level.stub));\n                }\n            }\n            else if (conf.createPresetLevels && conf.create) {\n                this.addFixedFeatures(i, level, quarter);\n            }\n            else {\n                this.debug(`cityQuarter ${hierName} ${i} from preset level`);\n            }\n\n            // Need to add the shops to the quarter\n            if (!this.id2levelSet) {\n                if (level.hasExtras()) {\n                    const extras = level.getExtras();\n                    if (Array.isArray(extras.shops)) {\n                        extras.shops.forEach(shop => {\n                            quarter.addShop(shop);\n                        });\n                    }\n                }\n            }\n            quarter.addLevel(level);\n        }\n\n        if (!this.id2levelSet) {\n            quarter.connectLevels();\n        }\n\n        this._addEntranceToSubZone(quarter, conf);\n\n        // Only during restore game\n        if (conf.hasOwnProperty('shops')) {\n            conf.shops.forEach(shop => {\n                const shopObj = new World.WorldShop();\n                shopObj.setLevel(this.id2level[shop.level]);\n                shopObj.setCoord(shop.coord);\n                shopObj._isAbandoned = shop.isAbandoned;\n                if (!shop.isAbandoned) {\n                    const keeper = this.id2entity[shop.shopkeeper];\n                    if (keeper) {\n                        shopObj.setShopkeeper(keeper);\n                    }\n                    else {\n                        const id = shop.shopkeeper;\n                        const ids = Object.keys(this.id2entity);\n                        const str = `Possible IDs: ${ids}`;\n                        RG.err('Factory', 'createCityQuarter',\n                            `Cannot find shopkeeper ID ${id}. ${str}`);\n                    }\n                }\n                quarter.addShop(shopObj);\n            });\n        }\n\n        this.popScope(conf);\n        return quarter;\n    };\n\n    this.createBattleZone = conf => {\n        this.pushScope(conf);\n        const battleZone = new World.BattleZone(conf.name);\n        if (!this.id2levelSet) {\n            RG.err('Factory', 'createBattleZone',\n                'Can create BattleZones only during restore');\n        }\n        for (let i = 0; i < conf.nLevels; i++) {\n            const id = conf.levels[i];\n            const level = this.id2level[id];\n            if (level) {\n                battleZone.addLevel(level);\n            }\n            else {\n                RG.err('Factory', 'createBattleZone',\n                    `Cannot find level ID ${id} for BattleZone`);\n            }\n        }\n        this.popScope(conf);\n        return battleZone;\n    };\n\n\n    /* Returns the name for connection elem based on zoneType and\n     * zone configuration. */\n    this.getConnectionName = function(conf, zoneType, stairs) {\n        let name = '';\n        if (zoneType === 'city') {\n            name = 'town';\n            if (conf.groupType) {\n                if (conf.groupType === 'fort') {\n                    name = 'cityfort';\n                }\n            }\n        }\n        else if (zoneType === 'mountain') {name = 'mountain';}\n        else if (Array.isArray(stairs)) {\n            const isDown = !stairs[0].isDown();\n            name = isDown ? 'stairsDown' : 'stairsUp';\n        }\n        else {\n            const isDown = !stairs.isDown();\n            name = isDown ? 'stairsDown' : 'stairsUp';\n        }\n        return name;\n    };\n\n    /* Returns x,y coord for stairs placed on the tile level. */\n    this.getTileStairsXY = (level, conf) => {\n        let [tsX, tsY] = [conf.levelX, conf.levelY];\n        const isNull = RG.isNullOrUndef([tsX, tsY]);\n        if (isNull) {\n            const freeAreaCell = level.getEmptyRandCell();\n            tsX = freeAreaCell.getX();\n            tsY = freeAreaCell.getY();\n        }\n\n        let cell = level.getMap().getCell(tsX, tsY);\n        let watchdog = RG.WATCHDOG;\n        while (cell.hasConnection()) {\n            const freeAreaCell = level.getEmptyRandCell();\n            tsX = freeAreaCell.getX();\n            tsY = freeAreaCell.getY();\n            cell = level.getMap().getCell(tsX, tsY);\n            if (--watchdog <= 0) {break;}\n        }\n\n        return [tsX, tsY];\n    };\n\n    this.getEntryStairs = (entryLevel, entryStairs, zoneStairs) => {\n        // Connection OK, remove the stairs, otherwise use the\n        // existing entrance\n        if (zoneStairs.length > 0) {\n            const sX = entryStairs.getX();\n            const sY = entryStairs.getY();\n\n            // Stairs could've been removed by zone edge connection\n            if (entryLevel.getElements().indexOf(entryStairs) >= 0) {\n                if (!entryLevel.removeElement(entryStairs, sX, sY)) {\n                    RG.err('Factory.World', 'getEntryStairs',\n                        'Cannot remove entryStairs');\n                }\n            }\n            return zoneStairs;\n        }\n        return entryStairs;\n    };\n\n    /* Processes each 'connectToAreaXY' object. Requires current zone and tile\n     * level we are connecting to. Connection type depends on the type of zone.\n     */\n    this.processConnObject = (conn, zone, tileLevel) => {\n        const nLevel = conn.nLevel;\n        const x = conn.levelX;\n        const y = conn.levelY;\n        const name = conn.name;\n        this.debug(`Processing connection obj ${name}: ${x},${y}`);\n\n        const zoneLevel = zone.findLevel(name, nLevel);\n        if (zoneLevel) {\n\n            // Create new stairs for zone, unless connect obj has stairs\n            // property.\n            let zoneStairs = conn.stairs || null;\n\n            // zoneStairs is either Element.Stairs or object telling\n            // where stairs are found\n            if (zoneStairs && !RG.isNullOrUndef([zoneStairs.getStairs])) {\n                const stairsIndex = zoneStairs.getStairs;\n                zoneStairs = zoneLevel.getStairs()[stairsIndex];\n                if (!zoneStairs) {\n                    let msg = `zoneStairs null, index: ${stairsIndex}`;\n                    msg += `\\tPoss: ${JSON.stringify(zoneLevel.getStairs())}`;\n                    RG.err('Factory.World', 'processConnObject', msg);\n                }\n                else {\n                    this.debug('conn found via getStairs connObject');\n                }\n            }\n\n            if (!zoneStairs) {\n                zoneStairs = this.createNewZoneConnects(zone, zoneLevel);\n            }\n            else if (typeof zoneStairs.getSrcLevel !== 'function') {\n                const json = JSON.stringify(zoneStairs);\n                RG.err('Factory.World', 'processConnObject',\n                    `zoneStairs not a proper stairs object ${json}`);\n            }\n\n            // Create stairs for tileLevel and connect them to the zone\n            // stairs\n            let connName = 'stairsDown'; // Default for dungeon\n            if (zone.getType() === 'city') {connName = 'town';}\n            else if (zone.getType() === 'mountain') {connName = 'mountain';}\n            const tileStairs = new Stairs(connName, tileLevel, zoneLevel);\n            tileLevel.addStairs(tileStairs, x, y);\n\n            // zoneStairs can be either a single connection or an array of\n            // connections (for example for a city)\n            try {\n                tileStairs.connect(zoneStairs);\n            }\n            catch (e) {\n                console.error(e);\n                const jsonStr = JSON.stringify(zoneLevel, null, 1);\n                let msg = `zoneLevel: ${jsonStr}`;\n                msg += `\\n\\tzoneStairs: ${JSON.stringify(zoneStairs)}`;\n                RG.err('Factory.World', 'createAreaZoneConnection',\n                    msg);\n            }\n        }\n        else {\n            let msg = `connectToAreaXY: ${JSON.stringify(conn)}`;\n            msg += `zone: ${JSON.stringify(zone)}`;\n            RG.err('Factory.World', 'createAreaZoneConnection',\n                `No level found. ${msg}`);\n        }\n    };\n\n    /* Creates the actual connection objects such as stairs or passages, and\n     * adds them into the zone level. Returns the created objects for connecting\n     * them into the tile level. */\n    this.createNewZoneConnects = (zone, zoneLevel): Stairs | Stairs[] => {\n        let zoneStairs = null;\n        if (zone.getType() === 'dungeon') {\n            zoneStairs = this.createDungeonZoneConnect(zone, zoneLevel);\n        }\n        else if (zone.getType() === 'city') {\n            zoneStairs = this.createCityZoneConnect(zone, zoneLevel);\n        }\n        else if (zone.getType() === 'mountain') {\n            this.debug('Creating new mountain south connection');\n            zoneStairs = World.addExitsToEdge(zoneLevel,\n                'passage', 'south', true);\n        }\n        return zoneStairs;\n    };\n\n    /* Creates the connection for dungeon zone and returns the connection. */\n    this.createDungeonZoneConnect = (zone, zoneLevel): Stairs | Stairs[] => {\n        this.debug('Creating dungeon connection');\n        let sX = 0;\n        let sY = 0;\n        if (zoneLevel.hasExtras()) {\n            const extras = zoneLevel.getExtras();\n            if (extras.startPoint) {\n                [sX, sY] = extras.startPoint;\n            }\n            else if (extras.connectEdges) {\n                return this.createCityZoneConnect(zone, zoneLevel);\n            }\n        }\n        else {\n            const freeCell = zoneLevel.getFreeRandCell();\n            [sX, sY] = freeCell.getXY();\n        }\n        const zoneStairs = new Stairs('stairsUp', zoneLevel);\n        zoneLevel.addStairs(zoneStairs, sX, sY);\n        return zoneStairs;\n    };\n\n    this.createCityZoneConnect = (zone, zoneLevel): Stairs[] => {\n        let zoneStairs = null;\n        this.debug('Creating new city edge connection');\n        let allEdgeExits = [];\n        RG.CARDINAL_DIR.forEach(dir => {\n            if (!World.edgeHasConnections(zoneLevel, dir)) {\n                const exits = World.addExitsToEdge(zoneLevel,\n                    'passage', dir);\n                if (exits.length > 0) {\n                    allEdgeExits = allEdgeExits.concat(exits);\n                }\n            }\n        });\n        zoneStairs = allEdgeExits;\n\n        // Connection failed, resort to single point connection\n        if (zoneStairs.length === 0) {\n            // TODO this one is shaky\n            const freeCell = zoneLevel.getFreeRandCell();\n            const zoneX = freeCell.getX();\n            const zoneY = freeCell.getY();\n            zoneStairs = new Stairs('stairsUp', zoneLevel);\n            zoneLevel.addStairs(zoneStairs, zoneX, zoneY);\n            zoneStairs = [zoneStairs];\n\n            this.debug('City edge connection failed. Added stairs');\n        }\n        return zoneStairs;\n    };\n\n    this.debugPrintCityConns = (zoneType, entryLevel) => {\n        if (debug.enabled && zoneType === 'city') {\n            const conns = entryLevel.getConnections();\n            let jsonStr = JSON.stringify(conns[0], null, 1);\n            if (conns.length > 1) {\n                jsonStr += JSON.stringify(conns[conns.length - 1], null, 1);\n            }\n            this.debug(`First/last conn: ${jsonStr}`);\n            this.debug(`conn length after: ${conns.length}`);\n        }\n    };\n\n    /* Adds a world ID to the given element. */\n    this.addWorldID = function(conf, worldElem) {\n      if (!RG.isNullOrUndef([conf.id])) {\n          worldElem.setID(conf.id);\n      }\n      this.worldElemByID[worldElem.getID()] = worldElem;\n    };\n\n    /* Creates quests for AreaTile[x][y] of the given area. */\n    this.createQuests = function(world, area, x, y) {\n        const questPopul = new QuestPopulate();\n        questPopul.createQuests(world, area, x, y);\n    };\n\n}; // FactoryWorld\n\n\n/* Creates a connection between an area and a zone such as city, mountain\n * or dungeon. Unless configured, connects the zone entrance to a random\n * location in the area.\n * @param {World.Area} area - Area where zone is located in\n * @param {World.Zone} zone - Zone which is connected to area\n * @param {object} conf - Config for the zone\n * @return {void}\n * */\nFactoryWorld.prototype.createAreaZoneConnection = function(\n    area, zone, conf: IF.ZoneConf\n): void {\n    this._verif.verifyConf('createAreaZoneConnection', conf, ['x', 'y']);\n    this.debug('Creating area-zone connections');\n\n    const {x, y} = conf;\n    const tile = area.getTileXY(x, y);\n    const tileLevel = tile.getLevel();\n    debugPrintConfAndTile(conf, tileLevel, ' CALL 1');\n\n    if (typeof zone.getEntrances !== 'function') {\n        // No entrance for zone, error out\n        RG.err('Factory.World', 'createAreaZoneConnection',\n            'No getEntrances method for zone.');\n    }\n\n    const entrances = zone.getEntrances();\n    if (entrances.length > 0) {\n        let entryStairs: Stairs = entrances[0];\n        const entryLevel: Level = entryStairs.getSrcLevel();\n        const zoneType: string = zone.getType();\n\n        this.debug('Connecting area-zone by entrance');\n\n        let conns = null;\n        if (zoneType.match(/(city|mountain)/) || conf.connectEdges) {\n\n            if (debug.enabled) {\n                conns = entryLevel.getConnections();\n                this.debug(`conn length before: ${conns.length}`);\n            }\n\n            const zoneStairs: Stairs | Stairs[] = this.createNewZoneConnects(zone,\n                entryLevel);\n            entryStairs = this.getEntryStairs(entryLevel, entryStairs,\n                zoneStairs);\n        }\n\n        const connName = this.getConnectionName(conf, zoneType, entryStairs);\n\n        debugPrintConfAndTile(conf, tileLevel, ' CALL 2');\n        const tileStairs = new Stairs(connName, tileLevel, entryLevel);\n        const [tileSX, tileSY] = this.getTileStairsXY(tileLevel, conf);\n        try {\n            tileLevel.addStairs(tileStairs, tileSX, tileSY);\n            tileStairs.connect(entryStairs);\n        }\n        catch (e) {\n            RG.log('Given conf: ' + JSON.stringify(conf));\n            throw e;\n        }\n\n        this.debugPrintCityConns(zoneType, entryLevel);\n    }\n    else if (!conf.hasOwnProperty('connectToAreaXY')) {\n        const msg = `No entrances in ${zone.getHierName()}.`;\n        RG.err('Factory.World', 'createAreaZoneConnection',\n            `${msg}. Cannot connect to tile.`);\n    }\n\n    // Make extra connections between the area and zone. This is useful\n    // if city/dungeon needs to have 2 or more entrances in different places\n    if (conf.hasOwnProperty('connectToAreaXY')) {\n        const connectionsXY = conf.connectToAreaXY;\n        connectionsXY.forEach(conn => {\n            this.processConnObject(conn, zone, tileLevel);\n        });\n    }\n\n};\n\n/* Used for printing debug messages only. Can be enabled with\n * DEBUG= env var. */\nFactoryWorld.prototype.debug = function(msg) {\n    if (debug.enabled) {\n        let scope = this.getHierName();\n        if (!scope) {scope = 'EMPTY';}\n        debug(`|${scope}| ${msg}`);\n    }\n};\n\nfunction debugPrintConfAndTile(conf, tileLevel, tag) {\n    if (conf.name === 'Iron hills') {\n        RG.diag(tag + ' Creating iron hills connection now');\n        const tConns = tileLevel.getConnections();\n        const mConns = tConns.filter(c => c.getName() === 'mountain');\n        RG.diag('\\t## Ex. conns: ' + JSON.stringify(mConns));\n        if (mConns.length > 0) {\n            const target = mConns[0].getTargetLevel();\n            RG.diag('\\t## Parent: ' + target.getParent().getName());\n        }\n    }\n}\n","\nimport RG from '../rg';\nimport {ObjectShell} from '../objectshellparser';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport * as Component from '../component';\n\nconst parser = ObjectShell.getParser();\n\ntype Entity = import('../entity').Entity;\ntype HandleFunc = (ent, qEvent, questComp) => void;\n\nexport class SystemQuest extends SystemBase {\n\n    /* Helper function to add QuestTargetEvent for entity. */\n    public static addQuestEvent(ent, qTarget, eventType, args = {}) {\n        const qEvent = new Component.QuestTargetEvent();\n        qEvent.setArgs(args);\n        qEvent.setEventType(eventType);\n        qEvent.setTargetComp(qTarget);\n        ent.add(qEvent);\n    }\n\n    private _eventTable: {[key: string]: HandleFunc};\n\n    constructor(compTypes, pool?: EventPool) {\n        super(RG.SYS.QUEST, compTypes, pool);\n        this.compTypesAny = true; // Triggered on at least one component\n\n        this._eventTable = {\n            battle: this.onBattleEvent = this.onBattleEvent.bind(this),\n            damage: this.onDamageEvent = this.onDamageEvent.bind(this),\n            escort: this.onEscortEvent = this.onEscortEvent.bind(this),\n            get: this.onGetEvent = this.onGetEvent.bind(this),\n            give: this.onGiveEvent = this.onGiveEvent.bind(this),\n            goto: this.onGotoEvent = this.onGotoEvent.bind(this),\n            kill: this.onKillEvent = this.onKillEvent.bind(this),\n            listen: this.onListenEvent = this.onListenEvent.bind(this),\n            read: this.onReadEvent = this.onReadEvent.bind(this),\n            report: this.onReportEvent = this.onReportEvent.bind(this)\n        };\n    }\n\n    public updateEntity(ent: Entity): void {\n        if (ent.has('GiveQuest')) {\n            const giveComp = ent.get('GiveQuest');\n            this.processGiveQuestComp(ent, giveComp);\n            ent.remove(giveComp);\n        }\n        if (ent.has('QuestCompleted')) {\n            const complComp = ent.get('QuestCompleted');\n            this.processComplComp(ent, complComp);\n            ent.remove(complComp);\n        }\n        if (ent.has('QuestTargetEvent')) {\n            const qEvent = ent.get('QuestTargetEvent');\n            this.processQuestEvent(ent, qEvent);\n            ent.remove(qEvent);\n        }\n    }\n\n    /* When a quest is given to an actor, this function processes it. */\n    public processGiveQuestComp(ent, comp): void {\n        const giver = comp.getGiver();\n        const giverComp = giver.get('QuestGiver');\n        if (giverComp.getHasGivenQuest()) {\n            return;\n        }\n        const questTargets = giverComp.getQuestTargets();\n        const questComp = new Component.Quest();\n        questComp.setQuestID(giverComp.getQuestID());\n\n        if (questTargets.length === 0) {\n            RG.err('SystemQuest', 'processGiveQuestComp',\n                `No keys in questData, giver: ${giver.getName}`);\n        }\n\n        questTargets.forEach(target => {\n            const questTarget = Object.assign({}, target);\n            questTarget.isCompleted = false;\n            questComp.addTarget(questTarget);\n        });\n\n        giverComp.giveQuest(ent);\n        questComp.setGiver({name: giver.getName(), id: giver.getID()});\n        questComp.setDescr(giverComp.getDescr());\n        ent.add(questComp);\n        this.checkQuestMsgEmits(ent, questComp);\n    }\n\n    /* Checks if any messages should be shown to player after a quest is\n     * accepted. */\n    public checkQuestMsgEmits(ent, questComp) {\n        const entLevel = ent.getLevel();\n        const firstLevel = questComp.first('location');\n        const giverName = questComp.getGiver().name;\n        let msg = `You accept the quest from ${giverName}.`;\n        if (firstLevel) {\n            if (entLevel.getID() === firstLevel.id) {\n                msg += ' You are already in the first quest location';\n                this.setTargetCompleted(firstLevel, questComp);\n            }\n            else {\n                msg += ' You should try to get to the first quest location';\n            }\n        }\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    /* Processes QuestCompleted event and grants quest rewards. */\n    public processComplComp(ent, comp) {\n        const giver = comp.getGiver();\n        const questID = giver.get('QuestGiver').getQuestID();\n        const quests = ent.getList('Quest');\n        // Need to find matching quest first\n        const givenQuest = quests.find(quest => quest.getQuestID() === questID);\n\n        if (givenQuest.isCompleted()) {\n            const giverComp = giver.get('QuestGiver');\n            // const questData = giverComp.getQuestData();\n            const numSteps = giverComp.getQuestTargets().length;\n            // Give exp reward\n            const expPoints = giverComp.getDanger() * numSteps;\n            const expComp = new Component.ExpPoints(expPoints);\n            ent.add(expComp);\n\n            // Give reward, items + any other info\n            this.giveQuestReward(ent, giverComp);\n        }\n        else {\n            RG.gameDanger({cell: ent.getCell(), msg: 'Quest is not completed!'});\n        }\n\n    }\n\n    public giveQuestReward(ent, comp): void {\n        if (comp.hasReward()) {\n            if (!comp.getHasGivenReward()) {\n                comp.setHasGivenReward(true);\n                const reward = comp.getReward();\n                // Right now, only items are supported, later add support for\n                // info etc\n                if (reward.type === 'item') {\n                    const rewardName = reward.name;\n\n                    const item = parser.createItem(rewardName);\n                    if (item) {\n                        let msg = `${ent.getName()} receives ${item.getName()} as`;\n                        msg += ' a reward for completing the quest';\n                        questMsg({cell: ent.getCell(), msg});\n                        ent.getInvEq().getInventory().addItem(item);\n                    }\n                }\n            }\n            else {\n                const msg = 'Reward has already been given!';\n                questMsg({cell: ent.getCell(), msg});\n            }\n        }\n    }\n\n    public processQuestEvent(ent, qEvent) {\n        const targetType = qEvent.getEventType();\n        const quests = ent.getList('Quest');\n\n        // Need to check each Quest on actor to find which one matches\n        // the current event\n        if (typeof this._eventTable[targetType] === 'function') {\n            quests.forEach(questComp => {\n                if (isEventValidForThisQuest(qEvent, questComp)) {\n                    this._eventTable[targetType](ent, qEvent, questComp);\n                }\n            });\n        }\n        else {\n            const keys = Object.keys(this._eventTable);\n            RG.err('SystemQuest', 'processQuestEvent',\n                `No function for ${targetType} in eventTable. Found: ${keys}`);\n        }\n    }\n\n    /* Checks a battle quest event after battle is over. */\n    public onBattleEvent(ent, qEvent, questComp) {\n        const args = qEvent.getArgs();\n        const qTarget = qEvent.getTargetComp();\n        const level = qTarget.getTarget();\n        const targetType = qTarget.getTargetType();\n        const targetObj = getMatchObj(questComp, level);\n\n        if (targetType === 'winbattle') {\n            if (args.isWon) {\n                this.setTargetCompleted(targetObj, questComp);\n                let msg = `${ent.getName()} has won a battle as `;\n                msg += 'as a quest objective!';\n                questMsg({cell: ent.getCell(), msg});\n            }\n        }\n        else if (targetType === 'finishbattle') {\n            // Don't care if battle was won or lost\n            this.setTargetCompleted(targetObj, questComp);\n            let msg = `${ent.getName()} has finished a battle as `;\n            msg += 'as a quest objective!';\n            questMsg({cell: ent.getCell(), msg});\n        }\n    }\n\n    public onDamageEvent(ent, qEvent, questComp): void {\n        const qTarget = qEvent.getTargetComp();\n        const targetEnt = qTarget.getTarget();\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => obj.id === targetEnt.getID());\n        this.setTargetCompleted(targetObj, questComp);\n        let msg = `${ent.getName()} has finished a quest objective `;\n        msg += `to damage ${targetEnt.getDamage()}`;\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    /* Processes event when an actor has been escorted back safely. */\n    public onEscortEvent(ent, qEvent, questComp): void {\n        const qTarget = qEvent.getTargetComp();\n        const actor = qTarget.getTarget();\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => obj.id === actor.getID());\n\n        // TODO add checks that level IDs match, right now done in System.Chat\n        this.setTargetCompleted(targetObj, questComp);\n\n        let placeName = '';\n        const pZone = ent.getLevel().getParentZone();\n        if (pZone) {\n            placeName = ' to ' + pZone.getName();\n        }\n\n        let msg = `${ent.getName()} has escorted ${actor.getName()} `;\n        msg += `safely back${placeName} as a quest objective!`;\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    public onGetEvent(ent, qEvent, questComp) {\n        const qTarget = qEvent.getTargetComp();\n        const item = qTarget.getTarget();\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => obj.id === item.getID());\n        this.setTargetCompleted(targetObj, questComp);\n\n        let msg = `${ent.getName()} has found ${item.getName()} `;\n        msg += 'as a quest objective!';\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    public onGiveEvent(ent, qEvent, questComp) {\n        console.log('processing onGiveEvent');\n        const args = qEvent.getArgs();\n        const {actor, item} = args;\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => obj.id === actor.getID());\n\n        this.setTargetCompleted(targetObj, questComp);\n        let msg = `${ent.getName()} has given ${item.getName()} `;\n        msg += `to ${actor.getName()} as quest objective!`;\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    public onGotoEvent(ent, qEvent, questComp) {\n        const targetComp = qEvent.getTargetComp();\n        const level = targetComp.getTarget();\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => obj.id === level.getID());\n        this.setTargetCompleted(targetObj, questComp);\n\n        const msg = `${ent.getName()} has arrived to a quest target location!`;\n        questMsg({cell: ent.getCell(), msg});\n    }\n\n    /* Called when quest event where an actor is killed happens. */\n    public onKillEvent(ent, qEvent, questComp) {\n        const args = qEvent.getArgs();\n        if (args && args.corpse) {\n            const targetComp = qEvent.getTargetComp();\n            const actor = targetComp.getTarget();\n            this.moveQuestTargetComp(actor, args.corpse);\n\n            const questTargets = questComp.getQuestTargets();\n            const targetObj = questTargets.find(obj => (\n                obj.id === actor.getID()));\n            this.setTargetCompleted(targetObj, questComp);\n\n            let msg = `${ent.getName()} has reached quest target of killing`;\n            msg += ` ${actor.getName()}.`;\n            questMsg({cell: ent.getCell(), msg});\n        }\n        else {\n            RG.err('SystemQuest', 'onKillEvent',\n                `Args must contain |corpse|. Got: ${JSON.stringify(args)}`);\n        }\n    }\n\n    public onListenEvent(ent, qEvent, questComp) {\n        const args = qEvent.getArgs();\n        if (args && args.info) {\n            const info = args.info.getInfo();\n            const actor = args.src;\n            ent.add(args.info.clone());\n\n            const listenID = actor.getID();\n            const questTargets = questComp.getQuestTargets();\n            const targetObj = questTargets.find(obj => obj.id === listenID);\n            this.setTargetCompleted(targetObj, questComp);\n\n            const msg = `${actor.getName()} tells about ${info}`;\n            questMsg({msg, cell: ent.getCell()});\n        }\n        else {\n            RG.err('SystemQuest', 'onListenEvent',\n                `Args must contain |info|. Got: ${JSON.stringify(args)}`);\n        }\n    }\n\n    public onReadEvent(ent, qEvent, questComp) {\n        const targetComp = qEvent.getTargetComp();\n        const readEntity = targetComp.getTarget();\n        const questTargets = questComp.getQuestTargets();\n        const targetObj = questTargets.find(obj => (\n            obj.id === readEntity.getID()));\n        this.setTargetCompleted(targetObj, questComp);\n\n        const placeData = readEntity.getMetaData('place');\n        if (placeData) {\n            const placeObj = placeData[0];\n            if (placeObj.levelID === ent.getLevel().getID()) {\n                // Mark target as completed\n                const targetLoc = questTargets.find(obj => (\n                    obj.id === placeObj.levelID && !obj.isCompleted\n                ));\n                this.setTargetCompleted(targetLoc, questComp);\n            }\n            else {\n                let msg = `${ent.getName()} learns to travel to `;\n                msg += `${placeObj.placeName} as part of the quest.`;\n                questMsg({cell: ent.getCell(), msg});\n            }\n        }\n    }\n\n    public onReportEvent(ent, qEvent, questComp) {\n        const questTargets = questComp.getQuestTargets();\n        const targetComp = qEvent.getTargetComp();\n        const reportTarget = targetComp.getTarget();\n        const tName = reportTarget.getName();\n\n        let reportOK = false;\n        if (reportTarget.has('QuestReport')) {\n            const reportComp = reportTarget.get('QuestReport');\n            const questInfo = qEvent.getArgs().info;\n            // Handles part where specific info has been given via 'listen'\n            if (questInfo) {\n                if (reportComp.getExpectInfoFrom() === questInfo.getGivenBy()) {\n                    reportOK = true;\n                }\n                else {\n                    const msg = `${tName} is not interested in this info`;\n                    questMsg({cell: ent.getCell(), msg});\n                }\n            } // Handle other reporting like kill/spy/goto etc\n            else if (questComp.isTargetInQuest(targetComp)) {\n                // const questTargets = questComp.getQuestTargets();\n                // Filter out report target\n                const otherTargets = questTargets.filter(obj => (\n                    obj.id !== reportTarget.getID()));\n                // Check that all other goals are completed\n                reportOK = otherTargets.reduce((acc, obj) => acc && obj.isCompleted,\n                    true);\n            }\n        }\n\n        if (reportOK) {\n            const targetReportObj = questTargets.find(obj => (\n                obj.id === reportTarget.getID()\n            ));\n            const msg = `${ent.getName()} reports info to ${tName}`;\n            questMsg({cell: ent.getCell(), msg});\n            this.setTargetCompleted(targetReportObj, questComp);\n        }\n    }\n\n    /* Moves QuestTarget from one entity to another. */\n    public moveQuestTargetComp(srcEnt, destEnt) {\n        try {\n            const qTarget = srcEnt.get('QuestTarget');\n            qTarget.changeEntity(destEnt);\n            qTarget.setIsCompleted(true);\n            qTarget.setTarget(destEnt);\n        }\n        catch (e) {\n            console.log('srcEnt is', srcEnt);\n            console.log(e.message);\n        }\n    }\n\n    public setTargetCompleted(targetObj, questComp) {\n        const ent = questComp.getEntity();\n        if (targetObj.isCompleted === false) {\n            targetObj.isCompleted = true;\n        }\n        else {\n            let json = 'targetObj: ' + JSON.stringify(targetObj);\n            json += 'targetQuest: ' + JSON.stringify(questComp);\n            RG.err('SystemQuest', 'setTargetCompleted',\n                'Tried to set completed quest to completed again: ' + json);\n        }\n\n        if (questComp.isCompleted()) {\n            let msg = `${ent.getName()} has completed a quest!`;\n            msg += ' now it is time to go collect the reward.';\n            questMsg({cell: ent.getCell(), msg});\n            this.checkSubQuestCompletion(ent, questComp);\n        }\n    }\n\n    /* WHen a quest becomes completed, check if any other quest has that one\n     * as a subquest, then mark the subquest item completed. */\n    public checkSubQuestCompletion(ent, questComp) {\n        const questID = questComp.getQuestID();\n        const questList = ent.getList('Quest');\n        questList.forEach(quest => {\n            const subQuests = quest.getTargetsByType('subquest');\n            subQuests.forEach(sqObj => {\n                if (sqObj.subQuestID === questID) {\n                    sqObj.isCompleted = true;\n                }\n            });\n        });\n    }\n\n}\n\nfunction getMatchObj(questComp, targetObj) {\n    const questTargets = questComp.getQuestTargets();\n    const foundObj = questTargets.find(obj => obj.id === targetObj.getID());\n    return foundObj;\n}\n\nfunction isEventValidForThisQuest(qEvent, questComp) {\n    const qTarget = qEvent.getTargetComp();\n    return questComp.isInThisQuest(qTarget);\n}\n\nfunction questMsg(obj) {\n    RG.gameInfo(obj);\n}\n","/* This file contains keyboard definitions and constants, plus some conversion\n * functions between dir-vectors and direction keys. */\n\nimport RG from './rg';\nimport ROT from '../../lib/rot';\nimport {TCoord} from './interfaces';\n\nexport const Keys: any = {};\n\n/* eslint-disable */\nKeys.VK_a = ROT.VK_A + 32;\nKeys.VK_b = ROT.VK_B + 32;\nKeys.VK_c = ROT.VK_C + 32;\nKeys.VK_d = ROT.VK_D + 32;\nKeys.VK_e = ROT.VK_E + 32;\nKeys.VK_f = ROT.VK_F + 32;\nKeys.VK_g = ROT.VK_G + 32;\nKeys.VK_h = ROT.VK_H + 32;\nKeys.VK_i = ROT.VK_I + 32;\nKeys.VK_j = ROT.VK_J + 32;\nKeys.VK_k = ROT.VK_K + 32;\nKeys.VK_l = ROT.VK_L + 32;\nKeys.VK_m = ROT.VK_M + 32;\nKeys.VK_n = ROT.VK_N + 32;\nKeys.VK_o = ROT.VK_O + 32;\nKeys.VK_p = ROT.VK_P + 32;\nKeys.VK_q = ROT.VK_Q + 32;\nKeys.VK_r = ROT.VK_R + 32;\nKeys.VK_s = ROT.VK_S + 32;\nKeys.VK_t = ROT.VK_T + 32;\nKeys.VK_u = ROT.VK_U + 32;\nKeys.VK_v = ROT.VK_V + 32;\nKeys.VK_w = ROT.VK_W + 32;\nKeys.VK_x = ROT.VK_X + 32;\nKeys.VK_y = ROT.VK_Y + 32;\nKeys.VK_z = ROT.VK_Z + 32;\n/* eslint-enable */\n\nKeys.VK_COMMA = 44;\nKeys.VK_PERIOD = 46;\nKeys.VK_LT = 60;\nKeys.VK_GT = 62;\n\n/* Lookup table object for movement and actions keys.*/\nKeys.KeyMap = {\n\n    moveKeyMap: { },\n\n    // Start from W, go clock wise on keyboard\n    initMap() {\n        this.moveKeyMap[Keys.KEY.MOVE_N] = 0;\n        this.moveKeyMap[Keys.KEY.MOVE_NE] = 1;\n        this.moveKeyMap[Keys.KEY.MOVE_E] = 2;\n        this.moveKeyMap[Keys.KEY.MOVE_SE] = 3;\n        this.moveKeyMap[Keys.KEY.MOVE_S] = 4;\n        this.moveKeyMap[Keys.KEY.MOVE_SW] = 5;\n        this.moveKeyMap[Keys.KEY.MOVE_W] = 6;\n        this.moveKeyMap[Keys.KEY.MOVE_NW] = 7;\n\n        this.moveKeyMap[ROT.VK_8] = 0;\n        this.moveKeyMap[ROT.VK_9] = 1;\n        this.moveKeyMap[ROT.VK_6] = 2;\n        this.moveKeyMap[ROT.VK_3] = 3;\n        this.moveKeyMap[ROT.VK_2] = 4;\n        this.moveKeyMap[ROT.VK_1] = 5;\n        this.moveKeyMap[ROT.VK_4] = 6;\n        this.moveKeyMap[ROT.VK_7] = 7;\n    },\n\n    inMoveCodeMap(code) {\n        return this.moveKeyMap.hasOwnProperty(code);\n    },\n\n    isRest: code => (code === Keys.VK_s || code === Keys.VK_PERIOD),\n    isPickup: code => code === Keys.KEY.PICKUP,\n    isUseStairs: code => (\n        code === Keys.KEY.USE_STAIRS_DOWN || code === Keys.KEY.USE_STAIRS_UP\n    ),\n    isChat: code => code === Keys.KEY.CHAT,\n    isConfirmYes: code => code === Keys.KEY.YES,\n    isFightMode: code => code === Keys.KEY.FIGHT,\n    isGive: code => code === Keys.KEY.GIVE,\n    isGoto: code => code === Keys.KEY.GOTO,\n    isJump: code => code === Keys.KEY.JUMP,\n    isIssueOrder: code => code === Keys.KEY.ORDER,\n    isLook: code => code === Keys.KEY.LOOK,\n    isMark: code => code === Keys.KEY.MARK,\n    isNextItem: code => code === Keys.KEY.NEXT_ITEM,\n    isNextTarget: code => code === Keys.KEY.NEXT,\n    isPrevTarget: code => code === Keys.KEY.PREV,\n    isRead: code => code === Keys.KEY.READ,\n    isRunMode: code => code === Keys.KEY.RUN,\n    isSelect: code => code === Keys.KEY.SELECT,\n    isSelectAll: code => code === Keys.KEY.SELECT_ALL,\n    isTargetMode: code => code === Keys.KEY.TARGET,\n    isToggleDoor: code => code === Keys.KEY.DOOR,\n    isUsePower: code => code === Keys.KEY.POWER,\n    isUseAbility: code => code === Keys.KEY.ABILITY,\n    isMultiPurpose: code => code === Keys.KEY.MULTI,\n\n    /* Based on keycode, computes and returns a new x,y pair. If code is\n     * invalid, returns null. */\n    getDiff(code: number, x: number, y: number): TCoord | null {\n        if (this.moveKeyMap.hasOwnProperty(code)) {\n            const diff = ROT.DIRS[8][this.moveKeyMap[code]];\n            const newX = x + diff[0];\n            const newY = y + diff[1];\n            return [newX, newY];\n        }\n        else if (code === Keys.VK_s) {\n            return [x, y];\n        }\n        else {\n            return null;\n        }\n    },\n\n    /* Returns a direction vector for given keycode. */\n    getDir(code) {\n        if (this.moveKeyMap.hasOwnProperty(code)) {\n            return ROT.DIRS[8][this.moveKeyMap[code]];\n        }\n        else if (this.isRest(code)) {\n            return [0, 0];\n        }\n        return null;\n    },\n\n    /* Converts a direction vector to keycode. */\n    dirToKeyCode(dXArg, dYArg) {\n        // Normalize first to unit vector (-1,0 or 1)\n        let dX = dXArg;\n        let dY = dYArg;\n        if (Array.isArray(dXArg)) {\n            dX = dXArg[0];\n            dY = dXArg[1];\n        }\n        if (dX !== 0) {dX = dX / Math.abs(dX);}\n        if (dY !== 0) {dY = dY / Math.abs(dY);}\n        switch (dX) {\n            case -1:\n                switch (dY) {\n                    case -1: return Keys.KEY.MOVE_NW;\n                    case 0: return Keys.KEY.MOVE_W;\n                    case 1: return Keys.KEY.MOVE_SW;\n                    default: RG.err('Keys.KeyMap', 'dirToKeyCode',\n                        `Dir ${dX},${dY} not supported`);\n                }\n                break;\n            case 0:\n                switch (dY) {\n                    case -1: return Keys.KEY.MOVE_N;\n                    case 0: return Keys.KEY.REST;\n                    case 1: return Keys.KEY.MOVE_S;\n                    default: RG.err('Keys.KeyMap', 'dirToKeyCode',\n                        `Dir ${dX},${dY} not supported`);\n                }\n                break;\n            case 1:\n                switch (dY) {\n                    case -1: return Keys.KEY.MOVE_NE;\n                    case 0: return Keys.KEY.MOVE_E;\n                    case 1: return Keys.KEY.MOVE_SE;\n                    default: RG.err('Keys.KeyMap', 'dirToKeyCode',\n                        `Dir ${dX},${dY} not supported`);\n                }\n                break;\n            default: RG.err('Keys.KeyMap', 'dirToKeyCode',\n                `Dir ${dX},${dY} not supported`);\n        }\n        return null;\n    },\n\n    keyCodeToCardinalDir(code) {\n        switch (code) {\n            case Keys.KEY.MOVE_NW: return 'NW';\n            case Keys.KEY.MOVE_W: return 'W';\n            case Keys.KEY.MOVE_SW: return 'SW';\n            case Keys.KEY.MOVE_N: return 'N';\n            case Keys.KEY.REST: return 'REST';\n            case Keys.KEY.MOVE_S: return 'S';\n            case Keys.KEY.MOVE_NE: return 'NE';\n            case Keys.KEY.MOVE_E: return 'E';\n            case Keys.KEY.MOVE_SE: return 'SE';\n            default: return '';\n        }\n    }\n\n};\n\nKeys.menuIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f',\n    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\n    'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z'\n];\nKeys.EXIT_INDEX = Keys.menuIndices.indexOf('Q');\n\n/* Given key code, returns the corresponding character in menu indices. */\nKeys.codeToMenuChar = code => {\n    const index = Keys.codeToIndex(code);\n    return Keys.menuIndices[index];\n};\n\nconst reCharLC = /[a-z]/;\nconst reCharUC = /[A-Z]/;\n\n/* Convert a selection index into a keycode. For example, if user presses 'a',\n * this function should return keycode for a, ie Keys.VK_a. */\nKeys.selectIndexToCode = indexChar => {\n    const arrayIndex = Keys.menuIndices.findIndex(val => val === indexChar);\n    if (arrayIndex >= 0) {\n        if (arrayIndex >= 0 && arrayIndex <= 9) {\n            return ROT.VK_0 + arrayIndex;\n        }\n        else if (reCharLC.test(indexChar)) {\n            const addToCode = arrayIndex - Keys.menuIndices.indexOf('a');\n            return Keys.VK_a + addToCode;\n        }\n        else if (reCharUC.test(indexChar)) {\n            const addToCode = arrayIndex - Keys.menuIndices.indexOf('A');\n            return ROT.VK_A + addToCode;\n        }\n    }\n    RG.err('RG', 'selectIndexToCode',\n        `Inv. select index |${indexChar}|`);\n    return -1;\n\n};\n\n/* Converts the keycode into a selection index starting from 0. */\nKeys.codeToIndex = (code): number => {\n    if (code >= ROT.VK_0 && code <= ROT.VK_9) {\n        return code - ROT.VK_0;\n    }\n    else if (code >= Keys.VK_a && code <= Keys.VK_z) {\n        return code - Keys.VK_a + Keys.menuIndices.indexOf('a');\n    }\n    else if (code >= ROT.VK_A && code <= ROT.VK_Z) {\n        return code - ROT.VK_A + Keys.menuIndices.indexOf('A');\n    }\n    return -1;\n};\n\n/* Returns true if keyCode corresponds to a numeric key. */\nKeys.isNumeric = keyCode => {\n    return keyCode >= ROT.VK_0 && keyCode <= ROT.VK_9;\n};\n\nKeys.KEY = {};\n\n// Assign ROT keys to meaningful constants\nKeys.KEY.MOVE_N = ROT.VK_W + 32;\nKeys.KEY.MOVE_NE = ROT.VK_E + 32;\nKeys.KEY.MOVE_E = ROT.VK_D + 32;\nKeys.KEY.MOVE_SE = ROT.VK_C + 32;\nKeys.KEY.MOVE_S = ROT.VK_X + 32;\nKeys.KEY.MOVE_SW = ROT.VK_Z + 32;\nKeys.KEY.MOVE_W = ROT.VK_A + 32;\nKeys.KEY.MOVE_NW = ROT.VK_Q + 32;\n\nKeys.KEY.ABILITY = Keys.VK_k;\nKeys.KEY.CHAT = ROT.VK_C;\nKeys.KEY.DELETE = ROT.VK_D;\nKeys.KEY.DOOR = ROT.VK_O + 32;\nKeys.KEY.FIGHT = ROT.VK_F + 32;\nKeys.KEY.GIVE = ROT.VK_G;\nKeys.KEY.GOTO = Keys.VK_g;\nKeys.KEY.JUMP = Keys.VK_j;\nKeys.KEY.LOOK = ROT.VK_L + 32;\nKeys.KEY.MARK = Keys.VK_b;\nKeys.KEY.MULTI = ROT.VK_SPACE;\nKeys.KEY.NEXT = Keys.VK_n;\nKeys.KEY.NEXT_ITEM = ROT.VK_H + 32;\nKeys.KEY.ORDER = ROT.VK_O;\nKeys.KEY.PICKUP = Keys.VK_COMMA;\nKeys.KEY.POWER = ROT.VK_P + 32;\nKeys.KEY.PREV = ROT.VK_P + 32;\nKeys.KEY.QUIT_MENU = Keys.VK_q;\nKeys.KEY.READ = ROT.VK_R;\nKeys.KEY.REST = ROT.VK_S + 32;\nKeys.KEY.RUN = ROT.VK_R + 32;\nKeys.KEY.SELECT = Keys.VK_s;\nKeys.KEY.SELECT_ALL = ROT.VK_A;\nKeys.KEY.TARGET = Keys.VK_t;\nKeys.KEY.USE_ABILITY = Keys.VK_k;\nKeys.KEY.USE_STAIRS_DOWN = Keys.VK_GT;\nKeys.KEY.USE_STAIRS_UP = Keys.VK_LT;\nKeys.KEY.YES = ROT.VK_Y + 32;\nKeys.KeyMap.initMap();\n\nKeys.KEY.NO_ACTION = ROT.VK_CAPS_LOCK;\n\n// Used in the GUI only\nKeys.GUI = {};\nKeys.GUI.CharInfo = ROT.VK_I;\nKeys.GUI.Goto = Keys.KEY.GOTO;\nKeys.GUI.Help = ROT.VK_H;\nKeys.GUI.Inv = Keys.VK_i;\nKeys.GUI.Look = Keys.VK_l;\nKeys.GUI.Map = Keys.VK_m;\nKeys.GUI.OwMap = ROT.VK_M;\nKeys.GUI.Use = Keys.VK_u;\n\nKeys.isValidKey = keyCode => {\n    let found = false;\n    Object.keys(Keys.KEY).forEach(key => {\n        found = found || Keys.KEY[key] === keyCode;\n    });\n    found = found || Keys.KeyMap.inMoveCodeMap(keyCode);\n    return found;\n};\n\n/* Given keycode, returns the valid char for that key. */\nKeys.getChar = keyCode => {\n    return '`' + String.fromCharCode(keyCode) + '`';\n};\n","\nimport RG from '../rg';\n\ntype ActionCallback = import('../time').ActionCallback;\ntype BaseActor = import('../actor').BaseActor;\ntype Cell = import('../map.cell').Cell;\ntype Memory = import('./brain.memory').Memory;\n\nconst NO_MEMORY = null;\n\n/* Base class for actor brains. */\nexport class BrainBase {\n\n    public _actor: BaseActor;\n    public _type: string;\n\n    constructor(actor) {\n        if (RG.isNullOrUndef([actor])) {\n            RG.err('BrainSentient', 'constructor',\n                'Actor must not be null.');\n        }\n        this._actor = actor;\n        this._type = null;\n    }\n\n    public setActor(actor: BaseActor): void {this._actor = actor;}\n    public getActor(): BaseActor {return this._actor;}\n    public getType(): string {return this._type;}\n    public setType(type: string): void {this._type = type;}\n\n    public getMemory(): Memory {return NO_MEMORY;}\n    public getSeenCells(): Cell[] {return [];}\n    public findEnemyCell(seenCells: Cell[]): Cell {return null;}\n    public findFriendCell(seenCells: Cell[]): Cell {return null;}\n    public canMeleeAttack(x, y): boolean {return false;}\n    public canSeeActor(actor): boolean {return false;}\n    public getSeenFriends(): BaseActor[] {return [];}\n    public getSeenEnemies(): BaseActor[] {return [];}\n\n    public decideNextAction(obj?: any): ActionCallback {\n        RG.err('BrainBase', 'decideNextAction',\n            'Not implemented. Do in derived class');\n        return null;\n    }\n\n    public toJSON() {\n        return {\n            type: this._type\n        };\n    }\n}\n","\nimport dbg from 'debug';\nconst debug = dbg('bitn:Goal');\n\nimport RG from './rg';\nimport * as Component from './component';\nimport * as Item from './item';\nimport {Brain} from './brain';\nimport {Path, CoordXY, PathFunc} from './path';\nimport {Random} from './random';\nimport {SentientActor} from './actor';\nimport {SpellBase, SpellArgs} from './spell';\nimport {TCoord} from './interfaces';\n\ntype Memory = import('./brain').Memory;\n\nconst RNG = Random.getRNG();\nexport const Goal: any = {};\nGoal.ACTOR_FILTER = '';\n\ntype Entity = import('./entity').Entity;\ntype Cell = import('./map.cell').Cell;\n\nGoal.StatusStrings = {\n    1: 'GOAL_ACTIVE',\n    2: 'GOAL_COMPLETED',\n    3: 'GOAL_INACTIVE',\n    4: 'GOAL_FAILED'\n};\n\nexport enum GoalType {\n    NORMAL = 1, MOVE, KILL, FIND, AGGRESSION\n}\nGoal.Types = GoalType;\n\nconst NO_SUB_GOALS = null;\n\nexport enum GoalStatus {\n    GOAL_ACTIVE = 1,\n    GOAL_COMPLETED = 2,\n    GOAL_INACTIVE = 3,\n    GOAL_FAILED = 4\n}\n\nlet IND = 0; // Used in debug messages\n\n//---------------------------------------------------------------------------\n/* Base class for all actor goals. */\n//---------------------------------------------------------------------------\n\nexport class GoalBase {\n\n    public subGoals: GoalBase[] | null;\n    public actor: SentientActor;\n    public status: GoalStatus;\n    public type: string;\n    public planBGoal: GoalBase | null;\n    public category: GoalType;\n\n    constructor(actor) {\n        this.subGoals = NO_SUB_GOALS;\n        this.actor = actor;\n        this.status = GoalStatus.GOAL_INACTIVE;\n        this.type = '';\n        this.category = GoalType.NORMAL;\n\n        this.planBGoal = null; // Can be set for a failed goal\n    }\n\n    public dbg(msg: string): void {\n        if (debug.enabled) {\n            let nameMatch = false;\n            if (!Goal.ACTOR_FILTER) {nameMatch = true;}\n            if (!nameMatch) {\n                const matchRe = new RegExp(Goal.ACTOR_FILTER);\n                nameMatch = matchRe.test(this.actor.getName());\n            }\n\n            if (nameMatch) {\n                const ind = '  '.repeat(IND);\n                const name = this.actor.getName();\n                const status = statusToString(this.status);\n                const typeAndStat = `[${this.getType()}] ${status}`;\n                console.log(`${ind}${typeAndStat} ${name} ${msg}`);\n            }\n        }\n    }\n\n    public setCategory(category: GoalType) {\n        this.category = category;\n    }\n\n    public getCategory(): GoalType {\n        return this.category;\n    }\n\n    public setType(type: string): void {\n        this.type = type;\n    }\n\n    public getType(): string {\n        return this.type;\n    }\n\n    public hasPlanB() {\n        return this.planBGoal !== null;\n    }\n\n    public getPlanB() {return this.planBGoal;}\n\n    public activate(): void {\n        // This should usually initialize subgoals for composite goal.\n        // For atomic goals, can do computation like path-finding, FoV etc\n        throw new Error('Pure virtual method');\n    }\n\n    public activateIfInactive(): void {\n        if (this.isInactive()) {\n            this.dbg('Activating inactive');\n            this.activate();\n        }\n    }\n\n    public reactivateIfFailed(): void {\n        if (this.hasFailed()) {\n            this.dbg('Re-Activating failed');\n            this.status = GoalStatus.GOAL_INACTIVE;\n        }\n    }\n\n    public process(): GoalStatus {\n        if (Array.isArray(this.subGoals)) {\n            const status = this.subGoals[0].process();\n            return status;\n        }\n        return this.status;\n    }\n\n    public terminate(): void {\n        this.dbg('Goal terminated!');\n        this.status = GoalStatus.GOAL_COMPLETED;\n    }\n\n    public handleMsg(obj): void {\n        if (Array.isArray(this.subGoals)) {\n            this.subGoals[this.subGoals.length - 1].handleMsg(obj);\n        }\n    }\n\n    public processSubGoals(): GoalStatus {\n        ++IND;\n        let status = GoalStatus.GOAL_FAILED;\n        this.dbg('Start processSubGoals()');\n\n        if (Array.isArray(this.subGoals)) {\n            // Clean up any failed/completed goals\n            this.removeFinishedOrFailed();\n            if (this.subGoals.length > 0) {\n                const subGoal = this.subGoals[0];\n                status = subGoal.process();\n\n                if (status === GoalStatus.GOAL_COMPLETED && this.subGoals.length > 1) {\n                    // This goal has still sub-goals, so keep active\n                    status = GoalStatus.GOAL_ACTIVE;\n                }\n                else if (status === GoalStatus.GOAL_FAILED && subGoal.hasPlanB()) {\n                    this.subGoals[0] = subGoal.getPlanB();\n                    // Need to change the type to prevent evaluation changing\n                    this.subGoals[0].setType(subGoal.getType());\n                    status = GoalStatus.GOAL_ACTIVE;\n                }\n                // Else keep the sub-process status\n            }\n            else {\n                status = GoalStatus.GOAL_COMPLETED;\n            }\n        }\n        else {\n            const name = this.actor.getName();\n            const msg = `Type: ${this.type}, actor: ${name}`;\n            throw new Error(`${msg} No subgoals in atomic goal`);\n        }\n\n        --IND;\n        this.dbg(`End processSubGoals() with status ${status}`);\n        if (debug.enabled) {\n            this.dbg(`  subGoals left: ${this.subGoals.map(g => g.getType())}`);\n        }\n        return status;\n    }\n\n    public removeFinishedOrFailed(): void {\n        this.subGoals = this.subGoals.filter(goal => (\n            !goal.isCompleted() && !goal.hasFailed()\n        ));\n    }\n\n    public removeAllSubGoals() {\n        if (Array.isArray(this.subGoals)) {\n            this.subGoals.forEach(goal => {goal.terminate();});\n            this.subGoals = [];\n        }\n        this.dbg('Removed all subGoals');\n    }\n\n    /* Removes all subGoals of given type. */\n    public removeSubGoalsOfType(type) {\n        let nRemoved = 0;\n        if (Array.isArray(this.subGoals)) {\n            let index = this.subGoals.findIndex(g => g.type === type);\n            while (index >= 0) {\n                this.subGoals[index].terminate();\n                this.subGoals.splice(index, 1);\n                ++nRemoved;\n                index = this.subGoals.findIndex(g => g.type === type);\n            }\n        }\n        return nRemoved;\n    }\n\n    public getSubGoals() {return this.subGoals;}\n\n    /* Returns true if this goal has any subgoals in it. */\n    public hasSubGoals(type?: string) {\n        if (Array.isArray(this.subGoals)) {\n            if (type) {\n                const index = this.subGoals.findIndex(g => g.type === type);\n                return index >= 0;\n            }\n            else {\n                return this.subGoals.length > 0;\n            }\n        }\n        return false;\n    }\n\n    public addSubGoal(goal) {\n        if (!Array.isArray(this.subGoals)) {\n            this.subGoals = [];\n        }\n        this.subGoals.unshift(goal);\n        if (debug.enabled) {\n            this.dbg(`Added subGoal ${goal.getType()}`);\n            const subStr = this.subGoals.map(g => g.getType());\n            this.dbg(`   Subgoals are now: ${subStr}`);\n        }\n    }\n\n    public isInactive() {\n        return this.status === GoalStatus.GOAL_INACTIVE;\n    }\n\n    public isActive() {\n        return this.status === GoalStatus.GOAL_ACTIVE;\n    }\n\n    public hasFailed() {\n        return this.status === GoalStatus.GOAL_FAILED;\n    }\n\n    public isCompleted() {\n        return this.status === GoalStatus.GOAL_COMPLETED;\n    }\n\n    /* Prevents double addition of same type of goal. Ignores failed/completed\n     * goals. */\n    public isGoalPresent(goalType) {\n        if (Array.isArray(this.subGoals)) {\n            const goal = this.subGoals.find(g => g.getType() === goalType);\n            if (goal && (!goal.hasFailed() && !goal.isCompleted())) {\n                if (debug.enabled) {\n                    this.dbg(`subGoal ${goalType} already present.`);\n                    this.dbg(`  SubGoal status: ${goal.status}`);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n}\nGoal.Base = GoalBase;\n\n//---------------------------------------------------------------------------\n/* A goal for an actor to follow path from its current location to x,y */\n//---------------------------------------------------------------------------\nexport class GoalFollowPath extends GoalBase {\n\n    public path: CoordXY[];\n    public xy: TCoord;\n\n    constructor(actor, xy) {\n        super(actor);\n        this.setType('GoalFollowPath');\n        this.path = [];\n        this.xy = xy;\n    }\n\n    /* If activated, will compute actor's path from current location to x,y */\n    public activate(): void {\n        const [x, y] = this.xy;\n        const [aX, aY] = [this.actor.getX(), this.actor.getY()];\n        this.dbg(`Calc path ${aX},${aY} -> ${x},${y}`);\n        const map = this.actor.getLevel().getMap();\n        const path = Path.getShortestActorPath(map, aX, aY, x, y);\n        this.path = path;\n        this.status = GoalStatus.GOAL_ACTIVE;\n        this.dbg(`activate() path length: ${this.path.length}`);\n    }\n\n    /* Should check the next coordinate, and if actor can move to it. */\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        if (this.path.length > 0) {\n            return this.followPath();\n        }\n        this.dbg('process() ret GoalStatus.GOAL_COMPLETED');\n        this.status = GoalStatus.GOAL_COMPLETED;\n        return GoalStatus.GOAL_COMPLETED;\n    }\n\n    public followPath(): GoalStatus {\n        const level = this.actor.getLevel();\n        const [aX, aY] = this.actor.getXY();\n        const {x, y} = this.path[0];\n        const [nextX, nextY] = [x, y];\n        const n = this.path.length;\n\n        this.dbg(`followPath() test move ${aX},${aY} -> ${x},${y}, path ${n} `);\n        if (level.getMap().isPassable(nextX, nextY)) {\n            const dX = Math.abs(aX - x);\n            const dY = Math.abs(aY - y);\n\n            if (dX <= 1 && dY <= 1) {\n                const movComp = new Component.Movement(nextX, nextY, level);\n                this.actor.add(movComp);\n                this.path.shift();\n                if (this.path.length === 0) {\n                    this.dbg(`followPath() ret GOAL_COMPL, path ${n}`);\n                    this.status = GoalStatus.GOAL_COMPLETED;\n                    return GoalStatus.GOAL_COMPLETED;\n                }\n                this.dbg(`followPath() ret GoalStatus.GOAL_ACTIVE, path ${n}`);\n                this.status = GoalStatus.GOAL_ACTIVE;\n                return GoalStatus.GOAL_ACTIVE;\n            }\n            else {\n                this.dbg(`followPath() strayed, ret GoalStatus.GOAL_FAILED, path ${n}`);\n                // Strayed from the path, mark as failed\n                this.status = GoalStatus.GOAL_FAILED;\n                return GoalStatus.GOAL_FAILED;\n            }\n        }\n        else {\n            this.dbg('followPathl() next NOT passable ret GoalStatus.GOAL_FAILED');\n            this.status = GoalStatus.GOAL_FAILED;\n            return GoalStatus.GOAL_FAILED;\n        }\n\n    }\n\n}\nGoal.FollowPath = GoalFollowPath;\n\nfunction getNextCoord(actor, dir) {\n    const [x, y] = actor.getXY();\n    return [x + dir[0], y + dir[1]];\n\n}\n\n/* Movement goal which does not fail/complete when blocked by friend actors.\n * terminates when enemy is seen or the actor hits a hard obstacle such as wall\n * or water.\n */\nexport class GoalMoveUntilEnemy extends GoalBase {\n\n    public dir: TCoord;\n    public timeout: number;\n\n    constructor(actor, dir) {\n        super(actor);\n        this.setType('GoalMoveUntilEnemy');\n        this.dir = dir;\n    }\n\n    public activate() {\n        this.timeout = 100;\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    public process() {\n        this.activateIfInactive();\n        const brain = this.actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const enemyCell = brain.findEnemyCell(seenCells);\n\n        const [nextX, nextY] = getNextCoord(this.actor, this.dir);\n        const map = this.actor.getLevel().getMap();\n\n        if (enemyCell) {\n            const [eX, eY] = [enemyCell.getX(), enemyCell.getY()];\n            if (debug.enabled) {\n                this.dbg(`Has moved enough. Enemy found @${eX},${eY}`);\n            }\n            this.status = GoalStatus.GOAL_COMPLETED;\n        }\n        else if (map.hasObstacle(nextX, nextY)) {\n            this.status = GoalStatus.GOAL_FAILED;\n            if (debug.enabled) {this.dbg('OBSTACLE ENCOUNTERED');}\n        }\n        else if (this.timeout === 0) {\n            this.status = GoalStatus.GOAL_FAILED;\n            if (debug.enabled) {this.dbg('TIMEOUT REACHED');}\n        }\n        else if (map.isPassable(nextX, nextY)) {\n            const level = this.actor.getLevel();\n            const movComp = new Component.Movement(nextX, nextY, level);\n            this.actor.add(movComp);\n\n            const name = this.actor.getName();\n            if (debug.enabled) {\n                this.dbg(`Moving ${name} to ${nextX},${nextY}`);\n            }\n        }\n        // else IDLE here until cell is passable\n        --this.timeout;\n\n        return this.status;\n    }\n\n}\nGoal.MoveUntilEnemy = GoalMoveUntilEnemy;\n\n/* Variation of follow path where the target (actor) coordinate is excluded from\n * the path. */\nexport class GoalGotoActor extends GoalFollowPath {\n\n    public targetActor: SentientActor;\n    public pathFunc: PathFunc;\n\n    constructor(actor, targetActor) {\n        super(actor, [0, 0]);\n        this.setType('GoalGotoActor');\n        this.xy = targetActor.getXY();\n        this.targetActor = targetActor;\n        this.pathFunc = Path.getActorToActorPath;\n    }\n\n    /* If activated, will compute actor's path from current location to x,y */\n    public activate() {\n        const path = this.getPath();\n        this.dbg(`activate() path length: ${path.length}`);\n        this.path = path;\n        this.status = GoalStatus.GOAL_ACTIVE;\n        this.dbg(`activate() path length: ${this.path.length}`);\n    }\n\n    public getPath() {\n        const map = this.actor.getLevel().getMap();\n        const [x, y] = this.xy;\n        const [aX, aY] = [this.actor.getX(), this.actor.getY()];\n        this.dbg(`${this.getType()} ${aX},${aY} -> ${x},${y}`);\n        return Path.getActorToActorPath(map, aX, aY, x, y);\n    }\n\n    public process() {\n        this.activateIfInactive();\n        const [tX, tY] = [this.targetActor.getX(), this.targetActor.getY()];\n        const [x, y] = this.xy;\n        const dX = Math.abs(tX - x);\n        const dY = Math.abs(tY - y);\n\n        // Why this branch??\n        if (dX > 2 || dY > 2) {\n            this.followPath();\n            this.status = GoalStatus.GOAL_FAILED;\n            return GoalStatus.GOAL_FAILED;\n        }\n        else if (this.path.length > 0) {\n            return this.followPath();\n        }\n        this.dbg('process() ret GoalStatus.GOAL_COMPLETED');\n        this.status = GoalStatus.GOAL_COMPLETED;\n        return GoalStatus.GOAL_COMPLETED;\n    }\n\n}\nGoal.GotoActor = GoalGotoActor;\n\n/* Variation of GotoActor, in which only seen cells are taken into account to\n * make path finding faster. */\nexport class GoalGotoSeenActor extends GoalGotoActor {\n\n    constructor(actor, targetActor) {\n        super(actor, targetActor);\n        this.setType('GoalGotoSeenActor');\n    }\n\n    public getPath() {\n        const map = this.actor.getLevel().getMap();\n        const [x, y] = this.xy;\n        return Path.getShortestSeenPath(this.actor, map, x, y);\n    }\n\n}\nGoal.GotoSeenActor = GoalGotoSeenActor;\n\n/* Goal to patrol/guard a single x,y coordinate. */\nexport class GoalGuard extends GoalBase {\n\n    public dist: number;\n    public x: number;\n    public y: number;\n\n    constructor(actor, xy: TCoord, dist = 1) {\n        super(actor);\n        this.setType('GoalGuard');\n        this.dist = dist;\n        this.x = xy[0];\n        this.y = xy[1];\n        this.subGoals = [];\n    }\n\n    public activate() {\n        // Check if close enough to the target\n        this.checkDistToGuardPoint();\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        if (this.subGoals.length > 0) {\n            const firstGoal = this.subGoals[0];\n            if (firstGoal.hasFailed()) {\n                this.checkDistToGuardPoint();\n            }\n        }\n        else {\n            this.checkDistToGuardPoint();\n        }\n        return this.status;\n    }\n\n    public checkDistToGuardPoint(): void {\n        // const [aX, aY] = this.actor.getXY();\n        // const map = this.actor.getLevel().getMap();\n        const [dX, dY] = RG.dXdYAbs([this.x, this.y], this.actor.getXY());\n        // if (path.length > this.dist) {\n        if (dX > this.dist || dY > this.dist) {\n            this.addSubGoal(new GoalFollowPath(this.actor, [this.x, this.y]));\n        }\n        // else if (path.length < this.dist) {\n            // moveToRandomDir(this.actor);\n        // }\n    }\n}\nGoal.Guard = GoalGuard;\n//---------------------------------------------------------------------------\n/* Goal used for patrolling between a list of coordinates. */\n//---------------------------------------------------------------------------\nexport class GoalPatrol extends GoalBase {\n\n    public coords: TCoord[];\n    public currTarget: TCoord;\n    public currIndex: number;\n    public patrolDist: number;\n\n    constructor(actor, coords) {\n        super(actor);\n        this.setType('GoalPatrol');\n\n        this.coords = coords;\n        if (this.coords.length < 2) {\n            RG.err('GoalPatrol', 'constructor',\n                `Provide >= 2 coords for patrolling. Got ${coords}`);\n        }\n        this.currIndex = 0;\n        this.currTarget = coords[this.currIndex];\n        this.patrolDist = 3;\n    }\n\n    /* Calculates the points for patrolling. */\n    public activate() {\n        // Calculate path from current point to patrol point\n        this.dbg(`${this.getType()} activate()`);\n        this.recomputePatrolPath();\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        this.dbg(`GoalPatrol process(), got subStatus: ${this.status}`);\n        const firstGoal = this.subGoals[0];\n        if (firstGoal.isCompleted()) {\n            this.nextPatrolPoint();\n        }\n        else if (firstGoal.hasFailed()) {\n            this.dbg(`${this.getType()} process() path failed`);\n            const [x, y] = this.actor.getXY();\n            const [patrolX, patrolY] = this.currTarget;\n            const dist = Path.shortestDist(x, y, patrolX, patrolY);\n            // Could not get all the way there, but close enough\n            if (dist <= this.patrolDist) {\n                this.nextPatrolPoint();\n            }\n            else {\n                this.recomputePatrolPath();\n            }\n        }\n        else {\n            this.dbg(`${this.getType()} XXX NOT HERE!`);\n\n        }\n        return this.status;\n    }\n\n    public nextPatrolPoint() {\n        ++this.currIndex;\n        if (this.currIndex >= this.coords.length) {\n            this.currIndex = 0;\n        }\n        this.currTarget = this.coords[this.currIndex];\n        this.addSubGoal(new GoalFollowPath(this.actor, this.currTarget));\n        this.dbg(`${this.getType()} next patrol point ${this.currTarget}`);\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    public recomputePatrolPath() {\n        this.addSubGoal(new GoalFollowPath(this.actor, this.currTarget));\n        this.dbg(`${this.getType()} recompute to point ${this.currTarget}`);\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n}\nGoal.Patrol = GoalPatrol;\n\n//---------------------------------------------------------------------------\n/* Goal to attack the given actor. */\n//---------------------------------------------------------------------------\nexport class GoalAttackActor extends GoalBase {\n    public targetActor: SentientActor;\n\n    public print: boolean;\n\n    constructor(actor, targetActor) {\n        super(actor);\n        this.setType('GoalAttackActor');\n        this.targetActor = targetActor;\n    }\n\n    public activate() {\n        this.dbg('activate() called');\n\n        // targetActor.isDead() -> completed\n        this.selectSubGoal();\n        if (!this.isCompleted()) {\n            this.status = GoalStatus.GOAL_ACTIVE;\n        }\n    }\n\n    public process() {\n        this.activateIfInactive();\n\n        // Need to recompute if a different enemy than current target\n        // gets closer\n        const brain = this.actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const enemyCell = brain.findEnemyCell(seenCells);\n        if (enemyCell) {\n            const actor = enemyCell.getActors()[0];\n            if (this.targetActor.getID() !== actor.getID()) {\n                if (this.print) {\n                    const name = this.actor.getName();\n                    const old = this.targetActor.getName();\n                    const newName = actor.getName();\n                    RG.log(`${name}:: Recomp target ${old} -> ${newName}`);\n                }\n                this.targetActor = actor as SentientActor;\n                brain.getMemory().setLastAttacked(actor);\n                this.selectSubGoal();\n            }\n        }\n        else {\n            this.checkTargetStatus();\n        }\n        if (!this.isCompleted() && !this.hasFailed()) {\n            this.status = this.processSubGoals();\n        }\n        return this.status;\n    }\n\n    public terminate() {\n        this.dbg('Terminating completed attack actor task');\n        this.status = GoalStatus.GOAL_COMPLETED;\n    }\n\n    public canMissileAttack(): boolean {\n        const [eX, eY] = this.targetActor.getXY();\n        const [aX, aY] = this.actor.getXY();\n        const miss = this.actor.getInvEq().getEquipment().getItem('missile');\n        if (miss) {\n            const range = RG.getMissileRange(this.actor, miss);\n            const getDist = Path.shortestDist(eX, eY, aX, aY);\n            if (getDist <= range) {return true;}\n            // TODO test for a clean shot\n        }\n        return false;\n    }\n\n    public selectSubGoal() {\n        const brain = this.actor.getBrain();\n        this.checkTargetStatus();\n        if (!this.isCompleted()) {\n            const [eX, eY] = this.targetActor.getXY();\n\n            // If actor disappears, check last seen square\n            // If in attack range, add subgoal to attack the target\n            if (brain.canMeleeAttack(eX, eY)) {\n                this.removeAllSubGoals();\n                this.dbg('canMeleeAttack() OK');\n                const hitGoal = new GoalHitActor(this.actor, this.targetActor);\n                this.addSubGoal(hitGoal);\n            }\n            else if (this.canMissileAttack()) {\n                this.removeAllSubGoals();\n                this.dbg('canMissileAttack() OK');\n                const goal = new GoalShootActor(this.actor, this.targetActor);\n                this.addSubGoal(goal);\n            }\n            // If actor visible, add subgoal to move closer\n            else if (brain.canSeeActor(this.targetActor)) {\n                this.removeAllSubGoals();\n                this.dbg('canSeeActor subGoal GoalGotoActor');\n                // const goal = new GoalGotoActor(this.actor, this.targetActor);\n                const goal = new GoalGotoSeenActor(this.actor,\n                    this.targetActor);\n                this.addSubGoal(goal);\n            }\n            // If not visible, try to hunt the target\n            else {\n                this.removeAllSubGoals();\n                this.dbg('Moving blind subGoal GoalGotoActor');\n                const goal = new GoalGotoActor(this.actor, this.targetActor);\n                this.addSubGoal(goal);\n            }\n        }\n\n    }\n\n    public checkTargetStatus() {\n        const healthComp = this.targetActor.get('Health');\n        if (!healthComp) {\n            const json = JSON.stringify(this.targetActor);\n            const attacker = JSON.stringify(this.actor);\n            RG.log('Attacker: ' + attacker);\n            RG.err('GoalAttackActor', 'checkTargetStatus',\n                'target has no health: ' + json);\n        }\n\n        if (healthComp.isDead()) {\n            this.removeAllSubGoals();\n            this.status = GoalStatus.GOAL_COMPLETED;\n            this.dbg('Enemy is dead. Goal completed');\n        }\n        else if (!RG.inSameLevel(this.actor, this.targetActor)) {\n            this.removeAllSubGoals();\n            this.status = GoalStatus.GOAL_COMPLETED;\n            this.dbg('Enemy not in this level. Goal completed');\n        }\n    }\n\n}\nGoal.AttackActor = GoalAttackActor;\n\n//---------------------------------------------------------------------------\n\n//---------------------------------------------------------------------------\n/* A goal to (melee) hit an actor. */\n//---------------------------------------------------------------------------\nexport class GoalHitActor extends GoalBase {\n    public targetActor: SentientActor;\n\n    constructor(actor, targetActor) {\n        super(actor);\n        this.setType('GoalHitActor');\n        this.targetActor = targetActor;\n    }\n\n    public activate() {\n        const level = this.actor.getLevel();\n        const [aX, aY] = this.targetActor.getXY();\n        const cell = level.getMap().getCell(aX, aY);\n        const target = cell.getProp('actors')[0];\n        const attackComp = new Component.Attack({target});\n        this.actor.add(attackComp);\n        this.dbg(`${this.getType()} added Attack comp`);\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.status = GoalStatus.GOAL_COMPLETED;\n        return this.status;\n    }\n\n}\n\n//---------------------------------------------------------------------------\n/* A goal to shoot an actor. */\n//---------------------------------------------------------------------------\nexport class GoalShootActor extends GoalBase {\n    public targetActor: SentientActor;\n\n    constructor(actor, targetActor) {\n        super(actor);\n        this.setType('GoalShootActor');\n        this.targetActor = targetActor;\n    }\n\n    public activate() {\n        const invEq = this.actor.getInvEq();\n        const shotItem = invEq.unequipAndGetItem('missile', 1, 0);\n\n        if (!shotItem) {\n            return;\n        }\n\n        const [eX, eY] = this.targetActor.getXY();\n        const mComp = new Component.Missile(this.actor);\n        mComp.setTargetXY(eX, eY);\n        mComp.setDamage(RG.getMissileDamage(this.actor, shotItem));\n        mComp.setAttack(RG.getMissileAttack(this.actor, shotItem));\n        mComp.setRange(RG.getMissileRange(this.actor, shotItem));\n        shotItem.add(mComp);\n\n        this.dbg(`${this.getType()} added Missile comp`);\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.status = GoalStatus.GOAL_COMPLETED;\n        return this.status;\n    }\n\n}\n\n//---------------------------------------------------------------------------\n/* An actor goal to explore the given area. */\n//---------------------------------------------------------------------------\nexport class GoalExplore extends GoalBase {\n\n    public dur: number;\n    public dX: number;\n    public dY: number;\n    public exploreCb: (x: number, y: number) => void;\n\n    constructor(actor, dur = -1) {\n        super(actor);\n        this.setType('GoalExplore');\n        this.dur = dur;\n    }\n\n    public activate() {\n        this.setNewPassableDir();\n        this.dbg(`activate Explore dX,dY: ${this.dX},${this.dY}`);\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    /* Can be used to set the Explore callback called after each turn. */\n    public setCallback(cb) {\n        this.exploreCb = cb;\n    }\n\n    public setNewPassableDir() {\n        let maxTries = 5;\n        let [dX, dY] = RNG.getRandDir();\n        while (maxTries > 0 && !this.isDirPassable(dX, dY)) {\n            [dX, dY] = RNG.getRandDir();\n            --maxTries;\n        }\n        this.dX = dX;\n        this.dY = dY;\n    }\n\n    /* Returns true if given dX,dY is passable direction from actor's current\n     * location. */\n    public isDirPassable(dX, dY) {\n        const [aX, aY] = this.actor.getXY();\n        const newX = aX + dX;\n        const newY = aY + dY;\n        return this.actor.getLevel().getMap().isPassable(newX, newY);\n    }\n\n    public shouldMoveTo(map, x, y) {\n        const cell = map.getCell(x, y);\n        if (cell.isPassable()) {\n            return !cell.isDangerous();\n        }\n        return false;\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.checkChangeDir();\n        --this.dur;\n        const [aX, aY] = this.actor.getXY();\n        const newX = aX + this.dX;\n        const newY = aY + this.dY;\n        const level = this.actor.getLevel();\n        const map = level.getMap();\n        if (map.hasXY(newX, newY)) {\n            if (this.shouldMoveTo(map, newX, newY)) {\n                const movComp = new Component.Movement(newX, newY, level);\n                this.actor.add(movComp);\n            }\n            else if (!this.canOpenDoorAt(map, newX, newY)) {\n                this.setNewPassableDir();\n            }\n        }\n        else {\n            this.setNewPassableDir();\n        }\n        if (this.dur === 0) {\n            this.status = GoalStatus.GOAL_COMPLETED;\n        }\n        if (this.exploreCb) {\n            this.exploreCb(newX, newY);\n        }\n        return this.status;\n    }\n\n    public canOpenDoorAt(map, x, y) {\n        const cell = map.getCell(x, y);\n        if (cell.hasDoor()) {\n            const door = cell.getPropType('door')[0];\n            if (door.canToggle()) {\n                const comp = new Component.OpenDoor();\n                comp.setDoor(door);\n                this.actor.add(comp);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Checks if the actor should change movement direction. */\n    public checkChangeDir() {\n        const changeDir = RNG.getUniform();\n        if (changeDir <= 0.07) {\n            const newDx = this.changeDir(this.dX);\n            if (this.isDirPassable(newDx, this.dY)) {\n                if (newDx !== 0 || this.dY !== 0) {\n                    this.dX = newDx;\n                }\n            }\n        }\n        else if (changeDir <= 0.14) {\n            const newDy = this.changeDir(this.dY);\n            if (this.isDirPassable(this.dX, newDy)) {\n                if (newDy !== 0 || this.dX !== 0) {\n                    this.dY = newDy;\n                }\n            }\n        }\n    }\n\n    public changeDir(dir): number {\n        switch (dir) {\n            case 0: return RNG.arrayGetRand([-1, 1]);\n            case 1: return 0;\n            case -1: return 0;\n            default: return dir;\n        }\n    }\n\n    public terminate() {\n        this.status = GoalStatus.GOAL_COMPLETED;\n    }\n\n}\nGoal.Explore = GoalExplore;\n\n//---------------------------------------------------------------------------\n/* Goal for fleeing from a given actor. */\n//---------------------------------------------------------------------------\nexport class GoalFleeFromActor extends GoalBase {\n    public targetActor: SentientActor;\n\n    constructor(actor, targetActor) {\n        super(actor);\n        this.setType('GoalFleeFromActor');\n        this.targetActor = targetActor;\n    }\n\n    public activate(): void {\n        const brain = this.actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const actorCells = Brain.findCellsWithActors(this.actor, seenCells);\n\n        let foundCell = null;\n        actorCells.forEach(cell => {\n            const actors = cell.getActors();\n            if (actors) {\n                actors.forEach(actor => {\n                    if (actor.getID() === this.targetActor.getID()) {\n                        foundCell = cell;\n                    }\n                });\n            }\n        });\n\n        if (foundCell) {\n            const thisX = this.actor.getX();\n            const thisY = this.actor.getY();\n            const dXdY = RG.dXdYUnit(this.actor, this.targetActor);\n            const newX = thisX + dXdY[0];\n            const newY = thisY + dXdY[1];\n            const level = this.actor.getLevel();\n\n            const fleeOptions = [[newX, newY], [thisX, newY], [newX, thisY]];\n            RNG.shuffle(fleeOptions);\n            for (let i = 0; i < 3; i++) {\n                const [x, y] = fleeOptions[i];\n                if (level.getMap().isPassable(x, y)) {\n                    const movComp = new Component.Movement(x, y, level);\n                    this.dbg(`${this.getType()} movComp to ${x},${y}`);\n                    this.actor.add(movComp);\n                    this.status = GoalStatus.GOAL_COMPLETED;\n                    break;\n                }\n            }\n\n            if (this.status !== GoalStatus.GOAL_COMPLETED) {\n                this.status = GoalStatus.GOAL_FAILED;\n                this.planBGoal = new Goal.AttackActor(this.actor,\n                    this.targetActor);\n            }\n        }\n        else {\n            this.status = GoalStatus.GOAL_FAILED;\n        }\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        return this.status;\n    }\n\n}\nGoal.FleeFromActor = GoalFleeFromActor;\n\n/* Goal used when actor is casting a spell. Spell is always an instantaneous\n * goal taking exactly one turn to process. */\nexport class GoalCastSpell extends GoalBase {\n\n    public spell: any;\n    public spellArgs: SpellArgs;\n\n    constructor(actor, spell, spellArgs) {\n        super(actor);\n        this.setType('GoalCastSpell');\n        this.spell = spell;\n        this.spellArgs = spellArgs;\n    }\n\n    public activate(): void {\n        const castFunc = this.spell.getCastFunc(this.actor, this.spellArgs);\n        castFunc();\n        this.status = GoalStatus.GOAL_COMPLETED;\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        return this.status;\n    }\n}\nGoal.CastSpell = GoalCastSpell;\n\n//---------------------------------------------------------------------------\n/* An actor goal to follow a specific actor */\n//---------------------------------------------------------------------------\nexport class GoalFollow extends GoalBase {\n    public targetActor: SentientActor;\n\n    constructor(actor, targetActor) {\n        super(actor);\n        this.setType('GoalFollow');\n        this.targetActor = targetActor;\n    }\n\n    public activate() {\n        if (this.actor.getBrain().canSeeActor(this.targetActor)) {\n            this.status = GoalStatus.GOAL_ACTIVE;\n        }\n    }\n\n    public process() {\n        this.activateIfInactive();\n        const brain = this.actor.getBrain();\n        const [x, y] = this.actor.getXY();\n\n        if (brain.canSeeActor(this.targetActor)) {\n            const [dxU, dyU] = RG.dXdYUnit(this.targetActor, this.actor);\n            const [dx, dy] = RG.dXdY(this.targetActor, this.actor);\n            let newX = x + dxU;\n            let newY = y + dyU;\n            const level = this.targetActor.getLevel();\n            const map = level.getMap();\n\n            if (Math.abs(dx) <= 1 && Math.abs(dy) <= 1) {\n                // Goal OK, already very close\n                this.status = GoalStatus.GOAL_ACTIVE;\n            } // Simple dXdY movement\n            else if (map.isPassable(newX, newY)) {\n                const movComp = new Component.Movement(newX, newY, level);\n                this.actor.add(movComp);\n            }\n            else { // Apply proper path finding\n                const [tX, tY] = this.targetActor.getXY();\n                const path = Path.getActorToActorPath(map, x, y, tX, tY);\n                if (path.length > 0) {\n                    [newX, newY] = [path[0].x, path[0].y];\n                    if (map.isPassable(newX, newY)) {\n                        const movComp = new Component.Movement(\n                            newX, newY, level);\n                        this.actor.add(movComp);\n                    }\n                    else {\n                        this.status = GoalStatus.GOAL_FAILED;\n                    }\n                }\n                else { // No path to follow the actor\n                    this.status = GoalStatus.GOAL_FAILED;\n                }\n            }\n        }\n        else {\n            this.status = GoalStatus.GOAL_FAILED;\n        }\n        return this.status;\n    }\n\n}\nGoal.Follow = GoalFollow;\n\n/* Goal for picking up items. */\nexport class GoalGetItem extends GoalBase {\n    public targetItem: Item.ItemBase;\n\n    constructor(actor, targetItem) {\n        super(actor);\n        this.setType('GoalGetItem');\n        this.targetItem = targetItem;\n    }\n\n    public activate() {\n        // Options for getting an item are:\n        //   1. Find it\n        const itemId = this.targetItem.getID();\n        const brain = this.actor.getBrain();\n        const seenCells = brain.getSeenCells();\n\n        // Check if we can see the item here\n        let foundCell = null;\n        seenCells.forEach(cell => {\n            if (cell.hasItems()) {\n                const items = cell.getItems();\n                const item = items.find(i => i.getID() === itemId);\n                if (item) {\n                    foundCell = cell;\n                }\n            }\n        });\n\n        if (foundCell) {\n            const [x, y] = this.actor.getXY();\n            const [iX, iY] = foundCell.getXY();\n            // If on top of it, pick it up\n            if (x === iX && y === iY) {\n                const pickup = new Component.Pickup();\n                this.actor.add(pickup);\n                this.status = GoalStatus.GOAL_COMPLETED;\n            }\n            else { // otherwise try to move closer\n                const goal = new GoalFollowPath(this.actor, [iX, iY]);\n                this.removeAllSubGoals();\n                this.addSubGoal(goal);\n                this.status = this.processSubGoals();\n            }\n        }\n        else {\n            this.status = GoalStatus.GOAL_FAILED;\n        }\n    }\n\n    public process() {\n        this.activateIfInactive();\n        if (this.hasSubGoals()) {\n            this.status = this.processSubGoals();\n        }\n        return this.status;\n    }\n\n}\nGoal.GetItem = GoalGetItem;\n//---------------------------------------------------------------------------\n/* An actor goal to explore the given area. */\n//---------------------------------------------------------------------------\nexport class GoalOrders extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalOrders');\n    }\n\n    public activate() {\n        this.status = GoalStatus.GOAL_ACTIVE;\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n}\nGoal.Orders = GoalOrders;\n\n/* Goal for shopkeeper. */\nexport class GoalShopkeeper extends GoalBase {\n    public x: number;\n    public y: number;\n    public hasShouted: boolean;\n\n    constructor(actor, x, y) {\n        super(actor);\n        this.setType('GoalShopkeeper');\n        this.x = x;\n        this.y = y;\n        this.hasShouted = false;\n        this.subGoals = [];\n    }\n\n    public activate() {\n        this.status = GoalStatus.GOAL_ACTIVE;\n        // If on a shop element, do something\n        const cell = this.actor.getCell();\n        if (cell.hasShop()) {\n            // TODO verify we're in correct shop\n            // Rearrange items\n            // Persuade actors to sell their stuff\n            if (RG.isSuccess(0.6)) {\n                moveToRandomDir(this.actor);\n            }\n            else if (!this.hasShouted) {\n                const comm = new Component.Communication();\n                comm.addMsg({src: this.actor,\n                    type: 'Shout', shout: 'Hello traveller!'});\n                this.actor.add(comm);\n            }\n            else if (!cell.hasItems()) {\n                // Spawn items\n            }\n        }\n        else {\n            // Else find a path back to shop\n            const goal = new GoalFollowPath(this.actor, [this.x, this.y]);\n            // this.removeAllSubGoals();\n            this.addSubGoal(goal);\n            this.status = this.processSubGoals();\n        }\n    }\n\n    public process() {\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n}\nGoal.Shopkeeper = GoalShopkeeper;\n\n\nexport class GoalGoHome extends GoalBase {\n    public x: number;\n    public y: number;\n    public maxDist: number;\n    public timeToFindPath: number;\n\n    constructor(actor, x, y, dist) {\n        super(actor);\n        this.setType('GoalGoHome');\n        this.x = x;\n        this.y = y;\n        this.maxDist = dist;\n        this.subGoals = [];\n        this.timeToFindPath = RNG.getUniformInt(100, 200);\n    }\n\n    public activate(): void {\n        this.status = GoalStatus.GOAL_ACTIVE;\n        const cell = this.actor.getCell();\n        this.timeToFindPath--;\n        if (cell.getBaseElem().getType() === 'floorhouse') {\n            if (RG.isSuccess(0.03)) {\n                const comm = new Component.Communication();\n                comm.addMsg({src: this.actor,\n                    type: 'Shout', shout: 'Home sweet home!'});\n                this.actor.add(comm);\n            }\n            else {\n                moveToRandomDir(this.actor);\n            }\n        }\n        else if (RG.withinRange(this.maxDist, [this.x, this.y], this.actor)) {\n            moveToRandomDir(this.actor);\n        }\n        else if (this.timeToFindPath <= 0) {\n            const goal = new GoalFollowPath(this.actor, [this.x, this.y]);\n            this.addSubGoal(goal);\n            this.status = this.processSubGoals();\n            this.timeToFindPath = RNG.getUniformInt(100, 200);\n        }\n        else {\n            // TODO try to move closer to home in smarter way\n            moveToRandomDir(this.actor);\n        }\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n}\nGoal.GoHome = GoalGoHome;\n\n/* Move the given actor to random direction. */\nfunction moveToRandomDir(actor: SentientActor): void {\n    const level = actor.getLevel();\n    const map = level.getMap();\n\n    let dir = RNG.getRandDir();\n    let xy = RG.newXYFromDir(dir, actor);\n    let tries = 10;\n    while (!map.hasXY(xy[0], xy[1])) {\n        dir = RNG.getRandDir();\n        xy = RG.newXYFromDir(dir, actor);\n        if (--tries === 0) {break;}\n    }\n    if (tries > 0) {\n        const movComp = new Component.Movement(xy[0], xy[1], level);\n        actor.add(movComp);\n    }\n    // Tried to move outside map\n}\nGoal.moveToRandomDir = moveToRandomDir;\n\nfunction moveActorTo(actor: SentientActor, cell: Cell): void {\n    const xy = cell.getXY();\n    const level = actor.getLevel();\n    if (level.getMap().isPassable(xy[0], xy[1])) {\n        const movComp = new Component.Movement(xy[0], xy[1], level);\n        actor.add(movComp);\n    }\n}\nGoal.moveActorTo = moveActorTo;\n\n\n/* TODO Class used for monitoring the Goal transitions etc. */\nexport class GoalMonitor {\n    public goal: GoalBase;\n\n    constructor(goal) {\n        this.goal = goal;\n    }\n\n}\nGoal.Monitor = GoalMonitor;\n\nexport class GoalCommunicate extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalCommunicate');\n    }\n\n    public activate(): void {\n        this.communicateEnemies();\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        return GoalStatus.GOAL_COMPLETED;\n    }\n\n    public communicateEnemies(): void {\n        const brain = this.actor.getBrain();\n        const memory: Memory = brain.getMemory();\n        const enemies = memory.getEnemyActors();\n        const seenCells = brain.getSeenCells();\n        const friendCell = brain.findFriendCell(seenCells);\n        const friendActor = friendCell.getActors()[0];\n\n        const comComp = new Component.Communication();\n        const msg = {type: 'Enemies', enemies, src: this.actor};\n        comComp.addMsg(msg);\n\n        friendActor.add(comComp);\n        memory.addCommunicationWith(friendActor);\n    }\n\n}\nGoal.Communicate = GoalCommunicate;\n\nfunction statusToString(status: GoalStatus): string {\n    return Goal.StatusString[status];\n}\n","\n/* File contains spell definitions for the game.\n * Each spell should contain at least:\n *   1. cast()\n *   2. getSelectionObject()\n *   3. aiShouldCastSpell (optional)\n *     - Return true if spell should be cast\n *     - Set also args for the spell (dir, target etc)\n *\n * where 3 is used with spellcaster AI. Without this, the spell cannot be\n * used by the AI.\n *\n * Some optional functions which can be defined:\n *  For any spell inflicting damage:\n *    onHit(actor, src): Called when spell deals damage to actor.\n *\n *  For spells affecting single cells:\n *    preCallback(cell): Called when spell will affect cell\n *    callback(cell): Called when spell has affected cell\n *    postCallback(cell): Called when spell has affected cell\n *\n *  For area-affecting/ray spells:\n *    onCellCallback(cell): Called for each affected cell\n *    NOTE: For damage effects, you can use onHit()\n */\nimport RG from './rg';\nimport {Keys} from './keymap';\nimport * as Component from './component';\nimport * as Element from './element';\nimport {Random} from './random';\nimport {SentientActor} from './actor';\nimport {Dice} from './dice';\nimport {ObjectShell} from './objectshellparser';\nimport {Brain} from './brain';\nimport {Geometry} from './geometry';\nimport {Path} from './path';\nimport {IMenu, SelectionObject, PlayerMissileMenu} from './menu';\n\nimport {TCoord} from './interfaces';\ntype Cell = import('./map.cell').Cell;\n\nconst RNG = Random.getRNG();\nconst {KeyMap} = Keys;\n\nconst create = Component.create;\ntype ComponentBase = Component.ComponentBase;\n\n// const NO_SELECTION_NEEDED = () => {};\n\nexport const Spell: any = {};\n\ntype AISpellCb = (actor, args: SpellArgs) => void;\ntype SpellTarget = SentientActor | Cell;\ntype AISpellFunc = (actor: SentientActor, target: SpellTarget, cb: AISpellCb)\n    => boolean;\n\n/* Used for sorting the spells by spell power. */\n/* function compareSpells(s1, s2) {\n    if (s1.getPower() < s2.getPower()) {\n        return -1;\n    }\n    if (s2.getPower() > s1.getPower()) {\n        return 1;\n    }\n    return 0;\n}\n*/\n\nconst addPoisonEffect = (actor, src) => {\n    const expLevel = src.get('Experience').getExpLevel();\n    const dmgDie = new Dice(1, expLevel, Math.ceil(expLevel / 2));\n    let prob = 0.07 * expLevel;\n    if (prob >= 0.5) {prob = 0.5;}\n    const durDie = new Dice(2, expLevel + 5, Math.ceil(expLevel / 2));\n    const dur = durDie.roll();\n    poisonActor(actor, src, dur, dmgDie, prob);\n};\nSpell.addPoisonEffect = addPoisonEffect;\n\nconst poisonActor = (actor, src, dur, dmgDie, prob) => {\n    const poisonComp = new Component.Poison();\n    poisonComp.setDamageDie(dmgDie);\n\n    const expiration = new Component.Expiration();\n    expiration.addEffect(poisonComp, dur);\n\n    // Need owner to assign exp correctly\n    poisonComp.setSource(src);\n\n    poisonComp.setProb(prob);\n    actor.add(poisonComp);\n    actor.add(expiration);\n};\n\nconst addFadingActorToCell = (actor, cell: Cell, spell) => {\n    const caster = spell.getCaster();\n    const level = caster.getLevel();\n    level.addActor(actor, cell.getX(), cell.getY());\n\n    const fadingComp = new Component.Fading();\n    const duration = spell.getDuration();\n    fadingComp.setDuration(duration);\n    actor.add(fadingComp);\n\n    const created = new Component.Created();\n    created.setCreator(caster);\n    actor.add(created);\n};\nSpell.addFadingActorToCell = addFadingActorToCell;\n\n/* Called at the end of AI querying if spell targeting a cell next to\n * it should be cast. */\nconst aiSpellCellDone = (actor, target, cb) => {\n    const dir = [target.getX() - actor.getX(),\n        target.getY() - actor.getY()\n    ];\n    const newArgs = {dir, src: actor};\n    cb(actor, newArgs);\n};\nSpell.aiSpellCellDone = aiSpellCellDone;\n\n/* Used to determine if AI should attack enemy adjacent to it with a spell.\n * By default, picks strongest enemy based on HP, but args.compFunc can be\n * given to use custom function. Callback cb will be called eventually with\n * cb(actor, {dir: [x, y], src: actor}).\n */\nconst aiSpellCellEnemy = (args, cb): boolean => {\n    const {actor, actorCellsAround} = args;\n    let strongest = null;\n    actorCellsAround.forEach((cell: Cell) => {\n        const actors = cell.getActors();\n        actors.forEach(otherActor => {\n            if (actor.isEnemy(otherActor)) {\n                const health = otherActor.get('Health');\n                if (!strongest) {\n                    strongest = otherActor;\n                }\n                else if (args.compFunc) {\n                    if (args.compFunc(strongest, otherActor)) {\n                        strongest = otherActor;\n                    }\n                }\n                else {\n                    const maxHP = health.getMaxHP();\n                    const strHP = strongest.get('Health').getMaxHP();\n                    if (maxHP > strHP) {strongest = otherActor;}\n                }\n            }\n        });\n    });\n\n    if (strongest) {\n        aiSpellCellDone(actor, strongest, cb);\n        return true;\n    }\n    return false;\n};\nSpell.aiSpellCellEnemy = aiSpellCellEnemy;\n\n/* Can be used to determine if AI should cast a close proximity spell to a\n * friendly target. Custom \"intelligence\" can be provided by giving\n * args.compFunc which will filter the friend actors.\n */\nconst aiSpellCellFriend = (args, cb) => {\n    const {actor, actorCellsAround} = args;\n    let suitable = null;\n    actorCellsAround.forEach((cell: Cell) => {\n        const actors = cell.getActors();\n        actors.forEach(otherActor => {\n            if (actor.isFriend(otherActor)) {\n                if (!suitable) {\n                    suitable = otherActor;\n                }\n                else if (args.compFunc) {\n                    if (args.compFunc(suitable, otherActor)) {\n                        suitable = otherActor;\n                    }\n                }\n                else { // If compFunc not given, use default logic\n                    const h1 = suitable.get('Health');\n                    const h2 = otherActor.get('Health');\n                    if (h2.hpLost() > h1.hpLost()) {\n                        suitable = otherActor;\n                    }\n                }\n            }\n        });\n    });\n\n    if (suitable) {\n        aiSpellCellDone(actor, suitable, cb);\n        return true;\n    }\n    return false;\n};\nSpell.aiSpellCellFriend = aiSpellCellFriend;\n\n/* Used to determine if AI caster should cast a spell on itself. */\nconst aiSpellCellSelf = (args, cb) => {\n    const {actor} = args;\n    let shouldCast = true;\n    if (args.compFunc) {\n        if (args.compFunc(actor)) {\n            shouldCast = true;\n        }\n        else {\n            shouldCast = false;\n        }\n    }\n\n    if (shouldCast) {\n        aiSpellCellDone(actor, actor, cb);\n    }\n    return shouldCast;\n};\nSpell.aiSpellCellSelf = aiSpellCellSelf;\n\n/* Returns selection object for spell which is cast on self. */\nSpell.getSelectionObjectSelf = (spell, actor) => {\n    const func = () => {\n        const spellCast = new Component.SpellCast();\n        spellCast.setSource(actor);\n        spellCast.setSpell(spell);\n        spellCast.setArgs({src: actor});\n        actor.add(spellCast);\n    };\n    return func;\n};\n\n/* Returns selection object for spell which required choosing a direction. */\nSpell.getSelectionObjectDir = (spell, actor, msg) => {\n    RG.gameMsg(msg);\n    return {\n        // showMsg: () => RG.gameMsg(msg),\n        select: (code) => {\n            const args: any = {\n                dir: KeyMap.getDir(code)\n            };\n            if (args.dir) {\n                args.src = actor;\n                return () => {\n                    const spellCast = new Component.SpellCast();\n                    spellCast.setSource(actor);\n                    spellCast.setSpell(spell);\n                    spellCast.setArgs(args);\n                    actor.add(spellCast);\n                };\n            }\n            return null;\n        },\n        showMenu: () => false\n    };\n};\n\ninterface SpellAddComp {\n    duration?: number;\n    comp: ComponentBase;\n}\n\ntype SpellRemoveComp = string[];\n\nexport interface SpellArgs {\n    addComp?: SpellAddComp;\n    callback?: (any) => void;\n    damage?: number;\n    damageType?: string;\n    destroyItem?: boolean;\n    dir?: TCoord;\n    from?: TCoord;\n    to?: TCoord;\n    postCallback?: () => void;\n    range?: number;\n    removeComp?: SpellRemoveComp;\n    spell: any; // TODO fix this\n    src: SentientActor;\n    target?: SentientActor;\n    targetComp?: string;\n    set?: string;\n    value?: number;\n}\n\n/* Returns args object for directional spell. */\nconst getDirSpellArgs = function(spell, args): SpellArgs {\n    const src = args.src;\n    const obj = {\n        from: src.getXY(),\n        dir: args.dir,\n        spell,\n        src: args.src\n    };\n    return obj;\n};\nSpell.getDirSpellArgs = getDirSpellArgs;\n\ntype Spell = any;\n\n//------------------------------------------------------\n/* @class SpellBook\n * A list of spells known by a single actor. */\n//------------------------------------------------------\nexport class SpellBook {\n    protected _actor: SentientActor;\n    protected _spells: Spell[];\n\n    constructor(actor: SentientActor) {\n        this._actor = actor;\n        this._spells = [];\n        if (RG.isNullOrUndef([this._actor])) {\n            RG.err('Spell.SpellBook', 'new',\n                'actor must be given.');\n        }\n    }\n\n    public getActor(): SentientActor {\n        return this._actor;\n    }\n\n    public addSpell(spell: Spell): void {\n        this._spells.push(spell);\n        spell.setCaster(this.getActor());\n    }\n\n    public getSpells(): Spell[] {\n        return this._spells;\n    }\n\n    public equals(rhs: SpellBook): boolean {\n        const rhsSpells = rhs.getSpells();\n        let equals = true;\n        this._spells.forEach((spell, i) => {\n            equals = equals && spell.equals(rhsSpells[i]);\n            if (!equals) {\n                console.log('Spell', spell.getName(), ' caused error');\n            }\n        });\n        return equals;\n    }\n\n    /* Returns the object which is used in Brain.Player to make the player\n     * selection of spell casting. */\n    public getSelectionObject(): SelectionObject {\n        const powerSorted: Spell[] = this._spells;\n        return {\n            select: (code: number) => {\n                const selection = Keys.codeToIndex(code);\n                if (selection < powerSorted.length) {\n                    return powerSorted[selection].getSelectionObject(this._actor);\n                }\n                return null;\n            },\n            getMenu: (): IMenu => {\n                RG.gameMsg('Please select a spell to cast:');\n                const indices = Keys.menuIndices.slice(0, this._spells.length);\n                const obj = {\n                    pre: ['You know the following spells:']\n                };\n                powerSorted.forEach((spell, index) => {\n                    obj[indices[index]] = spell.toString();\n                });\n                return obj;\n            },\n            showMenu: () => true\n        };\n    }\n\n    public toJSON(): any {\n        return {\n            spells: this._spells.map(spell => spell.toJSON())\n        };\n    }\n\n}\nSpell.SpellBook = SpellBook;\n\n//------------------------------------------------------\n/* @class SpellBase\n * Base object for all spells. */\n//------------------------------------------------------\nexport const SpellBase = function(name: string, power: number) {\n    this._name = name;\n    this._power = power || 5;\n    this._caster = null;\n    this._dice = {};\n    this._range = 0;\n    this.setName(name);\n};\n\nSpellBase.prototype.setCaster = function(caster: SentientActor): void {\n   this._caster = caster;\n};\n\nSpellBase.prototype.getCaster = function(): SentientActor {\n    return this._caster;\n};\n\nSpellBase.prototype.setName = function(name: string): void {\n    const nameSplit = name.split(/\\s+/);\n    const capNames = [];\n    nameSplit.forEach(sName => {\n        capNames.push(sName.capitalize());\n    });\n    this._new = capNames.join('');\n};\n\nSpellBase.prototype.getName = function(): string {\n    return this._name;\n};\n\nSpellBase.prototype.getPower = function(): number {\n    return this._power;\n};\n\nSpellBase.prototype.canCast = function(): boolean {\n    const spellPower = this._caster.get('SpellPower');\n    const pp = spellPower.getPP();\n    return pp >= this.getCastingPower();\n};\n\n/* Returns power required to cast this spell. The value is affected by\n * caster spell casting affinity. */\nSpellBase.prototype.getCastingPower = function(): number {\n    let castPower = this._power;\n    const expLevel = this._caster.get('Experience').getExpLevel();\n    castPower -= Math.ceil(expLevel / 3);\n    if (this._caster.has('Skills')) {\n        const skills = this._caster.get('Skills');\n        const castLevel = skills.getLevel('SpellCasting');\n        castPower -= Math.ceil(castLevel / 2);\n    }\n\n    // Cannot reduce power below 50% of original\n    const halfPower = Math.round(0.50 * this._power);\n    if (castPower < halfPower) {return halfPower;}\n    return castPower;\n};\n\nSpellBase.prototype.getRange = function(): number {\n    return this._range;\n};\n\nSpellBase.prototype.setRange = function(range: number): void {\n    this._range = range;\n};\n\nSpellBase.prototype.getDuration = function(perLevel = 1): number {\n    let dur = 0;\n    if (this._dice.duration) {\n        dur = this._dice.duration.roll();\n    }\n    if (perLevel > 0) {\n        const expLevel = this._caster.get('Experience').getExpLevel();\n        dur += Math.round(expLevel / perLevel);\n    }\n    return dur;\n};\n\nSpellBase.prototype.getDamage = function(perLevel = 1): number {\n    let damage = 0;\n    if (this._dice.damage) {\n        damage = this._dice.damage.roll();\n    }\n    const expLevel = this._caster.get('Experience').getExpLevel();\n    damage += Math.round(expLevel / perLevel);\n    return damage;\n};\n\nSpellBase.prototype.setPower = function(power: number) {this._power = power;};\n\ntype CastFunc = () => void;\n\nSpellBase.prototype.getCastFunc = function(actor, args: SpellArgs): CastFunc {\n    if (args.dir || args.target || args.src) {\n        args.src = actor;\n        return () => {\n            const spellCast = new Component.SpellCast();\n            spellCast.setSource(actor);\n            spellCast.setSpell(this);\n            spellCast.setArgs(args);\n            actor.add(spellCast);\n        };\n    }\n    return null;\n};\n\nSpellBase.prototype.toString = function(): string {\n    const castPower = this.getCastingPower();\n    let str = `${this.getName()} - ${castPower}PP`;\n    if (this._dice.damage) {\n        str += ` Dmg: ${this._dice.damage.toString()}`;\n    }\n    if (this._dice.duration) {\n        str += ` Dur: ${this._dice.duration.toString()}`;\n    }\n    if (this._range > 0) {str += ` R: ${this.getRange()}`;}\n    return str;\n};\n\nSpellBase.prototype.getCasterExpBonus = function(div: number): number {\n    const expLevel = this.getCaster().get('Experience').getExpLevel();\n    return Math.round(expLevel / div);\n};\n\nSpellBase.prototype.getCasterStatBonus = function(\n    statName: string, div: number\n): number {\n    const getter = 'get' + statName.capitalize();\n    const caster = this.getCaster();\n    const statValue = caster[getter]();\n    return Math.round(statValue / div);\n};\n\nSpellBase.prototype.equals = function(rhs): boolean {\n    let equals = this.getName() === rhs.getName();\n    equals = equals && this.getPower() === rhs.getPower();\n    equals = equals && this.getRange() === rhs.getRange();\n    Object.keys(this._dice).forEach(key => {\n        if (rhs._dice[key]) {\n            equals = equals && this._dice[key].equals(rhs._dice[key]);\n        }\n        else {\n            equals = false;\n        }\n    });\n    return equals;\n};\n\nSpellBase.prototype.setDice = function(name: string, dice): void {\n    if (typeof dice === 'string') {\n        this._dice[name] = Dice.create(dice);\n    }\n    else if (dice.roll) {\n        this._dice[name] = dice;\n    }\n};\n\nSpellBase.prototype.getDice = function(name: string): Dice {\n    return this._dice[name];\n};\n\nSpellBase.prototype.hasDice = function(name: string): boolean {\n    if (this._dice.hasOwnProperty(name) && this._dice[name]) {\n        return true;\n    }\n    return false;\n};\n\nSpellBase.prototype.removeDice = function(name: string): void {\n    this._dice[name] = null;\n};\n\nSpellBase.prototype.rollDice = function(name: string): number {\n    if (this._dice[name]) {\n        return this._dice[name].roll();\n    }\n    RG.err('SpellBase', 'rollDice',\n        `No dice with name ${name} found`);\n    return 0;\n};\n\nSpellBase.prototype.aiShouldCastSpell = function(args, cb) {\n    return false;\n};\n\nSpellBase.prototype.toJSON = function(): any {\n    const dice = {};\n    Object.keys(this._dice).forEach(key => {\n        if (!RG.isNullOrUndef([this._dice[key]])) {\n            dice[key] = this._dice[key].toJSON();\n        }\n    });\n    return {\n        name: this.getName(),\n        new: this._new,\n        power: this.getPower(),\n        dice,\n        range: this._range\n    };\n};\n\n//------------------------------------------------------\n/* @class Spell.AddComponent\n * Base class for spells which add components to entities. */\n//------------------------------------------------------\nSpell.AddComponent = function(name, power) {\n    SpellBase.call(this, name, power);\n    this._compName = '';\n    this._dice.duration = Dice.create('1d6 + 3');\n\n};\nRG.extend2(Spell.AddComponent, SpellBase);\n\nSpell.AddComponent.prototype.setDuration = function(die) {\n    this._dice.duration = die;\n};\n\nSpell.AddComponent.prototype.setCompName = function(name) {\n    this._compName = name;\n};\n\nSpell.AddComponent.prototype.getCompName = function() {\n    return this._compName;\n};\n\nSpell.AddComponent.prototype.cast = function(args) {\n    const obj: SpellArgs = getDirSpellArgs(this, args);\n\n    const compToAdd = create(this._compName);\n    if (compToAdd.setSource) {\n        compToAdd.setSource(args.src);\n    }\n    obj.addComp = {comp: compToAdd};\n    if (this.hasDice('duration')) {\n        const dur = this.rollDice('duration');\n        obj.addComp.duration = dur;\n    }\n\n    const spellComp = new Component.SpellCell();\n    spellComp.setArgs(obj);\n    args.src.add(spellComp);\n};\n\nSpell.AddComponent.prototype.getSelectionObject = function(actor) {\n    const msg = 'Select a direction for the spell:';\n    return Spell.getSelectionObjectDir(this, actor, msg);\n};\n\n//------------------------------------------------------\n/* @class Spell.RemoveComponent\n * Base object for spells removing other components. */\n//------------------------------------------------------\nSpell.RemoveComponent = function(name, power) {\n    SpellBase.call(this, name, power);\n    this._compNames = [];\n\n    this.setCompNames = comps => {\n        if (typeof comps === 'string') {\n            this._compNames = [comps];\n        }\n        else {\n            this._compNames = comps;\n        }\n    };\n    this.getCompNames = () => this._compNames;\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        obj.removeComp = this._compNames;\n\n        const spellComp = new Component.SpellCell();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select a direction for the spell:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n};\nRG.extend2(Spell.RemoveComponent, SpellBase);\n\n//------------------------------------------------------\n/* Base class for ranged spells. */\n//------------------------------------------------------\nSpell.Ranged = function(name, power) {\n    SpellBase.call(this, name, power);\n    this._dice.damage = Dice.create('4d4 + 4');\n    this._range = 5;\n\n};\nRG.extend2(Spell.Ranged, SpellBase);\n\nSpell.BoltBase = function(name, power) {\n    Spell.Ranged.call(this, name, power);\n    this.stopOnHit = false; // If true, ray does not pass through actors\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        obj.damageType = this.damageType;\n        obj.damage = this.rollDice('damage');\n        const rayComp = new Component.SpellRay();\n        rayComp.setArgs(obj);\n        args.src.add(rayComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        RG.gameMsg('Select a direction for firing:');\n        return {\n            select: (code) => {\n                const dir = KeyMap.getDir(code);\n                return this.getCastFunc(actor, {dir});\n            },\n            showMenu: () => false\n        };\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        const {actor, enemy} = args;\n        if (!enemy) {return false;}\n\n        const [x0, y0] = [actor.getX(), actor.getY()];\n        const [x1, y1] = [enemy.getX(), enemy.getY()];\n        const lineXY = Geometry.getStraightLine(x0, y0, x1, y1);\n        if (lineXY.length > 1) {\n            const dX = lineXY[1][0] - lineXY[0][0];\n            const dY = lineXY[1][1] - lineXY[0][1];\n            const newArgs = {dir: [dX, dY]};\n            if (typeof cb === 'function') {\n                cb(actor, newArgs);\n            }\n            else {\n                RG.err('Spell.BoltBase', 'aiShouldCastSpell',\n                    'No callback function given!');\n            }\n            return true;\n        }\n        return false;\n    };\n};\nRG.extend2(Spell.BoltBase, Spell.Ranged);\n\n/* Base spell for summoning other actors for help. Derived classes can define\n * postSummonCallback(cell, args, summonedActor) if post-processing is needed\n * for the summoned actor. */\nSpell.SummonBase = function(name, power) {\n    SpellBase.call(this, name, power);\n    this.summonType = ''; // Type of summoned actor\n    this.nActors = 1;\n    this.summonFunc = null; // A constraint for summoned actor\n\n    this.setSummonType = type => {\n        this.summonType = type;\n    };\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        const nActors = Dice.getValue(this.nActors);\n\n        // Will be called by System.SpellEffect\n        obj.callback = cell => {\n            if (nActors === 1) {\n                if (cell.isFree()) {\n                    this._createAndAddActor(cell, args);\n                }\n            }\n            else {\n                const caster = args.src;\n                const map = caster.getLevel().getMap();\n                const [cX, cY] = caster.getXY();\n                const coord = Geometry.getBoxAround(cX, cY, 2);\n                let nPlaced = 0;\n                let watchdog = 30;\n\n                while (nPlaced < nActors) {\n                    const [x, y] = RNG.arrayGetRand(coord);\n                    if (map.hasXY(x, y)) {\n                        const newCell = map.getCell(x, y);\n                        if (newCell.isFree()) {\n                            this._createAndAddActor(newCell, args);\n                            ++nPlaced;\n                        }\n                    }\n                    if (--watchdog === 0) {break;}\n                }\n\n                if (nPlaced < nActors) {\n                    const msg = `${caster.getName()} has no space to summon`;\n                    RG.gameMsg({cell: caster.getCell(), msg});\n                }\n            }\n        };\n\n        const spellComp = new Component.SpellCell();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select a free cell for summoning:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        const {actor, enemy} = args;\n        const friends = Brain.getFriendCellsAround(actor);\n        if (friends.length === 0) {\n            if (typeof cb === 'function') {\n                const summonCell = actor.getBrain().getRandAdjacentFreeCell();\n                if (summonCell) {\n                    args.dir = RG.dXdY(summonCell, actor);\n                    cb(actor, args);\n                    return true;\n                }\n            }\n            else {\n                RG.err(`Spell.${this.getName()}`, 'aiShouldCastSpell',\n                    `No callback function given! enemy: ${enemy}`);\n            }\n        }\n        return false;\n    };\n\n    this._createAndAddActor = (cell, args) => {\n        const [x, y] = [cell.getX(), cell.getY()];\n        const caster = args.src;\n        const level = caster.getLevel();\n\n        // TODO create proper minion\n        const parser = ObjectShell.getParser();\n\n        let minion = null;\n        if (this.summonType !== '') {\n            minion = parser.createActor(this.summonType);\n        }\n        else if (this.summonFunc) {\n            minion = parser.createRandomActor({func: this.summonFunc});\n        }\n        // At the moment is failing, when summoner becomes too high-level\n\n        if (minion) {\n            level.addActor(minion, x, y);\n            minion.getBrain().getMemory().copyMemoryFrom(caster);\n            minion.addFriend(caster);\n            caster.addFriend(minion);\n\n            const casterName = caster.getName();\n            const summonName = minion.getName();\n            const msg = `${casterName} summons ${summonName}!`;\n            RG.gameMsg({cell, msg});\n            if (typeof this.postSummonCallback === 'function') {\n                this.postSummonCallback(cell, args, minion);\n            }\n        }\n        else {\n            let msg = `Failed to create summon type |${this.summonType}|`;\n            if (this.summonFunc) {\n                const funcStr = this.summonFunc.toString();\n                msg = `summonFunc ${funcStr} gave no actors`;\n            }\n            RG.warn('Spell.SummonBase', '_createAndActor', msg);\n        }\n    };\n\n};\nRG.extend2(Spell.SummonBase, SpellBase);\n\n/* Base class for Spell missiles. */\nSpell.Missile = function(name, power) {\n    Spell.Ranged.call(this, name, power);\n    this.ammoName = '';\n};\nRG.extend2(Spell.Missile, Spell.Ranged);\n\nSpell.Missile.prototype.getAmmoName = function() {\n    return this.ammoName;\n};\n\nSpell.Missile.prototype.cast = function(args) {\n    const [x, y] = [args.src.getX(), args.src.getY()];\n    const obj: SpellArgs = {\n        from: [x, y],\n        target: args.target,\n        spell: this,\n        src: args.src,\n        to: [args.target.getX(), args.target.getY()]\n    };\n    obj.damageType = this.damageType;\n    obj.damage = this.getDamage();\n    const missComp = new Component.SpellMissile();\n    missComp.setArgs(obj);\n    args.src.add(missComp);\n};\n\nSpell.Missile.prototype.getSelectionObject = function(actor) {\n    const msg = 'Press [n/p] for next/prev target. [t] to fire.';\n    RG.gameMsg(msg);\n    actor.getBrain().startTargeting();\n\n    // This will be called when player pressed TARGET key\n    const spellCb = () => {\n        const target = actor.getBrain().getTarget();\n        if (target) {\n            console.log('ZZZ Target is', target);\n            const spellCast = new Component.SpellCast();\n            spellCast.setSource(actor);\n            spellCast.setSpell(this);\n            spellCast.setArgs({src: actor, target});\n            actor.add(spellCast);\n            actor.getBrain().cancelTargeting();\n        }\n    };\n    const menuOpts = [\n        {key: Keys.KEY.TARGET, func: spellCb}\n    ];\n    return new PlayerMissileMenu(menuOpts, actor);\n};\n\nSpell.Missile.prototype.aiShouldCastSpell = function(args, cb) {\n    const {actor, enemy} = args;\n    if (enemy) {\n        const [eX, eY] = enemy.getXY();\n        const [aX, aY] = actor.getXY();\n        const getDist = Path.shortestDist(eX, eY, aX, aY);\n        if (getDist <= this.getRange()) {\n            const spellArgs = {target: enemy, src: actor};\n            cb(actor, spellArgs);\n            return true;\n        }\n    }\n    return false;\n};\n\nSpell.AreaBase = function(name, power) {\n    Spell.Ranged.call(this, name, power);\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiEnemyWithinDist(args, cb, this);\n    };\n\n    this.cast = function(args) {\n        const obj: SpellArgs = {\n            src: args.src, range: this.getRange(),\n            spell: this\n        };\n        obj.damageType = this.damageType;\n        obj.damage = this.getDamage();\n        const spellComp = new Component.SpellArea();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n\n        const srcName = args.src.getName();\n        const msg = `Huge ${this.getName()} emanates from ${srcName}`;\n        RG.gameMsg({msg, cell: args.src.getCell()});\n    };\n\n};\nRG.extend2(Spell.AreaBase, Spell.Ranged);\n\n\nfunction aiEnemyWithinDist(args, cb, spell) {\n    const {actor, enemy} = args;\n    if (!enemy) {return false;}\n    const getDist = Brain.distToActor(actor, enemy);\n    if (getDist <= spell.getRange()) {\n        const spellArgs = {target: enemy, src: actor};\n        cb(actor, spellArgs);\n        return true;\n    }\n    return false;\n}\n\n\nSpell.RingBase = function(name, power) {\n    SpellBase.call(this, name, power);\n    SpellBase.call(this, name, power);\n    this._dice.duration = Dice.create('10d10');\n    this._range = 2;\n    this._createdActor = 'Fire';\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        obj.callback = this.castCallback.bind(this);\n\n        const spellComp = new Component.SpellSelf();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n\n    this.castCallback = () => {\n        const parser = ObjectShell.getParser();\n        const caster = this._caster;\n\n        const cells = Brain.getCellsAroundActor(caster, this._range);\n        cells.forEach(cell => {\n            if (cell.isPassable() || cell.hasActors()) {\n                const fire = parser.createActor(this._createdActor);\n                addFadingActorToCell(fire, cell, this);\n            }\n        });\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiEnemyWithinDist(args, cb, this);\n    };\n};\nRG.extend2(Spell.RingBase, SpellBase);\n\n/* Spell that has multiple spell effects. Note that only one effect\n * can have direction, and that will be applied to all multi-spells\n */\nSpell.MultiSpell = function(name, power) {\n    SpellBase.call(this, name, power);\n    this._spells = []; // List of spells to cast\n};\nRG.extend2(Spell.MultiSpell, SpellBase);\n\nSpell.MultiSpell.prototype.addSpell = function(spell): void {\n    this._spells.push(spell);\n};\n\nSpell.MultiSpell.prototype.removeSpells = function(): void {\n    this._spells = [];\n};\n\nSpell.MultiSpell.prototype.canCast = function(): boolean {\n    const spellPower = this._caster.get('SpellPower');\n    const pp = spellPower.getPP();\n    return pp >= this.getCastingPower();\n};\n\nSpell.MultiSpell.prototype.cast = function(args) {\n    this._spells.forEach(spell => {\n        spell.cast(args);\n    });\n};\n\nSpell.MultiSpell.prototype.getCastingPower = function(): number {\n    return this._spells.map(spell => spell.getCastingPower())\n        .reduce((acc, cur) => acc + cur, 0);\n};\n\nSpell.MultiSpell.prototype.getPower = function(): number {\n    return this._spells.map(spell => spell.getPower())\n        .reduce((acc, cur) => acc + cur, 0);\n};\n\nSpell.MultiSpell.prototype.aiShouldCastSpell = function(args, cb) {\n    let ok = true;\n    this._spells.forEach(spell => {\n        ok = ok && spell.aiShouldCastSpell(args, cb);\n    });\n    return ok;\n};\n\nSpell.MultiSpell.prototype.equals = function(rhs): boolean {\n    if (!rhs._spells) {return false;}\n    if (rhs._spells.length !== this._spells.length) {\n        return false;\n    }\n\n    let ok = true;\n    this._spells.forEach((spell, i) => {\n        ok = ok && spell.equals(rhs._spells[i]);\n        if (!ok) {\n            console.log('Spell', spell.getName(), ' caused error');\n        }\n    });\n    return ok;\n};\n\nSpell.MultiSpell.prototype.toJSON = function(): any {\n    const json = SpellBase.prototype.toJSON.call(this);\n    json.spells = this._spells.map(spell => spell.toJSON());\n    return json;\n};\n\nSpell.MultiSpell.prototype.setCaster = function(caster: SentientActor): void {\n    this._spells.forEach(spell => {\n        spell.setCaster(caster);\n    });\n};\n\n/* Used for testing the spells. Adds all spells to given SpellBook. */\nSpell.defineSpell = function(name: string, superclass: any) {\n    const SpellDecl = class extends superclass {\n        constructor(...args: any[]) {\n            super(name, 0);\n            if (this._init && typeof this._init === 'function') {\n                this._init(...args);\n            }\n        }\n        private _init?(...args: any[]): void;\n    };\n    Spell[name] = SpellDecl;\n    return SpellDecl;\n};\n\nSpell.undefineSpell = function(name: string) {\n    delete Spell[name];\n};\n","\nimport RG from '../src/rg';\nimport {Random} from '../src/random';\nimport {Template} from '../src/template';\nimport {Vault} from './tiles.vault';\n\nconst RNG = Random.getRNG();\n\nexport const Castle: any = {};\n\nCastle.corridorDoorThr = 0.2;\nCastle.tiles = {};\n\n// Corners\nCastle.tiles.corner = [\n`\ndir:NW\nname:corner_se\nX=.\nY=#\n\n#X...X#\n#.....#\nY.....#\n......#\nY.....#\n......#\n#######`,\n\n`\ndir:NW\nname:corner_se1\nX=#\nY=#\n\n#X#+#X#\nY.....#\n+.....#\n+...#.#\n+..####\nY...###\n#######`,\n\n`\ndir:NE\nname:corner_sw\nX=.\nY=#\n\n#X...X#\n#.....#\nY......\n#......\nY......\n#.....#\n#######`,\n\n`\ndir:SW\nname:corner_ne\nX=#\nY=.\n\n#X###X#\nY.....#\n......#\n......#\n......#\nY.....#\n#.....#`,\n\n`\ndir:SE\nname:corner_nw\nX=#\nY=#\n\n#X###X#\n#......\nY......\n#......\nY......\n#......\n#.....#`\n];\n\n// Terminals\nCastle.tiles.term = [\n`\ndir:N\nname:term_n\nX=#\nY=#\n\n#X#+#X#\n#.....#\nY.....#\n#.....#\nY.....#\n#.....#\n#######`,\n\n`\ndir:S\nname:term_s\nX=#\nY=#\n\n#X###X#\n#.....#\nY.....#\n#.....#\nY.....#\n#.....#\n###+###`,\n\n`\ndir:E\nname:term_e\nX=#\nY=#\n\n#X###X#\n#.....#\nY.....#\n#.....+\nY.....#\n#.....#\n#######`,\n\n`\ndir:W\nname:term_w\nX=#\nY=#\n\n#X###X#\n#.....#\nY.....#\n+.....#\nY.....#\n#.....#\n#######`\n];\n\n// Entrances\nCastle.tiles.entrance = [\n`\ndir:NEW\nname:entrance_n\nX=.\nY=#\n\n#X...X#\n##...##\nY##.###\n..#+#..\n.......\nY.....#\n#######`,\n\n`\ndir:SEW\nname:entrance_s\nX=#\nY=#\n\n#X###X#\nY......\n..#.#..\n.##+##.\nY#...##\n#.....#\n##...##`,\n\n`\ndir:NSW\nname:entrance_w\nX=#\nY=#\n\n##X..X#\nY.##..#\n...##.#\n....+.#\n...##.#\nY.##..#\n###...#`,\n\n`\ndir:NSE\nname:entrance_e\nX=#\nY=#\n\n#.X.X##\nY.#..##\n#.##.#.\n#....+.\n#..#.#.\nY.##.##\n#.....#`\n];\n\n// Entrances\nCastle.tiles.entranceWall = [\n`\ndir:NEW\nname:entrance_n\nX=.\nY=#\n\n#X...X#\n##...##\nY##.###\n..#+#..\n.......\nY.....#\n##...##`,\n\n`\ndir:SEW\nname:entrance_s\nX=#\nY=#\n\n#X...X#\nY.....#\n..#.#..\n.##+##.\nY#...##\n#.....#\n#.....#`,\n\n`\ndir:NSW\nname:entrance_w\nX=#\nY=#\n\n##X..X#\nY.##..#\n...##.#\n....+.#\n...##.#\nY.##..#\n###...#`,\n\n`\ndir:NSE\nname:entrance_e\nX=.\nY=#\n\n#.#XX##\nY.##.##\n...#.#.\n.....+.\n...#.#.\nY.##.##\n#.....#`\n];\n\n// Corridors\nCastle.tiles.corridor = [\n`\ndir:NS\nname:corridor_east\nX=.\nY=#\n\n#X...X#\n#.....#\nY.....#\n#.....#\nY.....#\n#.....#\n#.....#`,\n\n`\ndir:NS\nname:corridor_west\nX=.\nY=#\n\n#X...X#\n#.....#\nY.....#\n#.....#\nY.....#\n#.....#\n#.....#`,\n\n`\ndir:EW\nname:corridor_north\nX=#\nY=.\n\n#X###X#\n.......\nY......\n.......\nY......\n.......\n#######`,\n\n`\ndir:EW\nname:corridor_south\nX=#\nY=.\n\n#X###X#\n.......\nY......\n.......\nY......\n.......\n#######`\n];\n\n// These provide exit from the main wall, however their exit direction is not\n// specified thus they're treated as normal bi-directional corridors for PCG\nCastle.tiles.corridorWithExit = [\n`\ndir:NS\nname:corridor_east\nX=.\nY=#\n\n#X...X#\n#.....#\nY#....#\n......#\nY#....#\n#.....#\n#.....#`,\n\n`\ndir:NS\nname:corridor_west\nX=.\nY=#\n\n#X...X#\n#.....#\nY....##\n#......\nY....##\n#.....#\n#.....#`,\n\n`\ndir:EW\nname:corridor_north\nX=#\nY=.\n\n#X###X#\n.......\nY......\n.......\nY......\n..#.#..\n###.###`,\n\n`\ndir:EW\nname:corridor_south\nX=#\nY=.\n\n#X#.#X#\n..#.#..\nY......\n.......\nY......\n..#.#..\n#######`\n];\n\n// Branching from the main wall\nCastle.tiles.branch = [\n`\ndir:NSE\nname:corridor_nse\nX=.\nY=#\n\n#X...X#\n#.....#\nY.....#\n#.....+\nY.....#\n#.....#\n#.....#`,\n\n`\ndir:NSW\nname:corridor_nsw\nX=#\nY=#\n\n#X...X#\n#.....#\nY.....#\n+.....#\nY.....#\n#.....#\n##...##`,\n\n`\ndir:NEW\nname:corridor_new\nX=#\nY=.\n\n#X#+#X#\n.......\nY......\n.......\nY......\n.......\n#######`,\n\n`\ndir:SEW\nname:corridor_sew\nX=#\nY=.\n\n#X###X#\n.......\nY......\n.......\nY......\n.......\n###+###`\n];\n\nCastle.tiles.storerooms = [\n`\ndir:S\nname:storeroom_s\nX=#\nY=#\n\n#X###X#\n#.....#\nY.....#\n#.....#\nY.....#\n###|###\n##..&##`,\n\n`\ndir:N\nname:storeroom_n\nX=#\nY=#\n\n#X&..X#\n###|###\nY.....#\n#.....#\nY.....#\n#######\n#######`,\n\n`\ndir:W\nname:storeroom_w\nX=#\nY=#\n\n##X#X##\nY#.#.##\n.#....#\n.|...##\n&#....#\nY#.#.##\n#######`,\n\n`\ndir:E\nname:storeroom_e\nX=#\nY=#\n\n##X#X##\nY#.#.##\n#....#&\n#....|.\n#....#.\nY..#.##\n#######`\n];\n\n/* Living spaces in the castle. */\nCastle.tiles.residential = [\n`\nname:living2x2\nX=#\nY=#\n\n#X+#+X#\n#::#::#\nY::#::#\n#######\nY::#::#\n#::#::#\n##+#+##`,\n\n`\nname:living2x2\ndir:NS\nX=#\nY=#\n\n#X#.#X#\n#:+.+:#\nY:#.#:#\n###.###\nY:#.#:#\n#:+.+:#\n###.###`,\n\n`\nname:living2x2\ndir:NS\nX=#\nY=#\n\n#X#.#X#\nY:#.#:#\n#:+.+:#\n###.###\n#:+.+:#\nY:#.#:#\n###.###`,\n\n`\nname:livingL2S\ndir:S\nX=#\nY=#\n\n#X###X#\n#:::::#\nY:::::#\n###+###\nY:#.#:#\n#:+.+:#\n###.###`,\n\n`\nname:livingL_corner\ndir:NE\nX=#\nY=#\n\n#X#..X#\n#:#+#..\nY:::##.\n#::::#.\nY::::##\n#:::::#\n#######`,\n\n`\nname:living_3dir\ndir:NSE\nX=#\nY=#\n\n#X#.X##\nY:#.#:#\n#:#.#+#\n#:#....\nY:#.###\n#:+.###\n###.###`,\n\n`\nname:living_corner\ndir:NE\nX=#\nY=#\n\n#X#.#X#\n#:#...#\nY:###.#\n#:::+..\nY:::###\n#:::+:#\n#######`,\n\n`\nname:living_corner2\ndir:NE\nX=#\nY=#\n\n#X#.#X#\n#:#...#\nY:###..\n#:::+#.\nY::::##\n#:::::#\n#######`\n\n];\n\n// Filler cell\nCastle.tiles.fillerFloor = `\nname:FILLER\nX=.\nY=.\n\n.X...X.\nY......\n.......\n.......\n.......\nY......\n.......`;\n\nCastle.tiles.fillerWall = `\nname:FILLER\nX=#\nY=#\n\n#X###X#\nY######\n#######\n#######\n#######\nY######\n#######`;\n\n\n/* Returns the starting room for castle generation. */\nCastle.startRoomFunc = function() {\n    const midX = Math.floor(this.tilesX / 2);\n    const north = RNG.getUniform() <= 0.5;\n\n    let templ = null;\n    let y = 0;\n\n    if (north) {\n        templ = this.findTemplate({name: 'entrance_n'});\n    }\n    else {\n        templ = this.findTemplate({name: 'entrance_s'});\n        y = this.tilesY - 1;\n    }\n    return {\n        x: midX, y, room: templ\n    };\n};\n\nCastle.startRoomFuncNorth = function() {\n  const y = 0;\n  const x = Math.floor(this.tilesX / 2);\n  const templ = this.findTemplate({name: 'entrance_n'});\n  return {\n      x, y, room: templ\n  };\n};\n\nCastle.startRoomFuncSouth = function() {\n  const y = this.tilesY - 1;\n  const x = Math.floor(this.tilesX / 2);\n  const templ = this.findTemplate({name: 'entrance_s'});\n  return {\n      x, y, room: templ\n  };\n};\n\nCastle.startRoomFuncWest = function() {\n  const y = Math.floor(this.tilesY / 2);\n  const x = 0;\n  const templ = this.findTemplate({name: 'entrance_w'});\n  return {\n      x, y, room: templ\n  };\n};\n\nCastle.startRoomFuncEast = function() {\n  const y = Math.floor(this.tilesY / 2);\n  const x = this.tilesX - 1;\n  const templ = this.findTemplate({name: 'entrance_e'});\n  return {\n      x, y, room: templ\n  };\n};\n\n/* Start function if two fixed entrances are required. */\nCastle.startFuncTwoGates = function() {\n  const midX = Math.floor(this.tilesX / 2);\n  const gateN = this.findTemplate({name: 'entrance_n'});\n  const gateS = this.findTemplate({name: 'entrance_s'});\n\n  this.addRoom(gateN, midX, 0);\n\n  return {\n    x: midX, y: this.tilesY - 1, room: gateS\n  };\n};\n\n/* Start function if two fixed entrances are required. */\nCastle.startFuncFourGates = function() {\n  const midX = Math.floor(this.tilesX / 2);\n  const midY = Math.floor(this.tilesY / 2);\n\n  const gateN = this.findTemplate({name: 'entrance_n'});\n  const gateS = this.findTemplate({name: 'entrance_s'});\n  const gateE = this.findTemplate({name: 'entrance_e'});\n  const gateW = this.findTemplate({name: 'entrance_w'});\n\n  this.addRoom(gateN, midX, 0);\n  this.addRoom(gateE, this.tilesX - 1, midY);\n  this.addRoom(gateW, 0, midY);\n\n  return {\n    x: midX, y: this.tilesY - 1, room: gateS\n  };\n};\n\n/* Constraint function how to generate the castle level. */\nCastle.constraintFunc = function(x, y, exitReqd) {\n\n    // Constraints for 4 corners\n    if (x === 0 && y === 0) {\n        return this.findTemplate({name: 'corner_nw'});\n    }\n    if (x === 0 && y === this.tilesY - 1) {\n        return this.findTemplate({name: 'corner_sw'});\n    }\n    if (x === this.tilesX - 1 && y === 0) {\n        return this.findTemplate({name: 'corner_ne'});\n    }\n    if (x === this.tilesX - 1 && y === this.tilesY - 1) {\n        return this.findTemplate({name: 'corner_se'});\n    }\n\n    // Northern wall\n    if (y === 0 ) {\n        const ew = this.findTemplate({name: 'corridor_north'});\n        const sew = this.findTemplate({name: 'corridor_sew'});\n        if (sew) {\n            if (exitReqd === 'S') {\n                return sew;\n            }\n            if (RNG.getUniform() < Castle.corridorDoorThr) {\n                return sew;\n            }\n        }\n        return ew;\n    }\n    // Southern wall\n    else if (y === this.tilesY - 1) {\n        const ew = this.findTemplate({name: 'corridor_south'});\n        const corrNew = this.findTemplate({name: 'corridor_new'});\n        if (corrNew) {\n            if (exitReqd === 'N') {\n                return corrNew;\n            }\n            if (RNG.getUniform() < Castle.corridorDoorThr) {\n                return corrNew;\n            }\n        }\n        return ew;\n    }\n\n    // Western wall\n    if (x === 0) {\n        const corrNs = this.findTemplate({name: 'corridor_west'});\n        const corrNse = this.findTemplate({name: 'corridor_nse'});\n        if (corrNse) {\n            if (exitReqd === 'E') {\n                return corrNse;\n            }\n            if (RNG.getUniform() < Castle.corridorDoorThr) {\n                return corrNse;\n            }\n        }\n        return corrNs;\n    }\n    // Eastern wall\n    else if (x === this.tilesX - 1) {\n        const corrNs = this.findTemplate({name: 'corridor_east'});\n        const corrNsw = this.findTemplate({name: 'corridor_nsw'});\n        if (corrNsw) {\n            if (exitReqd === 'W') {\n                return corrNsw;\n            }\n            if (RNG.getUniform() < Castle.corridorDoorThr) {\n                return corrNsw;\n            }\n        }\n        return corrNs;\n    }\n    return null;\n};\n\nCastle.roomCount = -1; // Fill until no more exits\n\nCastle.Models = {};\n\nCastle.Models.full = []\n    .concat(Castle.tiles.branch)\n    .concat(Castle.tiles.corner)\n    .concat(Castle.tiles.term)\n    .concat(Castle.tiles.entrance)\n    .concat(Castle.tiles.corridor)\n    .concat(Castle.tiles.storerooms)\n    .concat(Vault.tiles.vault)\n    .concat(Vault.tiles.corner);\n\nCastle.Models.residential = Castle.tiles.residential.concat(Castle.Models.full);\n\nCastle.Models.outerWall = []\n    .concat(Castle.tiles.entranceWall)\n    .concat(Castle.tiles.corner)\n    .concat(Castle.tiles.corridor)\n    .concat(Castle.tiles.corridorWithExit);\n\nCastle.templates = {};\nCastle.templates.all = Castle.Models.full.map(tile => (\n    Template.createTemplate(tile)\n));\nlet transformed = Template.transformList(Castle.templates.all);\nCastle.templates.all = Castle.templates.all.concat(transformed);\n\nCastle.templates.livingOnly = Castle.tiles.residential.map(tile => (\n    Template.createTemplate(tile)\n));\ntransformed = Template.transformList(Castle.templates.livingOnly);\nCastle.templates.livingOnly = Castle.templates.livingOnly.concat(transformed);\nCastle.templates.residential = Castle.templates.livingOnly.concat(\n    Castle.templates.all);\n","/* eslint comma-dangle: 0 */\n\n// Thanks to www.fantasynamegenerators.com for some tips\n\nexport const Names: any = {};\nimport RG from '../src/rg';\nimport {Random} from '../src/random';\n\nconst RNG = Random.getRNG();\n\n// There are two kinds of names:\n// 1. Generic ones such as Dungeon, City, Town, Vault etc.\n// 2. Unique ones such as Everhold or Ebonfell.\n\n/* As the whole purpose of this module is to generate random names, each\n * function will return randomly picked values of course.\n */\n\nNames.place = {};\n\n/* Generic place names are placed here. */\nNames.place.generic = {\n    branch: [\n        'Hand', 'Foot', 'Small', 'Large'\n    ],\n    dungeon: [\n        'Crypt', 'Catacombs', 'Tombs',\n        'Dungeon', 'Cells',\n        'Cave', 'Grotto', 'Cavern', 'Lair',\n        // 'Burrows', 'Delves',\n        // 'Haunt', 'Point',\n        // 'Vault', 'Tunnels', 'Pits',\n        'Labyrinth' // , 'Maze'\n    ],\n\n    mountain: [\n        'Summit', 'Volcano', 'Tops', 'Peaks',\n        'Bluff', 'Highlands', 'Pinnacle', 'Rise', 'Needle', 'Hills',\n        'Slopes'\n    ],\n\n    face: [\n        'Face', 'Buttress', 'Ridge', 'Shoulder', 'Crag', 'Crest', 'Brink',\n        'Cairn', 'Col', 'Pass', 'Crown', 'Scree', 'Watershed'\n    ],\n\n    forest: [\n        'Grove', 'Wilds', 'Woodlands', 'Timberland', 'Forest', 'Covert',\n        'Woods', 'Thicket', 'Glade',\n    ],\n\n    city: [\n        'Town', 'Village', // 'Township', 'Hamlet',\n        'Fort',\n        // 'Stronghold', 'Fortress', 'Outpost', 'Castle',\n        'City', // 'Capital',\n        // 'Guard'\n    ],\n    lake: [\n        'Basin', 'Cove', 'Reservoir', 'Depths', 'Gorge', 'Lagoon', 'Domain',\n        'Pond', 'Expanse', 'Lake', 'Shallows', 'Loch', 'Falls', 'Rapids',\n    ],\n\n    quarter: [\n        'Market', 'Bazaar',\n        'Plaza', 'Row', 'Works', 'Side', 'Acre',\n        'Garden', 'Park',\n        'Temple', 'Necropolis', 'Cemetery',\n        'Library', 'Arcane',\n        'Royal', 'Slum', 'Living',\n        'Arena', 'Military', 'Barracks'\n    ],\n    area: [\n\n    ]\n\n};\n\nNames.place.unique = {\n    city: {\n        first: [\n            'Stag', 'Small', 'Mud', 'Ebon', 'Silk', 'Spirit', 'Basin',\n            'Shadow', 'Gold', 'Silver', 'Snow', 'Frost', 'Ice', 'Hound',\n            'Moon', 'Dire', 'Ever', 'Iron', 'Ruby', 'Star', 'Crystal',\n            'Glimmer', 'Winters', 'Raven', 'Pine', 'Ever', 'Never', 'Rune',\n            'Glace', 'Lumen', 'Confer', 'Flamen', 'Jotun', 'Troll', 'Winds',\n            'Oaken', 'Willow', 'Anvil', 'Ashen', 'Kosken', 'Storm'\n        ],\n        second: [\n            'guard', 'point', 'fell', 'mire', 'shield', 'crest', 'yard',\n            'minster', 'swallow', 'grasp', 'cliff', 'cross', 'host', 'barrow',\n            'vein', 'view', 'home', 'gard', 'wall', 'heim', 'creek', 'gasp',\n            'mane', 'thorne', 'keep'\n        ]\n    }\n};\n\nNames.place.unique.mountain = {\n    first: Names.place.unique.city.first,\n    second: Names.place.generic.mountain.map(name => ' ' + name.toLowerCase())\n};\nNames.place.unique.dungeon = {\n    first: Names.place.unique.city.first,\n    second: Names.place.generic.dungeon.map(name => ' ' + name.toLowerCase())\n};\n\nNames.actor = {\n\n};\n\nNames.item = {\n    steal: {\n        adjective: [\n            'emerald', 'exquisite', 'golden', 'silver', 'bronze', 'ruby', 'diamond',\n        ],\n        substantive: [\n            'ring', 'amulet', 'plate', 'vase', 'goblet',\n        ],\n        char: {\n            ring: '=', amulet: '^', plate: '_', vase: ']', goblet: ']'\n        }\n    },\n\n    // TODO item names for quest items that need to be gathered\n    gather: {\n        adjective: [\n        ],\n        substantive: [\n        ]\n    }\n};\n\nNames.getItemToStealName = () => {\n    const names = Names.item.steal;\n    const first: string = RNG.arrayGetRand(names.adjective);\n    const second: string = RNG.arrayGetRand(names.substantive);\n    return first.capitalize() + ' ' + second;\n};\n\nNames.getItemToGather = () => {\n    const names = Names.item.gather;\n    const first: string = RNG.arrayGetRand(names.adjective);\n    const second: string = RNG.arrayGetRand(names.substantive);\n    return first.capitalize() + ' ' + second;\n};\n\nNames.getVillageType = () => {\n    return RNG.arrayGetRand(['Village', 'Hamlet', 'Town', 'Township']);\n};\n\nNames.alreadyUsed = new Set(['']);\n\nNames.getUniqueName = type => {\n    const names = Names.place.unique[type];\n    if (names) {\n        let fullName = '';\n        while (Names.alreadyUsed.has(fullName)) {\n            const first: string = RNG.arrayGetRand(names.first);\n            const second: string = RNG.arrayGetRand(names.second);\n            fullName = first + second;\n        }\n        return fullName;\n    }\n    else {\n        RG.err('name-gen.js', 'Names.getUniqueName',\n          `No unique names for type ${type}`);\n    }\n    return '';\n};\n\nNames.getGenericPlaceName = (type) => {\n    const arr = Names.place.generic[type];\n    return RNG.arrayGetRand(arr);\n};\n\nNames.actorCount = 0;\nNames.getActorName = () => {\n    let fullName = 'RandActor' + Names.actorCount++;\n    while (Names.alreadyUsed.has(fullName)) {\n        fullName = 'RandActor' + Names.actorCount++;\n    }\n    return fullName;\n};\n\nconst bookNameGen = {\n    prefix: [\n        'old', 'ancient', 'dusty', 'worn', 'well-preserved', 'heavy',\n        'light', 'thick', 'thin'\n    ],\n    prefix2: [\n        'rune-covered', 'worm-ridden', 'leather', 'hard-cover',\n        'metal-plated', 'decorated', 'exquisite', 'engraved', 'plain',\n        'ordinary', 'aesthetic', 'ornamental', 'skeletal'\n    ],\n    substantive: [\n        'tome', 'book', 'tract', 'codex', 'opus', 'handbook',\n        'volume', 'treatise', 'grimoire', 'rariora', 'compendium',\n        'epitome', 'manuscript'\n    ]\n};\n\nNames.getBookName = () => {\n    let fullName = '';\n    while (Names.alreadyUsed.has(fullName)) {\n        let prefix = RNG.arrayGetRand(bookNameGen.prefix);\n        prefix = prefix.capitalize();\n        const prefix2 = RNG.arrayGetRand(bookNameGen.prefix2);\n        const subst = RNG.arrayGetRand(bookNameGen.substantive);\n        fullName = `${prefix} ${prefix2} ${subst}`;\n    }\n    return fullName;\n};\n\n","\nimport RG from './rg';\n\nexport const OW: any = {};\n\n//---------------------------\n// CONSTANT DEFINITIONS\n//---------------------------\n\n// Straight lines\nOW.LL_WE = '\\u2550'; // ═\nOW.LL_NS = '\\u2551'; // ║\n\n// Corners\nOW.CC_NW = '\\u2554'; // ╔\nOW.CC_NE = '\\u2557'; // ╗\nOW.CC_SW = '\\u255A'; // ╚\nOW.CC_SE = '\\u255D'; // ╝\n\n// Double cross\nOW.XX = '\\u256C'; // ╬\nOW.EMPTY = 'e';\n\n// NSEW\n\nOW.TT_W = '\\u2560'; // ╠\nOW.TT_E = '\\u2563'; // ╣\nOW.TT_N = '\\u2566'; // ╦\nOW.TT_S = '\\u2569'; // ╩\nOW.TERM = '.';\n\n// Features like cities etc.\nOW.WCAPITAL = '\\u2654';\nOW.BCAPITAL = '\\u265A';\nOW.BTOWER = '\\u265C';\nOW.WTOWER = '\\u2656';\nOW.WDUNGEON = '\\u2616';\nOW.MOUNTAIN = '^'; // TODO find better char\n// OW.VILLAGE = '\\u27F0';\nOW.BVILLAGE = '\\u25B2';\nOW.WVILLAGE = '\\u25B3';\n// const CITY = '\\u1CC1';\nOW.VTUNNEL = '|'; // Tunnel between two walls\nOW.HTUNNEL = '-'; // Tunnel between two walls\nOW.MFORT = '\\u27CE';\n\nOW.PROB_BVILLAGE = 0.25;\n\nOW.biomeTypeMap = {\n    arctic: 0,\n    alpine: 1,\n    tundra: 2,\n    taiga: 3,\n    forest: 4,\n    grassland: 5\n};\n\nconst elemStyles = RG.cellStyles.elements;\n// These styles will be used to render the OW map\nOW.classNames = {\n  [OW.TERM]: elemStyles.floor,\n  [OW.MOUNTAIN]: elemStyles.highrock,\n\n  [OW.LL_WE]: elemStyles.mountain,\n  [OW.LL_NS]: elemStyles.mountain,\n  [OW.CC_NW]: elemStyles.mountain,\n  [OW.CC_NE]: elemStyles.mountain,\n  [OW.CC_SW]: elemStyles.mountain,\n  [OW.CC_SE]: elemStyles.mountain,\n  [OW.XX]: elemStyles.mountain,\n  [OW.TT_W ]: elemStyles.mountain,\n  [OW.TT_E ]: elemStyles.mountain,\n  [OW.TT_N ]: elemStyles.mountain,\n  [OW.TT_S ]: elemStyles.mountain,\n  default: 'cell-element-ow'\n\n};\n\nOW.BIOME = {};\nOW.BIOME.ALPINE = 'alpine';\nOW.BIOME.ARCTIC = 'arctic';\nOW.BIOME.TUNDRA = 'tundra';\nOW.BIOME.TAIGA = 'taiga';\n\nOW.ILLEGAL_POS = -1;\nOW.CELL_ANY = 'OW.CELL_ANY'; // Used in matching functions only\n\n// Can connect to east side\nOW.E_HAS_CONN = [\n    OW.XX, OW.TT_W, OW.TT_N, OW.TT_S, OW.CC_NW, OW.CC_SW, OW.LL_WE];\n\n// Can connect to west side\nOW.W_HAS_CONN = [\n    OW.XX, OW.TT_E, OW.TT_N, OW.TT_S, OW.CC_NE, OW.CC_SE, OW.LL_WE];\n\n// Can connect to north\nOW.N_HAS_CONN = [\n    OW.XX, OW.TT_S, OW.TT_W, OW.TT_E, OW.CC_SW, OW.CC_SE, OW.LL_NS];\n\n// Can connect to south\nOW.S_HAS_CONN = [\n    OW.XX, OW.TT_N, OW.TT_W, OW.TT_E, OW.CC_NW, OW.CC_NE, OW.LL_NS];\n\nOW.N_BORDER = [OW.LL_WE, OW.TT_N];\nOW.S_BORDER = [OW.LL_WE, OW.TT_S];\nOW.E_BORDER = [OW.LL_NS, OW.TT_E];\nOW.W_BORDER = [OW.LL_NS, OW.TT_W];\n\nOW.ALL_WALLS = [\n    OW.XX, OW.TT_N, OW.TT_S, OW.TT_E, OW.TT_W,\n    OW.CC_SW, OW.CC_NW, OW.CC_SE, OW.CC_NE,\n    OW.LL_WE, OW.LL_NS\n];\n\nOW.ALL_WALLS_LUT = {};\nOW.ALL_WALLS.forEach(tile => {OW.ALL_WALLS_LUT[tile] = tile;});\n\n// const LINE_WE = [OW.LL_WE, OW.TT_N, OW.TT_S, OW.XX];\n// const LINE_NS = [OW.LL_NS, OW.TT_E, OW.TT_W, OW.XX];\n\n// Used for weighted randomisation of creating west-east walls,\n// favors non-branching walls\nOW.LINE_WE_WEIGHT = {\n    [OW.LL_WE]: 10,\n    [OW.TT_N]: 3,\n    [OW.TT_S]: 3,\n    [OW.XX]: 1\n};\n\n// Used for weighted randomisation of create north-south walls,\n// favors non-branching walls\nOW.LINE_NS_WEIGHT = {\n    [OW.LL_NS]: 10,\n    [OW.TT_E]: 3,\n    [OW.TT_W]: 3,\n    [OW.XX]: 1\n};\n\n// Connection mappings for different 'mountain' tiles\n// If we have an empty cell (e), and neighbouring cell is of type 'first key',\n// and this cell is located in the dir 'second key' of the empty cell,\n// listed cells can be used as empty cell.\nOW.CAN_CONNECT = {\n    [OW.LL_WE]: {\n        N: [], // ═\n               // e\n\n        S: [], // e\n               // ═\n\n        E: OW.E_HAS_CONN, // e═\n        W: OW.W_HAS_CONN // ═e\n    },\n    [OW.LL_NS]: {\n        N: OW.N_HAS_CONN, // ║\n                       // e\n\n        S: OW.S_HAS_CONN, // e\n                       // ║\n        E: [], // e║\n        W: [] // ║e\n    },\n\n    // Corners\n    [OW.CC_NW]: { // ╔\n        N: OW.N_HAS_CONN, // ╔\n                       // e\n        S: [],\n        E: [],\n        W: OW.W_HAS_CONN // ╔e\n    },\n    [OW.CC_NE]: {\n        N: OW.N_HAS_CONN,\n        S: [],\n        E: OW.E_HAS_CONN,\n        W: []\n    },\n    [OW.CC_SW]: { // ╚\n        N: [],\n        S: OW.S_HAS_CONN,\n        E: [], // e╚\n        W: OW.W_HAS_CONN\n    },\n    [OW.CC_SE]: { // ╝\n        N: [],\n        S: OW.S_HAS_CONN,\n        E: OW.E_HAS_CONN, // e╝\n        W: [] // ╝e\n    },\n\n    [OW.XX]: { // ╬ connects to all dirs\n        N: OW.N_HAS_CONN,\n        S: OW.S_HAS_CONN,\n        E: OW.E_HAS_CONN,\n        W: OW.W_HAS_CONN\n    },\n    [OW.EMPTY]: {\n        N: [],\n        S: [],\n        E: [],\n        W: []\n    },\n\n    [OW.TT_W]: { // ╠\n        N: OW.N_HAS_CONN,\n        S: OW.S_HAS_CONN,\n        E: [], // e╠\n        W: OW.W_HAS_CONN // ╠e\n    },\n    [OW.TT_E]: { // ╣\n        N: OW.N_HAS_CONN,\n        S: OW.S_HAS_CONN,\n        E: OW.E_HAS_CONN,\n        W: []\n    },\n    [OW.TT_N]: { // ╦\n        N: OW.N_HAS_CONN,\n        S: [],\n        E: OW.E_HAS_CONN,\n        W: OW.W_HAS_CONN\n    },\n    [OW.TT_S]: { // ╩\n        N: [],\n        S: OW.S_HAS_CONN,\n        E: OW.E_HAS_CONN,\n        W: OW.W_HAS_CONN\n    },\n    [OW.TERM]: {\n        N: [],\n        S: [],\n        E: [],\n        W: []\n    }\n};\n","import RG from './rg';\nimport {Dice} from './dice';\nimport {TCoord} from './interfaces';\n\nexport const Mixin: any = {};\n\n// Dummy Base class to be used with mixins.\nexport class Base {}\nMixin.Base = Base;\n\ninterface MixinArgs {\n    [key: string]: any;\n}\n\n/* A mixin used for typed objects. */\nexport const Typed = superclass => class extends superclass {\n\n    constructor(args?: MixinArgs) {\n        if (superclass) {super(args);}\n        this.type = args.type || '';\n        this._propType = args.propType || '';\n    }\n\n    public getPropType(): string {return this._propType;}\n    public getType(): string {return this.type;}\n\n    public setPropType(propType) {\n        const index = RG.PROP_TYPES.indexOf(propType);\n        if (index >= 0) {\n            this._propType = propType;\n        }\n        else {\n            RG.err('Object.Typed', 'setPropType',\n                'Unknown prop type: |' + propType + '|');\n        }\n    }\n\n    public setType(type: string): void {\n        this.type = type;\n        RG.nullOrUndefError('Object.Typed: setType', 'arg |type|', type);\n    }\n\n};\n\nexport interface Locatable {\n    getX: () => number;\n    getY: () => number;\n    getXY: () => TCoord;\n    getLevel: () => any; // Add typings\n}\n\n/* Mixin used in Locatable objects with x,y coordinates. */\nexport const Locatable = superclass => class extends superclass {\n\n    private _x: number;\n    private _y: number;\n    private _level: any;\n\n    constructor(args?: MixinArgs) {\n        super(args);\n        this._x = null;\n        this._y = null;\n        this._level = null;\n    }\n\n    public setX(x) {this._x = x; }\n    public setY(y) {this._y = y; }\n    public getX() {return this._x;}\n    public getY() {return this._y;}\n\n    public isAtXY(x, y): boolean {\n        return x === this._x && y === this._y;\n    }\n\n    public getXY(): TCoord {\n        return [this._x, this._y];\n    }\n\n    /* Simple getters/setters for coordinates.*/\n    public setXY(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n\n    /* Accessing the current cell of object. */\n    public getCell() {\n        return this._level.getMap().getCell(this._x, this._y);\n    }\n\n    /* Sets the level of this locatable object.*/\n    public setLevel(level) {\n        this._level = level;\n        RG.nullOrUndefError('Mixin.Locatable: setLevel', 'arg |level|', level);\n    }\n\n    /* Unsets the level to null. Throws error if level already null. */\n    public unsetLevel() {\n        if (this._level) {\n            this._level = null;\n        }\n        else {\n            RG.err('Mixin.Locatable', 'unsetLevel',\n                'Trying to unset already null level.');\n        }\n    }\n\n    public getLevel() {\n        return this._level;\n    }\n\n    /* Returns true if object is located at a position on a level.*/\n    public isLocated() {\n        return (this._x !== null) && (this._y !== null)\n            && (this._level !== null);\n    }\n\n};\n\n/* Mixin for objects requiring a damage roll. */\nexport const DamageRoll = (superclass) => class extends superclass {\n\n    public damageDie: any;\n\n    constructor(args?: MixinArgs) {\n        super(args);\n        this.damageDie = Dice.create('1d4');\n    }\n\n    public rollDamage() {\n        if (this.getEntity().hasOwnProperty('getWeapon')) {\n            const weapon = this.getEntity().getWeapon();\n            if (weapon !== null) {return weapon.rollDamage();}\n        }\n        return this.damageDie.roll();\n    }\n\n    public getDamageDie() {\n        return this.damageDie;\n    }\n\n    public setDamageDie(strOrDie) {\n        if (typeof strOrDie === 'string') {\n            this.damageDie = Dice.create(strOrDie);\n        }\n        else {\n            this.damageDie = strOrDie;\n        }\n    }\n\n    public copy(rhs) {\n        super.copy(rhs);\n        this.damageDie = rhs.getDamageDie().clone();\n    }\n\n    public toJSON() {\n        const obj = super.toJSON();\n        obj.setDamageDie = this.damageDie.toString();\n        return obj;\n    }\n\n};\n\n/* Adds a duration and accessor functions to given component. */\nexport const DurationRoll =superclass => class extends superclass {\n\n    constructor(args?: MixinArgs) {\n        super(args);\n    }\n\n    public rollDuration() {\n        return this.duration.roll();\n    }\n\n    public setDurationDie(strOrDie) {\n        if (typeof strOrDie === 'string') {\n            this.duration = Dice.create(strOrDie);\n        }\n        else {\n            this.duration = strOrDie;\n        }\n    }\n\n    public getDurationDie() {\n        return this.duration;\n    }\n\n    public copy(rhs) {\n        super.copy(rhs);\n        this.duration = rhs.getDurationDie().clone();\n    }\n\n    public toJSON() {\n        const obj = super.toJSON();\n        obj.setDurationDie = this.duration.toString();\n        return obj;\n    }\n\n};\n\nexport const Defense =superclass => class extends superclass {\n\n    private _attack: number;\n    private _defense: number;\n    private _protection: number;\n\n    constructor(args?: MixinArgs) {\n        super(args);\n        this._attack = 1;\n        this._defense = 1;\n        this._protection = 0;\n    }\n\n    public getAttack() {return this._attack;}\n\n    public setAttack(attack) {\n        this._attack = attack;\n    }\n\n    /* Defense related methods.*/\n    public getDefense() { return this._defense; }\n\n    public setDefense(defense) {\n        this._defense = defense;\n    }\n\n    public getProtection() {\n        return this._protection;\n    }\n\n    public setProtection(prot) {\n        this._protection = prot;\n    }\n\n    public copy(rhs) {\n        super.copy(rhs);\n        this.setAttack(rhs.getAttack());\n        this.setDefense(rhs.getDefense());\n        this.setProtection(rhs.getProtection());\n    }\n\n    public equals(rhs) {\n        let res = super.equals(rhs);\n        if (res) {\n            res = this.getAttack() === rhs.getAttack() &&\n                this.getDefense() === rhs.getDefense() &&\n                this.getProtection() === rhs.getProtection();\n        }\n        return res;\n    }\n\n    public toString() {\n        let msg = super.toString();\n        msg += ` A: ${this.getAttack()}, D: ${this.getDefense()}, `;\n        msg += ` P: ${this.getProtection()}, `;\n        return msg;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setAttack = this.getAttack();\n        json.setDefense = this.getDefense();\n        json.setProtection = this.getProtection();\n        return json;\n    }\n\n};\n\nexport interface Defense {\n    getAttack(): number;\n}\n\n/* Mixin for damage objects. */\nexport const Damage =superclass => class extends Defense(superclass) {\n\n    constructor(args) {\n        super(args);\n        this._damageDie = new Dice(1, 4, 0);\n        this._range = 1;\n    }\n\n    public setAttackRange(range) {this._range = range;}\n    public getAttackRange() {return this._range;}\n\n    public rollDamage(): number {\n        if (this.hasOwnProperty('getWeapon')) {\n            const weapon = this.getWeapon();\n            if (!RG.isNullOrUndef([weapon])) {\n                return weapon.rollDamage();\n            }\n        }\n        return this._damageDie.roll();\n    }\n\n    public getDamageDie(): Dice {return this._damageDie;}\n\n    public setDamageDie(dStr: string | Dice): void {\n        if (typeof dStr === 'string') {\n            this._damageDie = Dice.create(dStr);\n        }\n        else if (typeof dStr === 'object') {\n            this._damageDie = dStr;\n        }\n    }\n\n    public copy(rhs): void {\n        super.copy(rhs);\n        this.setAttackRange(rhs.getAttackRange());\n        const die = rhs.getDamageDie().clone();\n        this.setDamageDie(die);\n    }\n\n    public equals(rhs): boolean {\n        let res = super.equals(rhs);\n        if (res) {\n            res = this.getDamageDie().equals(rhs.getDamageDie());\n            res = res && this.getAttackRange() === rhs.getAttackRange();\n        }\n        return res;\n    }\n\n    public toString(): string {\n        let msg = super.toString();\n        msg += 'Dmg: ' + this.getDamageDie().toString();\n        msg += ', R:' + this.getAttackRange();\n        return msg;\n    }\n\n    public toJSON() {\n        const json = super.toJSON();\n        json.setAttackRange = this.getAttackRange();\n        json.setDamageDie = this.getDamageDie().toString();\n        return json;\n    }\n\n};\n\nexport interface Damage extends Defense {\n    getAttackRange(): number;\n    rollDamage(): number;\n    getDamageDie(): Dice;\n}\n","\nconst NULL_OBJECT = null;\n\ninterface ObjRefData {\n    type: string;\n    id: number;\n}\n\ninterface ObjRef {\n    $objRef: ObjRefData;\n    value?: GameObject;\n}\n\nexport class GameObject {\n\n    public static ID: number;\n\n    public static deserialize(input, namespace, seenObjs = {}): any {\n        const obj = new namespace[input.$proto]();\n        for (const key in input) {\n            if (input.hasOwnProperty(key)) {\n                const value = input[key];\n                if (GameObject.isPrimitive(value)) {\n                    obj[key] = value;\n                }\n                else if (Array.isArray(value)) {\n                    const arr = [];\n                    obj.forEach(val => {\n                        arr.push(GameObject.deserialize(val, namespace, seenObjs));\n                    });\n                    obj[key] = arr;\n                }\n                else if (value.$objID) {\n                    if (!seenObjs.hasOwnProperty(value.$objID)) {\n                        obj[key] = GameObject.deserialize(value, namespace, seenObjs);\n                    }\n                    else {\n                        obj[key] = seenObjs[value.$objID];\n                    }\n                }\n                else {\n                    obj[key] = value; // Just assign simple object\n                }\n            }\n        }\n        delete obj.$proto;\n        /* eslint: enable */\n        return obj;\n    }\n\n    public static deref(objRef: ObjRef): any {\n        if (objRef) {\n            return objRef.value;\n        }\n        return NULL_OBJECT;\n    }\n\n    public static createObjectID(): number {\n        return GameObject.ID++;\n    }\n\n    public static getProtoName(obj: any): string {\n        return Object.getPrototypeOf(obj).constructor.name;\n    }\n\n    public static isPrimitive(obj): boolean {\n        return typeof obj !== 'object';\n    }\n\n    public static serialize(obj: any): any {\n        if (GameObject.isPrimitive(obj)) {\n            return obj;\n        }\n        else if (Array.isArray(obj)) {\n            const arr = [];\n            obj.forEach(val => {\n                arr.push(GameObject.serialize(val));\n            });\n            return arr;\n        }\n        else if (obj.$objID) {\n            return obj.serialize();\n        }\n        else if (obj.toJSON) {\n            return obj.toJSON(); // Legacy support\n        }\n        else if (obj.$objRef) {\n            return {$objRef: obj.value.getID()};\n        }\n        else {\n            return obj;\n        }\n    }\n\n    public $objID: number;\n\n    constructor() {\n        this.$objID = GameObject.ID++;\n    }\n\n    public getID(): number {return this.$objID;}\n    public setID(id: number): void {this.$objID = id;}\n\n    public getObjRef(): ObjRef {\n        return {\n            $objRef: {\n                type: 'object',\n                id: this.$objID\n            }\n        };\n    }\n\n    public getRefAndVal(): ObjRef {\n        const refObj: ObjRef = this.getObjRef();\n        refObj.value = this;\n        return refObj;\n    }\n\n    /* serialize() {\n        const json = {\n            $proto: GameObject.getProtoName(this)\n        };\n        for (const key in this) {\n            if (this.hasOwnProperty(key)) {\n                json[key] = GameObject.serialize(this[key]);\n            }\n        }\n        return json;\n    }\n    */\n\n}\n\nGameObject.ID = 1;\n","\nimport RG from '../rg';\nimport {ICoordXY} from '../interfaces';\n\ntype BaseActor = import('../actor').BaseActor;\n\nconst MEM_NO_ACTORS: BaseActor[] = [];\n\ninterface ActorsMap {\n    enemies?: BaseActor[];\n    friends?: BaseActor[];\n    seen?: {[key: string]: ICoordXY};\n}\n\nconst NOT_ATTACKED = null;\n\n/* Memory is used by the actor to hold information about enemies, items etc.\n * It's a separate object from decision-making brain.*/\nexport class Memory {\n\n    protected _actors: ActorsMap;\n    protected _enemyTypes: {[key: string]: true};\n    protected _communications: BaseActor[];\n    protected _lastAttackedID: number;\n\n    constructor() {\n        this._actors = {};\n        this._enemyTypes = {}; // List of enemy types for this actor\n        this._communications = [];\n        this._lastAttackedID = NOT_ATTACKED;\n        // TODO add memory of player closing a door/using stairs\n    }\n\n    /* Adds a generic enemy type. */\n    public addEnemyType(type: string): void {\n        this._enemyTypes[type] = true;\n    }\n\n    /* Removes a generic enemy type. */\n    public removeEnemyType(type: string): void {\n        if (this._enemyTypes[type]) {\n            delete this._enemyTypes[type];\n        }\n    }\n\n    /* Checks if given actor is an enemy. */\n    public isEnemy(actor: BaseActor): boolean {\n        if (this._actors.hasOwnProperty('enemies')) {\n            const index = this._actors.enemies.indexOf(actor);\n            if (index >= 0) {return true;}\n        }\n        // Friend overrides generic enemy type\n        if (!this.isFriend(actor)) {\n            if (this._enemyTypes[actor.getType()]) {\n                return true;\n            }\n            if (actor.isPlayer()) {\n                return this._enemyTypes.player;\n            }\n        }\n        return false;\n    }\n\n    /* Checks if actor is a friend. */\n    public isFriend(actor: BaseActor): boolean {\n        if (this._actors.hasOwnProperty('friends')) {\n            const index = this._actors.friends.indexOf(actor);\n            return index >= 0;\n        }\n        return false;\n    }\n\n    /* Adds an actor friend. */\n    public addFriend(actor: BaseActor): void {\n        if (this.isEnemy(actor)) {\n            this.removeEnemy(actor);\n        }\n        if (!this._actors.hasOwnProperty('friends')) {\n            this._actors.friends = [];\n        }\n        if (!this.isFriend(actor)) {\n            this._actors.friends.push(actor);\n        }\n    }\n\n    public addEnemySeenCell(actor: BaseActor): void {\n        if (!this._actors.seen) {this._actors.seen = {};}\n        this._actors.seen[actor.getID()] = {x: actor.getX(), y: actor.getY(),\n            level: actor.getLevel().getID()};\n    }\n\n    public hasSeen(id: number): boolean {\n        if (this._actors.seen && this._actors.seen[id]) {\n            return true;\n        }\n        return false;\n    }\n\n    public getLastSeen(actor: BaseActor): ICoordXY | null {\n        if (this._actors.seen[actor.getID()]) {\n            return this._actors.seen[actor.getID()];\n        }\n        return null;\n    }\n\n    /* Adds given actor as (personal) enemy. */\n    public addEnemy(actor: BaseActor): void {\n        if (!RG.isActor(actor)) {\n            const json = JSON.stringify(actor);\n            RG.err('Memory', 'addEnemy',\n                'Only actors can be added. Got: ' + json);\n        }\n        if (!this.isEnemy(actor)) {\n            if (this.isFriend(actor)) {\n                this.removeFriend(actor);\n            }\n            if (!this._actors.hasOwnProperty('enemies')) {\n                this._actors.enemies = [];\n            }\n            this._actors.enemies.push(actor);\n            if (this._communications.length > 0) {\n                this._communications = []; // Invalidate communications\n            }\n        }\n    }\n\n    public removeEnemy(actor: BaseActor): void {\n        if (this._actors.hasOwnProperty('enemies')) {\n            const index = this._actors.enemies.indexOf(actor);\n            if (index >= 0) {\n                this._actors.enemies.splice(index, 1);\n            }\n        }\n    }\n\n    public removeFriend(actor: BaseActor): void {\n        if (this._actors.hasOwnProperty('friends')) {\n            const index = this._actors.friends.indexOf(actor);\n            if (index >= 0) {\n                this._actors.friends.splice(index, 1);\n            }\n        }\n    }\n\n    public getEnemyActors(): BaseActor[] {\n        return this._actors.enemies || MEM_NO_ACTORS;\n    }\n\n    public getFriendActors(): BaseActor[] {\n        return this._actors.friends || MEM_NO_ACTORS;\n    }\n\n    /* Copies memory (mainly friends/enemies) from one actor. Used when another\n     * actor is summoned to copy summoner's enemies. */\n    public copyMemoryFrom(actor: BaseActor): void {\n        const memory: Memory = actor.getBrain().getMemory();\n        const enemies = memory.getEnemyActors().slice();\n        this._actors.enemies = enemies;\n        const friends = memory.getFriendActors().slice();\n        this._actors.friends = friends;\n        this._enemyTypes = Object.assign({}, memory._enemyTypes);\n    }\n\n    /* Adds a communication with given actor. */\n    public addCommunicationWith(actor: BaseActor): void {\n        if (!this.hasCommunicatedWith(actor)) {\n            this._communications.push(actor);\n        }\n    }\n\n    public wasLastAttacked(actor: BaseActor): boolean {\n        return this._lastAttackedID === actor.getID();\n    }\n\n    /* Sets last attacked actor. This is used to prevent actor from switching\n     * target between attacks (which is ineffective to kill anything). */\n    public setLastAttacked(actor: BaseActor): void {\n        if (actor) {\n            this._lastAttackedID = actor.getID();\n        }\n        else {\n            // When restoring game, actor can be null (ie it was killed), but\n            // this actor does not know it\n            this._lastAttackedID = NOT_ATTACKED;\n        }\n    }\n\n    /* Returns true if has communicated with given actor.*/\n    public hasCommunicatedWith(actor) {\n        const index = this._communications.indexOf(actor);\n        return index !== -1;\n    }\n\n    public toJSON() {\n        const obj: any = {\n            enemyTypes: Object.keys(this._enemyTypes)\n        };\n        if (this._actors.hasOwnProperty('enemies')) {\n            obj.enemies = this._actors.enemies.map(enemy => enemy.getID());\n        }\n        if (this._actors.hasOwnProperty('friends')) {\n            obj.friends = this._actors.friends.map(enemy => enemy.getID());\n        }\n        if (this._lastAttackedID >= 0) {\n            obj.lastAttackedID = this._lastAttackedID;\n        }\n        if (this._actors.hasOwnProperty('seen')) {\n            obj.seen = this._actors.seen;\n        }\n        return obj;\n    }\n}\n","\nimport RG from '../rg';\nimport {Menu, SelectionObject} from '../menu';\nimport {Keys} from '../keymap';\nimport {Cell} from '../map.cell';\nimport * as GoalsBattle from '../goals-battle';\nimport * as Cmd from '../cmd-player';\nimport * as Component from '../component/component';\nimport {BaseActor, SentientActor} from '../actor';\nimport {Random} from '../random';\nimport {Geometry} from '../geometry';\n\nimport {BrainBase} from './brain.base';\nimport {Brain, BrainSentient} from './brain';\nimport {Memory} from './brain.memory';\n\nimport {PlayerCmdInput} from '../interfaces';\n\ntype ActionCallback = import('../time').ActionCallback;\ntype BrainGoalOriented = import('./brain.goaloriented').BrainGoalOriented;\ntype ItemBase = import('../item').ItemBase;\n\nconst RNG = Random.getRNG();\nconst KeyMap = Keys.KeyMap;\n\nconst {\n    ACTION_ALREADY_DONE,\n    ACTION_ZERO_ENERGY } = Cmd;\n\nconst selectTargetMsg =\n    'Select a target (all with \"A\"), then press \"s\" to choose it';\nconst lookCellMsg =\n    'Select a target with movement keys, then press \"s\" to choose it';\n\nconst chatSelObject = player => {\n    const msg = 'Select direction for chatting:';\n    RG.gameMsg(msg);\n    return {\n        select: code => {\n            const args = {\n                dir: KeyMap.getDir(code),\n                src: null\n            };\n            if (args.dir) {\n                args.src = player;\n                return () => {\n                    const chatComp = new Component.Chat();\n                    chatComp.setArgs(args);\n                    player.add(chatComp);\n                };\n            }\n            return null;\n        },\n        showMenu: () => false\n    };\n};\n\n\n/* Memory object for the player .*/\nexport class MemoryPlayer extends Memory {\n\n    private _player: SentientActor;\n\n    constructor(player) {\n        super();\n        this._lastAttackedID = null;\n        this._player = player;\n    }\n\n    /* Sets the last attacked actor. */\n    public setLastAttacked(actor: BaseActor | number): void {\n        if (Number.isInteger(actor as number)) {\n            this._lastAttackedID = actor as number;\n        }\n        else if (actor) {\n            this._lastAttackedID = (actor as BaseActor).getID();\n        }\n    }\n\n    public getLastAttacked(): number {\n        return this._lastAttackedID;\n    }\n\n    /* Returns true if the actor was the last attacked one. */\n    public wasLastAttacked(actor: SentientActor): boolean {\n        return this._lastAttackedID === actor.getID();\n    }\n\n    /* Returns true if the given actor is enemy of player. */\n    public isEnemy(actor: BaseActor): boolean {\n        if (actor.isPlayer()) {\n            return false; // Needed for MindControl\n        }\n        if (actor.has('NonSentient')) {return false;}\n        return actor.getBrain().getMemory().isEnemy(this._player);\n    }\n\n    public toJSON() {\n        const json: any = {};\n        if (!RG.isNullOrUndef([this._lastAttackedID])) {\n            json.setLastAttacked = this._lastAttackedID;\n        }\n        return json;\n    }\n\n}\n\n\nconst S_IDLE = 'S_IDLE';\nconst S_TARGETING = 'S_TARGETING';\nconst S_LOOKING = 'S_LOOKING';\n\nconst FSM_NO_MATCH = 256;\nconst NO_SELECTED_CELLS = null;\n\n/* A class to manage the targeting/looking state of the player. */\nclass TargetingFSM {\n\n    public _brain: BrainPlayer;\n    public _targetList: Cell[];\n    public targetIndex: number;\n    public _state: string;\n    public selectedCells: Cell[] | null;\n\n    constructor(brain) {\n        this._brain = brain;\n        this._targetList = [];\n        this.targetIndex = -1;\n        this._state = S_IDLE;\n    }\n\n    public getActor(): SentientActor {\n        return this._brain._actor;\n    }\n\n    public isTargeting(): boolean {\n        return this._state === S_TARGETING;\n    }\n\n    public isLooking(): boolean {\n        return this._state === S_LOOKING;\n    }\n\n    public nextTarget(): void {\n        if (this.hasTargets()) {\n            ++this.targetIndex;\n            if (this.targetIndex >= this._targetList.length) {\n                this.targetIndex = 0;\n            }\n            this.setSelectedCells(this._targetList[this.targetIndex]);\n        }\n    }\n\n    public prevTarget(): void {\n        if (this.hasTargets()) {\n            --this.targetIndex;\n            if (this.targetIndex < 0) {\n                this.targetIndex = this._targetList.length - 1;\n            }\n            this.setSelectedCells(this._targetList[this.targetIndex]);\n        }\n    }\n\n    public startLooking(): void {\n        this._state = S_LOOKING;\n    }\n\n    public stopLooking(): void {\n        this._state = S_IDLE;\n        this.selectedCells = NO_SELECTED_CELLS;\n    }\n\n    public startTargeting(): void {\n        this._state = S_TARGETING;\n        this._targetList = this.getTargetList();\n        this.targetIndex = this.getCellIndexToTarget(this._targetList);\n        this.setSelectedCells(this._targetList[this.targetIndex]);\n    }\n\n    public cancelTargeting(): void {\n        this._targetList = [];\n        this._state = S_IDLE;\n        this.selectedCells = NO_SELECTED_CELLS;\n        this.targetIndex = -1;\n    }\n\n    public getTargetList(): Cell[] {\n        const mapXY = {};\n        const visibleCells = this._brain.getSeenCells();\n        const actor = this._brain._actor;\n        const enemyCells = RG.findEnemyCellForActor(\n            actor, visibleCells);\n        enemyCells.forEach(cell => {\n            mapXY[cell.getX() + ',' + cell.getY()] = cell;\n        });\n        return Object.values(mapXY);\n    }\n\n\n    public setSelectedCells(cells: Cell | Cell[]): void {\n        if (cells) {\n            if (!Array.isArray(cells)) {\n                const cell = cells as Cell;\n                this.selectedCells = [cell];\n                if (this.isTargeting()) {\n                    const actor = this.getActor();\n                    const [tx, ty] = [cell.getX(), cell.getY()];\n                    const [ax, ay] = [actor.getX(), actor.getY()];\n                    const path = Geometry.getBresenham(ax, ay, tx, ty);\n                    const pathCells = path.map(xy => (\n                        actor.getLevel().getMap().getCell(xy[0], xy[1])\n                    ));\n                    this.selectedCells = this.selectedCells.concat(pathCells);\n                }\n            }\n            else {\n                this.selectedCells = cells as Cell[];\n            }\n        }\n    }\n\n    public getSelectedCells(): Cell[] {\n        return this.selectedCells;\n    }\n\n    public getTarget(): Cell | Cell[] {\n        if (this.isLooking() || this.isTargeting()) {\n            if (this.selectedCells && this.selectedCells.length > 0) {\n                return this.selectedCells[0];\n            }\n        }\n        return this.selectedCells;\n    }\n\n    public getTargetCell(): Cell | null {\n        if (this.selectedCells.length > 0) {\n            return this.selectedCells[0];\n        }\n        return null;\n    }\n\n    public getCellIndexToTarget(cells): number {\n        const memory = this._brain.getMemory();\n        const lastID = memory.getLastAttacked();\n        for (let i = 0; i < cells.length; i++) {\n            const actors = cells[i].getProp('actors');\n            for (let j = 0; j < actors.length; j++) {\n                if (actors[j].getID() === lastID) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    }\n\n    public selectCell(code?: number): void {\n        const actor = this._brain._actor;\n        const visibleCells = this._brain.getSeenCells();\n        if (RG.isNullOrUndef([code])) {\n            this.setSelectedCells(actor.getCell());\n        }\n        else if (code === Keys.KEY.SELECT_ALL) {\n            const friends = Brain.findCellsWithFriends(actor,\n                visibleCells);\n            this.setSelectedCells(friends);\n        }\n        else {\n            const cell = this.selectedCells[0];\n            const map = actor.getLevel().getMap();\n            const [x, y] = [cell.getX(), cell.getY()];\n            const [newX, newY] = KeyMap.getDiff(code, x, y);\n            if (map.hasXY(newX, newY)) {\n                this.setSelectedCells(map.getCell(newX, newY));\n            }\n            if (this.isLooking()) {\n                const tcell: Cell = this.getTarget() as Cell;\n                const index = visibleCells.indexOf(tcell);\n                let msg = 'You cannot see there.';\n                if (index >= 0) {\n                    const names = tcell.getPropNames();\n                    msg = '';\n                    names.forEach(name => {\n                        msg += `You see ${name}. `;\n                    });\n                    RG.gameMsg(msg);\n                }\n                else {\n                    RG.gameMsg(msg);\n                }\n            }\n        }\n    }\n\n    /* Returns true if a player has target selected. */\n    public hasTargetSelected(): boolean {\n        if (this.selectedCells) {\n            return true;\n        }\n        else if (this._targetList) {\n            return this.hasTargets();\n        }\n        return false;\n    }\n\n    public hasTargets() {\n        return this._targetList.length > 0;\n    }\n\n    public processKey(code: number) {\n        if (KeyMap.isTargetMode(code)) {\n            if (this.isTargeting()) {\n                const cell = this.getTarget();\n                this.cancelTargeting();\n                if (cell) {\n                    return this._brain.handleCommand(\n                        {cmd: 'missile', target: cell});\n                }\n                RG.gameMsg('No valid targets to attack.');\n                return this._brain.noAction();\n            }\n            else {\n                this.startTargeting();\n                return this._brain.noAction();\n            }\n        }\n        else if (this.isTargeting()) {\n            if (KeyMap.isNextTarget(code)) {\n                this.nextTarget();\n            }\n            else if (KeyMap.isPrevTarget(code)) {\n                this.prevTarget();\n            }\n            else {\n                this.cancelTargeting();\n            }\n            return this._brain.noAction();\n        }\n        return FSM_NO_MATCH;\n    }\n\n    /* Returns true if chosen target is within attack range. */\n    public isTargetInRange(): boolean {\n        const cell = this.getTarget() as Cell;\n        const actor = this._brain._actor;\n        if (cell && cell.getX) {\n            const [tx, ty] = [cell.getX(), cell.getY()];\n            const [ax, ay] = [actor.getX(), actor.getY()];\n            const path = Geometry.getBresenham(ax, ay, tx, ty);\n\n            const invEq = actor.getInvEq();\n            const missile = invEq.getEquipped('missile');\n            if (missile) {\n                const missRange = RG.getMissileRange(actor, missile);\n                if ((path.length - 1) <= missRange) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\ninterface MarkObject {\n    id: number;\n    x: number;\n    y: number;\n    tag?: string;\n}\n\n/* Used for marking player positions. */\nclass MarkList {\n\n    public _brain: BrainPlayer;\n    public _actor: SentientActor;\n    public _marks: {[key: string]: MarkObject[]};\n\n    constructor(brain) {\n        this._brain = brain;\n        this._actor = brain._actor;\n        this._marks = {};\n    }\n\n\n    /* Adds a mark to current actor's location, and adds a tag, which\n     * can be shown in the mark list. */\n    public addMark(tag?: string) {\n        const [x, y] = this._actor.getXY();\n        const level = this._actor.getLevel();\n        const id = level.getID();\n        const markObj: MarkObject = {id, x, y};\n        if (tag) {markObj.tag = tag;}\n        if (!this._marks[id]) {this._marks[id] = [];}\n        if (!this.markExists(id, x, y)) {\n            this._marks[id].push(markObj);\n            RG.gameMsg('Added a mark to the current location.');\n        }\n    }\n\n    /* Should return a menu object with all possible marks shown. */\n    public getMenu() {\n        const id = this._actor.getLevel().getID();\n        const markList = this._marks[id] || [];\n        const selectMenuArgs = markList.map(mark => {\n            const {x, y} = mark;\n\n            // GUI callback which moves the actor along path\n            const cbFunc = this._brain._guiCallbacks.GOTO;\n            // Bind to args, this is preserved in any case\n            const boundFunc = cbFunc.bind(null, Keys.KEY.GOTO, x, y);\n\n            const listMsg = this.getMarkListMsg(mark);\n            return [listMsg, boundFunc];\n        });\n\n        const deleteMenuArgs = markList.map(mark => {\n            const {x, y} = mark;\n            const markID = mark.id;\n            const listMsg = this.getMarkListMsg(mark);\n            const boundFunc = this.deleteMark.bind(this, markID, x, y);\n            return [listMsg, boundFunc];\n        });\n\n        const menu = new Menu.WithState();\n        menu.addItem(Keys.KEY.DELETE, ['Delete mark', Menu.NEXT_STATE]);\n\n        menu.addState('', selectMenuArgs);\n        menu.addState('DELETE', deleteMenuArgs);\n        menu.addTransition('DELETE', Keys.KEY.DELETE);\n        menu.addPre('Choose a mark to delete', 'DELETE');\n        return menu;\n    }\n\n    /* Deletes a mark from the mark list. */\n    public deleteMark(id, x, y) {\n        if (this._marks[id]) {\n            const index = this._marks[id].findIndex(obj => (\n                obj.id === id && obj.x === x && obj.y === y\n            ));\n            if (index >= 0) {\n                this._marks[id].splice(index, 1);\n            }\n        }\n    }\n\n    public getMark(selectCode) {\n        const index = Keys.codeToIndex(selectCode);\n        if (this._marks.length <= index) {\n            return this._marks[index];\n        }\n        return null;\n    }\n\n    public getMarkListMsg(mark) {\n        const {x, y} = mark;\n        let listMsg = `${x}, ${y}`;\n        if (mark.tag) {listMsg += ` ${mark.tag}`;}\n        else {\n            // Determine tag from a cell\n            const cell = this._actor.getLevel().getMap().getCell(x, y);\n            if (cell.hasElements()) {\n                const elem = cell.getElements()[0];\n                listMsg += ' ' + elem.getName();\n                if (cell.hasConnection()) {\n                    const conn = cell.getConnection();\n                    const targetLevel = conn.getTargetLevel();\n                    if (targetLevel) {\n                        const parent = targetLevel.getParent();\n                        if (parent) {\n                            listMsg += ' - ' + parent.getName();\n                        }\n                    }\n                }\n            }\n            else if (cell.hasItems()) {\n                listMsg += ' ' + cell.getItems()[0].getName();\n            }\n        }\n        return listMsg;\n    }\n\n    public markExists(id, x, y) {\n        const markList = this._marks[id];\n        const index = markList.findIndex(m => (\n            m.x === x && m.y === y\n        ));\n        return index >= 0;\n    }\n\n    public toJSON() {\n        return this._marks;\n    }\n\n    public fromJSON(json) {\n        this._marks = json;\n    }\n\n}\n\nconst CACHE_INVALID = null;\n\n/* This brain is used by the player actor. It simply handles the player input\n * but by having brain, player actor looks like other actors.  */\nexport class BrainPlayer extends BrainSentient {\n\n    public _actor: SentientActor;\n    public energy: number; // Consumed energy per action\n    public _type: string;\n\n    public _guiCallbacks: {[key: string]: (number) => ActionCallback};\n    protected _memory: MemoryPlayer;\n    protected _cache: {[key: string]: Cell[] | null};\n\n    private _confirmCallback = null;\n    private _wantConfirm: boolean;\n    private _confirmEnergy: number;\n\n    private _wantSelection: boolean;\n    private _selectionObject: SelectionObject | null;\n    private _runModeEnabled: boolean;\n\n    private _fightMode: number;\n\n    private _fsm: TargetingFSM;\n    private _markList: MarkList;\n\n\n    // Not used to store anything, used only to map setters to components\n    private _statBoosts: {[key: string]: {[key: string]: number}};\n\n    constructor(actor: SentientActor) {\n        super(actor);\n        this._guiCallbacks = {}; // For attaching GUI callbacks\n        this._type = 'Player';\n        this._memory = new MemoryPlayer(actor);\n        this.energy = 1; // Consumed energy per action\n\n        this._confirmCallback = null;\n        this._wantConfirm = false;\n        this._confirmEnergy = 1;\n\n        this._wantSelection = false;\n        this._selectionObject = null;\n        this._runModeEnabled = false;\n\n        this._fightMode = RG.FMODE_NORMAL;\n\n        this._fsm = new TargetingFSM(this);\n        this._markList = new MarkList(this);\n\n        this._cache = {seen: CACHE_INVALID};\n\n        // Not used to store anything, used only to map setters to components\n        this._statBoosts = {\n            CombatMods: {\n                setAttack: 0,\n                setDefense: 0,\n                setProtection: 0\n            },\n            StatsMods: {\n                setSpeed: 0,\n                setAccuracy: 0,\n                setWillpower: 0,\n                setStrength: 0,\n                setAgility: 0,\n                setMagic: 0\n            }\n        };\n    }\n\n    public getType() {return this._type;}\n    public setType(type) {}\n\n    public getActor() {\n        return this._actor;\n    }\n\n    public setActor(actor) {\n        this._actor = actor;\n    }\n\n    /* For given code, adds a GUI callback. When this keycode is given, a GUI\n     * callback is called instead. */\n    public addGUICallback(code, callback) {\n        this._guiCallbacks[code] = callback;\n    }\n\n    public getMemory() {return this._memory;}\n\n    /* Restores the base speed after run-mode.*/\n    public _restoreBaseSpeed() {\n        this._runModeEnabled = false;\n        if (this._actor.has('StatsMods')) {\n            this._actor.get('StatsMods').setSpeed(0);\n        }\n    }\n\n\n    public isRunModeEnabled() {return this._runModeEnabled;}\n\n    public cmdNotPossible(msg) {\n        this.energy = 0;\n        RG.gameWarn(msg);\n        return ACTION_ZERO_ENERGY;\n    }\n\n    /* Returns true if a menu should be shown by the GUI. */\n    public isMenuShown(): boolean {\n        if (this._selectionObject) {\n            return this._selectionObject.showMenu();\n        }\n        return false;\n    }\n\n    /* Returns the menu which should be shown. */\n    public getMenu() {\n        if (this._selectionObject) {\n            if (this._selectionObject.showMenu()) {\n                return this._selectionObject.getMenu();\n            }\n        }\n        return null;\n    }\n\n    /* Returned for keypresses when no action is taken.*/\n    public noAction() {\n        this.energy = 0;\n        return ACTION_ZERO_ENERGY;\n    }\n\n    /* Returns current fighting mode.*/\n    public getFightMode(): number {return this._fightMode;}\n\n    /* Toggle between walking/running modes.*/\n    public toggleRunMode(): void {\n        if (this._runModeEnabled) {\n            this._restoreBaseSpeed();\n        }\n        else {\n            this._runModeEnabled = true;\n            const baseSpeed = this._actor.get('Stats').getSpeed();\n            const speedBoost = Math.floor(0.2 * baseSpeed);\n            this._actor.get('StatsMods').setSpeed(speedBoost);\n        }\n    }\n\n    /* Toggles between different fighting modes.*/\n    public toggleFightMode(): void {\n        this._fightMode += 1;\n        if (this._fightMode >= RG.FMODES.length) {\n          this._fightMode = RG.FMODE_NORMAL;\n        }\n    }\n\n    /* Creates the callback for buying an item, and sets up the confirmation\n     * request from player.*/\n    public _createBuyConfirmCallback(currCell): void {\n        const topItem = currCell.getProp('items')[0];\n        const shopElem = currCell.getPropType('shop')[0];\n        const nCoins = shopElem.getItemPriceForBuying(topItem);\n\n        const buyItemCallback = () => {\n            const trans = new Component.Transaction();\n            trans.setArgs({item: topItem, buyer: this._actor,\n              shop: shopElem, seller: shopElem.getShopkeeper()});\n            this._actor.add(trans);\n        };\n\n        this._confirmEnergy = 0;\n        this._wantConfirm = true;\n        this._confirmCallback = buyItemCallback;\n        RG.gameMsg('Press \\'y\\' to buy ' + topItem.getName() + ' for ' +\n            nCoins + ' gold coins');\n    }\n\n    /* Sets the stats for attack for special modes.*/\n    public _setAttackStats(): void {\n        const stats = this._actor.get('Stats');\n        const combat = this._actor.get('Combat');\n        let speedBoost = 0;\n        let attackBoost = 0;\n        let damageBoost = 0;\n\n        if (this._fightMode === RG.FMODE_FAST) {\n            speedBoost = Math.round(0.2 * stats.getSpeed());\n            attackBoost = -Math.round(0.2 * combat.getAttack());\n            attackBoost = attackBoost <= 0 ? -1 : attackBoost;\n            damageBoost = -1;\n        }\n        else if (this._fightMode === RG.FMODE_SLOW) {\n            speedBoost = -Math.round(0.2 * stats.getSpeed());\n            attackBoost = Math.round(0.2 * combat.getAttack());\n            attackBoost = attackBoost === 0 ? 1 : attackBoost;\n            damageBoost = 2;\n        }\n        this._actor.get('StatsMods').setSpeed(speedBoost);\n        this._actor.get('CombatMods').setAttack(attackBoost);\n        this._actor.get('CombatMods').setDamage(damageBoost);\n    }\n\n    /* Handles a complex command.\n    * TODO remove if/else and use a dispatch table.*/\n    public handleCommand(obj) {\n        this._restoreBaseSpeed();\n        switch (obj.cmd) {\n            case 'attack': return new Cmd.CmdAttack(this).execute(obj);\n            case 'missile': return new Cmd.CmdMissile(this).execute(obj);\n            case 'use': return new Cmd.CmdUseItem(this).execute(obj);\n            case 'drop': return new Cmd.CmdDropItem(this).execute(obj);\n            case 'equip': return new Cmd.CmdEquipItem(this).execute(obj);\n            case 'unequip':\n                return new Cmd.CmdUnequipItem(this).execute(obj);\n            case 'use-element':\n                return new Cmd.CmdUseElement(this).execute(obj);\n            default: return () => {};\n        }\n    }\n\n    /* Returns all stats to their nominal values.*/\n    public resetBoosts(): void {\n        this.energy = 1;\n        for (const compName in this._statBoosts) {\n            if (compName) {\n                const setters = this._statBoosts[compName];\n                for (const setFunc in setters) {\n                    if (setFunc) {\n                        const baseStatVal = setters[setFunc];\n                        if (this._actor.has(compName)) {\n                            this._actor.get(compName)[setFunc](baseStatVal);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* Tries to open/close a door nearby the player. TODO: Handle multiple\n     * doors. */\n    public tryToToggleDoor() {\n        const cellsAround: Cell[] = Brain.getCellsAroundActor(this._actor);\n        const doorCells: Cell[] = cellsAround.filter(c => c.hasDoor());\n        if (doorCells.length === 1) {\n            return this.openDoorFromCell(doorCells[0]);\n        }\n        else if (doorCells.length > 1) {\n            // TODO implement direction choice\n            const doorCell = RNG.arrayGetRand(doorCells);\n            return this.openDoorFromCell(doorCell);\n        }\n\n        return this.cmdNotPossible('There are no doors to open or close');\n    }\n\n    public openDoorFromCell(doorCell: Cell) {\n        if (doorCell) {\n            const door = doorCell.getPropType('door')[0];\n            if (door) {\n                const comp = new Component.OpenDoor();\n                comp.setDoor(door);\n                this._actor.add(comp);\n                return ACTION_ALREADY_DONE;\n            }\n        }\n        return this.cmdNotPossible('There are no doors to open or close');\n    }\n\n\n    public getSeenCells(): Cell[] {\n        if (this._cache.seen === CACHE_INVALID) {\n            let cells = this._actor.getLevel().exploreCells(this._actor);\n            if (this._actor.has('Telepathy')) {\n                const actorLevelID = this._actor.getLevel().getID();\n                const tepathyComps = this._actor.getList('Telepathy');\n                tepathyComps.forEach(teleComp => {\n                    const target = teleComp.getTarget();\n                    const targetLevel = target.getLevel();\n                    if (RG.isActorActive(target)) {\n                        if (targetLevel.getID() === actorLevelID) {\n                            const newCells = targetLevel.exploreCells(target);\n                            cells = cells.concat(newCells);\n                        }\n                    }\n                });\n            }\n            this._cache.seen = cells;\n        }\n        return this._cache.seen;\n    }\n\n\n    public getTargetActor(): BaseActor | null {\n        const targetCells = this.getTarget();\n        if (Array.isArray(targetCells)) {\n            const cells = targetCells as Cell[];\n            if (cells.length > 0) {\n                return cells[0].getFirstActor();\n            }\n        }\n        else if (targetCells.getFirstActor) {\n            return targetCells.getFirstActor();\n        }\n        return null;\n    }\n\n\n    /* Sets the selection object (for chats/trainers/etc) */\n    public setSelectionObject(obj): void {\n        this._wantSelection = true;\n        this._selectionObject = obj;\n    }\n\n    public selectionDone(): void {\n        this._wantSelection = false;\n        this._selectionObject = null;\n    }\n\n    /* Main function which returns next action as function. TODO: Refactor into\n     * something bearable. It's 150 lines now! */\n    public decideNextAction(obj: PlayerCmdInput): ActionCallback {\n      this._cache.seen = CACHE_INVALID;\n\n      // Workaround at the moment, because some commands are GUI-driven\n      if (obj.hasOwnProperty('cmd')) {\n        this.resetBoosts();\n        return this.handleCommand(obj);\n      }\n\n      const code = obj.code;\n      if (RG.isNullOrUndef([code])) {\n        RG.err('Brain.Player', 'decideNextAction',\n          `obj.code or obj.cmd must exist. Got obj: ${JSON.stringify(obj)}`);\n      }\n\n      // Stop here, if action must be confirmed by player by pressing Y\n      if (this._wantConfirm && this._confirmCallback !== null) {\n          return this.processConfirm(code);\n      }\n\n      // A player must make a selection\n      if (this._wantSelection) {\n          return this.processMenuSelection(code);\n      }\n\n      const fsmValue = this._fsm.processKey(code);\n      if (fsmValue !== FSM_NO_MATCH) {\n          return fsmValue;\n      }\n\n      // Create a mark or goto a mark\n      if (KeyMap.isMark(code)) {\n          this._markList.addMark();\n          return this.noAction();\n      }\n      else if (KeyMap.isGoto(code)) {\n          this.setSelectionObject(this._markList.getMenu());\n          return this.noAction();\n      }\n\n      // Invoke GUI callback with given code\n      if (this._guiCallbacks.hasOwnProperty(code)) {\n        return this._guiCallbacks[code](code);\n      }\n\n      // Enable/disable run mode\n      if (KeyMap.isRunMode(code)) {\n        this.toggleRunMode();\n        return this.noAction();\n      }\n\n      // Enable/disable fight mode\n      if (KeyMap.isFightMode(code)) {\n        this.toggleFightMode();\n        return this.noAction();\n      }\n\n      if (KeyMap.isIssueOrder(code)) {\n          this.issueOrderCmd();\n          return this.noAction();\n      }\n\n      if (KeyMap.isLook(code)) {\n          this.lookCmd();\n          return this.noAction();\n      }\n\n      if (KeyMap.isJump(code)) {\n          this.jumpCmd();\n          return this.noAction();\n      }\n\n      if (KeyMap.isUseAbility(code)) {\n          this.useAbility();\n          return this.noAction();\n      }\n\n      if (KeyMap.isGive(code)) {\n          this.giveCmd();\n          return this.noAction();\n      }\n\n      // Need existing position for move/attack commands\n      const level = this._actor.getLevel();\n      let x = this._actor.getX();\n      let y = this._actor.getY();\n      const currMap = level.getMap();\n      const currCell = currMap.getCell(x, y);\n\n      // For digging through item stack on curr cell\n      if (KeyMap.isNextItem(code)) {\n        getNextItemOnTop(currCell);\n        return this.noAction();\n      }\n\n      let cmdType = 'NULL';\n      if (KeyMap.inMoveCodeMap(code)) {\n        const diffXY = KeyMap.getDiff(code, x, y);\n        x = diffXY[0];\n        y = diffXY[1];\n        cmdType = 'MOVE';\n      }\n      else {\n        this._restoreBaseSpeed(); // Speedup only during move\n      }\n\n      if (cmdType === 'NULL') { // Not a move command\n        this.resetBoosts();\n\n        if (KeyMap.isRest(code)) {cmdType = 'REST';}\n\n        if (KeyMap.isPickup(code)) {\n          cmdType = 'PICKUP';\n          if (currCell.hasProp('items')) {\n            if (currCell.hasShop()) {\n              const shop = currCell.getShop();\n              if (!shop.isAbandoned()) {\n                this._createBuyConfirmCallback(currCell);\n                return this.noAction();\n              }\n              else {\n                this.energy = RG.energy.PICKUP;\n                return () => {\n                  const pickup = new Component.Pickup();\n                  this._actor.add(pickup);\n                };\n              }\n            }\n            else {\n              this.energy = RG.energy.PICKUP;\n              return () => {\n                const pickup = new Component.Pickup();\n                this._actor.add(pickup);\n              };\n            }\n          }\n          else {\n            return this.cmdNotPossible(\n              'There are no items to pick up.');\n          }\n        }\n\n        if (KeyMap.isUseStairs(code)) {\n          cmdType = 'STAIRS';\n          if (currCell.hasConnection()) {\n            return () => {\n                const stairsComp = new Component.UseStairs();\n                this._actor.add(stairsComp);\n            };\n          }\n          else {\n            return this.cmdNotPossible(\n              'There are no stairs or passage here.');\n          }\n        }\n\n        if (KeyMap.isToggleDoor(code)) {\n          return this.tryToToggleDoor();\n        }\n\n        if (KeyMap.isUsePower(code)) {\n          if (this.hasPowers()) {\n              this._wantSelection = true;\n              this._selectionObject =\n                this._actor.getBook().getSelectionObject();\n              RG.gameMsg('Press 0-9 to make a selection.');\n          }\n          else {\n              RG.gameMsg('You have no powers to use.');\n          }\n          return this.noAction();\n        }\n\n        if (KeyMap.isChat(code)) {\n          this._wantSelection = true;\n          this._selectionObject = chatSelObject(this._actor);\n        }\n\n        if (KeyMap.isRead(code)) {\n            const readComp = new Component.Read();\n            this._actor.add(readComp);\n            return ACTION_ALREADY_DONE;\n        }\n      }\n\n      if (cmdType === 'MOVE') {\n          return this.moveCmd(level, currMap, x, y);\n      }\n      else if (cmdType === 'REST') {\n        this.energy = RG.energy.REST;\n        this._actor.add(new Component.Rest());\n        return ACTION_ALREADY_DONE;\n      }\n\n      return this.noAction();\n    }\n\n    public hasPowers() {\n        return !!this._actor.getBook();\n    }\n\n    /* Called when Y/N choice required from player. */\n    public processConfirm(code) {\n        this._wantConfirm = false;\n        if (KeyMap.isConfirmYes(code)) {\n          this.energy = this._confirmEnergy;\n          // If confirmed, return action to be done\n          return this._confirmCallback;\n        }\n        RG.gameMsg('You cancel the action.');\n        return this.noAction();\n    }\n\n    public processMenuSelection(code) {\n        // if (this._selectionObject) {\n        if (Menu.isMenuItem(this._selectionObject)) {\n          if (this._selectionObject.showMsg) {\n              this._selectionObject.showMsg();\n          }\n          const selection = this._selectionObject.select(code);\n          // function terminates the selection\n          if (Menu.isSelectionDone(selection)) {\n            this.selectionDone();\n            return selection;\n          } // object returns another selection\n          else if (Menu.isMenuItem(selection)) {\n            this._selectionObject = selection as SelectionObject;\n            const selObj = selection as SelectionObject;\n            if (selObj.funcToCall) {\n              this.selectionDone();\n              return selObj.funcToCall();\n            }\n            return this.noAction();\n          }\n        }\n        this.selectionDone();\n        RG.gameMsg('You cancel the action.');\n        return this.noAction();\n    }\n\n    /* Executes the move command/attack command for the player. */\n    public moveCmd(level, currMap, x, y) {\n        if (!currMap.hasXY(x, y)) {\n          if (this._actor.getCell().hasPassage()) {\n              const cb = () => {\n                  const stairsComp = new Component.UseStairs();\n                  this._actor.add(stairsComp);\n              };\n              const msg = 'Press \\'y\\' to move to another area';\n              this.setWantConfirm(RG.energy.MOVE, cb, msg);\n              return this.noAction();\n          }\n          else {\n              const msg = 'You cannot move there.';\n              return this.cmdNotPossible(msg);\n          }\n        }\n\n        // Cell exists in map, check if we can enter it, or if there's\n        // something blocking the way\n        if (currMap.isPassable(x, y)) {\n          return this.moveToCell(x, y, level);\n        }\n        else if (currMap.getCell(x, y).hasClosedDoor()) {\n          return this.tryToToggleDoor();\n        }\n        else if (currMap.getCell(x, y).hasActors()) {\n          this._restoreBaseSpeed();\n          const target = getAttackTarget(currMap, x, y);\n\n          if (target === null) {\n            RG.err('Brain.Player', 'decideNextAction',\n              'Null target for attack x,y: ' + x + ',' + y);\n          }\n\n          const attackCallback = () => {\n            this._setAttackStats();\n            const attackComp = new Component.Attack({target});\n            this._actor.add(attackComp);\n          };\n\n          if (target.isEnemy(this._actor)) {\n            this.energy = RG.energy.ATTACK;\n            return attackCallback;\n          }\n          else {\n            const msg = `Press 'y' to attack non-hostile ${target.getName()}`;\n            this.setWantConfirm(RG.energy.ATTACK, attackCallback, msg);\n            return this.noAction();\n          }\n        }\n        else if (this._actor.has('Flying') && currMap.isPassableByAir(x, y)) {\n          this._restoreBaseSpeed();\n          return this.moveToCell(x, y, level);\n        }\n        else {\n          const msg = RG.getImpassableMsg(this._actor,\n            currMap.getCell(x, y), 'You');\n          return this.cmdNotPossible(msg);\n        }\n    }\n\n    public moveToCell(x, y, level) {\n        if (this._runModeEnabled) {this.energy = RG.energy.RUN;}\n        else {\n          this.resetBoosts();\n          this.energy = RG.energy.MOVE;\n        }\n\n        return () => {\n          const movComp = new Component.Movement(x, y, level);\n          this._actor.add(movComp);\n        };\n    }\n\n    public setWantConfirm(energy, callback, msg) {\n        this._confirmEnergy = energy;\n        this._wantConfirm = true;\n        this._confirmCallback = callback;\n        if (msg) {RG.gameMsg(msg);}\n    }\n\n    public issueOrderCmd(): void {\n        const orderMenuArgs = [\n            ['Follow me', this.giveOrder.bind(this, 'Follow')],\n            ['Attack enemy', this.giveOrder.bind(this, 'Attack')],\n            ['Pickup an item', this.giveOrder.bind(this, 'Pickup')],\n            ['Forget my orders', this.giveOrder.bind(this, 'Forget')]\n        ];\n        const orderMenuSelectOrder = new Menu.WithQuit(orderMenuArgs);\n        orderMenuSelectOrder.onQuit = this.cancelTargeting.bind(this);\n        const cellMenuArgs = [\n            // When key is pressed, show the next menu\n            {key: Keys.KEY.SELECT, menu: orderMenuSelectOrder}\n        ];\n\n        RG.gameMsg(selectTargetMsg);\n\n        const orderMenuSelectCell = new Menu.SelectCell(cellMenuArgs);\n        orderMenuSelectCell.enableSelectAll();\n        orderMenuSelectCell.setCallback(this.selectCell.bind(this));\n        this.setSelectionObject(orderMenuSelectCell);\n        this.selectCell();\n    }\n\n    public lookCmd(): void {\n        const cellMenuArgs = [\n            // When key is pressed, calls func\n            {key: Keys.KEY.SELECT,\n                funcToCall: this.showSelectedCellInfo.bind(this)\n            }\n        ];\n        RG.gameMsg(lookCellMsg);\n        const orderMenuSelectCell = new Menu.SelectCell(cellMenuArgs);\n        orderMenuSelectCell.setCallback(this.selectCell.bind(this));\n        this.setSelectionObject(orderMenuSelectCell);\n        this._fsm.startLooking();\n        this.selectCell();\n    }\n\n    public giveCmd(): void {\n        const menu = new Menu.SelectDir();\n        menu.setCallback(this.giveCallback.bind(this));\n        this.setSelectionObject(menu);\n        RG.gameMsg('Please select direction to giving an item:');\n    }\n\n    public giveCallback(dXdY): void {\n        const [tX, tY] = RG.newXYFromDir(dXdY, this._actor);\n        const cell = this._actor.getLevel().getMap().getCell(tX, tY);\n        if (cell.hasActors()) {\n            const actor = cell.getFirstActor();\n            const items = this._actor.getInvEq().getInventory().getItems();\n            const itemMenuItems = items.map(item => (\n                [\n                    item.toString(),\n                    this.giveItemToActor.bind(this, item, actor)\n                ]\n            ));\n            const itemMenu = new Menu.WithQuit(itemMenuItems);\n            itemMenu.addPre('Select an item to give:');\n            this.setSelectionObject(itemMenu);\n        }\n        else {\n            RG.gameDanger('There is no one there');\n        }\n    }\n\n    public giveItemToActor(item, actor): void {\n        const giveComp = new Component.Give();\n        giveComp.setGiveTarget(actor);\n        giveComp.setItem(item);\n        this._actor.add(giveComp);\n    }\n\n    public jumpCmd(): void {\n        const menu = new Menu.SelectDir();\n        menu.setCallback(this.jumpCallback.bind(this));\n        this.setSelectionObject(menu);\n        RG.gameMsg('Please select direction to jump');\n    }\n\n    public jumpCallback(dXdY): void {\n        this.energy = RG.energy.JUMP;\n        const [x, y] = dXdY;\n        const jumpCmp = new Component.Jump();\n        jumpCmp.setX(x);\n        jumpCmp.setY(y);\n        this._actor.add(jumpCmp);\n    }\n\n    public giveOrder(orderType): void {\n        const cells = this.getTarget() as Cell[];\n        cells.forEach(cell => {\n            if (cell.hasActors()) {\n                const target = cell.getActors()[0];\n                const brain = target.getBrain() as BrainGoalOriented;\n                if (target && brain.getGoal) {\n                    switch (orderType) {\n                        case 'Follow': this.giveFollowOrder(target); break;\n                        case 'Forget': this.forgetOrders(target); break;\n                        case 'Attack': this.giveOrderAttack(target); break;\n                        case 'Pickup': this.giveOrderPickup(target); break;\n                        default: break;\n                    }\n                }\n            }\n            else if (cells.length === 1) {\n                RG.gameDanger('This cell has no valid targets');\n            }\n        });\n        this.setSelectedCells(null);\n    }\n\n    public giveFollowOrder(target) {\n        const name = target.getName();\n        const args = {bias: 0.7, src: this._actor};\n        GoalsBattle.giveFollowOrder(target, args);\n        RG.gameMsg(`You tell ${name} to follow you`);\n    }\n\n    public forgetOrders(target) {\n        const args = {bias: 0.7, src: this._actor};\n        GoalsBattle.giveClearOrders(target, args);\n        RG.gameMsg(`You tell ${name} to forget your orders`);\n    }\n\n    public giveOrderAttack(target) {\n        const visibleCells = this.getSeenCells();\n        const cells = RG.findEnemyCellForActor(\n            this._actor, visibleCells);\n        if (cells.length === 0) {\n            RG.gameMsg('There are no enemies around.');\n            return;\n        }\n\n        const cellIndex = this.getCellIndexToTarget(cells);\n        const enemyCell = cells[cellIndex];\n\n        if (enemyCell) {\n            const name = target.getName();\n            const enemy = enemyCell.getActors()[0];\n            const enemyName = enemy.getName();\n            const args = {bias: this.getOrderBias(), enemy, src: this._actor};\n            GoalsBattle.giveAttackOrder(target, args);\n            RG.gameMsg(`You tell ${name} to attack ${enemyName}`);\n        }\n        else {\n            RG.gameMsg('There are no enemies around.');\n        }\n    }\n\n    public giveOrderPickup(target: BaseActor): void {\n        const item = this.getItemInSight();\n        const name = target.getName();\n        if (item) {\n            const itemName = item.getName();\n            const args = {bias: this.getOrderBias(), item, src: this._actor};\n            GoalsBattle.givePickupOrder(target, args);\n            RG.gameMsg(`You tell ${name} to pickup ${itemName}`);\n        }\n        else {\n            RG.gameMsg(`There are no items for ${name} to pickup`);\n        }\n    }\n\n    public getOrderBias(): number {\n        if (this._actor.has('Leader')) {return 1.0;}\n        if (this._actor.has('Commander')) {return 1.5;}\n        return 0.7;\n    }\n\n    public useAbility(): void {\n        if (this._actor.has('Abilities')) {\n            const menu = this._actor.get('Abilities').createMenu();\n            this.setSelectionObject(menu);\n        }\n        else {\n            RG.gameMsg('You have no abilities to use');\n        }\n    }\n\n\n    public addMark(tag?: string): void {\n        this._markList.addMark(tag);\n    }\n\n    /* Returns one item in sight, or null if no items are seen. */\n    public getItemInSight(): ItemBase {\n        const seenCells = this.getSeenCells();\n        const itemCells = seenCells.filter(cell => cell.hasItems());\n        if (itemCells.length > 0) {\n            const chosenCell = RNG.arrayGetRand(itemCells);\n            return chosenCell.getItems()[0];\n        }\n        return null;\n    }\n\n    public toJSON() {\n        return {\n            type: this.getType(),\n            memory: this._memory.toJSON(),\n            markList: this._markList.toJSON()\n        };\n    }\n\n    /* Required for various functions. Does nothing for the player.*/\n    /* eslint-disable class-methods-use-this */\n    public addEnemy() {}\n    public addFriend() {}\n    /* eslint-enable class-methods-use-this */\n\n    //--------------------------------------\n    // TARGETING FSM DELEGATED METHODS\n    //--------------------------------------\n\n    /* Returns true if a player has target selected. */\n    public hasTargetSelected() {\n        return this._fsm.hasTargetSelected();\n    }\n\n    public startTargeting() {\n        this._fsm.startTargeting();\n    }\n\n    /* Moves to the next target. */\n    public nextTarget() {\n        this._fsm.nextTarget();\n    }\n\n    public getTargetList(): Cell[] {\n        return this._fsm.getTargetList();\n    }\n\n    public getSelectedCells() {\n        return this._fsm.getSelectedCells();\n    }\n\n    public prevTarget() {\n        this._fsm.prevTarget();\n    }\n\n    /* Returns the current selected cell for targeting. */\n    public getTarget(): Cell | Cell[] {\n        return this._fsm.getTarget();\n    }\n\n    /* Returns true if chosen target is within attack range. */\n    public isTargetInRange() {\n        return this._fsm.isTargetInRange();\n    }\n\n    public cancelTargeting() {\n        this._fsm.cancelTargeting();\n    }\n\n    public isTargeting() {\n        return this._fsm.isTargeting();\n    }\n\n    /* Picks either last attacked actor, or the first found. */\n    public getCellIndexToTarget(cells): number {\n        return this._fsm.getCellIndexToTarget(cells);\n    }\n\n    public setSelectedCells(cells: Cell[]): void {\n        if (!cells) {\n            this.cancelTargeting();\n        }\n        else {\n            this._fsm.setSelectedCells(cells);\n        }\n    }\n\n    public selectCell(code?: number) {\n        this._fsm.selectCell(code);\n    }\n\n    public showSelectedCellInfo() {\n        // const cell = this.getTarget();\n        // TODO show more info about the cell\n        this._fsm.stopLooking();\n    }\n\n} // Brain.Player\n\n/* Returns possible target for attack, or null if none are found.*/\nfunction getAttackTarget(map, x, y) {\n    const targets = map.getCell(x, y).getProp('actors');\n    for (let i = 0; i < targets.length; i++) {\n        if (!targets[i].has('Ethereal')) {return targets[i];}\n    }\n    return null;\n}\n\n/* If there are multiple items per cell, digs next item to the top.*/\nfunction getNextItemOnTop(cell) {\n    if (cell.hasItems()) {\n        const items = cell.getItems();\n        let name = items[0].getName();\n        if (items.length > 1) {\n            const firstItem = items.shift();\n            items.push(firstItem);\n            name = items[0].getName();\n            RG.gameMsg('You see now ' + name + ' on top of the heap.');\n        }\n        else {\n            RG.gameMsg('You see only ' + name + ' here');\n        }\n    }\n    else {\n        RG.gameMsg('There are no items here to look through');\n    }\n}\n","/* Contains code for handling actor equipment. */\nimport RG from './rg';\n\ntype ItemBase = import('./item').ItemBase;\n\nexport class EquipSlot {\n\n    public _type: string;\n    public _item: ItemBase;\n    public _hasItem: boolean;\n    public _unequipped: any;\n    public _stacked: boolean;\n\n    constructor(type: string, stacked?: boolean) {\n        this._type = type;\n        this._item = null;\n        this._hasItem = false;\n        this._unequipped = null;\n        this._stacked = false;\n        if (!RG.isNullOrUndef([stacked])) {this._stacked = stacked;}\n    }\n\n    public isStacked(): boolean {\n        return this._stacked;\n    }\n\n    public getUnequipped(): ItemBase | null {return this._unequipped;}\n\n    /* Returns the equipped item for this slot.*/\n    public getItem(): ItemBase | null {\n        if (this._hasItem) {return this._item;}\n        return null;\n    }\n\n    public hasItem(): boolean {\n        return this._hasItem;\n    }\n\n    /* Equips given item to first available place in slot.*/\n    public equipItem(item): boolean {\n        if (this.canEquip(item)) {\n            if (!this._stacked || !this._hasItem) {\n                item.setOwner(this);\n                this._item = item;\n                this._hasItem = true;\n            }\n            else if (RG.addStackedItems(this._item, item)) {\n                this._hasItem = true;\n            }\n            return this._hasItem;\n        }\n        return false;\n    }\n\n    /* Unequips N items from the slot. */\n    public unequipItem(n): boolean {\n        if (this._hasItem) {\n            if (!this._stacked) {\n                this._hasItem = false;\n                this._unequipped = this._item;\n                return true;\n            }\n            else if (n > 0) {\n                if (n === 1 && this._item.getCount() === 1) {\n                    this._hasItem = false;\n                    this._unequipped = this._item;\n                }\n                else if (n === this._item.getCount()) {\n                    this._hasItem = false;\n                    this._unequipped = this._item;\n                }\n                else {\n                    this._unequipped = RG.removeStackedItems(this._item, n);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public canEquip(item) {\n        if (!this._hasItem) {\n            return true;\n        }\n        else if (this._stacked) {\n            // Can only equip same items to the stack\n            return item.equals(this._item);\n        }\n        return false;\n    }\n}\n\ntype EquipSlotOrArray = EquipSlot | EquipSlot[];\ninterface IEquipSlots {[key: string]: EquipSlotOrArray; }\n\n\nconst _equipMods: string[] = ['getDefense', 'getAttack', 'getProtection',\n    'getSpeed'].concat(RG.GET_STATS);\n\n/* Models equipment on an actor.*/\nexport class Equipment {\n\n    private _actor: any;\n    private _slots: IEquipSlots;\n\n    constructor(actor: any) {\n        this._actor = actor;\n\n        this._slots = {\n            chest: new EquipSlot('chest'),\n            feet: new EquipSlot('feet'),\n            hand: new EquipSlot('hand'),\n            head: new EquipSlot('head'),\n            missile: new EquipSlot('missile', true),\n            missileweapon: new EquipSlot('missileweapon'),\n            neck: new EquipSlot('neck'),\n            shield: new EquipSlot('shield'),\n            spiritgem: new EquipSlot('spiritgem')\n        };\n\n\n        /* Creates getters for stats and combat attributes. */\n        for (let i = 0; i < _equipMods.length; i++) {\n            /* eslint no-loop-func: 0 */\n            // Use closure to fix the function name\n            const getFunc = () => {\n                return () => this.propertySum(_equipMods[i]);\n            };\n            this[_equipMods[i]] = getFunc();\n        }\n\n    }\n\n    public addSlot(slotType: string, slotObj: EquipSlot): void {\n        if (this._hasSlot(slotType)) {\n            if (Array.isArray(this._slots[slotType])) {\n                (this._slots[slotType] as EquipSlot[]).push(slotObj);\n            }\n            else {\n                const slotArr: EquipSlot[] = [this._slots[slotType] as EquipSlot];\n                slotArr.push(slotObj);\n                this._slots[slotType] = slotArr;\n            }\n        }\n        else {\n            this._slots[slotType] = slotObj;\n        }\n    }\n\n\n    /* Returns the total weight of the equipment. */\n    public getWeight(): number {\n        let total = 0;\n        const equipped: any[] = this.getEquippedItems();\n        for (let i = 0; i < equipped.length; i++) {\n            total += equipped[i].getWeight() * equipped[i].getCount();\n        }\n        if (this._actor.has('MasterEquipper')) {\n            total *= this._actor.get('MasterEquipper').getFactor();\n        }\n        return total;\n    }\n\n    /* Returns the number of slots for given type. */\n    public getNumSlots(slotType: string): number {\n        if (this._hasSlot(slotType)) {\n            if (Array.isArray(this._slots[slotType])) {\n                return (this._slots[slotType] as EquipSlot[]).length;\n            }\n            return 1;\n        }\n        return 0;\n    }\n\n    public getSlotTypes(): string[] {\n        return Object.keys(this._slots);\n    }\n\n    public getItems(slotType?: string): EquipSlot[] {\n        if (this._hasSlot(slotType)) {\n            if (Array.isArray(this._slots[slotType])) {\n                return (this._slots[slotType] as EquipSlot[]);\n            }\n            return [this._slots[slotType] as EquipSlot];\n        }\n        return this.getEquippedItems();\n    }\n\n    /* Returns last unequipped item for the slot.*/\n    public getUnequipped(slotType: string, index?: number) {\n        if (this._hasSlot(slotType)) {\n            const slot: EquipSlotOrArray = this._slots[slotType];\n            if (Array.isArray(slot)) {\n                return slot[index].getUnequipped();\n            }\n            else {\n                return (this._slots[slotType] as EquipSlot).getUnequipped();\n            }\n        }\n        else {\n            RG.err('Equipment', 'getUnequipped',\n                'No slot type: ' + slotType);\n        }\n        return null;\n    }\n\n    /* Returns an item in the given slot.*/\n    public getItem(slotType: string) {\n        if (this._hasSlot(slotType)) {\n            const slot: EquipSlotOrArray = this._slots[slotType];\n            if (Array.isArray(slot)) {\n                return slot.map(itemSlot => itemSlot.getItem());\n            }\n            return (this._slots[slotType] as EquipSlot).getItem();\n        }\n        return null;\n    }\n\n    /* Equips given item. Slot is chosen automatically from suitable available\n     * ones.*/\n    public equipItem(item): boolean {\n        if (item.getArmourType) {\n            return this._equipToSlotType(item.getArmourType(), item);\n        }\n        // No equip property, can only equip to hand\n        else if (/^(missile|ammo)$/.test(item.getType())) {\n            const missileSlot = this._slots.missile as EquipSlot;\n            if (missileSlot.equipItem(item)) {\n                return true;\n            }\n        }\n        else if (item.getType() === 'missileweapon') {\n            return this._equipToSlotType('missileweapon', item);\n        }\n        else {\n            return this._equipToSlotType('hand', item);\n        }\n        return false;\n    }\n\n    public _equipToSlotType(slotType, item) {\n        const slot = this._slots[slotType];\n        if (Array.isArray(slot)) {\n            for (let i = 0; i < slot.length; i++) {\n                if (slot[i].equipItem(item)) {\n                    return true;\n                }\n            }\n        }\n        else if (slot.equipItem(item)) {\n            return true;\n        }\n        return false;\n    }\n\n    /* Returns true if given item is equipped.*/\n    public isEquipped(item) {\n        const equipped = this.getItems();\n        const index = equipped.indexOf(item);\n        return index !== -1;\n    }\n\n    public getEquipped(slotType) {\n        return this.getItem(slotType);\n    }\n\n    public getEquippedItems() {\n        const items = [];\n        Object.values(this._slots).forEach((slot) => {\n            if (Array.isArray(slot)) {\n                slot.forEach(subSlot => {\n                    if (subSlot.hasItem()) {\n                        items.push(subSlot.getItem());\n                    }\n                });\n            }\n            else if (slot.hasItem()) {\n                items.push(slot.getItem());\n            }\n        });\n        return items;\n    }\n\n    /* Unequips given slotType and index. */\n    public unequipItem(slotType: string, n: number, index?: number) {\n        if (this._hasSlot(slotType)) {\n            const slot = this._slots[slotType];\n            if (Array.isArray(slot)) {\n                if (index >= 0) {\n                    if (slot[index].unequipItem(n)) {\n                        return true;\n                    }\n                }\n                else {\n                    for (let i = 0; i < slot.length; i++) {\n                        if (slot[i].unequipItem(n)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            else {\n                return (this._slots[slotType] as EquipSlot).unequipItem(n);\n            }\n        }\n        else {\n            const msg = 'Non-existing slot type ' + slotType;\n            RG.err('Equipment', 'unequipItem', msg);\n        }\n        return false;\n    }\n\n    public toJSON() {\n        const json = [];\n        const equipped = this.getEquippedItems();\n        for (let i = 0; i < equipped.length; i++) {\n            json.push(equipped[i].toJSON());\n        }\n        return json;\n    }\n\n    /* Calls given funcname for each item in slot, and sums the results\n     * of the function together. */\n    private propertySum(funcname): number {\n        let result = 0;\n        const slotKeys = Object.keys(this._slots);\n        slotKeys.forEach(slotName => {\n            const slotObj = this._slots[slotName];\n            let slots = slotObj;\n            if (!Array.isArray(slots)) {\n                slots = [slots];\n            }\n\n            slots.forEach(slot => {\n                const item = slot.getItem();\n                result += RG.getItemStat(funcname, item);\n            });\n        });\n        return result;\n    }\n\n\n    private _hasSlot(slotType: string): boolean {\n        return this._slots.hasOwnProperty(slotType);\n    }\n}\n\nexport interface Equipment {\n    getAccuracy(): number;\n    getAgility(): number;\n    getAttack(): number;\n    getDefense(): number;\n    getMagic(): number;\n    getPerception(): number;\n    getProtection(): number;\n    getSpeed(): number;\n    getStrength(): number;\n    getWillpower(): number;\n}\n","\nimport RG from '../rg';\nimport {ACTION_ALREADY_DONE} from './brain';\nimport {BrainBase} from './brain.base';\nimport * as Component from '../component/component';\n\ntype ActionCallback = import('../time').ActionCallback;\n\nexport class BrainWeather extends BrainBase {\n\n    protected updateFreq: number;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('Weather');\n        this.updateFreq = 10;\n    }\n\n    public decideNextAction(obj?: any): ActionCallback {\n        --this.updateFreq;\n        const level = this._actor.getLevel();\n        if (this.updateFreq === 0 && level.has('Weather')) {\n            const weather = level.get('Weather');\n            const wType = weather.getWeatherType();\n            const wEffect = new Component.WeatherEffect();\n            wEffect.setEffectType(wType);\n            this._actor.add(wEffect);\n            this.updateFreq = 10;\n        }\n        return ACTION_ALREADY_DONE;\n    }\n}\n","\nimport RG from './rg';\nimport {IConstraint} from './interfaces';\n\ntype ConstraintArg = IConstraint | IConstraint[];\n\n/* This class creates constraint functions from config objects. A single\n * constrains is defined by the following object:\n * {op: OPERATION,\n *  prop: PROPERTY TO COMPARE\n *  value: VALUE TO COMPARE AGAINTS USING op\n * }\n * For example: {op: 'eq', prop: 'name', value: 'Giant rat'} checks that\n * name is equal to 'Giant rat'.\n */\nexport class Constraints {\n\n    public getConstraints(objOrArray: ConstraintArg): (obj) => boolean {\n        if (Array.isArray(objOrArray)) {\n            const funcs = objOrArray.map(constr => (\n                this.getFunc(constr.op, constr.prop, constr.value)\n            ));\n            const aggrFunc: any = function(obj) {\n                let res = true;\n                funcs.forEach(f => {res = res && f(obj);});\n                return res;\n            };\n            aggrFunc.constraint = objOrArray;\n            return aggrFunc;\n        }\n        else if (typeof objOrArray === 'object') {\n            const {op, prop, value} = objOrArray;\n            return this.getFunc(op, prop, value);\n        }\n        else {\n            const msg = `Param must be array/object. Got: ${objOrArray}`;\n            RG.err('Constrains', 'getConstraints', msg);\n        }\n        return null;\n    }\n\n    public getFunc(op: string, prop: string, value: any): (obj) => boolean {\n        if (Array.isArray(value)) {\n            const funcs = value.map(val => (\n                this.getFunc(op, prop, val)\n            ));\n            const aggrFunc: any = function(obj) {\n                let res = false;\n                funcs.forEach(f => {res = res || f(obj);});\n                return res;\n            };\n            aggrFunc.constraint = {op, prop, value};\n            return aggrFunc;\n        }\n        else {\n            let func: any = () => false;\n            switch (op) {\n                case '==': // fall\n                case '===': // fall\n                case 'eq': func = obj => obj[prop] === value; break;\n                case '!=':\n                case '!==':\n                case 'neq': func = obj => obj[prop] !== value; break;\n                case '>=':\n                case 'gte': func = obj => obj[prop] >= value; break;\n                case '<=':\n                case 'lte': func = obj => obj[prop] <= value; break;\n                case '>':\n                case 'gt': func = obj => obj[prop] > value; break;\n                case '<':\n                case 'lt': func = obj => obj[prop] < value; break;\n                case 'match':\n                    func = obj => new RegExp(value).test(obj[prop]); break;\n                default: RG.err('Constraints', 'getFunc',\n                    `Unsupported op ${op} given`);\n            }\n            func.constraint = {op, prop, value};\n            return func;\n        }\n    }\n\n}\n","/* Contains some functions to shorten the definitions in actor/item\n * shells. */\n\nimport RG from '../src/rg';\n\nexport const meleeHitDamage = (dmg, dur, dmgType) => {\n    return {\n        addComp: 'DirectDamage', func: [\n            {setter: 'setDamage', value: dmg},\n            {setter: 'setDamageType', value: RG.DMG[dmgType]},\n            {setter: 'setDamageCateg', value: RG.DMG.MELEE}\n        ],\n        duration: dur\n    };\n};\n\nexport const color = function(fg, bg) {\n    return {fg, bg};\n};\n\n// TODO these should always be extended in mixNewShell instead of override\nconst alwaysMergeProps = new Set<string>(\n    ['addComp', 'spells', 'inv', 'equip']\n);\n\nconst alwaysIncrProps = new Set<string>(\n    ['hp', 'maxHP', 'pp', 'maxPP', 'defense',\n        'protection', 'attack', 'danger', 'speed'\n    ]\n    .concat(RG.STATS_LC)\n);\n\n\ninterface OverrideConf {\n    override: {[key: string]: boolean};\n    merge: {[key: string]: boolean};\n}\n\n/* Creates a new object shell from an array of shells. Applies \"smart\"\n * merging to some fields like addComp.\n */\nexport const mixNewShell = function(shells: any[], conf?: OverrideConf): any {\n    const newShell = {};\n    shells.forEach(shell => {\n        for (const p in shell) {\n            if (shell.hasOwnProperty(p)) {\n                addShellProp(p, shell, newShell, conf);\n            }\n        }\n    });\n    return newShell;\n};\n\n/* Adds a property to the shell. */\nfunction addShellProp(p, shell, newShell, conf?: OverrideConf): void {\n    if (alwaysMergeProps.has(p)) {\n        if (newShell.hasOwnProperty(p)) {\n            newShell[p] = newShell[p].concat(shell[p]);\n        }\n        else {\n            newShell[p] = shell[p].slice();\n        }\n    }\n    else {\n        if (Array.isArray(shell[p])) {\n            newShell[p] = shell[p].slice();\n        }\n        else if (typeof shell[p] === 'object') {\n            newShell[p] = JSON.parse(JSON.stringify(shell[p]));\n        }\n        else {\n            if (alwaysIncrProps.has(p)) {\n                incrShellProp(p, shell, newShell);\n            }\n            else {\n                newShell[p] = shell[p];\n            }\n        }\n    }\n}\n\n/* Adds the value of prop p in shell to newShell. */\nfunction incrShellProp(p, shell, newShell): void {\n    if (newShell.hasOwnProperty(p)) {\n        newShell[p] += shell[p];\n    }\n    else {\n        newShell[p] = shell[p];\n    }\n}\n","\n/* This file contains the top-level goals for actors. */\n\nimport RG from './rg';\nimport {Goal, GoalStatus} from './goals';\nimport {Random} from './random';\n\n// const GoalsBattle = require('./goals-battle');\nimport {Evaluator, EvaluatorBase} from './evaluators';\nimport {EvaluatorsBattle} from './evaluators-battle';\nconst debug = require('debug')('bitn:goals-top');\n\nconst {\n    GOAL_COMPLETED,\n    GOAL_INACTIVE,\n    GOAL_FAILED\n} = GoalStatus;\n\nconst RNG = Random.getRNG();\n\nexport const GoalsTop: any = {};\n//---------------------------------------------------------------------------\n// TOP-LEVEL GOALS\n//---------------------------------------------------------------------------\n\n/* Base class for all top-level goals. Includes evaluator logic and goal\n * arbitration.\n */\nexport class GoalTop extends Goal.Base {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalTop');\n        this.evaluators = [];\n    }\n\n    public removeEvaluators(): void {\n        this.evaluators = [];\n    }\n\n    public addEvaluator(evaluator: EvaluatorBase): void {\n        this.evaluators.push(evaluator);\n    }\n\n    public activate(): void {\n        this.arbitrate();\n    }\n\n    public getEvaluator(type: string): EvaluatorBase {\n        return this.evaluators.find(e => e.getType() === type);\n    }\n\n    public arbitrate(): void {\n        this.dbg('arbitrate() started');\n        if (this.evaluators.length === 0) {\n            RG.err('GoalTop', 'arbitrate',\n                `No evaluators in ${this.getType}, actor: ${this.actor}`);\n        }\n        let bestRated = 0;\n        let chosenEval = null;\n\n        this.evaluators.forEach(evaluator => {\n            const desirability = evaluator.calculateDesirability(this.actor);\n            if (bestRated < desirability || chosenEval === null) {\n                chosenEval = evaluator;\n                bestRated = desirability;\n            }\n        });\n\n        if (chosenEval) {\n            chosenEval.setActorGoal(this.actor);\n        }\n        else {\n            RG.err('GoalTop', 'arbitrate',\n                'No next goal found');\n        }\n        this.dbg('arbitrate() finished');\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        const status = this.processSubGoals();\n        if (status === GOAL_COMPLETED || status === GOAL_FAILED) {\n            return GOAL_INACTIVE;\n        }\n        this.removeFinishedOrFailed();\n        this.dbg(`process() got status ${status}`);\n        return status;\n    }\n\n    public setBias(biases) {\n        Object.keys(biases).forEach(bias => {\n            const evaluator = this.evaluators.find(e => e.getType() === bias);\n            if (evaluator) {\n                evaluator.setBias(biases[bias]);\n            }\n            else {\n                const list = this.evaluators.map(e => e.getType());\n                const msg = `Bias ${bias} not matching any evaluator: ${list}`;\n                RG.warn('GoalTop', 'setBias', msg);\n            }\n        });\n    }\n\n    public toJSON() {\n        const evals = [];\n        this.evaluators.forEach(ev => {\n            // Order difficult to serialize as it can contain reference to any\n            // arbitrary goal (can be top-level goal). That would require tons\n            // of object refs, and it's a lot of work\n            if (ev.getType() !== 'Order') {\n                evals.push(ev.toJSON());\n            }\n        });\n        return {\n            type: this.getType(),\n            evaluators: evals\n        };\n    }\n\n}\nGoalsTop.Top = GoalTop;\n\n//---------------------------------------------------------------------------\n/* Top-level goal for actors. Arbitrates each turn with a number of lower level\n * goals. */\n//---------------------------------------------------------------------------\nexport class ThinkBasic extends GoalTop {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('ThinkBasic');\n        const [lowRange, hiRange] = [0.5, 1.5];\n\n        this.bias = {\n            attack: RNG.getUniformRange(lowRange, hiRange),\n            explore: RG.BIAS.Explore,\n            flee: RG.BIAS.Flee,\n            order: RG.BIAS.Order,\n            patrol: RG.BIAS.Patrol\n        };\n\n        this.updateEvaluators();\n    }\n\n    public updateEvaluators() {\n        this.removeEvaluators();\n        this.evaluators.push(new Evaluator.AttackActor(this.bias.attack));\n        this.evaluators.push(new Evaluator.Flee(this.bias.flee));\n        this.evaluators.push(new Evaluator.Explore(this.bias.explore));\n    }\n\n    /* Can be used to \"inject\" goals for the actor. The actor uses\n     * Evaluator.Orders to check if it will obey the order. */\n    public giveOrders(evaluator) {\n        // TODO remove this evaluator after the check\n        this.dbg('Received an order!!', evaluator);\n        this.addEvaluator(evaluator);\n    }\n\n    /* Clears the given orders. Useful if a new order needs to be issued to\n     * override the existing one. */\n    public clearOrders() {\n        const orders = this.evaluators.filter(ev => ev.isOrder());\n        orders.forEach(order => {\n            if (order.goal.isActive()) {\n                order.goal.terminate();\n            }\n            const index = this.evaluators.indexOf(order);\n            this.evaluators.splice(index, 1);\n        });\n    }\n\n    public addGoal(goal) {\n        const type = goal.getType();\n        this.dbg(`addGoal() ${type}`);\n        if (!this.isGoalPresent(type)) {\n            this.removeSubGoalsOfType(type);\n            this.addSubGoal(goal);\n            if (debug.enabled) {\n                RG.log('Actor subgoals are now: '\n                    + this.subGoals.map(g => g.getType()));\n            }\n        }\n    }\n\n}\nGoalsTop.ThinkBasic = ThinkBasic;\n\n/* Top-level goal for spell casters. */\nexport class ThinkSpellcaster extends ThinkBasic {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('ThinkSpellcaster');\n\n        this.bias.castSpell = 1.0;\n        this.evaluators.push(new Evaluator.CastSpell(this.bias.castSpell));\n    }\n\n}\nGoalsTop.ThinkSpellcaster = ThinkSpellcaster;\n\n/* Top goal used by commanders in battles. */\nexport class ThinkCommander extends ThinkBasic {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('ThinkCommander');\n\n        this.bias.attack = 0.1;\n        this.bias.winBattle = 0.8;\n        this.bias.retreat = 0.3;\n        this.updateEvaluators();\n    }\n\n    public updateEvaluators() {\n        super.updateEvaluators();\n        const winBattleEval = new EvaluatorsBattle.WinBattle(\n            this.bias.winBattle);\n        this.evaluators.push(winBattleEval);\n\n        const retreatEval = new EvaluatorsBattle.Retreat(this.bias.retreat);\n        this.evaluators.push(retreatEval);\n    }\n\n}\nGoalsTop.ThinkCommander = ThinkCommander;\n\n","\nimport RG from './rg';\nimport {Random} from './random';\nimport * as Menu from './menu';\nimport * as Component from './component/component';\n\ntype SentientActor = import('./actor').SentientActor;\n\nconst RNG = Random.getRNG();\n\n/* This file contains usable actor ability definitions. */\nexport const Ability: any = {};\n\ntype MenuItem = [string, (any?) => void] | [string, Menu.MenuBase];\n\nexport class AbilityBase {\n    public name: string;\n    public actor: SentientActor;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getMenuItem(): MenuItem {\n        return [\n            this.getName(),\n            this.activate.bind(this)\n        ];\n    }\n\n    public activate(obj: any): void {\n        const name = this.getName();\n        RG.err('Ability.Base', 'activate',\n            `${name} should implement activate()`);\n    }\n\n}\nAbility.Base = AbilityBase;\n\n//---------------------------------------------------------------------------\n// Abilities usable on actor itself\n//---------------------------------------------------------------------------\n\nexport class Self extends AbilityBase {\n\n    constructor(name) {\n        super('Self');\n    }\n\n    public getMenuItem(): MenuItem {\n        return [\n            this.getName(),\n            this.activate.bind(this)\n        ];\n    }\n}\nAbility.Self = Self;\n\nexport class Camouflage extends AbilityBase {\n\n    constructor(name) {\n        super('Camouflage');\n    }\n\n    public activate() {\n        const actor = this.actor;\n        actor.add(new Component.Camouflage());\n    }\n\n}\n\nAbility.Camouflage = Camouflage;\n\n/* Abilities affecting specific direction, where player must choose\n * a direction for using the ability. */\nexport const Direction = function() {\n    Ability.Base.call(this, name);\n};\nRG.extend2(Direction, Ability.Base);\n\n/* Abilities affecting specific area, where the area must be chosen by\n * the player. */\nexport const Area = function() {\n    Ability.Base.call(this, name);\n\n};\nRG.extend2(Area, Ability.Base);\n\n/* Base class for abilities targeting items. Each derived class must provide\n * activate(item) function for the actual ability functionality. */\nexport class Item extends AbilityBase {\n\n    constructor(name) {\n        super(name);\n    }\n\n    public activate(item) {\n        const json = JSON.stringify(item);\n        RG.err('Ability.Item', 'activate',\n            'Not impl. in base class. Called with: ' + json);\n    }\n\n    /* Constructs a table of items to select from. */\n    public getMenuItem(): MenuItem {\n        const items = this.actor.getInvEq().getInventory().getItems();\n        const itemMenuItems = items.map(item => (\n            [\n                item.toString(),\n                this.activate.bind(this, item)\n            ]\n        ));\n        const itemMenu = new Menu.MenuWithQuit(itemMenuItems);\n        itemMenu.addPre('Select an item to sharpen:');\n        return [\n            this.getName(),\n            itemMenu\n        ];\n    }\n\n}\nAbility.Item = Item;\n\n\n/* This ability can be used to sharpen weapons. */\nexport class Sharpener extends Ability.Item {\n\n    constructor() {\n        super('Sharpener');\n    }\n\n    public activate(item) {\n        const name = item.getName();\n        if (!item.has('Sharpened')) {\n            if (item.getDamageDie) {\n                item.add(new Component.Sharpened());\n                const dmgBonus = RNG.getUniformInt(1, 3);\n                const dmgDie = item.getDamageDie();\n                dmgDie.setMod(dmgDie.getMod() + dmgBonus);\n                item.setValue(item.getValue() + dmgBonus * 10);\n                RG.gameMsg(`You sharpen ${name}`);\n            }\n            else {\n                RG.gameMsg(`It's useless to sharpen ${name}`);\n            }\n        }\n        else {\n            RG.gameMsg(`${name} has already been sharpened`);\n        }\n    }\n\n}\nAbility.Sharpener = Sharpener;\n\n\nexport class Abilities {\n\n    public abilities: {[key: string]: AbilityBase};\n    public actor: SentientActor;\n\n    constructor(actor) {\n        this.actor = actor;\n        this.abilities = {};\n    }\n\n    public getMenu() {\n        const menuArgs = Object.values(this.abilities).map(abil => (\n            abil.getMenuItem()\n        ));\n        const menu = new Menu.MenuWithQuit(menuArgs);\n        menu.setName('MenuAbilities');\n        menu.addPre('Select an ability to use:');\n        return menu;\n    }\n\n    public addAbility(ability: AbilityBase) {\n        this.abilities[ability.getName()] = ability;\n        ability.actor = this.actor;\n    }\n\n    public toJSON() {\n        return Object.keys(this.abilities);\n    }\n\n}\nAbility.Abilities = Abilities;\n","\nimport RG from './rg';\nimport {MenuInfoOnly} from './menu';\nimport * as Component from './component';\nimport {Spell} from '../data/spells';\nimport {Random} from './random';\nimport {Ability} from './abilities';\nimport {EquipSlot} from './equipment';\nimport {SentientActor} from './actor';\nimport {ObjectShell} from './objectshellparser';\n\nconst {Abilities} = Ability;\n\nconst RNG = Random.getRNG();\n\nexport const ActorClass: any = {};\n\n/* Factory function for actor classes. */\nActorClass.create = function(name, entity) {\n    if (ActorClass.hasOwnProperty(name)) {\n        const actorClass = new ActorClass[name](entity);\n        return actorClass;\n    }\n    else {\n        RG.diag('Called with entity:');\n        RG.diag(entity);\n        RG.err('ActorClass', 'create',\n            `No class ${name} in ActorClass`);\n    }\n    return null;\n};\n\n/* Returns the object used to render level up menu. This shows messages related\n * to the level up such as stats increases. */\nActorClass.getLevelUpObject = function(level, actorClass): MenuInfoOnly {\n    const selObj = new MenuInfoOnly();\n    const actor = actorClass.getActor();\n    const className = actorClass.getClassName();\n    const levelMsg = actorClass.getLevelUpMsg(level);\n    const msg = `${actor.getName()} is now level ${level} ${className}`;\n    selObj.addPre([`Congratulations! ${msg}`]);\n    selObj.addPre(levelMsg);\n    return selObj;\n};\n\n/* Adds a given ability for the actor. Creates also the component to store all\n * the abilities if it's not found. */\nActorClass.addAbility = function(abilName, actor): void {\n    let abilities = null;\n    if (!actor.has('Abilities')) {\n        abilities = new Abilities();\n    }\n    else {\n        abilities = actor.get('Abilities').abilities;\n    }\n    if (Ability.hasOwnProperty(abilName)) {\n        const abil = new Ability[abilName]();\n        abilities.addAbility(abil);\n    }\n    else {\n        RG.err('ActorClass', 'addAbility',\n            `Cannot find Ability.${abilName} for new`);\n    }\n};\n\nexport interface ItemConstr {\n    name?: string;\n    count?: number;\n    func?: (item) => boolean;\n}\n\nexport interface ItemConstrMap {\n    [key: string]: ItemConstr[];\n}\n\nconst startingItems: ItemConstrMap = {\n    Alpinist: [\n        {name: 'Ration', count: 1},\n        {name: 'rope', count: 1},\n        {func: item => item.type === 'mineral', count: 2}\n    ],\n    Adventurer: [\n        {name: 'Ration', count: 2},\n        {name: 'firemaking kit', count: 1},\n        {func: item => item.type === 'potion', count: 1}\n    ],\n    Cryomancer: [\n        {name: 'Ration', count: 1},\n        {name: 'Potion of power', count: 1}\n    ],\n    Marksman: [\n        {name: 'Ration', count: 1}\n    ],\n    Blademaster: [\n        {name: 'Ration', count: 1}\n    ],\n    Spiritcrafter: [\n        {name: 'Ration', count: 1},\n        {name: 'Ordinary spirit gem'},\n        {name: 'Potion of spirit form'}\n    ],\n    Spellsinger: [\n        {name: 'Ration', count: 1},\n        {name: 'Potion of eagle', count: 1}\n    ]\n};\nActorClass.startingItems = startingItems;\n\nconst equipment: ItemConstrMap = {\n    Alpinist: [\n        {name: 'Piolet', count: 1},\n        {name: 'Spiked boots', count: 1}\n    ],\n    Adventurer: [\n        {name: 'Short sword', count: 1},\n        {name: 'Leather armour', count: 1}\n    ],\n    Cryomancer: [\n        {name: 'Robe', count: 1},\n        {name: 'Wooden staff', count: 1}\n    ],\n    Marksman: [\n        {name: 'Leather armour', count: 1},\n        {name: 'Wooden bow', count: 1},\n        {name: 'Wooden arrow', count: 15}\n    ],\n    Blademaster: [\n        {name: 'Longsword', count: 1},\n        {name: 'Chain helmet', count: 1},\n        {name: 'Chain armour', count: 1}\n    ],\n    Spiritcrafter: [\n        {name: 'Robe', count: 1},\n        {name: 'Mace', count: 1}\n    ],\n    Spellsinger: [\n        {name: 'Iron staff', count: 1},\n        {name: 'Leather armour', count: 1}\n    ]\n};\nActorClass.equipment = equipment;\n\nActorClass.getEquipment = function(name): ItemConstr[] {\n    const items = ActorClass.equipment[name];\n    const result = substituteConstraints(items);\n    return result;\n};\n\nActorClass.getStartingItems = function(name): ItemConstr[] {\n    const items = ActorClass.startingItems[name];\n    const result = substituteConstraints(items);\n    return result;\n};\n\n/* Used by different in-game classes for actors. Provides basic getters and\n * progress functions to increase stats etc on level up. */\nexport class ActorClassBase {\n\n    protected _actor: SentientActor;\n    protected _className: string;\n    protected _messages: {[key: string]: string};\n    protected _lastStateIncr: string;\n    protected _advances: {[key: string]: () => void};\n\n    constructor(actor, name) {\n        this._actor = actor;\n        actor.setActorClass(this);\n        this._className = name;\n    }\n\n    public getActor() {return this._actor;}\n\n    public getClassName() {\n        return this._className;\n    }\n\n    public getLevelUpMsg(level) {\n        let msg = '';\n        if (this._messages.hasOwnProperty(level)) {\n            msg += this._messages[level];\n        }\n        msg += `\\n${this._lastStateIncr}`;\n        return msg;\n    }\n\n    /* Called when a level is advanced by the actor. Checks for messages, and if\n     * the next ability is triggered. */\n    public advanceLevel() {\n        const newLevel = this._actor.get('Experience').getExpLevel();\n        if (this._messages.hasOwnProperty(newLevel)) {\n            const cell = this._actor.getCell();\n            if (cell) {\n                RG.gameMsg({cell, msg: this._messages[newLevel]});\n            }\n        }\n        if (this._advances.hasOwnProperty(newLevel)) {\n            this._advances[newLevel]();\n        }\n        this.incrStats(newLevel);\n    }\n\n    public incrStats(newLevel) {\n        const actor = this._actor;\n        this._lastStateIncr = '';\n\n        const hComp = actor.get('Health');\n        const incr = Math.ceil(actor.getStrength() / 2);\n        hComp.setMaxHP(hComp.getMaxHP() + incr);\n        hComp.setHP(hComp.getHP() + incr);\n\n        if (actor.has('SpellPower')) {\n            const ppIncr = Math.ceil(actor.getMagic() / 2);\n            const ppComp = actor.get('SpellPower');\n            ppComp.setMaxPP(ppComp.getMaxPP() + ppIncr);\n            ppComp.addPP(ppIncr);\n        }\n\n        // Random stat increase\n        const statName = RNG.arrayGetRand(RG.STATS);\n        this._lastStateIncr = `${statName} was increased`;\n        actor.get('Stats').incrStat(statName, 1);\n\n        RG.levelUpCombatStats(actor, newLevel);\n    }\n}\n\n\n//-------------------------------------------------------------------------\n/* Alpinist actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Alpinist extends ActorClassBase {\n    constructor(actor) {\n        super(actor, 'Alpinist');\n        const name = actor.getName();\n        this._messages = {\n            4: `${name} can climb on difficult terrain now`,\n            8: `${name} can jump over obstacles such as chasms now`,\n            12: `${name} can now hide from enemies using terrain`\n        };\n        this._advances = {\n            1: () => {\n            },\n            4: () => {\n                this._actor.add(new Component.Climber());\n            },\n            8: () => {\n                this._actor.add(new Component.Jumper());\n            },\n            12: () => {\n                ActorClass.addAbility('Camouflage', this._actor);\n            },\n            16: () => {\n            },\n            20: () => {\n            },\n            24: () => {\n            },\n            28: () => {\n            },\n            32: () => {\n            }\n        };\n\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('perception', 3);\n        stats.incrStat('agility', 3);\n        stats.incrStat('magic', -2);\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('perception', 1);\n            this._lastStateIncr += '\\nPerception was increased.';\n        }\n        if (newLevel % 3 !== 1) {\n            stats.incrStat('agility', 1);\n            this._lastStateIncr += '\\nAgility was increased.';\n        }\n    }\n\n\n}\nActorClass.Alpinist = Alpinist;\n\n//-------------------------------------------------------------------------\n/* Adventurer actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Adventurer extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Adventurer');\n        const name = actor.getName();\n        this._messages = {\n            4: `Food is now more nourishing for ${name}`\n        };\n        this._advances = {\n            1: () => {\n                const book = new Spell.SpellBook(this._actor);\n                this._actor.setBook(book);\n            },\n            4: () => {\n                this._actor.add(new Component.NourishedOne());\n            }\n        };\n    }\n\n    /* Called when a level is advanced by the actor. Checks for messages, and if\n     * the next ability is triggered. */\n    public advanceLevel() {\n        super.advanceLevel();\n        const newLevel = this._actor.get('Experience').getExpLevel();\n        if (newLevel % 4 === 0 && !this._advances.hasOwnProperty(newLevel)) {\n            const className = getRandExcludeAdventurer();\n            const actorClass = new ActorClass[className](this.getActor());\n            actorClass.advanceLevel();\n            // Copy also the level up message from other class\n            this._messages[newLevel] = actorClass._messages[newLevel];\n        }\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        for (let i = 0; i < 3; i++) {\n            let statName: string = RNG.arrayGetRand(RG.STATS);\n            statName = statName.toLowerCase();\n            stats.incrStat(statName, RNG.getUniformInt(1, 3));\n        }\n    }\n\n    public incrStats(newLevel) {\n        super.incrStats(newLevel);\n        const statName = RNG.arrayGetRand(RG.STATS);\n        this._lastStateIncr += `\\n${statName} was increased.`;\n        this._actor.get('Stats').incrStat(statName, 1);\n    }\n}\n\nActorClass.Adventurer = Adventurer;\n\n//-------------------------------------------------------------------------\n/* Blademaster actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Blademaster extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Blademaster');\n        const _name = actor.getName();\n\n        this._messages = {\n            4: `${_name} knows now how to defend more skillfully`,\n            8: `${_name} knows now how to hit enemies more accurately`,\n            12: `${_name} knows now how to handle equipment better`,\n            16: `${_name} can now strike in two directions`,\n            20: `${_name} can now keep the weapons sharp`,\n            24: `${_name} can now wield two blades at once`,\n            28: `${_name} can now strike back immediately when attacked`,\n            32: `${_name} has become a True Blademaster`\n        };\n\n        this._advances = {\n            1: () => {\n\n            },\n            4: () => {\n                this._actor.add(new Component.Defender());\n            },\n            8: () => {\n                this._actor.add(new Component.Attacker());\n            },\n            12: () => {\n                this._actor.add(new Component.MasterEquipper());\n            },\n            16: () => {\n                this._actor.add(new Component.BiDirStrike());\n            },\n            20: () => {\n                this._actor.add(new Component.Sharpener());\n                ActorClass.addAbility('Sharpener', this._actor);\n            },\n            24: () => {\n                this._actor.add(new Component.Ambidexterity());\n            },\n            28: () => {\n                this._actor.add(new Component.CounterAttack());\n            },\n            32: () => {\n                this._actor.get('Combat').setAttackRange(2);\n                this._actor.add(new Component.LongReach());\n            }\n        };\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('strength', 3);\n        stats.incrStat('magic', -3);\n    }\n\n    public getLevelUpMsg(level) {\n        const msg = super.getLevelUpMsg(level);\n        return msg;\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('strength', 1);\n            this._lastStateIncr += '\\nStrength was increased.';\n        }\n        if (newLevel % 3 === 0) {\n            stats.incrStat('accuracy', 1);\n            this._lastStateIncr += '\\nAccuracy was increased.';\n        }\n    }\n}\n\nActorClass.Blademaster = Blademaster;\n\n//-------------------------------------------------------------------------\n/* Cryomancer actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Cryomancer extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Cryomancer');\n        const _name = actor.getName();\n\n        this._messages = {\n            4: `${_name} learns a protection spell`,\n            8: `${_name} learns a spell to attack enemies from distance`,\n            12: `${_name} can freeze enemies on their tracks`,\n            16: `${_name} can summon an ice companion now`,\n            20: `${_name} can drain power from other spellcasters`,\n            24: `${_name} can fire ice arrows towards enemies`,\n            28: `${_name} can control their enemies now`,\n            32: `${_name} has become a True Cryomancer, Harbinger of Blizzard`\n        };\n\n        this._advances = {\n            1: () => {\n                // Create the spellbook\n                const book = new Spell.SpellBook(this._actor);\n                const grasp = new Spell.GraspOfWinter();\n                book.addSpell(grasp);\n                this._actor.setBook(book);\n            },\n            4: () => {\n                this._actor.getBook().addSpell(new Spell.IceShield());\n            },\n            8: () => {\n                this._actor.getBook().addSpell(new Spell.FrostBolt());\n            },\n            12: () => {\n                this._actor.getBook().addSpell(new Spell.IcyPrison());\n            },\n            16: () => {\n                this._actor.getBook().addSpell(new Spell.SummonIceMinion());\n            },\n            20: () => {\n                this._actor.getBook().addSpell(new Spell.PowerDrain());\n            },\n            24: () => {\n                this._actor.getBook().addSpell(new Spell.IceArrow());\n            },\n            28: () => {\n                this._actor.getBook().addSpell(new Spell.MindControl());\n            },\n            32: () => {\n                this._actor.getBook().addSpell(new Spell.Blizzard());\n            }\n        };\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('strength', -2);\n        stats.incrStat('magic', 3);\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('magic', 1);\n            this._lastStateIncr += '\\nMagic was increased.';\n        }\n        if (newLevel % 3 === 0) {\n            stats.incrStat('willpower', 1);\n            this._lastStateIncr += '\\nWillpower was increased.';\n        }\n    }\n\n}\n\nActorClass.Cryomancer = Cryomancer;\n\n//-------------------------------------------------------------------------\n/* Marksman actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Marksman extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Marksman');\n        const _name = actor.getName();\n\n        this._messages = {\n            4: `${_name} can now see and shoot further`,\n            8: `${_name} deals now more damage with each shot`,\n            12: `${_name} can bypass enemies with ranged attacks`,\n            16: `${_name} can use arrows/bolts interchangeably`,\n            20: `${_name} can shoot even further`,\n            24: `${_name} can evade ranged attacks`,\n            28: `${_name} can shoot enemies critically`,\n            32: `${_name} has become a True Marksman`\n        };\n\n        this._advances = {\n            1: () => {\n\n            },\n            4: () => {\n                this._actor.add(new Component.EagleEye());\n            },\n            8: () => {\n                this._actor.add(new Component.StrongShot());\n            },\n            12: () => {\n                this._actor.add(new Component.ThroughShot());\n            },\n            16: () => {\n                this._actor.add(new Component.MixedShot());\n            },\n            20: () => {\n                this._actor.add(new Component.LongRangeShot());\n            },\n            24: () => {\n                this._actor.add(new Component.RangedEvasion());\n            },\n            28: () => {\n                this._actor.add(new Component.CriticalShot());\n            },\n            32: () => {\n                this._actor.add(new Component.DoubleShot());\n            }\n        };\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('accuracy', 3);\n        stats.incrStat('perception', 2);\n        stats.incrStat('magic', -3);\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('accuracy', 1);\n            this._lastStateIncr += '\\nAccuracy was increased.';\n        }\n        if (newLevel % 3 === 0) {\n            stats.incrStat('perception', 1);\n            this._lastStateIncr += '\\nPerception was increased.';\n        }\n        if (newLevel % 3 === 1) {\n            stats.incrStat('agility', 1);\n            this._lastStateIncr += '\\nAgility was increased.';\n        }\n    }\n\n}\nActorClass.Marksman = Marksman;\n\n//-------------------------------------------------------------------------\n/* Spellsinger actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Spellsinger extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Spellsinger');\n        const _name = actor.getName();\n\n        this._messages = {\n            4: `${_name} can now summon animals`,\n            8: `${_name} can heal wounds`,\n            12: `${_name} can fly like an eagle`,\n            16: `${_name} can now paralyse enemies`,\n            20: `${_name} can summon lightning on enemies`,\n            24: `${_name} controls powers of the sky`,\n            28: `${_name} can attack enemies in multiple directions`,\n            32: `${_name} has become a Mighty Spellsinger`\n        };\n\n        this._advances = {\n            1: () => {\n                const book = new Spell.SpellBook(this._actor);\n                this._actor.setBook(book);\n                this._actor.getBook().addSpell(new Spell.MagicArmor());\n            },\n            4: () => {\n                this._actor.getBook().addSpell(new Spell.SummonAnimal());\n            },\n            8: () => {\n                this._actor.getBook().addSpell(new Spell.Heal());\n            },\n            12: () => {\n                this._actor.getBook().addSpell(new Spell.Flying());\n            },\n            16: () => {\n                this._actor.getBook().addSpell(new Spell.Paralysis());\n            },\n            20: () => {\n                this._actor.getBook().addSpell(new Spell.LightningArrow());\n            },\n            24: () => {\n                const airSpell = new Spell.SummonAirElemental();\n                this._actor.getBook().addSpell(airSpell);\n            },\n            28: () => {\n                this._actor.getBook().addSpell(new Spell.CrossBolt());\n            },\n            32: () => {\n                this._actor.getBook().addSpell(new Spell.RockStorm());\n            }\n        };\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('perception', 2);\n        stats.incrStat('magic', 2);\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('magic', 1);\n            this._lastStateIncr += '\\nMagic was increased.';\n        }\n        if (newLevel % 3 === 0) {\n            stats.incrStat('perception', 1);\n            this._lastStateIncr += '\\nPerception was increased.';\n        }\n    }\n\n}\nActorClass.Spellsinger = Spellsinger;\n\n//-------------------------------------------------------------------------\n/* Spiritcrafter actor class and its experience level-specific features. */\n//-------------------------------------------------------------------------\nexport class Spiritcrafter extends ActorClassBase {\n\n    constructor(actor) {\n        super(actor, 'Spiritcrafter');\n        const _name = actor.getName();\n\n        this._messages = {\n            4: `${_name} can now equip 2 spirit gems`,\n            8: `${_name} learns to project small amounts of energy`,\n            12: `${_name} learns to create protective forcefields`,\n            16: `${_name} can now equip 3 spirit gems`,\n            20: `${_name} can now bind spirit gems to items`,\n            24: `${_name} can take a spirit form now`,\n            28: `${_name} gains new skill`,\n            32: `${_name} has become a Mighty Spiritcrafter`\n        };\n\n        this._advances = {\n            1: () => {\n                const book = new Spell.SpellBook(this._actor);\n                this._actor.setBook(book);\n            },\n            4: () => {\n                const eq = this.getActor().getInvEq().getEquipment();\n                eq.addSlot('spiritgem', new EquipSlot('spiritgem'));\n            },\n            8: () => {\n                this._actor.getBook().addSpell(new Spell.EnergyArrow());\n            },\n            12: () => {\n                this._actor.getBook().addSpell(new Spell.ForceField());\n            },\n            16: () => {\n                const eq = this.getActor().getInvEq().getEquipment();\n                eq.addSlot('spiritgem', new EquipSlot('spiritgem'));\n                // Gems weight only 50% of their weight\n            },\n            20: () => {\n                this._actor.add(new Component.SpiritItemCrafter());\n            },\n            24: () => {\n                this._actor.getBook().addSpell(new Spell.SpiritForm());\n            },\n            28: () => {\n                this._actor.getBook().addSpell(new Spell.EnergyStorm());\n            },\n            32: () => {\n                const eq = this.getActor().getInvEq().getEquipment();\n                eq.addSlot('spiritgem', new EquipSlot('spiritgem'));\n                this._actor.getBook().addSpell(new Spell.RingOfEnergy());\n                // TODO turn gems into power/health\n                // Gems weight only 10% of their weight\n            }\n        };\n    }\n\n    public setStartingStats() {\n        const stats = this._actor.get('Stats');\n        stats.incrStat('willpower', 4);\n        stats.incrStat('magic', 2);\n    }\n\n    public incrStats(newLevel) {\n        const stats = this._actor.get('Stats');\n        super.incrStats(newLevel);\n        if (newLevel % 3 !== 0) {\n            stats.incrStat('willpower', 1);\n            this._lastStateIncr += '\\nWillpower was increased.';\n        }\n        if (newLevel % 3 === 0) {\n            stats.incrStat('magic', 1);\n            this._lastStateIncr += '\\nMagic was increased.';\n        }\n    }\n\n}\nActorClass.Spiritcrafter = Spiritcrafter;\n\nexport const ACTOR_CLASSES = [\n    'Cryomancer', 'Blademaster', 'Marksman', 'Spiritcrafter',\n    'Adventurer', 'Alpinist', 'Spellsinger'\n];\n\nexport const ACTOR_CLASSES_NO_ADV = ACTOR_CLASSES.filter(ac => (\n    ac !== 'Adventurer'));\n\nfunction getRandExcludeAdventurer() {\n    return RNG.arrayGetRand(ACTOR_CLASSES_NO_ADV);\n}\n\nfunction substituteConstraints(items): ItemConstr[] {\n    const parser = ObjectShell.getParser();\n    const result = [];\n    items.forEach(item => {\n        if (typeof item === 'function') {\n            const createdItem = parser.createRandomItem(item);\n            result.push({name: createdItem.getName(), count: 1});\n        }\n        else if (item.func) {\n            const createdItem = parser.createRandomItem(item.func);\n            if (item.count) {\n                result.push({name: createdItem.getName(), count: item.count});\n            }\n            else {\n                result.push({name: createdItem.getName(), count: 1});\n            }\n        }\n        else {\n            result.push(item);\n        }\n    });\n    return result;\n}\n","/* Contains code related to in-game battles. */\n\nimport RG from './rg';\nimport {EventPool} from './eventpool';\nimport {SentientActor} from './actor';\nimport {Level} from './level';\nimport {ELEM} from '../data/elem-constants';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:game.battle');\n\nconst POOL = EventPool.getPool();\n\nexport interface ArmyJSON {\n    name: string;\n    actors: number[];\n    defeatThreshold: number;\n}\n\nexport interface BattleJSON {\n    isJSON: boolean;\n    name: string;\n    level: number;\n    armies: ArmyJSON[];\n    stats: {[key: string]: number};\n    finished: boolean;\n}\n\n/* Army is a collection of actors associated with a battle. This is useful for\n *  battle commanders to have access to their full army. */\nexport class Army {\n\n    public hasNotify: boolean;\n    private _name: string;\n    private _actors: SentientActor[]; // All actors inside this army\n    private _battle: Battle;\n    private _casualties: number;\n    private _defeatThreshold: number;\n\n    constructor(name) {\n        this._name = name;\n        this._actors = []; // All actors inside this army\n\n        this._battle = null;\n        this._casualties = 0;\n        this._defeatThreshold = 0;\n        this.hasNotify = true;\n        POOL.listenEvent(RG.EVT_ACTOR_KILLED, this);\n    }\n\n    public getName(): string {\n        return this._name;\n    }\n\n    public setDefeatThreshold(numActors) {\n        this._defeatThreshold = numActors;\n    }\n\n        /* Default defeat is when all actors have been eliminated.*/\n    public isDefeated() {\n        if (this._actors.length <= this._defeatThreshold) {\n            return true;\n        }\n        return false;\n    }\n\n    public setBattle(battle) {this._battle = battle;}\n\n    public getBattle() {\n        return this._battle;\n    }\n\n    public getCasualties() {\n        return this._casualties;\n    }\n\n    public getActors() {\n        return this._actors.slice();\n    }\n\n    public hasActor(sought) {\n        const id = sought.getID();\n        const index = this._actors.findIndex(actor => actor.getID() === id);\n        return index >= 0;\n    }\n\n        /* Tries to add an actor and returns true if success.*/\n    public addActor(actor) {\n        if (!this.hasActor(actor)) {\n            this._actors.push(actor);\n            return true;\n        }\n        else {\n            RG.err('Game.Army', 'addActor',\n                'Actor already in army ' + this.getName());\n        }\n        return false;\n    }\n\n        /* Removes an actor from the army.*/\n    public removeActor(actor) {\n        const index = this._actors.findIndex(\n            a => a.getID() === actor.getID()\n        );\n        if (index >= 0) {\n            this._actors.splice(index, 1);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    public removeAllActors() {this._actors = [];}\n\n        /* Monitor killed actors and remove them from the army.*/\n    public notify(evtName, msg) {\n        if (evtName === RG.EVT_ACTOR_KILLED) {\n            debug(`${this._name} got EVT_ACTOR_KILLED`);\n            const actor = msg.actor;\n            if (this.hasActor(actor)) {\n                if (!this.removeActor(actor)) {\n                    const bName = this.getBattle().getName();\n                    let newMsg = 'Battle: ' + bName;\n                    newMsg += 'Couldn\\'t remove the actor ' + actor.getName();\n                    RG.err('Game.Army', 'notify', newMsg);\n                }\n                else {\n                    ++this._casualties;\n                    const bName = this.getBattle().getName();\n                    let newMsg = `Battle: ${bName}, Army ${this._name}`;\n                    newMsg += ` Actor: ${actor.getID()}`;\n\n                    debug(`\\tCasualties: ${this._casualties} ${newMsg}`);\n                    const armyObj = {\n                        type: 'Actor killed', army: this\n                    };\n\n                    debug(`${this._name} emit EVT_ARMY_EVENT`);\n                    POOL.emitEvent(RG.EVT_ARMY_EVENT, armyObj);\n                    if (this._actors.length === 0) {\n                        debug('<>Army<> ' + this._name + ' decimated');\n                        debug(`\\tCasualties: ${this._casualties}`);\n                        POOL.removeListener(this);\n                    }\n                }\n            }\n        }\n    }\n\n\n    public toJSON(): ArmyJSON {\n        return {\n            name: this._name,\n            actors: this._actors.map(actor => actor.getID()),\n            defeatThreshold: this._defeatThreshold\n        };\n    }\n}\n\n/* Battle is contains all information in one battle between two or more armies.\n */\nexport class Battle {\n\n\n    public hasNotify: boolean;\n    public finished: boolean;\n\n    private _name: string;\n    private _armies: Army[]; // All actors inside this army\n    private _level: Level;\n    private _stats: {[key: string]: number};\n\n    constructor(name) {\n        this._name = name;\n        this._armies = [];\n        this._level = null;\n        this.finished = false;\n\n\n        // Keeps track of battles statistics\n        this._stats = {\n            duration: 0,\n            casualties: 0,\n            survivors: 0\n        };\n        this.hasNotify = true;\n        POOL.listenEvent(RG.EVT_ARMY_EVENT, this);\n    }\n\n    public getType() {\n        return 'battle';\n    }\n\n    public getArmies() {\n        return this._armies.slice();\n    }\n\n    public setArmies(armies) {\n        this._armies = armies;\n        this._armies.forEach(army => {\n            army.setBattle(this);\n        });\n    }\n\n    public getName() {\n        return this._name;\n    }\n\n    public setLevel(level) {\n        this._level = level;\n        this._level.setParent(this);\n    }\n    public getLevel() {\n        return this._level;\n    }\n\n    public getStats() {\n        return this._stats;\n    }\n\n    public setStats(stats) {this._stats = stats;}\n    /* Adds an army to given x,y location.*/\n    public addArmy(army, x, y, conf) {\n        const horizontal = conf.horizontal ? true : false;\n        const numRows = conf.numRows > 0 ? conf.numRows : 1;\n\n        if (!RG.isNullOrUndef([this._level])) {\n            this._armies.push(army);\n            const actors = army.getActors();\n            const actorsPerRow = Math.ceil(actors.length / numRows);\n\n            if (horizontal) {\n                let i = 0;\n                for (let row = 0; row < numRows; row++) {\n                    for (let xPos = 0; xPos < actorsPerRow; xPos++) {\n                        if (i < actors.length) {\n                            this.addActor(actors[i++], x + xPos, y + row);\n                        }\n                    }\n                }\n            }\n            else {\n                let i = 0;\n                for (let row = 0; row < numRows; row++) {\n                    for (let yPos = 0; yPos < actorsPerRow; yPos++) {\n                        if (i < actors.length) {\n                            this.addActor(actors[i++], x + row, y + yPos);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            RG.err('Game.Battle', 'addArmy',\n                'Level must exist before adding army.');\n        }\n        army.setBattle(this);\n    }\n\n    /* Adds actor to the battle level. Changes underlying base element if actor\n     * would get stuck otherwise. */\n    public addActor(actor, x, y) {\n        const cell = this._level.getMap().getCell(x, y);\n        // TODO workaround for mountain level\n        if (!cell.isPassable()) {\n            cell.setBaseElem(ELEM.FLOOR);\n        }\n        if (!this._level.addActor(actor, x, y)) {\n            RG.err('Game.Battle', 'addActor',\n                `Cannot add ${actor} to ${x},${y}`);\n        }\n    }\n\n    public armyInThisBattle(army) {\n        const index = this._armies.indexOf(army);\n        return index >= 0;\n    }\n\n    /* Returns true if the battle is over.*/\n    public isOver() {\n        if (this._armies.length > 1) {\n            let numArmies = 0;\n            this._armies.forEach(army => {\n                if (!army.isDefeated()) {\n                    ++numArmies;\n                }\n            });\n            if (numArmies <= 1) {\n                return true;\n            }\n        }\n        else {\n            RG.err('Game.Battle', 'isOver', 'Battle should have >= 2 armies.');\n        }\n        return false;\n    }\n\n    public notify(evtName, msg) {\n        if (evtName === RG.EVT_ARMY_EVENT) {\n            const bName = this.getName();\n            debug(`${bName} got EVT_ARMY_EVENT`);\n            const {type, army} = msg;\n            if (this.armyInThisBattle(army) && type === 'Actor killed') {\n                if (!this.finished && this.isOver()) {\n                    debug(`Battle |${bName}| is over!`);\n                    debug('\\tRemoving all event listeners');\n                    POOL.removeListener(this);\n                    const obj = {battle: this};\n                    debug(`${bName} emit EVT_BATTLE_OVER`);\n                    POOL.emitEvent(RG.EVT_BATTLE_OVER, obj);\n                    this.finished = true;\n                }\n            }\n        }\n    }\n\n    /* Serialies the object into JSON. */\n    public toJSON(): BattleJSON {\n        return {\n            isJSON: true,\n            name: this._name,\n            level: this._level.getID(),\n            armies: this._armies.map(army => army.toJSON()),\n            stats: this._stats,\n            finished: this.finished\n        };\n    }\n\n    public removeListeners() {\n        this._armies.forEach(army => {\n            POOL.removeListener(army);\n        });\n        POOL.removeListener(this);\n    }\n}\n","/* Contains code for better city level generation. */\n\nimport RG from './rg';\nimport {LevelGenerator} from './level-generator';\nimport {MapGenerator} from './map.generator';\nimport {DungeonPopulate} from './dungeon-populate';\nimport {Random} from './random';\nimport {Level} from './level';\nimport {ELEM} from '../data/elem-constants';\nimport {ElementDoor} from './element';\n\nconst RNG = Random.getRNG();\n\n/* Object for the city generator. */\nexport class CityGenerator extends LevelGenerator {\n\n    public static options: {[key: string]: any};\n    public addDoors: boolean;\n\n    constructor() {\n        super();\n        this.addDoors = true;\n        this.shouldRemoveMarkers = true;\n    }\n\n    public create(cols, rows, conf): Level {\n        const level = this.createLevel(cols, rows, conf);\n\n        this.populateCityLevel(level, conf);\n        // TODO populate level with actors based on conf\n        return level;\n    }\n\n    /* Returns a castle level without populating it. */\n    public createLevel(cols, rows, conf): Level {\n        const mapGen = new MapGenerator();\n        let mapObj = null;\n\n        if (conf.hasWall) {\n            mapObj = mapGen.createTownWithWall(cols, rows, conf);\n        }\n        else {\n            mapObj = mapGen.createTownBSP(cols, rows, conf);\n        }\n\n        const level = new Level();\n        level.setMap(mapObj.map);\n\n        level.addExtras('houses', mapObj.houses);\n        this.createHouseElements(level);\n        this.fillUnusedAreas(level, mapObj.unused);\n        return level;\n    }\n\n    public createHouseElements(level: Level): void {\n        const houses = level.getExtras().houses;\n        for (let i = 0; i < houses.length; i++) {\n            const doorXY = houses[i].door;\n            const door = new ElementDoor(true);\n            level.addElement(door, doorXY[0], doorXY[1]);\n        }\n    }\n\n    public fillUnusedAreas(level: Level, areas): void {\n        const map = level.getMap();\n        const elems = [ELEM.GRASS, ELEM.TREE, ELEM.WATER];\n        areas.forEach(area => {\n            const baseElem = RNG.arrayGetRand(elems);\n            let {w, h} = area;\n            const {x, y} = area;\n            w -= 2; // Without this, areas overlap with houses\n            h -= 2;\n            for (let i = x; i <= x + w; i++) {\n                for (let j = y; j <= y + h; j++) {\n                    map.setBaseElemXY(i, j, baseElem);\n                }\n            }\n        });\n    }\n\n    public populateCityLevel(level: Level, conf): void {\n        let houses = level.getExtras().houses;\n        const dungPopul = new DungeonPopulate(conf);\n\n        const shopHouses = dungPopul.createShops(level, conf);\n        houses = houses.filter(house => shopHouses.indexOf(house) < 0);\n\n        const trainerHouses = dungPopul.createTrainers(level, conf);\n        houses = houses.filter(house => trainerHouses.indexOf(house) < 0);\n\n        level.addExtras('houses', houses);\n        this.createTownsfolk(level, conf);\n    }\n\n    public createTownsfolk(level: Level, conf): void {\n        const dungPopul = new DungeonPopulate(conf);\n        const houses = level.getExtras().houses;\n        houses.forEach(house => {\n            dungPopul.populateHouse(level, house, conf);\n        });\n    }\n}\n\nCityGenerator.options = {\n    village: {\n        actorsPerLevel: 30,\n        maxDanger: 3,\n        itemsPerLevels: 6\n    },\n    capital: {\n\n    },\n    stronghold: {\n\n    },\n    fort: {\n\n    }\n};\n","\nexport * from './quest-task';\nexport * from './quest-data';\nexport * from './quest-gen';\nexport * from './quest-populate';\n","\n/* THis file contains code to generate castles of different types\n * and contents.\n */\n\nimport RG from './rg';\nimport ROT from '../../lib/rot';\n\nimport * as Element from './element';\nimport {LevelGenerator} from './level-generator';\nimport {MapGenerator} from './map.generator';\nimport {Level, LevelExtraType} from './level';\nimport {DungeonPopulate} from './dungeon-populate';\nimport {Castle} from '../data/tiles.castle';\nimport {LevelSurroundings} from './level-surroundings';\nimport {FactoryItem} from './factory.items';\nimport {Placer} from './placer';\nimport {Random} from './random';\nimport { Geometry } from './geometry';\n\nconst RNG = Random.getRNG();\nconst Room = ROT.Map.Feature.Room;\n\nimport {TCoord} from './interfaces';\ntype CellList = import('./map').CellMap;\ntype Cell = import('./map.cell').Cell;\n\ninterface CastleOpts {\n    addItems: boolean;\n    roomCount: number;\n    cellsAround: {[key: string]: string};\n    surroundX: number;\n    surroundY: number;\n    maxValue: number;\n    preserveMarkers: boolean;\n}\n\ntype PartialCastleOpts = Partial<CastleOpts>;\n\n/* This class is used to generate different dungeon levels. */\nexport class CastleGenerator extends LevelGenerator {\n\n    public static getOptions(): CastleOpts {\n        return {\n            addItems: true,\n            roomCount: -1,\n            cellsAround: {\n                N: 'wallmount',\n                S: 'tree',\n                E: 'grass',\n                W: 'snow',\n                NW: 'water',\n                SE: 'water'\n            },\n            surroundX: 10,\n            surroundY: 10,\n            maxValue: 100,\n            preserveMarkers: false\n        };\n    }\n\n    public addDoors: boolean;\n    public shouldRemoveMarkers: boolean;\n    public nItemsAdded: number;\n\n    constructor() {\n        super();\n        this.addDoors = true;\n        this.shouldRemoveMarkers = true;\n        this.nItemsAdded = 0;\n    }\n\n    /* Returns a fully populated castle-level. */\n    public create(cols, rows, conf: PartialCastleOpts): Level {\n        let castleLevel = this.createLevel(cols, rows, conf);\n        conf.preserveMarkers = false;\n        this.removeMarkers(castleLevel, conf);\n\n        if (conf.addItems) {\n            this.nItemsAdded = this.addItemsToCastle(castleLevel, conf);\n        }\n\n        if (conf.cellsAround) {\n            castleLevel = this.createCastleSurroundings(castleLevel, conf);\n        }\n\n        // TODO populate level with actors based on conf\n        return castleLevel;\n    }\n\n    /* Returns a castle level without populating it. */\n    public createLevel(\n        cols: number, rows: number, conf: PartialCastleOpts\n    ): Level {\n        const levelConf: any = Object.assign({\n            dungeonType: 'castle',\n            preserveMarkers: true,\n            wallType: 'wallcastle'\n            }, conf\n        );\n        const mapgen = new MapGenerator();\n\n        // Determine direction of castle exit\n        const gateFunc = getGateDirFunction(conf);\n        if (gateFunc) {\n            levelConf.startRoomFunc = gateFunc;\n        }\n\n        const mapObj = mapgen.createCastle(cols, rows, levelConf);\n\n        const level = new Level();\n        level.setMap(mapObj.map);\n        this.addMarkersFromTiles(level, mapObj.tiles);\n\n        this.createDoorsAndLevers(level);\n        return level;\n    }\n\n    public addItemsToCastle(level: Level, conf: PartialCastleOpts): number {\n        // Storerooms contain better loot\n        let nAdded = 0;\n        const extras = level.getExtras();\n        const storerooms = extras.storeroom as LevelExtraType[];\n        const {maxValue} = conf;\n        const itemFunc = item => ((\n            (item.value <= (2 * maxValue)) && (item.value >= maxValue)\n        ));\n        const itemConf = {\n            func: itemFunc, maxValue, nItems: 1\n        };\n        const factItem = new FactoryItem();\n        storerooms.forEach(room => {\n            const itemsPlaced = factItem.generateItems(itemConf);\n            Placer.addPropsToRoom(level, room, itemsPlaced);\n            nAdded += itemsPlaced.length;\n        });\n\n        // One of the storerooms can contain gold as well\n        if (RG.isSuccess(GOLD_VAULT_CHANCE)) {\n            const goldRoom = RNG.arrayGetRand(storerooms);\n            const wealth = RNG.getUniformInt(1, 6);\n            const goldItems = factItem.generateGold({nGold: 5, nLevel: wealth});\n            Placer.addPropsToRoom(level, goldRoom, goldItems);\n            nAdded += goldItems.length;\n        }\n\n        const normalRooms = extras.room as LevelExtraType[];\n        itemConf.nItems = normalRooms.length;\n        const items = factItem.generateItems(itemConf);\n        items.forEach(item => {\n            const room = RNG.arrayGetRand(normalRooms);\n            Placer.addPropsToRoom(level, room, [item]);\n            nAdded += 1;\n        });\n        return nAdded;\n    }\n\n    public addMarkersFromTiles(level: Level, tiles): void {\n        const extras = {\n            corridor: [],\n            entrance: [],\n            room: [],\n            storeroom: [],\n            vault: []\n        };\n        level.setExtras(extras);\n\n        Object.values(tiles).forEach((tile: any) => {\n            if (re.storeroom.test(tile.name)) {\n                this.addToExtras(level, tile, 'storeroom');\n            }\n            else if (re.vault.test(tile.name)) {\n                this.addToExtras(level, tile, 'vault');\n            }\n            else if (re.entrance.test(tile.name)) {\n                this.addToExtras(level, tile, 'entrance');\n            }\n            else if (re.corridor.test(tile.name)) {\n                this.addToExtras(level, tile, 'corridor');\n            }\n            else {\n                this.addToExtras(level, tile, 'room');\n            }\n        });\n    }\n\n    public addToExtras(level: Level, tile, name): void {\n        const bbox = Geometry.convertBbox(tile);\n        const cells = level.getMap().getFreeInBbox(bbox);\n        cells.forEach(cell => {\n            const [x, y] = cell.getXY();\n            const marker = new Element.ElementMarker(markers[name]);\n            marker.setTag(name);\n            level.addElement(marker, x, y);\n        });\n        const room = new Room(bbox.ulx, bbox.uly, bbox.lrx, bbox.lry);\n        const extras = level.getExtras();\n        (extras[name] as LevelExtraType[]).push(room);\n    }\n\n    /* Links (and first creates) levers and lever doors based on markers. */\n    public createDoorsAndLevers(level: Level): void {\n        const map: CellList = level.getMap();\n        const cells: Cell[] = map.getCells();\n        const doorPos = {};\n        const levers = [];\n\n        cells.forEach(cell => {\n            if (cell.hasElements()) {\n\n                const [x, y] = cell.getXY();\n                if (cell.hasMarker('leverdoor')) {\n                    const door = new Element.ElementLeverDoor();\n                    map.getCell(x, y).removeProps(RG.TYPE_ELEM);\n                    level.addElement(door, x, y);\n                    doorPos[cell.getKeyXY()] = door;\n                }\n                else if (cell.hasMarker('lever')) {\n                    const lever = new Element.ElementLever();\n                    map.getCell(x, y).removeProps(RG.TYPE_ELEM);\n                    level.addElement(lever, x, y);\n                    levers.push(lever);\n                }\n                else if (cell.hasMarker('door')) {\n                    const door = new Element.ElementDoor(true);\n                    map.getCell(x, y).removeProps(RG.TYPE_ELEM);\n                    level.addElement(door, x, y);\n                }\n            }\n        });\n\n        // Finally connect lever to its door\n        levers.forEach(lever => {\n            const [x, y] = lever.getXY();\n            const xyAround = Geometry.getBoxAround(x, y, 1);\n            xyAround.forEach(xy => {\n                const keyXY = xy[0] + ',' + xy[1];\n                if (doorPos[keyXY]) {\n                    let door: any = map.getCell(xy[0], xy[1]).getPropType('leverdoor');\n                    if (door) {door = door[0];}\n                    else {\n                        RG.err('CastleGenerator', 'createDoorsAndLevers',\n                        `No door found for lever@${x},${y}`);\n                    }\n                    lever.addTarget(door);\n                }\n            });\n\n        });\n\n    }\n\n    public populateStoreRooms(level: Level, conf): void {\n        const dungPopul = new DungeonPopulate();\n        if (conf.actorFunc) {\n            dungPopul.setActorFunc(conf.actorFunc);\n        }\n        const maxDanger = conf.maxDanger;\n        const extras = level.getExtras();\n        if (extras.storeroom) {\n            const storerooms = extras.storeroom as LevelExtraType[];\n            storerooms.forEach((room: any) => {\n                const cPoint: TCoord = room.getCenter();\n                dungPopul.addPointGuardian(level, cPoint, maxDanger);\n            });\n        }\n    }\n\n    public createCastleSurroundings(level, conf) {\n        const levelSurround = new LevelSurroundings();\n        return levelSurround.surround(level, conf);\n    }\n}\n\nRG.extend2(CastleGenerator, LevelGenerator);\n\nconst GOLD_VAULT_CHANCE = 0.10;\n\nconst re = {\n    corridor: /(corridor|corner)/,\n    entrance: /entrance/,\n    storeroom: /storeroom/,\n    vault: /vault/\n};\n\nconst markers = {\n    corridor: 'C',\n    room: 'R',\n    entrance: 'E',\n    storeroom: 'S',\n    vault: 'V'\n};\n\n/* Returns the function to generate castle cased based on surrounding\n * cells. */\nfunction getGateDirFunction(conf) {\n    if (conf.cellsAround) {\n        const {cellsAround} = conf;\n        if (!cellBlocked(cellsAround.N)) {\n            return Castle.startRoomFuncNorth;\n        }\n        else if (!cellBlocked(cellsAround.S)) {\n            return Castle.startRoomFuncSouth;\n        }\n        else if (!cellBlocked(cellsAround.E)) {\n            return Castle.startRoomFuncEast;\n        }\n        else if (!cellBlocked(cellsAround.W)) {\n            return Castle.startRoomFuncWest;\n        }\n    }\n    return null;\n}\n\nfunction cellBlocked(type) {\n    switch (type) {\n        case 'wallmount': return true;\n        case 'water': return true;\n        default: return false;\n    }\n}\n","\n/* NOTE: This file is unused at the moment. It has been replaced by overworld\n*  generation, which is less random. */\n\nimport RG from './rg';\nimport {Random} from './random';\nimport {Names} from '../data/name-gen';\nimport * as IF from './interfaces';\n\nconst RNG = Random.getRNG();\n\n\n// Default configuration for creation\nconst defaultConf = {\n    seed: 0,\n    // Direct impact on low-level stuff\n    difficulty: 'Medium',\n    items: 'Medium',\n    monsters: 'Medium',\n\n    worldSize: 'Medium',\n    areaSize: 'Medium',\n\n    // World generation params\n    climate: 'Medium',\n    elevation: 'Medium',\n    mountainSize: 'Medium',\n    excavation: 'Medium',\n    dungeonSize: 'Medium',\n    forestation: 'Medium',\n    population: 'Medium',\n    citySize: 'Medium',\n    size: 'Medium',\n    water: 'Sparse'\n};\n\n// Maps sizes such as Small or Medium to numbers\nconst worldSizeToNum = {\n    Small: 1,\n    Medium: 2,\n    Large: 4,\n    Huge: 8\n};\n\nconst featureScaleCoeff = {\n    Small: 0.7,\n    Medium: 1.0,\n    High: 1.3,\n    Huge: 1.7\n};\n\n// Maps sizes such as Small or Medium to numbers\nconst areaSizeToXY = {\n    Small: {x: 3, y: 3},\n    Medium: {x: 5, y: 5},\n    Large: {x: 5, y: 7},\n    Huge: {x: 7, y: 9}\n};\n\n// Elevation created using noise, map to thresholds. We need\n/* const elevToThr = {\n\n}; */\n\n// Climate created using linear gradient, right now simply from south (high Y)\n// to north (low Y, down to 0).\n// 0 = zero degrees C, warm > 0, cold < 0. Determines amount of snow.\n// At low-level, this can be achieved with snow ratio from 0 -> 1.\n/* const climateToGradient = {\n    Warm: 0.5,\n    Medium: 0.3,\n    Cold: 0.1,\n    Freezing: -0.2\n};*/\n\nexport const WorldConf: any = {};\n\nWorldConf.featCoeff = 0.3;\n\nconst getUniformInt = (min, max) => RNG.getUniformInt(min, max);\n\nWorldConf.getBaseConf = type => {\n    let feat = null;\n    switch (type) {\n        case 'branch': feat = WorldConf.createSingleBranchConf(); break;\n        case 'city': {\n            feat = {\n                name: 'city', nQuarters: 1,\n                quarter: [WorldConf.createSingleQuarterConf()]\n            };\n            break;\n        }\n        case 'dungeon': {\n            feat = {\n                name: 'dungeon', nBranches: 1,\n                branch: [WorldConf.createSingleBranchConf()]\n            };\n            break;\n        }\n        case 'face': feat = WorldConf.createSingleFaceConf(); break;\n        case 'mountain': {\n            feat = {\n                name: 'mountain', nFaces: 1,\n                face: [WorldConf.createSingleFaceConf()]\n            };\n            break;\n        }\n        case 'quarter': feat = WorldConf.createSingleQuarterConf(); break;\n        default: console.log('No legal featureType given');\n    }\n    return feat;\n};\n\n/* Connects all city quarters together. */\nWorldConf.createQuarterConnections = feats => {\n    if (feats.length === 1) {return null;}\n    const connections = [];\n    for (let i = 1; i < feats.length; i++) {\n        const q0 = feats[i - 1];\n        const q1 = feats[i];\n\n        let l0 = RNG.getWeightedLinear(q0.nLevels - 1);\n        const l1 = 0; // TODO add some randomization\n\n        if (RG.isNullOrUndef([l0])) {\n            l0 = q0.nLevels - 1;\n        }\n        const connect = [q0.name, q1.name, l0, l1];\n        connections.push(connect);\n    }\n    return connections;\n};\n\n/* Creates mountain face connections. */\nWorldConf.createFaceConnections = (type, feats) => {\n    if (feats.length === 1) {return null;}\n    const connections = [];\n    for (let i = 1; i < feats.length; i++) {\n        const f0 = feats[i - 1];\n        const f1 = feats[i];\n\n        let l0 = RNG.getWeightedLinear(f0.nLevels - 1);\n        const l1 = 0; // TODO add some randomization\n\n        if (RG.isNullOrUndef([l0])) {\n            l0 = f0.nLevels - 1;\n        }\n\n        const connect = [f0.name, f1.name, l0, l1];\n        connections.push(connect);\n    }\n    return connections;\n};\n\n/* Loops through feature list and connects them together. The connections\n * depend on the type parameter. */\nWorldConf.createBranchConnections = (type, feats) => {\n    if (feats.length === 1) {return null;}\n    const connections = [];\n    for (let i = 1; i < feats.length; i++) {\n        const br0 = feats[i - 1];\n        const br1 = feats[i];\n\n        let l0 = RNG.getWeightedLinear(br0.nLevels - 1);\n        const l1 = 0; // TODO add some randomization\n\n        if (RG.isNullOrUndef([l0])) {\n            l0 = br0.nLevels - 1;\n        }\n\n        const connect = [br0.name, br1.name, l0, l1];\n        connections.push(connect);\n    }\n    return connections;\n};\n\n/* Sets x,y distance for given feature from the starting tile. */\nWorldConf.setDistFromStart = (featConf, areaConf) => {\n    const startX = Math.floor(areaConf.maxX / 2);\n    const startY = areaConf.maxY;\n    featConf.distX = Math.abs(featConf.x - startX);\n    featConf.distY = Math.abs(featConf.y - startY);\n    featConf.distSqr = Math.sqrt(\n        Math.pow(featConf.distX, 2) + Math.pow(featConf.distY, 2)\n    );\n};\n\n/* Create object for player position. */\nWorldConf.getPlayerStart = (firstArea: IF.AreaConf, conf): IF.PlayerStart => {\n    const maxY = firstArea.maxY - 1;\n    const midX = Math.floor(firstArea.maxX / 2);\n    return {\n        place: conf.name, // rename to area.name\n        x: midX, y: maxY\n    };\n};\n\n/* Given areaConf, return x,y position where the feature can be added. */\nWorldConf.getXYInArea = (areaConf: IF.AreaConf): IF.ICoordXY => ({\n    x: getUniformInt(0, areaConf.maxX - 1),\n    y: getUniformInt(0, areaConf.maxY - 1)\n});\n\n/* Returns more branches for dungeons further\n * from starting position. */\nWorldConf.getNumBranches = (dungeonConf, conf) => {\n    switch (conf.dungeonSize) {\n        case 'Small': return 1;\n        case 'Medium': return getUniformInt(1, 2);\n        case 'Large': return getUniformInt(1, 3);\n        case 'Huge': return getUniformInt(1, 4);\n        default: return 1;\n    }\n};\n\nWorldConf.getNumQuarters = (cityConf, conf) => {\n    switch (conf.citySize) {\n        case 'Small': return 1;\n        case 'Medium': return getUniformInt(1, 2);\n        case 'Large': return getUniformInt(1, 3);\n        case 'Huge': return getUniformInt(1, 4);\n        default: return 1;\n    }\n};\n\nWorldConf.getNumFaces = (mountConf, conf) => {\n    switch (conf.mountainSize) {\n        case 'Small': return 1;\n        case 'Medium': return getUniformInt(1, 2);\n        case 'Large': return getUniformInt(1, 3);\n        case 'Huge': return getUniformInt(1, 4);\n        default: return 1;\n    }\n};\n\n/* Returns the number of levels generated for given feature. */\nWorldConf.getNumLevels = type /* , featConf, conf */ => {\n    switch (type) {\n        case 'dungeon': {\n            return getUniformInt(1, 10);\n        }\n        case 'city': {\n            return getUniformInt(1, 3);\n        }\n        case 'mountain': {\n            return getUniformInt(1, 3);\n        }\n        default: return 1;\n    }\n};\n\n/* Scales the number of features based on the corresponding value in conf.\n * */\nWorldConf.scaleNumFeatures = (type, conf): number => {\n    switch (type) {\n        case 'dungeon': {\n            return featureScaleCoeff[conf.excavation];\n        }\n        case 'mountain': {\n            return featureScaleCoeff[conf.elevation];\n        }\n        case 'city': {\n            return featureScaleCoeff[conf.population];\n        }\n        default: RG.err('Creator', 'scaleNumFeatures',\n            `Unknown feat type ${type}`);\n    }\n    return 1.0;\n};\n\n/* Given feature type (dungeon, city, mountain), returns\n* the number of features that should be generated. */\nWorldConf.getNumFeatures = (type: string, areaConf, conf): number => {\n    let nFeatures = (areaConf.maxX + 1) * (areaConf.maxY + 1);\n    nFeatures = Math.ceil(nFeatures * WorldConf.scaleNumFeatures(type, conf));\n    // TODO based on type/conf, adjust the number\n    nFeatures = RNG.getNormal(nFeatures, WorldConf.featCoeff * nFeatures);\n    return nFeatures;\n};\n\n//------------------\n// DUNGEONS\n//------------------\n\n/* Creates configuration for all dungeons based on the (area)conf. */\nWorldConf.createDungeonsConf = (areaConf, conf): IF.DungeonConf[] => {\n    const nDungeons = WorldConf.getNumFeatures('dungeon', areaConf, conf);\n    const dungeons = [];\n    for (let i = 0; i < nDungeons; i++) {\n        const dungeon = WorldConf.createSingleDungeonConf(areaConf, conf);\n        dungeons.push(dungeon);\n    }\n    return dungeons;\n};\n\n\n/* Creates conf for a single dungeon. */\nWorldConf.createSingleDungeonConf = (areaConf, conf): IF.DungeonConf => {\n    const xy: IF.ICoordXY = WorldConf.getXYInArea(areaConf);\n    const dungeonConf = Object.assign({}, areaConf);\n    dungeonConf.x = xy.x;\n    dungeonConf.y = xy.y;\n\n    WorldConf.setDistFromStart(dungeonConf, areaConf);\n\n    const branches = WorldConf.createBranchesConf(dungeonConf, conf);\n    const connect = WorldConf.createBranchConnections('branch', branches);\n\n    const obj: IF.DungeonConf = {\n        name: Names.getGenericPlaceName('dungeon'),\n        x: xy.x,\n        y: xy.y,\n        nBranches: branches.length,\n        branch: branches\n    };\n    if (connect) {obj.connectLevels = connect;}\n    return obj;\n};\n\n/* Creates branches config for dungeon. This include entrance and branch\n * connections. */\nWorldConf.createBranchesConf = (dungeonConf, conf): IF.BranchConf[] => {\n    const nBranches = WorldConf.getNumBranches(dungeonConf, conf);\n    const branches = [];\n    for (let i = 0; i < nBranches; i++) {\n        const branch = WorldConf.createSingleBranchConf();\n        branches.push(branch);\n\n        // For now, entrance is always from level 0 of br 0\n        if (i === 0) {\n            branch.entranceLevel = 0;\n        }\n    }\n    return branches;\n};\n\nWorldConf.createSingleBranchConf = (): IF.BranchConf => {\n    const nLevels = WorldConf.getNumLevels('dungeon');\n    return {\n        dungeonX: 80,\n        dungeonY: 28,\n        sqrPerItem: 40,\n        sqrPerActor: 40,\n        maxDanger: 2,\n        maxValue: 100,\n        dungeonType: 'digger',\n        name: Names.getGenericPlaceName('branch'),\n        nLevels\n    };\n};\n\n//---------------------\n// CITIES\n//---------------------\n\n/* THis function decide on the structure of quarter, nHouses, shops etc. */\nWorldConf.createSingleQuarterConf = (): IF.QuarterConf => {\n    const nLevels = WorldConf.getNumLevels('city');\n    return {\n        nLevels,\n        name: Names.getGenericPlaceName('quarter')\n    };\n};\n\n//------------\n// MOUNTAINS\n//------------\n\nWorldConf.createSingleFaceConf = (): IF.FaceConf => {\n    const nLevels = WorldConf.getNumLevels('mountain');\n    return {\n        x: 100,\n        y: 200,\n        name: Names.getGenericPlaceName('face'),\n        nLevels\n    };\n};\n\n/* The object creates the initial high-level world configuration which is used\n * to build the world containing all playable levels.\n * NOTE: To keep the code shorter, 'conf' refers always to the global\n * configuration. It's always the last param for each function.\n */\nexport class WorldCreator {\n\n    protected nCreated: {[key: string]: number};\n    protected rand: Random;\n\n    constructor() {\n        this.nCreated = {};\n    }\n\n\n    // Assumptions: Increase difficulty the more player travels from starting\n    // position. Start is always at Math.floor(xMax/2), yMax.\n    // Moving between areas is equivalent of X difficulty steps increase\n\n    /* Main function. You should call this to get a full configuration to create\n     * the world. This conf should be given to Factory.World. */\n    public createWorldConf(conf): IF.WorldConf {\n        if (!conf.name) {\n            RG.err('Creator', 'createWorldConf',\n                'conf.name must be specified.');\n        }\n\n        // Assign user conf over default first\n        Object.keys(defaultConf).forEach(key => {\n            if (!conf.hasOwnProperty(key)) {\n                conf[key] = defaultConf[key];\n            }\n        });\n\n        this.rand = new Random();\n        this.rand.setSeed(conf.seed);\n\n        const areas = this.createAreasConf(conf);\n        const playerStart = WorldConf.getPlayerStart(areas[0], conf);\n        return {\n            name: conf.name,\n            nAreas: areas.length,\n            area: areas,\n            playerStart\n        };\n    }\n\n    //---------------\n    // AREAS\n    //---------------\n\n    public createAreasConf(conf): IF.AreaConf[] {\n        const nAreas = worldSizeToNum[conf.worldSize];\n        const areas = [];\n        for (let i = 0; i < nAreas; i++) {\n            const areaConf = this.createSingleAreaConf(i, conf);\n            areas.push(areaConf);\n        }\n        return areas;\n    }\n\n    /* Creates configuration for single area. Assume player starts at areaNum ==\n     * 0, and adjust difficulty accordingly. */\n    public createSingleAreaConf(areaNum, conf): IF.AreaConf {\n        const areaSize = areaSizeToXY[conf.areaSize];\n        const maxX = conf.maxX || areaSize.x;\n        const maxY = conf.maxY || areaSize.y;\n\n        // Need to pass this info other functions to determine number of\n        // features and difficulty\n        const areaConf = {\n            maxX, maxY, areaNum\n        };\n\n        // Finally, get config for different sub-features in the world\n        const dungeons = WorldConf.createDungeonsConf(areaConf, conf);\n        const cities = this.createCitiesConf(areaConf, conf);\n        const mountains = this.createMountainsConf(areaConf, conf);\n\n        return {\n            name: this.getName('area'),\n            maxX,\n            maxY,\n            nDungeons: dungeons.length,\n            nCities: cities.length,\n            nMountains: mountains.length,\n            dungeon: dungeons,\n            city: cities,\n            mountain: mountains\n        };\n    }\n\n\n    //---------------\n    // CITIES\n    //---------------\n\n    public createCitiesConf(areaConf, conf): IF.CityConf[] {\n        const nCities = WorldConf.getNumFeatures('city', areaConf, conf);\n        const cities = [];\n        for (let i = 0; i < nCities; i++) {\n            const city = this.createSingleCityConf(areaConf, conf);\n            cities.push(city);\n        }\n        return cities;\n    }\n\n    public createSingleCityConf(areaConf, conf): IF.CityConf {\n        const xy = WorldConf.getXYInArea(areaConf);\n        const cityConf = Object.assign({}, areaConf);\n        cityConf.x = xy.x;\n        cityConf.y = xy.y;\n\n        WorldConf.setDistFromStart(cityConf, areaConf);\n\n        const quarters = this.createQuartersConf(cityConf, conf);\n        const connect = WorldConf.createQuarterConnections(quarters);\n\n        const obj: IF.CityConf = {\n            name: '',\n            x: xy.x,\n            y: xy.y,\n            nQuarters: quarters.length,\n            quarter: quarters\n        };\n        if (connect) {obj.connectLevels = connect;}\n        return obj;\n    }\n\n    /* Creates the config for quarters of single city. */\n    public createQuartersConf(cityConf, conf): IF.QuarterConf[] {\n        const nQuarters = WorldConf.getNumQuarters(cityConf, conf);\n        const quarters = [];\n        for (let i = 0; i < nQuarters; i++) {\n            const quarter = WorldConf.createSingleQuarterConf();\n            if (i === 0) {\n                quarter.entranceLevel = 0;\n            }\n            quarters.push(quarter);\n        }\n        return quarters;\n    }\n\n\n    //---------------\n    // MOUNTAINS\n    //---------------\n\n    public createMountainsConf(areaConf, conf): IF.MountainConf[] {\n        const nMountains = WorldConf.getNumFeatures('mountain', areaConf, conf);\n        const mountains = [];\n        for (let i = 0; i < nMountains; i++) {\n            const mountain = this.createSingleMountainConf(areaConf, conf);\n            mountains.push(mountain);\n        }\n        return mountains;\n    }\n\n    public createSingleMountainConf(areaConf, conf): IF.MountainConf {\n        const xy = WorldConf.getXYInArea(areaConf);\n        const mountConf = Object.assign({}, areaConf);\n        mountConf.x = xy.x;\n        mountConf.y = xy.y;\n\n        WorldConf.setDistFromStart(mountConf, areaConf);\n\n        const faces = this.createFacesConf(mountConf, conf);\n        const connect = WorldConf.createFaceConnections('mountain', faces);\n\n        const obj: IF.MountainConf = {\n            name: '',\n            x: xy.x,\n            y: xy.y,\n            nFaces: faces.length,\n            face: faces\n        };\n        if (connect) {obj.connectLevels = connect;}\n        return obj;\n    }\n\n    public createFacesConf(mountConf, conf): IF.FaceConf[] {\n        const nFaces = WorldConf.getNumFaces(mountConf, conf);\n        const faces = [];\n        for (let i = 0; i < nFaces; i++) {\n            const face = WorldConf.createSingleFaceConf();\n            faces.push(face);\n\n            // For now, entrance is always from level 0 of br 0\n            if (i === 0) {\n                face.entranceLevel = 0;\n            }\n        }\n        return faces;\n    }\n\n    //----------------------------\n    // NAME GEN FUNCTIONS\n    // For debugging, names are stupid for now\n    //----------------------------\n\n    public getName(type: string): string {\n        if (!this.nCreated.hasOwnProperty(type)) {\n            this.nCreated[type] = 0;\n        }\n        this.nCreated[type] += 1;\n        return `${type} ${this.nCreated[type]}`;\n    }\n\n}\n\nWorldConf.Creator = WorldCreator;\n","\n/* This file contains the first layer of overworld generation. It generates tile\n * map where each tile represents an area of Map.Cells, for example 10x10.\n * This tile map has one feature (town/mountain/dungeon) per tile, to keep the\n * overworld map useful for navigation and seeing details.\n */\nimport dbg = require('debug');\nconst debug = dbg('bitn:OW');\n\nimport RG from './rg';\nimport {TCoord, BBox} from './interfaces';\n\nimport {CellMap} from './map';\nimport {Geometry} from './geometry';\nimport {Level} from './level';\nimport {OW} from './ow-constants';\nimport {Random} from './random';\nimport {TerritoryMap} from '../data/territory-map';\nimport {Territory} from './territory';\nimport {ElementMarker} from './element';\n\ntype OWSubLevel = import('./overworld').OWSubLevel;\n\nconst getRNG = Random.getRNG;\n\nexport interface OWMapConf {\n    yFirst?: boolean;\n    topToBottom?: boolean;\n    printResult?: boolean;\n    owTilesX?: number;\n    owTilesY?: number;\n    nLevelsX?: number;\n    nLevelsY?: number;\n    playerX?: number;\n    playerY?: number;\n    playerRace?: string;\n    createTerritory?: boolean;\n}\n\n\n//---------------------------------------------\n/* OWMap: Data struct for overworld. */\n//---------------------------------------------\n\ninterface FeatData {\n    type: string;\n}\n\ninterface OWWall {\n    x: number | number[];\n    y: number | number[];\n    type: string;\n}\n\nexport class OWMap {\n\n    public static createOverWorld: (conf) => OWMap;\n    public static fromJSON: (json) => OWMap;\n\n    public _baseMap: string[][];\n    public _explored: {[key: string]: boolean};\n    public _subLevels: OWSubLevel[][];\n\n    public _hWalls: OWWall[];\n    public _vWalls: OWWall[];\n\n    public _features: {[key: string]: TCoord[]};\n    public _featureData: {[key: string]: FeatData[]};\n    public _featuresByXY: {[key: string]: string[]};\n\n    public _biomeMap: {[key: string]: string};\n\n    public _terrMap: Territory;\n\n    public coordMap: any;\n\n    constructor() {\n        this._baseMap = [];\n        this._explored = {};\n        this._subLevels = [];\n\n        this._hWalls = [];\n        this._vWalls = [];\n\n        this._features = {};\n        this._featureData = {};\n        this._featuresByXY = {};\n\n        this._biomeMap = {};\n\n        this._terrMap = null;\n    }\n\n    public getSizeXY() {\n        return [this.getSizeX(), this.getSizeY()];\n    }\n\n    public getCenterX() {\n        return Math.round(this.getSizeX() / 2);\n    }\n\n    public getCenterY() {\n        return Math.round(this.getSizeY() / 2);\n    }\n\n    public isWallTile(x, y) {\n        const tile = this._baseMap[x][y];\n        return OW.ALL_WALLS_LUT.hasOwnProperty(tile);\n    }\n\n    public numTiles(tile) {\n        let numFound = 0;\n        const [sizeX, sizeY] = this.getSizeXY();\n        for (let x = 0; x < sizeX; x++) {\n            for (let y = 0; y < sizeY; y++) {\n                if (this._baseMap[x][y] === tile) {\n                    ++numFound;\n                }\n            }\n        }\n        return numFound;\n    }\n\n    public numWallTiles() {\n        let numWalls = 0;\n        const [sizeX, sizeY] = this.getSizeXY();\n        for (let x = 0; x < sizeX; x++) {\n            for (let y = 0; y < sizeY; y++) {\n                if (this.isWallTile(x, y)) {\n                    ++numWalls;\n                }\n            }\n        }\n        return numWalls;\n    }\n\n    public getBiomeMap(): {[key: string]: string} {\n        return this._biomeMap;\n    }\n\n    public getBiome(x, y): string {\n        const key = x + ',' + y;\n        if (this._biomeMap.hasOwnProperty(key)) {\n            return this._biomeMap[x + ',' + y];\n        }\n        else {\n            RG.err('OWMap', 'getBiome',\n                `No biome set for x,y ${x},${y}`);\n        }\n        return '';\n    }\n\n    public getMap(): string[][] {\n        return this._baseMap;\n    }\n\n    public getCell(xy: TCoord): string {\n        return this._baseMap[xy[0]][xy[1]];\n    }\n\n    public numHWalls(): number {\n        return this._hWalls.length;\n    }\n\n    public numVWalls(): number {\n        return this._vWalls.length;\n    }\n\n    public getHWalls(): OWWall[] {\n        return this._hWalls;\n    }\n\n    public getVWalls(): OWWall[] {\n        return this._vWalls;\n    }\n\n    public setMap(map): void {\n        const sizeX = map.length;\n        this._baseMap = map;\n        for (let x = 0; x < sizeX; x++) {\n            this._subLevels[x] = [];\n        }\n    }\n\n    public setTerrMap(terrMap: Territory): void {\n        this._terrMap = terrMap;\n    }\n\n    public getTerrMap(): Territory {\n        return this._terrMap;\n    }\n\n    public addBiome(x: number, y: number, biomeType: string): void {\n        const key = x + ',' + y;\n        this._biomeMap[key] = biomeType;\n    }\n\n    public addVWall(wall: OWWall): void {\n        wall.type = 'vertical';\n        this._vWalls.push(wall);\n    }\n\n    public addHWall(wall: OWWall): void {\n        wall.type = 'horizontal';\n        this._hWalls.push(wall);\n    }\n\n    public addFeature(xy: TCoord, type: string): void {\n        const keyXY = xy[0] + ',' + xy[1];\n        if (!this._features.hasOwnProperty(type)) {\n            this._features[type] = [];\n        }\n        if (!this._featuresByXY.hasOwnProperty(keyXY)) {\n            this._featuresByXY[keyXY] = [];\n        }\n        this._features[type].push(xy);\n        this._featuresByXY[keyXY].push(type);\n    }\n\n    public addFeatureData(xy: TCoord, data: FeatData) {\n        const keyXY = xy[0] + ',' + xy[1];\n        if (!this._featureData.hasOwnProperty(keyXY)) {\n            this._featureData[keyXY] = [];\n        }\n        this._featureData[keyXY].push(data);\n    }\n\n    public getFeaturesByType(type: string): TCoord[] {\n        if (!this._features.hasOwnProperty(type)) {\n            return [];\n        }\n        return this._features[type];\n    }\n\n    public getFeaturesByXY(xy: TCoord): string[] {\n        const keyXY = xy[0] + ',' + xy[1];\n        return this._featuresByXY[keyXY];\n    }\n\n    public addSubLevel(xy: TCoord, level: OWSubLevel): void {\n        this._subLevels[xy[0]][xy[1]] = level;\n    }\n\n    public getSubLevel(xy: TCoord): OWSubLevel {\n        return this._subLevels[xy[0]][xy[1]];\n    }\n\n    public clearSubLevels(): void {\n        this._subLevels = [];\n    }\n\n    public getSubLevelsWithFeature(type: string): OWSubLevel[] {\n        const featXY = this.getFeaturesByType(type);\n        return featXY.map(xy => this.getSubLevel(xy));\n    }\n\n    public getAreaXY(): number {\n        return this.getSizeX() * this.getSizeY();\n    }\n\n    public getSizeX(): number {\n        return this._baseMap.length;\n    }\n\n    public getSizeY(): number {\n        if (this._baseMap[0].length > 0) {\n            return this._baseMap[0].length;\n        }\n        else {\n            RG.warn('OWMap', 'getSizeY',\n                'Y-size requested but returning zero value');\n            return 0;\n        }\n    }\n\n    public setExplored(xy: TCoord): void {\n        this._explored[xy[0] + ',' + xy[1]] = true;\n    }\n\n    public isExplored(xy: TCoord): boolean {\n        return this._explored[xy[0] + ',' + xy[1]];\n    }\n\n    public toJSON(): any {\n        const json: any = {\n            baseMap: this._baseMap,\n            biomeMap: this._biomeMap,\n            features: this._features,\n            featuresByXY: this._featuresByXY,\n            vWalls: this._vWalls,\n            hWalls: this._hWalls,\n            explored: this._explored\n        };\n        if (this.coordMap) {\n            json.coordMap = this.coordMap.toJSON();\n        }\n        if (this._terrMap) {\n            json.terrMap = this._terrMap.toJSON();\n        }\n        return json;\n    }\n\n    public getOWMap(useExplored = false) {\n        const map = JSON.parse(JSON.stringify(this._baseMap));\n        const sizeY = map[0].length;\n        const sizeX = map.length;\n\n        // Add features on top of the base map, for overlapping features,\n        // this shows only the first one added\n        Object.keys(this._features).forEach(type => {\n            this._features[type].forEach(xy => {\n                map[xy[0]][xy[1]] = type;\n            });\n        });\n\n        if (useExplored) {\n          for (let x = 0; x < sizeX; x++) {\n            for (let y = 0; y < sizeY; y++) {\n              if (!this._explored[x + ',' + y]) {\n                map[x][y] = '?';\n              }\n            }\n          }\n        }\n        return map;\n    }\n\n    /* Returns the OWMap represented as Map.CellList. Marker elements are used to\n     * show the visible cells. */\n    public getCellList() {\n        const map = this.getOWMap();\n        const sizeY = map[0].length;\n        const sizeX = map.length;\n\n        const cellList = new CellMap(sizeX, sizeY);\n        for (let x = 0; x < sizeX; x++) {\n            for (let y = 0; y < sizeY; y++) {\n                const marker = new ElementMarker(map[x][y]);\n                if (OW.classNames[map[x][y]]) {\n                    marker.setClassName(OW.classNames[map[x][y]]);\n                }\n                else {\n                    marker.setClassName(OW.classNames.default);\n                }\n                cellList.setProp(x, y, RG.TYPE_ELEM, marker);\n            }\n        }\n\n        return cellList;\n    }\n\n    /* Converts the OWMap into string. */\n    public mapToString(useExplored = false) {\n        const map = this.getOWMap(useExplored);\n        const sizeY = map[0].length;\n        const sizeX = map.length;\n\n        const lines = [];\n        for (let y = 0; y < sizeY; y++) {\n            const line = [];\n            for (let x = 0; x < sizeX; x++) {\n                line.push(map[x][y]);\n            }\n            lines.push(line);\n        }\n        return lines.map(line => line.join(''));\n    }\n\n    /* Prints the map of biomes and a legend explaining the numbers. */\n    public biomeMapToString() {\n        const sizeX = this.getSizeX() - 1;\n        const sizeY = this.getSizeY() - 1;\n\n        // Build a legend ie: 0 - arctic, 1 - alpine, 2 - forest etc\n        const keys = Object.keys(OW.biomeTypeMap);\n        const name2Num = {};\n        const legend = keys.map((key, index) => {\n            name2Num[key] = '' + index;\n            return `${index} - ${key}`;\n        });\n\n        let result = '';\n        for (let y = 0; y < sizeY; y++) {\n            let rowStr = '';\n            for (let x = 0; x < sizeX; x++) {\n                const key = x + ',' + y;\n                rowStr += ',' + name2Num[this._biomeMap[key]];\n            }\n            rowStr += '\\n';\n            result += rowStr;\n        }\n        result += '\\n' + legend.join('\\n');\n        return result;\n    }\n}\n\n//---------------------------------------------------------------------------\n// HELPERS\n//---------------------------------------------------------------------------\n\n/* Creates an empty map. */\nfunction createEmptyMap(sizeX, sizeY) {\n    const map = [];\n    for (let x = 0; x < sizeX; x++) {\n        map[x] = [];\n        for (let y = 0; y < sizeY; y++) {\n            map[x][y] = OW.EMPTY;\n        }\n    }\n    return map;\n}\n\n/* Randomizes map border using valid border cells. Valid cells are ones\n * which do not have connections outside the map, and abut to neighbouring\n * cells correctly. */\nfunction randomizeBorders(map) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    // Set map corners\n    map[0][0] = OW.CC_NW;\n    map[0][sizeY - 1] = OW.CC_SW;\n    map[sizeX - 1][sizeY - 1] = OW.CC_SE;\n    map[sizeX - 1][0] = OW.CC_NE;\n\n    // N border, y = 0, vary x\n    for (let x = 1; x < sizeX - 1; x++) {\n        map[x][0] = getRNG().arrayGetRand(OW.N_BORDER);\n    }\n\n    // S border, y = max, vary x\n    for (let x = 1; x < sizeX - 1; x++) {\n        map[x][sizeY - 1] = getRNG().arrayGetRand(OW.S_BORDER);\n    }\n\n    // E border, x = max, vary y\n    for (let y = 1; y < sizeY - 1; y++) {\n        map[sizeX - 1][y] = getRNG().arrayGetRand(OW.E_BORDER);\n    }\n\n    // W border, x = 0, vary y\n    for (let y = 1; y < sizeY - 1; y++) {\n        map[0][y] = getRNG().arrayGetRand(OW.W_BORDER);\n    }\n\n}\n\n/* Adds the large-scale walls into the overworld map. */\nfunction addWallsIfAny(ow, map, conf) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    let nHWalls = typeof conf.nHWalls !== 'undefined'\n        ? conf.nHWalls : [0.3, 0.5];\n    let nVWalls = typeof conf.nVWalls !== 'undefined'\n        ? conf.nVWalls : [];\n    const stopOnWall = typeof conf.stopOnWall !== 'undefined'\n        ? conf.stopOnWall : false;\n\n    // If only integers are given, randomize positions of walls.\n    if (Number.isInteger(conf.nHWalls)) {\n        nHWalls = [];\n        for (let i = 0; i < conf.nHWalls; i++) {\n            const pos = getRNG().getUniformInt(1, 19);\n            nHWalls.push(pos * 0.05);\n        }\n        nHWalls = nHWalls.sort();\n    }\n    if (Number.isInteger(conf.nVWalls)) {\n        nVWalls = [];\n        for (let i = 0; i < conf.nVWalls; i++) {\n            const pos = getRNG().getUniformInt(1, 19);\n            nVWalls.push(pos * 0.05);\n        }\n        nVWalls = nHWalls.sort();\n    }\n\n    // Add horizontal and vertical \"walls\"\n    for (let i = 0; i < nHWalls.length; i++) {\n        let stop = stopOnWall;\n        if (stopOnWall === 'random') {\n            stop = getRNG().getUniform() >= 0.5;\n        }\n        addHorizontalWallWestToEast(ow,\n            Math.floor(sizeY * nHWalls[i]), map, stop);\n    }\n    for (let i = 0; i < nVWalls.length; i++) {\n        let stop = stopOnWall;\n        if (stopOnWall === 'random') {\n            stop = getRNG().getUniform() >= 0.5;\n        }\n        addVerticalWallNorthToSouth(ow,\n            Math.floor(sizeX * nVWalls[i]), map, stop);\n    }\n\n}\n\n/* Adds a horizontal wall travelling from E -> W. */\nfunction addHorizontalWallWestToEast(ow, y, map, stopOnWall = false) {\n    const sizeX = map.length;\n    let didStopToWall = false;\n    const wall = {y, x: [1]};\n    map[0][y] = OW.TT_W;\n    if (!stopOnWall) {map[sizeX - 1][y] = OW.TT_E;}\n    for (let x = 1; x < sizeX - 1; x++) {\n        if (!didStopToWall) {\n            if (map[x][y] !== OW.EMPTY) {\n                if (!stopOnWall) {\n                    map[x][y] = OW.XX; // Push through wall\n                }\n                else { // Add ╣ and finish\n                    didStopToWall = true;\n                    map[x][y] = OW.TT_E;\n                    wall.x.push(x);\n                }\n            }\n            else {\n                map[x][y] = getRNG().getWeighted(OW.LINE_WE_WEIGHT);\n            }\n        }\n    }\n    if (!didStopToWall) { // Didn't stop to wall\n        if (stopOnWall) { // But we wanted, so add ending piece\n            map[sizeX - 1][y] = OW.TT_E;\n        }\n        wall.x.push(sizeX - 1);\n    }\n    ow.addHWall(wall);\n}\n\n/* Adds a horizontal wall travelling from E -> W. */\nfunction addVerticalWallNorthToSouth(ow, x, map, stopOnWall = false) {\n    const sizeY = map[0].length;\n    let didStopToWall = false;\n    const wall = {x, y: [1]};\n    map[x][0] = OW.TT_N;\n    if (!stopOnWall) {map[x][sizeY - 1] = OW.TT_S;}\n    for (let y = 1; y < sizeY - 1; y++) {\n        if (!didStopToWall) {\n            if (map[x][y] !== OW.EMPTY) {\n                if (!stopOnWall) {\n                    map[x][y] = OW.XX; // Push through wall\n                }\n                else { // Add ╩ and finish\n                    didStopToWall = true;\n                    map[x][y] = OW.TT_S;\n                    wall.y.push(y);\n                }\n            }\n            else {\n                map[x][y] = getRNG().getWeighted(OW.LINE_NS_WEIGHT);\n            }\n        }\n    }\n    if (!didStopToWall) {\n        if (stopOnWall) { // But we wanted, so add ending piece\n            map[x][sizeY - 1] = OW.TT_S;\n        }\n        wall.y.push(sizeY - 1);\n    }\n    ow.addVWall(wall);\n}\n\nfunction addRandomInnerWalls(overworld, map, conf) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    const ratio = conf.innerWallRatio || 0.05;\n    const nTiles = Math.floor(sizeX * sizeY * ratio);\n\n    for (let i = 0; i < nTiles; i++) {\n        const x = getRNG().getUniformInt(2, sizeX - 2);\n        const y = getRNG().getUniformInt(2, sizeY - 2);\n        if (map[x][y] === OW.EMPTY) {\n            map[x][y] = getRNG().arrayGetRand(OW.ALL_WALLS);\n        }\n    }\n}\n\n/* Connects all unconnected tiles by starting from 0,0 -> 0,N, then\n * moving to 1,0 -> 1,N, and so on.\n * */\nfunction connectUnconnectedTopBottom(map, yFirst = true) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    if (yFirst) {\n        for (let x = 0; x < sizeX; x++) {\n            for (let y = 0; y < sizeY; y++) {\n                connectEmptyCell(x, y, map);\n            }\n        }\n    }\n    else {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                connectEmptyCell(x, y, map);\n            }\n        }\n    }\n}\n\n/* Connects all unconnected tiles by starting from 0,N -> 0,0, then\n * moving to 1,N -> 1,0, and so on.\n * */\nfunction connectUnconnectedBottomTop(map, yFirst = true) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    if (yFirst) {\n        for (let x = 0; x < sizeX; x++) {\n            for (let y = sizeY - 1; y >= 0; y--) {\n                connectEmptyCell(x, y, map);\n            }\n        }\n    }\n    else {\n        for (let y = sizeY - 1; y >= 0; y--) {\n            for (let x = 0; x < sizeX; x++) {\n                connectEmptyCell(x, y, map);\n            }\n        }\n    }\n}\n\nfunction connectEmptyCell(x, y, map) {\n    if (map[x][y] === OW.EMPTY) {\n        const neighbours = getValidNeighbours(x, y, map);\n        const validNeighbours = neighbours.filter(n =>\n            n[0] !== OW.EMPTY && n[0] !== OW.TERM\n        );\n        if (validNeighbours.length === 1) {\n            if (validNeighbours[0][1].length > 0) {\n                map[x][y] = getRNG().arrayGetRand(validNeighbours[0][1]);\n            }\n            else {\n                map[x][y] = OW.TERM;\n            }\n        }\n        else {\n            map[x][y] = OW.TERM;\n        }\n    }\n}\n\n/* Returns valid neighbouring tiles for the given x,y. */\nfunction getValidNeighbours(x, y, map) {\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n    const tiles = [];\n    // N\n    if (y > 0) {\n        const conn = OW.CAN_CONNECT[map[x][y - 1]].N;\n        tiles.push([map[x][y - 1], conn]);\n    }\n    // S\n    if (y < sizeY - 1) {\n        const conn = OW.CAN_CONNECT[map[x][y + 1]].S;\n        tiles.push([map[x][y + 1], conn]);\n    }\n    // E\n    if (x < sizeX - 1) {\n        const conn = OW.CAN_CONNECT[map[x + 1][y]].E;\n        tiles.push([map[x + 1][y], conn]);\n    }\n    // W\n    if (x > 0) {\n        const conn = OW.CAN_CONNECT[map[x - 1][y]].W;\n        tiles.push([map[x - 1][y], conn]);\n    }\n    return tiles;\n}\n\n/* Creates the territories for settlements like cities. */\nfunction createOverWorldTerritories(ow, conf) {\n    const {playerRace, playerX, playerY} = conf;\n    const terr = TerritoryMap.create(ow, playerRace, [playerX, playerY]);\n    ow.setTerrMap(terr);\n}\n\n/* Adds features like water, cities etc into the world. This feature only\n * designates the x,y coordinate on overworld map, but does not give details\n * for the Map.Level sublevels. */\nfunction addOverWorldFeatures(ow: OWMap, conf) {\n    const sizeX = ow.getSizeX();\n    const sizeY = ow.getSizeY();\n    const area = sizeX * sizeY;\n\n    const numFlatTiles = ow.numTiles(OW.TERM);\n    const numWallTiles = ow.numWallTiles();\n\n    const nDungeonsSouth = conf.nDungeonsSouth || Math.floor(numWallTiles / 12);\n    const nDungeonsCenter = conf.nDungeonsCenter ||\n        Math.floor(numWallTiles / 24);\n    const nDungeonsNorth = conf.nDungeonsNorth || Math.floor(numWallTiles / 24);\n\n    const nMountainsNorth = conf.nMountainsNorth || Math.floor(area / 40);\n    const nMountainsMiddle = conf.nMountainsMiddle || Math.floor(area / 60);\n    const nMountainsSouth = conf.nMountainsSouth || Math.floor(area / 80);\n\n    // Add final tower\n    addFeatureToAreaByDir(ow, 'NE', 0.5, OW.BTOWER);\n    const numHorWalls = ow.numHWalls();\n\n    // City of B, + other wall fortresses\n    if (numHorWalls > 1) {\n        addFeatureToWall(ow, ow._hWalls[1], OW.WCAPITAL);\n        addFeatureToWall(ow, ow._hWalls[0], OW.WTOWER);\n    }\n    if (numHorWalls > 2) {\n        for (let i = 2; i < numHorWalls; i++) {\n            addFeatureToWall(ow, ow._hWalls[i], OW.VTUNNEL);\n        }\n    }\n\n    const numVerWalls = ow.numVWalls();\n    if (numVerWalls > 0) {\n        addFeatureToWall(ow, ow._vWalls[numVerWalls - 1], OW.BTOWER);\n        addFeatureToWall(ow, ow._vWalls[numVerWalls - 1], OW.BCAPITAL);\n    }\n\n    const cmdBetweenHWalls = {y: {start: ['wall', 0], end: ['wall', 1]}};\n    const cmdAboveNorthWall = {y: {start: 'N', end: 'wall'}};\n    const cmdSouthernArea = {y: {start: ['wall', 1], end: 'S'}};\n\n    // Create biomes for actor generation of overworld\n    addBiomeToOverWorld(ow, cmdAboveNorthWall, OW.BIOME.ALPINE);\n    addBiomeToOverWorld(ow, {x: {start: ['wall', 0], end: 'E'}},\n        OW.BIOME.ARCTIC);\n    addBiomeToOverWorld(ow, cmdBetweenHWalls, OW.BIOME.TUNDRA);\n    addBiomeToOverWorld(ow, cmdSouthernArea, OW.BIOME.TAIGA);\n\n    // Create forests and lakes (sort of done in sub-level generation)\n\n    // Distribute dungeons\n    // const bBoxSouth = bBox(1, sizeY - 2, sizeX - 2, sizeY - 10);\n    addDungeonsToOverWorld(ow, nDungeonsSouth, cmdSouthernArea);\n    addDungeonsToOverWorld(ow, nDungeonsCenter, cmdBetweenHWalls);\n    addDungeonsToOverWorld(ow, nDungeonsNorth, cmdAboveNorthWall);\n\n    const nCitySouth = Math.floor(numFlatTiles * 0.5 / 80);\n    const nCityCenter = Math.floor(numFlatTiles * 0.2 / 100);\n    const nCityNorth = Math.floor(numFlatTiles * 0.2 / 80);\n\n    // Distribute mountains\n    addMountainsToOverWorld(ow, nMountainsSouth, cmdSouthernArea);\n    addMountainsToOverWorld(ow, nMountainsMiddle, cmdBetweenHWalls);\n    addMountainsToOverWorld(ow, nMountainsNorth, cmdAboveNorthWall);\n\n    // Should probably generate the terrain map here, and place cities\n    // based on it\n\n    // Distribute cities and villages etc settlements\n    if (!conf.createTerritory) {\n        addVillagesToOverWorld(ow, nCitySouth, cmdSouthernArea);\n        addVillagesToOverWorld(ow, nCityCenter, cmdBetweenHWalls);\n        addVillagesToOverWorld(ow, nCityNorth, cmdAboveNorthWall);\n    }\n    else {\n        createOverWorldTerritories(ow, conf);\n        addCitiesBasedOnTerritories(ow);\n    }\n\n    // Adds roads for created features\n}\n\n/* Adds a feature to the map based on the cardinal direction. */\nfunction addFeatureToAreaByDir(ow: OWMap, loc, shrink, type) {\n    const map = ow.getMap();\n    const sizeY = map[0].length;\n    const sizeX = map.length;\n\n    let xy = getRandLoc(loc, shrink, sizeX, sizeY);\n    let watchdog = 1000;\n    while (map[xy[0]][xy[1]] !== OW.TERM) {\n        xy = getRandLoc(loc, shrink, sizeX, sizeY);\n        if (watchdog === 0) {\n            RG.warn('OverWorld', 'addFeature',\n                'No empty cell to add ' + type + ', ' + loc);\n            break;\n        }\n        --watchdog;\n    }\n\n    // Finally add the feature\n    ow.addFeature(xy, type);\n}\n\n/* Adds given feature on top of given wall to random position. */\nfunction addFeatureToWall(ow: OWMap, wall, type) {\n    const map = ow.getMap();\n    let xy = null;\n\n    if (wall.type === 'horizontal') { // y will be fixed\n        const ulx = wall.x[0];\n        const lrx = wall.x[wall.x.length - 1];\n        xy = findCellRandXYInBox(map, bBox(ulx, wall.y, lrx, wall.y), OW.LL_WE);\n    }\n    if (wall.type === 'vertical') { // y will be fixed\n        const uly = wall.y[0];\n        const lry = wall.y[wall.y.length - 1];\n        xy = findCellRandXYInBox(map, bBox(wall.x, uly, wall.x, lry), OW.LL_NS);\n    }\n\n    debug(`Placed feature ${type} to ${xy}`);\n    ow.addFeature(xy, type);\n}\n\n/* Adds a biome zone to the overworld map. These zones can be used to generate\n * terrain props + different actors based on the zone type. */\nfunction addBiomeToOverWorld(ow: OWMap, cmd, biomeType: string): void {\n    const bbox = getBoundingBox(ow, cmd);\n    // Apply given type on the found range\n    for (let x = bbox.ulx; x <= bbox.lrx; x++) {\n        for (let y = bbox.uly; y <= bbox.lry; y++) {\n            ow.addBiome(x, y, biomeType);\n        }\n    }\n}\n\n/* Adds dungeons into the overworld. Can be bounded using using coordinates. */\nfunction addDungeonsToOverWorld(ow: OWMap, nDungeons, cmd): void {\n    const bbox = getBoundingBox(ow, cmd);\n    for (let i = 0; i < nDungeons; i++) {\n        const xy = findCellRandXYInBox(ow.getMap(), bbox, OW.ALL_WALLS);\n        ow.addFeature(xy, OW.WDUNGEON);\n    }\n}\n\nfunction addMountainsToOverWorld(ow: OWMap, nMountains, cmd): void {\n    const bbox = getBoundingBox(ow, cmd);\n    for (let i = 0; i < nMountains; i++) {\n        const xy = findCellRandXYInBox(ow.getMap(), bbox, [OW.TERM]);\n        ow.addFeature(xy, OW.MOUNTAIN);\n    }\n\n}\n\n/* Adds villages into the overworld. Can be bounded using using coordinates. */\nfunction addVillagesToOverWorld(ow: OWMap, nVillages, cmd): void {\n    const bbox = getBoundingBox(ow, cmd);\n    for (let i = 0; i < nVillages; i++) {\n        const xy = findCellRandXYInBox(ow.getMap(), bbox, [OW.TERM]);\n        placeCityFeature(ow, xy);\n    }\n}\n\n/* Adds the cities and settlements to the map based on territories, instead\n * of directly specifying the number of cities etc. */\nfunction addCitiesBasedOnTerritories(ow: OWMap): void {\n    const cityProb = 0.13;\n    const fortProb = 0.09;\n    const terrObj = ow.getTerrMap();\n    const map = terrObj.getMap();\n\n    RG.forEach2D(map, (x: number, y: number) => {\n        const xy = [x, y] as TCoord;\n        const name = terrObj.getRival(xy);\n\n        if (terrObj.hasRival(xy)) {\n            if (RG.isSuccess(cityProb)) {\n                placeCityFeature(ow, xy);\n                const featName = name + '_city';\n                ow.addFeatureData(xy, {type: featName});\n            }\n            else {\n                const box: TCoord[] = Geometry.getBoxAround(x, y, 1);\n                let placed = false;\n                box.forEach((bXY: TCoord) => {\n                    if (!placed && ow.isWallTile(bXY[0], bXY[1])) {\n                        if (RG.isSuccess(fortProb)) {\n                            ow.addFeature(bXY, OW.MFORT);\n                            const featName = name + '_fort';\n                            ow.addFeatureData(bXY, {type: featName});\n                            placed = true;\n                        }\n                    }\n                });\n            }\n        }\n    });\n}\n\nfunction placeCityFeature(ow: OWMap, xy: TCoord): void {\n    if (RG.isSuccess(OW.PROB_BVILLAGE)) {\n        ow.addFeature(xy, OW.BVILLAGE);\n    }\n    else {\n        ow.addFeature(xy, OW.WVILLAGE);\n    }\n}\n\n/* Checks if given cell type matches any in the array. If there's OW.CELL_ANY,\n * in the list, then returns always true regardless of type. */\nfunction cellMatches(type: string, listOrStr): boolean {\n    let list = listOrStr;\n    if (typeof listOrStr === 'string') {\n        list = [listOrStr];\n    }\n    const matchAny = list.indexOf(OW.CELL_ANY);\n    if (matchAny >= 0) {return true;}\n\n    const matchFound = list.indexOf(type);\n    return matchFound >= 0;\n}\n\n/* Finds a random cell of given type from the box of coordinates. listOrStr\n * should contain cells which are allowed. */\nfunction findCellRandXYInBox(map: string[][], bbox: BBox, listOrStr): TCoord {\n    const {ulx, uly, lrx, lry} = bbox;\n\n    let x = ulx === lrx ? ulx : getRNG().getUniformInt(ulx, lrx);\n    let y = lry === uly ? lry : getRNG().getUniformInt(uly, lry);\n    let watchdog = 100 * (lrx - ulx + 1) * (lry - uly + 1);\n\n    let match = cellMatches(map[x][y], listOrStr);\n    while (!match) {\n        x = ulx === lrx ? ulx : getRNG().getUniformInt(ulx, lrx);\n        y = lry === uly ? lry : getRNG().getUniformInt(uly, lry);\n        match = cellMatches(map[x][y], listOrStr);\n        if (watchdog === 0) {\n            const box = `(${ulx},${lry}) -> (${lrx},${uly})`;\n            RG.warn('OverWorld', 'findCellRandXYInBox',\n                `No cells of type ${listOrStr} in ${box}`);\n            break;\n        }\n        --watchdog;\n    }\n    return [x, y];\n}\n\n/* Given location like 'NE' (northeast), and shrink 0 - 1, plus maximum size,\n * returns a random x,y coordinate bounded by these conditions.\n */\nfunction getRandLoc(loc, shrink, sizeX, sizeY): TCoord {\n    let ulx = 0;\n    let lry = 0;\n    let lrx = 0;\n    let uly = 0;\n\n    // Determine the bounding coordinates for random location\n    if (loc.match(/N/)) {\n        uly = 0;\n        lry = Math.floor(shrink * 0.25 * sizeY);\n    }\n    if (loc.match(/S/)) {\n        lry = sizeY - 1;\n        uly = 0.75 * sizeY;\n        uly = Math.floor(uly + (1 - shrink) * (lry - uly));\n    }\n    if (loc.match(/E/)) {\n        lrx = sizeX - 1;\n        ulx = 0.75 * sizeX;\n        ulx = Math.floor(ulx + (1 - shrink) * (lrx - ulx));\n    }\n    if (loc.match(/W/)) {\n        ulx = 0;\n        lrx = Math.floor(shrink * 0.25 * sizeX);\n    }\n\n    return [\n        getRNG().getUniformInt(ulx, lrx),\n        getRNG().getUniformInt(uly, lry)\n    ];\n}\n\n/* Returns a bounding box object of given coordinates. */\nfunction bBox(ulx, lry, lrx, uly) {\n    if (RG.isNullOrUndef([ulx, lry, lrx, uly])) {\n        RG.err('overworld.map.js', 'bBox',\n            `bBox coord(s) undef/null: ${ulx},${lry},${lrx},${uly}`);\n    }\n    return {isBox: true, ulx, lry, lrx, uly};\n}\n\n/* Returns a bounding box (ulx, lry, lrx, uly) based on the command.\n * Formats:\n *   1. cmd: {[x|y]: {start: 'wall'|['wall', Nwall]}}\n *   2.\n * */\n\nfunction getBoundingBox(ow, cmd) {\n    if (cmd.isBox) {\n        return cmd;\n    }\n\n    let xStart = 0;\n    let xEnd = ow.getSizeX() - 1;\n    let yStart = 0;\n    let yEnd = ow.getSizeY() - 1;\n\n    if (cmd.x) {\n        const start = cmd.x.start;\n        const end = cmd.x.end;\n\n        // Find start position for X\n        if (start === 'W') {xStart = 0;}\n        else if (start === 'wall') {\n            const walls = ow.getVWalls();\n            if (walls.length > 0) {\n                xStart = walls[0].x;\n            }\n        }\n        else if (Array.isArray(start)) {\n            if (start[0] === 'wall') {\n                const walls = ow.getVWalls();\n                if (walls.length > start[1]) {\n                    xStart = walls[start[1]].x;\n                }\n            }\n        }\n\n        // Find end position for X\n        if (end === 'E') {xEnd = ow.getSizeX() - 1;}\n        else if (end === 'wall') {\n            const walls = ow.getVWalls();\n            if (walls.length > 0) {\n                xEnd = walls[0].x;\n            }\n        }\n        else if (Array.isArray(end)) {\n            if (end[0] === 'wall') {\n                const walls = ow.getVWalls();\n                if (walls.length > end[1]) {\n                    xEnd = walls[end[1]].x;\n                }\n            }\n        }\n    }\n\n    if (cmd.y) {\n        const start = cmd.y.start;\n        const end = cmd.y.end;\n\n        // Find start position for Y\n        if (start === 'N') {yStart = 0;}\n        else if (start === 'wall') {\n            // Find first horizontal wall\n            const walls = ow.getHWalls();\n            if (walls.length > 0) {\n                yStart = walls[0].y;\n            }\n        }\n        else if (Array.isArray(start)) {\n            if (start[0] === 'wall') {\n                const walls = ow.getHWalls();\n                if (walls.length > start[1]) {\n                    yStart = walls[start[1]].y;\n                }\n            }\n        }\n\n        // Find end position for Y\n        if (end === 'S') {yEnd = ow.getSizeY() - 1;}\n        else if (end === 'wall') {\n            const walls = ow.getHWalls();\n            if (walls.length > 0) {\n                yEnd = walls[0].y;\n            }\n        }\n        else if (Array.isArray(end)) {\n            if (end[0] === 'wall') {\n                const walls = ow.getHWalls();\n                if (walls.length > end[1]) {\n                    yEnd = walls[end[1]].y;\n                }\n            }\n        }\n\n    } // cmd.y\n\n    return {\n        ulx: xStart, lrx: xEnd,\n        uly: yStart, lry: yEnd\n    };\n\n\n}\n\n/* Creates the overworld map and returns the created map. */\nOWMap.createOverWorld = function(conf: OWMapConf = {}): OWMap {\n    const yFirst = typeof conf.yFirst !== 'undefined' ? conf.yFirst : true;\n\n    const topToBottom = typeof conf.topToBottom !== 'undefined'\n        ? conf.topToBottom : true;\n\n    const printResult = typeof conf.printResult !== 'undefined'\n        ? conf.printResult : false;\n\n    // Size of the high-level feature map\n    const owTilesX = conf.owTilesX || 40;\n    const owTilesY = conf.owTilesY || 20;\n    const overworld = new OWMap();\n\n    const owMap = createEmptyMap(owTilesX, owTilesY);\n    randomizeBorders(owMap);\n    addWallsIfAny(overworld, owMap, conf);\n\n    addRandomInnerWalls(overworld, owMap, conf);\n\n    if (topToBottom) {\n        connectUnconnectedTopBottom(owMap, yFirst);\n    }\n    else {\n        connectUnconnectedBottomTop(owMap, yFirst);\n    }\n\n    if (conf.printResult) {\n        RG.printMap(owMap); // For debugging, keep\n    }\n    overworld.setMap(owMap);\n\n    addOverWorldFeatures(overworld, conf);\n\n    // High-level overworld generation ends here\n\n    if (printResult) {\n        RG.log('\\n', overworld.mapToString().join('\\n')); // Print result\n    }\n    return overworld;\n};\n\nOWMap.fromJSON = function(json): OWMap {\n    const ow = new OWMap();\n    ow.setMap(json.baseMap);\n    ow._features = json.features;\n    ow._featuresByXY = json.featuresByXY;\n    ow._vWalls = json.vWalls;\n    ow._hWalls = json.hWalls;\n    ow._biomeMap = json.biomeMap;\n    ow._explored = json.explored;\n    if (json.terrMap) {\n        ow._terrMap = Territory.fromJSON(json.terrMap);\n    }\n    return ow;\n};\n","/*\n * Code to generate the game 2-D overworld. Contains 2nd layer of overworld\n * generation, and uses overworld.map for generating high-level map.\n */\n\n/* bb = bounding box = (ulx uly lrx lry)\n * ulx = upper-left x\n * uly = upper-left y\n * lrx = lower-right x\n * lry = lower-right y\n *\n * Because 0,0 is located in the top-left (NW) corner, uly <= lry, which maybe\n * confusing because 'lower' has higher value than 'upper'. But in this case\n * 'lower' and 'upper' refer to visual location.\n *\n *      (ulx, uly)\n *       |\n *       V\n *    y x0123\n *    0  ####\n *    1  ####\n *    2  #### <-(lrx, lry)\n */\n\nimport RG from './rg';\nimport {Names} from '../data/name-gen';\nimport {LevelGen} from '../data/level-gen';\nimport {Path} from './path';\nimport {Builder} from './builder';\nimport {MapGenerator} from './map.generator';\nimport {OWMap} from './overworld.map';\nimport {OW} from './ow-constants';\nimport {ELEM} from '../data/elem-constants';\nimport {Random} from './random';\nimport {FactoryLevel} from './factory.level';\nimport {Geometry} from './geometry';\nimport * as IF from './interfaces';\nimport {CellMap} from './map';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:overworld');\n\ntype TCoord = IF.TCoord;\ntype Level = import('./level').Level;\ntype Cell = import('./map.cell').Cell;\n\ninterface WorldConf {\n    [key: string]: any;\n}\n//-------------------\n// Variables\n//-------------------\n\nexport const OverWorld: any = {};\n\nconst cityTypesRe = /(capital|city|abandoned fort|fort|village)/;\nconst twoEntranceCityRe = /(dwarven city|abandoned fort|capital)/;\n\nconst MOUNTAIN_TYPE = ELEM.WALL_MOUNT.getType();\n\n// Used in while loops to prevent infinite looping\nconst WATCHDOG_MAX = 111;\n\n// Used for debugging only\nconst playerTileX = 1;\nconst playerTileY = 1;\nconst debugBlackTower = false;\n\n// When set to 1, builds roads between main features. Currently this feature is\n// very slow on large maps.\nlet addMainRoads = false;\n\nconst getRNG = Random.getRNG;\n\nOverWorld.TILE_SIZE_X = 100;\nOverWorld.TILE_SIZE_Y = 100;\nconst {TILE_SIZE_X, TILE_SIZE_Y} = OverWorld;\n\n//---------------------------------------------------------------------------\n// Wall object inside the Overworld. Wall here means a huge wall of mountains.\n//---------------------------------------------------------------------------\nexport class OWWall {\n    public type: string;\n    public coord: TCoord[][];\n\n    constructor(type: string) {\n        this.type = type; // vertical/horizontal/etc\n        this.coord = []; // 2-d array of coordinates\n    }\n\n    public addWallCoord(tile: TCoord[]): void {\n        this.coord.push(tile);\n    }\n\n    public getCoordAt(n: number): TCoord[] {\n        return this.coord[n];\n    }\n\n    /* Returns the y-pos for horizontal and x-pos for vertical walls. */\n    public getWallPos(): number {\n        if (this.type === 'vertical') {\n            return this.coord[0][0][0];\n        }\n        if (this.type === 'horizontal') {\n            return this.coord[0][0][1];\n        }\n        return OW.ILLEGAL_POS;\n    }\n\n    public getWallStart(): number {\n        if (this.type === 'vertical') {\n            return this.coord[0][0][1];\n        }\n        if (this.type === 'horizontal') {\n            return this.coord[0][0][0];\n        }\n        return OW.ILLEGAL_POS;\n    }\n\n    public getWallEnd(): number {\n        const last = this.coord.length - 1;\n        if (this.type === 'vertical') {\n            return this.coord[last][0][1];\n        }\n        if (this.type === 'horizontal') {\n            return this.coord[last][0][0];\n        }\n        return -1;\n    }\n\n    public toString(): string {\n        let str = `type: ${this.type} `;\n        str += `Length: ${this.coord.length}\\n`;\n        str += `Start: ${this.getWallStart()} End: ${this.getWallEnd()}\\n`;\n        str += `Tiles: ${JSON.stringify(this.coord)}`;\n        return str;\n    }\n\n}\n\n//---------------------------------------------------------------------------\n/* Feature has type and a list of coordinates. It can be for example a fort\n * occupying several squares. */\n//---------------------------------------------------------------------------\nexport class OWSubFeature {\n    public type: string;\n    public coord: TCoord[];\n    public cellsAround: {[key: string]: string};\n    public alignment: string;\n\n    constructor(type: string, coord: TCoord[]) {\n        this.type = type;\n        this.coord = coord;\n        this.cellsAround = null;\n\n        if (Array.isArray(coord)) {\n            if (coord.length === 0) {\n                RG.err('OWSubFeature', 'new',\n                    'coord len is 0.');\n            }\n            else if (!Array.isArray(coord[0])) {\n                RG.err('OWSubFeature', 'new',\n                    'Each coord must be [x, y] pair.');\n            }\n        }\n        else {\n            RG.err('OWSubFeature', 'new',\n                'coord must be an array.');\n        }\n    }\n\n    public getLastCoord(): TCoord {\n        if (this.coord.length > 0) {\n            return this.coord[this.coord.length - 1];\n        }\n        return [-1, -1];\n    }\n\n}\n\ninterface OWFeatureMap {[key: string]: OWSubFeature[];}\n//---------------------------------------------------------------------------\n/* Data struct which is tied to 'Level'. Contains more high-level\n * information like positions of walls and other features. Essentially a wrapper\n * around Map.Level, to keep feature creep out of the Map.Level. */\n//---------------------------------------------------------------------------\nexport class OWSubLevel {\n    protected _level: Level;\n    protected _hWalls: OWWall[];\n    protected _vWalls: OWWall[];\n    protected _subX: number;\n    protected _subY: number;\n    protected _features: OWFeatureMap;\n    protected _featuresByXY: {[key: string]: string};\n\n    constructor(level: Level) {\n        this._level = level;\n        this._hWalls = [];\n        this._vWalls = [];\n        this._subX = level.getMap().rows;\n        this._subY = level.getMap().cols;\n\n        // Store any number of different type of features by type\n        this._features = {};\n\n        // Stores one feature per coordinate location\n        this._featuresByXY = {};\n    }\n\n    public getFeatures(): OWFeatureMap {\n        return this._features;\n    }\n\n    public getSubX(): number {\n        return this._subX;\n    }\n\n    public getSubY(): number {\n        return this._subY;\n    }\n\n    public addWall(wall: OWWall): void {\n        if (wall.type === 'vertical') {\n            this._vWalls.push(wall);\n        }\n        else if (wall.type === 'horizontal') {\n            this._hWalls.push(wall);\n        }\n    }\n\n    /* Returns one wall (or null) if none found. */\n    public getWall() {\n        const hLen = this._hWalls.length;\n        const vLen = this._vWalls.length;\n        if (hLen === 0 && vLen === 0) {return null;}\n        if (hLen === 0) {return this._vWalls[0];}\n        if (vLen === 0) {return this._hWalls[0];}\n        RG.warn('OWSubLevel', 'getWall',\n            `Return hor wall. Too many walls: vLen: ${vLen}, hLen: ${hLen}`);\n        return this._hWalls[0];\n    }\n\n    public addFeature(feature: OWSubFeature): void {\n        const type = feature.type;\n        if (!this._features.hasOwnProperty(type)) {\n            this._features[type] = [];\n        }\n        this._features[type].push(feature);\n\n        feature.coord.forEach(xy => {\n            const keyXY = xy[0] + ',' + xy[1];\n            this._featuresByXY[keyXY] = type;\n        });\n    }\n\n    public getFeaturesByType(type) {\n        if (this._features.hasOwnProperty(type)) {\n            return this._features[type];\n        }\n        return [];\n    }\n}\n\n//---------------------------------------------------------------------------\n/* Object to translate coordinates between different maps and levels.\n */\n//---------------------------------------------------------------------------\nexport class CoordMap {\n    public worldCols: number;\n    public worldRows: number;\n    public nTilesX: number;\n    public nTilesY: number;\n    public xMap: number;\n    public yMap: number;\n\n    constructor(args: any = {}) { // TODO typings\n        // Size of the large overworld Map.Level\n        this.worldCols = args.worldCols || 0;\n        this.worldRows = args.worldRows || 0;\n\n        // Number of area tiles per x/y\n        this.nTilesX = args.nTilesX || 0;\n        this.nTilesY = args.nTilesY || 0;\n\n        // How many cols/rows one overworld square is in overworld Map.Level\n        this.xMap = args.xMap || 0;\n        this.yMap = args.yMap || 0;\n    }\n\n    public setXYMap(xMap: number, yMap: number): void {\n        this.xMap = xMap;\n        this.yMap = yMap;\n    }\n\n    public getAreaLevelCols(): number {\n        return this.worldCols / this.nTilesX;\n    }\n\n    public getAreaLevelRows(): number {\n        return this.worldRows / this.nTilesY;\n    }\n\n    public toOwLevelXY(subTileXY: TCoord, subLevelXY: TCoord): TCoord {\n        const x = subTileXY[0] * this.xMap + subLevelXY[0];\n        const y = subTileXY[1] * this.xMap + subLevelXY[1];\n        return [x, y];\n    }\n\n    /**\n     * @param {array[]} areaXY - x,y coord for AreaTile\n     * @param {array[]} areaLevelXY - local x,y coord with AreaTile Map.Level\n     * @return {array[]} - x,y coordinates for overworld tile\n     */\n    public toOWTileXY(areaXY: TCoord, areaLevelXY: TCoord): TCoord {\n        const bbox = this.getOWTileBboxFromAreaTileXY(areaXY[0], areaXY[1]);\n        return [\n            bbox.ulx + Math.floor(areaLevelXY[0] / this.xMap),\n            bbox.uly + Math.floor(areaLevelXY[1] / this.yMap)\n        ];\n    }\n\n    /* Given ow tile x,y, returns AreaTile x,y in which this ow tile x,y\n     * is located in. */\n    public getAreaXYFromOWTileXY(owX: number, owY: number): TCoord {\n        return [\n            Math.floor(owX / this.xMap),\n            Math.floor(owY / this.yMap)\n        ];\n    }\n\n    public getOWTileBboxFromAreaTileXY(aX: number, aY: number): IF.BBox | null {\n        if (Number.isInteger(aX) && Number.isInteger(aY)) {\n            return {\n                ulx: (aX * TILE_SIZE_X) / this.xMap,\n                uly: (aY * TILE_SIZE_Y) / this.yMap,\n                lrx: ((aX + 1) * TILE_SIZE_X) / this.xMap - 1,\n                lry: ((aY + 1) * TILE_SIZE_Y) / this.yMap - 1\n            };\n        }\n        RG.err('OverWorld.CoordMap', 'getOWTileBboxFromAreaTileXY',\n            `Args (x,y) must be ints. Got ${aX}, ${aY}`);\n        return null;\n    }\n\n    public toJSON(): any {\n        return {\n            worldCols: this.worldCols,\n            worldRows: this.worldRows,\n            nTilesX: this.nTilesX,\n            nTilesY: this.nTilesY,\n            xMap: this.xMap,\n            yMap: this.yMap\n        };\n    }\n\n}\nOverWorld.CoordMap = CoordMap;\n\n//---------------------------------------------------------------------------\n// OverWorld FUNCTIONS (Imported)\n//---------------------------------------------------------------------------\n\n/* Factory function to construct the overworld. Generally you want to call this\n * method.\n * @return RG.Map.Level.\n */\nOverWorld.createOverWorld = (conf = {}) => {\n    // 1st generate the high-level map\n    const overworld = OWMap.createOverWorld(conf);\n    // Then use this to generate placement details\n    return OverWorld.createOverWorldLevel(overworld, conf);\n};\n\n/* Creates/returns Map.Level object of overworld, and a configuration to\n * build the features using Factory.World.\n * @return [Map.Level, conf] - Generated level and Factory config\n * */\nOverWorld.createOverWorldLevel = (overworld, conf) => {\n    const coordMap = new CoordMap();\n    coordMap.worldCols = conf.worldX || 400;\n    coordMap.worldRows = conf.worldY || 400;\n\n    coordMap.nTilesX = conf.nTilesX || coordMap.worldCols / TILE_SIZE_X;\n    coordMap.nTilesY = conf.nTilesY || coordMap.worldRows / TILE_SIZE_Y;\n\n    coordMap.xMap = Math.floor(coordMap.worldCols / overworld.getSizeX());\n    coordMap.yMap = Math.floor(coordMap.worldRows / overworld.getSizeY());\n\n    overworld.coordMap = coordMap;\n\n    addMainRoads = conf.addMainRoads || addMainRoads;\n\n    const worldLevelAndConf = buildMapLevel(overworld, coordMap);\n    return worldLevelAndConf;\n};\n\n//---------------------------------------------------------------------------\n// Private FUNCTIONS\n//---------------------------------------------------------------------------\n\n/* Creates the overworld level. Returns RG.Map.Level + conf object. */\nfunction buildMapLevel(ow, coordMap): [Level, WorldConf] {\n    const {worldCols, worldRows, xMap, yMap, nTilesX, nTilesY} = coordMap;\n\n    const sizeX = ow.getSizeX();\n    const sizeY = ow.getSizeY();\n    const factLevel = new FactoryLevel();\n    const owLevel = factLevel.createLevel(RG.LEVEL_EMPTY, worldCols, worldRows);\n    /*const owLevel = factLevel.createLevel(RG.LEVEL_EMPTY, worldCols, worldRows);\n    const levelMap = CellMap.createWithoutCells(worldCols, worldRows);\n    owLevel.setMap(levelMap);\n    */\n\n    // Build the overworld level in smaller pieces, and then insert the\n    // small levels into the large level.\n    // Each overworld tile is mapped to map sub Map.Level\n    for (let x = 0; x < sizeX; x++) {\n        for (let y = 0; y < sizeY; y++) {\n            const subLevel = createSubLevel(ow, x, y, xMap, yMap);\n            const x0 = x * xMap;\n            const y0 = y * yMap;\n            Geometry.mergeLevels(owLevel, subLevel, x0, y0);\n            // Geometry.mergeMapCellsUnsafe(owLevel, subLevel, x0, y0);\n        }\n    }\n\n    const conf: WorldConf = OverWorld.createWorldConf(ow,\n        sizeX, sizeY, nTilesX, nTilesY);\n\n    // Some global features (like roads) need to be added\n    addGlobalFeatures(ow, owLevel, conf, coordMap);\n\n    return [owLevel, conf];\n}\n\n/* Returns a subLevel created based on the tile type. */\nfunction createSubLevel(ow: OWMap, owX, owY, xMap, yMap): Level {\n    const owMap: string[][] = ow.getMap();\n    const type: string = owMap[owX][owY];\n    const biomeType: string = ow.getBiome(owX, owY);\n\n    const subX = xMap;\n    const subY = yMap;\n    const factLevel = new FactoryLevel();\n    const subLevel = factLevel.createLevel(RG.LEVEL_EMPTY, subX, subY);\n    addBiomeFeaturesSubLevel(biomeType, subLevel);\n\n    const owSubLevel = new OWSubLevel(subLevel);\n    ow.addSubLevel([owX, owY], owSubLevel);\n\n    addSubLevelWalls(type, owSubLevel, subLevel);\n\n    // TODO Add other features such as cities, dungeons etc to the level.\n    addSubLevelFeatures(ow, owX, owY, subLevel);\n\n    return subLevel;\n}\n\n\nfunction addBiomeFeaturesSubLevel(biomeType: string, subLevel: Level): void {\n    const cols = subLevel.getMap().cols;\n    const rows = subLevel.getMap().rows;\n    const addLakes = getRNG().getUniform();\n\n    if (biomeType === 'arctic') {\n        MapGenerator.addRandomSnow(subLevel.getMap(), 1.0);\n    }\n    else if (biomeType === 'alpine') {\n        MapGenerator.addRandomSnow(subLevel.getMap(), 0.5);\n        if (addLakes < 0.1) {\n            const mapGen = new MapGenerator();\n            mapGen.setGen('lakes', cols, rows);\n            const lakeConf = {ratio: 0.15, freeOnly: true};\n            mapGen.addLakesToMap(subLevel.getMap(), lakeConf);\n        }\n    }\n    else if (biomeType === 'tundra') {\n        MapGenerator.addRandomSnow(subLevel.getMap(), 0.1);\n        // Add some water\n        if (addLakes < 0.2) {\n            const mapGen = new MapGenerator();\n            mapGen.setGen('lakes', cols, rows);\n            const lakeConf = {ratio: 0.3, freeOnly: true};\n            mapGen.addLakesToMap(subLevel.getMap(), lakeConf);\n        }\n    }\n    else if (biomeType === 'taiga' || biomeType === 'forest') {\n        const forestConf = {\n            ratio: 0.6, freeOnly: true\n        };\n        const mapGen = new MapGenerator();\n        mapGen.setGen('forest', cols, rows);\n        mapGen.addForestToMap(subLevel.getMap(), forestConf);\n\n        // Add some water\n        if (addLakes < 0.3) {\n            mapGen.setGen('lakes', cols, rows);\n            const lakeConf = {ratio: 0.4, freeOnly: true};\n            mapGen.addLakesToMap(subLevel.getMap(), lakeConf);\n        }\n    }\n    else if (biomeType === 'grassland') {\n        const conf = {ratio: 0.1};\n        const mapGen = new MapGenerator();\n        mapGen.setGen('forest', cols, rows);\n        mapGen.addForestToMap(subLevel.getMap(), conf);\n    }\n\n}\n\n/* Adds the \"mountain\" walls into the overworld subLevel and the RG.Map.Level\n * sublevel. */\nfunction addSubLevelWalls(type: string, owSubLevel: OWSubLevel, subLevel: Level) {\n    const map = subLevel.getMap();\n\n    const canConnectNorth = OW.N_HAS_CONN.findIndex(item => item === type) >= 0;\n    const canConnectSouth = OW.S_HAS_CONN.findIndex(item => item === type) >= 0;\n    const canConnectEast = OW.E_HAS_CONN.findIndex(item => item === type) >= 0;\n    const canConnectWest = OW.W_HAS_CONN.findIndex(item => item === type) >= 0;\n\n    const subX = map.cols;\n    const subY = map.rows;\n\n    const midX = Math.floor(subX / 2);\n    const midY = Math.floor(subY / 2);\n\n    const MEAN_WX = 5;\n    const MEAN_WY = 5;\n    const STDDEV_W = 3;\n    let width = null;\n\n    let startY = -1;\n    let endY = -1;\n    if (canConnectNorth && canConnectSouth) {\n        startY = 0;\n        endY = subY - 1;\n    }\n    else if (canConnectNorth) {\n        startY = 0;\n        endY = midY - 1;\n    }\n    else if (canConnectSouth) {\n        startY = midY;\n        endY = subY - 1;\n    }\n\n    let widths = getWidthMovingAvg(endY + 1, MEAN_WX, STDDEV_W, subX, 3);\n    // Draw line from center to north\n    if (canConnectNorth || canConnectSouth) {\n        const wall = new OWWall('vertical');\n        for (let y = startY; y <= endY; y++) {\n            width = widths[y - startY];\n            const tile = [];\n            if (width === 1) {width = MEAN_WX;}\n            for (let x = midX - (width - 1); x <= midX + (width - 1); x++) {\n                map.setBaseElemXY(x, y, ELEM.WALL_MOUNT);\n                tile.push([x, y]);\n            }\n            // map.setBaseElems(tile, ELEM.WALL_MOUNT);\n            wall.addWallCoord(tile);\n        }\n        owSubLevel.addWall(wall);\n    }\n\n    let startX = -1;\n    let endX = -1;\n    if (canConnectEast && canConnectWest) {\n        startX = 0;\n        endX = subX - 1;\n    }\n    else if (canConnectEast) {\n        startX = midX;\n        endX = subX - 1;\n    }\n    else if (canConnectWest) {\n        startX = 0;\n        endX = midX - 1;\n    }\n\n    widths = getWidthMovingAvg(endX + 1, MEAN_WY, STDDEV_W, subX, 3);\n    if (canConnectEast || canConnectWest) {\n        const wall = new OWWall('horizontal');\n        for (let x = startX; x <= endX; x++) {\n            width = widths[x - startX];\n            const tile = [];\n            if (width === 1) {width = MEAN_WY;}\n            for (let y = midY - (width - 1); y <= midY + (width - 1); y++) {\n                map.setBaseElemXY(x, y, ELEM.WALL_MOUNT);\n                tile.push([x, y]);\n            }\n            // map.setBaseElems(tile, ELEM.WALL_MOUNT);\n            wall.addWallCoord(tile);\n        }\n        owSubLevel.addWall(wall);\n    }\n\n}\n\nfunction getWallWidth(mean, stddev, subSize) {\n    let width = Math.floor(getRNG().getNormal(mean, stddev));\n    // width = Math.floor(width + coeff * width);\n\n    if (width > subSize / 2) {\n        width = subSize / 2 - 1;\n    }\n    else if (width < 1) {\n        width = 1;\n    }\n    return width;\n}\n\n/* Gets the width using moving average algorithm. */\nfunction getWidthMovingAvg(nElem, mean, stddev, subSize, filterW) {\n    const unfiltered = [];\n    for (let i = 0; i < nElem; i++) {\n        unfiltered.push(getWallWidth(mean, stddev, subSize));\n    }\n\n    const filtered = [];\n    for (let i = 0; i < filterW; i++) {\n        filtered.push(unfiltered[i]);\n    }\n\n    // Filter array with algorith\n    for (let i = filterW; i < (nElem - filterW); i++) {\n        const filtVal = getFiltered(unfiltered, i, filterW);\n        filtered.push(filtVal);\n    }\n\n    for (let i = (nElem - filterW); i < nElem; i++) {\n        // Hack for now, find correct solution\n        if (filtered.length < unfiltered.length) {\n            filtered.push(unfiltered[i]);\n        }\n    }\n\n    return filtered;\n}\n\nfunction getFiltered(arr, i, filterW) {\n    const num = 2 * filterW + 1;\n    let sum = 0;\n    for (let n = i - filterW; n <= i + filterW; n++) {\n        sum += arr[n];\n    }\n    return Math.floor(sum / num);\n}\n\n/* Monster of a function. Has to add all possible features. */\nfunction addSubLevelFeatures(\n    ow: OWMap, owX: number, owY: number, subLevel: Level\n): void {\n    const xy: TCoord = [owX, owY];\n    const owSubLevel = ow.getSubLevel(xy);\n    const features: string[] = ow.getFeaturesByXY(xy);\n    const base: string = ow.getCell(xy);\n\n    if (!features) {return;}\n\n    let numSkipped = 0;\n    features.forEach((feat: string) => {\n        if (feat === OW.WCAPITAL) {\n            addMountainFortToSubLevel(feat, owSubLevel, subLevel);\n        }\n        else if (isMountainFort(base, feat)) {\n            addMountainFortToSubLevel(feat, owSubLevel, subLevel);\n        }\n        else if (feat === OW.BTOWER || feat === OW.WTOWER) {\n            addTowerToSubLevel(feat, owSubLevel, subLevel);\n        }\n        else if (feat === OW.WDUNGEON) {\n            addDungeonToSubLevel(owSubLevel, subLevel);\n        }\n        else if (feat === OW.WVILLAGE) {\n            addVillageToSubLevel(feat, owSubLevel, subLevel);\n        }\n        else if (feat === OW.MOUNTAIN) {\n            addMountainToSubLevel(owSubLevel, subLevel);\n        }\n        else if (feat === OW.VTUNNEL) {\n            addVertTunnelToSubLevel(owSubLevel, subLevel);\n        }\n        else if (feat === OW.MFORT) {\n            addFortToSubLevel(owSubLevel, subLevel);\n        }\n        else {\n            const msg = `Base: ${base}, ${feat}`;\n            debug('addSubLevelFeat Skipped: ' + msg);\n            ++numSkipped;\n        }\n    });\n\n    if (numSkipped > 0) {\n        debug(`Skipped ${numSkipped} features in addSubLevelFeatures`);\n    }\n}\n\nfunction isMountainFort(base: string, feat: string): boolean {\n    return (base === OW.LL_WE || base === OW.LL_NS) &&\n        (feat === OW.BTOWER || feat === OW.WTOWER);\n}\n\n/* Creates a fort which goes through a mountain wall. Adds also fort elements\n * into the Map.Level. */\nfunction addMountainFortToSubLevel(\n    feat: string, owSubLevel: OWSubLevel, subLevel: Level\n): void {\n    const wall = owSubLevel.getWall();\n    const start = wall.getWallStart();\n    const end = wall.getWallEnd();\n    const randPos = getRNG().getUniformInt(start, end);\n    const coord = wall.getCoordAt(randPos);\n\n    let type = null;\n    switch (feat) {\n        case OW.WTOWER: type = 'dwarven city'; break;\n        case OW.BTOWER: type = 'abandoned fort'; break;\n        case OW.WCAPITAL: type = 'capital'; break;\n        case OW.BCAPITAL: type = 'dark city'; break;\n        default: RG.err('overworld.js', 'addMountainFortToSubLevel',\n            `Type ${feat} not supported`);\n    }\n\n    // Tile is a list of x,y coordinates\n    subLevel.getMap().setBaseElems(coord, ELEM.FORT);\n    const fort = new OWSubFeature(type, coord);\n    fort.alignment = getAlignment(feat);\n    owSubLevel.addFeature(fort);\n}\n\nfunction addTowerToSubLevel(\n    feat: string, owSubLevel: OWSubLevel, subLevel: Level\n): void {\n    let placed = false;\n    const freeCells = subLevel.getMap().getFree();\n    const freeXY: TCoord[] = freeCells.map(cell => cell.getXY());\n    let coord = [];\n\n    let watchdog = WATCHDOG_MAX;\n    while (coord.length !== 9) {\n        if (Geometry.getFreeArea(freeXY, 3, 3, coord)) {\n            placed = true;\n        }\n        if (coord.length < 9) {\n            debug('addTowerToSubLevel. Too few coords. Retrying.');\n            placed = false;\n            coord = [];\n        }\n        if (--watchdog <= 0) {\n            break;\n        }\n    }\n\n    const type = feat === OW.BTOWER ? 'blacktower' : 'whitetower';\n\n    if (placed) {\n        debug('addTowerToSubLevel feat placed with ' +\n            JSON.stringify(coord));\n        subLevel.getMap().setBaseElems(coord, ELEM.FORT);\n        const tower = new OWSubFeature(type, coord);\n        tower.alignment = getAlignment(feat);\n        owSubLevel.addFeature(tower);\n    }\n\n}\n\n/* Returns the alignment for the given feature. */\nfunction getAlignment(feat: string): string {\n    switch (feat) {\n        case OW.BCAPITAL: // fallthrough\n        case OW.BTOWER: // fallthrough\n        case OW.BVILLAGE: return RG.ALIGN_EVIL;\n        case OW.WCAPITAL: // fallthrough\n        case OW.WTOWER: // fallthrough\n        case OW.WVILLAGE: return RG.ALIGN_GOOD;\n        default: return RG.ALIGN_NEUTRAL;\n    }\n}\n\n/* Adds a dungeon to given sub-level. Each dungeon must be adjacent to a\n * mountain.*/\nfunction addDungeonToSubLevel(owSubLevel: OWSubLevel, subLevel: Level) {\n    const coord = getAccessibleMountainCoord(subLevel);\n    if (coord && coord.length > 0) {\n        const dungeon = new OWSubFeature('dungeon', coord);\n        owSubLevel.addFeature(dungeon);\n    }\n}\n\nfunction addFortToSubLevel(owSubLevel: OWSubLevel, subLevel: Level) {\n    const coord: TCoord[] = getAccessibleMountainCoord(subLevel, false);\n    if (coord && coord.length > 0) {\n        const [x, y] = coord[0];\n        const coordAround: TCoord[] = Geometry.getBoxAround(x, y, 1);\n        const map = subLevel.getMap();\n        const cellsAround: Cell[] = map.getCellsWithCoord(coordAround);\n\n        const fort = new OWSubFeature('fort', coord);\n        const cellMap = {};\n        cellsAround.forEach(c => {\n            const dXdY = RG.dXdYUnit(c, coord[0]);\n            const dir = RG.dXdYToDir(dXdY);\n            cellMap[dir] = c.getBaseElem().getType();\n        });\n        fort.cellsAround = cellMap;\n        owSubLevel.addFeature(fort);\n    }\n}\n\nfunction getAccessibleMountainCoord(subLevel: Level, edges = true): TCoord[] {\n    let placed = false;\n    const map = subLevel.getMap();\n    const freeCells = map.getFree();\n    let freeXY = freeCells.map(cell => cell.getXY());\n\n    if (!edges) {\n        const {cols, rows} = map;\n        freeXY = freeXY.filter(xy => (\n            (xy[0] !== 0 && xy[0] !== (cols - 1)) &&\n            (xy[1] !== 0 && xy[1] !== (rows - 1))\n        ));\n    }\n\n    // Sometimes no free cells are found, just skip this\n    if (freeXY.length === 0) {\n        return null;\n    }\n\n    let coord = [];\n    let watchdog = 10 * WATCHDOG_MAX;\n    while (!placed) {\n        const xyRand = getRNG().arrayGetRand(freeXY);\n        let box: TCoord[] = [];\n        try {\n            box = Geometry.getBoxAround(xyRand[0], xyRand[1], 1);\n        }\n        catch (e) {\n            RG.diag(e);\n            RG.diag(freeXY);\n            map.debugPrintInASCII();\n        }\n\n        if (!edges) {\n            const {cols, rows} = map;\n            box = box.filter(xy => (\n                (xy[0] !== 0 && xy[0] !== (cols - 1)) &&\n                (xy[1] !== 0 && xy[1] !== (rows - 1))\n            ));\n        }\n\n        /* eslint-disable */\n        box.forEach((xyBox: TCoord) => {\n            if (!placed) {\n                if (map.hasXY(xyBox[0], xyBox[1])) {\n                    const elem = map.getBaseElemXY(xyBox[0], xyBox[1]);\n                    if (elem.getType() === MOUNTAIN_TYPE) {\n                        coord = [xyBox];\n                        placed = true;\n                        map.setBaseElemXY(xyBox[0], xyBox[1], ELEM.FLOOR);\n                    }\n                }\n            }\n        });\n        /* eslint-enable */\n\n        if (--watchdog <= 0) {\n            break;\n        }\n    }\n    return coord;\n}\n\n/* Adds a mountain to the given sub-level. Each mountain is placed on free map\n * cell. */\nfunction addMountainToSubLevel(owSubLevel: OWSubLevel, subLevel: Level) {\n    let placed = false;\n    const map = subLevel.getMap();\n    const freeCells = map.getFreeNotOnEdge();\n    const freeXY = freeCells.map(cell => [cell.getX(), cell.getY()]);\n\n    // Sometimes no free cells are found, just skip this\n    if (freeXY.length === 0) {\n        return;\n    }\n\n    let coord = [];\n    let watchdog = 10 * WATCHDOG_MAX;\n    while (!placed) {\n        const xy = getRNG().arrayGetRand(freeXY);\n        coord = [xy];\n        placed = true;\n        if (--watchdog <= 0) {\n            break;\n        }\n    }\n\n    if (placed) {\n        const mountain = new OWSubFeature('mountain', coord);\n        owSubLevel.addFeature(mountain);\n    }\n\n}\n\n/* This creates a tunnel through mountain wall. This cannot fail, otherwise game\n * is unplayable. */\nfunction addVertTunnelToSubLevel(owSubLevel, subLevel: Level) {\n    const map = subLevel.getMap();\n    const cols = map.cols;\n    const tunnelX = getRNG().getUniformInt(0, cols - 1);\n    for (let y = 0; y < map.rows; y++) {\n        map.setBaseElemXY(tunnelX, y, ELEM.FLOOR);\n    }\n    // map.debugPrintInASCII();\n}\n\n/* Adds a village to the free square of the sub-level. */\nfunction addVillageToSubLevel(feat, owSubLevel: OWSubLevel, subLevel: Level) {\n    const map: CellMap = subLevel.getMap();\n    const freeCells: Cell[] = map.getFreeNotOnEdge();\n\n    if (freeCells.length > 0) {\n        const freeXY: TCoord[] = freeCells.map(cell => cell.getXY());\n        const coord: TCoord = getRNG().arrayGetRand(freeXY);\n        const village = new OWSubFeature('village', [coord]);\n        village.alignment = getAlignment(feat);\n        owSubLevel.addFeature(village);\n    }\n    else {\n        RG.err('overworld.js', 'addVillageToSubLevel',\n            'No free cells found in the level.');\n    }\n}\n\n\n/* Creates a world configuration which can be given to Factory.World to build\n * the final game overworld with features, actors and items.\n *\n * Maps an MxN array of sub-levels (each |subX| X |subY| Map.Cells) into\n * |nTilesX| X |nTilesY| array of World.AreaTile levels (Map.Level).\n * Both levels are RG.Map.Level objects.\n */\nOverWorld.createWorldConf = function(\n    ow, nSubLevelsX, nSubLevelsY, nTilesX, nTilesY\n) {\n    const worldConf = {\n        name: 'The North',\n        nAreas: 1,\n        area: [{\n            name: 'The Northern Realm',\n            maxX: nTilesX, maxY: nTilesY,\n            biome: {},\n            dungeon: [],\n            mountain: [],\n            city: [],\n            nDungeons: 0,\n            nMountains: 0,\n            nCities: 0\n        }]\n    };\n    const areaConf = worldConf.area[0];\n\n    // const nSubLevelsX = subLevels.length;\n    // const nSubLevelsY = subLevels[0].length;\n    if (!nSubLevelsX || !nSubLevelsY) {\n        const msg = `levels in X: ${nSubLevelsX}, Y: ${nSubLevelsY}`;\n        RG.err('OverWorld', 'createWorldConf',\n            `Illegal num of sublevels: ${msg}`);\n    }\n\n    const xMap = nSubLevelsX / nTilesX; // SubLevels per tile level in x-dir\n    const yMap = nSubLevelsY / nTilesY; // SubLevels per tile level in y-dir\n\n    debug(`nSubLevelsX: ${nSubLevelsX}, nTilesX: ${nTilesX}`);\n    debug(`nSubLevelsY: ${nSubLevelsY}, nTilesY: ${nTilesY}`);\n    debug(`MapX: ${xMap} levels to one tile`);\n    debug(`MapY: ${yMap} levels to one tile`);\n\n    // if xMap/yMap not integers, mapping will be wrong, thus we cannot round\n    // the map values, just throw error\n    if (!Number.isInteger(xMap)) {\n        RG.err('OverWorld', 'createWorldConf',\n            `xMap not int: ${xMap}, ` +\n            `sub X :${nSubLevelsX}, nTilesX: ${nTilesX}`);\n    }\n    if (!Number.isInteger(yMap)) {\n        RG.err('OverWorld', 'createWorldConf',\n            `yMap not int: ${yMap}, ` +\n            `sub Y :${nSubLevelsY}, nTilesY: ${nTilesY}`);\n    }\n\n\n    // Map values are OK, this loops through smaller overworld sublevels, which\n    // are aligned with the large mountain wall creation\n    for (let x = 0; x < nSubLevelsX; x++) {\n        for (let y = 0; y < nSubLevelsY; y++) {\n\n            // Find sub-level (Map.Level) indices + area level indices\n            const slX = x % xMap;\n            const slY = y % yMap;\n\n            // AreaTile x,y pointing tile in the M by N AreaTiles\n            const aX = Math.floor(x / xMap);\n            const aY = Math.floor(y / yMap);\n\n            const subLevel = ow.getSubLevel([x, y]);\n            const subX = subLevel.getSubX();\n            const subY = subLevel.getSubY();\n\n            const coordObj = {xMap, yMap, nSubLevelsX, nSubLevelsY,\n                x, y, slX, slY, aX, aY, subLevel, subX, subY};\n\n            const [pX, pY] = getPlayerPosition(coordObj);\n            const features: OWFeatureMap = subLevel.getFeatures();\n\n            Object.keys(features).forEach(type => {\n                const featureArray: OWSubFeature[] = features[type];\n                featureArray.forEach((feat: OWSubFeature) => {\n                    const coord: TCoord[] = feat.coord;\n\n                    if (!coord) {\n                        RG.err('OverWorld', 'createWorldConf',\n                            `coord must exist. feat: ${JSON.stringify(feat)}`);\n                    }\n\n                    if (feat.type === 'capital') {\n                        addCapitalConfToArea(feat, coordObj, areaConf);\n                    }\n                    else if (feat.type === 'dwarven city') { // WTOWER\n                        addDwarvenCityConfToArea(feat, coordObj, areaConf);\n                    }\n                    else if (feat.type === 'abandoned fort') {\n                        addAbandonedFortToArea(feat, coordObj, areaConf);\n                    }\n                    else if (feat.type === 'dark city') {\n                        addCityConfToArea(feat, coordObj, areaConf);\n                    }\n                    else if (cityTypesRe.test(feat.type)) {\n                        addCityConfToArea(feat, coordObj, areaConf);\n                    }\n                    else if (feat.type === 'dungeon') {\n                        const coordD = feat.coord;\n\n                        let featX = mapX(coordD[0][0], slX, subX);\n                        let featY = mapY(coordD[0][1], slY, subY);\n                        [featX, featY] = legalizeXY([featX, featY]);\n                        const dName = Names.getGenericPlaceName('dungeon');\n\n                        const dungeonConf = LevelGen.getDungeonConf(dName);\n                        Object.assign(dungeonConf,\n                            {x: aX, y: aY, levelX: featX, levelY: featY,\n                                owX: x, owY: y});\n                        areaConf.nDungeons += 1;\n                        addMaxDangerAndValue(pX, pY, dungeonConf);\n                        areaConf.dungeon.push(dungeonConf);\n                    }\n                    else if (feat.type === 'mountain') {\n                        const coordM = feat.coord;\n\n                        const featX = mapX(coordM[0][0], slX, subX);\n                        const featY = mapY(coordM[0][1], slY, subY);\n                        const mName = Names.getUniqueName('mountain');\n\n                        const mountConf = LevelGen.getMountainConf(mName);\n                        Object.assign(mountConf,\n                            {x: aX, y: aY, levelX: featX, levelY: featY,\n                                owX: x, owY: y\n                            });\n                        addMaxDangerAndValue(pX, pY, mountConf);\n                        areaConf.nMountains += 1;\n                        areaConf.mountain.push(mountConf);\n                    }\n                    else if (feat.type === 'blacktower') {\n                        debug('Adding final blacktower now');\n                        addBlackTowerConfToArea(feat, coordObj, areaConf);\n                    }\n                });\n            });\n        }\n    }\n\n    addBiomeLocations(ow, areaConf);\n    return worldConf;\n};\n\n/* Adds maxDanger and maxValue props into the configuration. At the moment, this\n * is based on the distance from player (+ plus some randomisation). */\nfunction addMaxDangerAndValue(pX: number, pY: number, zoneConf): void {\n    const {x, y} = zoneConf;\n    const dX = Math.abs(pX - x);\n    const dY = Math.abs(pY - y);\n    zoneConf.maxDanger = RG.getMaxDanger(dX, dY);\n    zoneConf.maxValue = RG.getMaxValue(dX, dY);\n\n    if (getRNG().getUniform() <= RG.EPIC_PROB) {\n        zoneConf.isEpic = true;\n        zoneConf.maxDanger *= 2;\n        zoneConf.maxValue *= 3;\n    }\n}\n\n/* Maps an x coord in a sub-level (Map.Level) into an x-y coordinate in\n * an AreaTile.\n * slX = sub-level x index in area tile. For example:\n * Assuming we have a matrix 3x3 of 10x10 sub-levels. Our area tile is now\n * 30x30. slX points then to x-pos of 3x3 matrix.\n */\nfunction mapX(x: number, slX: number, subSizeX: number): number {\n    if (Number.isInteger(x)) {\n        const res = x + slX * subSizeX;\n        if (res >= TILE_SIZE_X) {\n            console.warn(`WARNING mapX: ${res}, ${x}, ${slX}, ${subSizeX}`);\n        }\n        return res;\n    }\n    else {\n        RG.err('overworld.js', 'mapX',\n            `x must be an integer. Got: ${x}`);\n    }\n    return null;\n}\n\n/* Maps an y coord in a sub-level (Map.Level) into an x-y coordinate in\n * an AreaTile.\n * slY = sub-level y index in area tile. For longer expl, see mapY() above.\n */\nfunction mapY(y, slY, subSizeY): number {\n    if (Number.isInteger(y)) {\n        return y + slY * subSizeY;\n    }\n    else {\n        RG.err('overworld.js', 'mapY',\n            `y must be an integer. Got: ${y}`);\n    }\n    return null;\n}\n\nfunction addCapitalConfToArea(feat: OWSubFeature, coordObj, areaConf) {\n    const capitalLevel = {stub: true, new: 'Capital', args: [200, 500, {}]};\n    const cityConf: IF.CityConf = {\n        name: 'Blashyrkh',\n        nQuarters: 1,\n        quarter: [{name: 'Capital cave', nLevels: 1}],\n        owX: coordObj.x,\n        owY: coordObj.y\n    };\n\n    cityConf.presetLevels = {\n        'Blashyrkh.Capital cave': [{nLevel: 0, level: capitalLevel}]\n    };\n    addLocationToZoneConf(feat, coordObj, cityConf);\n\n    const mainConn = {\n        name: 'Capital cave',\n        levelX: cityConf.levelX,\n        levelY: cityConf.levelY,\n        nLevel: 0,\n        stairs: {getStairs: 1}\n    };\n\n    cityConf.connectToAreaXY[0].stairs = {getStairs: 0};\n    cityConf.connectToAreaXY.push(mainConn);\n    areaConf.nCities += 1;\n    areaConf.city.push(cityConf);\n}\n\nfunction addDwarvenCityConfToArea(feat: OWSubFeature, coordObj, areaConf) {\n    const fortConf = {};\n    const dwarvenCity = {stub: true, new: 'DwarvenCity',\n        args: [300, 250, fortConf]};\n    const cityConf: IF.CityConf = {\n        name: 'Dwarven City',\n        nQuarters: 1,\n        quarter: [{name: 'Fort main level', nLevels: 1}],\n        owX: coordObj.x,\n        owY: coordObj.y\n    };\n    cityConf.presetLevels = {\n        'Dwarven City.Fort main level': [{nLevel: 0, level: dwarvenCity}]\n    };\n\n    addLocationToZoneConf(feat, coordObj, cityConf);\n    const mainConn = {\n        name: 'Fort main level',\n        levelX: cityConf.levelX,\n        levelY: cityConf.levelY,\n        nLevel: 0,\n        stairs: {getStairs: 1}\n    };\n\n    cityConf.connectToAreaXY[0].stairs = {getStairs: 0};\n    cityConf.connectToAreaXY.push(mainConn);\n    areaConf.nCities += 1;\n    areaConf.city.push(cityConf);\n}\n\nfunction addAbandonedFortToArea(feat: OWSubFeature, coordObj, areaConf) {\n    const fortConf = {};\n    const fortLevel = {stub: true, new: 'AbandonedFort',\n        args: [500, 200, fortConf]};\n    const cityConf: IF.CityConf = {\n        name: 'Abandoned fort',\n        nQuarters: 1,\n        quarter: [{name: 'Fort ground level', nLevels: 1}],\n        owX: coordObj.x,\n        owY: coordObj.y\n    };\n\n    cityConf.presetLevels = {\n        'Abandoned fort.Fort ground level': [{nLevel: 0, level: fortLevel}]\n    };\n    addLocationToZoneConf(feat, coordObj, cityConf, false);\n    const mainConn = {\n        name: 'Fort ground level',\n        levelX: cityConf.levelX,\n        levelY: cityConf.levelY,\n        nLevel: 0,\n        stairs: {getStairs: 0}\n    };\n\n    cityConf.connectToAreaXY[0].stairs = {getStairs: 1};\n    cityConf.connectToAreaXY.push(mainConn);\n    areaConf.nCities += 1;\n    areaConf.city.push(cityConf);\n\n}\n\n/* Adds a (normal) city configuration to the area. */\nfunction addCityConfToArea(feat: OWSubFeature, coordObj, areaConf) {\n    const coord = feat.coord;\n    // const nLevels = coord.length;\n    // feat.nLevels = nLevels;\n\n    const cName = Names.getUniqueName('city');\n    const cityConf = LevelGen.getCityConf(cName, feat);\n    cityConf.owX = coordObj.x;\n    cityConf.owY = coordObj.y;\n\n    cityConf.groupType = feat.type;\n    addLocationToZoneConf(feat, coordObj, cityConf);\n    cityConf.alignment = feat.alignment\n        || getRNG().arrayGetRand(RG.ALIGNMENTS);\n\n    if (feat.cellsAround) {\n        if (!cityConf.constraint) {cityConf.constraint = {};}\n        cityConf.constraint.cellsAround = feat.cellsAround;\n    }\n\n    areaConf.nCities += 1;\n    areaConf.city.push(cityConf);\n\n}\n\n/* Adds location info the zone config. This info specifies where the zone is\n * located in the overworld map. */\nfunction addLocationToZoneConf(feat, coordObj, zoneConf, vert = true) {\n    const {slX, slY, aX, aY, subX, subY} = coordObj;\n    const coord = feat.coord;\n    const nLevels = coord.length;\n    const lastCoord = nLevels - 1;\n\n    // Where 1st (main) entrance is located on Map.Level\n    let featX = mapX(coord[lastCoord][0], slX, subX);\n    let featY = mapY(coord[lastCoord][1], slY, subY);\n    if (!vert) {\n      featX = mapX(coord[0][0], slX, subX) - 1;\n      featY = mapY(coord[0][1], slY, subY);\n    }\n    if (featY >= TILE_SIZE_Y) {\n        // const msg = `subXY ${x},${y}, tileXY: ${aX},${aY}`;\n        featY -= 1;\n    }\n\n    // Extra connection because fort has 2 exits/entrances\n    // Where 2nd (exit) entrance is located on Map.Level\n    if (twoEntranceCityRe.test(feat.type)) {\n        let connX = mapX(coord[0][0], slX, subX);\n        let connY = mapY(coord[0][1], slY, subY);\n        if (!vert) {\n          connX = mapX(coord[lastCoord][0], slX, subX) + 1;\n          connY = mapY(coord[lastCoord][1], slY, subY);\n        }\n        const nLast = zoneConf.nQuarters - 1;\n\n        zoneConf.connectToAreaXY = [{\n            name: zoneConf.quarter[nLast].name,\n            levelX: connX,\n            levelY: connY,\n            nLevel: 0\n        }];\n    }\n\n    zoneConf.x = aX;\n    zoneConf.y = aY;\n    zoneConf.levelX = featX;\n    zoneConf.levelY = featY;\n    debug(`Feat: ${feat.type}, ${aX},${aY} : ${featX},${featY}`);\n\n}\n\n/* Adds the black tower configuration to area. */\nfunction addBlackTowerConfToArea(feat, coordObj, areaConf) {\n    const {slX, slY, aX, aY, subX, subY} = coordObj;\n    const coord = feat.coord;\n\n    const xy = coord[7];\n    if (RG.isNullOrUndef([xy])) {\n        const msg = 'xy null/undef. feat: ' + JSON.stringify(feat);\n        RG.err('overworld.js', 'addBlackTowerConfToArea', msg);\n    }\n    const featX = mapX(xy[0], slX, subX);\n    const featY = mapY(xy[1], slY, subY);\n    const tName = 'Elder raventhrone';\n\n    const dungeonConf = LevelGen.getDungeonConf(tName);\n    if (debugBlackTower) {\n        debug(`BlackTower: Placing to player position.`);\n        addToPlayerPosition(dungeonConf, coordObj);\n    }\n    else {\n        Object.assign(dungeonConf,\n            {x: aX, y: aY, levelX: featX, levelY: featY});\n    }\n    debug(`BlackTower: ${aX},${aY}, x,y ${featX},${featY}`);\n\n    dungeonConf.connectEdges = true;\n    dungeonConf.branch[0].entranceLevel = 0;\n    dungeonConf.branch[0].nLevels = 5;\n    const nLastLevel = dungeonConf.branch[0].nLevels - 1;\n    dungeonConf.branch[0].createPresetLevels = {\n        new: 'BlackTower',\n        args: [180, 90]\n    };\n\n    dungeonConf.branch[0].create = {\n        actor: [\n            {\n                name: 'Thabba, Son of Ice',\n                nLevel: nLastLevel\n            },\n            {\n                name: 'Zamoned, Son of Frost',\n                nLevel: nLastLevel\n            }\n        ]\n    };\n    areaConf.nDungeons += 1;\n    areaConf.dungeon.push(dungeonConf);\n}\n\n/* For debugging. Adds the feature close to player starting position. */\nfunction addToPlayerPosition(zoneConf, coordObj) {\n    const [xPos, yPos] = getPlayerPosition(coordObj);\n    Object.assign(zoneConf,\n        {x: xPos, y: yPos, levelX: playerTileX, levelY: playerTileY});\n    console.log('BlackTower was added to tile', xPos, yPos);\n    console.log('BlackTower was added to level X,Y', playerTileX, playerTileY);\n}\n\n/* Returns the player position (tile X,Y), given the coordinate\n * object. */\nfunction getPlayerPosition(coordObj) {\n    const {xMap, yMap, nSubLevelsX, nSubLevelsY} = coordObj;\n    const xPos = Math.floor(nSubLevelsX / xMap / 2);\n    const yPos = nSubLevelsY / yMap - 1;\n    return [xPos, yPos];\n}\n\n/* Map biomes from overworld into nTilesX * nTilesY space. */\nfunction addBiomeLocations(ow, areaConf) {\n    const owSizeX = ow.getSizeX();\n    const owSizeY = ow.getSizeY();\n    const xMap = owSizeX / areaConf.maxX;\n    const yMap = owSizeY / areaConf.maxY;\n\n    for (let x = 0; x < areaConf.maxX; x++) {\n        for (let y = 0; y < areaConf.maxY; y++) {\n            const bbox = getSubBoxForAreaTile(x, y, xMap, yMap);\n            const key = x + ',' + y;\n            const biomeType = ow.getBiome(bbox[0], bbox[3]);\n            areaConf.biome[key] = biomeType;\n            // How to map multiple cells into one?\n            // 1. Option: Determine \"majority\" biome for that area\n        }\n    }\n}\n\n/* Returns the bounding box of sublevel coordinates for given tile. For example,\n * tile 0,0 with xMap=3,yMap=5, returns [0, 4, 2, 0]. */\nfunction getSubBoxForAreaTile(x, y, xMap, yMap) {\n    const lx = x * xMap;\n    const rx = lx + xMap - 1;\n    const ry = y * yMap;\n    const ly = ry + yMap - 1;\n    return [lx, ly, rx, ry];\n}\n\nfunction legalizeXY(xy) {\n    let [x, y] = xy;\n    if (x === 0) {x = 1;}\n    if (x === TILE_SIZE_X - 1) {x -= 1;}\n    if (y === 0) {y = 1;}\n    if (y === TILE_SIZE_Y - 1) {y -= 1;}\n    return [x, y];\n}\n\n/* Adds global features like roads to the overworld level map. */\nfunction addGlobalFeatures(ow, owLevel: Level, conf, coordMap) {\n    // Find player x,y on level\n    const [playerStartX, playerStartY] = getPlayerStartPos(ow, coordMap);\n\n    // Find capital x,y on level\n    const capSubTileXY = ow.getFeaturesByType(OW.WCAPITAL)[0];\n    const capLevel = ow.getSubLevel(capSubTileXY);\n    const capFeat = capLevel.getFeaturesByType('capital')[0];\n    const subLevelXY = capFeat.getLastCoord();\n    const [capX, capY] = coordMap.toOwLevelXY(capSubTileXY, subLevelXY);\n\n    /*\n    console.log(`World size: ${coordMap.worldCols}, ${coordMap.worldRows}`);\n    console.log(`Player x,y: ${playerStartX}, ${playerStartY}`);\n    console.log(`Capital x,y: ${owLevelXY}`);\n    */\n    const nPathSeg = 5;\n    if (addMainRoads) {\n        // Connect with road\n        /* const path = Path.getMinWeightPath(owLevel.getMap(),\n            playerStartX, playerStartY, capX, capY);*/\n\n        const path = Path.getWeightPathSegmented(owLevel.getMap(),\n            playerStartX, playerStartY, capX, capY, nPathSeg);\n\n        if (path.length === 0) {\n            RG.err('overworld.js', 'addGlobalFeatures',\n                'No path from player to capital.');\n        }\n        Builder.addPathToMap(owLevel.getMap(), path);\n    }\n\n    // Create road from capital north to wtower south\n    const capExitXY = capFeat.coord[0];\n    const owLevelCapExitXY = coordMap.toOwLevelXY(capSubTileXY, capExitXY);\n    const wTowerSubTileXY = ow.getFeaturesByType(OW.WTOWER)[0];\n    const wTowerLevel = ow.getSubLevel(wTowerSubTileXY);\n    const wTowerFeat = wTowerLevel.getFeaturesByType('dwarven city')[0];\n    const wTowerSubLevelXY = wTowerFeat.getLastCoord();\n    const wTowerLevelXY = coordMap.toOwLevelXY(wTowerSubTileXY,\n        wTowerSubLevelXY);\n\n    if (addMainRoads) {\n        /* const pathCapWTower = Path.getMinWeightPath(owLevel.getMap(),\n            owLevelCapExitXY[0], owLevelCapExitXY[1],\n            wTowerLevelXY[0], wTowerLevelXY[1]);*/\n        const pathCapWTower = Path.getWeightPathSegmented(owLevel.getMap(),\n            owLevelCapExitXY[0], owLevelCapExitXY[1],\n            wTowerLevelXY[0], wTowerLevelXY[1], nPathSeg);\n        Builder.addPathToMap(owLevel.getMap(), pathCapWTower);\n    }\n}\n\n/* Returns the player starting position as a global coordinate. */\nfunction getPlayerStartPos(ow, coordMap) {\n    const playerStartX = Math.floor(ow.getSizeX() / 2 - 1) * TILE_SIZE_X;\n    const playerStartY = coordMap.worldRows - Math.floor(TILE_SIZE_Y / 2);\n    return [playerStartX, playerStartY];\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport {Dice} from '../dice';\nimport * as Component from '../component';\nimport {ELEM} from '../../data/elem-constants';\nimport {ObjectShell} from '../objectshellparser';\nimport {Element} from '../element';\n\nconst handlerTable = {\n    AddComp: true,\n    ModifyCompValue: true,\n    AddEntity: true,\n    AddElement: true,\n    RemoveElement: true,\n    ChangeElement: true,\n    RemoveComp: true\n};\n\ntype HandleFunc = (ent, comp) => boolean;\n\n// Can be updated when addEffect() if called\nlet handlerNames = Object.keys(handlerTable);\n\nexport class SystemEffects extends SystemBase {\n\n    public static handlerTable: {[key: string]: boolean};\n\n    //---------------\n    // HANDLERS END\n    //---------------\n\n    /** Adds an effect into the effect system.\n     * @param {string} effName - Name of the effect.\n     * @param {function} func - Function to process the effect.\n     * @return {boolean}\n     * func receives args (srcEnt, effComp).\n     */\n    public static addEffect(effName: string, func: HandleFunc): boolean {\n        if (!handlerTable.hasOwnProperty(effName)) {\n            const handlerName = 'handle' + effName.capitalize();\n            SystemEffects.prototype[handlerName] = func;\n            handlerTable[effName] = true;\n            handlerNames = Object.keys(handlerTable);\n            return true;\n        }\n        else {\n            RG.err('SystemEffects', 'addEffect',\n                `Effect ${effName} already exists.`);\n        }\n        return false;\n    }\n\n    /* Returns the target for the effect. Priority of targets is:\n     * 1. actors 2. items 3. elements 4. base element\n     */\n    public static getEffectTarget(useArgs): any {\n        const objTarget = useArgs.target;\n        if (!objTarget) {\n            const msg = 'Possibly missing args for useItem().';\n            RG.err('system.effects.js', 'getEffectTarget',\n                `Given object was null/undefined. ${msg}`);\n        }\n        return SystemEffects.getTargetFromObj(objTarget, useArgs.targetType);\n    }\n\n    public static getTargetFromObj(objTarget, targetTypes) {\n        if (objTarget.hasOwnProperty('target')) {\n            const cell = objTarget.target;\n            let targetType = targetTypes;\n            if (!targetType) {\n                targetType = ['actors', 'items', 'elements', 'baseElem'];\n            }\n            if (!Array.isArray(targetType)) {targetType = [targetType];}\n\n            for (let i = 0; i < targetType.length; i++) {\n                if (cell.hasProp(targetType[i])) {\n                    return cell.getProp(targetType[i])[0];\n                }\n                else if (/base/.test(targetType[i])) {\n                    return cell.getBaseElem();\n                }\n            }\n        }\n        else {\n            return objTarget;\n        }\n        return null;\n    }\n\n    private _dtable: {[key: string]: HandleFunc};\n\n    constructor(compTypes: string[], pool?: EventPool) {\n        super(RG.SYS.EFFECTS, compTypes, pool);\n        this._dtable = {};\n        Object.keys(handlerTable).forEach(effName => {\n            if (handlerTable[effName]) {\n                const handlerName = 'handle' + effName.capitalize();\n                this._dtable[effName] = this[handlerName].bind(this);\n            }\n        });\n    }\n\n    public updateEntity(ent): void {\n        const comps = ent.getList('Effects');\n        comps.forEach(effComp => {\n            const effType = effComp.getEffectType();\n            if (effType && effType !== '') {\n                if (this._dtable.hasOwnProperty(effType)) {\n                    this._checkStartMsgEmits(ent, effComp);\n                    const ok = this._dtable[effType](ent, effComp);\n                    this._checkEndMsgEmits(ent, effComp, ok);\n                }\n                else {\n                    RG.err('SystemEffects', 'updateEntity',\n                    `Effect |${effType}| not in handler list: ${handlerNames}`);\n                }\n            }\n            else {\n                RG.err('SystemEffects', 'updateEntity',\n                    'No effect type in Effects comp');\n            }\n            ent.remove(effComp);\n        });\n    }\n\n    public _checkStartMsgEmits(ent, effComp): void {\n        const useArgs = effComp.getArgs();\n        if (useArgs.startMsg) {\n            RG.gameMsg({cell: ent.getCell(), msg: useArgs.startMsg});\n        }\n    }\n\n    public _checkEndMsgEmits(ent, effComp, ok): void {\n        const useArgs = effComp.getArgs();\n        if (useArgs.endMsg) {\n            RG.gameMsg({cell: ent.getCell(), msg: useArgs.endMsg});\n        }\n        if (ok && useArgs.successMsg) {\n            RG.gameMsg({cell: ent.getCell(), msg: useArgs.successMsg});\n        }\n        if (!ok && useArgs.failureMsg) {\n            RG.gameWarn({cell: ent.getCell(), msg: useArgs.failureMsg});\n        }\n    }\n\n    //--------------------\n    // HANDLER FUNCTIONS\n    //--------------------\n\n    /* Handler for effect 'AddComp'. Adds a component to target entity\n     * for a given duration. */\n    public handleAddComp(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const targetEnt = SystemEffects.getEffectTarget(useArgs);\n        const compName = getCompName(useArgs, targetEnt);\n\n        let compToAdd = null;\n        if (Component.hasOwnProperty(compName)) {\n            compToAdd = new Component[compName]();\n        }\n\n        // If setters are given, alter the values of added component\n        if (useArgs.setters) {\n            const setters = useArgs.setters;\n            Object.keys(setters).forEach(setFunc => {\n                if (typeof compToAdd[setFunc] === 'function') {\n                    const valueToSet = setters[setFunc];\n                    const numValue = convertValueIfNeeded(valueToSet);\n                    compToAdd[setFunc](numValue);\n                }\n                else {\n                    const json = JSON.stringify(compToAdd);\n                    RG.err('useEffect', 'addComp',\n                        `No ${setFunc} in comp ${json}`);\n                }\n            });\n        }\n\n        if (compToAdd && compToAdd.setSource) {\n            compToAdd.setSource(srcEnt);\n        }\n\n        const dur = Dice.getValue(useArgs.duration);\n        const expirMsg = useArgs.expireMsg;\n        Component.addToExpirationComp(targetEnt, compToAdd, dur, expirMsg);\n        return true;\n    }\n\n    /* Called when element needs to be added to a cell. */\n    public handleAddElement(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const cell = getTargetCellOrFail(useArgs);\n\n        if (!useArgs.elementName) {\n            RG.err('System.Effects', 'handleAddElement',\n                'No elementName found in useArgs: ' + JSON.stringify(useArgs));\n        }\n\n        let newElem = Element.create(useArgs.elementName);\n        if (!newElem) {\n            // Try the ObjectShellParser, usually not what we want\n            // with elements\n            const parser = ObjectShell.getParser();\n            newElem = parser.createEntity(useArgs.elementName);\n        }\n\n        if (newElem) {\n            const [x, y] = [cell.getX(), cell.getY()];\n            const level = srcEnt.getLevel();\n            const existingElems = cell.getPropType(newElem.getType());\n            if (!existingElems || existingElems.length < useArgs.numAllowed) {\n                if (!level.addElement(newElem, x, y)) {\n                    console.error('Failed to add element ' + useArgs.elementName);\n                    return false;\n                }\n                if (typeof newElem.onSystemAdd === 'function') {\n                    newElem.onSystemAdd(cell);\n                }\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            const msg = 'Failed to create elem: ' + JSON.stringify(useArgs);\n            RG.err('System.Effects', 'handleAddElement', msg);\n        }\n        return false;\n    }\n\n    /* Called when element needs to be added to a cell. */\n    public handleRemoveElement(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const cell = getTargetCellOrFail(useArgs);\n\n        if (!useArgs.elementName) {\n            RG.err('System.Effects', 'handleRemoveElement',\n                'No elementName found in useArgs: ' + JSON.stringify(useArgs));\n        }\n\n        const foundElems = cell.getPropType(useArgs.elementName);\n        if (foundElems.length > 0) {\n            const foundElem = foundElems[0];\n            const [x, y] = [cell.getX(), cell.getY()];\n            const level = srcEnt.getLevel();\n            if (level.removeElement(foundElem, x, y)) {\n                if (typeof foundElem.onSystemRemove === 'function') {\n                    foundElem.onSystemRemove(cell);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Adds a value to an existing component value. */\n    public handleModifyCompValue(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const targetEnt = SystemEffects.getEffectTarget(useArgs);\n        const compName = getCompName(useArgs, targetEnt);\n\n        if (targetEnt) {\n            if (targetEnt.has(compName)) {\n                const comp = targetEnt.get(compName);\n                const currValue = comp[useArgs.get]();\n                const value = useArgs.value;\n                const numValue = convertValueIfNeeded(value);\n                comp[useArgs.set](currValue + numValue);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Adds an entity to target cell. */\n    public handleAddEntity(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const cell = getTargetCellOrFail(useArgs);\n\n        const parser = ObjectShell.getParser();\n        const entity = parser.createEntity(useArgs.entityName);\n\n        if (entity) {\n            const [x, y] = [cell.getX(), cell.getY()];\n            const level = srcEnt.getLevel();\n            if (level.addEntity(entity, x, y)) {\n                if (useArgs.duration) {\n                    const fadingComp = new Component.Fading();\n                    const {duration} = useArgs;\n                    fadingComp.setDuration(duration);\n                    entity.add(fadingComp);\n                }\n                // Add the srcEnt to created entity to track its damage etc\n                // for experience and action monitoring\n                const createdComp = new Component.Created();\n                createdComp.setCreator(srcEnt);\n                entity.add(createdComp);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public handleChangeElement(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const cell = getTargetCellOrFail(useArgs);\n        const fromType = useArgs.fromType;\n        const toType = useArgs.toType || ELEM.FLOOR;\n        if (cell.getBaseElem().getType() === fromType) {\n            cell.setBaseElem(toType);\n            return true;\n        }\n        return false;\n    }\n\n    public handleRemoveComp(srcEnt, effComp): boolean {\n        const useArgs = effComp.getArgs();\n        const targetEnt = SystemEffects.getEffectTarget(useArgs);\n        const compName = getCompName(useArgs, targetEnt);\n\n        if (targetEnt.has(compName)) {\n            if (useArgs.all) {\n                targetEnt.removeAll(compName);\n            }\n            else {\n                targetEnt.remove(compName);\n            }\n            return true;\n        }\n        return false;\n    }\n}\nSystemEffects.handlerTable = handlerTable;\n\n//-------------------\n// HELPER FUNCTIONS\n//-------------------\n\nfunction getCompName(useArgs, targetEnt) {\n    const compName = useArgs.name;\n    if (!compName) {\n        const json = JSON.stringify(useArgs);\n        let errorMsg = 'Unknown comp value. useArgs: ' + json;\n        if (targetEnt) {errorMsg += ' targetEnt ' + JSON.stringify(targetEnt);}\n        RG.err('SystemEffects', 'handleModifyCompValue',\n            errorMsg);\n    }\n    return compName.capitalize();\n}\n\n/**\n * @param {int|string|RG.Die} intStrOrDie - Value for the die roll\n * @return {int} - Return of the die roll\n */\n/*\nconst getDieValue = function(intStrOrDie) {\n    if (Number.isInteger(intStrOrDie)) {\n        return intStrOrDie;\n    }\n    else if (typeof intStrOrDie === 'string') {\n        // const arr = RG.parseDieSpec(intStrOrDie);\n        // const durDie = new RG.Die(arr[0], arr[1], arr[2]);\n        const durDie = Dice.create(intStrOrDie);\n        const duration = durDie.roll();\n        return duration;\n    }\n    else if (intStrOrDie.roll) {\n        return intStrOrDie.roll();\n    }\n    RG.err('system.effects.js', 'getDieValue',\n        'Could not extract value from ' + intStrOrDie);\n    return 0;\n};\n*/\n\nconst convertValueIfNeeded = function(intStrOrDie) {\n    if (Number.isInteger(intStrOrDie)) {\n        return intStrOrDie;\n    }\n    else if (typeof intStrOrDie === 'string') {\n        const float = Number.parseFloat(intStrOrDie);\n        if (!Number.isNaN(float)) {\n            return float;\n        }\n    }\n    return intStrOrDie;\n};\n\nfunction getTargetCellOrFail(useArgs) {\n    if (useArgs.target) {\n        const targetObj = useArgs.target;\n        if (targetObj.target) {\n            return targetObj.target;\n        }\n    }\n    const json = JSON.stringify(useArgs);\n    RG.err('system.effects.js', 'getTargetCellOrFail',\n        'Prop target must exist in useArgs ' + json);\n    return null;\n}\n","\n/* This file contains objecsts for chat interactions between player and NPCs. */\n\nimport RG from './rg';\nimport {Keys} from './keymap';\nimport * as Menu from './menu';\nimport * as Item from './item';\nimport * as Component from './component/component';\nimport {BrainPlayer} from './brain/brain.player';\n\ntype SentientActor = import('./actor').SentientActor;\n\nexport const Chat: any = {};\nconst stats = RG.STATS;\n\nconst EXIT_MENU = Menu.Menu.EXIT_MENU;\n\nconst OPTION_GOODBYE = {\n    name: 'Say goodbye',\n    option: EXIT_MENU\n};\n\ninterface SelObject {\n    showMenu(): boolean;\n    getMenu?(): any;\n    select(code: number): void;\n    pre?: string[];\n    post?: string[];\n}\n\n\n/* Trades the given gold weight from given to another actor. */\nChat.tradeGoldWeightFromTo = (gw, actorFrom, actorTo) => {\n    const nCoins = RG.getGoldInCoins(gw);\n    const coins = new Item.GoldCoin();\n    const nCoinsRemoved = RG.removeNCoins(actorFrom, nCoins);\n    coins.setCount(nCoinsRemoved);\n    actorTo.getInvEq().addItem(coins);\n};\n\n\n/* Chat object added to actors which have any interesting things to chat about.\n */\nexport class ChatBase {\n\n    public chatter: SentientActor;\n    public options: any[];\n    public parent: any | null;\n    public pre: string[];\n    public post: string[];\n    public selectionObject: SelObject;\n\n    constructor() {\n        this.options = [];\n        this.parent = null;\n    }\n\n    /* Adds a chat object or an option into this object. */\n    add({name, option}) {\n        this.options.push({name, option});\n        if (option && option.setParent) {\n            option.setParent(this);\n        }\n    }\n\n    clearOptions() {\n        this.options = [];\n    }\n\n    setParent(parent) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    getSelectionObject(): SelObject {\n        const selObj: SelObject = {\n            showMenu: () => true,\n            getMenu: () => {\n                const menuObj = {pre: [], post: []};\n                this.options.forEach((opt, i) => {\n                    menuObj[Keys.menuIndices[i]] = opt.name;\n                });\n                if (this.pre) {\n                    menuObj.pre = this.pre;\n                }\n                if (this.post) {\n                    menuObj.post = this.post;\n                }\n                menuObj[\"Q\"] = OPTION_GOODBYE.name;\n                return menuObj;\n            },\n            select: code => {\n                const selection = Keys.codeToIndex(code);\n                if (selection < this.options.length) {\n                    const value = this.options[selection].option;\n                    if (value !== EXIT_MENU) {\n                        if (value.getSelectionObject) {\n                            return value.getSelectionObject();\n                        }\n                    }\n                    return value;\n                }\n                return EXIT_MENU;\n            }\n        };\n        return selObj;\n    }\n\n}\nChat.ChatBase = ChatBase;\n\n/* Object used in actors which can give quests. */\nexport class ChatQuest extends ChatBase {\n\n    public questGiver: SentientActor;\n\n    constructor() {\n        super();\n        const acceptOpt = {\n            name: 'Accept the quest',\n            option: this.questCallback.bind(this)\n        };\n        const refuseOpt = {\n            name: 'Refuse the quest',\n            option: EXIT_MENU\n        };\n        this.add(acceptOpt);\n        this.add(refuseOpt);\n    }\n\n    setQuestGiver(giver) {\n        this.questGiver = giver;\n    }\n\n    setTarget(target) {\n        const giver = this.questGiver;\n        this.chatter = target;\n        const qLen = 'lengthy';\n        const giverComp = this.questGiver.get('QuestGiver');\n        if (!giverComp.getHasGivenQuest()) {\n            this.pre = [\n                `${giver.getName()} wants to offer a ${qLen} quest:`,\n                `${giverComp.getDescr()}`,\n                'What do you want to do?'\n            ];\n        }\n        else {\n            this.pre = [\n                `${giver.getName()} has already given this quest:`,\n                `${giverComp.getDescr()}`,\n                'What do you want to do?'\n            ];\n            this.clearOptions();\n            const rewardOpt = {\n                name: 'Claim the reward',\n                option: this.rewardCallback.bind(this)\n            };\n            this.add(rewardOpt);\n        }\n    }\n\n    questCallback() {\n        if (RG.isNullOrUndef([this.chatter, this.questGiver])) {\n            RG.err('ChatQuest', 'questCallback',\n                'target and questGiver must be defined');\n        }\n        const giveQuestComp = new Component.GiveQuest();\n        giveQuestComp.setTarget(this.chatter);\n        giveQuestComp.setGiver(this.questGiver);\n        this.chatter.add(giveQuestComp);\n    }\n\n    rewardCallback() {\n        const questCompl = new Component.QuestCompleted();\n        questCompl.setGiver(this.questGiver);\n        this.chatter.add(questCompl);\n    }\n\n}\nChat.Quest = ChatQuest;\n\n/* Chat Object for trainers in the game. */\nexport class ChatTrainer extends ChatBase {\n\n    public trainer: SentientActor;\n    public costs: any;\n\n    constructor() {\n        super();\n        this.selectionObject = {\n            showMenu: () => true,\n            pre: ['Please select a stat to train:'],\n            getMenu: () => {\n                // RG.gameMsg('');\n                const indices = Keys.menuIndices.slice(0, 6);\n                const menuObj = {};\n                stats.forEach((stat, index) => {\n                    menuObj[indices[index]] = stats[index];\n                    menuObj[indices[index]] += ` (${this.costs[index]} gold)`;\n                });\n                return menuObj;\n\n            },\n            select: code => {\n                const selection = Keys.codeToIndex(code);\n                if (selection < stats.length) {\n                    const statSel = stats[selection];\n                    const cost = this.costs[selection];\n                    return this.trainCallback(statSel, cost);\n                }\n                return null;\n            }\n        };\n        this.trainCallback = this.trainCallback.bind(this);\n    }\n\n    /* Sets the target to train. */\n    setTrainer(trainer) {\n        this.trainer = trainer;\n    }\n\n    /* Sets the target to train. Computes also the training costs based on the\n     * stats of the target. */\n    setTarget(target) {\n        this.chatter = target;\n        this.costs = [];\n        stats.forEach(stat => {\n            const getFunc = 'get' + stat;\n            this.costs.push(100 * target.get('Stats')[getFunc]());\n        });\n    }\n\n    getSelectionObject() {\n        return this.selectionObject;\n    }\n\n    trainCallback(statSel, cost) {\n        const cb = () => {\n            const gw = RG.valueToGoldWeight(cost);\n            const taName = this.chatter.getName();\n\n            if (!RG.hasEnoughGold(this.chatter, gw)) {\n                const msg = `${taName} does not have enough gold.`;\n                RG.gameMsg({cell: this.chatter.getCell(), msg});\n                return;\n            }\n            else {\n                Chat.tradeGoldWeightFromTo(gw, this.chatter, this.trainer);\n            }\n\n            const targetStats = this.chatter.get('Stats');\n            const trainerStats = this.trainer.get('Stats');\n            const getFunc = 'get' + statSel;\n            const setFunc = 'set' + statSel;\n            const targetVal = targetStats[getFunc]();\n            const trainerVal = trainerStats[getFunc]();\n\n            const trName = this.trainer.getName();\n            if (targetVal < trainerVal) {\n                const newTargetVal = targetVal + 1;\n                targetStats[setFunc](newTargetVal);\n                const msg = `${trName} trains ${statSel} of ${taName}`;\n                RG.gameMsg({cell: this.chatter.getCell(), msg});\n            }\n            else {\n                const msg = `${trName} doesn't have skill to train that stat`;\n                RG.gameMsg({cell: this.chatter.getCell(), msg});\n            }\n        };\n        return cb;\n    }\n\n}\nChat.Trainer = ChatTrainer;\n\n/* Object attached to wizards selling magical services. */\nexport class ChatWizard extends ChatBase {\n\n    public wizard: SentientActor;\n    public costs: {[key: string]: number};\n\n    constructor() {\n        super();\n        this.costs = {\n            0: 10,\n            1: 45,\n            2: 50\n        };\n        this.selectionObject = {\n            showMenu: () => true,\n\n            getMenu: () => {\n                RG.gameMsg('Please select a magical service to buy:');\n                const spellPower = this.wizard.get('SpellPower');\n                const ppLeft = spellPower.getPP();\n                const menuObj = {};\n                if (ppLeft >= 10) {\n                    menuObj[0] = 'Restore 10pp - 10 gold coins';\n                }\n                if (ppLeft >= 50) {\n                    menuObj[1] = 'Restore 50pp - 45 gold coins';\n                }\n                if (ppLeft >= 25) {\n                    menuObj[2] = 'Add one charge to rune - 50 gold coins';\n                }\n            },\n            select: code => {\n                const selection: number = Keys.codeToIndex(code);\n                return this.wizardCallback(selection);\n            }\n        };\n        this.wizardCallback = this.wizardCallback.bind(this);\n    }\n\n    /* Sets the target to train. */\n    setWizard(wizard) {\n        this.wizard = wizard;\n    }\n\n    getSelectionObject(): SelObject {\n        return this.selectionObject;\n    }\n\n    wizardCallback(index) {\n        const cost:number  = this.costs[index];\n        const cb = () => {\n            if (!RG.hasEnoughGold(this.chatter, cost)) {\n                return;\n            }\n            switch (index) {\n                case 0: this.restorePP(10); break;\n                case 1: this.restorePP(50); break;\n                case 2: this.setRuneSelectionObject(); break;\n                default: break;\n            }\n\n        };\n        return cb;\n    }\n\n    restorePP(numPP) {\n        const spellPower = this.wizard.get('SpellPower');\n        spellPower.decrPP(numPP);\n        const spTarget = this.chatter.get('SpellPower');\n        spTarget.addPP(numPP);\n    }\n\n    setRuneSelectionObject() {\n        // Create a list of possible runes to charge up\n        const selObj = {};\n        const brain = this.chatter.getBrain() as BrainPlayer;\n        brain.setSelectionObject(selObj);\n    }\n\n}\nChat.Wizard = ChatWizard;\n","\nimport RG from '../rg';\nimport {ComponentBase, Component} from './component.base';\nimport {BrainMindControl} from '../brain';\n\n/* MindControl component allows another actor to control the mind-controlled\n * actor. */\nexport const MindControl = function() {\n    ComponentBase.call(this, 'MindControl');\n\n    let _src = null;\n    let _brainTarget = null;\n    this.getSource = () => _src;\n    this.setSource = src => {_src = src;};\n\n    const _addCb = () => {\n        const ent = this.getEntity();\n        _brainTarget = ent.getBrain();\n        if (this.getSource().isPlayer()) {\n            ent.setPlayerCtrl(true);\n        }\n        else {\n            ent.setBrain(new BrainMindControl(ent));\n        }\n    };\n\n    const _removeCb = () => {\n        if (this.getSource().isPlayer()) {\n            this.getEntity().setPlayerCtrl(false);\n        }\n        this.getEntity().setBrain(_brainTarget);\n    };\n\n    this.addCallback('onAdd', _addCb);\n    this.addCallback('onRemove', _removeCb);\n\n};\nRG.extend2(MindControl, ComponentBase);\n\nMindControl.prototype.toJSON = function() {\n    const obj = ComponentBase.prototype.toJSON.call(this);\n    if (RG.isActorActive(this.getSource())) {\n        obj.setSource = RG.getObjRef('entity', this.getSource());\n    }\n    return obj;\n};\n\n","\n/* This file contains Battle-related goals used by NPC actors. */\n\nimport RG from './rg';\nimport {Goal, GoalBase, GoalStatus} from './goals';\nimport {Evaluator} from './evaluators';\nimport {BaseActor, SentientActor, isSentient} from './actor';\nimport * as Component from './component';\n\ntype BrainGoalOriented = import('./brain').BrainGoalOriented;\n\nconst {GOAL_ACTIVE, GOAL_COMPLETED} = GoalStatus;\n\nexport const GoalsBattle: any = {};\n\nexport const orderWithGoal = (actor: BaseActor, obj): void => {\n    const {bias} = obj;\n    const orderEval = new Evaluator.Orders(bias);\n    orderEval.setArgs({srcActor: obj.src, goal: obj.goal});\n    if (!actor.isPlayer()) {\n        const brain = actor.getBrain() as BrainGoalOriented;\n        if (typeof (brain.getGoal) === 'function') {\n            const topGoal = brain.getGoal();\n            topGoal.clearOrders();\n            topGoal.giveOrders(orderEval);\n        }\n        else {\n            const msg = 'Actor without getGoal: ' + JSON.stringify(actor);\n            RG.warn('goals-battle.js', 'orderWithGoal', msg);\n        }\n    }\n    else {\n        const orderComp = new Component.BattleOrder();\n        const args = {\n            srcActor: obj.src\n        };\n        orderComp.setArgs(args);\n        actor.add(orderComp);\n    }\n};\nGoalsBattle.orderWithGoal = orderWithGoal;\n\nexport const injectOrderEval = (target: SentientActor, goal: GoalBase, args) => {\n    if (isSentient(target)) {\n        const orderEval = new Evaluator.Orders(args.bias);\n        orderEval.setArgs({srcActor: args.src, goal});\n        const brain = target.getBrain() as BrainGoalOriented;\n        const topGoal = brain.getGoal();\n        topGoal.clearOrders();\n        topGoal.giveOrders(orderEval);\n    }\n};\n\nexport const giveFollowOrder = (target: BaseActor, args) => {\n    if (isSentient(target)) {\n        const goal = new Goal.Follow(target, args.src);\n        injectOrderEval(target, goal, args);\n    }\n};\nGoalsBattle.giveFollowOrder = giveFollowOrder;\n\nexport const giveAttackOrder = (target: BaseActor, args) => {\n    if (isSentient(target)) {\n        const goal = new Goal.AttackActor(target, args.enemy);\n        injectOrderEval(target, goal, args);\n    }\n};\nGoalsBattle.giveAttackOrder = giveAttackOrder;\n\nexport const givePickupOrder = (target: BaseActor, args) => {\n    if (isSentient(target)) {\n        const goal = new Goal.GetItem(target, args.item);\n        injectOrderEval(target, goal, args);\n    }\n};\nGoalsBattle.givePickupOrder = givePickupOrder;\n\n/* Clears the given orders from non-enemy actor. */\nexport const giveClearOrders = (target: BaseActor, args) => {\n    if (isSentient(target)) {\n        const {src} = args;\n        if (!target.isEnemy(src)) {\n            const brain = target.getBrain() as BrainGoalOriented;\n            const topGoal = brain.getGoal();\n            topGoal.clearOrders();\n        }\n    }\n};\nGoalsBattle.giveClearOrders = giveClearOrders;\n\n//---------------------------------------------------------------------------\n// COMPOSITE GOALS\n//---------------------------------------------------------------------------\n\nexport class GoalWinBattle extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalWinBattle');\n    }\n\n    public activate(): void {\n        // If enemy not seen\n        const brain = this.actor.getBrain();\n        const seenCells = brain.getSeenCells();\n        const enemy = brain.findEnemyCell(seenCells);\n        if (!enemy) {\n            this.addSubGoal(new GoalFindEnemyArmy(this.actor));\n            this.dbg('Activated goal. Added FindEnemyArmy');\n        }\n        else {\n            this.addSubGoal(new GoalEngageEnemy(this.actor));\n            this.dbg('Activated goal. Added EngageEnemy');\n        }\n        this.status = GOAL_ACTIVE;\n    }\n\n    public process(): GoalStatus {\n        this.dbg('process() begin');\n        this.activateIfInactive();\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n}\nGoalsBattle.WinBattle = GoalWinBattle;\n\n//---------------------------------------------------------------------------\n// ATOMIC GOALS\n//---------------------------------------------------------------------------\n\n/* Commander will use this goal to follow its army. */\nexport class GoalFollowArmy extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalFollowArmy');\n    }\n\n    public activate(): void {\n        // TODO\n        // 1. Calculate center of mass of army\n        // 2. Check distance to the army\n        // 3. Move into army's direction if not too close\n        //    - Depends on the style/FOV of commander\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        this.status = GOAL_COMPLETED;\n        return this.status;\n    }\n}\nGoalsBattle.FollowArmy = GoalFollowArmy;\n\n/* Object which maps a level into a macro grid. This can be used to check if\n * actor has visited certain part of the level. */\nexport class LevelGrid {\n    public gridCols: number;\n    public gridRows: number;\n    public xMap: number;\n    public yMap: number;\n    public xMapHalf: number;\n    public yMapHalf: number;\n\n    public grid: any[][];\n\n    constructor(level, xMap, yMap) {\n        const map = level.getMap();\n        const [cols, rows] = [map.cols, map.rows];\n\n        let gridCols = Math.floor(cols / xMap);\n        let gridRows = Math.floor(rows / yMap);\n        if (cols % xMap !== 0) {++gridCols;}\n        if (rows % yMap !== 0) {++gridRows;}\n\n        this.grid = [];\n        for (let x = 0; x < gridCols; x++) {\n            this.grid[x] = [];\n            for (let y = 0; y < gridRows; y++) {\n                this.grid[x][y] = {data: [x, y]};\n            }\n        }\n\n        this.gridCols = gridCols;\n        this.gridRows = gridRows;\n        this.xMap = xMap;\n        this.yMap = yMap;\n        this.xMapHalf = Math.floor(xMap / 2);\n        this.yMapHalf = Math.floor(yMap / 2);\n    }\n\n    public getCenterLevelXY(gridXY) {\n        const [gridX, gridY] = gridXY;\n        const x = gridX * this.xMap + this.xMapHalf;\n        const y = gridY * this.yMap + this.yMapHalf;\n        return [x, y];\n    }\n\n    /* Given level x,y coordinates, returns the grid x,y corresponding to\n     * this. */\n    public getGridXY(levelXY) {\n        const [x, y] = levelXY;\n        const gridX = Math.floor(x / this.xMap);\n        const gridY = Math.floor(y / this.yMap);\n        return [gridX, gridY];\n    }\n\n    public setDataLevelXY(xy, key, data) {\n        const [gridX, gridY] = this.getGridXY(xy);\n        this.grid[gridX][gridY][key] = data;\n    }\n\n    public setDataGridXY(gridXY, key, data) {\n        const [gridX, gridY] = gridXY;\n        this.grid[gridX][gridY][key] = data;\n    }\n\n    public isTrue(gridXY, key) {\n        const [gridX, gridY] = gridXY;\n        return this.grid[gridX][gridY][key] === true;\n    }\n\n    public hasProp(gridXY, key) {\n        const [gridX, gridY] = gridXY;\n        return this.grid[gridX][gridY].hasOwnProperty(key);\n    }\n\n    public getDataGridXY(gridXY) {\n        const [gridX, gridY] = gridXY;\n        return this.grid[gridX][gridY];\n    }\n\n    public getDataLevelXY(xy) {\n        const [gridX, gridY] = this.getGridXY(xy);\n        return this.grid[gridX][gridY];\n    }\n\n    public debugPrint() {\n        for (let y = 0; y < this.gridRows; y++) {\n            let row = '||';\n            for (let x = 0; x < this.gridCols; x++) {\n                row += JSON.stringify(this.grid[x][y]) + ' ||';\n            }\n            RG.diag(row);\n            RG.diag('='.repeat(row.length));\n        }\n    }\n\n\n}\n\n/* Goal to find the enemy army. Commander will choose a direction, and the whole\n * army will march into that direction. */\nexport class GoalFindEnemyArmy extends GoalBase {\n\n    public gridSeen: LevelGrid;\n    public adjustRate: number;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalFindEnemyArmy');\n\n        const level = actor.getLevel();\n        this.gridSeen = new LevelGrid(level, 10, 10);\n        const [x, y] = this.actor.getXY();\n        this.gridSeen.setDataLevelXY([x, y], 'seen', true);\n        // this.gridSeen.debugPrint();\n        // How often commander issues a new order\n        this.adjustRate = 50;\n    }\n\n    public activate(): void {\n        this.selectDirToMove();\n        this.status = GOAL_ACTIVE;\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        if (this.adjustRate > 0) {\n            --this.adjustRate;\n        }\n        else {\n            this.selectDirToMove();\n            this.adjustRate = 50;\n        }\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n    /* Selects the movement direction for the army. */\n    public selectDirToMove(): void {\n        const brain = this.actor.getBrain();\n\n        const cmdDir = [0, 0];\n        const level = this.actor.getLevel();\n        const [x, y] = this.actor.getXY();\n\n        const centerX = level.getMap().cols / 2;\n        const centerY = level.getMap().rows / 2;\n\n        if (x < centerX) {cmdDir[0] = 1;}\n        else if (x > centerX) {cmdDir[0] = -1;}\n        if (y < centerY) {cmdDir[1] = 1;}\n        else if (y > centerY) {cmdDir[1] = -1;}\n\n        this.dbg(`Cmd army to move to dir ${cmdDir}`);\n\n        // If enemy not seen, order move until found\n        const actors = brain.getSeenFriends();\n        this.dbg(`${actors.length} friends found for command`);\n        actors.forEach(actor => {\n            const goal = new Goal.MoveUntilEnemy(actor, cmdDir);\n            orderWithGoal(actor, {src: this.actor, bias: 1.0, goal});\n        });\n\n        this.dbg('Issued Move order to ' + actors.length + ' actors');\n\n        const moveGoal = new Goal.MoveUntilEnemy(this.actor, cmdDir);\n        this.removeAllSubGoals();\n        this.addSubGoal(moveGoal);\n    }\n\n}\nGoalsBattle.FindEnemyArmy = GoalFindEnemyArmy;\n\n/* Tells to own army actors to attack the most suitable enemy. */\nexport class GoalEngageEnemy extends GoalBase {\n    public enemy: SentientActor;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalEngageEnemy');\n    }\n\n    public activate(): void {\n        // const actors = this.actor.brain.getSeenFriends();\n        this.dbg('ATTACK ENEMY activate()');\n        const brain = this.actor.getBrain();\n        const enemies = brain.getSeenEnemies();\n\n        if (enemies.length === 0) {return;}\n\n        const actors = brain.getSeenFriends();\n        actors.forEach(actor => {\n            const orderGoal = new Goal.AttackActor(actor, enemies[0]);\n            orderWithGoal(actor, {src: this.actor, bias: 2.0, goal: orderGoal});\n        });\n\n        this.enemy = enemies[0] as SentientActor;\n        const goal = new Goal.AttackActor(this.actor, enemies[0]);\n        this.addSubGoal(goal);\n\n        // Allocate attackers cleverly\n\n        this.status = GOAL_ACTIVE;\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        this.dbg('ATTACK ENEMY process()');\n        this.status = this.processSubGoals();\n        return this.status;\n    }\n\n}\nGoalsBattle.EngageEnemy = GoalEngageEnemy;\n\n/* Goal to hold army position even though enemy has been encountered, for\n * example to give archers time to shoot. */\nexport class GoalHoldPosition extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalHoldPosition');\n    }\n\n    /*\n    public activate(): void {\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n    }\n    */\n\n}\nGoalsBattle.HoldPosition = GoalHoldPosition;\n\n/* Goal issued to retreat from the battle. */\nexport class GoalRetreat extends GoalBase {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalRetreat');\n    }\n\n}\nGoalsBattle.Retreat = GoalRetreat;\n","/* Contains implementations of battles-specific spells. */\n\nimport RG from '../src/rg';\nimport {Spell, SpellBase, SpellArgs} from '../src/spell';\nimport * as Component from '../src/component';\nimport {Dice} from '../src/dice';\nimport {ObjectShell} from '../src/objectshellparser';\nimport {Brain} from '../src/brain';\nimport {Random} from '../src/random';\nimport * as Element from '../src/element';\nimport {Corpse} from '../src/item';\n\ntype Cell = import('../src/map.cell').Cell;\n\nconst RNG = Random.getRNG();\n\nconst {getDirSpellArgs, aiSpellCellEnemy, aiSpellCellFriend,\n    aiSpellCellSelf, addPoisonEffect, addFadingActorToCell,\n    aiSpellCellDone} = Spell;\n\n/* Removes all duration components (which removes all attached\n * effects with duration. */\nSpell.DispelMagic = function() {\n    Spell.RemoveComponent.call(this, 'DispelMagic', 8);\n    this.setCompNames('Duration');\n\n};\nRG.extend2(Spell.DispelMagic, Spell.RemoveComponent);\n\nSpell.Charm = function() {\n    SpellBase.call(this, 'Charm');\n    this._dice.duration = Dice.create('10d6 + 5');\n};\nRG.extend2(Spell.Charm, SpellBase);\n\nSpell.Charm.prototype.cast = function(args) {\n    const obj: SpellArgs = getDirSpellArgs(this, args);\n    const spellComp = new Component.SpellCell();\n    obj.callback = this.charmCallback.bind(this);\n    spellComp.setArgs(obj);\n    args.src.add(spellComp);\n};\n\nSpell.Charm.prototype.charmCallback = function(cell: Cell): void {\n    const actors = cell.getSentientActors();\n    if (actors && actors.length > 0) {\n        const targetActor = actors[0];\n        let charmLevel = 1 + this.getCasterExpBonus(3);\n        charmLevel += this.getCasterStatBonus('willpower', 3);\n\n        const charmComp = new Component.Charm();\n        charmComp.setTargetActor(targetActor.getID());\n        charmComp.setLevel(charmLevel);\n\n        const dur = this.getDuration();\n        Component.addToExpirationComp(this.getCaster(), charmComp, dur);\n\n        const caster = this.getCaster();\n        const msg = `${caster.getName()} charms ${targetActor.getName()}`;\n        RG.gameMsg({cell: caster.getCell(), msg});\n    }\n};\n\nSpell.Charm.prototype.getSelectionObject = function(actor) {\n    const msg = 'Select a direction for charming:';\n    return Spell.getSelectionObjectDir(this, actor, msg);\n};\n\nSpell.Charm.prototype.aiShouldCastSpell = function(args, cb) {\n    return aiSpellCellEnemy(args, cb);\n};\n\n/* A spell for melee combat using grasp of winter. */\nSpell.GraspOfWinter = function() {\n    SpellBase.call(this, 'Grasp of winter');\n    this._dice.damage = Dice.create('4d4 + 4');\n};\nRG.extend2(Spell.GraspOfWinter, SpellBase);\n\nSpell.GraspOfWinter.prototype.cast = function(args) {\n    const obj: SpellArgs = getDirSpellArgs(this, args);\n    obj.damageType = RG.DMG.ICE;\n    obj.damage = this.getDamage();\n    const spellComp = new Component.SpellCell();\n    spellComp.setArgs(obj);\n    args.src.add(spellComp);\n};\n\nSpell.GraspOfWinter.prototype.getSelectionObject = function(actor) {\n    const msg = 'Select a direction for grasping:';\n    return Spell.getSelectionObjectDir(this, actor, msg);\n};\n\nSpell.GraspOfWinter.prototype.aiShouldCastSpell = function(args, cb) {\n    return aiSpellCellEnemy(args, cb);\n};\n\n//------------------------------------------------------\n/* @class Spell.AnimateDead\n * Animates a dead actor from corpse */\n//------------------------------------------------------\nSpell.AnimateDead = function() {\n    Spell.AddComponent.call(this, 'AnimateDead', 5);\n    this.setCompName('Undead');\n    delete this._dice.duration;\n\n};\nRG.extend2(Spell.AnimateDead, Spell.AddComponent);\n\nSpell.AnimateDead.prototype.cast = function(args) {\n    Spell.AddComponent.prototype.cast.call(this, args);\n    const {src} = args;\n    const spellCell = src.get('SpellCell');\n    const spellArgs = spellCell.getArgs();\n    // Add callback for resurrect\n    spellArgs.callback = this.animateCallback.bind(this);\n};\n\nSpell.AnimateDead.prototype.animateCallback = function(cell: Cell) {\n    const compTypes = ['Named', 'Stats', 'Combat', 'Experience'];\n    const caster = this.getCaster();\n    if (!cell.hasItems()) {return;}\n\n    const items = cell.getItems();\n    const corpseItem = items.find(i => /corpse/.test(i.getName()));\n    const corpse = corpseItem as Corpse;\n\n    if (corpse.has('Undead')) {\n        const msg = `${caster.getName()} fails to reanimate undead remains`;\n        RG.gameMsg({cell: caster.getCell(), msg});\n        return;\n    }\n\n    if (corpse) {\n        const parser = ObjectShell.getParser();\n        const actor = parser.createActor(corpse.getActorName());\n        actor.add(new Component.Undead());\n        compTypes.forEach(compType => {\n            const comp = corpse.get(compType);\n            actor.remove(compType);\n            comp.changeEntity(actor);\n        });\n\n        // Update the rendering info to show undead actor differently\n        actor.get('Named').prepend('undead ');\n        RG.addCellStyle(RG.TYPE_ACTOR, actor.get('Named').getName(),\n            'cell-actor-undead');\n\n        const [x, y] = corpse.getXY();\n        const level = caster.getLevel();\n        const createdComp = new Component.Created();\n        createdComp.setCreator(caster);\n        actor.add(createdComp);\n        actor.add(new Component.Undead());\n\n        if (level.removeItem(corpse, x, y)) {\n            level.addActor(actor, x, y);\n            actor.addFriend(caster);\n        }\n    }\n};\n\nSpell.AnimateDead.prototype.aiShouldCastSpell = (args, cb) => {\n    const caster = args.actor;\n    const cells = Brain.getCellsAroundActor(caster);\n    const corpseCells: Cell[] = cells.filter(c => (\n        c.hasItems() && c.getItems().find(i => (\n            i.getType() === 'corpse'\n        ))\n    ));\n\n    if (corpseCells.length === 0) {return false;}\n    const cell = RNG.arrayGetRand(corpseCells);\n    aiSpellCellDone(caster, cell, cb);\n    return true;\n};\n\n//------------------------------------------------------\n/* @class Spell.Flying\n * Adds Component flying to the given entity. */\n//------------------------------------------------------\nSpell.Flying = function() {\n    Spell.AddComponent.call(this, 'Flying', 5);\n    this.setCompName('Flying');\n    this._dice.duration = Dice.create('10d5 + 5');\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellFriend(args, cb);\n    };\n};\nRG.extend2(Spell.Flying, Spell.AddComponent);\n\n//------------------------------------------------------\n/* @class Spell.Telepathy\n * Adds Component Telepathy to the given entity. */\n//------------------------------------------------------\nSpell.Telepathy = function() {\n    Spell.AddComponent.call(this, 'Telepathy', 5);\n    this.setCompName('Telepathy');\n    this._dice.duration = Dice.create('10d10 + 10');\n\n    this.aiShouldCastSpell = (args, cb) => {\n        let res = aiSpellCellFriend(args, cb);\n        if (!res) {\n            res = aiSpellCellEnemy(args, cb);\n        }\n        return res;\n    };\n};\nRG.extend2(Spell.Telepathy, Spell.AddComponent);\n\n/* Cast-function for Telepathy. Creates 2nd comp for addComp because it needs\n * to be added to src (caster). Uses postCallback() and is overly complicated.\n */\nSpell.Telepathy.prototype.cast = function(args) {\n    Spell.AddComponent.prototype.cast.call(this, args);\n    const {src} = args;\n    if (src) {\n        const spellCell = src.get('SpellCell');\n        const spellArgs = spellCell.getArgs();\n        const {addComp} = spellArgs;\n        const telepCompTarget = addComp.comp;\n\n        if (telepCompTarget.getType() === 'Telepathy') {\n            const {duration} = addComp;\n            const telepCompSrc = telepCompTarget.clone();\n\n            let newArgs: SpellArgs = {\n                dir: [0, 0], src: this._caster, spell: null\n            };\n            newArgs = getDirSpellArgs(this, newArgs);\n            newArgs.addComp = {comp: telepCompSrc, duration};\n            spellArgs.postCallback = cell => {\n                telepCompTarget.setSource(src);\n                telepCompTarget.setTarget(cell.getSentientActors()[0]);\n            };\n            newArgs.postCallback = () => {\n                telepCompSrc.setSource(telepCompTarget.getSource());\n                telepCompSrc.setTarget(telepCompTarget.getTarget());\n            };\n\n            const spellComp = new Component.SpellCell();\n            spellComp.setArgs(newArgs);\n            args.src.add(spellComp);\n        }\n    }\n    else {\n        const json = JSON.stringify(args);\n        RG.err('Spell.Telepathy', 'cast',\n            'No src found in args: ' + json);\n    }\n};\n\n//------------------------------------------------------\n/* @class Spell.Paralysis\n * Adds Component Paralysis to the given entity. */\n//------------------------------------------------------\nSpell.Paralysis = function() {\n    Spell.AddComponent.call(this, 'Paralysis', 7);\n    this.setCompName('Paralysis');\n    this.setDuration(Dice.create('1d6 + 2'));\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellEnemy(args, cb);\n    };\n};\nRG.extend2(Spell.Paralysis, Spell.AddComponent);\n\nSpell.StunningTouch = function() {\n    Spell.AddComponent.call(this, 'StunningTouch', 7);\n    this.setCompName('Stun');\n    this.setDuration(Dice.create('1d6 + 2'));\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellEnemy(args, cb);\n    };\n};\nRG.extend2(Spell.StunningTouch, Spell.AddComponent);\n\n//------------------------------------------------------\n/* @class Spell.SpiritForm\n * Adds Component Ethereal to the given entity. */\n//------------------------------------------------------\nSpell.SpiritForm = function() {\n    Spell.AddComponent.call(this, 'SpiritForm', 10);\n    this.setCompName('Ethereal');\n    this.setDuration(Dice.create('1d6 + 4'));\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellFriend(args, cb);\n    };\n};\nRG.extend2(Spell.SpiritForm, Spell.AddComponent);\n\n/* Class Frost bolt which shoots a ray to one direction from the caster. */\nSpell.FrostBolt = function() {\n    Spell.BoltBase.call(this, 'Frost bolt', 5);\n    this.setDice('damage', Dice.create('4d4 + 4'));\n    this.setRange(5);\n    this.damageType = RG.DMG.ICE;\n};\nRG.extend2(Spell.FrostBolt, Spell.BoltBase);\n\n/* Class Frost bolt which shoots a ray to one direction from the caster. */\nSpell.LightningBolt = function() {\n    Spell.BoltBase.call(this, 'Lightning bolt', 8);\n    this.damageType = RG.DMG.LIGHTNING;\n    this.setRange(6);\n    this.setDice('damage', Dice.create('6d3 + 3'));\n};\nRG.extend2(Spell.LightningBolt, Spell.BoltBase);\n\n/* Class Frost bolt which shoots a ray to one direction from the caster. */\nSpell.ScorpionsTail = function() {\n    Spell.BoltBase.call(this, 'Scorpions tail', 1);\n    this.damageType = RG.DMG.MELEE;\n    this.setRange(2);\n    this.setDice('damage', Dice.create('2d4 + 2'));\n};\nRG.extend2(Spell.ScorpionsTail, Spell.BoltBase);\n\n/* Create a poison hit. */\nSpell.ScorpionsTail.prototype.onHit = function(actor, src) {\n    addPoisonEffect(actor, src);\n};\n\nSpell.ShadowRay = function() {\n    Spell.BoltBase.call(this, 'Shadow ray', 8);\n    this.setDice('damage', Dice.create('6d4 + 4'));\n    this.setRange(8);\n    this.damageType = RG.DMG.NECRO;\n};\nRG.extend2(Spell.ShadowRay, Spell.BoltBase);\n\nSpell.CrossBolt = function() {\n    Spell.BoltBase.call(this, 'Cross bolt', 20);\n    this.damageType = RG.DMG.LIGHTNING;\n    this.setRange(6);\n    this.setDice('damage', Dice.create('6d3 + 3'));\n\n    this.cast = function(args) {\n        const chosenDir = args.dir;\n        let dirs = RG.DIR_NSEW;\n        if (chosenDir[0] !== 0 && chosenDir[1] !== 0) {\n            dirs = RG.DIR_DIAG;\n        }\n        dirs.forEach(dXdY => {\n            const newArgs = Object.assign({}, args);\n            newArgs.dir = dXdY;\n            const obj: SpellArgs = getDirSpellArgs(this, newArgs);\n            obj.damageType = this.damageType;\n            obj.damage = this.rollDice('damage');\n            const rayComp = new Component.SpellRay();\n            rayComp.setArgs(obj);\n            args.src.add(rayComp);\n        });\n    };\n\n};\nRG.extend2(Spell.CrossBolt, Spell.BoltBase);\n\n\nSpell.PoisonBreath = function() {\n    Spell.BoltBase.call(this, 'PoisonBreath', 8);\n    this.setDice('damage', Dice.create('6d4 + 4'));\n    this.setRange(8);\n    this.damageType = RG.DMG.POISON;\n    this.nActors = 2;\n    this.stopOnHit = true;\n    this._createdActor = 'Poison gas';\n    this._dice.duration = Dice.create('5d5 + 5');\n};\nRG.extend2(Spell.PoisonBreath, Spell.BoltBase);\n\nSpell.PoisonBreath.prototype.onHit = function(actor, src) {\n    addPoisonEffect(actor, src);\n    const parser = ObjectShell.getParser();\n    const cells: Cell[] = Brain.getCellsAroundActor(actor, 1);\n\n    for (let i = 0; i < this.nActors; i++) {\n        const cell = RNG.arrayGetRand(cells);\n        if (cell.isPassable() || cell.hasActors()) {\n            const cloud = parser.createActor(this._createdActor);\n            addFadingActorToCell(cloud, cell, this);\n        }\n    }\n    const msg = `Poison clouds spread from poison breath of ${src.getName()}`;\n    RG.gameSuccess({cell: actor.getCell(), msg});\n};\n\nSpell.WaterBolt = function() {\n    Spell.BoltBase.call(this, 'WaterBolt', 10);\n    this.setDice('damage', Dice.create('4d4 + 4'));\n    this.setRange(5);\n    this.damageType = RG.DMG.WATER;\n};\nRG.extend2(Spell.WaterBolt, Spell.BoltBase);\n\n\nSpell.SlimeBolt = function() {\n    Spell.BoltBase.call(this, 'SlimeBolt', 10);\n    this.setDice('damage', Dice.create('4d4 + 4'));\n    this.setRange(5);\n    this.damageType = RG.DMG.SLIME;\n    this.stopOnHit = true;\n};\nRG.extend2(Spell.SlimeBolt, Spell.BoltBase);\n\nSpell.SlimeBolt.prototype.onHit = function(actor, src) {\n    const level = actor.getLevel();\n    const cells = Brain.getCellsAroundActor(actor, 1);\n    cells.forEach(cell => {\n        if (cell.isPassable() || cell.hasActors()) {\n            const slime = new Element.ElementSlime();\n            level.addElement(slime, cell.getX(), cell.getY());\n        }\n    });\n    actor.add(new Component.Entrapped());\n    const msg = `Slime is spread around by ${src.getName()}`;\n    RG.gameSuccess({cell: actor.getCell(), msg});\n};\n\n/* Ice shield increase the defense of the caster temporarily. */\nSpell.IceShield = function() {\n    SpellBase.call(this, 'Ice shield', 6);\n\n    this._dice.duration = Dice.create('5d5 + 15');\n    this._dice.defense = Dice.create('1d6 + 3');\n\n    this.cast = args => {\n        const actor = args.src;\n        const dur = this.getDuration();\n        const combatMods = new Component.CombatMods();\n        combatMods.setDefense(this.rollDice('defense'));\n        Component.addToExpirationComp(actor, combatMods, dur);\n        RG.gameMsg({cell: actor.getCell(),\n            msg: `${actor.getName()} is surrounded by defensive aura`});\n    };\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellFriend(args, cb);\n    };\n\n};\nRG.extend2(Spell.IceShield, SpellBase);\n\nSpell.IceShield.prototype.toString = function() {\n    let str = SpellBase.prototype.toString.call(this);\n    str += ` Def: ${this._dice.defense.toString()}`;\n    return str;\n};\n\n/* Magic armor increases the protection of the caster temporarily. */\nSpell.MagicArmor = function() {\n    SpellBase.call(this, 'MagicArmor', 5);\n\n    this._dice.duration = Dice.create('6d5 + 15');\n    this._dice.protection = Dice.create('2d6 + 2');\n\n    this.cast = args => {\n        const actor = args.src;\n        const name = actor.getName();\n        const effArgs = {\n            target: actor,\n            name: 'CombatMods',\n            setters: {\n                setProtection: this.rollDice('protection')\n            },\n            duration: this._dice.duration,\n            startMsg: `${name} is surrounded by a protective aura`,\n            expireMsg: `Protective aura disappears from ${name}`\n        };\n        const effComp = new Component.Effects(effArgs);\n        effComp.setEffectType('AddComp');\n        actor.add(effComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellFriend(args, cb);\n    };\n\n};\nRG.extend2(Spell.MagicArmor, SpellBase);\n\nSpell.MagicArmor.prototype.toString = function() {\n    let str = SpellBase.prototype.toString.call(this);\n    str += ` Pro: ${this._dice.protection.toString()}`;\n    return str;\n};\n\n/* IcyPrison spell which paralyses actors for a certain duration. */\nSpell.IcyPrison = function() {\n    SpellBase.call(this, 'Icy prison', 10);\n    this._dice.duration = Dice.create('1d8 + 1');\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        const dur = this.getDuration();\n\n        const paralysis = new Component.Paralysis();\n        paralysis.setSource(args.src);\n        obj.addComp = {comp: paralysis, duration: dur};\n\n        const spellComp = new Component.SpellCell();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select a direction for casting:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellEnemy(args, cb);\n    };\n\n};\nRG.extend2(Spell.IcyPrison, SpellBase);\n\n/* A spell to summon an ice minion to fight for the caster. */\nSpell.SummonIceMinion = function() {\n    Spell.SummonBase.call(this, 'SummonIceMinion', 14);\n    this.summonType = 'Ice minion';\n\n};\nRG.extend2(Spell.SummonIceMinion, Spell.SummonBase);\n\n/* A spell to summon an ice minion to fight for the caster. */\nSpell.SummonAirElemental = function() {\n    Spell.SummonBase.call(this, 'SummonAirElemental', 20);\n    this.summonFunc = actor => {\n        return actor.name === 'air elemental';\n    };\n};\nRG.extend2(Spell.SummonAirElemental, Spell.SummonBase);\n\nSpell.SummonUndeadUnicorns = function() {\n    Spell.SummonBase.call(this, 'SummonUndeadUnicorns', 15);\n    this.nActors = '1d4 + 1';\n    this.summonFunc = actor => {\n        return actor.name === 'undead unicorn';\n    };\n};\nRG.extend2(Spell.SummonUndeadUnicorns, Spell.SummonBase);\n\n/* A spell to summon an animal to fight for the caster. */\nSpell.SummonAnimal = function() {\n    Spell.SummonBase.call(this, 'SummonAnimal', 10);\n\n    this.summonFunc = actor => {\n        const casterLevel = this.getCaster().get('Experience').getExpLevel();\n        let minDanger = Math.round(casterLevel / 3) || 1;\n        if (minDanger > 10) {minDanger = 10;}\n\n        const maxDanger = Math.round(casterLevel / 2);\n        return (actor.type === 'animal' &&\n            (actor.danger >= minDanger && actor.danger <= maxDanger)\n        );\n    };\n\n};\nRG.extend2(Spell.SummonAnimal, Spell.SummonBase);\n\n/* A spell to summon an ice minion to fight for the caster. */\nSpell.SummonDead = function() {\n    Spell.SummonBase.call(this, 'SummonDead', 15);\n    this.nActors = 4;\n    this.summonFunc = actor => {\n        return (actor.type === 'undead' &&\n            actor.name !== this.getCaster().getName());\n    };\n};\nRG.extend2(Spell.SummonDead, Spell.SummonBase);\n\n/* Summon some spiders. */\nSpell.SummonSpiders = function() {\n    Spell.SummonBase.call(this, 'SummonSpiders', 10);\n    this.nActors = '1d4 + 1';\n\n    this.summonFunc = actor => {\n        const expComp = this.getCaster().get('Experience');\n        const danger = expComp.getDanger();\n        const expLevel = expComp.getExpLevel();\n        const totalDanger = danger + Math.round(expLevel / 2);\n        return (/spider/.test(actor.name) &&\n            actor.danger <= totalDanger);\n    };\n\n};\nRG.extend2(Spell.SummonSpiders, Spell.SummonBase);\n\n/* Based on caster's type, summons actors for help. */\nSpell.SummonKin = function() {\n    Spell.SummonBase.call(this, 'SummonKin', 10);\n\n    this.summonFunc = actor => {\n        const casterType = this.getCaster().getType();\n        const expComp = this.getCaster().get('Experience');\n        const danger = expComp.getDanger();\n        const expLevel = expComp.getExpLevel();\n        const totalDanger = danger + Math.round(expLevel / 2);\n        return (actor.type === casterType &&\n            actor.danger <= totalDanger);\n    };\n};\nRG.extend2(Spell.SummonKin, Spell.SummonBase);\n\n\nSpell.SummonFlyingEyes = function() {\n    Spell.SummonBase.call(this, 'SummonFlyingEyes', 4);\n    this.summonType = 'flying eye';\n    this.nActors = '1d6 + 1';\n    this._dice.duration = Dice.create('10d5 + 10');\n\n    this.postSummonCallback = (cell, args, minion) => {\n        // Each minion fades out after a period\n        const fadingComp = new Component.Fading();\n        const duration = this.getDuration();\n        fadingComp.setDuration(duration);\n        minion.add(fadingComp);\n\n        // Link caster and minion with telepathy\n        const teleCompTarget = new Component.Telepathy();\n        teleCompTarget.setTarget(minion);\n        teleCompTarget.setSource(this._caster);\n        const teleCompSrc = teleCompTarget.clone();\n        Component.addToExpirationComp(minion, teleCompTarget, duration);\n        Component.addToExpirationComp(this._caster, teleCompSrc, duration);\n    };\n\n    /* Cast only when no telepathic connections. */\n    this.aiShouldCastSpell = (args, cb) => {\n        const {actor} = args;\n        if (!actor.has('Telepathy')) {\n            args.dir = [0, 0];\n            cb(actor, args);\n            return true;\n        }\n        return false;\n    };\n\n};\nRG.extend2(Spell.SummonFlyingEyes, Spell.SummonBase);\n\n/* PowerDrain spell which cancels enemy spell and gives power to the caster of\n* this spell. */\nSpell.PowerDrain = function() {\n    SpellBase.call(this, 'PowerDrain', 15);\n    this._dice.duration = Dice.create('20d5 + 10');\n\n    this.cast = args => {\n        const actor = args.src;\n        const dur = this.getDuration();\n        const drainComp = new Component.PowerDrain();\n        Component.addToExpirationComp(actor, drainComp, dur);\n        RG.gameMsg({cell: actor.getCell(),\n          msg: `${actor.getName()} is surrounded by purple aura`});\n    };\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        this.compFuncArgs = {enemy: args.enemy};\n        args.compFunc = this.aiCompFunc.bind(this); // Used by aiSpellCellSelf\n        return aiSpellCellSelf(args, cb);\n    };\n\n    this.aiCompFunc = actor => {\n        const {enemy} = this.compFuncArgs;\n        if (!enemy) {return false;}\n\n        if (!actor.has('PowerDrain')) {\n            if (enemy.has('SpellPower')) {\n                return true;\n            }\n        }\n        return false;\n\n    };\n\n};\nRG.extend2(Spell.PowerDrain, SpellBase);\n\n//------------------------------------------------------\n/* IceArrow spell fires a missile to specified square. */\n//------------------------------------------------------\nSpell.IceArrow = function() {\n    Spell.Missile.call(this, 'IceArrow', 16);\n    this.setRange(9);\n    this.damageType = RG.DMG.ICE;\n    this.ammoName = 'Ice arrow';\n};\nRG.extend2(Spell.IceArrow, Spell.Missile);\n\n//------------------------------------------------------\n/* Lighting arrow spell fires a missile to specified cell. */\n//------------------------------------------------------\nSpell.LightningArrow = function() {\n    Spell.Missile.call(this, 'LightningArrow', 14);\n    this.setRange(8);\n    this.damageType = RG.DMG.LIGHTNING;\n    this.ammoName = 'Lightning arrow';\n};\nRG.extend2(Spell.LightningArrow, Spell.Missile);\n\n//------------------------------------------------------\n/* Energy arrow spell fires a missile to specified cell. */\n//------------------------------------------------------\nSpell.EnergyArrow = function() {\n    Spell.Missile.call(this, 'EnergyArrow', 2);\n    this.setRange(5);\n    this.setDice('damage', Dice.create('1d4 + 1'));\n    this.damageType = RG.DMG.ENERGY;\n    this.ammoName = 'Energy arrow';\n};\nRG.extend2(Spell.EnergyArrow, Spell.Missile);\n\n//------------------------------------------------------\n/* Poison arrow fires a missile to specified cell. Adds\n * poison to target on hit. */\n//------------------------------------------------------\nSpell.PoisonArrow = function() {\n    Spell.Missile.call(this, 'PoisonArrow', 20);\n    this.setRange(10);\n    this.setDice('damage', Dice.create('1d6 + 2'));\n    this.damageType = RG.DMG.POISON;\n    this.ammoName = 'Poison arrow';\n};\nRG.extend2(Spell.PoisonArrow, Spell.Missile);\n\nSpell.PoisonArrow.prototype.cast = function(args) {\n    Spell.Missile.prototype.cast.call(this, args);\n    const missComp = args.src.get('SpellMissile');\n    missComp.onHit = this.onHit.bind(this);\n};\n\nSpell.PoisonArrow.prototype.onHit = function(actor) {\n    const src = this._caster;\n    addPoisonEffect(actor, src);\n};\n\n/* A magic arrow which entangles the target in webs. */\nSpell.ArrowOfWebs = function() {\n    Spell.Missile.call(this, 'ArrowOfWebs', 10);\n    this.setRange(7);\n    this.setDice('damage', Dice.create('1d6 + 2'));\n    this.damageType = RG.DMG.PIERCE;\n    this.ammoName = 'Arrow of webs';\n};\nRG.extend2(Spell.ArrowOfWebs, Spell.Missile);\n\nSpell.ArrowOfWebs.prototype.cast = function(args) {\n    Spell.Missile.prototype.cast.call(this, args);\n    const missComp = args.src.get('SpellMissile');\n    missComp.onHit = this.onHit.bind(this);\n};\n\nSpell.ArrowOfWebs.prototype.onHit = function(actor) {\n    const src = this._caster;\n    // TODO create a web effect, add more webs for\n    // powerful casters\n    const effArgs = {\n        target: {target: actor.getCell()},\n        targetType: ['cell'],\n        elementName: 'Web', effectType: 'AddElement',\n        numAllowed: 1\n    };\n    const effComp = new Component.Effects(effArgs);\n    // effComp.setEffectType('AddElement');\n    src.add(effComp);\n};\n\n//------------------------------------------------------\n/* Rock storm shoots a missile to all directions. */\n//------------------------------------------------------\nSpell.RockStorm = function() {\n    Spell.Missile.call(this, 'RockStorm', 35);\n    this.setRange(4);\n    this.setDice('damage', Dice.create('5d4 + 1'));\n    this.damageType = RG.DMG.MELEE;\n    this.ammoName = 'Huge rock';\n\n    this.cast = function(args) {\n        const [x, y] = [args.src.getX(), args.src.getY()];\n        Object.values(RG.DIR).forEach(dXdY => {\n            const tX = x + this.getRange() * dXdY[0];\n            const tY = y + this.getRange() * dXdY[1];\n            const obj: SpellArgs = {\n                from: [x, y],\n                spell: this,\n                src: args.src,\n                to: [tX, tY]\n            };\n            obj.damageType = this.damageType;\n            obj.damage = this.getDamage();\n            obj.destroyItem = false; // Keep rocks after firing\n            const missComp = new Component.SpellMissile();\n            missComp.setArgs(obj);\n            args.src.add(missComp);\n        });\n    };\n\n    this.getSelectionObject = function(actor) {\n        return Spell.getSelectionObjectSelf(this, actor);\n    };\n};\nRG.extend2(Spell.RockStorm, Spell.Missile);\n\n/* MindControl spell takes over an enemy for a certain number of turns. */\nSpell.MindControl = function() {\n    SpellBase.call(this, 'MindControl', 25);\n    this._dice.duration = Dice.create('1d6 + 3');\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        const dur = this.getDuration();\n\n        const mindControl = new Component.MindControl();\n        mindControl.setSource(args.src);\n        obj.addComp = {comp: mindControl, duration: dur};\n\n        const spellComp = new Component.SpellCell();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select an actor to control:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellEnemy(args, cb);\n    };\n\n};\nRG.extend2(Spell.MindControl, SpellBase);\n\n/* Blizzard spell produce damaging effect over certain area. */\nSpell.Blizzard = function() {\n    Spell.AreaBase.call(this, 'Blizzard', 35);\n    this.setDice('damage', Dice.create('5d5 + 5'));\n    this.damageType = RG.DMG.ICE;\n    this.setRange(6);\n};\nRG.extend2(Spell.Blizzard, Spell.AreaBase);\n\nSpell.Blizzard.prototype.onHit = function(actor /* , src*/) {\n    actor.add(new Component.Coldness());\n};\n\nSpell.EnergyStorm = function() {\n    Spell.AreaBase.call(this, 'EnergyStorm', 20);\n    this.setDice('damage', Dice.create('3d4 + 3'));\n    this.damageType = RG.DMG.ENERGY;\n};\nRG.extend2(Spell.EnergyStorm, Spell.AreaBase);\n\n/* Healing spell, duh. */\nSpell.Heal = function() {\n    SpellBase.call(this, 'Heal', 6);\n    this._dice.healing = Dice.create('2d4');\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        obj.targetComp = 'Health';\n        obj.set = 'addHP';\n        obj.value = this._dice.healing.roll();\n        const spellComp = new Component.SpellCell();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select a direction for healing:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n    this.aiShouldCastSpell = (args, cb) => {\n        return aiSpellCellFriend(args, cb);\n    };\n\n};\nRG.extend2(Spell.Heal, SpellBase);\n\nSpell.RingOfFire = function() {\n    Spell.RingBase.call(this, 'RingOfFire', 10);\n    this._dice.duration = Dice.create('10d10');\n    this._range = 2;\n    this._createdActor = 'Fire';\n};\nRG.extend2(Spell.RingOfFire, Spell.RingBase);\n\nSpell.RingOfFrost = function() {\n    Spell.RingBase.call(this, 'RingOfFrost', 10);\n    this._dice.duration = Dice.create('10d10');\n    this._range = 2;\n    this._createdActor = 'Ice flame';\n};\nRG.extend2(Spell.RingOfFrost, Spell.RingBase);\n\nSpell.RingOfEnergy = function() {\n    Spell.RingBase.call(this, 'RingOfEnergy', 10);\n    this._dice.duration = Dice.create('10d10');\n    this._range = 3;\n    this._createdActor = 'Forcefield';\n};\nRG.extend2(Spell.RingOfEnergy, Spell.RingBase);\n\nSpell.PoisonCloud = function() {\n    Spell.RingBase.call(this, 'PoisonCloud', 15);\n    this._dice.duration = Dice.create('10d10');\n    this._range = 1;\n    this._createdActor = 'Poison gas';\n};\nRG.extend2(Spell.PoisonCloud, Spell.RingBase);\n\nSpell.ForceField = function() {\n    SpellBase.call(this, 'ForceField', 5);\n    this._dice.duration = Dice.create('10d10');\n\n    this.cast = function(args) {\n        const obj: SpellArgs = getDirSpellArgs(this, args);\n        obj.callback = this.castCallback.bind(this, args);\n\n        const spellComp = new Component.SpellSelf();\n        spellComp.setArgs(obj);\n        args.src.add(spellComp);\n    };\n\n    this.getSelectionObject = function(actor) {\n        const msg = 'Select a direction for the forcefield:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    };\n\n    this.castCallback = (args) => {\n        const parser = ObjectShell.getParser();\n        const caster = this._caster;\n        const level = caster.getLevel();\n        const {dir} = args;\n        const [pX, pY] = this._caster.getXY();\n        const [tX, tY] = [pX + dir[0], pY + dir[1]];\n\n        const cells = this.getThreeCells(level.getMap(), dir, tX, tY);\n        cells.forEach(cell => {\n            if (cell.isPassable() || !cell.hasActors()) {\n                const forcefield = parser.createActor('Forcefield');\n                level.addActor(forcefield, cell.getX(), cell.getY());\n                const fadingComp = new Component.Fading();\n                const duration = this.getDuration();\n                fadingComp.setDuration(duration);\n                forcefield.add(fadingComp);\n            }\n        });\n    };\n\n    this.getThreeCells = function(map, dir, tX, tY) {\n        if (dir[0] === 0) { // up or down\n            return [\n                map.getCell(tX - 1, tY),\n                map.getCell(tX, tY),\n                map.getCell(tX + 1, tY)\n            ];\n        }\n        else if (dir[1] === 0) { // left or right\n            return [\n                map.getCell(tX, tY - 1),\n                map.getCell(tX, tY),\n                map.getCell(tX, tY + 1)\n            ];\n        }\n        else if (dir[0] === -1) {\n            return [\n                map.getCell(tX + 1, tY),\n                map.getCell(tX, tY),\n                map.getCell(tX, tY - dir[1])\n            ];\n        }\n        else {\n            return [\n                map.getCell(tX - 1, tY),\n                map.getCell(tX, tY),\n                map.getCell(tX, tY - dir[1])\n            ];\n        }\n    };\n};\nRG.extend2(Spell.ForceField, SpellBase);\n\nclass IcyTouch extends Spell.MultiSpell {\n\n    constructor() {\n        super('IcyTouch', 5);\n        this._spells.push(new Spell.GraspOfWinter());\n        this._spells.push(new Spell.RingOfFrost());\n    }\n\n    public getSelectionObject(actor) {\n        const msg = 'Select a direction for touching:';\n        return Spell.getSelectionObjectDir(this, actor, msg);\n    }\n\n}\nSpell.IcyTouch = IcyTouch;\n\nSpell.addAllSpells = book => {\n    book.addSpell(new Spell.AnimateDead());\n    book.addSpell(new Spell.ArrowOfWebs());\n    book.addSpell(new Spell.Blizzard());\n    book.addSpell(new Spell.Charm());\n    book.addSpell(new Spell.CrossBolt());\n    book.addSpell(new Spell.DispelMagic());\n    book.addSpell(new Spell.EnergyArrow());\n    book.addSpell(new Spell.Flying());\n    book.addSpell(new Spell.ForceField());\n    book.addSpell(new Spell.FrostBolt());\n    book.addSpell(new Spell.GraspOfWinter());\n    book.addSpell(new Spell.Heal());\n    book.addSpell(new Spell.IceArrow());\n    book.addSpell(new Spell.IceShield());\n    book.addSpell(new Spell.IcyPrison());\n    book.addSpell(new Spell.IcyTouch());\n    book.addSpell(new Spell.LightningArrow());\n    book.addSpell(new Spell.LightningBolt());\n    book.addSpell(new Spell.MagicArmor());\n    book.addSpell(new Spell.MindControl());\n    book.addSpell(new Spell.Paralysis());\n    book.addSpell(new Spell.PoisonArrow());\n    book.addSpell(new Spell.PoisonBreath());\n    book.addSpell(new Spell.PoisonCloud());\n    book.addSpell(new Spell.PowerDrain());\n    book.addSpell(new Spell.RingOfEnergy());\n    book.addSpell(new Spell.RingOfFire());\n    book.addSpell(new Spell.RingOfFrost());\n    book.addSpell(new Spell.RockStorm());\n    book.addSpell(new Spell.SlimeBolt());\n    book.addSpell(new Spell.SpiritForm());\n    book.addSpell(new Spell.SummonAirElemental());\n    book.addSpell(new Spell.SummonAnimal());\n    book.addSpell(new Spell.SummonDead());\n    book.addSpell(new Spell.SummonFlyingEyes());\n    book.addSpell(new Spell.SummonIceMinion());\n    book.addSpell(new Spell.SummonKin());\n    book.addSpell(new Spell.SummonUndeadUnicorns());\n    book.addSpell(new Spell.Telepathy());\n};\n\nexport {Spell};\n","\nimport RG from '../rg';\nimport * as GoalsTop from '../goals-top';\nimport {\n    BrainSentient,\n    ACTION_ALREADY_DONE\n} from './brain';\nimport {Evaluator, EvaluatorCastSpell} from '../evaluators';\nimport * as Component from '../component/component';\nimport {Random} from '../random';\n\ntype ActionCallback = import('../time').ActionCallback;\n\nconst RNG = Random.getRNG();\n\nconst Brain: any = {};\n\n/* Brain object for testing goal-based actors. */\nexport class BrainGoalOriented extends BrainSentient {\n    protected goal: GoalsTop.GoalTop;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalOriented');\n        this.goal = new GoalsTop.ThinkBasic(actor);\n    }\n\n    public getGoal(): GoalsTop.GoalTop {return this.goal;}\n    public setGoal(goal) {this.goal = goal;}\n\n    /* Must return function. */\n    public decideNextAction(): ActionCallback | null {\n        this._cache.seen = null;\n        this.goal.process();\n        this._cache.seen = null;\n        return ACTION_ALREADY_DONE;\n    }\n\n    public toJSON() {\n        const json: any = super.toJSON();\n        json.goal = this.goal.toJSON();\n        return json;\n    }\n}\nBrain.GoalOriented = BrainGoalOriented;\n\n/* Brain object for spellcasting actors. This model focuses on aggressive\n * spellcasting intended to harm opponents. */\nexport class BrainSpellCaster extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('SpellCaster');\n        this.goal = new GoalsTop.ThinkSpellcaster(actor);\n        this.goal.setBias({CastSpell: 2.0, AttackActor: 0.7});\n        const spellEval = this.goal.getEvaluator('CastSpell') as EvaluatorCastSpell;\n        spellEval.setCastingProbability(0.8);\n    }\n}\nBrain.SpellCaster = BrainSpellCaster;\n\nexport class BrainExplorer extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('Explorer');\n        this.goal.removeEvaluators();\n        this.goal.addEvaluator(new Evaluator.Explore());\n    }\n}\nBrain.Explorer = BrainExplorer;\n\nexport class BrainSpirit extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('Spirit');\n        this.goal.removeEvaluators();\n        this.goal.addEvaluator(new Evaluator.Explore());\n    }\n}\nBrain.Spirit = BrainSpirit;\n\nexport class BrainThief extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('Thief');\n        this.goal.addEvaluator(new Evaluator.Thief(1.2));\n        this.goal.setBias({Thief: 1.2, AttackActor: 0.7});\n    }\n}\nBrain.Thief = BrainThief;\n\n/* Brain-object for animals. */\nexport class BrainAnimal extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('Animal');\n        this.goal = new GoalsTop.ThinkBasic(actor);\n        this._memory.addEnemyType('player');\n        this._memory.addEnemyType('human');\n        this.getGoal = () => this.goal;\n        this.setGoal = goal => {this.goal = goal;};\n    }\n\n    /* Must return function. */\n    public decideNextAction(): ActionCallback | null {\n        this._cache.seen = null;\n        this.goal.process();\n        this._cache.seen = null;\n        return ACTION_ALREADY_DONE;\n    }\n}\nBrain.Animal = BrainAnimal;\n\n/* Brain object for testing goal-based actors. */\nexport class BrainCommander extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('Commander');\n        this.goal = new GoalsTop.ThinkCommander(actor);\n    }\n\n    /* Must return function. */\n    public decideNextAction(): ActionCallback | null {\n        this._cache.seen = null;\n        this.goal.process();\n        this._cache.seen = null;\n        return ACTION_ALREADY_DONE;\n    }\n}\nBrain.Commander = BrainCommander;\n\n/* Simple brain used by the non-moving flame elements. They emit damage\n * components in the cells they are located in. */\nexport class BrainFlame extends BrainSentient {\n    constructor(actor) {\n        super(actor);\n        this.setType('Flame');\n    }\n\n    public decideNextAction(): ActionCallback | null {\n        const cell = this._actor.getCell();\n        const actors = cell.getActors();\n        actors.forEach(actor => {\n            const damaging = this.getActor().get('Damaging');\n            if (damaging) {\n                const flameComp = new Component.Flame();\n                flameComp.setSource(this._actor);\n                flameComp.setDamageType(damaging.getDamageType());\n                actor.add(flameComp);\n            }\n        });\n        return ACTION_ALREADY_DONE;\n    }\n}\nBrain.Flame = BrainFlame;\n\n/* Brain for non-sentient clouds. Same as Flame, except moves first\n * randomly and then emits the damage. */\nexport class BrainCloud extends BrainFlame {\n    public chanceToMove: number;\n\n    constructor(actor) {\n        super(actor);\n        this.setType('Cloud');\n        this.chanceToMove = 0.2;\n    }\n\n    public decideNextAction(): ActionCallback | null {\n        if (RNG.getUniform() <= this.chanceToMove) {\n            const dir = RNG.getRandDir();\n            const [newX, newY] = RG.newXYFromDir(dir, this._actor);\n            const level = this._actor.getLevel();\n            const map = level.getMap();\n            if (map.hasXY(newX, newY)) {\n                const movComp = new Component.Movement(newX, newY, level);\n                this._actor.add(movComp);\n            }\n        }\n        return super.decideNextAction.call(this);\n    }\n}\nBrain.Cloud = BrainCloud;\n\n/* This brain switched for player-controlled actors when MindControl\n * is cast on them. It acts as \"paralysis\" at the moment. */\nexport class BrainMindControl extends BrainGoalOriented {\n    constructor(actor) {\n        super(actor);\n        this.setType('MindControl');\n        this.goal = new GoalsTop.ThinkBasic(actor);\n\n        this.getGoal = () => this.goal;\n        this.setGoal = goal => {this.goal = goal;};\n    }\n\n    public decideNextAction(): ActionCallback | null {\n        // At the moment does nothing, it could attack the\n        // enemies of the source of MindControl\n        return ACTION_ALREADY_DONE;\n    }\n}\nBrain.MindControl = BrainMindControl;\n","\n/* Evaluators used in the battle-specific goals. */\n\nimport {GoalsBattle} from './goals-battle';\nimport {Evaluator} from './evaluators';\n\nexport const EvaluatorsBattle: any = {};\n\n//---------------------------------------------------------------------------\n// BATTLE EVALUATORS\n//---------------------------------------------------------------------------\n\n/* Evaluator for taking on command goal. */\nexport class EvaluatorWinBattle extends Evaluator.Base {\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.type = 'WinBattle';\n    }\n\n    calculateDesirability(actor) {\n        if (actor.has('InBattle')) {\n            // can see an army?\n            // required to adjust previous command or not\n            return this.actorBias;\n        }\n        return Evaluator.NOT_POSSIBLE;\n    }\n\n    setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const goal = new GoalsBattle.WinBattle(actor);\n        topGoal.addGoal(goal);\n    }\n}\nEvaluatorsBattle.WinBattle = EvaluatorWinBattle;\n\n/* Evaluator for retreating from battle command. */\nexport class EvaluatorRetreat extends Evaluator.Base {\n\n    constructor(actorBias) {\n        super(actorBias);\n        this.cooldown = 5;\n        this.type = 'Retreat';\n    }\n\n    calculateDesirability() {\n        if (this.cooldown === 0) {\n            // can see an army?\n            // required to adjust previous command or not\n            return this.actorBias;\n        }\n        else {\n            --this.cooldown;\n        }\n        return 0;\n    }\n\n    setActorGoal(actor) {\n        const topGoal = actor.getBrain().getGoal();\n        const goal = new GoalsBattle.Retreat(actor);\n        topGoal.addGoal(goal);\n    }\n}\nEvaluatorsBattle.Retreat = EvaluatorRetreat;\n","\nimport * as Ability from '../abilities';\nimport {ComponentBase, Component} from './component.base';\n\nconst UniqueDataComponent = Component.UniqueDataComponent;\n\n/* Abilities which stores the separate (non-spell) abilities of actor. */\nexport const Abilities = UniqueDataComponent('Abilities', {});\n\nAbilities.prototype._init = function() {\n    const _addCb = () => {\n        const abilities = new Ability.Abilities(this.getEntity());\n        // This is mainly used if component is restored\n        if (Array.isArray(this.abilities)) {\n            this.abilities.forEach(name => {\n                const abil = new Ability[name]();\n                abilities.addAbility(abil);\n            });\n        }\n        this.abilities = abilities;\n        this.removeCallbacks('onAdd');\n    };\n    this.addCallback('onAdd', _addCb);\n};\n\nAbilities.prototype.setAbilities = function(abils: Ability.Abilities) {\n    this.abilities = abils;\n};\n\nAbilities.prototype.createMenu = function() {\n    return this.abilities.getMenu();\n};\n\nAbilities.prototype.addAbility = function(ability) {\n    this.abilities.addAbility(ability);\n};\n\nAbilities.prototype.toJSON = function() {\n    const json = ComponentBase.prototype.toJSON.call(this);\n    json.setAbilities = this.abilities.toJSON();\n    return json;\n};\n","\nimport RG from './rg';\nimport * as Element from './element';\nimport {BaseActor} from './actor';\nimport * as Item from './item';\nimport {ELEM_MAP} from '../data/elem-constants';\nimport {TCoord} from './interfaces';\n\nconst {TYPE_ACTOR, TYPE_ITEM, TYPE_ELEM} = RG;\n\ntype ItemBase = Item.ItemBase;\ntype PropsType = Element.ElementBase | ItemBase | BaseActor;\ntype Door = Element.ElementDoor;\ntype LeverDoor = Element.ElementLeverDoor;\ntype Stairs = Element.ElementStairs;\ntype SentientActor = import('./actor').SentientActor;\n\ninterface CellProps {\n    actors?: PropsType[];\n    items?: PropsType[];\n    elements?: PropsType[];\n}\n\nexport interface CellJSON {\n    t: string; // Type of this cell\n    ex?: number; // Explored by player?\n    elements?: Element.ElementJSON[];\n}\n\n/* Object representing one game cell. It can hold actors, items, traps or\n * elements. Cell has x,y for convenient access to coordinates.\n * */\n// const Cell = function(x: number, y: number, elem: Element) { // {{{2\nexport class Cell {\n\n    // Used in Map.Cell for faster access\n    public _explored: boolean;\n    public _x: number;\n    public _y: number;\n\n    private _baseElem: Element.ElementBase;\n    private _p: CellProps;\n    private _lightPasses: boolean;\n    private _isPassable: boolean;\n\n    constructor(x: number, y: number, elem?: Element.ElementBase) { // {{{2\n\n        this._baseElem = elem;\n        this._x = x;\n        this._y = y;\n        this._explored = false;\n\n        this._p = {}; // Cell properties are assigned here\n\n        this._lightPasses = elem ? elem.lightPasses() : true;\n        this._isPassable = elem ? elem.isPassable() : true;\n    }\n\n    public getX(): number {return this._x;}\n    public getY(): number {return this._y;}\n    public getXY(): TCoord {return [this._x, this._y];}\n    public setX(x: number) {this._x = x;}\n    public setY(y: number) {this._y = y;}\n    public setXY(xy: TCoord) {this._x = xy[0]; this._y = xy[1];}\n\n    public isAtXY(x: number, y: number): boolean {\n        return x === this._x && y === this._y;\n    }\n\n    public getKeyXY(): string {\n        return this._x + ',' + this._y;\n    }\n\n    /* Sets/gets the base element for this cell. There can be only one element.*/\n    public setBaseElem(elem: Element.ElementBase): void {\n        this._baseElem = elem;\n        this._lightPasses = elem.lightPasses();\n        this._isPassable = elem.isPassable();\n    }\n\n    public getBaseElem(): Element.ElementBase { return this._baseElem; }\n\n    /* Returns true if the cell has props of given type.*/\n    public hasProp(prop): boolean {\n        return this._p.hasOwnProperty(prop);\n    }\n\n    /* Returns the given type of props, or null if does not have any props of that\n     * type. */\n    public getProp(prop: string): PropsType[] | null {\n        if (this._p.hasOwnProperty(prop)) {\n            return this._p[prop];\n        }\n        return null;\n    }\n\n    /* Queries cell about possible elements. */\n    public hasElements(): boolean {\n        return this.hasProp(TYPE_ELEM);\n    }\n\n    public getElements(): Element.ElementBase[] | null {\n        return this.getProp(TYPE_ELEM) as Element.ElementBase[];\n    }\n\n    /* Returns true if cell has any actors.*/\n    public hasActors(): boolean {\n        return this.hasProp(TYPE_ACTOR);\n    }\n\n    public getActors(): BaseActor[] | null {\n        return (this.getProp(TYPE_ACTOR) as BaseActor[]);\n    }\n\n    public getFirstActor(): BaseActor | null {\n        const actors = this.getProp(TYPE_ACTOR) as BaseActor[];\n        if (actors && actors.length > 0) {\n            return actors[0];\n        }\n        return null;\n    }\n\n    public getSentientActors(): SentientActor[] {\n        const actors = this.getActors();\n        if (actors) {\n            return actors.filter(actor => (\n                !actor.has('NonSentient'))\n            ) as SentientActor[];\n        }\n        return []; // as SentientActor[];\n    }\n\n    public hasItems(): boolean {return this.hasProp(TYPE_ITEM);}\n    public getItems(): ItemBase[] | null {\n        return (this.getProp(TYPE_ITEM) as ItemBase[]);\n    }\n\n    /* Checks if this cell has a marker with given tag. */\n    public hasMarker(tag: string): boolean {\n        if (this.hasElements()) {\n            const elems = this.getElements() as Element.ElementBase[];\n            for (let i = 0; i < elems.length; i++) {\n                if (elems[i].getType() === 'marker') {\n                    if (elems[i].getTag() === tag) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Returns true if cell has any props. */\n    public hasProps(): boolean {\n        return Object.keys(this._p).length > 0;\n    }\n\n    /* Returns true if cell has stairs.*/\n    public hasStairs(): boolean {\n        const propType = this.getConnection();\n        if (propType) {\n            const name = propType.getName();\n            return (/stairs(Up|Down)/).test(name);\n        }\n        return false;\n    }\n\n    /* Returns true if cell has passage to another tile. */\n    public hasPassage(): boolean {\n        const propType = this.getConnection();\n        if (propType) {return propType.getName() === 'passage';}\n        return false;\n    }\n\n    public hasShop(): boolean {\n        return this.hasPropType('shop');\n    }\n\n    public getShop(): Element.ElementShop | null {\n        const shopU = this.getPropType('shop')[0] as unknown;\n        return shopU as Element.ElementShop;\n    }\n\n    public hasDoor(): boolean {\n        return this.hasPropType('door');\n    }\n\n    public hasClosedDoor(): boolean {\n        if (this.hasDoor()) {\n            const door: unknown = this.getPropType('door')[0];\n            return (door as Door).isClosed();\n        }\n    }\n\n    public hasConnection(): boolean {\n        return this.hasPropType('connection');\n    }\n\n    public hasHouse(): boolean {\n        return this._baseElem.getType() === 'floorhouse';\n    }\n\n    public hasConnectionType(type): boolean {\n        if (this.hasConnection()) {\n            const connection = this.getConnection();\n            return connection.getName() === type;\n        }\n        return false;\n    }\n\n    public hasTown(): boolean {\n        return this.hasConnectionType('town');\n    }\n\n    public hasBattle(): boolean {\n        return this.hasConnectionType('battle');\n    }\n\n    public hasMountain(): boolean {\n        return this.hasConnectionType('mountain');\n    }\n\n    /* Return stairs in this cell, or null if there are none.*/\n    public getStairs(): Stairs | null {\n        if (this.hasStairs()) {\n            return this.getConnection();\n        }\n        return null;\n    }\n\n    public getConnection(): Stairs | null {\n        if (this.hasPropType('connection')) {\n            const connU = this.getPropType('connection')[0] as unknown;\n            return connU as Stairs;\n        }\n        return null;\n    }\n\n    /* Returns passage in this cell, or null if not found. */\n    public getPassage(): Stairs | null {\n        if (this.hasPassage()) {\n            return this.getConnection();\n        }\n        return null;\n    }\n\n    /* Returns true if light passes through this map cell.*/\n    public lightPasses(): boolean {\n        // if (!this._baseElem.lightPasses()) {return false;}\n        if (!this._lightPasses) {return false;}\n        // if (this.hasProp(TYPE_ELEM)) {\n        const elems = this._p[TYPE_ELEM];\n        if (elems) {\n            if (elems.length === 1) {\n                if (elems[0].has('Opaque')) {return false;}\n            }\n            else {\n                for (let i = 0; i < elems.length; i++) {\n                    if (elems[i].has('Opaque')) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public isPassable(): boolean {return this.isFree();}\n\n    public isPassableByAir(): boolean {\n        return this._baseElem.isPassableByAir();\n    }\n\n    public isDangerous(): boolean {\n        if (this._p[TYPE_ACTOR]) {\n            const actors = this.getProp(TYPE_ACTOR);\n            if (actors) {\n                return actors[0].has('Damaging');\n            }\n        }\n        return false;\n    }\n\n    public hasObstacle(): boolean {\n        return this._baseElem.isObstacle();\n    }\n\n    public isSpellPassable(): boolean {\n        return this._baseElem.isSpellPassable();\n    }\n\n    public setExplored() {this._explored = true;}\n    public isExplored(): boolean {return this._explored;}\n\n    /* Returns true if it's possible to move to this cell.*/\n    public isFree(isFlying = false): boolean {\n        // if (!isFlying && !this._baseElem.isPassable()) {return false;}\n        if (!isFlying && !this._isPassable) {return false;}\n\n        if (this.hasProp(TYPE_ACTOR)) {\n            for (let i = 0; i < this._p.actors.length; i++) {\n                if (!this._p.actors[i].has('Ethereal')) {return false;}\n            }\n            return true;\n        }\n        else if (this.hasProp(TYPE_ELEM)) {\n            if (this.hasPropType('door')) {\n                const door = this.getDoor();\n                return door.isOpen();\n            }\n            else if (this.hasPropType('leverdoor')) {\n                const leverDoor = this.getLeverDoor();\n                return leverDoor.isOpen();\n            }\n        }\n\n        // Handle flying/non-flying here\n        if (isFlying) {\n            return this._baseElem.isPassableByAir();\n        }\n        else {\n            return true;\n        }\n    }\n\n    public getDoor(): Door | null {\n        if (this.hasPropType('door')) {\n            const door = this.getPropType('door')[0] as unknown;\n            return (door as Door);\n        }\n        return null;\n    }\n\n    public getLeverDoor(): LeverDoor | null {\n        if (this.hasPropType('leverdoor')) {\n            const door = this.getPropType('leverdoor')[0] as unknown;\n            return (door as LeverDoor);\n        }\n        return null;\n    }\n\n    /* Add given obj with specified property type.*/\n    public setProp(prop: string, obj: PropsType): void {\n        if (obj.getType() === 'connection' && this.hasConnection()) {\n            let msg = `${this._x},${this._y}`;\n            msg += `\\nExisting: ${JSON.stringify(this.getConnection())}`;\n            msg += `\\nTried to add: ${JSON.stringify(obj)}`;\n            RG.err('Cell', 'setProp',\n                `Tried to add 2nd connection: ${msg}`);\n        }\n        if (!this._p.hasOwnProperty(prop)) {\n            this._p[prop] = [];\n            this._p[prop].push(obj);\n        }\n        // Reorders actors to show them in specific order with GUI\n        else if (prop === TYPE_ACTOR) {\n            if (!obj.has('NonSentient') && !obj.has('Ethereal')) {\n                this._p[prop].unshift(obj);\n            }\n            else {\n                this._p[prop].push(obj);\n            }\n        }\n        else {\n            this._p[prop].push(obj);\n        }\n\n        if ((obj as ItemBase).isOwnable) {\n            (obj as ItemBase).setOwner(this);\n        }\n    }\n\n    public removeProps(propType): void {\n        delete this._p[propType];\n    }\n\n    /* Removes the given object from cell properties.*/\n    public removeProp(prop: string, obj): boolean {\n        if (this.hasProp(prop)) {\n            const props = this._p[prop];\n            const index = props.indexOf(obj);\n            if (index === -1) {return false;}\n            this._p[prop].splice(index, 1);\n            if (this._p[prop].length === 0) {\n                delete this._p[prop];\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /* Returns string representation of the cell.*/\n    public toString() {\n        let str = 'Map.Cell ' + this._x + ', ' + this._y;\n        str += ' explored: ' + this._explored;\n        str += ' passes light: ' + this.lightPasses();\n        Object.keys(this._p).forEach(prop => {\n            const arrProps = this._p[prop];\n            for (let i = 0; i < arrProps.length; i++) {\n                if (arrProps[i].hasOwnProperty('toString')) {\n                    str += arrProps[i].toString();\n                }\n                else if (arrProps[i].hasOwnProperty('toJSON')) {\n                    str += JSON.stringify(arrProps[i].toJSON());\n                }\n            }\n        });\n        return str;\n    }\n\n    /* Returns true if the cell has an usable element. */\n    public hasUsable(): boolean {\n        const elems = this.getProp(RG.TYPE_ELEM) as Element.ElementBase[];\n        if (elems) {\n            for (let i = 0; i < elems.length; i++) {\n                if (elems[i].onUse) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public toJSON(): CellJSON {\n        const json: CellJSON = {\n            t: ELEM_MAP.elemTypeToIndex[this._baseElem.getType()]\n        };\n        if (this._explored) {json.ex = 1;}\n        return json;\n    }\n\n    /* Returns name (or type if unnamed) for each prop in this cell, including the\n     * base element type. */\n    public getPropNames(): string[] {\n        const result = [this._baseElem.getType()];\n        const keys = Object.keys(this._p);\n        keys.forEach(propType => {\n            const props = this.getProp(propType);\n            props.forEach(prop => {\n                result.push(prop.getName());\n            });\n        });\n        return result;\n    }\n\n    /* Returns true if any cell property has the given type. Ie.\n     * myCell.hasPropType(\"wall\"). Doesn't check for basic props like \"actors\",\n     * RG.TYPE_ITEM etc.\n     */\n    public hasPropType(propType) {\n        if (this._baseElem.getType() === propType) {return true;}\n\n        const keys = Object.keys(this._p);\n        for (let i = 0; i < keys.length; i++) {\n            const prop = keys[i];\n            const arrProps = this._p[prop];\n            for (let j = 0; j < arrProps.length; j++) {\n                if (arrProps[j].getType() === propType) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Returns all props with given type in the cell.*/\n    public getPropType(propType): PropsType[] {\n        const props = [];\n        if (this._baseElem.getType() === propType) {return [this._baseElem];}\n        Object.keys(this._p).forEach(prop => {\n            const arrProps = this._p[prop];\n            for (let i = 0; i < arrProps.length; i++) {\n                if (arrProps[i].getType() === propType) {\n                    props.push(arrProps[i]);\n                }\n            }\n        });\n        return props;\n    }\n\n    /* For debugging to find a given object. */\n    public findObj(filterFunc: (obj: any) => boolean): any[] {\n        const result = [];\n        Object.keys(this._p).forEach(propType => {\n            const props = this._p[propType];\n            props.forEach(propObj => {\n                if (filterFunc(propObj)) {\n                    result.push(propObj);\n                }\n            });\n        });\n        return result;\n    }\n\n    public isOutdoors(): boolean {\n        return !this._baseElem.has('Indoor');\n    }\n} // }}} Map.Cell\n\n","\n/* Code for generating a binary space partition (BSP) tree.\n * Modified for roguelike level generation. Added few utility methods and\n * removed all canvas-related code.\n *\n * Original code can be found from: https://eskerda.com/bsp-dungeon-generation/\n */\nimport ROT from './rot';\n\nexport const BSP: any = {};\n\nconst OPTS = {\n    discardByRatio: true,\n    hRatio: 0.35,\n    wRatio: 0.35,\n    vertSplit: 0.5,\n    minSplitW: 8,\n    minSplitH: 8,\n    discardBySize: true,\n    minRoomW: 3,\n    minRoomH: 2\n};\n\nexport class Tree {\n\n    public lchild: Tree | null;\n    public rchild: Tree | null;\n    public leaf: any;\n\n    constructor(leaf) {\n        this.leaf = leaf;\n        this.lchild = null;\n        this.rchild = null;\n    }\n\n    public getLeafs() {\n        if (this.lchild === null && this.rchild === null) {\n            return [this.leaf];\n        }\n        else {\n            return [].concat(this.lchild.getLeafs(),\n                this.rchild.getLeafs());\n        }\n    }\n\n    public getLevel(level, queue) {\n        if (!queue) {\n            queue = [];\n        }\n\n        if (level === 1) {\n            queue.push(this);\n        }\n        else {\n            if (this.lchild !== null) {\n                this.lchild.getLevel(level - 1, queue);\n            }\n            if (this.rchild !== null) {\n                this.rchild.getLevel(level - 1, queue);\n            }\n        }\n        return queue;\n    }\n}\n\nBSP.Tree = Tree;\n\nconst Point = function(x, y) {\n    this.x = x;\n    this.y = y;\n};\n\n\nconst Container = function(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.center = new Point(\n        this.x + Math.floor(this.w / 2),\n        this.y + Math.floor(this.h / 2)\n    );\n};\nBSP.Container = Container;\n\n//--------------\n// Room object\n//--------------\nexport class Room {\n    public static rng: any;\n\n    public x: number;\n    public y: number;\n    public h: number;\n    public w: number;\n\n    constructor(container) {\n        this.x = container.x + Room.rng.getUniformInt(1, Math.floor(container.w / 3));\n        this.y = container.y + Room.rng.getUniformInt(1, Math.floor(container.h / 3));\n        this.w = container.w - (this.x - container.x) - 1;\n        this.h = container.h - (this.y - container.y) - 1;\n        this.w -= Room.rng.getUniformInt(0, this.w / 3);\n        this.h -= Room.rng.getUniformInt(0, this.h / 3);\n        if (this.w < OPTS.minRoomW) {this.w = OPTS.minRoomW;}\n        if (this.h < OPTS.minRoomH) {this.h = OPTS.minRoomH;}\n        return this;\n    }\n\n    /* Returns all x,y coordinates occupied by the room. */\n    public getCoord() {\n        const coord = [];\n        const startX = this.x;\n        const endX = startX + (this.w - 1);\n        const startY = this.y;\n        const endY = startY + (this.h - 1);\n        for (let x = startX; x <= endX; x++) {\n            for (let y = startY; y <= endY; y++) {\n                coord.push([x, y]);\n            }\n        }\n        return coord;\n    }\n\n    /* Returns coordinates directly outside the room. */\n    public getOuterBorder() {\n        const [x0, y0] = [this.x - 1, this.y - 1];\n        const [maxX, maxY] = [this.x + this.w + 1, this.y + this.h + 1];\n        return getHollowBox(x0, y0, maxX, maxY);\n    }\n\n    /* Returns the coordinates of the outmost free space of the room. */\n    public getInnerBorder() {\n        const [x0, y0] = [this.x, this.y];\n        const [maxX, maxY] = [this.x + this.w - 1, this.y + this.h - 1];\n        return getHollowBox(x0, y0, maxX, maxY);\n    }\n}\nRoom.rng = ROT.RNG;\n\nBSP.Room = Room;\n\nfunction getHollowBox(x0, y0, maxX, maxY) {\n    const res = [];\n    for (let x = x0; x <= maxX; x++) {\n        for (let y = y0; y <= maxY; y++) {\n            if ((y === y0 || y === maxY || x === x0 || x === maxX) ) {\n                res.push([x, y]);\n            }\n        }\n    }\n    return res;\n\n}\n\n/* Main class of the BSP. Used to generate the tree and the features. */\nexport class BSPGen {\n    public rng: any;\n    public generated: any;\n    private _opts: {[key: string]: any};\n\n    constructor(opts = {}) {\n        this._opts = OPTS;\n        Object.keys(opts).forEach(key => {\n            if (this._opts.hasOwnProperty(key)) {\n                this._opts[key] = opts;\n            }\n        });\n        this.rng = this._opts.rng || ROT.RNG;\n    }\n\n    /* Creates and returns coordinates for path between containers c1 and c2. */\n    public createPath(c1, c2) {\n        const path = [];\n        const center1 = c1.center;\n        const center2 = c2.center;\n        if (center1.x === center2.x) { // vertical\n            const startY = center1.y > center2.y ? center2.y : center1.y;\n            const endY = center1.y < center2.y ? center2.y : center1.y;\n            // TODO randomize x\n            for (let y = startY; y <= endY; y++) {\n                path.push([center1.x, y]);\n            }\n        }\n        else { // horizontal path\n            const startX = center1.x > center2.x ? center2.x : center1.x;\n            const endX = center1.x < center2.x ? center2.x : center1.x;\n            // TODO randomize y\n            for (let x = startX; x <= endX; x++) {\n                path.push([x, center1.y]);\n            }\n        }\n        return path;\n    }\n\n    public splitContainer(container, iter) {\n        const root = new Tree(container);\n        if (this.isLargeEnough(container)) {\n            if (iter !== 0) {\n                const sr = this.randomSplit(container);\n                root.lchild = this.splitContainer(sr[0], iter - 1);\n                root.rchild = this.splitContainer(sr[1], iter - 1);\n            }\n        }\n        return root;\n    }\n\n    public isLargeEnough(cont) {\n        if (this._opts.discardBySize) {\n            return cont.w >= this._opts.minSplitW && cont.h >= this._opts.minSplitH;\n        }\n        return true;\n    }\n\n    public randomSplit(container) {\n        let r1;\n        let r2;\n        if (this.rng.getUniform() <= this._opts.vertSplit) {\n            // Vertical\n            r1 = new Container(\n                container.x, container.y, // r1.x, r1.y\n                this.rng.getUniformInt(1, container.w), container.h // r1.w, r1.h\n            );\n            r2 = new Container(\n                container.x + r1.w, container.y, // r2.x, r2.y\n                container.w - r1.w, container.h // r2.w, r2.h\n            );\n\n            if (this._opts.discardByRatio) {\n                if (this.isVRatioTooSmall(r1, r2)) {\n                    return this.randomSplit(container);\n                }\n            }\n        }\n        else {\n            // Horizontal\n            r1 = new Container(\n                container.x, container.y, // r1.x, r1.y\n                container.w, this.rng.getUniformInt(1, container.h) // r1.w, r1.h\n            );\n            r2 = new Container(\n                container.x, container.y + r1.h, // r2.x, r2.y\n                container.w, container.h - r1.h // r2.w, r2.h\n            );\n\n            if (this._opts.discardByRatio) {\n                if (this.isHRatioTooSmall(r1, r2)) {\n                    return this.randomSplit(container);\n                }\n            }\n        }\n        return [r1, r2];\n    }\n\n    public isVRatioTooSmall(r1, r2) {\n        const r1Wratio = r1.w / r1.h;\n        const r2Wratio = r2.w / r2.h;\n        return r1Wratio < this._opts.wRatio || r2Wratio < this._opts.wRatio;\n    }\n\n    public isHRatioTooSmall(r1, r2) {\n        const r1Hratio = r1.h / r1.w;\n        const r2Hratio = r2.h / r2.w;\n        return r1Hratio < this._opts.hRatio || r2Hratio < this._opts.hRatio;\n    }\n\n    /* Creates a tree container with BSP and generates rooms based on the tree.\n     * Each room is surrounded by wall, so now room spaces are merged together\n     */\n    public createWithRooms(cols, rows, iter = 5) {\n        const mainContainer = new Container(0, 0, cols, rows);\n        const containerTree = this.splitContainer(mainContainer, iter);\n\n        const leafs = containerTree.getLeafs();\n        const rooms = [];\n        leafs.forEach(leaf => {\n            rooms.push(new Room(leaf));\n        });\n\n        this.generated = {\n            tree: containerTree, rooms\n        };\n\n        return [containerTree, rooms];\n    }\n\n    public createWithRoomsAndPaths(cols, rows, iter = 5) {\n        const mainContainer = new Container(0, 0, cols, rows);\n        const containerTree = this.splitContainer(mainContainer, iter);\n\n        const leafs = containerTree.getLeafs();\n        const rooms = [];\n        leafs.forEach(leaf => {\n            rooms.push(new Room(leaf));\n        });\n\n        const paths = [];\n        this.createPaths(containerTree, paths);\n\n        this.generated = {\n            tree: containerTree, rooms, paths\n        };\n        return [containerTree, rooms, paths];\n    }\n\n    /* Creates paths between the nodes of the tree. These paths are placed into\n     * paths variable. Each path is an array of coordinates.\n     */\n    public createPaths(tree, paths) {\n        if (tree.lchild === null || tree.rchild === null) {\n            return [];\n        }\n        const path = this.createPath(tree.lchild.leaf, tree.rchild.leaf);\n        if (path.length > 0) {\n            paths.push(path);\n        }\n        this.createPaths(tree.lchild, paths);\n        this.createPaths(tree.rchild, paths);\n        return paths;\n    }\n\n    public get(prop) {\n        if (this.generated.hasOwnProperty(prop)) {\n            return this.generated[prop];\n        }\n        return null;\n    }\n}\n\nBSP.BSPGen = BSPGen;\n","\nimport RG from './rg';\nimport {Random, RandWeights} from './random';\nimport {Template} from './template';\nimport {Crypt} from '../data/tiles.crypt';\nimport {BBoxOld} from './geometry';\nimport './utils';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:TemplateLevel');\n\nconst fillerTempl = Crypt.tiles.filler;\nconst RNG = Random.getRNG();\n\nconst DEFAULT_CALLBACK = () => {};\nconst debugVerbosity = 20;\n\ntype ElemTemplate = any; // TODO\n\n\ntype GenParams = number[];\n\ninterface ParamsMap {\n    [key: string]: GenParams;\n\n}\n\ninterface PlacedTileData extends BBoxOld {\n    tileX: number;\n    tileY: number;\n    name: string;\n    type: string;\n}\n\n/* This object can be used to create levels from ASCII-based templates. Each\n * template should be abuttable in a reasonable way, and connections between\n * tiles\n * should be described properly. See files in '../data/tiles.*'.\n *\n    // Original algorithm can be found from \"Procedural Generation in\n    // Game Design\" chapter 7, by Jim Shepard.\n    */\nexport class TemplateLevel {\n\n    public tilesX: number;\n    public tilesY: number;\n    public genParams: number[] | ParamsMap;\n    public roomCount: number;\n\n    public map: any[][];\n    public mapExpanded: any[][];\n    public templMap: ElemTemplate[][];\n    public placedTileData: {[key: string]: PlacedTileData};\n\n    public genParamsX: GenParams[];\n    public genParamsY: GenParams[];\n\n    public tryToMatchAllExits: boolean;\n    public missingExitIsError: boolean;\n    public weights: RandWeights;\n    public callbacks: {[key: string]: (arg?: any) => void};\n    public filler: ElemTemplate;\n    public templates: ElemTemplate[];\n\n    public constraintFunc: (x: number, y: number, exits: string[]) => void;\n    public startRoomFunc: () => void;\n\n    public matchMap: {[key: string]: string};\n    public nsew2DirRemap: {[key: string]: string};\n    public dir2NSEWRemap: {[key: string]: string};\n\n    private _ind: number;\n    private _unusedExits: any[];\n    private _sortedByExit: {[key: string]: ElemTemplate[]};\n    private _possibleDirections: string[];\n    private _freeExits: {[key: string]: string[]};\n    private _sortedWithAllExits: {[key: string]: ElemTemplate[]};\n\n    constructor(tilesX, tilesY) {\n        this.tilesX = tilesX;\n        this.tilesY = tilesY;\n\n        // Generator parameters, used for tile scaling\n        this.genParams = [1, 1, 1, 1];\n\n        this.roomCount = 40;\n\n        this.callbacks = {\n            afterInit: DEFAULT_CALLBACK\n        };\n\n        this.filler = Template.createTemplate(fillerTempl);\n        this.templates = [];\n\n        // Finds always best match for exits\n        this.tryToMatchAllExits = true;\n\n        // Works only when tryToMatchAllExits = true. Throws error is required exits\n        // are not found in tiles.\n        this.missingExitIsError = false;\n\n        //------------------------\n        // PRIVATE VARIABLES\n        //------------------------\n\n        this._ind = 0; // Indentation for debug messages\n\n        this._unusedExits = [];\n        this._freeExits = {};\n\n        this._possibleDirections = ['N', 'S', 'E', 'W'];\n\n        this._sortedByExit = {\n            N: [], S: [], E: [], W: []\n        };\n\n        // For sorting by including all possible exits\n        this._sortedWithAllExits = {};\n    }\n\n    /* Sets the filler tile used to fill the map first. */\n    setFiller(fillerTempl) {\n        if (typeof fillerTempl === 'string') {\n            this.filler = Template.createTemplate(fillerTempl);\n            this.filler.setProp('name', 'FILLER');\n        }\n        else {\n            this.filler = fillerTempl.clone();\n            this.filler.setProp('name', 'FILLER');\n        }\n    }\n\n    /* Sets the room templates that are used. */\n    setTemplates(asciiTiles) {\n        this.templates = [];\n        if (typeof asciiTiles[0] === 'string') {\n            this.templates = asciiTiles.map(t => Template.createTemplate(t));\n        }\n        else {\n            this.templates = asciiTiles;\n        }\n    }\n\n    /* Adds one ASCII/room template to the list of usable templates. */\n    addTemplate(asciiTile) {\n        if (typeof asciiTile === 'string') {\n              this.templates.push(Template.createTemplate(asciiTile));\n        }\n        else if (asciiTile instanceof Template.ElemTemplate) {\n            this.templates.push(asciiTile);\n        }\n    }\n\n    /* Sets the generator parameters for expansion. */\n    setGenParams(arr) {\n        this.genParams = arr;\n    }\n\n    /* Sets the target room count. -1 fills until no more well-connected\n     * rooms are possible. */\n    setRoomCount(count) {\n        this.roomCount = count;\n    }\n\n    /* Sets the callback for constraint. This callback is called with\n     * (x, y, exitReqd), and exposes this._sortedByExit.\n     */\n    setConstraintFunc(func) {\n        this.constraintFunc = func.bind(this);\n    }\n\n    /* Can be used to set a start room function, which picks the first room\n     * to use. This function must return the room, and not place it. */\n    setStartRoomFunc(func) {\n        this.startRoomFunc = func.bind(this);\n    }\n\n    /* Adds a callback to the generator. */\n    addCallback(name, cb) {\n        if (this.callbacks.hasOwnProperty(name)) {\n            if (typeof cb === 'function') {\n                this.callbacks[name] = cb;\n            }\n            else {\n                RG.err('TemplateLevel', 'setCallback',\n                    `Tried setting non-function as cb: ${cb}`);\n            }\n        }\n        else {\n            RG.err('TemplateLevel', 'setCallback',\n                `No callback for ${name}`);\n        }\n    }\n\n    /* Calls as many setters above as possible from given object. */\n    use(obj) {\n        const setterList = ['constraintFunc', 'startRoomFunc', 'roomCount',\n        'genParams'];\n        setterList.forEach(p => {\n            if (obj.hasOwnProperty(p)) {\n                const setter = 'set' + p.capitalize();\n                this[setter](obj[p]);\n            }\n        });\n\n        if (obj.tiles && obj.tiles.filler) {\n            this.setFiller(obj.tiles.filler);\n        }\n\n        if (obj.Models && obj.Models.default) {\n            this.setTemplates(obj.Models.default);\n        }\n    }\n\n    /* Creates the level. Result is in this.map.\n     * This is the Main function you want to call. */\n    create() {\n        if (this.templates.length === 0) {\n            RG.err('TemplateLevel', 'create',\n                'No templates set. Use setTemplates() before create()');\n        }\n\n        this._sortDataIntoListsByLocation();\n\n        // Initialize a map with filler cells\n        this._initMapWithFillerCells();\n\n        let levelInvalid = true;\n        let maxLevelTries = 10;\n\n        while (levelInvalid) {\n            ++this._ind;\n            this.dbg(`Dungeon not ready. Tries left  ${maxLevelTries}/10`);\n            this._placeStartRoom();\n\n            let roomCount = 0;\n            const goalCount = this.roomCount;\n            let numTries = 0;\n            let hasExits = true;\n\n            while (numTries < 1000 && hasExits) {\n\n                // Get a room with unused exits or terminate\n                const room = this._getRoomWithUnusedExits();\n                if (room === null) {\n                    hasExits = false;\n                    break;\n                }\n\n                const {x, y} = room;\n                this.dbg(`Current room in ${x},${y}`);\n                const exits = this._getFreeExits(room);\n                this.dbg(`It has free exits: ${exits}`);\n\n                // Pick one exit randomly\n                const chosen = RNG.arrayGetRand(exits);\n                this.dbg(`Chose exit: ${chosen} for next room`);\n\n                // Get required matching exit\n                const exitReqd = this.getMatchingExit(chosen);\n                const newX = this._getNewX(x, exitReqd);\n                const newY = this._getNewY(y, exitReqd);\n\n                if (newX === x && newY === y) {\n                    let msg = `Illegal ${x},${y} -> ${newX},${newY}`;\n                    msg += ` Exits: Chosen ${chosen} -> ${exitReqd}`;\n                    RG.err('TemplateLevel', 'create', msg);\n                }\n\n                // Get a new room matching this exit\n                const templMatch = this._getNextTemplate(newX, newY, exitReqd);\n\n                // Make sure the new room is valid\n                if (this._isRoomLegal(newX, newY)) {\n                    this._placeRoom(\n                        x, y, chosen, newX, newY, exitReqd, templMatch);\n                    ++roomCount;\n                    this.dbg('Room count incremented to ' + roomCount);\n                }\n\n                // Place the new room and incr roomCount\n                ++numTries;\n\n                if (goalCount !== -1 && roomCount >= goalCount) {\n                    levelInvalid = false;\n                    break;\n                }\n            }\n\n            if (roomCount >= goalCount || goalCount === -1) {\n                levelInvalid = false;\n            }\n            else if (--maxLevelTries === 0) {\n                RG.warn('Level.Template', 'create',\n                    'Max tries reached. No valid level created');\n                break;\n            }\n            else {\n                this._cleanupAndTryAgain();\n            }\n            --this._ind;\n        }\n\n        this.expandTemplates();\n    }\n\n    /* Sort data into lists based on different directions */\n    _sortDataIntoListsByLocation() {\n        const dirRegex = this._possibleDirections.map(dir => new RegExp(dir));\n        this.templates.forEach(templ => {\n            const dir = templ.getProp('dir');\n            if (dir) {\n                this._possibleDirections.forEach((direction, i) => {\n                    if (dirRegex[i].test(dir)) {\n                        this._sortedByExit[direction].push(templ);\n                    }\n                });\n\n                // Add to map including all possible exits\n                const dirSorted = dir.split('').sort().join('');\n                if (!this._sortedWithAllExits[dirSorted]) {\n                    this._sortedWithAllExits[dirSorted] = [];\n                }\n                this._sortedWithAllExits[dirSorted].push(templ);\n            }\n        });\n\n    }\n\n    /* Expands the templates with generator params and creates the final 2d-tile\n     * map from the 2d template map. */\n    expandTemplates() {\n        // Create gen params for each tile\n        this.genParamsX = [];\n        this.genParamsY = [];\n        for (let x = 0; x < this.tilesX; x++) {\n            if ((this.genParams as ParamsMap).x) {\n                this.genParamsX.push((this.genParams as ParamsMap).x);\n            }\n            else {\n                const paramsX = [this.genParams[0], this.genParams[1]];\n                this.genParamsX.push(paramsX);\n            }\n        }\n        for (let y = 0; y < this.tilesY; y++) {\n            if ((this.genParams as ParamsMap).y) {\n                this.genParamsY.push((this.genParams as ParamsMap).y);\n            }\n            else {\n                const paramsY = [this.genParams[2], this.genParams[3]];\n                this.genParamsY.push(paramsY);\n            }\n        }\n\n        // Expand the tiles with parameters\n        this.mapExpanded = [];\n        for (let x = 0; x < this.tilesX; x++) {\n            this.mapExpanded[x] = [];\n            for (let y = 0; y < this.tilesY; y++) {\n                const params = this.genParamsX[x].concat(this.genParamsY[y]);\n                this.mapExpanded[x][y] = this.templMap[x][y].getChars(params);\n            }\n        }\n\n        // Now we have an unflattened map: 4-dimensional arrays, the last part\n        // is to convert this into 2-d array.\n        this.map = [];\n        this.placedTileData = {};\n        let llx = 0;\n        let urx = 0;\n        for (let tileX = 0; tileX < this.tilesX; tileX++) {\n            const numCols = this.mapExpanded[tileX][0].length;\n            urx = llx + numCols - 1;\n\n            for (let i = 0; i < numCols; i++) {\n                let lly = 0;\n                let ury = 0;\n                let finalCol = [];\n                for (let tileY = 0; tileY < this.tilesY; tileY++) {\n                    const tileCol = this.mapExpanded[tileX][tileY][i];\n                    const tileColLen = tileCol.length;\n                    lly = ury + tileColLen - 1;\n                    finalCol = finalCol.concat(tileCol);\n\n                    this.placedTileData[tileX + ',' + tileY] = {\n                        name: this.templMap[tileX][tileY].getProp('name'),\n                        type: this.templMap[tileX][tileY].getProp('type'),\n                        llx, urx, ury, lly, tileX, tileY\n                    };\n                    ury += tileColLen;\n                }\n                this.map.push(finalCol);\n            }\n            llx += numCols;\n        }\n    }\n\n    getPlacedData() {\n        return this.placedTileData;\n    }\n\n    /* Returns the generated map (found also in this.map). */\n    getMap() {\n        if (!this.map) {\n            RG.warn('TemplateLevel', 'getMap',\n                'Not not generated. Call create() first');\n        }\n        return this.map;\n    }\n\n    /* Finds a template based on prop name and val, and returns a random\n     * template among the found templates. Returns null if none are found. */\n    findTemplate(query) {\n        const result = [];\n        Object.keys(query).forEach(key => {\n            this.templates.forEach(t => {\n                if (t.getProp(key) === query[key]) {\n                    result.push(t);\n                }\n            });\n        });\n        if (result.length > 0) {\n            return RNG.arrayGetRand(result);\n        }\n        return null;\n    }\n\n    /* Removes the templates matching the given query. This is useful, if for\n     * example after starting conditions you want to remove some tiles. */\n    removeTemplate(query) {\n        const key = Object.keys(query)[0];\n        const index = this.templates.findIndex(t => (\n            t.getProp(key) === query[key]\n        ));\n        if (index >= 0) {\n            this.templates.splice(index, 1);\n        }\n    }\n\n    /* Adds a room (template) to fixed position. This can be called from user\n     * callbacks. Can be used to place any amount of rooms prior to calling\n     * create(). */\n    addRoom(templ, x, y) {\n        const room = {x, y, room: templ};\n        this._addRoomData(room);\n        this._removeExitsOfAbuttingRooms(room);\n        this._removeBorderExits(room);\n        this.templMap[x][y] = templ;\n    }\n\n    //----------------------------------------------------------------\n    // PRIVATE\n    //----------------------------------------------------------------\n\n    _getNextTemplate(x, y, exitReqd) {\n        ++this._ind;\n        let next = null;\n        if (typeof this.constraintFunc === 'function') {\n            next = this.constraintFunc(x, y, exitReqd);\n        }\n\n        // All exits are required to match\n        if (!next && this.tryToMatchAllExits) {\n            this.dbg(`Compute required exits for ${x},${y}`);\n            const exitsReqd = this.getAllRequiredExits(x, y);\n            const listMatching = this._getMatchWithExits(exitsReqd);\n            if (listMatching.length > 0) {\n                return this._getRandTemplate(listMatching);\n            }\n            let msg = `x,y: ${x},${y}`;\n            msg += `Required: ${exitsReqd[1]}, Excl: ${exitsReqd[2]}`;\n            RG.warn('TemplateLevel', '_getNextTemplate',\n                `Not all exits match. ${msg}`);\n\n            if (this.missingExitIsError) {\n                this.expandTemplates();\n                RG.printMap(this.map);\n                const str = `${x},${y} exitReqd: ${JSON.stringify(exitsReqd)}`;\n                throw new Error(str);\n            }\n        }\n\n        if (!next) {\n            const listMatching = this._sortedByExit[exitReqd];\n            return RNG.arrayGetRand(listMatching);\n        }\n\n        --this._ind;\n        return next;\n    }\n\n    /* Returns random template from the given list. Uses random weights if any\n     * are given. */\n    _getRandTemplate(list) {\n        if (!this.weights) {\n            return RNG.arrayGetRand(list);\n        }\n        const weights = {};\n        const names = list.map(t => t.getProp('name'));\n        const nameToIndex = {};\n        names.forEach((name, i) => {\n            nameToIndex[name] = i;\n            if (this.weights.hasOwnProperty(name)) {\n                weights[name] = this.weights[name];\n            }\n            else {\n                weights[name] = 1;\n            }\n        });\n        const chosenName = RNG.getWeighted(weights);\n        return list[nameToIndex[chosenName]];\n    }\n\n    _getRoomWithUnusedExits() {\n        if (this._unusedExits.length > 0) {\n            return RNG.arrayGetRand(this._unusedExits);\n        }\n        return null;\n    }\n\n    _getFreeExits(room) {\n        const {x, y} = room;\n        const key = x + ',' + y;\n        if (this._freeExits[key]) {\n            return this._freeExits[key];\n        }\n        else {\n            RG.err('TemplateLevel', '_getFreeExits',\n                `No ${key}, Room: ${JSON.stringify(room)}`);\n        }\n        return null;\n    }\n\n    _removeChosenExit(x, y, chosen) {\n        const key = x + ',' + y;\n        const exits = this._freeExits[key];\n        this.dbg(JSON.stringify(this._freeExits));\n        this.dbg(`${x},${y} removeChosenExit ${chosen}`);\n        this.dbg(`nExits: ${exits.length}`);\n        const index = exits.indexOf(chosen);\n        if (index >= 0) {\n            this._freeExits[key].splice(index, 1);\n            if (this._freeExits[key].length === 0) {\n                const unusedIndex = this._unusedExits.findIndex(room => {\n                    return room.x === x && room.y === y;\n                });\n                if (unusedIndex >= 0) {\n                    this._unusedExits.splice(unusedIndex, 1);\n                    delete this._freeExits[key];\n                    this.dbg(`${x},${y} has no unused exits anymore.`);\n                }\n                else {\n                    RG.err('TemplateLevel', '_removeChosenExit',\n                        `Cannot find ${x},${y} in unusedExits to remove.`);\n                }\n            }\n            if (this._freeExits[key]) {\n                this.dbg(`_freeExits [${key}] After remove: `\n                    + JSON.stringify(this._freeExits[key]));\n            }\n        }\n        else {\n            const json = JSON.stringify(this.templMap[x][y]);\n            RG.err('TemplateLevel', '_removeChosenExit',\n                `${x},${y} dir: ${chosen} not found. Templ: ${json}`);\n        }\n    }\n\n    _isRoomLegal(x, y) {\n        if (x >= 0 && x < this.tilesX && y >= 0 && y < this.tilesY) {\n            return true;\n        }\n        return false;\n    }\n\n    /* Places 1st room using startRoomFunc, or randomly if no function is\n     * specified. */\n    _placeStartRoom() {\n        ++this._ind;\n        let room = null;\n        if (typeof this.startRoomFunc === 'function') {\n            room = this.startRoomFunc();\n            const props = ['x', 'y', 'room'];\n            props.forEach(p => {\n                if (!room.hasOwnProperty(p)) {\n                    const msg = 'room must have {x, y, room}.';\n                    RG.err('TemplateLevel', '_placeStartRoom',\n                        `Prop ${p} null/undef. ${msg}.`);\n                }\n            });\n        }\n        else {\n            const x = RNG.getUniformInt(1, this.tilesX - 2);\n            const y = RNG.getUniformInt(1, this.tilesY - 2);\n            room = {x, y, room: this.getRandomTemplate()};\n        }\n\n        this.dbg('Start room: ' + JSON.stringify(room));\n        this.templMap[room.x][room.y] = room.room;\n\n        if (room !== null) {\n            this._addRoomData(room);\n            this._removeBorderExits(room);\n        }\n        else {\n            RG.err('TemplateLevel', '_placeStartRoom',\n                'Starting room was null. Oh no!');\n        }\n        --this._ind;\n    }\n\n    /* Places one room into the map. */\n    _placeRoom(x, y, chosen, newX, newY, exitReqd, templMatch) {\n        // Remove chosen exit (old room) from unused exits\n        this._removeChosenExit(x, y, chosen);\n\n        // Add new room data to unused exits\n        const room = {x: newX, y: newY, room: templMatch};\n        this._addRoomData(room);\n\n        // But remove chosen exit\n        this._removeChosenExit(newX, newY, exitReqd);\n\n        // Check for abutting rooms on other edges and remove any exits\n        this._removeExitsOfAbuttingRooms(room);\n\n        this._removeBorderExits(room);\n\n        // Finally add new room to templMap\n        this.templMap[newX][newY] = templMatch;\n\n    }\n\n    _addRoomData(room) {\n        const dirProp = room.room.getProp('dir');\n        if (dirProp) {\n            this._unusedExits.push(room);\n            const exits = dirProp.split('');\n            const key = room.x + ',' + room.y;\n            this._freeExits[key] = exits;\n            this.dbg('Added room ' + JSON.stringify(room), 20);\n        }\n    }\n\n    /* Returns the matching (opposite) exit for the chosen exit. */\n    getMatchingExit(chosen) {\n        if (this.matchMap) {\n            if (this.matchMap.hasOwnProperty(chosen)) {\n                return this.matchMap[chosen];\n            }\n        }\n        switch (chosen) {\n            case 'N': return 'S';\n            case 'S': return 'N';\n            case 'E': return 'W';\n            case 'W': return 'E';\n            default: return 'N';\n        }\n    }\n\n    /* Returns new X value based on the direction. Remaps custom dir to NSEW\n    * first. */\n    _getNewX(x, dir) {\n        let remapped = dir;\n        if (this.dir2NSEWRemap) {\n            if (this.dir2NSEWRemap[dir]) {\n                remapped = this.dir2NSEWRemap[dir];\n            }\n        }\n        if (remapped === 'E') {return x - 1;}\n        if (remapped === 'W') {return x + 1;}\n        return x;\n\n    }\n\n    /* Returns new Y value based on the direction. Remaps custom dir to NSEW\n    * first. */\n    _getNewY(y, dir) {\n        let remapped = dir;\n        if (this.dir2NSEWRemap) {\n            if (this.dir2NSEWRemap[dir]) {\n                remapped = this.dir2NSEWRemap[dir];\n            }\n        }\n        if (remapped === 'N') {return y + 1;}\n        if (remapped === 'S') {return y - 1;}\n        return y;\n    }\n\n    getRandomTemplate() {\n        return RNG.arrayGetRand(this.templates);\n    }\n\n    /* Removes exits from tiles which are placed in any borders of the map.\n     *  Prevents out-of-bounds expansion. */\n    _removeBorderExits(room) {\n        const {x, y} = room;\n        if (x === 0) {\n            if (this._hasExit('W', x, y)) {\n                this._removeChosenExit(x, y, 'W');\n            }\n            if (this.nsew2DirRemap) {\n                this._removeExitsRemapped(x, y, 'W');\n            }\n        }\n\n        if (x === this.tilesX - 1) {\n            if (this._hasExit('E', x, y)) {\n                this._removeChosenExit(x, y, 'E');\n            }\n            if (this.nsew2DirRemap) {\n                this._removeExitsRemapped(x, y, 'E');\n            }\n        }\n\n        if (y === 0) {\n            if (this._hasExit('N', x, y)) {\n                this._removeChosenExit(x, y, 'N');\n            }\n            if (this.nsew2DirRemap) {\n                this._removeExitsRemapped(x, y, 'N');\n            }\n        }\n\n        if (y === this.tilesY - 1) {\n            if (this._hasExit('S', x, y)) {\n                this._removeChosenExit(x, y, 'S');\n            }\n            if (this.nsew2DirRemap) {\n                this._removeExitsRemapped(x, y, 'S');\n            }\n        }\n\n    }\n\n    /* Receives NSEW directions and uses nsew2DirRemap remapping to remove the\n     * custom exits. */\n    _removeExitsRemapped(x, y, dir) {\n        const remapped = this.nsew2DirRemap[dir];\n        if (this._hasExit(remapped, x, y)) {\n            this._removeChosenExit(x, y, remapped);\n        }\n    }\n\n    /* Checks for rooms already in place around the placed room, and removes all\n     * matching exits. */\n    _removeExitsOfAbuttingRooms(room) {\n        const {x, y} = room;\n\n        this.dbg(`CheckAbut ${x},${y}`);\n        if (x > 0) {\n            const nx = x - 1;\n            if (!this._isFiller(nx, y)) {\n                this._removeExitByXY('W', x, y);\n                this._removeExitByXY('E', nx, y);\n                if (this.nsew2DirRemap) {\n                    this._removeExitByXY(this.nsew2DirRemap.W, x, y);\n                    this._removeExitByXY(this.nsew2DirRemap.E, nx, y);\n                }\n            }\n        }\n\n        if (x < this.tilesX - 1) {\n            const nx = x + 1;\n            if (!this._isFiller(nx, y)) {\n                this._removeExitByXY('E', x, y);\n                this._removeExitByXY('W', nx, y);\n                if (this.nsew2DirRemap) {\n                    this._removeExitByXY(this.nsew2DirRemap.E, x, y);\n                    this._removeExitByXY(this.nsew2DirRemap.W, nx, y);\n                }\n            }\n        }\n\n        if (y > 0) {\n            const ny = y - 1;\n            if (!this._isFiller(x, ny)) {\n                this._removeExitByXY('N', x, y);\n                this._removeExitByXY('S', x, ny);\n                if (this.nsew2DirRemap) {\n                    this._removeExitByXY(this.nsew2DirRemap.N, x, y);\n                    this._removeExitByXY(this.nsew2DirRemap.S, x, ny);\n                }\n            }\n        }\n\n        if (y < this.tilesY - 1) {\n            const ny = y + 1;\n            if (!this._isFiller(x, ny)) {\n                this._removeExitByXY('S', x, y);\n                this._removeExitByXY('N', x, ny);\n                if (this.nsew2DirRemap) {\n                    this._removeExitByXY(this.nsew2DirRemap.S, x, y);\n                    this._removeExitByXY(this.nsew2DirRemap.N, x, ny);\n                }\n            }\n        }\n\n    }\n\n    _isFiller(x, y) {\n        const filler = this.templMap[x][y].getProp('name') === 'FILLER';\n        this.dbg(`isFiller x,y ${x},${y}: ${filler}`);\n        return filler;\n    }\n\n    _removeExitByXY(dir, x, y) {\n        if (this._hasExit(dir, x, y)) {\n            this._removeChosenExit(x, y, dir);\n        }\n    }\n\n    _hasExit(dir, x, y) {\n        const key = x + ',' + y;\n        if (this._freeExits[key]) {\n            return this._freeExits[key].indexOf(dir) >= 0;\n        }\n        return false;\n    }\n\n    _cleanupAndTryAgain() {\n        // Initialize a map with filler cells\n        this._initMapWithFillerCells();\n        this._freeExits = {};\n        this._unusedExits = [];\n    }\n\n    _initMapWithFillerCells() {\n        this.templMap = [];\n        for (let x = 0; x < this.tilesX; x++) {\n            this.templMap[x] = [];\n            for (let y = 0; y < this.tilesY; y++) {\n                this.templMap[x][y] = this.filler;\n            }\n        }\n        if (this.callbacks.afterInit) {\n            this.callbacks.afterInit(this);\n        }\n\n    }\n\n    /* Sets a new exit map instead of using the default 4-directional NSEW. You\n    * must also provide remapping tables. For example, we'd like to remap\n    * cardinal dirs NSEW to up/down/left/right UDLR:\n    *   1. matchMap = {U: 'D', D: 'U', L: 'R', R: 'R'} - how to math new exits\n    *   2. nsew2DirRemap = {N: 'U', S: 'D', W: 'L', E: 'R'}\n    * */\n    setExitMap(matchMap, nsew2DirRemap) {\n        this._possibleDirections = Object.keys(matchMap);\n        this._sortedByExit = {};\n        this._possibleDirections.forEach(dir => {\n            this._sortedByExit[dir] = [];\n        });\n        this.matchMap = matchMap;\n        this.nsew2DirRemap = nsew2DirRemap;\n\n        // For mapping custom dir to NSEW. Some algorithms only operate on\n        // NSEW, so we need a way to convert back to it from custom dirs\n        const dir2NSEWRemap = {};\n        Object.keys(this.nsew2DirRemap).forEach(key => {\n            const val = this.nsew2DirRemap[key];\n            dir2NSEWRemap[val] = key;\n        });\n        this.dir2NSEWRemap = dir2NSEWRemap;\n    }\n\n    /* Returns all exits which are required @x,y to match all surrounding\n     * tiles. */\n    getAllRequiredExits(x, y) {\n        ++this._ind;\n        const any = [];\n        const exits = [];\n        const excluded = [];\n\n        let remapped = null;\n        let remapMatch = null;\n        // N tile\n        const nY = y - 1;\n        if (this.nsew2DirRemap) {\n            remapped = this.nsew2DirRemap.N;\n            remapMatch = this.matchMap[remapped];\n        }\n        if (nY >= 0) {\n            if (this._isFiller(x, nY)) {\n                any.push('N');\n            }\n            else if (this._hasExit('S', x, nY)) {\n                exits.push('N');\n            }\n            else {\n                excluded.push('N');\n            }\n\n            if (remapped) {\n                if (this._isFiller(x, nY)) {\n                    any.push(remapped);\n                }\n                else if (this._hasExit(remapMatch, x, nY)) {\n                    exits.push(remapped);\n                }\n                else {\n                    excluded.push(remapped);\n                }\n            }\n\n        }\n        else {\n            excluded.push('N');\n            if (remapped) {excluded.push(remapped);}\n        }\n\n        // S tile\n        const sY = y + 1;\n        if (this.nsew2DirRemap) {\n            remapped = this.nsew2DirRemap.S;\n            remapMatch = this.matchMap[remapped];\n        }\n\n        if (sY < this.tilesY) {\n            if (this._isFiller(x, sY)) {\n                any.push('S');\n            }\n            else if (this._hasExit('N', x, sY)) {\n                exits.push('S');\n            }\n            else {\n                excluded.push('S');\n            }\n\n            if (remapped) {\n                if (this._isFiller(x, sY)) {\n                    any.push(remapped);\n                }\n                else if (this._hasExit(remapMatch, x, sY)) {\n                    exits.push(remapped);\n                }\n                else {\n                    excluded.push(remapped);\n                }\n            }\n        }\n        else {\n            excluded.push('S');\n            if (remapped) {excluded.push(remapped);}\n        }\n\n        // E tile\n        const eX = x + 1;\n        if (this.nsew2DirRemap) {\n            remapped = this.nsew2DirRemap.E;\n            remapMatch = this.matchMap[remapped];\n        }\n        if (eX < this.tilesX) {\n            if (this._isFiller(eX, y)) {\n                any.push('E');\n            }\n            else if (this._hasExit('W', eX, y)) {\n                exits.push('E');\n            }\n            else {\n                excluded.push('E');\n            }\n\n            if (remapped) {\n                if (this._isFiller(eX, y)) {\n                    any.push(remapped);\n                }\n                else if (this._hasExit(remapMatch, eX, y)) {\n                    exits.push(remapped);\n                }\n                else {\n                    excluded.push(remapped);\n                }\n            }\n        }\n        else {\n            excluded.push('E');\n            if (remapped) {excluded.push(remapped);}\n        }\n\n        // W tile\n        const wX = x - 1;\n        if (this.nsew2DirRemap) {\n            remapped = this.nsew2DirRemap.W;\n            remapMatch = this.matchMap[remapped];\n        }\n        if (wX >= 0) {\n            if (this._isFiller(wX, y)) {\n                any.push('W');\n            }\n            else if (this._hasExit('E', wX, y)) {\n                exits.push('W');\n            }\n            else {\n                excluded.push('W');\n            }\n\n            if (remapped) {\n                if (this._isFiller(wX, y)) {\n                    any.push(remapped);\n                }\n                else if (this._hasExit(remapMatch, wX, y)) {\n                    exits.push(remapped);\n                }\n                else {\n                    excluded.push(remapped);\n                }\n            }\n        }\n        else {\n            excluded.push('W');\n            if (remapped) {excluded.push(remapped);}\n        }\n\n        this.dbg('getAllRequired ' + exits);\n\n        --this._ind;\n        return [any, exits, excluded];\n    }\n\n    _getMatchWithExits(exitsReqd) {\n        const [any, exits, excluded] = exitsReqd;\n        this.dbg(`GOT: any:${any}, req:${exits}, excl:${excluded}`);\n        const keys = Object.keys(this._sortedWithAllExits);\n        let validKeys = keys;\n\n        // Exclude exits\n        excluded.forEach(exit => {\n            validKeys = validKeys.filter(key => (\n                !new RegExp(exit).test(key)\n            ));\n        });\n\n\n        // Check if required exits are contained in the keys\n        let keysSplit = validKeys.map(key => key.split(''));\n        keysSplit = keysSplit.filter(elem => (\n            this._arrayContainsArray(elem, exits)\n        ));\n\n        validKeys = keysSplit.map(key => key.join(''));\n\n        let result = [];\n        validKeys.forEach(key => {\n            result = result.concat(this._sortedWithAllExits[key]);\n        });\n        return result;\n    }\n\n    _arrayContainsArray(superSet, subSet) {\n        return subSet.every(value => {\n            return superSet.indexOf(value) >= 0;\n        });\n    }\n\n    /* Prints the debug msg when debug() is enabled. Adds some verbosity options\n     * for filtering some debug messages out. */\n    dbg(msg, verb = 10) {\n        if (debug.enabled) {\n            if (debugVerbosity >= verb) {\n                const _ind = ' '.repeat(this._ind);\n                console.log(_ind + msg);\n            }\n        }\n    }\n\n    printTile(x, y) {\n        if (x === 4 && y === 3) {\n            const tile = this.templMap[x][y];\n            console.log(`Tile @{x},${y}`);\n            console.log(`Has exits: ${tile.getDir()}`);\n            console.log(JSON.stringify(tile, null, 2));\n        }\n    }\n}\n","/* Contains ASCII tiles used for the crypt level generation. */\n\nimport RG from '../src/rg';\nimport {Template, ElemTemplate} from '../src/template';\nimport {Random} from '../src/random';\nimport {TemplateData} from '../src/interfaces';\n\nconst RNG = Random.getRNG();\n\nexport const Crypt: TemplateData = {\n    Models: {default: []},\n    templates: {all: []}\n};\nCrypt.tiles = {};\n\nCrypt.tiles.filler = `\nname:FILLER\nX=#\nY=#\n\n#X###X#\nY######\n#######\n#######\n#######\nY######\n#######`;\n\nCrypt.tiles.start = [\n`\ndir:NSEW\nname:start_nsew\nX=#\nY=#\n\n#X#+#X#\nY.....#\n#.#.#.#\n+.###.+\n#.#.#.#\nY.....#\n###+###`,\n\n`\ndir:SEW\nname:start_sew\nX=#\nY=#\n\n#X###X#\nY.....#\n#.#.#.#\n+.###.+\n#.#.#.#\nY.....#\n###+###`,\n\n`\ndir:NEW\nname:start_new\nX=#\nY=#\n\n#X#+#X#\nY.....#\n#.#.#.#\n+.###.+\n#.#.#.#\nY.....#\n#######`,\n\n`\ndir:NSE\nname:start_nse\nX=#\nY=#\n\n#X#+#X#\nY.....#\n#.#.#.#\n#..#..+\n#.#.#.#\nY.....#\n###+###`,\n\n`\ndir:NSW\nname:start_nsw\nX=#\nY=#\n\n#X#+#X#\nY.....#\n#.#.#.#\n+..#..#\n#.#.#.#\nY.....#\n###+###`\n];\n\n// Omni-directionals\nCrypt.tiles.omni = [\n`\ndir:NSEW\nname:omni\nX=#\nY=#\n\n#X#.#X#\nY.....#\n#.....#\n...#...\n#.....#\nY.....#\n###.###`,\n\n`\ndir:NSEW\nname:omni\nX=#\nY=#\n\n#X#.#X#\nY.....#\n#.#.#.#\n...#...\n#.#.#.#\nY.....#\n###.###`,\n`\ndir:NSEW\nname:omni\nX=#\nY=#\n\n#.X.X.#\nY.....#\n#..#..#\n..###..\n#..#..#\nY.....#\n###.###`,\n\n`\nname:omni\ndir:NSEW\nX=#\nY=#\n\n#X...X#\n.......\nY..#..#\n..###..\nY..#..#\n.......\n##...##`,\n\n`\nname:omni\ndir:NSEW\nX=.\nY=.\n\n..X.X..\n.##.##.\nY#...#.\n...#...\nY#...#.\n.##.##.\n.......`,\n\n`\nname:omni\ndir:NSEW\nX=.\nY=.\n\n#.X.X.#\n###.###\nY#...#.\n...#...\nY#...#.\n###.###\n#.....#`,\n\n`\nname:omni\ndir:NSEW\nX=.\nY=.\n\n..X.X..\n.##.##.\nY##.##.\n.......\nY##.##.\n.##.##.\n.......`,\n\n`\ndir:NSEW\nname:omni\nX=.\nY=.\n\n..X.X..\n.##.##.\nY#...#.\n.#...#.\nY#...#.\n.##.##.\n.......`\n];\n\n// Terminals (one exit only)\nCrypt.tiles.term = [\n`\ndir:N\nname:term\nX=#\nY=#\n\n#X#.#X#\n#.....#\nY.#.#.#\n###.###\nY.....#\n#.....#\n#######`,\n\n`\ndir:N\nname:term\nX=#\nY=#\n\n#X#.#X#\n#.....#\nY.#.#.#\n###.###\nY##.###\n##...##\n#######`,\n\n`\ndir:S\nname:term\nX=#\nY=#\n\n#X###X#\n#.....#\nY.#.#.#\n###.###\nY.#.#.#\n#.....#\n##...##`,\n\n`\ndir:S\nname:term\nX=#\nY=#\n\n#X###X#\n#######\nY######\n###.###\nY.....#\n#.....#\n##...##`,\n\n`\ndir:W\nname:term\nX=#\nY=#\n\n#X###X#\n#.....#\nY.#.#.#\n...####\nY.#.#.#\n#.....#\n#######`,\n\n`\ndir:W\nname:term\nX=#\nY=#\n\n#X###X#\n#.#...#\nY.#.###\n..#...#\nY.###.#\n#.....#\n#######`,\n\n`\ndir:E\nname:term\nX=#\nY=#\n\n#X###X#\n#.....#\nY..#..#\n#..#...\nY.###.#\n#.....#\n#######`,\n\n`\ndir:E\nname:term\nX=#\nY=#\n\n#X###X#\n#.....#\nY...###\n#...#..\nY.###.#\n#.....#\n#######`\n];\n\n// Corridors (2 exits on opposite sides)\nCrypt.tiles.corridor = [\n`\ndir:NS\nname:corridor\nX=#\nY=#\n\n#X...X#\n##...##\nY#...##\n##...##\nY#...##\n##...##\n##...##`,\n\n`\ndir:NS\nname:corridor\nX=#\nY=#\n\n#X...X#\n#.....#\nY#...##\n#.....#\nY#...##\n#.....#\n##...##`,\n\n\n`\ndir:EW\nname:corridor\nX=#\nY=#\n\n#X###X#\n#######\nY......\n.......\nY......\n#######\n#######`,\n\n`\ndir:EW\nname:corridor\nX=#\nY=#\n\n#X###X#\n#.#.#.#\nY.....#\n.......\nY.....#\n#.#.#.#\n#######`\n];\n\n// Corners\nCrypt.tiles.corner = [\n`\ndir:NW\nname:corner\nX=#\nY=#\n\n#X...X#\n###.###\nY....##\n.....##\nY....##\n#######\n#######`,\n\n`\ndir:NW\nname:corner\nX=#\nY=#\n\n#X#.#X#\n#.....#\nY.....#\n......#\nY.###.#\n#.....#\n#######`,\n\n`\ndir:NE\nname:corner\nX=.\nY=#\n\n#X...X#\n###.###\nY#...#.\n##.....\nY#...#.\n#######\n#######`,\n\n`\ndir:NE\nname:corner\nX=#\nY=#\n\n#X#.#X#\n#.....#\nY.###.#\n#......\nY.....#\n#.....#\n#######`,\n\n`\ndir:SE\nname:corner\nX=#\nY=#\n\n#X###X#\n###.###\nY#...#.\n##.....\nY#...#.\n###.###\n###.###`,\n\n`\ndir:SE\nname:corner\nX=#\nY=#\n\n#X###X#\n#.#.#.#\nY#...##\n#......\nY#...##\n#.#.#.#\n###.###`,\n\n`\ndir:SW\nname:corner\nX=#\nY=.\n\n#X###X#\n###.###\nY#...##\n......#\nY#...##\n###.###\n###.###`\n];\n\n\n// The rest\nCrypt.tiles.misc = [\n`\ndir:SEW\nname:threeway\nX=#\nY=.\n\n#X###X#\n###.###\nY#...#.\n.......\nY#...#.\n###.###\n###.###`,\n\n`\ndir:SEW\nname:threeway\nX=#\nY=#\n\n#X###X#\n#.....#\nY.#.#.#\n..#.#..\nY##.###\n#.....#\n#.....#`,\n\n`\ndir:NEW\nname:threeway\nX=#\nY=.\n\n#X...X#\n###.###\nY#...#.\n.......\nY#...#.\n#######\n#######`,\n\n`\ndir:NSW\nname:threeway\nX=#\nY=#\n\n#X...X#\n###.###\nY#...##\n......#\nY#...##\n###.###\n###.###`,\n\n`\ndir:NSE\nname:threeway\nX=#\nY=#\n\n#X...X#\n###.###\nY#...##\n##.....\nY#...##\n###.###\n###.###`\n];\n\nCrypt.templates.start = Crypt.tiles.start.map(tile => {\n    return Template.createTemplate(tile);\n});\n\n/* Returns the starting room for the crypt generation. Note that 'this' should\n * be bound to Template.Level object. */\nCrypt.startRoomFunc = function() {\n    const tile: ElemTemplate = RNG.arrayGetRand(Crypt.templates.start);\n    let x = RNG.getUniformInt(0, this.tilesX - 1);\n    let y = RNG.getUniformInt(0, this.tilesY - 1);\n    switch (tile.getProp('name')) {\n        case 'start_nsew': {\n            x = Math.floor(this.tilesX / 2);\n            y = Math.floor(this.tilesY / 2);\n            break;\n        }\n        case 'start_sew': {\n            y = 0;\n            if (x === 0) {x += 1;}\n            if (x === this.tilesX - 1) {x -= 1;}\n            break;\n        }\n        case 'start_new': {\n            y = this.tilesY - 1;\n            if (x === 0) {x += 1;}\n            if (x === this.tilesX - 1) {x -= 1;}\n            break;\n        }\n        case 'start_nse': {\n            x = 0;\n            if (y === 0) {y += 1;}\n            if (y === this.tilesY - 1) {y -= 1;}\n            break;\n\n        }\n        case 'start_nsw': {\n            x = this.tilesX - 1;\n            if (y === 0) {y += 1;}\n            if (y === this.tilesY - 1) {y -= 1;}\n            break;\n\n        }\n        default: break;\n    }\n\n    return {\n        x, y, room: tile\n    };\n};\n\n// Note that the starting rooms are not included in this list, thus they'll be\n// placed only by the startRoomFunc\nCrypt.Models.default = []\n    .concat(Crypt.tiles.corner)\n    .concat(Crypt.tiles.corridor)\n    .concat(Crypt.tiles.omni)\n    .concat(Crypt.tiles.term)\n    .concat(Crypt.tiles.misc);\n\nCrypt.templates.all = Crypt.Models.default.map(tile => (\n    Template.createTemplate(tile)\n));\nconst transformed = Template.transformList(Crypt.templates.all);\nCrypt.templates.all = Crypt.templates.all.concat(transformed);\n","\n/* Generic tiles for building vaults inside levels. Note that vaults don't have\n * their exit directions specified. This guarantees they are excluded from\n * ordinary room placement.\n * When creating a vault, one tile with exit\n * directions must be connected to the exit of the vault. */\nimport RG from '../src/rg';\nimport {Template} from '../src/template';\n\nexport const Vault: any = {};\nVault.tiles = {};\n\nVault.tiles.vault = [\n`\nname:vault_small_s\nX=#\nY=#\n\n#X###X#\n#..?..#\nY.....#\n#.....#\n#.....#\nY.....#\n###.###`,\n\n`\nname:vault_small_n\nX=#\nY=#\n\n#X#.#X#\nY.....#\n#.....#\n#.....#\nY.....#\n#..?..#\n#######`,\n\n`\nname:vault_small_e\nX=#\nY=#\n\n##X##X#\nY.....#\n#.....#\n#?.....\n#.....#\nY.....#\n#######`,\n\n`\nname:vault_small_w\nX=#\nY=#\n\n#X##X##\nY.....#\n#.....#\n.....?#\n#.....#\nY.....#\n#######`,\n\n`\nname:vault_medium_s\nX=#\nY=#\n\n#X...X#\nY.....#\n#.....#\n#.....#\n#.....#\nY.....#\n###.###`,\n\n`\nname:vault_medium_n\nX=#\nY=#\n\n#X###X#\n#..?..#\nY.....#\n#.....#\n#.....#\nY..#..#\n##...##`\n];\n\nVault.tiles.corner = [\n`\nname:vault_nw_corner\nX=#\nY=#\n\n#X###X#\nY......\n#......\n#......\n#......\nY......\n#......`,\n\n`\nname:vault_ne_corner\nX=#\nY=.\n\n#X###X#\nY.....#\n......#\n......#\n......#\nY.....#\n......#`,\n\n`\nname:vault_sw_corner\nX=.\nY=#\n\n#X...X.\nY......\n#......\n#......\n#......\nY......\n###.###`,\n\n`\nname:vault_se_corner\nX=.\nY=.\n\n.X...X#\nY.....#\n......#\n......#\n......#\nY.....#\n#######`\n];\n\nVault.tiles.wall = [\n`\nname:vault_n_wall\nX=#\nY=.\n\n#X###X#\nY......\n.......\n.......\n.......\nY......\n.......`,\n`\nname:vault_e_wall\nX=.\nY=.\n\n.X...X#\nY.....#\n......#\n......#\n......#\nY.....#\n......#`,\n`\nname:vault_w_wall\nX=.\nY=#\n\n#X...X.\nY......\n#......\n#......\n#......\nY......\n#......`,\n`\nname:vault_s_wall\nX=.\nY=.\n\n.X...X.\nY......\n.......\n.......\n.......\nY......\n##...##`\n];\n\nVault.tiles.center = [\n`\nname:vault_center1\nX=.\nY=.\n\n.X...X.\nY......\n.......\n.......\n.......\nY......\n.......`,\n\n`\nname:vault_center2\nX=.\nY=.\n\n.X...X.\nY..#...\n...#...\n.#####.\n...#...\nY..#...\n.......`,\n`\nname:vault_center3\nX=#\nY=#\n\n.X...X.\nY..#..#\n...#...\n.#####.\n...#...\nY..#..#\n.#...#.`\n];\n\n\nVault.func = {};\n\n/* Creates a medium vault to the given location. If connecting tile is given,\n* it's added below the vault. */\nVault.func.createMediumVault = (x, y, templLevel, connTile) => {\n  const vaultN = templLevel.findTemplate({name: 'vault_medium_n'});\n  const vaultS = templLevel.findTemplate({name: 'vault_medium_s'});\n\n  templLevel.addRoom(vaultN, x, y);\n  templLevel.addRoom(vaultS, x, y + 1);\n  if (connTile) {\n    templLevel.addRoom(connTile, x, y + 2);\n  }\n};\n\n/* Creates a large vault to the given location. */\nVault.func.createLargeVault = (x, y, templLevel, connTile) => {\n  const vaultNW = templLevel.findTemplate({name: 'vault_nw_corner'});\n  const vaultNE = templLevel.findTemplate({name: 'vault_ne_corner'});\n  const vaultSW = templLevel.findTemplate({name: 'vault_sw_corner'});\n  const vaultSE = templLevel.findTemplate({name: 'vault_se_corner'});\n\n  templLevel.addRoom(vaultNW, x, y);\n  templLevel.addRoom(vaultNE, x + 1, y);\n  templLevel.addRoom(vaultSW, x, y + 1);\n  templLevel.addRoom(vaultSE, x + 1, y + 1);\n\n  if (connTile) {\n    templLevel.addRoom(connTile, x, y + 2);\n  }\n\n};\n\nVault.func.createHugeVault = (x, y, templLevel, centerName, connTile) => {\n  // Add vault corners first\n  const vaultNW = templLevel.findTemplate({name: 'vault_nw_corner'});\n  const vaultNE = templLevel.findTemplate({name: 'vault_ne_corner'});\n  const vaultSW = templLevel.findTemplate({name: 'vault_sw_corner'});\n  const vaultSE = templLevel.findTemplate({name: 'vault_se_corner'});\n\n  if (RG.isNullOrUndef([vaultNW, vaultNE, vaultSW, vaultSE])) {\n      RG.err('Vault.func', 'createHugeVault',\n          'Corner templates cannot be null. Check they are loaded');\n  }\n\n  templLevel.addRoom(vaultNW, x, y);\n  templLevel.addRoom(vaultNE, x + 2, y);\n  templLevel.addRoom(vaultSW, x, y + 2);\n  templLevel.addRoom(vaultSE, x + 2, y + 2);\n\n  // Vault center is picked using the given string\n  const vaultCenter = templLevel.findTemplate({name: centerName});\n  templLevel.addRoom(vaultCenter, x + 1, y + 1);\n\n  // Finally, add vault walls\n  const vaultWallN = templLevel.findTemplate({name: 'vault_n_wall'});\n  const vaultWallE = templLevel.findTemplate({name: 'vault_e_wall'});\n  const vaultWallW = templLevel.findTemplate({name: 'vault_w_wall'});\n  const vaultWallS = templLevel.findTemplate({name: 'vault_s_wall'});\n\n  templLevel.addRoom(vaultWallN, x + 1, y);\n  templLevel.addRoom(vaultWallE, x + 2, y + 1);\n  templLevel.addRoom(vaultWallW, x, y + 1);\n  templLevel.addRoom(vaultWallS, x + 1, y + 2);\n\n  if (connTile) {\n    let tile = connTile;\n    if (typeof connTile === 'string') {\n        tile = templLevel.findTemplate({name: connTile});\n    }\n    templLevel.addRoom(tile, x + 1, y + 3);\n  }\n\n};\n\nVault.Models = {};\n\nVault.Models.default = []\n    .concat(Vault.tiles.center)\n    .concat(Vault.tiles.corner)\n    .concat(Vault.tiles.wall)\n    .concat(Vault.tiles.vault);\n\nVault.templates = {};\nVault.templates.all = Vault.Models.default.map(tile => (\n    Template.createTemplate(tile)\n));\nconst transformed = Template.transformList(Vault.templates.all);\nVault.templates.all = Vault.templates.all.concat(transformed);\n","/* This file contains factory objects for generating actors. */\n\nimport RG from './rg';\nimport * as Actor from './actor';\nimport * as Brain from './brain';\nimport * as ObjectShell from './objectshellparser';\nimport {ActorMods} from '../data/actor-mods';\nimport {Spell} from './spell';\nimport * as Component from './component';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:FactoryActor');\n\nconst initCombatant = (comb, obj) => {\n    const {hp, att, def, prot} = obj;\n\n    if (!RG.isNullOrUndef([hp])) {\n        const hComp = comb.get('Health');\n        hComp.setHP(hp);\n        hComp.setMaxHP(hp);\n    }\n\n    let combatComp = null;\n    if (!comb.has('Combat')) {\n        combatComp = new Component.Combat();\n        comb.add(combatComp);\n    }\n    else {\n        combatComp = comb.get('Combat');\n    }\n\n    if (!RG.isNullOrUndef([att])) {combatComp.setAttack(att);}\n    if (!RG.isNullOrUndef([def])) {combatComp.setDefense(def);}\n    if (!RG.isNullOrUndef([prot])) {combatComp.setProtection(prot);}\n\n};\n\n/* Object for adjusting actor properties after the generation. */\nexport const ActorRandomizer = function() {\n\n};\n\nActorRandomizer.prototype.adjustActor = function(actor) {\n    const type = actor.getType();\n    if (ActorMods.hasOwnProperty(type)) {\n        const {stats} = ActorMods[type];\n        Object.keys(stats).forEach(statName => {\n            const setter = RG.formatSetterName(statName);\n            const getter = RG.formatSetterName(statName);\n            const statVal = actor.get('Stats')[getter];\n            const newValue = statVal + stats[statName];\n            actor.get('Stats')[setter](newValue);\n        });\n    }\n};\n\n/* Factory object for creating the actors. */\nexport const FactoryActor = function() {\n    this._randomizer = new ActorRandomizer();\n\n    this.dbg = function(...args) {\n        if (debug.enabled) {\n            debug(...args);\n        }\n    };\n\n    /* Creates a player actor. */\n    this.createPlayer = (name, obj) => {\n        const player = new Actor.SentientActor(name);\n        player.setIsPlayer(true);\n        initCombatant(player, obj);\n        this._randomizer.adjustActor(player);\n        return player;\n    };\n\n    this.createRandomActor = function(query) {\n        const parser = ObjectShell.getParser();\n        return parser.createRandomActor(query);\n    };\n\n    /* Factory method for non-player actors. */\n    this.createActor = function(name, obj: any = {}): Actor.SentientActor {\n        const actor = new Actor.SentientActor(name);\n        actor.setType(name);\n\n        const brain = obj.brain;\n        initCombatant(actor, obj);\n        this._randomizer.adjustActor(actor);\n        if (!RG.isNullOrUndef([brain])) {\n            if (typeof brain === 'object') {\n                actor.setBrain(brain);\n            }\n            else { // If brain is string, use factory to create a new one\n                const newBrain = this.createBrain(actor, brain);\n                actor.setBrain(newBrain);\n            }\n        }\n        return actor;\n    };\n\n    /* Factory method for AI brain creation.*/\n    this.createBrain = (actor, brainName) => {\n        switch (brainName) {\n            case 'Flame': return new Brain.BrainFlame(actor);\n            case 'GoalOriented': return new Brain.BrainGoalOriented(actor);\n            case 'NonSentient': return new Brain.BrainNonSentient(actor);\n            case 'SpellCaster': return new Brain.BrainSpellCaster(actor);\n            case 'Spirit': return new Brain.BrainSpirit(actor);\n            default: {\n                if (Brain[brainName]) {\n                    return new Brain[brainName](actor);\n                }\n                else if (brainName && brainName !== '') {\n                    let msg = `Warning. No brain type ${brainName} found`;\n                    msg += 'Using the default Brain.BrainSentient instead.';\n                    console.warn(msg);\n                }\n                return new Brain.BrainSentient(actor);\n            }\n        }\n    };\n\n\n};\n\nFactoryActor.prototype.createSpell = function(spellName) {\n    if (Spell.hasOwnProperty(spellName)) {\n        return new Spell[spellName]();\n    }\n    else {\n        const keys = Object.keys(Spell).join('\\n\\t');\n        RG.err('FactoryActor', 'createSpell',\n            `No spell ${spellName} found in Spell: \\n\\t${keys}`);\n    }\n    return null;\n};\n\n/* Generates N actors based on constraints and returns a list of actors. */\nFactoryActor.prototype.generateNActors = function(nActors, func, maxDanger) {\n    if (!Number.isInteger(maxDanger) || maxDanger <= 0) {\n        RG.err('Factory.Actor', 'generateNActors',\n            'maxDanger (> 0) must be given. Got: ' + maxDanger);\n    }\n    if (maxDanger < 3) {maxDanger = 3;} // maxDanger 1/2 not very interesting\n\n    const parser = ObjectShell.getParser();\n    const actors = [];\n    const defaultFunc = { // Used if no func given\n        func: actor => actor.danger <= maxDanger\n    };\n    for (let i = 0; i < nActors; i++) {\n\n        // Generic randomization with danger level\n        let actor = null;\n        if (!func) {\n            actor = parser.createRandomActorWeighted(1, maxDanger,\n                defaultFunc);\n        }\n        else {\n            actor = parser.createRandomActor({\n                func: actShell => (\n                    func(actShell) &&\n                    actShell.danger <= maxDanger\n                )\n            });\n        }\n\n        if (actor) {\n            // This levels up the actor to match current danger level\n            const objShell = parser.dbGet(RG.TYPE_ACTOR, actor.getName());\n            const expLevel = maxDanger - objShell.danger;\n            if (expLevel > 1) {\n                RG.levelUpActor(actor, expLevel);\n            }\n            actors.push(actor);\n        }\n        else {\n            let msg = 'Factory Could not meet constraints for actor.';\n            msg += ' maxDanger: ' + maxDanger;\n            RG.diag(msg);\n            if (func.constraint) {\n                const json = JSON.stringify(func.constraint);\n                RG.diag('Used constraints were: ' + json);\n            }\n            else if (!func) {\n                RG.diag('No func was given, so used randomWeighted');\n            }\n        }\n\n    }\n    return actors;\n};\n","\nimport RG from '../rg';\n\n/* A task represents a part of a quest. */\nexport class Task {\n\n    public stepType: string;\n    public name: string;\n    public taskType: string;\n\n    constructor(taskType: string) {\n        this.stepType = 'Task';\n        this.name = '';\n        this.taskType = taskType;\n    }\n\n    public isTask(): this is Task {return true;}\n    public isQuest(): this is Quest {return false;}\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getTaskType(): string {\n        return this.taskType;\n    }\n}\n\nexport type QuestStep = Task | Quest;\n\n/* A quest object which can be used to model quests. */\nexport class Quest {\n    public name: string;\n    public steps: QuestStep[]; // Atomics/sub-quests\n    public stepType: string;\n    public motive: string;\n    public terms: any[];\n\n    constructor(name: string, tasks?: any[]) { // TODO fix typings\n        if (name && typeof name !== 'string') {\n            RG.err('Quest', 'new', 'Quest must have a name!');\n        }\n        this.name = name;\n        this.steps = []; // Atomics/sub-quests\n        this.stepType = 'Quest';\n        this.motive = '';\n        this.terms = [];\n\n        if (Array.isArray(tasks)) {\n            tasks.forEach(taskType => {\n                if (taskType.isQuest) {\n                    this.addStep(taskType);\n                }\n                else if (taskType.isTask) {\n                    this.addStep(taskType);\n                }\n                else {\n                    const task = new Task(taskType);\n                    this.addStep(task);\n                }\n            });\n        }\n    }\n\n    public setName(name): void {this.name = name;}\n    public getName(): string {return this.name;}\n    public setMotive(motive: string): void {this.motive = motive;}\n    public getMotive(): string {return this.motive;}\n    public isTask(): this is Task {return false;}\n    public isQuest(): this is Quest {return true;}\n\n    public addTerm(term): void {\n        this.terms.push(term);\n    }\n\n    public getTasks(): Task[] {\n        const result = this.steps.filter(step => step.isTask());\n        return result as Task[];\n    }\n\n    public addStep(step: QuestStep): void {\n        if (Array.isArray(step)) {\n            this.steps = this.steps.concat(step);\n        }\n        else {\n            this.steps.push(step);\n        }\n    }\n\n    public numQuests(): number {\n        let sum = 1;\n        this.steps.forEach(step => {\n            if (step.isQuest && step.isQuest()) {\n                sum += 1;\n            }\n        });\n        return sum;\n    }\n\n    /* Returns the number of immediate tasks. */\n    public numTasks(): number {\n        const numSubquests = this.numQuests() - 1;\n        return this.steps.length - numSubquests;\n    }\n\n    public getSteps(): QuestStep[] {\n        return this.steps.slice();\n    }\n\n    public numSteps(): number {\n        return this.steps.length;\n    }\n}\n","\nimport RG from '../rg';\nimport {Entity} from '../entity';\nimport {Level} from '../level';\n\ntype ZoneBase = import('../world').ZoneBase;\n\n//---------------------------------------------------------------------------\n// QUESTDATA for storing quest mapping information\n//---------------------------------------------------------------------------\n\n/* Used when target creation is deferred until all tasks are mapped. */\nexport interface QuestObjSurrogate {\n    createTarget: string; // Factory function to call\n    args?: any[];\n}\n\nexport type QuestTargetObj = Entity | ZoneBase | QuestObjSurrogate;\n\ninterface QuestPathObj {\n    type: string;\n    target: QuestTargetObj;\n}\n\nexport class QuestData {\n    public static mapStepToType: {[key: string]: string};\n\n    // TODO fix typings\n    public _stacks: {[key: string]: QuestTargetObj[]};\n    public path: QuestPathObj[];\n    public _ptr: {[key: string]: any};\n\n    constructor() {\n        this._stacks = {};\n        this.path = [];\n        this._ptr = {}; // Pointers for iteration\n    }\n\n    /* Adds one target for the quest. */\n    public addTarget(targetType: string, obj: QuestTargetObj): void {\n        if (!RG.isEntity(obj)) {\n            if (!(obj as QuestObjSurrogate).createTarget) {\n                const json = JSON.stringify(obj);\n                RG.err('QuestData', 'addTarget',\n                    `Only entities can be added. Got: ${json}`);\n            }\n        }\n        if (QuestData.mapStepToType[targetType]) {\n            if (!this._stacks[targetType]) {\n                this._stacks[targetType] = [];\n            }\n            this._stacks[targetType].push(obj);\n            this.path.push({type: targetType, target: obj});\n        }\n        else {\n            const steps = JSON.stringify(QuestData.mapStepToType);\n            RG.err('QuestData', 'add',\n                `Step type ${targetType} not supported. See:\\n${steps}`);\n        }\n    }\n\n    public replaceTarget(key: string, oldTarget: QuestTargetObj, newTarget: Entity): boolean {\n        const objList = this._stacks[key];\n        let index = objList.indexOf(oldTarget);\n        if (index >= 0) {\n            objList.splice(index, 1, newTarget);\n            index = this.path.findIndex(obj => obj.target === oldTarget);\n            if (index >= 0) {\n                const oldTargetObj = this.path[index];\n                const newTargetObj: QuestPathObj = {\n                    target: newTarget, type: oldTargetObj.type};\n                this.path.splice(index, 1, newTargetObj);\n            }\n            else {\n                RG.err('QuestData', 'replaceTarget',\n                    'Could not replace target on path');\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public numSteps(): number {\n        const num = this.path.length;\n        return num;\n    }\n\n    public keys(): string[] {\n        const keys = Object.keys(this._stacks);\n        return keys;\n    }\n\n    public getPathTypes(): string[] {\n        return this.path.map(pair => pair.type);\n    }\n\n    public getPathTargets(): QuestTargetObj[] {\n        return this.path.map(pair => pair.target);\n    }\n\n    public pop(targetType) {\n        if (this._stacks[targetType]) {\n            return this._stacks[targetType].pop();\n        }\n        return null;\n    }\n\n    /* Reset iterators of the quest data. */\n    public resetIter(): void {\n        this.keys().forEach(targetType => {\n            this._ptr[targetType] = 0;\n        });\n    }\n\n    public next(targetType) {\n        if (this._stacks[targetType]) {\n            if (!this._ptr.hasOwnProperty(targetType)) {\n                this._ptr[targetType] = 0;\n            }\n            const ptrVal = this._ptr[targetType];\n            if (ptrVal < this._stacks[targetType].length) {\n                ++this._ptr[targetType];\n                return this._stacks[targetType][ptrVal];\n            }\n        }\n        return null;\n    }\n\n    public getCurrent(targetType) {\n        if (this._stacks[targetType]) {\n            const stack = this._stacks[targetType];\n            return stack[stack.length - 1];\n        }\n        return null;\n    }\n\n    public getCurrentLocation(): Level {\n        const location = this.getCurrent('location') as Level;\n        if (location) {return location;}\n        RG.err('QuestGen', 'getCurrentLocation',\n            'No location found');\n    }\n\n    /* Returns human-readable description of the quest. */\n    public getDescr(): string {\n        // this.resetIter();\n        let res = '';\n        this.path.forEach(pair => {\n            const step = pair.type;\n            // const value = this.next(step);\n            const value = pair.target;\n            const name = RG.getName(value);\n            res += step + ' ' + name + '. ';\n        });\n        return res;\n    }\n\n    public toJSON() {\n        const path: any = [];\n        this.path.forEach(step => {\n            const refType = QuestData.mapStepToType[step.type];\n            if (refType) {\n                if ((step.target as Entity).getID) {\n                    const pathData = {\n                        type: step.type,\n                        target: RG.getObjRef(refType, step.target)\n                    };\n                    path.push(pathData);\n                }\n                else {\n                    const pathData = {\n                        type: step.type, target: step.target};\n                    path.push(pathData);\n                }\n            }\n            else {\n                console.error('Used step is', step);\n                RG.err('QuestData', 'toJSON',\n                    `No refType for step type ${step.type}`);\n            }\n        });\n        path.$objRefArray = true;\n        return {\n            createFunc: 'createQuestData',\n            value: {\n                path\n            }\n        };\n    }\n}\n\nQuestData.mapStepToType = {\n    capture: 'entity',\n    escort: 'entity',\n    exchange: 'item',\n    experiment: 'item',\n    explore: 'element',\n    damage: 'entity',\n    defend: 'entity',\n    get: 'item',\n    give: 'entity',\n    kill: 'entity',\n    listen: 'entity',\n    location: 'place',\n    finishbattle: 'place',\n    read: 'item',\n    repair: 'element',\n    report: 'entity',\n    reportListen: 'entity',\n    rescue: 'entity',\n    spy: 'entity',\n    steal: 'item',\n    take: 'item',\n    subquest: 'entity',\n    use: 'item',\n    winbattle: 'place'\n};\n","\nimport dbg = require('debug');\nconst debug = dbg('bitn:quest-gen');\nimport {Random} from '../random';\nimport prettybnf = require('prettybnf');\n\nimport {Quest, Task} from './quest-task';\nimport {QuestGrammar} from '../../data/quest-grammar';\nconst questGrammar = QuestGrammar.grammar;\n\nconst RNG = Random.getRNG();\n\n//---------------------------------------------------------------------------\n// QUESTGEN for generating quest sequences procedurally\n//---------------------------------------------------------------------------\ninterface QuestGenConf {\n    [key: string]: any;\n}\n\nfunction extract(key, obj) {\n    return obj[key];\n}\n\nexport class QuestGen {\n    public static rules: any;\n    public static defaultConfig: {[key: string]: any};\n\n    /* Can be used for creating quest grammar/rules from a string in BNF format. */\n    public static parse(grammar: string) {\n        const ast = prettybnf.parse(grammar);\n        const rules = {};\n        ast.productions.forEach(prod => {\n            rules[prod.lhs.text] = prod.rhs.map(extract.bind(null, 'terms'));\n        });\n        return rules;\n    }\n\n    public rng: Random;\n    public stack: Quest[];\n    public currQuest: Quest;\n    public ruleHist: any; // TODO fix typings\n    public startRule: string;\n\n    constructor(rng?: Random) {\n        this._init();\n        this.rng = rng || RNG;\n    }\n\n    public _init(): void {\n        this.stack = []; // Stack for quests\n        this.currQuest = null;\n        this.ruleHist = {};\n        this.startRule = 'QUEST';\n    }\n\n    /* Generates a quest with specific questgiver motive. */\n    public genQuestWithMotive(conf: QuestGenConf = {}): Quest {\n        const {motive} = conf;\n        const questRules = conf.rules || QuestGen.rules;\n        const [nameRule] = this.chooseRandomRule(questRules[motive]);\n        const questType = nameRule.text;\n        console.log('questType is', questType);\n        const newConf = Object.assign({}, conf);\n        newConf.rules = questRules;\n        newConf.startRule = questType;\n        const quest: Quest = this.genQuestWithConf({startRule: questType,\n            rules: questRules});\n\n        quest.setName(questType);\n        quest.setMotive(motive);\n        return quest;\n    }\n\n    /* Main function you want to call. Generates a random quest based on given conf\n     * or default conf.\n     */\n    public genQuestWithConf(conf: QuestGenConf = {}): Quest {\n        if (conf.debug) {debug.enabled = true;}\n        const questRules = conf.rules || QuestGen.rules;\n        const startRule = conf.startRule || 'QUEST';\n\n        let ok = false;\n        let watchdog = conf.maxTries || 20;\n        let quest = [];\n\n        while (!ok) {\n            this._init();\n            this.startRule = startRule;\n\n            debug('=== Generating new quest now ===');\n            quest = this.generateQuest(questRules, startRule).split('|');\n            ok = this._questMeetsReqs(quest, conf);\n            if (!ok) {\n                debug('QUEST DISCARDED');\n            }\n\n            if (--watchdog === 0) {\n                console.warn('Could not find a matching quest.');\n                break;\n            }\n        }\n\n        return this.currQuest;\n    }\n\n    public genQuestWithName(name: string): Quest {\n        const quest = new Quest(name);\n        const taskGoto = new Task('<goto>already_there');\n        quest.addStep(taskGoto);\n        const taskKill = new Task('<kill>kill');\n        quest.addStep(taskKill);\n        return quest;\n    }\n\n    public _questMeetsReqs(quest, conf): boolean {\n        let ok = true;\n\n        // Check if quest min/max length is met\n        const minLength = conf.minLength || 1;\n        const maxLength = conf.maxLength || -1;\n        if (quest.length <= maxLength || maxLength === -1) {\n            if (quest.length >= minLength) {\n                ok = true;\n                debug('MATCHING QUEST FOUND');\n            }\n            else {ok = false;}\n        }\n        else {ok = false;}\n\n        if (conf.minQuests) {\n            ok = ok && this.currQuest.numQuests() >= conf.minQuests;\n        }\n        if (conf.maxQuests) {\n            ok = ok && this.currQuest.numQuests() <= conf.maxQuests;\n        }\n        return ok;\n    }\n\n    public generateQuest(rules, rule) {\n        if (!this.ruleHist[rule]) {this.ruleHist[rule] = 1;}\n        else {this.ruleHist[rule] += 1;}\n        debug(`generateQuest with rule |${rule}|`);\n\n        if ((rule === this.startRule) || (rule === 'QUEST')) {\n            debug('New (sub)-quest will be generated');\n            const questName = '';\n            this.currQuest = new Quest(questName);\n            this.stack.push(this.currQuest);\n        }\n\n        debug(`Choosing randRule ${rule} from ${JSON.stringify(rules[rule])}`);\n        const randRule = this.chooseRandomRule(rules[rule]);\n        if (Array.isArray(randRule)) {\n            const steps = randRule.map(this.generateTerm.bind(this, rules));\n            this._checkIfQuestOver(rule);\n            return steps.join('|');\n        }\n\n        debug(`generateQuest end reached, return |${randRule}|`);\n        this._checkIfQuestOver(rule);\n        return randRule;\n    }\n\n    public generateTerm(rules, term) {\n        if (!term.text) {\n            const json = JSON.stringify(rules);\n            throw new Error(`Null/undef term.text with rules| ${json}|`);\n        }\n\n        // Used for debugging only at the moment\n        if (term.type === 'terminal') {\n            this.currQuest.addTerm(term.text);\n        }\n        else {\n            this.currQuest.addTerm('<<' + term.text + '>>');\n        }\n\n        if (term.type === 'terminal') {\n            this.currQuest.addStep(new Task(term.text));\n            return term.text;\n        }\n        else {\n            debug(`genTerm: term.type ${term.type} text: ${term.text}`);\n        }\n\n        debug(`calling generate() with term.text |${term.text}|`);\n        return this.generateQuest(rules, term.text);\n    }\n\n    public _checkIfQuestOver(rule): void {\n        if (rule === this.startRule || rule === 'QUEST') {\n            debug('Finishing current quest');\n            const qLen = this.stack.length;\n            if (qLen > 1) {\n                const subQuest = this.stack.pop();\n                this.currQuest = this.stack[this.stack.length - 1];\n                this.currQuest.addStep(subQuest);\n            }\n        }\n    }\n\n    /* Chooses a random rule from arrOfRules. */\n    protected chooseRandomRule(arrOfRules: any[]): any | null {\n        if (Array.isArray(arrOfRules)) {\n            const result = this.rng.arrayGetRand(arrOfRules);\n            debug('chose next rule at RANDOM:', result);\n            return result;\n        }\n        else {\n            debug(`chooseRandomRule() not an ARRAY: |${arrOfRules}`);\n        }\n        return null;\n    }\n\n}\n\n// Read in the default grammar rules for quest generation\nQuestGen.rules = QuestGen.parse(questGrammar);\n\n/* Default config for quest generation. */\nQuestGen.defaultConfig = {\n    rules: QuestGen.rules,\n    startRule: 'QUEST',\n    maxTries: 20,\n    debug: false,\n    minQuests: 1,\n    maxQuests: -1,\n    minLength: 1,\n    maxLength: -1\n};\n","\nimport RG from './rg';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:FactoryZone');\n\nimport * as Verify from './verify';\nimport {Factory, FactoryBase} from './factory';\nimport {FactoryItem} from './factory.items';\nimport {MountainGenerator} from './mountain-generator';\nimport {CityGenerator} from './city-generator';\nimport {CastleGenerator} from './castle-generator';\nimport {Random} from './random';\nimport {ObjectShell} from './objectshellparser';\nimport * as Element from './element';\n\nconst RNG = Random.getRNG();\n\nexport interface ActorConf {\n    actorsPerLevel: number;\n    maxDanger: number;\n    func?: (actor) => boolean;\n}\n\nexport interface ItemConf { // TODO cleanup\n    itemsPerLevel?: number;\n    nItems?: number;\n    maxValue: number;\n    func?: (actor) => boolean;\n}\n\n\nexport const FactoryZone = function() {\n    FactoryBase.call(this);\n    this._verif = new Verify.Conf('FactoryZone');\n    this._parser = ObjectShell.getParser();\n    this.rng = RNG;\n\n    this.getRandLevelType = () => {\n        const type = ['uniform', 'rooms', 'rogue', 'digger'];\n        const nLevelType = this.rng.randIndex(type);\n        return type[nLevelType];\n    };\n\n    this.setRNG = (rng: Random): void => {\n        this.rng = rng;\n    };\n\n    this.addItemsAndActors = function(level, conf) {\n        this._verif.verifyConf('addItemsAndActors', conf,\n            ['nLevel', 'sqrPerItem', 'sqrPerActor', 'maxValue']);\n\n        const numFree = level.getMap().getFree().length;\n        const actorsPerLevel = Math.round(numFree / conf.sqrPerActor);\n        const itemsPerLevel = Math.round(numFree / conf.sqrPerItem);\n        const goldPerLevel = itemsPerLevel;\n\n        debug(`Adding ${actorsPerLevel} monsters and items ` +\n            `${itemsPerLevel} to the level`);\n\n        const getItemConstraintFunc = (min, max) => (\n            item => (\n                item.value >= min &&\n                item.value <= max\n            )\n        );\n\n        const itemConf = {\n            nLevel: conf.nLevel,\n            itemsPerLevel,\n            func: getItemConstraintFunc(0, conf.maxValue),\n            maxValue: conf.maxValue,\n            food: true,\n            gold: true\n        };\n        if (conf.hasOwnProperty('food')) {\n            itemConf.food = conf.food;\n        }\n        if (conf.hasOwnProperty('gold')) {\n            itemConf.gold = conf.gold;\n        }\n        if (conf.item) {\n            itemConf.func = conf.item;\n            debug(`Set itemConf.func to ${conf.item.toString()}`);\n        }\n        else if (conf.minValue) {\n            itemConf.func = getItemConstraintFunc(conf.minValue, conf.maxValue);\n        }\n        this.addNRandItems(level, this._parser, itemConf);\n\n        const actorConf: ActorConf = {\n            actorsPerLevel: conf.actorsPerLevel || actorsPerLevel,\n            maxDanger: conf.maxDanger || conf.nLevel + 1\n        };\n        if (conf.actor) {\n            if (typeof conf.actor === 'function') {\n                actorConf.func = conf.actor;\n            }\n            else {\n                RG.err('FactoryZone', 'addItemsAndActors',\n                    'conf.actor must be a function');\n            }\n        }\n        this.addNRandActors(level, this._parser, actorConf);\n\n        if (itemConf.gold) {\n            const goldConf = {\n                goldPerLevel,\n                nLevel: conf.nLevel + 1\n            };\n            this.addRandomGold(level, this._parser, goldConf);\n        }\n    };\n\n    /* Creates dungeon level. Unless levelType is given, chooses the type\n     * randomly. */\n    this.createDungeonLevel = function(conf) {\n        this._verif.verifyConf('createDungeonLevel', conf, ['x', 'y']);\n        let level = null;\n        let levelType = this.getRandLevelType();\n        if (conf.dungeonType && conf.dungeonType !== '') {\n            levelType = conf.dungeonType;\n        }\n        debug(`dungeonLevel: ${levelType}, ${JSON.stringify(conf)}`);\n        level = this.createLevel(levelType, conf.x, conf.y, conf);\n        this.addItemsAndActors(level, conf);\n        this.addExtraDungeonFeatures(level, conf);\n        return level;\n    };\n\n\n    this.createMountainLevel = function(conf) {\n        let mountConf = Object.assign(MountainGenerator.getFaceOptions(),\n            {\n                maxValue: 100,\n                sqrPerActor: 50,\n                sqrPerItem: 200,\n                nLevel: 4\n            }\n        );\n        mountConf = Object.assign(mountConf, conf);\n        debug(`Creating mountain level with ${conf}`);\n        const mountGen = new MountainGenerator();\n        const mountainLevel = mountGen.createFace(conf.x, conf.y,\n            mountConf);\n        /* const mountainLevel = this.createLevel('mountain',\n            conf.x, conf.y, mountConf);*/\n        this.addItemsAndActors(mountainLevel, mountConf);\n        return mountainLevel;\n    };\n\n    this.createSummitLevel = function(conf) {\n        this._verif.verifyConf('createSummitLevel', conf, ['cols', 'rows']);\n        let summitConf = {\n            maxValue: 100,\n            sqrPerActor: 20,\n            sqrPerItem: 200,\n            nLevel: 4\n        };\n        summitConf = Object.assign(summitConf, conf);\n\n        const mountGen = new MountainGenerator();\n        const summitLevel = mountGen.createSummit(conf.cols, conf.rows,\n            summitConf);\n        debug(`Creating summit level with ${conf}`);\n        this.addItemsAndActors(summitLevel, summitConf);\n        if (!conf.maxValue) {conf.maxValue = summitConf.maxValue;}\n        return summitLevel;\n    };\n\n    //---------------------------\n    // CITY LEVELS\n    //---------------------------\n\n    /* Called for each nLevels of city quarter. Delegates the task to other\n    * functions based on the type of city and quarter. */\n    this.createCityLevel = function(nLevel, conf) {\n        const levelConf = Factory.cityConfBase(conf);\n        levelConf.parser = this._parser;\n        let cityLevel = null;\n\n        const {x, y} = conf;\n        if (levelConf.groupType) {\n            switch (levelConf.groupType) {\n                case 'village': {\n                    cityLevel = this.createVillageLevel(x, y, levelConf);\n                    break;\n                }\n                case 'capital': {\n                    cityLevel = this.createCapitalLevel(\n                        nLevel, x, y, levelConf);\n                    break;\n                }\n                case 'stronghold': {\n                    cityLevel = this.createStrongholdLevel(x, y, levelConf);\n                    break;\n                }\n                case 'fort': {\n                    cityLevel = this.createFortLevel(x, y, levelConf);\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        }\n\n        // Fall back to the default method\n        if (cityLevel === null) {\n            cityLevel = this.createLevel('town', x, y, levelConf);\n            this.populateCityLevel(cityLevel, levelConf);\n        }\n\n        if (conf.friendly) {\n            const actors = cityLevel.getActors();\n            actors.forEach(actor => {\n                if (!actor.has('NonSentient')) {\n                    actor.getBrain().getMemory().removeEnemyType('player');\n                }\n            });\n        }\n\n        if (conf.disposition) {\n            const {disposition} = conf;\n            const actors = cityLevel.getActors();\n            actors.forEach(actor => {\n                Object.keys(disposition).forEach(name => {\n                    if (disposition[name] === 'enemy') {\n                        actor.getBrain().getMemory().addEnemyType(name);\n                    }\n                });\n            });\n        }\n\n        return cityLevel;\n    };\n\n    this.createVillageLevel = function(cols, rows, levelConf) {\n        levelConf.levelType = 'empty';\n        levelConf.wallType = 'wooden';\n\n        if (!levelConf.actorsPerLevel) {\n            levelConf.actorsPerLevel = 30;\n        }\n        if (!levelConf.maxDanger) {\n            levelConf.maxDanger = 3;\n        }\n        if (!levelConf.itemsPerLevel) {\n            levelConf.itemsPerLevel = levelConf.maxDanger * 2;\n        }\n        const cityGen = new CityGenerator();\n        const level = cityGen.create(cols, rows, levelConf);\n        this.populateCityLevel(level, levelConf);\n        this.addItemsToCityLevel(level, levelConf);\n        return level;\n    };\n\n    this.createFortLevel = function(cols, rows, levelConf) {\n        const castleGen = new CastleGenerator();\n        levelConf.roomCount = -1; // Fill all castle tiles\n        const level = castleGen.create(100, 84, levelConf);\n        this.populateCityLevel(level, levelConf);\n        return level;\n    };\n\n    this.createCapitalLevel = function(nLevel, cols, rows, levelConf) {\n        levelConf.levelType = 'miner';\n        let level = null;\n        if (nLevel === 0) {\n            levelConf.levelType = 'townwithwall';\n            level = this.createLevel('townwithwall', 200, 84, levelConf);\n        }\n        else {\n            level = this.createLevel('town', 100, 84, levelConf);\n        }\n        this.populateCityLevel(level, levelConf);\n        return level;\n    };\n\n    this.createStrongholdLevel = function(cols, rows, levelConf) {\n        levelConf.levelType = 'miner';\n        const level = this.createLevel('town', 100, 84, levelConf);\n        this.populateCityLevel(level, levelConf);\n        return level;\n    };\n\n    this.populateCityLevel = function(level, levelConf) {\n        let alignment = levelConf.alignment;\n        if (!alignment) {\n            alignment = this.rng.arrayGetRand(RG.ALIGNMENTS);\n        }\n\n        if (!levelConf.actor) {\n            if (alignment === RG.ALIGN_GOOD) {\n                this.populateWithHumans(level, levelConf);\n            }\n            else if (alignment === RG.ALIGN_EVIL) {\n                this.populateWithEvil(level, levelConf);\n            }\n            else {\n                this.populateWithNeutral(level, levelConf);\n            }\n        }\n        else {\n            this.populateWithActors(level, levelConf);\n        }\n    };\n\n    /* Adds items to the city level in a reasonable way. */\n    this.addItemsToCityLevel = function(level, levelConf) {\n        const map = level.getMap();\n        const floorCells = map.getCells(cell => (\n            cell.getBaseElem().getType() === 'floorhouse'\n        ));\n        const factItem = new FactoryItem();\n        const parser = ObjectShell.getParser();\n        const itemConf: ItemConf = {\n            func: item => item.value <= (levelConf.maxDanger * 10),\n            maxValue: levelConf.maxDanger * 50\n        };\n        if (!RG.isNullOrUndef([levelConf.itemsPerLevel])) {\n            itemConf.itemsPerLevel = levelConf.itemsPerLevel;\n        }\n\n        factItem.addItemsToCells(level, parser, floorCells, itemConf);\n    };\n\n    this.populateWithActors = function(level, levelConf) {\n        const actorConf = {\n            actorsPerLevel: levelConf.actorsPerLevel || 100,\n            maxDanger: levelConf.maxDanger || 10,\n            func: levelConf.actor\n        };\n        const nAdded = this.addNRandActors(level, this._parser, actorConf);\n        if (nAdded === 0) {\n            const parent = level.getParent();\n            let msg = 'No actors added to level.';\n            msg += '\\nUsed conf was ' + JSON.stringify(actorConf);\n            if (parent) {\n                msg += '\\nLevel parent: ' + parent.getName();\n            }\n            RG.err('FactoryZone', 'populateWithActors', msg);\n        }\n    };\n\n    this.populateWithHumans = function(level, levelConf) {\n        const actorConf = {\n            actorsPerLevel: levelConf.actorsPerLevel || 100,\n            maxDanger: levelConf.maxDanger || 10,\n            func: actor => (\n                actor.type === 'human' &&\n                actor.name !== 'shopkeeper'\n            )\n        };\n        if (levelConf.func) {actorConf.func = levelConf.func;}\n        this.addNRandActors(level, this._parser, actorConf);\n    };\n\n    this.populateWithEvil = function(level, levelConf) {\n        let allOK = false;\n        while (!allOK) {\n            const raceType = this.rng.arrayGetRand(RG.EVIL_RACES);\n            const actorConf = {\n                actorsPerLevel: levelConf.actorsPerLevel || 100,\n                maxDanger: levelConf.maxDanger || 10,\n                func: actor => (\n                    actor.type === raceType\n                )\n            };\n            if (levelConf.func) {actorConf.func = levelConf.func;}\n            allOK = this.addNRandActors(level, this._parser, actorConf);\n        }\n    };\n\n    this.populateWithNeutral = function(level, levelConf) {\n        const raceType = this.rng.arrayGetRand(RG.NEUTRAL_RACES);\n        const actorConf = {\n            actorsPerLevel: levelConf.actorsPerLevel || 100,\n            maxDanger: levelConf.maxDanger || 10,\n            func: actor => (\n                actor.type === raceType\n            )\n        };\n        if (levelConf.func) {actorConf.func = levelConf.func;}\n        this.addNRandActors(level, this._parser, actorConf);\n    };\n\n    this.addActorToLevel = (actorName, level) => {\n        const actor = this._parser.createActor(actorName);\n        const cell = level.getFreeRandCell();\n        level.addActor(actor, cell.getX(), cell.getY());\n    };\n\n    /* Adds some special features to dungeon levels to make them more\n     * interestings. */\n    this.addExtraDungeonFeatures = (level, conf) => {\n        const extras = level.getExtras();\n        if (extras.rooms) {\n            extras.rooms.forEach(room => {\n                room.getDoors((x, y) => {\n                    level.addElement(new Element.ElementDoor(true), x, y);\n                });\n            });\n\n            const room = this.rng.arrayGetRand(extras.rooms);\n            const bbox = room.getBbox();\n            this.addActorsToBbox(level, bbox, conf);\n        }\n    };\n\n\n};\nRG.extend2(FactoryZone, FactoryBase);\n","\nimport RG from './rg';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:ConfStack');\n\n/* An Object for managing configuration/scope stacks when creating a world. */\nexport const ConfStack = function() {\n\n    this.globalConf = {};\n    this.scope = [];\n    this.confStack = [];\n\n    this.setGlobalConf = function(conf) {\n        this.globalConf = conf;\n    };\n\n    this.getGlobalConf = function() {\n        return this.globalConf;\n    };\n\n    this.getScope = function() {\n        return this.scope;\n    };\n\n    /* Pushes the hier name and configuration on the stack. Config can be\n    * queried with getConf(). */\n    this.pushScope = function(conf) {\n        this.scope.push(conf.name);\n        this.confStack.push(conf);\n        this.dbg('Pushed scope: ' + conf.name);\n    };\n\n    /* Removes given config and the name it contains from stacks. Reports an\n    * error if removed name does not match the name in conf. */\n    this.popScope = function(conf) {\n        const name = conf.name;\n        const poppedName = this.scope.pop();\n        if (poppedName !== name) {\n            RG.err('Factory.ConfStack', 'popScope',\n                `Popped: ${poppedName}, Expected: ${name}`);\n        }\n        else {\n            const currConf = this.confStack.pop();\n            this.dbg('Popped scope: ' + currConf.name);\n        }\n    };\n\n    /* Returns a config value. */\n    this.getConf = function(keys) {\n        // First travel the config stack from the top\n        for (let i = this.confStack.length - 1; i >= 0; i--) {\n            this.dbg(`[${i}] looking for |${keys}|`);\n            if (this.confStack[i].hasOwnProperty(keys)) {\n                this.dbg(`  >> [${i}] Found key |${keys}|`);\n                return this.confStack[i][keys];\n            }\n        }\n\n        // If nothing found, try the global configuration\n        if (this.globalConf.hasOwnProperty(keys)) {\n            return this.globalConf[keys];\n        }\n\n        return null;\n    };\n\n    this.dbg = function(msg) {\n        if (debug.enabled) {\n            RG.diag(msg);\n        }\n    };\n\n};\n","\nimport dbg = require('debug');\nconst debug = dbg('bitn:Game.FromJSON');\n\nimport RG from './rg';\nimport {OWMap} from './overworld.map';\nimport {Battle, Army} from './game.battle';\nimport {GoalsTop} from './goals-top';\nimport {Evaluator} from './evaluators';\nimport {EvaluatorsBattle} from './evaluators-battle';\nimport {Territory} from './territory';\nimport {GameObject} from './game-object';\nimport {QuestData} from './quest';\nimport {WorldFromJSON} from './world.fromjson';\nimport {Level} from './level';\nimport {ActorClass} from './actor-class';\nimport {EventPool} from '../src/eventpool';\nimport {Dice} from './dice';\nimport {Spell} from './spell';\nimport {ELEM, ELEM_MAP} from '../data/elem-constants';\nimport {ObjectShell} from './objectshellparser';\nimport {Component} from './component';\nimport {Item} from './item';\nimport {Actor} from './actor';\nimport {CellMap} from './map';\nimport * as Element from './element';\nimport {FactoryWorld} from './factory.world';\nimport * as World from './world';\nimport {Random} from './random';\nimport {OverWorld} from './overworld';\nimport * as Time from './time';\nimport {WorldSimulation} from './world.simulation';\n\nimport {Brain} from './brain';\nimport {BrainPlayer} from './brain/brain.player';\nimport { BrainSpawner } from './brain/brain.virtual';\n\ntype IAreaTileJSON = World.IAreaTileJSON;\ntype Stairs = Element.ElementStairs;\ntype ElementBase = Element.ElementBase;\ntype Cell = import('./map.cell').Cell;\n\nconst POOL = EventPool.getPool();\nconst SentientActor = Actor.Sentient;\n\nBrain.Player = BrainPlayer;\nBrain.Spawner = BrainSpawner;\n\nconst OBJ_REF_REMOVED = Symbol();\nconst OBJ_REF_NOT_FOUND = null;\n\n/* Object for converting serialized JSON objects to game objects. Note that all\n * actor/level ID info is stored between uses. If you call restoreLevel() two\n * times, all data from 1st is preserved. Call reset() to clear data. */\nexport const FromJSON = function() {\n\n    this._dungeonLevel = 1;\n    this._parser = ObjectShell.getParser();\n\n    // Lookup table for mapping level ID to Map.Level object\n    this.id2level = {};\n    this.id2entity = {};\n    this.id2EntityJson = {};\n    this.id2Object = {};\n    this.id2Place = {};\n\n    this.actorsKilled = {};\n\n    // For restoring component refs\n    this.id2Component = {};\n    this.id2CompJSON = {};\n\n    // Stores comps which needs reference restoring\n    this.compsWithMissingRefs = {};\n\n    // Stores connection information for stairs\n    this.stairsInfo = {};\n\n    this.IND = 0; // For debug msg indenting\n\n}; // FromJSON\n\n//--------------------------\n// SMALL UTILITY FUNCTIONS\n//--------------------------\n\n/* Resets internal data of this object. */\nFromJSON.prototype.reset = function() {\n    this.id2level = {};\n    this.id2entity = {};\n    this.id2EntityJson = {};\n    this.id2Object = {};\n    this.id2Component = {};\n    this.id2CompJSON = {};\n    this.id2Place = {};\n\n    this.stairsInfo = {};\n    this.compsWithMissingRefs = {};\n};\n\nFromJSON.prototype.setChunkMode = function(enable) {\n    this.chunkMode = enable;\n};\n\nFromJSON.prototype.getDungeonLevel = function() {\n    return this._dungeonLevel;\n};\n\nFromJSON.prototype.addObjRef = function(type, obj, json) {\n    const id = obj.getID();\n    if (!Number.isInteger(id)) {\n        RG.err('FromJSON', 'addObjRef',\n            `ID must be integer. Got: |${id}|`);\n    }\n    this.id2entity[id] = obj;\n    this.id2Object[id] = obj;\n    if (json) {\n        this.id2EntityJson[id] = json;\n    }\n\n    if (type === 'level') {\n        this.id2level[id] = obj;\n        this.id2Place[id] = obj;\n    }\n    else if (type === 'element') {\n        // Nothing to do\n    }\n    else if (type === 'entity') {\n        // Nothing to do\n    }\n    else {\n        RG.err('FromJSON', 'addObjRef',\n            `Unsupported type ${type} give`);\n    }\n};\n\n/* Returns an object of requested type. Called should check if OBJ_REF_REMOVED\n * is returned. Then it's up to called to decide what to do, but the object\n * cannot be retrieved. */\nFromJSON.prototype.getObjByRef = function(requestObj) {\n    let objRef = null;\n    if (requestObj.$objRef) {objRef = requestObj.$objRef;}\n    else {objRef = requestObj;}\n\n    if (objRef.type === 'entity') {\n        const ent = this.id2entity[objRef.id];\n        if (!ent) {\n            if (!this.actorsKilled[objRef.id]) {\n                RG.err('FromJSON', 'getObjRef',\n                    `No ID ${objRef.id} found`);\n            }\n            else {\n                return OBJ_REF_REMOVED;\n            }\n        }\n        return ent;\n    }\n    else if (objRef.type === 'level') {\n        return this.id2level[objRef.id];\n    }\n    else if (objRef.type === 'object') {\n        return this.id2Object[objRef.id];\n    }\n    else if (objRef.type === 'component') {\n        return this.id2Component[objRef.id];\n    }\n    else if (objRef.type === 'place') {\n        return this.id2Place[objRef.id];\n    }\n    return OBJ_REF_NOT_FOUND;\n};\n\n//--------------------------\n// MAIN API\n//--------------------------\n\n/* Main function to call when restoring a game. When given Game.Main in\n * serialized JSON, returns the restored Game.Main object. */\nFromJSON.prototype.createGame = function(game, gameJSON) {\n    if (typeof gameJSON === 'string') {\n        RG.err('Game.FromJSON', 'createGame',\n            'An object must be given instead of string');\n    }\n    this.dbg('createGame: Restoring now full game');\n    this.IND = 1;\n\n    // const game = new RG.Game.Main();\n    this.setGlobalConfAndObjects(game, gameJSON);\n    if (gameJSON.chunkManager) {\n        this.setChunkMode(true);\n    }\n\n    Component.setIDCount(gameJSON.lastComponentID);\n    // Component.idCount = gameJSON.lastComponentID;\n\n    const allLevels = [];\n    const levelsToRestore = this.getLevelsToRestore(gameJSON);\n\n    // Levels must be created before the actual world, because the World\n    // object contains only level IDs\n    levelsToRestore.forEach(levelJson => {\n        const level = this.restoreLevel(levelJson);\n        allLevels.push(level);\n        if (!levelJson.parent) {\n            this.dbg('>> No parent. Adding directly ' + level.getID());\n            game.addLevel(level);\n        }\n    });\n\n    if (gameJSON.places) {\n        Object.keys(gameJSON.places).forEach(name => {\n            const place = gameJSON.places[name];\n            const placeObj = this.restorePlace(place);\n            game.addPlace(placeObj);\n        });\n    }\n\n    if (gameJSON.overworld) {\n        const overworld = this.restoreOverWorld(gameJSON.overworld);\n        game.setOverWorld(overworld);\n    }\n\n    if (gameJSON.worldSim) {\n        game.setWorldSim(this.restoreWorldSim(gameJSON.worldSim));\n    }\n\n    // Connect levels using this.id2level + this.stairsInfo\n    this.connectGameLevels(allLevels);\n\n    // Player created separately from other actors for now\n    if (gameJSON.player) {\n        const player = this.restorePlayer(gameJSON.player);\n        this.addRestoredPlayerToGame(player, game, gameJSON);\n    }\n\n    // Entity data cannot be restored earlier because not all object refs\n    // exist when entities are created\n    this.restoreEntityData();\n\n    // Must be called after all entity components are created, this will mainly\n    // fill missing component refs in other components\n    this.restoreComponentData();\n\n    const gameMaster = this.restoreGameMaster(game, gameJSON.gameMaster);\n    game.setGameMaster(gameMaster);\n    this.restoreChunkManager(game, gameJSON);\n\n    this.checkNumOfLevels(game, gameJSON);\n\n    // Restore the ID counters for levels and entities, otherwise duplicate\n    // IDs will appear when new levels/entities are created\n    GameObject.ID = gameJSON.gameObjectID;\n\n    if (debug.enabled) {\n        this.dbg(`Restored GameObject ID count to ${GameObject.ID}`);\n    }\n\n    if (gameJSON.rng) {\n        const rng = new Random(gameJSON.rng.seed);\n        rng.setState(gameJSON.rng.state);\n        game.setRNG(rng);\n    }\n    if (gameJSON.diceRng) {\n        const diceRng = new Random(gameJSON.diceRng.seed);\n        diceRng.setState(gameJSON.diceRng.state);\n        Dice.RNG = diceRng;\n    }\n\n    this.IND = 0;\n    return game;\n};\n\n/* Handles creation of restored player from JSON.*/\nFromJSON.prototype.restorePlayer = function(json) {\n    const player = new SentientActor(json.name);\n    player.setIsPlayer(true);\n    // TODO hack for now, these are restored later\n    player.remove('StatsMods');\n    player.remove('CombatMods');\n\n    player.setType(json.type);\n    player.setID(json.id);\n    // this.id2entity[json.id] = player;\n    // this.addEntityInfo(player, json);\n    this._dungeonLevel = json.dungeonLevel;\n    this.addObjRef('entity', player, json);\n\n    RG.addCellStyle(RG.TYPE_ACTOR, json.name, 'cell-actor-player');\n    // this._addEntityFeatures(json, player);\n    // this.restorePlayerBrain(player, json.brain);\n    return player;\n};\n\n\nFromJSON.prototype.restorePlayerBrain = function(player, brainJSON) {\n    const brain = player.getBrain();\n    const memory = brain.getMemory();\n    const memJSON = brainJSON.memory;\n    Object.keys(memJSON).forEach(setter => {\n        memory[setter](memJSON[setter]);\n    });\n    if (brainJSON.markList) {\n        brain._markList.fromJSON(brainJSON.markList);\n    }\n};\n\n\nFromJSON.prototype.addRestoredPlayerToGame = function(player, game, json) {\n    this._addRegenEvents(game, player);\n    const id = json.player.levelID;\n    const level = game.getLevels().find(item => item.getID() === id);\n    if (level) {\n        const x = json.player.x;\n        const y = json.player.y;\n        level.addActor(player, x, y);\n        game.addPlayer(player);\n    }\n    else {\n        const levelIDs = game.getLevels().map(l => l.getID());\n        const msg = `IDs available: ${levelIDs}`;\n        RG.err('Game.FromJSON', 'addRestoredPlayerToGame',\n            `Cannot find player level object with level ID ${id}. ${msg}`);\n    }\n};\n\n/* Restores all data for already created entity. */\nFromJSON.prototype.restoreEntity = function(json, entity) {\n    if (RG.isActor(entity)) {\n        this.createBrain(json.brain, entity);\n        this._addEntityFeatures(json, entity);\n    }\n    else if (RG.isElement(entity)) {\n        this.restoreElementEntity(json, entity);\n    }\n    else {\n        this.restoreLevelEntity(json, entity);\n    }\n    return entity;\n};\n\nFromJSON.prototype._addEntityFeatures = function(obj, entity) {\n    this.addCompsToEntity(entity, obj.components);\n    this.createInventoryItems(obj, entity);\n    this.createEquippedItems(obj, entity);\n    if (obj.fovRange) {\n        entity.setFOVRange(obj.fovRange);\n    }\n    if (obj.spellbook) {\n        this.createSpells(obj, entity);\n    }\n};\n\nFromJSON.prototype.restoreElementEntity = function(json, entity) {\n    if (entity.getType() === 'lever') {\n        json.addTarget.forEach(objRef => {\n            const entRef = objRef.$objRef;\n            const doorEntity = this.id2entity[entRef.id];\n            if (doorEntity) {\n                entity.addTarget(doorEntity);\n            }\n        });\n    }\n};\n\nFromJSON.prototype.restoreLevelEntity = function(json, entity) {\n    this.addCompsToEntity(entity, json.components);\n};\n\n/* Adds given components into Entity object. */\nFromJSON.prototype.addCompsToEntity = function(ent, comps) {\n    for (const id in comps) {\n        if (id) {\n            const compJSON = comps[id];\n            const name = compJSON.setType;\n            if (!name) {\n                const msg = 'No \"name\" in component: ';\n                RG.err('Game.FromJSON', 'addCompsToEntity',\n                    msg + ': ' + JSON.stringify(compJSON));\n\n            }\n            const newCompObj = this.createComponent(name, compJSON);\n            ent.add(newCompObj);\n        }\n    }\n};\n\n/* Creates the component with given name. */\nFromJSON.prototype.createComponent = function(name, compJSON) {\n    if (!Component.hasOwnProperty(name)) {\n        let msg = `No |${name}| in Component.`;\n        msg += ` compJSON: ${JSON.stringify(compJSON)}`;\n        RG.err('Game.FromJSON', 'createComponent', msg);\n    }\n    // TODO remove error check, change to Component.create(name)\n    const newCompObj = new Component[name]();\n    for (const setFunc in compJSON) {\n        if (typeof newCompObj[setFunc] === 'function') {\n            const valueToSet = compJSON[setFunc];\n            const value = this.getCompValue(newCompObj,\n                compJSON, setFunc, valueToSet);\n            newCompObj[setFunc](value);\n        }\n        else {\n            const json = JSON.stringify(compJSON);\n            RG.err('FromJSON', 'createComponent',\n                `${setFunc} not function in ${name}. Comp: ${json}`);\n\n        }\n    }\n    const id = newCompObj.getID();\n    this.id2Component[id] = newCompObj;\n    this.id2CompJSON[id] = compJSON;\n    return newCompObj;\n};\n\n// valueToSet can be any of following:\n//   1. Create function of defined in Game.FromJSON\n//     - Call function then sets the result of func call\n//     - Function is called with valueToSet.value\n//   2. Sub-component given with createComp\n//     - Need to call createComponent recursively\n//   3. Can be an objRef\n//   4. Can be scalar/object literal which is set with setFunc\nFromJSON.prototype.getCompValue = function(\n    comp, compJSON, setFunc, valueToSet\n) {\n    if (!RG.isNullOrUndef([valueToSet])) {\n        if (Array.isArray(valueToSet)) {\n            // For array, call this function recursively\n            if ((valueToSet as any).$objRefArray) {\n                this.compsWithMissingRefs[compJSON.setID] = comp;\n                return valueToSet;\n            }\n            const newArray = [];\n            valueToSet.forEach(value => {\n                const val = this.getCompValue(comp, compJSON, setFunc, value);\n                newArray.push(val);\n            });\n            return newArray;\n        }\n        else if (valueToSet.createFunc) {\n            const createdObj =\n                this[valueToSet.createFunc](valueToSet.value);\n            return createdObj;\n        }\n        else if (valueToSet.createComp) {\n            const compType = valueToSet.createComp.setType;\n            // Danger of infinite recursion\n            const newSubComp = this.createComponent(compType,\n                valueToSet.createComp);\n            return newSubComp;\n        }\n        else if (valueToSet.$objRef) {\n            if (valueToSet.$objRef.type !== 'component') {\n                const objToSet = this.getObjByRef(valueToSet.$objRef);\n                if (objToSet) {\n                    return objToSet;\n                }\n                else {\n                    const refJson = JSON.stringify(valueToSet.$objRef);\n                    let msg = `Null obj for objRef ${refJson}`;\n                    msg += ` compJSON: ${JSON.stringify(compJSON)}`;\n                    RG.err('FromJSON', 'getCompValue', msg);\n                }\n            }\n            else {\n                this.compsWithMissingRefs[compJSON.setID] = comp;\n                return valueToSet;\n            }\n        }\n        else {\n            return valueToSet;\n        }\n    }\n    else {\n        const jsonStr = JSON.stringify(compJSON);\n        let msg = `valueToSet |${valueToSet}|. setFunc |${setFunc}|`;\n        msg += `Comp |${compJSON.setType}|, json: ${jsonStr}`;\n        RG.err('FromJSON', 'addCompsToEntity', msg);\n    }\n    return null; // Getting here means serious error\n};\n\nFromJSON.prototype.createActorClass = function(args) {\n    const {className, actorRef} = args;\n    const actor = this.getObjByRef(actorRef);\n    if (actor) {\n        return ActorClass.create(className, actor);\n    }\n    RG.err('FromJSON', 'createActorClass',\n        `No actor for class ${className} found`);\n    return null;\n};\n\nFromJSON.prototype.createQuestData = function(json) {\n    const questData = new QuestData();\n    json.path.forEach(pathData => {\n        let target = null;\n        if (pathData.target.$objRef) {\n            target = this.getObjByRef(pathData.target.$objRef);\n        }\n        else {\n            target = pathData.target;\n        }\n        if (target === OBJ_REF_REMOVED) {\n            target = {msg: 'Quest target missing/killed'};\n            // quest is nullified\n        }\n        else if (!target) {\n            const msg = `Missing objRef: ${JSON.stringify(pathData.target)}`;\n            RG.err('FromJSON', 'createQuest', msg);\n        }\n        questData.addTarget(pathData.type, target);\n    });\n    return questData;\n};\n\nFromJSON.prototype.createBrain = function(brainJSON, ent) {\n    const type = brainJSON.type;\n    if (Brain[type]) {\n        const brainObj = new Brain[type](ent);\n        ent.setBrain(brainObj);\n        if (type === 'Player') {\n            this.restorePlayerBrain(ent, brainJSON);\n            return;\n        }\n\n        if (brainJSON.constraint) {\n            brainObj.setConstraint(brainJSON.constraint);\n        }\n\n        // Create the memory (if any)\n        const memObj = brainObj.getMemory();\n        const memJSON = brainJSON.memory;\n        if (memJSON) {\n            memJSON.enemyTypes.forEach(enemyType => {\n                brainObj.addEnemyType(enemyType);\n            });\n\n            if (memJSON.lastAttackedID) {\n                const entity = this.id2entity[memJSON.lastAttackedID];\n                memObj.setLastAttacked(entity);\n            }\n\n            if (memJSON.enemies) {\n                memJSON.enemies.forEach(enemyID => {\n                    const enemy = this.id2entity[enemyID];\n                    if (enemy) {\n                        memObj.addEnemy(enemy);\n                    }\n                });\n            }\n            if (memJSON.friends) {\n                memJSON.friends.forEach(friendID => {\n                    const friend = this.id2entity[friendID];\n                    if (friend) {\n                        memObj.addFriend(friend);\n                    }\n                });\n            }\n            if (memJSON.seen) {\n                memObj._actors.seen = memJSON.seen;\n            }\n\n            if (brainJSON.goal) {\n                const goal = this.createTopGoal(brainJSON.goal, ent);\n                brainObj.setGoal(goal);\n            }\n        }\n        else if (type === 'Rogue') {\n            brainObj.getMemory().addEnemyType('player');\n        }\n    }\n    else {\n        RG.err('FromJSON', 'createBrain',\n            `Cannot find Brain.${type}, JSON: ${brainJSON}`);\n    }\n};\n\n\nFromJSON.prototype.createTopGoal = function(json, entity) {\n    const goal = new GoalsTop[json.type](entity);\n    goal.removeEvaluators();\n    json.evaluators.forEach(ev => {\n        let evaluator = null;\n        if (Evaluator[ev.type]) {\n            evaluator = new Evaluator[ev.type](ev.bias);\n        }\n        else if (EvaluatorsBattle[ev.type]) {\n            evaluator = new EvaluatorsBattle[ev.type](ev.bias);\n        }\n        else {\n            const msg = `Entity: ${JSON.stringify(entity)}`;\n            RG.err('FromJSON', 'createTopGoal',\n                `Evaluator ${ev.type} not found. ${msg}`);\n        }\n        if (ev.args) {evaluator.setArgs(ev.args);}\n        goal.addEvaluator(evaluator);\n    });\n    return goal;\n};\n\nFromJSON.prototype.createSpells = function(json, entity) {\n    entity._spellbook = new Spell.SpellBook(entity);\n    json.spellbook.spells.forEach(spell => {\n        if (Spell.hasOwnProperty(spell.new)) {\n            const spellObj = this.restoreSpell(spell, entity);\n            entity._spellbook.addSpell(spellObj);\n        }\n        else {\n            RG.err('FromJSON', 'createSpells',\n                `No spell ${spell.new} found in Spell`);\n        }\n    });\n    return entity._spellbook;\n};\n\n/* Restores a single spell for the entity. If called on multi-spell,\n * calls itself recursively to create sub-spells. */\nFromJSON.prototype.restoreSpell = function(spell, entity) {\n    const spellObj = new Spell[spell.new]();\n    spellObj.setPower(spell.power);\n    if (spell.range) {\n        spellObj.setRange(spell.range);\n    }\n    // If spell has damage/duration etc dice, restore them\n    if (spell.dice) {\n        const dice = {};\n        Object.keys(spell.dice).forEach(key => {\n            const die = spell.dice[key];\n            dice[key] = Dice.create(die);\n        });\n        spellObj._dice = dice;\n    }\n    if (spell.spells) {\n        spellObj.removeSpells(); // Remove default spells\n        spell.spells.forEach(subJSON => {\n            const subSpell = this.restoreSpell(subJSON, entity);\n            spellObj.addSpell(subSpell);\n        });\n    }\n    return spellObj;\n};\n\n\nFromJSON.prototype.createItem = function(obj) {\n    const item = obj;\n\n    // Try to create object using ObjectShell.Parser, if it fails, fallback\n    // to default constructor in RG.Item\n    let itemObj = null;\n    if (this._parser.hasItem(obj.setName)) {\n        itemObj = this._parser.createItem(obj.setName);\n    }\n    else {\n        const typeCapitalized = this.getItemObjectType(item);\n        if (Item[typeCapitalized]) {\n            itemObj = new Item[typeCapitalized]();\n        }\n        else {\n            let msg = `No RG.Item[${typeCapitalized}] found for new()`;\n            msg += ` JSON: ${JSON.stringify(obj)}`;\n            RG.err('FromJSON', 'createItem', msg);\n        }\n    }\n\n    for (const func in item) {\n        if (func === 'setSpirit') {\n            // Calls gem.setSpirit() with created spirit\n            const spiritJSON = item[func];\n            const spiritObj = this.createActor(spiritJSON);\n            this._addEntityFeatures(spiritJSON, spiritObj);\n            itemObj[func](spiritObj);\n        }\n        else if (typeof itemObj[func] === 'function') {\n            itemObj[func](item[func]); // Use setter\n        }\n        else if (func !== 'components') {\n            if (func !== 'isUsable') {\n                const json = JSON.stringify(itemObj);\n                RG.err('Game.FromJSON', 'createItem',\n                  `${func} not func in ${json}`);\n            }\n        }\n    }\n    this.addEntityInfo(itemObj, obj);\n    if (item.components) {\n        this.addCompsToEntity(itemObj, obj.components);\n    }\n    return itemObj;\n};\n\n\nFromJSON.prototype.createInventoryItems = function(obj, player) {\n    if (obj.hasOwnProperty('inventory')) {\n        const itemObjs = obj.inventory;\n        for (let i = 0; i < itemObjs.length; i++) {\n            const itemObj = this.createItem(itemObjs[i]);\n            player.getInvEq().addItem(itemObj);\n        }\n    }\n};\n\nFromJSON.prototype.createEquippedItems = function(obj, player) {\n    if (obj.hasOwnProperty('equipment')) {\n        const equipObjs = obj.equipment;\n        for (let i = 0; i < equipObjs.length; i++) {\n            const itemObj = this.createItem(equipObjs[i]);\n            player.getInvEq().restoreEquipped(itemObj);\n        }\n    }\n};\n\n\n// TODO move to appropriate place\nFromJSON.prototype.getItemObjectType = function(item) {\n    if (item.setType === 'spiritgem') {return 'SpiritGem';}\n    if (item.setType === 'goldcoin') {return 'GoldCoin';}\n    if (item.setType === 'missileweapon') {return 'MissileWeapon';}\n    if (!RG.isNullOrUndef([item])) {\n        if (!RG.isNullOrUndef([item.setType])) {\n            return item.setType.capitalize();\n        }\n        else {\n            const itemJSON = JSON.stringify(item);\n            RG.err('Game.Save', 'getItemObjectType',\n                'item.setType is undefined. item: ' + itemJSON);\n        }\n    }\n    else {\n        RG.err('Game.Save', 'getItemObjectType',\n            'item is undefined');\n    }\n    return null;\n};\n\n/* Creates a Map.Level object from a json object. NOTE: This method cannot\n* connect stairs to other levels, but only create the stairs elements. */\nFromJSON.prototype.restoreLevel = function(json) {\n    const level = new Level();\n    level.setID(json.id);\n    level.setLevelNumber(json.levelNumber);\n\n    const mapObj = this.createCellMap(json.map);\n    level.setMap(mapObj);\n\n    // Create actors\n    json.actors.forEach(actor => {\n        const actorObj = this.createActor(actor.obj);\n        if (actorObj !== null) {\n            if (!this.isVirtual(actor)) {\n                level.addActor(actorObj, actor.x, actor.y);\n            }\n            else {\n                level.addVirtualProp(RG.TYPE_ACTOR, actorObj);\n            }\n        }\n        else {\n            RG.err('FromJSON', 'restoreLevel',\n                `Actor ${JSON.stringify(actor)} returned null`);\n        }\n    });\n\n    // Create elements such as stairs\n    json.elements.forEach(elem => {\n        const elemObj = this.createElement(elem);\n        if (elemObj !== null) {\n            level.addElement(elemObj, elem.x, elem.y);\n        }\n        else {\n            RG.err('FromJSON', 'restoreLevel',\n                `createElement ${JSON.stringify(elem)} returned null`);\n        }\n    });\n\n    // Create items\n    json.items.forEach(item => {\n        const itemObj = this.createItem(item.obj);\n        if (itemObj !== null) {\n            level.addItem(itemObj, item.x, item.y);\n        }\n        else {\n            RG.err('FromJSON', 'restoreLevel',\n                `Actor ${JSON.stringify(item)} returned null`);\n        }\n    });\n\n    this.addLevels([level], 'restoreLevel', [json]);\n    return level;\n};\n\nFromJSON.prototype.isVirtual = function(actorJSON): boolean {\n    return (actorJSON.x === -1 && actorJSON.y === -1);\n};\n\n/* Creates elements such as stairs, doors and shop. */\nFromJSON.prototype.createElement = function(elem): ElementBase {\n    const elemJSON = elem.obj;\n    const type = elemJSON.type;\n    let createdElem = null;\n    if (type === 'connection') {\n        createdElem = this.createUnconnectedStairs(elem);\n    }\n    else if (type === 'shop') {\n        const shopElem = new Element.ElementShop();\n        let shopkeeper = null;\n        if (!RG.isNullOrUndef([elemJSON.shopkeeper])) {\n            shopkeeper = this.id2entity[elemJSON.shopkeeper];\n            if (shopkeeper) {\n                shopElem.setShopkeeper(shopkeeper);\n            }\n            else {\n                RG.err('Game.FromJSON', 'createElement',\n                    `Shopkeeper with ID ${elemJSON.shopkeeper} not found`);\n            }\n        }\n        shopElem.setCostFactor(elemJSON.costFactorBuy,\n            elemJSON.costFactorSell);\n        if (elemJSON.isAbandoned) {\n            shopElem.abandonShop();\n        }\n        createdElem = shopElem;\n    }\n    else if (type === 'door') {\n        createdElem = new Element.ElementDoor(elemJSON.closed);\n    }\n    else if (type === 'leverdoor') {\n        createdElem = new Element.ElementLeverDoor(elemJSON.closed);\n    }\n    else if (type === 'lever') {\n        createdElem = new Element.ElementLever();\n    }\n    else if (type === 'marker') {\n        createdElem = new Element.ElementMarker(elemJSON.char);\n        createdElem.setTag(elemJSON.tag);\n    }\n    else if (type === 'exploration') {\n        const expElem = new Element.ElementExploration();\n        expElem.setExp(elemJSON.setExp);\n        // expElem.setMsg(elemJSON.setMsg);\n        if (elemJSON.data) {expElem.setData(elemJSON.data);}\n        createdElem = expElem;\n    }\n    else if (type === 'web') {\n        createdElem = new Element.ElementWeb();\n    }\n    else if (type === 'slime') {\n        createdElem = new Element.ElementSlime();\n    }\n    else if (type === 'hole') {\n        createdElem = new Element.ElementHole();\n    }\n\n    // Finally, restore messages (if any)\n    if (elemJSON.msg) {\n        createdElem.setMsg(elemJSON.msg);\n    }\n\n    if (createdElem) {\n        const id = elemJSON.id;\n        if (Number.isInteger(id)) {\n            createdElem.setID(id);\n            this.addObjRef('element', createdElem, elemJSON);\n        }\n    }\n\n    return createdElem;\n};\n\n/* Creates the actor and sets entity ID refs, but does not restore all\n * entity data. */\nFromJSON.prototype.createActor = function(json) {\n    if (json.type === null) {\n        RG.err('FromJSON', 'createActor',\n            `json.type null, json: ${JSON.stringify(json)}`);\n    }\n\n    let entity = null;\n    if (json.new && Actor[json.new]) {\n        entity = new Actor[json.new](json.name);\n    }\n    else {\n        let msg = '';\n        const jsonStr = JSON.stringify(json);\n        if (!json.new) {\n            msg = 'No json.new given. JSON obj: ' + jsonStr;\n        }\n        else {\n            const keys = Object.keys(Actor);\n            msg = `${json.new} not in RG.Actor: ${keys}. JSON obj: ` + jsonStr;\n        }\n        RG.err('Game.FromJSON', 'createActor', msg);\n    }\n\n    entity.setType(json.type);\n    entity.setID(json.id);\n    this.addEntityInfo(entity, json);\n    return entity;\n};\n\n\n/* Adds entity info to restore the entity references back to objects. */\nFromJSON.prototype.addEntityInfo = function(entity, json) {\n    this.addObjRef('entity', entity, json);\n};\n\n/* Creates unconnected stairs. The object\n * returned by this method is not complete stairs, but has placeholders for\n * targetLevel (level ID) and targetStairs (x, y coordinates).\n */\nFromJSON.prototype.createUnconnectedStairs = function(elem) {\n    const {x, y} = elem;\n    const id = elem.obj.srcLevel;\n    const stairsId = `${id},${x},${y}`;\n    const elemObj = elem.obj;\n    const sObj = new Element.ElementStairs(elemObj.name);\n    this.stairsInfo[stairsId] = {targetLevel: elemObj.targetLevel,\n        targetStairs: elemObj.targetStairs};\n    return sObj;\n};\n\n\nFromJSON.prototype.createCellMap = function(map): CellMap {\n    if (map.encoded) {\n        return CellMap.fromJSON(map);\n    }\n    const mapObj = new CellMap(map.cols, map.rows);\n    map.cells.forEach((col, x) => {\n        col.forEach((cell, y) => {\n            const baseElem = this.createBaseElem(cell);\n            mapObj.setBaseElemXY(x, y, baseElem);\n        });\n    });\n    map.explored.forEach(explXY => {\n        mapObj.getCell(explXY[0], explXY[1]).setExplored();\n    });\n    /*\n    Object.keys(map.elements).forEach(key => {\n        const [x, y] = RG.key2Num(key);\n        mapObj.setElemXY(x, y, this.createBaseElem(map.elements[key]));\n    });\n    */\n    return mapObj;\n};\n\n\nFromJSON.prototype.createBaseElem = function(cell: string) {\n    const type = ELEM_MAP.elemIndexToType[cell];\n    if (ELEM_MAP.elemTypeToObj[type]) {\n        return ELEM_MAP.elemTypeToObj[type];\n    }\n    else {\n        RG.err('Game.fromJSON', 'createBaseElem',\n            `Unknown type ${type}`);\n    }\n    /*\n    switch (type) {\n        case '#': // wall\n        case 'wall': return ELEM.WALL;\n        case '.': // floor\n        case 'floor': return ELEM.FLOOR;\n        case 'tree': return ELEM.TREE;\n        case 'grass': return ELEM.GRASS;\n        case 'stone': return ELEM.STONE;\n        case 'water': return ELEM.WATER;\n        case 'chasm': return ELEM.CHASM;\n        case 'road': return ELEM.ROAD;\n        case 'highrock': return ELEM.HIGH_ROCK;\n        case 'bridge': return ELEM.BRIDGE;\n        default: {\n            if (ELEM_MAP.elemTypeToObj[type]) {\n                return ELEM_MAP.elemTypeToObj[type];\n            }\n            else {\n                RG.err('Game.fromJSON', 'createBaseElem',\n                    `Unknown type ${type}`);\n            }\n        }\n    }\n    */\n    return null;\n};\n\nFromJSON.prototype.setGlobalConfAndObjects = function(game, gameJSON) {\n    if (gameJSON.globalConf) {\n        this.dbg('Setting globalConf for game: '\n            + JSON.stringify(gameJSON.globalConf, null, 1));\n        game.setGlobalConf(gameJSON.globalConf);\n    }\n    if (gameJSON.cellStyles) {\n        RG.cellStyles = gameJSON.cellStyles;\n    }\n    if (gameJSON.charStyles) {\n        RG.charStyles = gameJSON.charStyles;\n    }\n    if (gameJSON.actorsKilled) {\n        this.actorsKilled = gameJSON.actorsKilled;\n        game.actorsKilled = gameJSON.actorsKilled;\n    }\n};\n\n\n/* Makes all connections in given levels after they've been created as\n * Map.Level objects. */\nFromJSON.prototype.connectGameLevels = function(levels) {\n    levels.forEach(level => {\n        const stairsList = level.getConnections();\n\n        stairsList.forEach(s => {\n            const connObj = this.stairsInfo[s.getID()];\n            const targetLevel = this.id2level[connObj.targetLevel];\n            if (!targetLevel && this.chunkMode) {\n                s.setConnObj(connObj);\n                return;\n            }\n\n            const targetStairsXY = connObj.targetStairs;\n            if (!targetStairsXY) {\n                RG.diag(JSON.stringify(level, null, 1));\n                RG.diag(connObj);\n                RG.diag('Parent: ' + level.getParent().getName());\n                RG.diag(JSON.stringify(s));\n            }\n\n            const x = targetStairsXY.x;\n            const y = targetStairsXY.y;\n            if (targetLevel) {\n                s.setTargetLevel(targetLevel);\n                const targetStairs = targetLevel\n                    .getMap().getCell(x, y).getConnection();\n                if (targetStairs) {\n                    s.connect(targetStairs);\n                }\n                else {\n                    RG.err('Game.FromJSON', 'connectGameLevels',\n                        'Target stairs was null. Cannot connect.');\n                }\n            }\n            else {\n                // this.reportMissingLevel(connObj);\n                const id = connObj.targetLevel;\n                RG.err('Game.FromJSON', 'connectGameLevels',\n                    `Target level ${id} null. Cannot connect.`);\n            }\n        });\n    });\n};\n\nFromJSON.prototype.restoreGameMaster = function(game, json) {\n    ++this.IND;\n    const gameMaster = game.getGameMaster();\n    const battles = {};\n    Object.keys(json.battles).forEach(id => {\n        json.battles[id].forEach(battleJSON => {\n            battles[id] = [];\n            if (this.id2level[id]) { // Tile level exists\n                this.dbg(`FromJSON Restoring Battle ${id}`);\n                const battle = this.restoreBattle(battleJSON);\n                battles[id].push(battle);\n                // battles[id] = battle;\n                /* if (!battle.isJSON) {\n                    game.addLevel(battle.getLevel());\n                }*/\n            }\n            else {\n                this.dbg(`FromJSON Battle ${id} not created`);\n                this.dbg(JSON.stringify(battleJSON));\n                // battles[id] = json.battles[id];\n                // gameMaster.addBattle(id, json.battles[id]);\n                battles[id].push(battleJSON);\n            }\n        });\n    });\n    gameMaster.setBattles(battles);\n    if (json.battlesDone) {\n        gameMaster.battlesDone = json.battlesDone;\n    }\n    --this.IND;\n    return gameMaster;\n};\n\nFromJSON.prototype.restoreBattle = function(json) {\n    const battleLevel = this.getLevelOrFatal(json.level, 'restoreBattle');\n    if (battleLevel) {\n        ++this.IND;\n        this.dbg(`\\trestoreBattle found level ID ${json.level}`);\n        const battle = new Battle(json.name);\n        battle.setLevel(battleLevel);\n        battle.setStats(json.stats);\n        battle.finished = json.finished;\n        const armies = [];\n        json.armies.forEach(armyJSON => {\n            armies.push(this.restoreArmy(armyJSON));\n        });\n        battle.setArmies(armies);\n\n        // Need to remove the event listeners if battle over\n        if (battle.finished) {\n            debug(`${json.name} finished. rm listeners`);\n            POOL.removeListener(battle);\n            armies.forEach(army => {\n                POOL.removeListener(army);\n            });\n        }\n        --this.IND;\n        return battle;\n    }\n    RG.err('Game.FromJSON', 'restoreBattle',\n        `No level for battle ID's ${json.level}`);\n    return null;\n};\n\nFromJSON.prototype.restoreArmy = function(json) {\n    const army = new Army(json.name);\n    json.actors.forEach(id => {\n        if (this.id2entity[id]) {\n            army.addActor(this.id2entity[id]);\n        }\n    });\n    army.setDefeatThreshold(json.defeatThreshold);\n\n    return army;\n};\n\n/* Assume the place is World object for now. */\nFromJSON.prototype.restorePlace = function(place) {\n    const worldJSON = new WorldFromJSON(this.id2level, this.id2entity);\n    const world = worldJSON.createPlace(place);\n    this.id2Place = Object.assign(this.id2Place, world.getID2Place());\n    return world;\n};\n\nFromJSON.prototype.restoreOverWorld = function(json) {\n    const ow = OWMap.fromJSON(json);\n    const coordMap = new OverWorld.CoordMap();\n    for (const p in json.coordMap) {\n        if (json.coordMap.hasOwnProperty(p)) {\n            coordMap[p] = json.coordMap[p];\n        }\n    }\n    ow.coordMap = coordMap;\n    return ow;\n};\n\nFromJSON.prototype.restoreWorldSim = function(json): WorldSimulation {\n    return WorldSimulation.fromJSON(json);\n};\n\nFromJSON.prototype.restoreEntityData = function() {\n    Object.keys(this.id2EntityJson).forEach(id => {\n        const json = this.id2EntityJson[id];\n        const entity = this.id2entity[id];\n        if (json && entity) {\n            this.restoreEntity(json, entity);\n        }\n        else {\n            let msg = json ? '' : '|JSON is null/undef|';\n            msg += entity ? '' : '|entity is null/undef|';\n            RG.err('FromJSON', 'restoreEntityData',\n                `ID: ${id} ${msg}`);\n        }\n    });\n};\n\nFromJSON.prototype.restoreComponentData = function() {\n    Object.keys(this.compsWithMissingRefs).forEach(id => {\n        const comp = this.compsWithMissingRefs[id];\n        const json = this.id2CompJSON[id];\n        this.restoreComponent(json, comp);\n    });\n};\n\n\nFromJSON.prototype.restoreComponent = function(json, comp) {\n    Object.keys(json).forEach(setFunc => {\n        const valueToSet = json[setFunc];\n        if (Array.isArray(valueToSet)) {\n            if ((valueToSet as any).$objRefArray) {\n                const arr = [];\n                valueToSet.forEach(objRef => {\n                    if (objRef.$objRef) {\n                        arr.push(this.getObjByRef(objRef.$objRef));\n                    }\n                    else {\n                        const msg = JSON.stringify(valueToSet);\n                        RG.err('FromJSON', 'restoreComponent',\n                            `$objRefArray found but no $objRefs inside: ${msg}`\n                        );\n                    }\n                });\n                comp[setFunc](arr);\n            }\n        }\n        else if (valueToSet.$objRef) {\n            if (valueToSet.$objRef.type === 'component') {\n                comp[setFunc](this.getObjByRef(valueToSet.$objRef));\n            }\n        }\n    });\n};\n\nFromJSON.prototype.reportMissingLevel = function(connObj) {\n    let msg = `connObj: ${JSON.stringify(connObj)}`;\n    Object.keys(this.id2level).forEach(id => {\n        msg += `\\n\\t${id}`;\n    });\n    console.warn(msg + '\\n');\n};\n\n/* Re-schedules the HP/PP regeneration for an actor */\nFromJSON.prototype._addRegenEvents = function(game, actor) {\n    // Add HP regeneration\n    const regenPlayer = new Time.RegenEvent(actor,\n        20 * RG.ACTION_DUR);\n    game.addEvent(regenPlayer);\n\n    // Add PP regeneration (if needed)\n    if (actor.has('SpellPower')) {\n        const regenPlayerPP = new Time.RegenPPEvent(actor,\n            30 * RG.ACTION_DUR);\n        game.addEvent(regenPlayerPP);\n    }\n\n};\n\nFromJSON.prototype.dbg = function(msg) {\n    if (debug.enabled) {\n      const indStr = '>'.repeat(this.IND);\n      debug(`${indStr} ${msg}`);\n    }\n};\n\nFromJSON.prototype.getLevelsToRestore = function(gameJSON) {\n    let levels = [];\n    let numLevels = 0;\n    if (gameJSON.levels) {return gameJSON.levels;}\n    if (!gameJSON.places) {\n        return levels;\n    }\n\n    Object.keys(gameJSON.places).forEach(name => {\n        const place = gameJSON.places[name];\n        if (place.area) {\n            place.area.forEach(area => {\n                area.tiles.forEach((tileCol, x) => {\n                    tileCol.forEach((tile, y) => {\n                        if (area.tilesLoaded[x][y]) {\n                            numLevels += tile.levels.length;\n                            levels = levels.concat(tile.levels);\n                        }\n                    });\n                });\n            });\n        }\n    });\n    this.dbg(`Restoring ${levels.length} out of ${numLevels}`);\n    return levels;\n};\n\n\n/* Given a list of JSON World.AreaTiles, creates the objects and level\n * connections, and attaches them to area in current game. */\nFromJSON.prototype.createTiles = function(game, jsonTiles: IAreaTileJSON[]) {\n    const allLevels = game.getLevels();\n    this.addLevels(allLevels, 'createTiles');\n\n    // Levels must be created before the actual world, because the World\n    // object contains only level IDs\n    let levelsJson = [];\n    jsonTiles.forEach(json => {\n        levelsJson = levelsJson.concat(json.levels);\n    });\n    const restoredLevels = [];\n\n    levelsJson.forEach(json => {\n        const level = this.restoreLevel(json);\n        restoredLevels.push(level);\n        allLevels.push(level);\n    });\n\n    // Connect levels using this.id2level + this.stairsInfo\n    this.connectGameLevels(restoredLevels);\n\n    // Entity data cannot be restored earlier because not all object refs\n    // exist when entities are created\n    this.restoreEntityData();\n    this.restoreComponentData();\n\n    const area = game.getCurrentWorld().getCurrentArea();\n    const fact = new FactoryWorld();\n    fact.setId2Level(this.id2level);\n    fact.id2entity = this.id2entity;\n\n    jsonTiles.forEach(json => {\n        const [tx, ty] = [json.x, json.y];\n        const tile = new World.AreaTile(tx, ty, area);\n\n        const tileLevel = this.id2level[json.level];\n        tile.setLevel(tileLevel);\n        game.addLevel(tileLevel);\n\n        const jsonCopy = JSON.parse(JSON.stringify(json));\n        area.setTile(tx, ty, tile);\n        tileLevel.setParent(area);\n        fact.createZonesFromTile(area, jsonCopy, tx, ty);\n        this.restoreSerializedBattles(game, tile);\n    });\n\n};\n\nFromJSON.prototype.restoreSerializedBattles = function(game, tile) {\n    const tileId = tile.getLevel().getID();\n    const master = game.getGameMaster();\n    if (master.battles[tileId]) {\n        const battles = master.battles[tileId];\n        master.battles[tileId] = [];\n        battles.forEach(battleJSON => {\n            const battle = this.restoreBattle(battleJSON);\n            master.battles[tileId].push(battle);\n            // master.battles[tileId] = battle;\n        });\n    }\n};\n\n/* Adds the array of levels into the internal storage. */\nFromJSON.prototype.addLevels = function(levels, msg = '', jsonArr = []) {\n    levels.forEach((level: Level, i) => {\n        const id = level.getID();\n        if (!this.id2level.hasOwnProperty(id)) {\n            let levelJSON = null;\n            if (i < jsonArr.length) {\n                levelJSON = jsonArr[i];\n            }\n            this.addObjRef('level', level, levelJSON);\n            this.dbg(`Added level ${id} to this.id2level ${msg}`);\n        }\n        else {\n            RG.log(level); // For error reporting\n            RG.err('Game.FromJSON', `addLevels - ${msg}`,\n            `Duplicate level ID detected ${id}`);\n        }\n    });\n};\n\nFromJSON.prototype.connectTileLevels = function(levels: Level[], conns: Stairs[] ) {\n    conns.forEach(conn => {\n        const stairsId = conn.getID();\n        const targetLevel = conn.getTargetLevel();\n        this.stairsInfo[stairsId] = {\n            targetLevel,\n            targetStairs: conn.getTargetStairs()\n        };\n    });\n    this.addLevels(levels, 'connectTileLevels');\n    this.connectConnections(conns);\n};\n\nFromJSON.prototype.connectConnections = function(conns) {\n    conns.forEach(s => {\n        const connObj = this.stairsInfo[s.getID()];\n        const targetLevel = this.id2level[connObj.targetLevel];\n\n        const targetStairsXY = connObj.targetStairs;\n        const {x, y} = targetStairsXY;\n        if (targetLevel) {\n            s.setTargetLevel(targetLevel);\n            const targetStairs = targetLevel\n                .getMap().getCell(x, y).getConnection();\n            if (targetStairs) {\n                s.connect(targetStairs);\n            }\n            else {\n                RG.err('Game.FromJSON', 'connectConnections',\n                    'Target stairs was null. Cannot connect.');\n            }\n        }\n        else {\n            const id = connObj.targetLevel;\n            RG.err('Game.FromJSON', 'connectConnections',\n                `Target level ${id} null. Cannot connect.`);\n        }\n    });\n};\n\nFromJSON.prototype.restoreChunkManager = function(game, gameJSON) {\n    if (gameJSON.chunkManager) {\n        game.setEnableChunkUnload(true);\n    }\n};\n\n// 'Integrity' check that correct number of levels restored\n// TODO does not work/check anything with the new world architecture\nFromJSON.prototype.checkNumOfLevels = function(game, gameJSON): void {\n    const nLevels = game.getLevels().length;\n    if (gameJSON.levels) {\n        if (nLevels !== gameJSON.levels.length) {\n            const exp = gameJSON.levels.length;\n            RG.err('Game.FromJSON', 'checkNumOfLevels',\n                `Exp. ${exp} levels, after restore ${nLevels}`);\n        }\n    }\n};\n\n/* Returns the level with given ID. Or throws an error if the level is not\n * found. */\nFromJSON.prototype.getLevelOrFatal = function(id, funcName) {\n    if (!Number.isInteger(id)) {\n        const errMsg = `ID must be number. Got ${id}`;\n        RG.err('Game.FromJSON', funcName, errMsg);\n    }\n    if (this.id2level.hasOwnProperty(id)) {\n        return this.id2level[id];\n    }\n    let msg = `No level with ID ${id}.`;\n    msg += ` Available: ${Object.keys(this.id2level)}`;\n    RG.err('Game.FromJSON', funcName, msg);\n    return null;\n};\n","/* This file contains the setup to generate territory map for clans/races,\n * that is used in choosing actor types for settlements, and also for\n * world event simulations.\n */\n\nimport RG from '../src/rg';\nimport {Territory} from '../src/territory';\nimport {OW} from '../src/ow-constants';\nimport {Random} from '../src/random';\nimport {OverWorld} from '../src/overworld';\n\nconst RNG = Random.getRNG();\n\nexport const TerritoryMap = function() {\n\n};\n\n/**\n * @param {OW.Map} ow - map of the overworld\n * @param {string} playerRace - Race of the player character\n * @param {array[]} playerXY - Tile x,y coordinates for player\n * @return {Territory} - Generated territory map\n */\nTerritoryMap.create = function(ow, playerRace, playerXY) {\n    const [playerX, playerY] = playerXY;\n    const capXY = ow.getFeaturesByType(OW.WCAPITAL)[0];\n    const dwarves = ow.getFeaturesByType(OW.WTOWER)[0];\n    const btower = ow.getFeaturesByType(OW.BTOWER)[0];\n    const bcapital = ow.getFeaturesByType(OW.BCAPITAL)[0];\n\n    const owMap = ow.getOWMap();\n    const terrConf = {\n        startSize: 2, // Each starts with 3x3 region\n        maxNumPos: 2 // Each has at least 2 starting positions\n        // maxFillRatio: 0.7\n    };\n    const terrMap = new Territory(ow.getSizeX(), ow.getSizeY(), terrConf);\n\n    // Anything not here will be treated as FULL cell in owMap, and thus\n    // cannot be occupied by race/clan\n    terrMap.useMap(owMap, {\n        [OW.TERM]: true,\n        [OW.MOUNTAIN]: true,\n        [OW.BVILLAGE]: true,\n        [OW.WVILLAGE]: true,\n        [OW.WCAPITAL]: true,\n        [OW.BCAPITAL]: true,\n        [OW.WTOWER]: true,\n        [OW.BTOWER]: true\n    });\n\n    const bearfolk = {name: 'bearfolk', char: 'B'};\n    terrMap.addRival({name: 'avianfolk', char: 'A'});\n    terrMap.addRival({name: 'wildling', char: 'I'});\n    terrMap.addRival(bearfolk);\n    terrMap.addRival({name: 'wolfclan', char: 'w'});\n    terrMap.addRival({name: 'catfolk', char: 'f'});\n    terrMap.addRival({name: 'dogfolk', char: 'd'});\n    terrMap.addRival({name: 'human', char: '@'});\n\n    const undeads = {name: 'undead', char: 'z', numPos: 3,\n        startX: [ow.getCenterX()], startY: [ow.getSizeY() - 5]};\n    terrMap.addRival(undeads);\n\n    terrMap.addRival({name: 'goblin', char: 'g', numPos: 8});\n    terrMap.addRival({name: 'dwarf', char: 'h',\n        startX: dwarves[0], startY: dwarves[1]});\n    terrMap.addRival({name: 'hyrkhian', char: 'y',\n        startX: capXY[0], startY: capXY[1]});\n\n    const winterConf = {name: 'winterbeing', char: 'W',\n        startX: [btower[0], bcapital[0]],\n        startY: [btower[1], bcapital[1]]\n    };\n    terrMap.addRival(winterConf);\n\n    const coordMap = new OverWorld.CoordMap();\n    coordMap.xMap = 10;\n    coordMap.yMap = 10;\n    const bbox = coordMap.getOWTileBboxFromAreaTileXY(playerX, playerY);\n\n    const pData = terrMap.getRivalData(playerRace);\n    pData.numPos += 1;\n\n    const playerOwX = RNG.getUniformInt(bbox.ulx, bbox.lrx);\n    const playerOwY = RNG.getUniformInt(bbox.uly, bbox.lry);\n    pData.startX.push(playerOwX);\n    pData.startY.push(playerOwY);\n\n    terrMap.generate();\n    return terrMap;\n};\n","\n/* Code here is used to generate territories for different clans/races for the\n * overworld map.\n */\n\nimport RG from './rg';\nimport {Geometry} from './geometry';\nimport {Random} from './random';\nimport {TCoord} from './interfaces';\n\nconst RNG = Random.getRNG();\nconst EMPTY = '.';\nconst FULL = '#';\nconst FILL_ALL = -1;\n\ninterface TerrData {\n    char: string;\n    open: {[key: string]: TCoord};\n    closed: {[key: string]: TCoord};\n    occupied: {[key: string]: TCoord};\n    currPos: number;\n    maxNumPos: number;\n    startX: number[];\n    startY: number[];\n    startSize: number;\n    numOccupied?: number;\n    numPos?: number;\n    areas?: {[key: string]: TCoord[]};\n}\n\ninterface RivalData {\n    name: string;\n    char: string;\n    startX?: number | number[];\n    startY?: number | number[];\n    numPos?: number;\n    maxNumPos?: number;\n    startSize?: number;\n}\n\ninterface TerrDataMap {\n    [key: string]: TerrData;\n}\n\nexport class Territory {\n\n    /* To-deserialize the territory. */\n    public static fromJSON(json): Territory {\n        const terrMap = new Territory(0, 0, {});\n        Object.keys(json).forEach(key => {\n            terrMap[key] = json[key];\n        });\n        return terrMap;\n    }\n\n    public map: string[][];\n    public cols: number;\n    public rows: number;\n\n    // Internal state of the generator\n    public rivals: RivalData[];\n    public currRivals: RivalData[];\n    public empty: {[key: string]: TCoord};\n    public occupied: {[key: string]: TCoord};\n    public occupiedBy: {[key: string]: TCoord[]};\n    public numEmpty: number;\n    public numCells: number;\n\n    // Generated territory data\n    public terrData: TerrDataMap;\n\n    // Config variables (can be set via conf)\n    public rng: any;\n    public doPostProcess: boolean;\n    public maxNumPos: number;\n    public startSize: number;\n    public maxFillRatio: number;\n\n    // By default, use only 4 directions to advance rivals\n    public dirs: string[];\n\n    constructor(cols, rows, conf = {}) {\n        this.map = new Array(cols);\n        this.cols = cols;\n        this.rows = rows;\n\n        // Internal state of the generator\n        this.rivals = [];\n        this.currRivals = [];\n        this.empty = {};\n        this.occupied = {};\n        this.occupiedBy = {};\n        this.numEmpty = 0;\n        this.numCells = cols * rows;\n\n        // Generated territory data\n        this.terrData = {};\n\n        // Config variables (can be set via conf)\n        this.rng = RNG;\n        this.doPostProcess = true; // Determine cont. regions using floodfill etc\n        this.maxNumPos = 1; // How many start positions each rival has\n        this.startSize = 1; // How many squares each rival gets on 1st move\n        this.maxFillRatio = 1.0;\n\n        // By default, use only 4 directions\n        this.dirs = RG.DIR_NSEW.concat(RG.DIR_DIAG);\n\n        // Set options passed in as a conf object\n        const confVals = ['maxNumPos', 'startSize', 'dirs', 'doPostProcess',\n            'maxFillRatio', 'rng'];\n        confVals.forEach(key => {\n            if (conf.hasOwnProperty(key)) {\n                this[key] = conf[key];\n            }\n        });\n\n        // Initialize an empty territory map\n        for (let i = 0; i < cols; i++) {\n            this.map[i] = new Array(rows);\n            for (let j = 0; j < rows; j++) {\n                this._markEmpty(i, j);\n            }\n        }\n    }\n\n    public setRNG(rng) {\n        this.rng = rng;\n    }\n\n    public getMap(): string[][] {\n        return this.map;\n    }\n\n    public getData(): TerrDataMap {\n        return this.terrData;\n    }\n\n    public getRivalData(name: string): TerrData | null {\n        if (this.terrData[name]) {return this.terrData[name];}\n        return null;\n    }\n\n    public _markEmpty(x, y): void {\n        this.map[x][y] = EMPTY;\n        this.empty[x + ',' + y] = [x, y];\n        ++this.numEmpty;\n    }\n\n    public hasRival(xy: TCoord): boolean {\n        return !this.isEmpty(xy) &&\n            !this.isFull(xy);\n    }\n\n    /* Gets the rival name of x,y cell. */\n    public getRival(xy) {\n        const [x, y] = xy;\n        const char = this.map[x][y];\n        return this.getName(char);\n    }\n\n    /* Given a 2d map, and cell info such as {'.': true, '#': false},\n     * marks all cells in this.map as empty which have '.' in map,\n     * and all cells full, which have '#' in given map.\n     */\n    public useMap(map, cellInfo) {\n        this.numEmpty = 0;\n        for (let x = 0; x < map.length; x++) {\n            for (let y = 0; y < map[0].length; y++) {\n                if (cellInfo[map[x][y]]) {\n                    this._markEmpty(x, y);\n                }\n                else {\n                    this.map[x][y] = FULL;\n                    delete this.empty[x + ',' + y];\n                }\n            }\n        }\n    }\n\n    public addRival(data: RivalData) {\n        this._initRival(data);\n    }\n\n    public generate(maxTurns = FILL_ALL): void {\n        this.currRivals = this.rivals.slice();\n        this.rng.shuffle(this.currRivals);\n        let numTurnsTaken = 0;\n\n        while (this._hasTurnsLeftToProcess(numTurnsTaken, maxTurns)) {\n            const next = this.currRivals.shift();\n            // TODO Check if there is weight on the size\n\n            const {name} = next;\n            const contData: TerrData = this.terrData[name];\n            const {open, currPos, maxNumPos} = contData;\n\n            // If no cells occupied, pick one randomly\n            if (currPos < maxNumPos) {\n                const xy = this._getStartPosition(name);\n                this._addStartPosition(name, xy);\n                this.currRivals.push(next);\n            }\n            else if (Object.keys(open).length > 0) {\n                const xy = this.getRandOpenXY(name);\n                const emptyXY = this.getEmptyAdjacentXY(xy);\n                if (emptyXY) {\n                    this._addOccupied(name, emptyXY);\n                    this.currRivals.push(next);\n                }\n                else {\n                    this._closeCell(name, xy);\n                    if (Object.keys(open).length > 0) {\n                        this.currRivals.push(next);\n                    }\n                }\n            }\n            ++numTurnsTaken;\n        }\n        if (this.doPostProcess) {\n            this.postProcessData();\n        }\n    }\n\n    /* Updates the territory map by simulating one turn per rival. */\n    public update(): void {\n        this.currRivals = this.rivals.slice();\n        this.rng.shuffle(this.currRivals);\n        this.currRivals.forEach((rival: RivalData) => {\n            const {name} = rival;\n            const xy = this.getRandOpenXY(name);\n            const emptyXY = this.getEmptyAdjacentXY(xy);\n            if (emptyXY) {\n                this._addOccupied(name, emptyXY);\n            }\n            else {\n                this._closeCell(name, xy);\n            }\n        });\n        this.currRivals = [];\n    }\n\n    /* Given char representing a rival name on the map, returns name for that\n     * rival. */\n    public getName(char) {\n        const found = this.rivals.find(rival => rival.char === char);\n        if (found) {return found.name;}\n        return null;\n    }\n\n    public getFillRatio() {\n        return (this.numCells - this.numEmpty) / this.numCells;\n    }\n\n    public _hasTurnsLeftToProcess(numTurns, maxTurns) {\n        return (this.hasEmpty()\n            && (this.currRivals.length > 0)\n            && (numTurns !== maxTurns)\n            && (this.getFillRatio() < this.maxFillRatio)\n        );\n    }\n\n    /* Returns the starting position for given rival name. */\n    public _getStartPosition(name) {\n        const contData: TerrData = this.terrData[name];\n        const {currPos} = contData;\n        const xy = this.getRandEmptyXY();\n        if (contData.startX.length > currPos) {\n            xy[0] = contData.startX[currPos];\n        }\n        else {\n            contData.startX.push(xy[0]);\n        }\n\n        if (contData.startY.length > currPos) {\n            xy[1] = contData.startY[currPos];\n        }\n        else {\n            contData.startY.push(xy[1]);\n        }\n\n        const key = _key(xy);\n        if (!this.empty.hasOwnProperty(key)) {\n            if (this.map[xy[0]][xy[1]] !== FULL) {\n                RG.warn('Territory', '_getStartPosition',\n                    `${name} overriding another position @ ${xy}`);\n            }\n        }\n\n        // TODO this can override starting points of other currRivals\n\n        contData.currPos += 1;\n        return xy;\n    }\n\n    public _addOccupied(name, xy) {\n        const key = _key(xy);\n        this.occupied[key] = xy;\n        this.occupiedBy[name].push(xy);\n        this.terrData[name].open[key] = xy;\n        this.terrData[name].occupied[key] = xy;\n        this.map[xy[0]][xy[1]] = this.terrData[name].char;\n\n        // 1st cell can be forced to be non-empty, but if not,\n        // then clear the empty cell\n        if (this.empty[key]) {\n            --this.numEmpty;\n            delete this.empty[key];\n        }\n    }\n\n    public _addStartPosition(name, xy) {\n        const contData = this.getRivalData(name);\n        const dSize = contData.startSize - 1;\n        const startCoord = Geometry.getBoxAround(xy[0], xy[1], dSize, true);\n        startCoord.forEach(xyStart => {\n            if (this.isEmpty(xyStart)) {\n                this._addOccupied(name, xyStart);\n            }\n        });\n\n        if (startCoord.length === 0) {\n            RG.err('Territory', '_addStartPosition',\n                'No startCoord found!');\n        }\n    }\n\n    public getRandEmptyXY() {\n        return this.rng.arrayGetRand(Object.values(this.empty));\n    }\n\n    public isFull(xy: TCoord): boolean {\n        const [x, y] = xy;\n        return this.map[x][y] === FULL;\n    }\n\n    public isEmpty(xy: TCoord): boolean {\n        const key = _key(xy);\n        return this.empty.hasOwnProperty(key);\n    }\n\n    public getRandOpenXY(name: string): TCoord {\n        const {open} = this.terrData[name];\n        return this.rng.arrayGetRand(Object.values(open));\n    }\n\n    public getEmptyAdjacentXY(xy: TCoord): TCoord {\n        const dirs = this.dirs.slice();\n        this.rng.shuffle(dirs);\n        while (dirs.length > 0) {\n            const nextDir = dirs.shift();\n            const [nX, nY] = RG.newXYFromDir(nextDir, xy);\n            if (this.hasXY(nX, nY)) {\n                if (this.map[nX][nY] === EMPTY) {\n                    return [nX, nY];\n                }\n            }\n        }\n        return null;\n    }\n\n    public hasXY(nX: number, nY: number): boolean {\n        return nX >= 0 && nY >= 0 &&\n            nX < this.map.length && nY < this.map[0].length;\n    }\n\n    public _closeCell(name, xy): void {\n        const key = _key(xy);\n        this.terrData[name].closed[key] = xy;\n        delete this.terrData[name].open[key];\n    }\n\n    public hasEmpty(): boolean {\n        return this.numEmpty > 0;\n    }\n\n    public mapToString() {\n        const sizeY = this.map[0].length;\n        const sizeX = this.map.length;\n\n        const lines = [];\n        for (let y = 0; y < sizeY; y++) {\n            const line = [];\n            for (let x = 0; x < sizeX; x++) {\n                line.push(this.map[x][y]);\n            }\n            lines.push(line);\n        }\n        return lines.map(line => line.join(''));\n    }\n\n    /* Histogram of how many cells each contestant occupies. */\n    public getAreaProportions() {\n        const hist = {};\n        Object.keys(this.occupiedBy).forEach(name => {\n            hist[name] = this.occupiedBy[name].length;\n        });\n        return hist;\n    }\n\n    public _initRival(data: RivalData): void {\n        this.rivals.push(data);\n        const {name, char} = data;\n        this.terrData[name] = {\n            currPos: 0,\n            maxNumPos: this.maxNumPos,\n            char,\n            occupied: {},\n            closed: {}, // Cannot try anymore\n            open: {}, // Available for trying\n            startX: [],\n            startY: [],\n            startSize: this.startSize // How big is the starting region\n        };\n\n        if (Array.isArray(data.startX)) {\n            this.terrData[name].startX = data.startX;\n        }\n        else if (data.startX >= 0) {\n            this.terrData[name].startX = [data.startX];\n        }\n\n        if (Array.isArray(data.startY)) {\n            this.terrData[name].startY = data.startY;\n        }\n        else if (data.startY >= 0) {\n            this.terrData[name].startY = [data.startY];\n        }\n\n        if (data.numPos) {\n            this.terrData[name].maxNumPos = data.numPos;\n        }\n        else if (data.maxNumPos) {\n            this.terrData[name].maxNumPos = data.maxNumPos;\n        }\n\n        if (data.startSize) {\n            this.terrData[name].startSize = data.startSize;\n        }\n        this.occupiedBy[name] = [];\n    }\n\n    /* Does processing like floodfilling the regions to find continuous areas for\n     * different currRivals.\n     */\n    public postProcessData(): void {\n        const diag = this.dirs.length > 4 ? true : false;\n        const names = Object.keys(this.terrData);\n        names.forEach(name => {\n            const contData = this.terrData[name];\n            const {startX, startY, char} = contData;\n\n            contData.numOccupied = Object.keys(contData.occupied).length;\n\n            contData.areas = {};\n            startX.forEach((x, i) => {\n                const xy = [x, startY[i]];\n                const lut = {};\n                const coordXY = Geometry.floodfill2D(this.map, xy, char, lut, diag);\n                contData.areas[_key(xy)] = coordXY;\n            });\n\n        });\n    }\n\n    /* To serialize the territory. */\n    public toJSON() {\n        const json = {\n            terrData: this.terrData,\n            map: this.map,\n            cols: this.cols,\n            rows: this.rows,\n            currRivals: this.currRivals,\n            empty: this.empty,\n            occupied: this.occupied,\n            occupiedBy: this.occupiedBy,\n            numEmpty: this.numEmpty,\n            dirs: this.dirs\n        };\n        return json;\n    }\n}\n\nfunction _key(xy) {\n    return xy[0] + ',' + xy[1];\n}\n\n","/* This file contains logic needed to do the world simulation. The simulation\n * consists of several parts:\n *   1. Weather simulation\n *   2. War simulation between factions\n *   3.\n */\n\nimport {SeasonManager} from './season-manager';\nimport {DayManager} from './day-manager';\nimport * as Component from './component/component';\nimport {EventPool} from './eventpool';\n\ntype OWMap = import('./overworld.map').OWMap;\ntype Level = import('./level').Level;\n\nexport class WorldSimulation {\n\n    public static fromJSON: (json: any) => WorldSimulation;\n\n    public seasonMan: SeasonManager;\n    public dayMan: DayManager;\n    protected currLevel: Level;\n\tprotected pool: EventPool;\n\n    constructor(pool?: EventPool) {\n        this.dayMan = new DayManager(pool);\n        this.seasonMan = new SeasonManager(pool);\n    }\n\n    public setLevel(level: Level): void {\n        this.currLevel = level;\n    }\n\n    public setOwPos(xy): void {\n        this.seasonMan.setOwPos(xy);\n    }\n\n    /* Updates all sub-components. */\n    public update(): void {\n        this.dayMan.update();\n\n        if (this.dayMan.phaseChanged()) {\n            this.seasonMan.changeWeather();\n        }\n\n        if (this.dayMan.dayChanged()) {\n            this.seasonMan.update();\n\n            if (this.seasonMan.monthChanged()) {\n                // TODO update world situation, ie do some battles\n                // Progress the territory situations\n                if (this.seasonMan.seasonChanged()) {\n                    // Simulate one bigger event in the world\n                    if (this.seasonMan.yearChanged()) {\n                        // Simulate huge event happening, although it's somewhat\n                        // predictable that it happens at year change\n                    }\n                }\n            }\n\n        }\n\n        if (this.changed('weather')) {\n            const weather = this.seasonMan.getWeather();\n            // Level might not be set before update() is called\n            if (this.currLevel) {\n                this.currLevel.removeAll('Weather');\n                const weatherComp = new Component.Weather();\n                weatherComp.setWeatherType(weather);\n                this.currLevel.add(weatherComp);\n            }\n        }\n\n    }\n\n    public getSeason(): string {\n        return this.seasonMan.getSeason();\n    }\n\n    public getWeather(): string {\n        return this.seasonMan.getWeather();\n    }\n\n    public setUpdateRates(rate: number): void {\n        this.dayMan.setUpdateRate(rate);\n    }\n\n    public changed(prop: string): boolean {\n        switch (prop) {\n            case 'day': return this.dayMan.dayChanged();\n            case 'month': return this.seasonMan.monthChanged();\n            case 'season': return this.seasonMan.seasonChanged();\n            case 'year': return this.seasonMan.yearChanged();\n            case 'weather': return this.seasonMan.weatherChanged();\n            default: throw new Error('No change for ' + prop);\n        }\n        return false;\n    }\n\n    public setPool(pool: EventPool): void {\n        this.dayMan.setPool(pool);\n        this.seasonMan.setPool(pool);\n    }\n\n    public setOverWorld(ow: OWMap): void {\n        this.seasonMan.setBiomeMap(ow.getBiomeMap());\n    }\n\n    public toJSON(): any {\n        return {\n            dayManager: this.dayMan.toJSON(),\n            seasonManager: this.seasonMan.toJSON()\n        };\n    }\n\n}\n\nWorldSimulation.fromJSON = function(json: any): WorldSimulation {\n    const ws = new WorldSimulation();\n    ws.dayMan = DayManager.fromJSON(json.dayManager);\n    ws.seasonMan = SeasonManager.fromJSON(json.seasonManager);\n    return ws;\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {Geometry} from '../geometry';\nimport {EventPool} from '../eventpool';\nimport {Animation, Frame} from '../animation';\n\nconst POOL = EventPool.getPool();\n\n/* System which constructs the animations to play. */\nexport class SystemAnimation extends SystemBase {\n\n    public currAnim: Animation;\n    private _enabled: boolean;\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.ANIMATION, compTypes, pool);\n        this._enabled = true;\n        this.currAnim = null;\n    }\n\n    public enableAnimations() {this._enabled = true;}\n    public disableAnimations() {this._enabled = false;}\n\n    /* Construct a missile animation from Missile component. */\n    public missileAnimation(ent, args) {\n        const mComp = args.missile;\n        const xEnd = args.to[0];\n        const yEnd = args.to[1];\n        const xy = mComp.first();\n        let xCurr = xy[0];\n        let yCurr = xy[1];\n\n        // Grab correct ascii char/css style for the missile\n        const missEnt = args.item;\n        const char = RG.getChar(RG.TYPE_ITEM, missEnt.getName());\n        const cssClass = RG.getCssClass(RG.TYPE_ITEM, missEnt.getName());\n\n        const animation = this._createAnimation(args);\n        while (xCurr !== xEnd || yCurr !== yEnd) {\n            const frame = {};\n            const key = xCurr + ',' + yCurr;\n            frame[key] = {};\n            frame[key].char = char;\n            frame[key].className = cssClass;\n            animation.addFrame(frame);\n\n            if (mComp.next()) {\n                xCurr = mComp.getX();\n                yCurr = mComp.getY();\n            }\n            else {\n                break;\n            }\n        }\n        this._setCurrAnim(animation);\n    }\n\n    /* Constructs line animation (a bolt etc continuous thing). */\n    public lineAnimation(ent, args) {\n        let x = args.from[0];\n        let y = args.from[1];\n        const dX = args.dir[0];\n        const dY = args.dir[1];\n        let rangeLeft = args.range;\n\n        let lineChar = RG.dirToChar(args.dir);\n        if (args.lineChar) {\n            lineChar = {args};\n        }\n\n        const animation = this._createAnimation(args);\n        const frame = {};\n        if (args.ray) {\n            while (rangeLeft > 0) {\n                x += dX;\n                y += dY;\n                frame[x + ',' + y] = {\n                    char: lineChar || '*',\n                    className: args.className || 'cell-ray'\n                };\n\n                let frameCopy: Frame = {};\n                frameCopy = Object.assign(frameCopy, frame);\n                animation.addFrame(frameCopy);\n                --rangeLeft;\n            }\n        }\n        this._setCurrAnim(animation);\n    }\n\n    public cellAnimation(ent, args) {\n        const animation = this._createAnimation(args);\n        const frame = {};\n        animation.slowDown = 10;\n        args.coord.forEach(xy => {\n            frame[xy[0] + ',' + xy[1]] = {\n                char: args.cellChar || '*',\n                className: args.className || 'cell-animation'\n            };\n        });\n\n        animation.addFrame(frame);\n        this._setCurrAnim(animation);\n    }\n    public areaAnimation(ent, args) {\n        const animation = this._createAnimation(args);\n        const maxRange = args.range;\n        const [cX, cY] = [args.cX, args.cY];\n\n        for (let r = 1; r <= maxRange; r++) {\n            const frame = {};\n            const coord = Geometry.getBoxAround(cX, cY, r);\n            coord.forEach(xy => {\n                frame[xy[0] + ',' + xy[1]] = {\n                    char: args.cellChar || '*',\n                    className: args.className || 'cell-animation'\n                };\n            });\n            animation.addFrame(frame);\n        }\n        this._setCurrAnim(animation);\n    }\n\n    public _createAnimation(args): Animation {\n        const animation = new Animation();\n        animation.setLevel(args.level);\n        return animation;\n    }\n\n    public updateEntity(ent) {\n        if (this._enabled) {\n            const allAnimComps = ent.getList('Animation');\n            allAnimComps.forEach(animComp => {\n                const args = animComp.getArgs();\n                if (args.dir) {\n                    this.lineAnimation(ent, args);\n                }\n                else if (args.missile) {\n                    this.missileAnimation(ent, args);\n                }\n                else if (args.cell) {\n                    this.cellAnimation(ent, args);\n                }\n                else if (!RG.isNullOrUndef([args.range, args.cX, args.cY])) {\n                    this.areaAnimation(ent, args);\n                }\n            });\n        }\n        ent.removeAll('Animation');\n\n        // After processing all animation for all entitities, emit an event\n        // to notify the Game Engine about animation\n        if (!this.hasEntities()) {\n            POOL.emitEvent(RG.EVT_ANIMATION, {animation: this.currAnim});\n            this.currAnim = null;\n        }\n    }\n\n    private _setCurrAnim(animation) {\n        if (!this.currAnim) {this.currAnim = animation;}\n        else {this.currAnim.combine(animation);}\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\nimport { Geometry } from '../geometry';\n\nexport class SystemAreaEffects extends SystemBase {\n    public radRange: number;\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.AREA_EFFECTS, compTypes, pool);\n        this.radRange = 1;\n    }\n\n\n    public updateEntity(ent) {\n        const flameComps = ent.getList('Flame');\n        let isFire = false;\n        let isIce = false;\n        if (ent.has('Health')) {\n            flameComps.forEach(flameComp => {\n                const dmgType = flameComp.getDamageType();\n                const dmgComp = new Component.Damage(flameComp.getDamage(),\n                    dmgType);\n\n                const flameSrc = flameComp.getSource();\n                dmgComp.setSource(flameSrc);\n                if (flameSrc.has('Created')) {\n                    const srcActor = flameSrc.get('Created').getCreator();\n                    dmgComp.setSourceActor(srcActor);\n                }\n                ent.add(dmgComp);\n                ent.remove(flameComp);\n                if (dmgType === RG.DMG.FIRE) {isFire = true;}\n                else if (dmgType === RG.DMG.ICE) {isIce = true;}\n            });\n        }\n        else {\n            // TODO add damages to doors etc\n            ent.removeAll('Flame');\n        }\n        if (isFire) {\n            this._createRadiationComps(ent, 'Heat', 'Fire');\n        }\n        else if (isIce) {\n            this._createRadiationComps(ent, 'Coldness', 'Ice flame');\n        }\n    }\n\n    private _createRadiationComps(ent, compName, srcName) {\n        const map = ent.getLevel().getMap();\n        const cell = ent.getCell();\n        const [x, y] = cell.getXY();\n        const radiationBox = Geometry.getBoxAround(x, y, this.radRange);\n        radiationBox.forEach(xy => {\n            if (map.hasXY(xy[0], xy[1])) {\n                const cell = map.getCell(xy[0], xy[1]);\n                if (cell.hasActors()) {\n                    const actors = cell.getActors();\n                    actors.forEach(actor => {\n                        // Name check prevents slow down when lots of fire\n                        // actors are present\n                        if (actor.getName() !== srcName) {\n                            actor.add(new Component[compName]());\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {Random} from '../random';\nimport * as Component from '../component';\nimport {Brain} from '../brain';\n\n/* Processes entities with attack-related components.*/\nexport class SystemAttack extends SystemBase {\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.ATTACK, compTypes, pool);\n    }\n\n    public updateEntity(ent) {\n        const compList = ent.getList('Attack');\n        compList.forEach(attComp => {\n            this.processAttackComp(ent, attComp);\n            ent.remove(attComp);\n        });\n    }\n\n    public processAttackComp(ent, attComp) {\n        const att = ent;\n        const def = attComp.getTarget();\n        const aName = att.getName();\n        const dName = def.getName();\n\n        if (def.has('Ethereal')) {\n            RG.gameMsg({cell: att.getCell(),\n                msg: 'Attack of ' + aName + ' passes through ' + dName});\n        }\n        else {\n            // Actual hit chance calculation\n            if (def.has('FirstStrike')) {\n                const msg = `${dName} seems to strike first.`;\n                RG.gameMsg({cell: def.getCell(), msg});\n                this.performAttack(def, att, dName, aName);\n            }\n            this.performAttack(att, def, aName, dName);\n            if (def.has('CounterAttack')) {\n                const msg = `${dName} seems to counter attack.`;\n                RG.gameMsg({cell: def.getCell(), msg});\n                this.performAttack(def, att, dName, aName);\n            }\n\n            if (att.has('BiDirStrike')) {\n                const biDirTarget = this.getBiDirTarget(att, def);\n                if (biDirTarget) {\n                    const msg = `${aName} tries to hit double strike.`;\n                    RG.gameMsg({msg, cell: att.getCell()});\n                    const defName = biDirTarget.getName();\n                    this.performAttack(att, biDirTarget, aName, defName);\n\n                    if (biDirTarget.has('CounterAttack')) {\n                        const cMsg = `${defName} seems to counter attack.`;\n                        RG.gameMsg({cell: biDirTarget.getCell(), msg: cMsg});\n                        this.performAttack(biDirTarget, att, defName, aName);\n                    }\n                }\n            }\n\n            att.getBrain().getMemory().setLastAttacked(def);\n        }\n    }\n\n    public addAttackerBonus(att): number {\n        const cells = Brain.getEnemyCellsAround(att);\n        return cells.length;\n    }\n\n    public addDefenderBonus(def): number {\n        const cells = Brain.getEnemyCellsAround(def);\n        return cells.length;\n    }\n\n    public performAttack(att, def, aName, dName): void {\n        if (def.has('Charm')) {\n            if (this.attIsCharmed(att, def)) {\n                let msg = `${att.getName()} is charmed by ${def.getName()} `;\n                msg += ', and does not attack';\n                RG.gameMsg({cell: att.getCell(), msg});\n                return;\n            }\n        }\n\n        let totalAtt = RG.getMeleeAttack(att);\n        if (att.has('Attacker')) {\n            totalAtt += this.addAttackerBonus(att);\n        }\n\n        const totalDef = this.getEntityDefense(def);\n        const hitChance = totalAtt / (totalAtt + totalDef);\n        const hitThreshold = this.rng.getUniform();\n        this.dbg(`hitChance is ${hitChance}, threshold ${hitThreshold}`);\n\n        if (hitChance >= hitThreshold) {\n            const totalDamage = att.getDamage();\n            if (totalDamage > 0) {\n                this.doDamage(att, def, totalDamage);\n                if (def.has('Experience')) {\n                    SystemBase.addSkillsExp(att, 'Melee', 1);\n                }\n            }\n            else {\n                RG.gameMsg({cell: att.getCell,\n                    msg: aName + ' fails to hurt ' + dName});\n            }\n            this._applyAddOnHitComp(att, def);\n        }\n        else {\n            this.checkForShieldSkill(hitThreshold, totalAtt, totalDef, def);\n            RG.gameMsg({cell: att.getCell(),\n                msg: aName + ' misses ' + dName});\n        }\n\n        def.addEnemy(att);\n\n        // Emitted only for player for efficiency reasons\n        if (att.isPlayer() || def.isPlayer()) {\n            const evtComp = new Component.Event();\n            evtComp.setArgs({type: RG.EVT_ACTOR_ATTACKED,\n                cause: att});\n            def.add(evtComp);\n        }\n    }\n\n    /* Returns the defense value for given entity. */\n    public getEntityDefense(def) {\n        if (def.has('Paralysis')) {\n            return 0;\n        }\n\n        let totalDef = 0;\n        if (def.getDefense) {\n            totalDef = def.getDefense();\n            if (def.has('Defender')) {\n                totalDef += this.addDefenderBonus(def);\n            }\n        }\n        return totalDef;\n    }\n\n    public doDamage(att, def, dmg) {\n        const dmgComp = new Component.Damage(dmg, RG.DMG.MELEE);\n        dmgComp.setSource(att);\n        def.add(dmgComp);\n        RG.gameWarn({cell: att.getCell(),\n            msg: att.getName() + ' hits ' + def.getName()});\n    }\n\n    /* Gets an enemy target for bi-directional strike, if any. */\n    public getBiDirTarget(att, def) {\n        // 1st, find opposite x,y for the 1st attack\n        const [attX, attY] = [att.getX(), att.getY()];\n        const [defX, defY] = [def.getX(), def.getY()];\n        const dX = -1 * (defX - attX);\n        const dY = -1 * (defY - attY);\n        const biDirX = attX + dX;\n        const biDirY = attY + dY;\n\n        // Once x,y found, check if there's an enemy\n        const map = att.getLevel().getMap();\n        if (map.hasXY(biDirX, biDirY)) {\n            const cell = map.getCell(biDirX, biDirY);\n            if (cell.hasActors()) {\n                const targets = cell.getActors();\n                for (let i = 0; i < targets.length; i++) {\n                    if (att.isEnemy(targets[i])) {\n                        return targets[i];\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /* Checks if Shields skill should be increased. */\n    public checkForShieldSkill(thr, totalAtt, totalDef, def) {\n        if (def.has('Skills')) {\n            const shieldBonus = def.getShieldDefense();\n            const defNoShield = totalDef - shieldBonus;\n            const hitChange = totalAtt / (totalAtt + defNoShield);\n            if (hitChange > thr) { // Would've hit without shield\n                SystemBase.addSkillsExp(def, 'Shields', 1);\n            }\n        }\n    }\n\n    public attIsCharmed(att, def): boolean {\n        const charmList = def.getList('Charm');\n        let isSuccess = false;\n        charmList.forEach(charmComp => {\n            const charmTarget = charmComp.getTargetActor();\n            const charmLevel = charmComp.getLevel();\n            const attWillpower = att.getWillpower();\n            let charmSuccess = charmLevel / (charmLevel + attWillpower);\n            if (charmTarget !== RG.NO_TARGET && charmTarget === att.getID()) {\n                charmSuccess = 2 * (charmLevel / (charmLevel + attWillpower));\n                if (charmSuccess > 0.80) {\n                    charmSuccess = 0.80;\n                }\n            }\n            if (RG.isSuccess(charmSuccess)) {\n                isSuccess = true;\n            }\n        });\n        return isSuccess;\n    }\n\n    public _applyAddOnHitComp(att, def) {\n        const weapon = att.getWeapon();\n        if (weapon && weapon.has) { // Attack was done using weapon\n            if (weapon.has('AddOnHit')) {\n                const addOnHit = weapon.get('AddOnHit');\n                if (addOnHit.getOnAttackHit()) {\n                    const comp = addOnHit.getComp();\n                    SystemBase.addCompToEntAfterHit(comp, def, att);\n                }\n            }\n        }\n        else if (weapon && weapon.onAttackHit) {\n            const src = att;\n            weapon.onAttackHit(def, src);\n        }\n        else { // No weapon was used\n            const src = att;\n            if (src && src.has('AddOnHit')) {\n                const addOnHit = src.get('AddOnHit');\n                if (addOnHit.getOnAttackHit()) {\n                    const comp = addOnHit.getComp();\n                    SystemBase.addCompToEntAfterHit(comp, def, src);\n                }\n            }\n        }\n\n    }\n}\n","\nimport RG from '../rg';\nimport * as Menu from '../menu';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\n\nimport {SystemEffects} from './system.effects';\nimport {SystemQuest} from './system.quest';\nimport * as Component from '../component';\nimport {Brain} from '../brain';\n\nconst POOL = EventPool.getPool();\n\nconst handledComps = [\n    'Pickup', 'UseStairs', 'OpenDoor', 'UseItem', 'UseElement',\n    'Jump', 'Read', 'Rest', 'Give'\n];\n\ntype HandleFunc = (ent) => void;\n\n/* Processes entities with attack-related components.*/\nexport class SystemBaseAction extends SystemBase {\n\n    public _dtable: {[key: string]: HandleFunc};\n\n    constructor(compTypes, pool?: EventPool) {\n        super(RG.SYS.BASE_ACTION, compTypes, pool);\n        this.compTypesAny = true;\n\n        // Initialisation of dispatch table for handler functions\n        this._dtable = {\n            Give: this._handleGive.bind(this),\n            Jump: this._handleJump.bind(this),\n            OpenDoor: this._handleOpenDoor.bind(this),\n            Pickup: this._handlePickup.bind(this),\n            Read: this._handleRead.bind(this),\n            UseElement: this._handleUseElement.bind(this),\n            UseItem: this._handleUseItem.bind(this),\n            UseStairs: this._handleUseStairs.bind(this),\n            Rest: this._handleRest.bind(this),\n        };\n    }\n\n    public updateEntity(ent): void {\n        handledComps.forEach(compType => {\n            if (ent.has(compType)) {\n                this._dtable[compType](ent);\n                ent.remove(compType);\n            }\n        });\n    }\n\n    /* Handles give command. */\n    private _handleGive(ent): void {\n        const giveComp = ent.get('Give');\n        const giveTarget = giveComp.getGiveTarget();\n        const giveItem = giveComp.getItem();\n\n        if (!giveTarget.isEnemy(ent)) {\n            if (ent.getInvEq().removeItem(giveItem)) {\n                const removedItem = ent.getInvEq().getRemovedItem();\n                giveTarget.getInvEq().addItem(removedItem);\n                const isQuestItem = removedItem.has('QuestTarget');\n\n                if (isQuestItem && giveTarget.has('QuestTarget')) {\n                    const giveArgs = {actor: giveTarget, item: removedItem};\n                    const qTarget = removedItem.get('QuestTarget');\n                    SystemQuest.addQuestEvent(ent, qTarget, 'give', giveArgs);\n                }\n                let msg = `${ent.getName()} gives `;\n                msg += `${giveItem.getName()} to ${giveTarget.getName()}`;\n                RG.gameMsg({cell: ent.getCell(), msg});\n            }\n        }\n        else {\n            let msg = `${giveTarget.getName()} refuses to take `;\n            msg += `${giveItem.getName()} from ${ent.getName()}`;\n            RG.gameMsg({cell: ent.getCell(), msg});\n        }\n    }\n\n    /* Handles pickup command. */\n    private _handlePickup(ent): void {\n        const [x, y] = [ent.getX(), ent.getY()];\n        const level = ent.getLevel();\n        const cell = level.getMap().getCell(x, y);\n\n        if (cell.hasProp(RG.TYPE_ITEM)) {\n            const item = cell.getProp(RG.TYPE_ITEM)[0];\n            if (ent.getInvEq().canCarryItem(item)) {\n                ent.getInvEq().addItem(item);\n\n                try {\n                    level.removeItem(item, x, y);\n                }\n                catch (e) {\n                    let msg = `Unable to remove item ${JSON.stringify(item)}\\n`;\n                    msg += `Actor for pickup: ${ent.getName()}`;\n                    RG.err('System.BaseAction', 'handlePickup', msg);\n                }\n\n\n                let itemStr = item.getName();\n                if (item.getCount() > 1) {\n                    itemStr += ' x' + item.getCount();\n                }\n                const msgObj = {\n                    msg: ent.getName() + ' picked up ' + itemStr,\n                    cell\n                };\n                RG.gameMsg(msgObj);\n                // Auto-equip if similar missile/ammo equipped\n                this._checkForAutoEquip(ent, item);\n\n                if (item.has('QuestTarget')) {\n                    const qTarget = item.get('QuestTarget');\n                    SystemQuest.addQuestEvent(ent, qTarget, 'get');\n                }\n            }\n            else {\n                const msgObj = {\n                    msg: ent.getName() + ' cannot carry more weight',\n                    cell\n                };\n                RG.gameMsg(msgObj);\n            }\n        }\n        const evtArgs = {\n            type: RG.EVT_ITEM_PICKED_UP\n        };\n        this._createEventComp(ent, evtArgs);\n    }\n\n    private _checkForAutoEquip(ent, item): void {\n        const missile = ent.getInvEq().getMissile();\n        if (missile) {\n            if (missile.equals(item)) {\n                if (ent.getInvEq().equipNItems(item, item.getCount())) {\n                    const iName = item.getNameWithCount();\n                    RG.gameMsg({cell: ent.getCell(), msg:\n                        `${ent.getName()} equips ${iName}`});\n                }\n            }\n        }\n    }\n\n    /* Handles command when actor uses stairs. */\n    private _handleUseStairs(ent): void {\n        const level = ent.getLevel();\n        const cell = ent.getCell();\n        // Check if any actors should follow the player\n        const actorsAround = Brain.getActorsAround(ent);\n\n        if (level.useStairs(ent)) {\n            if (ent.isPlayer()) {ent.getBrain().addMark();}\n\n            const newLevel = ent.getLevel();\n            if (newLevel.has('QuestTarget')) {\n                const qEvent = new Component.QuestTargetEvent();\n                qEvent.setEventType('goto');\n                qEvent.setTargetComp(newLevel.get('QuestTarget'));\n                ent.add(qEvent);\n            }\n\n            POOL.emitEvent(RG.EVT_LEVEL_CHANGED,\n                {target: newLevel, src: level, actor: ent});\n            POOL.emitEvent(RG.EVT_LEVEL_ENTERED,\n                {actor: ent, target: newLevel});\n\n            // Moves the surrounding actors to new location as well\n            if (actorsAround.length > 0) {\n                const cells = Brain.getBoxOfFreeCellsAround(ent, 1);\n\n                while (actorsAround.length > 0 && cells.length > 0) {\n                    const nextActor = actorsAround.pop();\n                    const nextCell = cells.pop();\n                    if (level.removeActor(nextActor)) {\n                        const [x, y] = [nextCell.getX(), nextCell.getY()];\n                        newLevel.addActor(nextActor, x, y);\n                        const name = nextActor.getName();\n                        RG.gameMsg(`${name} follows ${ent.getName()}`);\n                    }\n                    else {\n                        // Failing not a fatal error, there might not be space\n                        const json = JSON.stringify(nextActor);\n                        RG.warn('System.BaseAction', '_handleUseStairs',\n                            'Could not remove the actor: ' + json);\n                    }\n                }\n            }\n            const evtArgs = {\n                type: RG.EVT_ACTOR_USED_STAIRS,\n                cell\n            };\n            this._createEventComp(ent, evtArgs);\n        }\n    }\n\n    /* Handles command to open door and execute possible triggers like traps. */\n    private _handleOpenDoor(ent): void {\n        const door = ent.get('OpenDoor').getDoor();\n        const [x, y] = door.getXY();\n        const level = ent.getLevel();\n        const cell = level.getCell(x, y);\n        let msg = '';\n        const entName = ent.getName();\n\n        if (door.has('Broken')) {\n            msg = 'Door is broken and does not move at all!';\n        }\n        else if (door.canToggle()) {\n            if (cell.hasItems()) {\n                msg = 'Door is blocked by an item';\n            }\n            else if (cell.hasActors()) {\n                msg = 'Door is blocked by someone';\n            }\n            else if (door.isOpen()) {\n                door.closeDoor();\n                msg = `${entName} closes a door.`;\n            }\n            else {\n                door.openDoor();\n                msg = `${entName} opens a door.`;\n            }\n        }\n        else {\n            msg = `${entName} cannot toggle the door.`;\n        }\n        if (msg !== '') {\n            RG.gameMsg({cell, msg});\n        }\n    }\n\n    private _handleUseItem(ent): void {\n        const useItemComp = ent.get('UseItem');\n        const item = useItemComp.getItem();\n\n        if (item.has('Broken')) {\n          const msg = `${item.getName()} cannot be used because it is broken`;\n          RG.gameMsg({cell: ent.getCell(), msg});\n          return;\n        }\n\n        if (item.has('OneShot')) {\n            if (item.getCount() === 1) {\n                const msg = {item};\n                POOL.emitEvent(RG.EVT_DESTROY_ITEM, msg);\n            }\n            else {\n                item.decrCount(1);\n            }\n        }\n        else if (item.getCharges && item.getCharges() > 0) {\n            item.setCharges(item.getCharges() - 1);\n        }\n        this._checkUseItemMsgEmit(ent, useItemComp);\n\n        const effArgs = useItemComp.getEffect();\n        if (effArgs) {\n            const effComp = new Component.Effects(effArgs);\n            ent.add(effComp);\n        }\n    }\n\n    private _handleUseElement(ent): void {\n        const useComp = ent.get('UseElement');\n        const elem = useComp.getElement();\n        if (!elem.has('Broken')) {\n            if (elem.onUse) {\n                // Just assume it's a function, what could go wrong?\n                elem.onUse(ent);\n            }\n        }\n        this._checkUseElementMsgEmit(ent, useComp);\n    }\n\n    private _handleJump(ent): void {\n        const jump = ent.get('Jump');\n        const [dx, dy] = [jump.getX(), jump.getY()];\n        let jumpRange = 2;\n        if (ent.has('Jumper')) {\n            jumpRange = ent.get('Jumper').getJumpRange();\n        }\n        const map = ent.getLevel().getMap();\n        const [x0, y0] = ent.getXY();\n        const x1 = x0 + dx * jumpRange;\n        const y1 = y0 + dy * jumpRange;\n        const jumpPathCb = (x, y) => {\n            const cell = map.getCell(x, y);\n            if (cell.hasActors()) {\n                const actors = cell.getActors();\n                for (let i = 0; i < actors.length; i++) {\n                    const actor = actors[i];\n                    if (!actor.has('Ethereal')) {\n                        return false;\n                    }\n                }\n            }\n            return RG.Element.canJumpOver(cell.getBaseElem().getType());\n        };\n        const path = RG.Path.getShortestActorPath(map, x0, y0, x1, y1,\n            jumpPathCb);\n        // TODO Verify that path is direct path\n        if (path.length === jumpRange) {\n            const movComp = new Component.Movement(x1, y1, ent.getLevel());\n            ent.add(movComp);\n        }\n    }\n\n    private _handleRead(ent) {\n        const read = ent.get('Read');\n        let readTarget = read.getReadTarget();\n        if (!readTarget) {\n            const cell = ent.getCell();\n            if (cell.hasItems()) {\n                const items = cell.getItems();\n                const book = items.find(item => item.getType() === 'book');\n                if (book) {\n                    readTarget = book;\n                }\n            }\n        }\n        if (readTarget) {\n            const text = readTarget.getText();\n            const bookMenu = new Menu.MenuInfoOnly();\n            bookMenu.addPre(text);\n            const bookName = readTarget.getName();\n            RG.gameInfo(`The book \"${bookName}\" reads:`);\n            if (ent.getBrain().setSelectionObject) {\n                ent.getBrain().setSelectionObject(bookMenu);\n            }\n        }\n        else {\n            const msg = `${ent.getName()} finds nothing interesting to read.`;\n            RG.gameMsg({cell: ent.getCell(), msg});\n        }\n\n        if (readTarget.has('QuestTarget')) {\n            const qEvent = new Component.QuestTargetEvent();\n            qEvent.setEventType('read');\n            qEvent.setTargetComp(readTarget.get('QuestTarget'));\n            ent.add(qEvent);\n        }\n    }\n\n    private _handleRest(ent): void {\n        const cell = ent.getCell();\n        const baseElem = cell.getBaseElem();\n        // TODO Check if entity is on bed element\n        // and that there are no hostile actors nearby\n        if (baseElem.getType() === 'bed') {\n            const enemies = Brain.getSeenHostiles(ent);\n            if (enemies.length === 0) {\n                const health = ent.get('Health');\n                health.addHP(1);\n                const msg = `${ent.getName()} rests for a while in bed`;\n                RG.gameMsg({cell, msg});\n            }\n            else {\n                const msg = `${ent.getName()} cannot rest with enemies around`;\n                RG.gameMsg({cell, msg});\n            }\n        }\n    }\n\n    /* Used to create events in response to specific actions. */\n    private _createEventComp(ent, args): void {\n        const evtComp = new Component.Event();\n        evtComp.setArgs(args);\n        ent.add(evtComp);\n    }\n\n    private _checkUseItemMsgEmit(ent, comp): void {\n        if (comp.getUseType() === RG.USE.DRINK) {\n            const item = comp.getItem();\n            const targetObj = comp.getTarget();\n            const targetType = comp.getTargetType();\n            const target = getUseTarget(targetObj, targetType);\n            const cell = target.getCell();\n            const msg = target.getName() + ' drinks '\n                + item.getName();\n            RG.gameMsg({cell, msg});\n        }\n    }\n\n    private _checkUseElementMsgEmit(ent, comp): void {\n        const elem = comp.getElement();\n        const elemName = elem.getName();\n        const cell = ent.getCell();\n\n        let msg = '';\n        if (elem.has('Broken')) {\n            msg = `${elemName} is broken, and cannot be used.`;\n        }\n        else if (comp.getUseType() === RG.USE.LEVER) {\n            const name = ent.getName();\n            msg = `${name} toggles the lever`;\n        }\n        if (msg) {\n            RG.gameMsg({cell, msg});\n        }\n    }\n}\n\nfunction getUseTarget(targetObj, targetType) {\n    if (targetObj.target) {\n        return SystemEffects.getTargetFromObj(targetObj, targetType);\n    }\n    else if (targetObj.getCell) {\n        return targetObj;\n    }\n    return null;\n}\n\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {SystemQuest} from './system.quest';\nimport * as Component from '../component';\n\n/* Battle system handles battle-related components such as badges from battle\n * survivors etc. */\nexport class SystemBattle extends SystemBase {\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.BATTLE, compTypes, pool);\n        this.compTypesAny = true; // Triggered on at least one component\n    }\n\n    public updateEntity(ent) {\n        if (ent.has('BattleOver')) {\n            const overComp = ent.get('BattleOver');\n            if (ent.has('BattleExp')) {\n                const data = ent.get('BattleExp').getData();\n                const bName = data.name;\n                const badge = this._getBadgeForBattle(bName, ent);\n                if (data.kill > 0) {\n                    SystemBase.addSkillsExp(ent, 'Battle', data.kill);\n                    if (badge) {\n                        badge.updateData({kill: data.kill});\n                    }\n                    else {\n                        const msg = `No badge found for battle`;\n                        RG.err('System.Battle', 'updateEntity', msg);\n                    }\n\n                }\n\n                // Add some reputation for winner\n                if (badge.isWon()) {\n                    let rep = null;\n                    if (!ent.has('Reputation')) {\n                        rep = new Component.Reputation();\n                        ent.add(rep);\n                    }\n                    else {\n                        rep = ent.get('Reputation');\n                    }\n                    rep.addToFame(1);\n                }\n\n                ent.remove('BattleExp');\n\n                // Check if this battle (level) belonged to a quest\n                const level = ent.getLevel();\n                if (ent.has('Quest') && level.has('QuestTarget')) {\n                    const qTarget = ent.get('QuestTarget');\n                    const args = {isWon: badge.isWon()};\n                    SystemQuest.addQuestEvent(ent, qTarget, 'battle', args);\n                }\n            }\n\n            ent.remove(overComp);\n        }\n        else if (ent.has('BattleOrder')) {\n            const orderComp = ent.get('BattleOrder');\n            this._emitMsg(ent, orderComp);\n            ent.remove(orderComp);\n        }\n    }\n\n    public _getBadgeForBattle(bName, ent) {\n        const badges = ent.getList('BattleBadge');\n        const badge = badges.find(b => b.getData().name === bName);\n        return badge;\n    }\n\n    public _emitMsg(ent, comp) {\n        const srcName = comp.getArgs().srcActor.getName();\n        const cell = ent.getCell();\n        const msg = `${srcName} shouts a command into your direction.`;\n        RG.gameMsg({msg, cell});\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {Chat, ChatBase} from '../chat';\nimport {SystemQuest} from './system.quest';\nimport {TCoord} from '../interfaces';\nimport {BaseActor} from '../actor';\n\nconst NO_ACTORS_FOUND = Object.freeze([]);\n\n/* This system handles all entity movement.*/\nexport class SystemChat extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.CHAT, compTypes, pool);\n    }\n\n    public updateEntity(ent): void {\n        const args = ent.get('Chat').getArgs();\n        const dir = args.dir;\n\n        const actors = this.getActorsInDirection(ent, dir);\n        let chatObj = null;\n        actors.forEach(actor => {\n            if (actor.has('Trainer')) {\n                chatObj = this.getChatObject(ent, actor, 'Trainer');\n            }\n            else if (actor.has('QuestGiver')) {\n                chatObj = this.getChatObject(ent, actor, 'QuestGiver');\n            }\n            else {\n                // TODO spirits react differently\n                chatObj = this.getGenericChatObject(ent, actor);\n                const msg = `You chat with ${actor.getName()} for a while.`;\n                RG.gameMsg({cell: ent.getCell(), msg});\n            }\n            if (actor.has('QuestTarget')) {\n                this.addQuestTargetItems(ent, actor, chatObj);\n            }\n            this.addQuestSpecificItems(ent, actor, chatObj);\n\n            if (ent.getLevel().has('Lore')) {\n                console.log('Level has some lore');\n                this.addLoreItems(ent, actor, chatObj);\n            }\n        });\n\n        if (chatObj) {\n            const entBrain = ent.getBrain();\n            const selObj = chatObj.getSelectionObject();\n            entBrain.setSelectionObject(selObj);\n        }\n\n        ent.remove('Chat');\n    }\n\n    /* Returns all actors in the given direction. */\n    public getActorsInDirection(ent, dir: TCoord): BaseActor[] {\n        const [dX, dY] = [dir[0], dir[1]];\n        const x = ent.getX() + dX;\n        const y = ent.getY() + dY;\n        const map = ent.getLevel().getMap();\n\n        if (map.hasXY(x, y)) {\n            const cell = map.getCell(x, y);\n            if (cell.hasActors()) {\n                return cell.getActors();\n            }\n            else {\n                const msg = 'There is no one to talk to.';\n                RG.gameMsg({cell, msg});\n            }\n        }\n        else {\n            const msg = 'There is no one to talk to.';\n            RG.gameMsg({cell: ent.getCell(), msg});\n        }\n        return NO_ACTORS_FOUND as BaseActor[];\n    }\n\n    public getChatObject(ent, srcActor, compType): ChatBase {\n        const chatObj = srcActor.get(compType).getChatObj();\n        chatObj.setTarget(ent);\n        const selObj = chatObj.getSelectionObject();\n        if (selObj) {\n            return chatObj;\n        }\n        else {\n            const srcName = srcActor.getName();\n            RG.err('SystemChat', 'setChatObject',\n                `Null/undef selectObj with type ${compType}, src: ${srcName}`);\n        }\n        return null;\n    }\n\n    public getGenericChatObject(ent, actor): ChatBase {\n        // if (ent.has('Quest')) {\n            const chatObj = new Chat.ChatBase();\n            const aName = actor.getName();\n            chatObj.pre = `${aName} greets you. What do you say?`;\n            return chatObj;\n        // }\n        // return null;\n    }\n\n\n    /* Adds additional chat items related to various quest objectives. */\n    public addQuestTargetItems(ent, actor, chatObj: ChatBase): void {\n        const qTarget = actor.get('QuestTarget');\n        const tType = qTarget.getTargetType();\n        if (tType === 'escort') {\n            const qEscort = actor.get('QuestEscortTarget');\n            const escortTo = qEscort.getEscortTo();\n            if (escortTo.getID() !== ent.getLevel().getID()) {\n                chatObj.add({\n                    name: qEscort.getQuestion(),\n                    option: () => {\n                        // TODO Add Escorted by event stuff to help player\n                        // getting the actor to cooperate\n                    }\n                });\n            }\n            else {\n                chatObj.add({\n                    name: 'I have escorted you safely to correct place now',\n                    option: () => {\n                        const args = {src: actor};\n                        SystemQuest.addQuestEvent(ent, qTarget, 'escort', args);\n                    }\n                });\n            }\n        }\n    }\n\n    public addQuestSpecificItems(ent, actor, chatObj: ChatBase): void {\n        if (ent.has('Quest')) {\n            const qTargets = ent.get('Quest').getQuestTargets();\n\n            // Adds generic options to ask about a quest\n            qTargets.forEach(target => {\n                this.addQuestTargetToChat(target, actor, chatObj);\n            });\n\n            // If target of chat has any info, add an option to ask about it\n            if (actor.has('QuestInfo')) {\n                const questInfo = actor.get('QuestInfo');\n                const qTarget = actor.get('QuestTarget');\n                chatObj.add({\n                    name: questInfo.getQuestion(),\n                    option: () => {\n                        // TODO possibly add some condition to get the info\n                        // ent.add(questInfo.clone());\n                        const args = {info: questInfo, src: actor};\n                        SystemQuest.addQuestEvent(ent, qTarget, 'listen', args);\n                    }\n                });\n            }\n\n            // Add additional options if the chat initiator has some quest info\n            if (ent.has('QuestInfo') && actor.has('QuestTarget')) {\n                const qTarget = actor.get('QuestTarget');\n                const qInfoList = ent.getList('QuestInfo');\n                const createQuestEvent = questInfo => {\n                    SystemQuest.addQuestEvent(ent, qTarget, 'report', {info: questInfo});\n                };\n\n                qInfoList.forEach(questInfo => {\n                    chatObj.add({\n                        name: 'Tell about ' + questInfo.getInfo(),\n                        option: createQuestEvent.bind(null, questInfo)\n                    });\n                });\n            }\n\n            // If target is expecting a report about the quest, create another info\n            if (actor.has('QuestReport')) {\n                chatObj.add({\n                    name: 'Tell about quest being completed',\n                    option: () => {\n                        SystemQuest.addQuestEvent(ent, actor.get('QuestTarget'), 'report');\n                    }\n                });\n            }\n\n        }\n    }\n\n\n    /* Checks if initiator of chat is on quest and needs to query for any\n     * information. */\n    public addQuestTargetToChat(target, actor, chatObj: ChatBase): void {\n        const aName = actor.getName();\n        const tName = target.name;\n        let resp = null;\n\n        const id = target.id;\n        const memory = actor.getBrain().getMemory();\n\n        if (memory.hasSeen(id)) {\n            resp = chatObj.getSelectionObject();\n            const {x, y} = memory.getLastSeen(id);\n            const dir = RG.getTextualDxDy(actor, [x, y]);\n            let msg = `${aName} says: I know where ${tName} is.`;\n            msg += ` I saw ${tName} ${dir} from here.`;\n            RG.gameInfo(msg);\n        }\n\n        if (tName !== '') {\n            if (!resp) {\n                resp = () => {\n                    const msg = `${aName} says: I know not where ${tName} is`;\n                    RG.gameInfo(msg);\n                };\n            }\n            chatObj.add({\n                name: `Do you know where is ${tName}`,\n                option: resp\n            });\n        }\n    }\n\n    /* Add lore-specific items to the chat object. */\n    public addLoreItems(ent, actor, chatObj: ChatBase): void {\n        const lore = actor.getLevel().get('Lore');\n        const topics = lore.getTopics();\n        Object.keys(topics).forEach(name => {\n            chatObj.add({\n                name: getTopicQuestion(name),\n                option: () => {\n                    const opt = this.rng.arrayGetRand(topics[name]);\n                    RG.gameInfo({cell: ent.getCell(), msg: opt});\n                }\n            });\n        });\n    }\n\n}\n\nfunction getTopicQuestion(topicName: string): string {\n    const questions = {\n        quests: 'Is anyone looking for help here?',\n        places: 'Do you know what places are nearby?',\n        shops:  'Is there a place for trading?',\n        people: 'What can you tell me about people here?',\n        world: 'Do you have any rumors from faraway lands?'\n    };\n    return questions[topicName];\n}\n","\nimport RG from '../rg';\nimport {Entity} from '../entity';\nimport {SystemBase} from './system.base';\nimport {Communication} from '../component';\nimport {EventPool} from '../eventpool';\n\n/* Processes entities with communication component.*/\nexport class SystemCommunication extends SystemBase {\n\n    private _msgFunc: {[key: string]: (ent, msg) => void};\n\n    constructor(compTypes, pool?: EventPool) {\n        super('Communication', compTypes, pool);\n\n        // Dispatch table for different messages\n        this._msgFunc = {\n            Enemies: this.processEnemies.bind(this),\n            Shout: this.processShout.bind(this)\n        };\n\n    }\n\n    // Each entity here has received communication and must capture its\n    // information contents\n    public updateEntity(ent: Entity): void {\n        const comComp = ent.get('Communication');\n        const messages = comComp.getMsg();\n        for (let i = 0; i < messages.length; i++) {\n            this.processMessage(ent, messages[i]);\n        }\n        ent.remove('Communication');\n    }\n\n    public processMessage(ent, msg): void {\n        if (this._msgFunc.hasOwnProperty(msg.type)) {\n            this._msgFunc[msg.type](ent, msg);\n        }\n        else {\n            RG.err('CommunicationSystem', 'processMessage',\n                'No function for msg type |' + msg.type + '| in dtable.');\n        }\n    }\n\n    public processEnemies(ent, msg): void {\n        const enemies = msg.enemies;\n        const srcName = msg.src.getName();\n        for (let i = 0; i < enemies.length; i++) {\n            ent.addEnemy(enemies[i]);\n        }\n        const msgObj = {cell: ent.getCell(),\n            msg: `${srcName} seems to communicate with ${ent.getName()}`\n        };\n        RG.gameInfo(msgObj);\n    }\n\n    public processShout(ent, msg): void {\n        const shoutMsg = msg.shout;\n        const srcName = msg.src.getName();\n        const msgObj = {cell: msg.src.getCell(),\n            msg: `${srcName} shouts ${shoutMsg}`};\n        RG.gameInfo(msgObj);\n    }\n\n}\n\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport * as Component from '../component';\nimport * as Item from '../item';\n\ntype Cell = import('../map.cell').Cell;\n\nconst POOL = EventPool.getPool();\nconst NO_DAMAGE_SRC = RG.NO_DAMAGE_SRC;\n\n/* Processes entities with damage component.*/\nexport class SystemDamage extends SystemBase {\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.DAMAGE, compTypes, pool);\n    }\n\n    public processDamageComp(ent, dmgComp) {\n        const health = ent.get('Health');\n        if (health) {\n            let totalDmg = this._getDamageModified(ent, dmgComp);\n\n            // Check if any damage was done at all\n            if (totalDmg <= 0) {\n                totalDmg = 0;\n                const msg = 'Attack doesn\\'t penetrate protection of '\n                    + ent.getName();\n                RG.gameMsg({msg, cell: ent.getCell()});\n            }\n            else {\n                this._applyAddOnHitComp(ent, dmgComp);\n                health.decrHP(totalDmg);\n                if (this.debugEnabled) {\n                    const hpMax = health.getMaxHP();\n                    const hp = health.getHP();\n                    const msg = `(${totalDmg}),(${hp}/${hpMax})`;\n                    RG.gameDanger({msg, cell: ent.getCell()});\n                }\n            }\n\n            const damageSrc = this._getUltimateDmgSource(dmgComp);\n            if (damageSrc && (ent.getID() !== damageSrc.getID())) {\n                if (RG.isActor(damageSrc)) {\n                    // At the moment, allow only actors as enemies\n                    ent.addEnemy(damageSrc);\n                }\n            }\n\n            if (health.isDead() && !ent.has('Dead')) {\n                if (ent.has('Loot')) {\n                    const entCell: Cell = ent.getCell();\n                    ent.get('Loot').dropLoot(entCell);\n                }\n                this._dropInvAndEq(ent);\n                this._killActor(damageSrc, ent, dmgComp);\n            }\n\n            // Emit ACTOR_DAMAGED\n            // Emitted only for player for efficiency reasons\n\n            if (damageSrc) {\n                if (damageSrc.isPlayer() || ent.isPlayer()) {\n                    if (!RG.isNullOrUndef([damageSrc, ent])) {\n                        const evtComp = new Component.Event();\n                        evtComp.setArgs({type: RG.EVT_ACTOR_DAMAGED,\n                            cause: damageSrc});\n                        ent.add(evtComp);\n                        if (ent.has('QuestTarget')) {\n                            this.checkForDamagedQuestEvent(ent, damageSrc);\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    public checkForDamagedQuestEvent(ent, player): void {\n        const qTarget = ent.get('QuestTarget');\n        if (qTarget.getTargetType() === 'damage') {\n            const qEvent = new Component.QuestTargetEvent();\n            qEvent.setEventType('damage');\n            qEvent.setArgs({target: ent});\n            qEvent.setTargetComp(ent.get('QuestTarget'));\n            player.add(qEvent);\n        }\n    }\n\n    public _getUltimateDmgSource(dmgComp) {\n        let damageSrc = dmgComp.getSourceActor();\n        if (!damageSrc) {\n            damageSrc = dmgComp.getSource();\n        }\n\n        if (damageSrc && damageSrc.has && damageSrc.has('Created')) {\n            damageSrc = damageSrc.get('Created').getCreator();\n        }\n        else {\n            if (damageSrc && !damageSrc.has) {\n                console.log('Warning. No damageSrc.has():', damageSrc);\n                RG.err('System.Damage', '_getUltimateDmgSource',\n                   'No damageSrc.has()');\n            }\n        }\n        return damageSrc;\n    }\n\n    /* Checks if protection checks can be applied to the damage caused. For\n     * damage like hunger and poison, no protection helps.*/\n    public _getDamageModified(ent, dmgComp): number {\n        const dmgType = dmgComp.getDamageType();\n        let src = dmgComp.getSourceActor();\n        if (!src) {\n            src = dmgComp.getSource();\n        }\n        const dmg = this._getDmgAfterWeaknessAndResistance(ent, dmgComp);\n\n        // Deal with \"internal\" damage bypassing protection here\n        const cell: Cell = ent.getCell();\n        if (dmgType === RG.DMG.POISON) {\n            const msg = 'Poison is gnawing inside ' + ent.getName();\n            RG.gameDanger({cell, msg});\n            return dmg;\n        }\n        else if (dmgType === RG.DMG.HUNGER) {\n            return dmg;\n        }\n        else if (dmgType === RG.DMG.FIRE) {\n            const msg = `Fire is burning ${ent.getName()}.`;\n            RG.gameDanger({cell, msg});\n            return dmg;\n        }\n        else if (dmgType === RG.DMG.ICE) {\n            const msg = `Ice is freezing ${ent.getName()}.`;\n            RG.gameDanger({cell, msg});\n            return dmg;\n        }\n        else if (dmgType === RG.DMG.COLD) {\n            const msg = `${ent.getName()} is extremely hypothermic`;\n            RG.gameInfo({cell, msg});\n            return dmg;\n        }\n        else if (this.isProtectionBypassed(ent, src)) {\n            const msg = `${src.getName()} hits ${ent.getName()} through armor.`;\n            RG.gameDanger({cell, msg});\n            return dmg;\n        }\n\n        const dmgCateg = dmgComp.getDamageCateg();\n        if (dmgCateg === RG.DMG.MAGIC) {\n            return dmg;\n        }\n\n        // Take defs protection value into account\n        const protEquip = ent.getEquipProtection();\n        const protStats = ent.get('Combat').getProtection();\n        const protTotal = protEquip + protStats;\n        const totalDmg = dmg - protTotal;\n        return totalDmg;\n    }\n\n    public _getDmgAfterWeaknessAndResistance(ent, dmgComp) {\n        const entName = ent.getName();\n        let dmg = dmgComp.getDamage();\n        if (ent.has('Weakness')) {\n            const weakList = ent.getList('Weakness');\n            weakList.forEach(weakComp => {\n                if (this.effectMatches(dmgComp, weakComp)) {\n                    const effLevel = weakComp.getLevel();\n                    switch (effLevel) {\n                        case RG.WEAKNESS.MINOR: {\n                            dmg = Math.round(1.25 * dmg); break;\n                        }\n                        case RG.WEAKNESS.MEDIUM: {\n                            dmg = Math.round(1.5 * dmg); break;\n                        }\n                        case RG.WEAKNESS.SEVERE: dmg *= 2; break;\n                        case RG.WEAKNESS.FATAL: {\n                            dmg = ent.get('Health').getMaxHP(); break;\n                        }\n                        default: break;\n                    }\n                }\n            });\n        }\n        if (ent.has('Resistance')) {\n            let msg = '';\n            const resistList = ent.getList('Resistance');\n            resistList.forEach(resistComp => {\n                if (this.effectMatches(dmgComp, resistComp)) {\n                    const effLevel = resistComp.getLevel();\n                    switch (effLevel) {\n                        case RG.RESISTANCE.MINOR: {\n                            dmg = Math.round(dmg / 1.25);\n                            msg += ' resists the attack slighty';\n                            break;\n                        }\n                        case RG.RESISTANCE.MEDIUM: {\n                            dmg = Math.round(dmg / 1.5);\n                            msg += ' resists the attack';\n                            break;\n                        }\n                        case RG.RESISTANCE.STRONG: {\n                            dmg = Math.round(dmg / 2);\n                            msg += ' resists the attack strongly';\n                            break;\n                        }\n                        case RG.RESISTANCE.IMMUNITY: {\n                            dmg = 0;\n                            msg += ' is immune against the attack';\n                            break;\n                        }\n                        case RG.RESISTANCE.ABSORB: {\n                            const health = ent.get('Health');\n                            health.addHP(dmg);\n                            msg += ' absorbs the power of the attack';\n                            break;\n                        }\n                        default: break;\n                    }\n\n                }\n            });\n            if (msg !== '') {\n                msg = entName + ' ' + msg;\n                RG.gameMsg({msg, cell: ent.getCell()});\n            }\n        }\n        return dmg;\n    }\n\n    public effectMatches(dmgComp, effComp): boolean {\n        const effect = effComp.getEffect();\n        const dmgType = dmgComp.getDamageType();\n        const dmgCateg = dmgComp.getDamageCateg();\n        return effect === dmgType || effect === dmgCateg;\n    }\n\n    /* Returns true if the hit bypasses defender's protection completely. */\n    public isProtectionBypassed(ent, src): boolean {\n        const bypassChance = this.rng.getUniform();\n        if (src && !src.has) {\n            console.log('src is not entity:', src);\n            console.log('With entity:', ent);\n            RG.err('System.Damage', 'isProtectionBypassed', 'No src.has()');\n        }\n\n        if (src && src.has('BypassProtection')) {\n            return bypassChance <= src.get('BypassProtection').getChance();\n        }\n        return bypassChance <= RG.PROT_BYPASS_CHANCE;\n    }\n\n    /* Applies add-on hit effects such as poison, frost or others. */\n    public _applyAddOnHitComp(ent, dmgComp) {\n        const weapon = dmgComp.getWeapon();\n        if (weapon && weapon.has) { // Attack was done using weapon\n            if (weapon.has('AddOnHit')) {\n                const comp = weapon.get('AddOnHit').getComp();\n                SystemBase.addCompToEntAfterHit(comp, ent, dmgComp.getSource());\n            }\n        }\n        else if (weapon && weapon.onHit) {\n            const src = dmgComp.getSource();\n            if (weapon.onHit) {\n                weapon.onHit(ent, src);\n            }\n        }\n        else { // No weapon was used\n            const src = dmgComp.getSource();\n            if (src && src.has('AddOnHit')) {\n                const comp = src.get('AddOnHit').getComp();\n                SystemBase.addCompToEntAfterHit(comp, ent, src);\n            }\n        }\n    }\n\n    public _dropInvAndEq(actor) {\n        const [x, y] = actor.getXY();\n        if (!actor.getInvEq) {\n            return;\n        }\n        const invEq = actor.getInvEq();\n        const items = invEq.getInventory().getItems();\n        const actorLevel = actor.getLevel();\n\n        items.forEach(item => {\n            if (invEq.removeNItems(item, item.getCount())) {\n                const rmvItem = invEq.getRemovedItem();\n                actorLevel.addItem(rmvItem, x, y);\n            }\n        });\n\n        const eqItems = invEq.getEquipment().getItems();\n        eqItems.forEach(item => {\n            actorLevel.addItem(item, x, y);\n        });\n    }\n\n    /* Removes actor from current level and emits Actor killed event.*/\n    public _killActor(src, actor, dmgComp) {\n        const level = actor.getLevel();\n        const cell = actor.getCell();\n        const [x, y] = actor.getXY();\n\n        actor.add(new Component.Dead());\n\n        if (level.removeActor(actor)) {\n            const nameKilled = actor.getName();\n\n            if (actor.has('Experience')) {\n                this._giveExpToSource(src, actor);\n            }\n            const dmgType = dmgComp.getDamageType();\n            if (dmgType === 'poison') {\n                RG.gameDanger({cell,\n                    msg: nameKilled + ' dies horribly of poisoning!'});\n            }\n\n            let killVerb = 'killed';\n            if (actor.has('NonSentient')) {\n                killVerb = 'destroyed';\n            }\n\n            let killMsg = nameKilled + ' was ' + killVerb;\n            if (src !== NO_DAMAGE_SRC) {killMsg += ' by ' + src.getName();}\n\n            RG.gameDanger({cell, msg: killMsg});\n            POOL.emitEvent(RG.EVT_ACTOR_KILLED, {actor});\n\n            const evtComp = new Component.Event();\n            evtComp.setArgs({type: RG.EVT_ACTOR_KILLED,\n                cause: src});\n            actor.add(evtComp);\n\n            // Finally drop a corpse\n            if (actor.has('Corporeal')) {\n                const corpse = new Item.Corpse(nameKilled + ' corpse');\n                corpse.setActorName(actor.get('Named').getBaseName());\n                this._cloneComponentsToCorpse(actor, corpse);\n\n                // TODO move some components like stats, resistance etc\n                // This way, eating corpse can move these around\n\n                // Update rendering info for corpse item\n                const cssClass = RG.getCssClass(RG.TYPE_ACTOR, nameKilled);\n                RG.addCellStyle(RG.TYPE_ITEM, corpse.getName(), cssClass);\n\n                level.addItem(corpse, x, y);\n                if (actor.has('QuestTarget')) {\n                    const qEvent = new Component.QuestTargetEvent();\n                    qEvent.setEventType('kill');\n                    qEvent.setArgs({corpse});\n                    qEvent.setTargetComp(actor.get('QuestTarget'));\n                    src.add(qEvent);\n                }\n            }\n            this._cleanUpComponents(actor);\n        }\n        else {\n            RG.err('System.Damage', 'killActor', 'Couldn\\'t remove actor');\n        }\n    }\n\n    /* When an actor is killed, gives experience to damage's source.*/\n    public _giveExpToSource(att, def) {\n        if (att !== NO_DAMAGE_SRC && !att.has('Dead')) {\n            const defLevel = def.get('Experience').getExpLevel();\n            const defDanger = def.get('Experience').getDanger();\n            const expPoints = new Component.ExpPoints(defLevel + defDanger);\n            att.add(expPoints);\n\n            // Give additional battle experience\n            if (att.has('InBattle')) {\n                this._giveBattleExpToSource(att);\n            }\n        }\n    }\n\n    /* Adds additional battle experience given if actor is in a battle. */\n    public _giveBattleExpToSource(att) {\n        if (!att.has('BattleExp')) {\n            const inBattleComp = att.get('InBattle');\n            const data = inBattleComp.getData();\n            if (data) {\n                const name = data.name;\n                const comp = new Component.BattleExp();\n                comp.setData({kill: 0, name});\n                att.add(comp);\n            }\n            else {\n                const msg = `Actor: ${JSON.stringify(att)}`;\n                RG.err('System.Damage', '_giveBattleExpToSource',\n                    `InBattle data is null. Actor: ${msg}`);\n            }\n        }\n        att.get('BattleExp').getData().kill += 1;\n    }\n\n    public _cleanUpComponents(actor): void {\n        const compTypes = ['Coldness', 'Expiration', 'Fading'];\n        compTypes.forEach(compType => {\n            const compList = actor.getList(compType);\n            compList.forEach(comp => {\n                if (typeof comp.cleanup === 'function') {\n                    comp.cleanup();\n                }\n                actor.remove(comp);\n            });\n        });\n    }\n\n    public _cloneComponentsToCorpse(actor, corpse): void {\n        const compTypes = ['Named', 'Health', 'Stats', 'Combat', 'Experience'];\n        compTypes.forEach(compType => {\n            const comp = actor.get(compType).clone();\n            corpse.add(comp);\n        });\n\n        const maybeTypes = ['Undead'];\n        if (actor.hasAny(maybeTypes)) {\n            maybeTypes.forEach(compType => {\n                if (actor.has(compType)) {\n                    const comp = actor.get(compType).clone();\n                    corpse.add(comp);\n                }\n            });\n        }\n    }\n\n    public updateEntity(ent): void {\n        const dmgComps = ent.getList('Damage');\n        dmgComps.forEach(dmgComp => {\n            this.processDamageComp(ent, dmgComp);\n            ent.remove(dmgComp); // After dealing damage, remove comp\n        });\n    }\n}\n\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport * as Component from '../component';\n\nimport {Cell} from '../map.cell';\n\n// Messages emitted for each disability\nconst _msg = {\n    Entrapped: {\n        Attack: 'cannot attack while trapped',\n        Movement: 'cannot move while trapped',\n        SpellCast: 'cannot cast spells while trapped'\n    },\n    Paralysis: {\n        Attack: 'cannot attack under paralysis',\n        Movement: 'cannot move under paralysis',\n        SpellCast: 'cannot cast spells under paralysis'\n    },\n    Stun: {\n        Attack: 'is too stunned to attack',\n        Movement: 'is stunned, and stumbles',\n        SpellCast: 'is too stunned to cast spells'\n    }\n};\n\ninterface FuncTable {\n    [key: string]: (ent) => void;\n}\n\nfunction removeAttack(ent, msg): void {\n\n}\n\n/* Stun system removes Movement/Attack components from actors to prevent. */\nexport class SystemDisability extends SystemBase {\n\n    private _compOrder: string[];\n    private _actComp: string[];\n    private _dispatchTable: {[key: string]: FuncTable};\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.DISABILITY, compTypes, pool);\n        this.compTypesAny = true; // Triggered on at least one component\n\n        // Callbacks to execute for each disability\n        this._dispatchTable = {\n            Entrapped: {\n                Attack: ent => {\n                    ent.remove('Attack');\n                    this._emitMsg('Paralysis', 'Attack', ent);\n                },\n                // Entrapped does not directly remove Movement\n                Movement: ent => {\n                    this._handleEntrapped(ent);\n                },\n                SpellCast: ent => {\n                    ent.remove('SpellCast');\n                    this._emitMsg('Entrapped', 'SpellCast', ent);\n                },\n                UseStairs: ent => {\n                    ent.remove('UseStairs');\n                    this._emitMsg('Entrapped', 'UseStairs', ent);\n                }\n            },\n            Fear: {\n                Attack: ent => {\n                    this._handleFear(ent, 'Attack');\n                },\n                Movement: ent => {\n                    this._handleFear(ent, 'Movement');\n                }\n            },\n            Paralysis: {\n                Attack: ent => {\n                    ent.remove('Attack');\n                    this._emitMsg('Paralysis', 'Attack', ent);\n                },\n                Movement: ent => {\n                    ent.remove('Movement');\n                    this._emitMsg('Paralysis', 'Movement', ent);\n                },\n                SpellCast: ent => {\n                    ent.remove('SpellCast');\n                    this._emitMsg('Paralysis', 'SpellCast', ent);\n                },\n                UseStairs: ent => {\n                    ent.remove('UseStairs');\n                    this._emitMsg('Paralysis', 'Movement', ent);\n                }\n            },\n            Stun: {\n                Attack: ent => {\n                    ent.remove('Attack');\n                    this._emitMsg('Stun', 'Attack', ent);\n                },\n                // Stun moves actor to random direction if they try to attack\n                Movement: ent => {\n                    const dir = this.rng.getRandDir();\n                    const [x, y] = RG.newXYFromDir(dir, ent);\n                    ent.remove('Movement');\n                    const map = ent.getLevel().getMap();\n                    if (map.hasXY(x, y)) {\n                        const movComp = new Component.Movement(x, y,\n                            ent.getLevel());\n                        ent.add(movComp);\n                    }\n                    this._emitMsg('Stun', 'Movement', ent);\n                },\n                SpellCast: ent => {\n                    ent.remove('SpellCast');\n                    this._emitMsg('Stun', 'SpellCast', ent);\n                },\n                UseStairs: ent => {\n                    if (RG.isSuccess(0.5)) {\n                        ent.remove('UseStairs');\n                        this._emitMsg('Stun', 'Movement', ent);\n\n                    }\n                }\n            }\n        };\n\n        // Processing order of the components\n        this._compOrder = ['Paralysis', 'Entrapped', 'Stun'];\n        this._actComp = ['Attack', 'Movement', 'SpellCast'];\n    }\n\n    public updateEntity(ent) {\n        this._compOrder.forEach(compName => {\n            if (ent.has(compName)) {\n                this._actComp.forEach(actCompName => {\n                    if (ent.has(actCompName)) {\n                        this._dispatchTable[compName][actCompName](ent);\n                    }\n                });\n            }\n        });\n    }\n\n    public _emitMsg(comp, actionComp, ent) {\n        const cell = ent.getCell();\n        const entName = ent.getName();\n        const msg = `${entName} ${_msg[comp][actionComp]}`;\n        RG.gameMsg({cell, msg});\n    }\n\n    public _handleEntrapped(ent): void {\n        const cell: Cell = ent.getCell();\n        const elems = cell.getElements();\n\n        // Entrapping element was removed somehow, so free the entity\n        if (!elems) {\n            ent.removeAll('Entrapped');\n            return;\n        }\n\n        const traps = elems.filter(e => e.has('Entrapping'));\n        let difficulty = 0;\n        traps.forEach(elem => {\n            difficulty += elem.get('Entrapping').getDifficulty();\n        });\n\n        const str = ent.getStrength();\n        const agi = ent.getAgility();\n        const freeProb = (str + agi) / (str + agi + difficulty);\n        if (!RG.isSuccess(freeProb)) {\n            ent.remove('Movement');\n            const msg = `${ent.getName()} is trapped and cannot move!`;\n            RG.gameMsg({cell, msg});\n        }\n        else {\n            const level = ent.getLevel();\n            // Entity is freed, destroy one-shot entraps\n            traps.forEach(elem => {\n                if (elem.get('Entrapping').getDestroyOnMove()) {\n                    level.removeElement(elem, elem.getX(), elem.getY());\n                }\n            });\n            ent.removeAll('Entrapped');\n            const msg = `${ent.getName()} breaks free from traps!`;\n            RG.gameMsg({cell, msg});\n        }\n    }\n\n    /* Handles Fear component in an actor. */\n    public _handleFear(ent, compType: string): void {\n        const fearComps = ent.getList('Fear');\n        const enemiesSeen = ent.getBrain().getSeenEnemies();\n\n        // TODO add a generic fear with type ie undead\n        let worstFearLevel = 0;\n        let worstFearEnemy = null;\n\n        // Determine the most feared enemy\n        fearComps.forEach(fearComp => {\n            const targetId = fearComp.getTarget();\n            const fearLevel = fearComp.getFearLevel();\n            const fearedEnemy = enemiesSeen.find(e => e.getID() === targetId);\n            if (fearedEnemy) {\n                if (worstFearLevel < fearLevel) {\n                    worstFearLevel = fearLevel;\n                    worstFearEnemy = fearedEnemy;\n                }\n            }\n        });\n\n        if (worstFearEnemy) {\n            const willpower = ent.getWillpower();\n            const fearSuccess = worstFearLevel / (willpower + worstFearLevel);\n            if (RG.isSuccess(fearSuccess)) {\n                ent.remove(compType);\n                const fleedXdY = RG.dXdY(worstFearEnemy.getXY(), ent.getXY());\n                const [nX, nY] = RG.newXYFromDir(fleedXdY, ent.getXY());\n                if (ent.getLevel().getMap().isPassable()) {\n                    const movComp = new Component.Movement(nX, nY, ent.getLevel());\n                    ent.add(movComp);\n                    const msg = `${ent.getName} panics, and runs away from ${worstFearEnemy.getName()}`;\n                    RG.gameMsg({cell: ent.getCell(), msg});\n                }\n                else {\n                    const msg = `${ent.getName} is paralysed by fear!`;\n                    RG.gameMsg({cell: ent.getCell(), msg});\n                }\n            }\n        }\n    }\n\n}\n","/* System for handling of equipped items. */\n\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\n\nexport class SystemEquip extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.EQUIP, compTypes, pool);\n    }\n\n    public updateEntity(ent) {\n        const eqComp = ent.get('Equip');\n        if (eqComp.getIsRemove()) {\n            this.unequipItem(ent, eqComp.getArgs());\n        }\n        else {\n            this.equipItem(ent, eqComp.getArgs());\n        }\n        ent.remove(eqComp);\n    }\n\n    public unequipItem(ent, obj) {\n        const slotName = obj.slot;\n        const slotNumber = obj.slotNumber;\n        const invEq = ent.getInvEq();\n        let result = false;\n        let msg = `Failed to remove item from slot ${slotName}.`;\n\n        if (slotName === 'missile') {\n            const eqItem = invEq.getEquipment().getItem('missile');\n\n            if (eqItem !== null) {\n                if (invEq.unequipItem(slotName, obj.count)) {\n                    result = true;\n                }\n            }\n        }\n        else if (invEq.unequipItem(slotName, 1, slotNumber)) {\n            result = true;\n        }\n\n        if (obj.hasOwnProperty('callback')) {\n            if (result) {\n                msg = `Unequipping from ${slotName} succeeded!`;\n            }\n            obj.callback({msg, result});\n        }\n\n        const item = invEq.getEquipment().getUnequipped(slotName, slotNumber);\n        // If unequip was success, handle unequip effects\n        if (result && item.has('AddOnEquip')) {\n            const addComps = item.getList('AddOnEquip');\n            addComps.forEach(addComp => {\n                const isEquip = false;\n                this.handleAddOnEquip(ent, addComp, isEquip);\n            });\n        }\n    }\n\n    public equipItem(ent, obj) {\n        const invEq = ent.getInvEq();\n        const item = obj.item;\n        let result = false;\n        let msg = `Failed to equip ${item.getName()}`;\n        if (item.getType().match(/^(missile|ammo)$/)) {\n            if (invEq.equipNItems(item, obj.count)) {\n                result = true;\n            }\n        }\n        else if (invEq.equipItem(item)) {\n            result = true;\n        }\n\n        // Callback is mainly used to connect to the GUI inventory\n        if (obj.hasOwnProperty('callback')) {\n            if (result) {\n                msg = `Equipping ${item.getName()} succeeded!`;\n            }\n            obj.callback({msg, result});\n        }\n\n        // If equip was success, handle equip effects\n        if (result && item.has('AddOnEquip')) {\n            const addComps = item.getList('AddOnEquip');\n            addComps.forEach(addComp => {\n                this.handleAddOnEquip(ent, addComp);\n            });\n        }\n    }\n\n    public handleAddOnEquip(ent, addComp, equip = true) {\n        if (equip) {\n            const comp = addComp.getComp();\n            ent.add(comp);\n            addComp.setAddedToActor(true);\n        }\n        else {\n            const compID = addComp.getComp();\n            if (typeof compID === 'number') {\n                const compToRemove = ent.get(compID);\n                ent.remove(compID);\n                addComp.setComp(compToRemove);\n                addComp.setAddedToActor(false);\n            }\n            else {\n                RG.err('System.Equip', 'handleAddOnEquip',\n                    'Expected comp ID number. Got: ' + compID);\n            }\n        }\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {Geometry} from '../geometry';\nimport {Level} from '../level';\nimport * as Component from '../component/component';\n\ntype Cell = import('../map.cell').Cell;\ntype SentientActor = import('../actor').SentientActor;\n\ninterface EventArgs {\n    type: string;\n    cell?: Cell;\n    cause?: SentientActor;\n}\n\ninterface EventComp {\n    getArgs(): EventArgs;\n}\n\n/* System which handles events such as actorKilled, onPickup etc. This system\n * must be updated after most of the other systems have been processed, up to\n * System.Damage. */\nexport class SystemEvents extends SystemBase {\n    public eventRadius: number;\n    public eventRadiusPerID: {[key: number]: number};\n    private _dtable: {[key: string]: (ent, evt, actor) => void};\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.EVENTS, compTypes, pool);\n\n        /* Stores event radius per level ID. Can be used to fine-tune/reduce event\n         * radius for active levels. */\n        this.eventRadiusPerID = {\n        };\n\n        // Global radius, if level-specific value not given\n        this.eventRadius = 10;\n\n        // Maps event types to handler functions\n        this._dtable = {\n            [RG.EVT_ACTOR_KILLED]: this._handleActorKilled.bind(this),\n            [RG.EVT_ITEM_PICKED_UP]: this._handleItemPickedUp.bind(this),\n            [RG.EVT_ACTOR_DAMAGED]: this._handleActorDamaged.bind(this),\n            [RG.EVT_ACTOR_ATTACKED]: this._handleActorAttacked.bind(this),\n            [RG.EVT_ACTOR_USED_STAIRS]: this._handleActorUsedStairs.bind(this)\n            // ACTOR_KILLED: this._handleActorKilled.bind(this)\n        };\n    }\n\n    public updateEntity(ent): void {\n        const evtList = ent.getList('Event') as EventComp[];\n        evtList.forEach((evt: EventComp) => {\n            const args = evt.getArgs();\n            const {type} = args;\n\n            // Usually cell is entity's current cell, but if args.cell is\n            // specified, use that instead (currently true for UseStairs)\n            let srcCell = ent.getCell();\n            if (args.cell) {\n                srcCell = args.cell;\n            }\n\n            const radius = this._getEventRadius(ent);\n            const [x0, y0] = [srcCell.getX(), srcCell.getY()];\n            const cellCoords = Geometry.getBoxAround(x0, y0, radius, true);\n            const cells = ent.getLevel().getMap().getCellsWithCoord(cellCoords);\n\n            // Search for entity which could react to this event for each cell\n            // Right now, only actors are interested in events\n            cells.forEach(cell => {\n                const actors = cell.getActors();\n                if (actors) {\n                    actors.forEach(actor => {\n                        if (!actor.isPlayer() && actor.has('Perception')) {\n                            const seenCells = actor.getBrain().getSeenCells();\n                            const canSee = seenCells.find(c => (\n                                c.getX() === x0 && c.getY() === y0\n                            ));\n                            if (canSee) {\n                                // const name = actor.getName();\n                                // Call the handler function from dispatch table\n                                this._dtable[type](ent, evt, actor);\n                            }\n                        }\n                    });\n                }\n            });\n            ent.remove(evt);\n        });\n    }\n\n    public addLevel(level: Level, radius: number): void {\n        this.eventRadiusPerID[level.getID()] = radius;\n    }\n\n    public removeLevel(level: Level): void {\n        delete this.eventRadiusPerID[level.getID()];\n    }\n\n\n    /* Returns the radius which is used to calculate the event propagation\n     * distance. */\n    public _getEventRadius(ent): number {\n        const id = ent.getLevel().getID();\n        if (this.eventRadiusPerID.hasOwnProperty(id)) {\n            return this.eventRadiusPerID[id];\n        }\n        // No level specific radius given, resort to global radius\n        return this.eventRadius;\n    }\n\n    public _handleActorKilled(ent, evt: EventComp, actor): void {\n        // React to friend/non-hostile being killed\n        if (ent.isPlayer()) {\n            const args = evt.getArgs();\n            const src: SentientActor = args.cause;\n            if (src) {\n                const name = actor.getName();\n                const victim = ent.getName();\n                const msg = `${name} saw ${src.getName()} killing ${victim}`;\n                RG.gameMsg({cell: ent.getCell, msg});\n            }\n        }\n    }\n\n    public _handleItemPickedUp(ent, evt: EventComp, actor): void {\n        if (actor.getID() !== ent.getID()) {\n            // If enemies pick up things, it does not matter because they\n            // will be killed anyway\n            if (!actor.isEnemy(ent)) {\n                const cell = ent.getCell();\n                const perceiver = actor.getName();\n                const acting = ent.getName();\n                const msg = `${perceiver} saw ${acting} picking up an item.`;\n                RG.gameMsg({msg, cell});\n            }\n        }\n    }\n\n    public _handleActorDamaged(ent, evt: EventComp, actor): void {\n        if (ent.getID() !== actor.getID()) {\n            const args = evt.getArgs();\n            const {cause} = args;\n            this._addActorAsEnemy(cause, ent, actor);\n        }\n    }\n\n    public _handleActorAttacked(ent, evt: EventComp, actor): void {\n        if (ent.getID() !== actor.getID()) {\n            const args = evt.getArgs();\n            const {cause} = args;\n            this._addActorAsEnemy(cause, ent, actor);\n        }\n    }\n\n    public _handleActorUsedStairs(ent, evt: EventComp, actor): void {\n        RG.gameMsg(`${actor.getName()} saw ${ent.getName()} using stairs.`);\n    }\n\n    /* Decides if attacker must be added as enemy of the perceiving actor. */\n    public _addActorAsEnemy(\n        aggressor: SentientActor,\n        victim: SentientActor,\n        perceiver: SentientActor\n    ): void {\n        // If self-inflicted damage, ignore it. Most actors are not\n        // against self-mutilation\n        if (aggressor.getID() === victim.getID()) {\n            return;\n        }\n\n        if (victim.getType() === perceiver.getType()) {\n            if (!perceiver.isEnemy(victim) && !victim.isEnemy(perceiver)) {\n                if (perceiver.isFriend(aggressor)) {\n                    this._emitMsg('seems to dislike action', aggressor, victim,\n                        perceiver);\n                    perceiver.getBrain().getMemory().removeFriend(aggressor);\n                }\n                else {\n                    this._emitMsg('shows hatred against action', aggressor,\n                        victim, perceiver);\n                    perceiver.addEnemy(aggressor);\n                }\n            }\n        }\n        else if (perceiver.isFriend(victim)) {\n            this._emitMsg('shows hatred against action', aggressor, victim,\n                perceiver);\n            perceiver.addEnemy(aggressor);\n        }\n    }\n\n    public _emitMsg(msg, aggr, victim, perc): void {\n        const aggrName = aggr.getName();\n        const cell = victim.getCell();\n        let fullMsg = `${perc.getName()} ${msg} of ${aggrName} `;\n        fullMsg += ` towards ${victim.getName()}`;\n        RG.gameMsg({cell, msg: fullMsg});\n    }\n\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {ActorClass} from '../actor-class';\n\n/* Called for entities which gained experience points recently.*/\nexport class SystemExpPoints extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.EXP_POINTS, compTypes, pool);\n    }\n\n    public updateEntity(ent) {\n        const expList = ent.getList('ExpPoints');\n        expList.forEach(expPoints => {\n\n            const expComp = ent.get('Experience');\n            let levelingUp = true;\n\n            let exp = expComp.getExp();\n            exp += expPoints.getExpPoints();\n            expComp.setExp(exp);\n\n            while (levelingUp) {\n                const currExpLevel = expComp.getExpLevel();\n                const nextExpLevel = currExpLevel + 1;\n                const reqExp = RG.getExpRequired(nextExpLevel);\n\n                if (exp >= reqExp) { // Required exp points exceeded\n                    RG.levelUpActor(ent, nextExpLevel);\n                    const name = ent.getName();\n                    if (ent.isPlayer() && ent.has('ActorClass')) {\n                        const actorClass = ent.get('ActorClass').getClass();\n                        const menuObj = ActorClass.getLevelUpObject(\n                            nextExpLevel, actorClass);\n                        ent.getBrain().setSelectionObject(menuObj);\n                    }\n                    else {\n                        const msg = `${name} is more experienced now.`;\n                        RG.gameSuccess({msg, cell: ent.getCell()});\n                    }\n                    levelingUp = true;\n                }\n                else {\n                    levelingUp = false;\n                }\n            }\n            ent.remove(expPoints);\n        });\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\n\n/* Processes entities with hunger component.*/\nexport class SystemHunger extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.HUNGER, compTypes, pool);\n    }\n\n    public updateEntity(ent): void {\n        const hungerComp = ent.get('Hunger');\n        const actionComp = ent.get('Action');\n        hungerComp.decrEnergy(actionComp.getEnergy());\n        actionComp.resetEnergy();\n        if (hungerComp.isStarving()) {\n\n            if (ent.has('Health') && RG.isSuccess(RG.HUNGER_PROB)) {\n                const dmg = new Component.Damage(RG.HUNGER_DMG,\n                    RG.DMG.HUNGER);\n                ent.add(dmg);\n                RG.gameWarn(ent.getName() + ' is starving!');\n            }\n        }\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\nimport {Cell} from '../map.cell';\n\n// Missile has\n// srcX/Y, targetX/X, path, currX/Y, shooter + all damage components, item ref\n// SourceComponent, TargetComponent, LocationComponent, OwnerComponent\n\n/* Processes all missiles launched by actors/traps/etc.*/\nexport class SystemMissile extends SystemBase {\n    public criticalShot: number;\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.MISSILE, compTypes, pool);\n        this.criticalShot = RG.MISSILE_CRITICAL_SHOT;\n    }\n\n    public updateEntity(ent): void {\n        const mComp = ent.get('Missile');\n        const attacker = mComp.getSource();\n        const level = mComp.getLevel();\n        const map = level.getMap();\n\n        const targetX = mComp.getTargetX();\n        const targetY = mComp.getTargetY();\n        let targetCell = null;\n        if (map.hasXY(targetX, targetY)) {\n            targetCell = map.getCell(targetX, targetY);\n        }\n        const firedMsg = this._formatFiredMsg(ent, attacker);\n\n        if (targetCell && targetCell.hasProp('actors')) {\n            const targetActor = targetCell.getSentientActors()[0];\n            attacker.getBrain().getMemory().setLastAttacked(targetActor);\n        }\n\n        while (mComp.isFlying() && !mComp.inTarget() && mComp.hasRange()) {\n\n            // Advance missile to next cell\n            mComp.next();\n            const currX = mComp.getX();\n            const currY = mComp.getY();\n            let currCell: Cell = null;\n            if (map.hasXY(currX, currY)) {\n                currCell = map.getCell(currX, currY);\n            }\n\n            let shownMsg = '';\n            if (!currCell) { // Missile out of level\n                mComp.prev();\n                const prevX = mComp.getX();\n                const prevY = mComp.getY();\n                const prevCell = map.getCell(prevX, prevY);\n                this.finishMissileFlight(ent, mComp, prevCell);\n\n                shownMsg = firedMsg + ' disappears';\n            }\n            // Non-actor obstacle was hit, stop missile\n            else if (!currCell.hasActors() && !currCell.isPassableByAir()) {\n                mComp.prev();\n                const prevX = mComp.getX();\n                const prevY = mComp.getY();\n                const prevCell = map.getCell(prevX, prevY);\n                this.finishMissileFlight(ent, mComp, prevCell);\n\n                RG.debug(this, 'Stopped missile to wall');\n                shownMsg = firedMsg + ' thuds to an obstacle';\n            }\n            else if (currCell.hasProp('actors')) {\n                const actor = currCell.getActors()[0];\n                // Check hit and miss\n                if (this.targetWasHit(ent, actor, mComp)) {\n                    this.finishMissileFlight(ent, mComp, currCell);\n                    if (typeof mComp.onHit === 'function') {\n                        mComp.onHit(actor);\n                    }\n                    const hitVerb = this._addDamageToActor(actor, mComp);\n                    RG.debug(this, 'Hit an actor');\n                    shownMsg = `${firedMsg} ${hitVerb} ${actor.getName()}`;\n\n                    if (actor.has('Experience')) {\n                        if (ent.getType() === 'missile') {\n                            SystemBase.addSkillsExp(attacker, 'Throwing', 1);\n                        }\n                        else if (ent.getType() === 'ammo') {\n                            SystemBase.addSkillsExp(attacker, 'Archery', 1);\n                        }\n                    }\n                    RG.gameWarn({cell: currCell, msg: shownMsg});\n                    shownMsg = '';\n                }\n                else if (mComp.inTarget()) {\n                    this.finishMissileFlight(ent, mComp, currCell);\n                    RG.debug(this, 'In target cell, and missed an entity');\n\n                    const actorFirst = currCell.getFirstActor();\n                    if (actorFirst) {\n                        const targetName = actorFirst.getName();\n                        shownMsg = firedMsg + ' misses ' + targetName;\n                    }\n                    else {\n                        shownMsg = firedMsg + ' misses the target';\n                    }\n                }\n                else if (!mComp.hasRange()) {\n                    this.finishMissileFlight(ent, mComp, currCell);\n                    RG.debug(this, 'Missile out of range. Missed entity.');\n                    shownMsg = ent.getName() + ' does not reach the target';\n                }\n            }\n            else if (mComp.inTarget()) {\n                this.finishMissileFlight(ent, mComp, currCell);\n                RG.debug(this, 'In target cell but no hits');\n                shownMsg = ent.getName() + ' doesn\\'t hit anything';\n            }\n            else if (!mComp.hasRange()) {\n                this.finishMissileFlight(ent, mComp, currCell);\n                RG.debug(this, 'Missile out of range. Hit nothing.');\n                shownMsg = ent.getName() + ' doesn\\'t hit anything';\n            }\n            if (shownMsg.length > 0) {\n                RG.gameMsg({cell: currCell, msg: shownMsg});\n            }\n        }\n\n    }\n\n    /* Adds damage to hit actor, and returns the verb for the message\n     * corresponding to the hit (ie critical or not). */\n    public _addDamageToActor(ent, mComp): string {\n        let hitVerb = 'hits';\n        const dmg = mComp.getDamage();\n        const damageComp = new Component.Damage(dmg,\n            RG.DMG.MISSILE);\n        const dmgSrc = mComp.getSource();\n        damageComp.setSource(dmgSrc);\n\n        let nDamage = mComp.getDamage();\n        if (dmgSrc.has('CriticalShot')) {\n            if (RG.isSuccess(this.criticalShot)) {\n                nDamage *= 2;\n                hitVerb = 'critically hits';\n            }\n        }\n\n        damageComp.setDamage(nDamage);\n        ent.add(damageComp);\n        return hitVerb;\n    }\n\n    public finishMissileFlight(ent, mComp, currCell: Cell): void {\n        mComp.stopMissile(); // Target reached, stop missile\n        ent.remove(mComp);\n\n        const level = mComp.getLevel();\n        let alwaysDestroy = true;\n        if (!mComp.destroyItem) {\n            alwaysDestroy = false;\n            if (!ent.has('Indestructible')) {\n                mComp.destroyItem = this._isItemDestroyed(ent);\n            }\n        }\n        if (!mComp.destroyItem) {\n            let addedToStack = false;\n\n            // Check if missile/ammo should be stacked\n            if (currCell.hasItems()) {\n                const cellItems = currCell.getItems();\n\n                cellItems.forEach(item => {\n                    if (!addedToStack) {\n                        addedToStack = RG.addStackedItems(item, ent);\n                    }\n                });\n            }\n\n            if (!addedToStack) {\n                level.addItem(ent, currCell.getX(), currCell.getY());\n            }\n        }\n        else if (!alwaysDestroy) {\n            const msg = `${ent.getName()} is destroyed!`;\n            RG.gameMsg({cell: currCell, msg});\n        }\n\n        const args = {\n            missile: mComp,\n            item: ent,\n            to: [currCell.getX(), currCell.getY()],\n            level\n        };\n        const animComp = new Component.Animation(args);\n        ent.add(animComp);\n    }\n\n    /* Returns true if the ammo/missile is destroyed. */\n    public _isItemDestroyed(ent): boolean {\n        const name = ent.getName();\n        const prob = this.rng.getUniform();\n        if (ent.has('Ammo')) {\n            if ((/(magic|ruby|permaice)/i).test(name)) {\n                return prob > 0.95;\n            }\n            else if ((/(iron|steel)/i).test(name)) {\n                return prob > 0.90;\n            }\n            else {\n                return prob > 0.85;\n            }\n        }\n        else if ((/rock/i).test(name)) {\n            return prob > 0.95;\n        }\n        else if ((/(magic|ruby|permaice)/i).test(name)) {\n            return prob > 0.97;\n        }\n        else {\n            return prob > 0.95;\n        }\n    }\n\n    public _formatFiredMsg(ent, att): string {\n        let verb = 'thrown';\n        if (ent.has('Ammo')) {verb = 'shot';}\n        return `${ent.getName()} ${verb} by ${att.getName()}`;\n    }\n\n    /* Returns true if the target was hit.*/\n    public targetWasHit(ent, target, mComp): boolean {\n        if (target.has('Ethereal')) {\n            return false;\n        }\n\n        const attacker = mComp.getSource();\n        if (attacker.has('ThroughShot') && !mComp.inTarget()) {\n            return false;\n        }\n\n        const isThrown = ent.getType() === 'missile';\n\n        let attack = mComp.getAttack();\n        if (attacker.has('Skills')) {\n            if (isThrown) {\n                attack += attacker.get('Skills').getLevel('Throwing');\n            }\n            else {\n                attack += attacker.get('Skills').getLevel('Archery');\n            }\n        }\n        let defense = target.getDefense();\n        if (target.has('Skills')) {\n            defense += target.get('Skills').getLevel('Dodge');\n        }\n        const hitProp = attack / (attack + defense);\n        if (RG.isSuccess(hitProp)) {\n            // Using RangedEvasion does not improve Dodge\n            if (target.has('RangedEvasion')) {\n                return RG.isSuccess(0.5);\n            }\n            return true;\n        }\n        else {\n            SystemBase.addSkillsExp(target, 'Dodge', 1);\n        }\n        return false;\n    }\n}\n","\nimport RG from '../rg';\nimport {Entity} from '../entity';\nimport {SystemBase} from './system.base';\nimport {SentientActor} from '../actor';\nimport {Cell} from '../map.cell';\nimport * as Component from '../component';\nimport * as Element from '../element';\nimport {ELEM} from '../../data/elem-constants';\n\ntype BrainPlayer = import('../brain/brain.player').BrainPlayer;\ntype Level = import('../level').Level;\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:System.Movement');\n\ntype ElementExploration = Element.ElementExploration;\n\nconst {addSkillsExp} = SystemBase;\n\n\ninterface PenaltyObj {\n    value: number;\n    srcComp: string;\n    srcFunc: string;\n    targetComp: string;\n    targetFunc: string;\n}\n\ninterface ElementMoveData {\n    dontApplyTo?: string[];\n    mods: PenaltyObj[];\n}\n\ninterface MoveBonuses {\n    [key: string]: ElementMoveData;\n}\n\nconst snowTracksMap = {\n    'light snow': ELEM.SNOW_LIGHT_TRACKS,\n    'snow': ELEM.SNOW_TRACKS,\n    'deep snow': ELEM.SNOW_DEEP_TRACKS,\n};\n\n// Used to map an element type to another to re-use logic of that type\nconst elemTypeMap = {\n    'deep snow': 'snow',\n    'deep snow with tracks': 'snow',\n    'light snow': 'snow',\n    'light snow with tracks': 'snow',\n    'snow with tracks': 'snow',\n};\n\n/* This system handles all entity movement.*/\nexport class SystemMovement extends SystemBase {\n\n    public climbRe: RegExp;\n    public somethingSpecial: string[];\n    private _bonuses: MoveBonuses;\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.MOVEMENT, compTypes, pool);\n        this.somethingSpecial = ['QuestTarget', 'Named'];\n        this.climbRe = /highrock/;\n\n        /* These are applied when an actor enters a cell with given type of base\n         * element.\n         * If the value is float, it is used to scale from base value in\n         * Stats/Combat, if it's integer it's added directly. */\n        this._bonuses = {\n            water: {\n                dontApplyTo: ['Flying', 'Amphibious'],\n                mods: [\n                    this.speedPenalty(0.5),\n                    this.defensePenalty(0.5),\n                    {\n                        value: -5, srcComp: 'Combat', srcFunc: 'getAttack',\n                        targetComp: 'CombatMods', targetFunc: 'setAttack'\n                    }\n                ]\n            },\n            grass: {\n                mods: [\n                    this.speedPenalty(0.10)\n                ]\n            },\n            bridge: {mods: [\n                this.defensePenalty(0.5)\n            ]},\n            stone: {mods: [\n                this.speedPenalty(0.25)\n            ]},\n            snow: {\n                dontApplyTo: ['Flying', 'SnowWalk'],\n                mods: [\n                    this.speedPenalty(0.25)\n                ]\n            }\n        };\n    }\n\n    public speedPenalty(scale): PenaltyObj {\n        return {\n            value: -scale, srcComp: 'Stats', srcFunc: 'getSpeed',\n            targetComp: 'StatsMods', targetFunc: 'setSpeed'\n        };\n    }\n\n    public defensePenalty(scale): PenaltyObj {\n        return {\n            value: -scale, srcComp: 'Combat', srcFunc: 'getDefense',\n            targetComp: 'CombatMods', targetFunc: 'setDefense'\n        };\n    }\n\n    /* If player moved to the square, checks if any messages must\n     * be emitted. */\n    public checkMessageEmits(prevCell: Cell, newCell: Cell): void {\n        if (newCell.hasProp(RG.TYPE_ELEM)) {\n            if (newCell.hasStairs()) {\n                const stairs = newCell.getStairs();\n                const level = stairs.getTargetLevel() as Level;\n                let msg = 'You see stairs here';\n\n                const parent = level.getParent();\n                if (parent) {\n                    const name = RG.formatLocationName(level);\n                    msg += `. They seem to be leading to ${name}`;\n                }\n                RG.gameMsg(msg);\n            }\n            else if (newCell.hasPassage()) {\n                const passage = newCell.getPassage();\n                const level = passage.getTargetLevel() as Level;\n                const dir = RG.getCardinalDirection(level, newCell);\n                let msg = `You see a passage to ${dir} here.`;\n                const parent = level.getParent();\n                if (parent) {\n                    const name = RG.formatLocationName(level);\n                    msg += `. It seems to be leading to ${name}`;\n                }\n                RG.gameMsg(msg);\n            }\n            else if (newCell.hasConnection()) {\n                const connection = newCell.getConnection();\n                const level = connection.getTargetLevel() as Level;\n                let msg = 'You see an entrance here';\n\n                const parent = level.getParent();\n                if (parent) {\n                    const name = RG.formatLocationName(level);\n                    msg += `. It seems to be leading to ${name}`;\n                }\n                RG.gameMsg(msg);\n\n            }\n            if (newCell.hasPropType('lever')) {\n                RG.gameMsg('There is a lever on the floor');\n            }\n\n            if (!prevCell.hasShop() && newCell.hasShop()) {\n                const shop = newCell.getShop();\n                if (shop.isAbandoned()) {\n                    RG.gameMsg('This shop seems to be abandoned');\n                }\n                else {\n                    RG.gameMsg('You have entered a shop.');\n                }\n            }\n            else if (newCell.hasShop()) {\n                const shop = newCell.getShop();\n                if (!shop.isAbandoned()) {\n                    RG.gameMsg('You can drop items to sell them here.');\n                }\n            }\n        }\n\n        if (newCell.hasItems()) {\n            const items = newCell.getItems();\n            const topItem = items[0];\n            let topItemName = topItem.getName();\n            if (topItem.getCount() > 1) {\n                topItemName = `${topItemName} (x${topItem.getCount()})`;\n            }\n\n            if (items.length > 1) {\n                RG.gameMsg('There are several items here. ' +\n                    `You see ${topItemName} on top`);\n            }\n            else {\n                RG.gameMsg(`You see ${topItemName}` + ' on the floor');\n            }\n\n            // Check for items in a shop\n            if (topItem.has('Unpaid')) {\n                if (topItem.getCount() > 1) {RG.gameMsg('They are for sale');}\n                else {RG.gameMsg('It is for sale');}\n            }\n\n            // CHeck for Named or QuestTargets etc\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].hasAny(this.somethingSpecial)) {\n                    const name = items[i].getName();\n                    RG.gameMsg(`There is something special about ${name}`);\n                }\n            }\n        }\n\n        const newBaseElem = newCell.getBaseElem();\n        if (newBaseElem.hasMsg('onEnter')) {\n            RG.gameMsg(newBaseElem.getMsg('onEnter'));\n        }\n    }\n\n    public updateEntity(ent): void {\n        const movComp = ent.get('Movement');\n        const [x, y] = movComp.getXY();\n\n        const map = movComp.getLevel().getMap();\n\n        if (!map.hasXY(x, y)) {\n            let msg = `Tried to move to ${x},${y}.`;\n            msg += ' Entity: ' + ent.getName();\n            RG.warn('System.Movement', 'updateEntity', msg);\n        }\n\n        const cell = map.getCell(x, y);\n        const prevCell = ent.getCell();\n        let canMoveThere = cell.isFree(ent.has('Flying'));\n        if (!canMoveThere) {\n            canMoveThere = this._checkSpecialMovement(ent, cell);\n        }\n\n        if (canMoveThere) {\n            const xyOld = ent.getXY();\n            if (debug.enabled) {\n                RG.debug(this, `Trying to move ent from ${xyOld}`);\n            }\n\n            const propType = ent.getPropType();\n            if (map.moveProp(xyOld, [x, y], propType, ent)) {\n                ent.setXY(x, y);\n\n                this.checkForStatsMods(ent, prevCell, cell);\n\n                // Emit messages only for the player\n                if (ent.isPlayer && ent.isPlayer()) {\n                    this.checkMessageEmits(prevCell, cell);\n                }\n\n                if (cell.hasElements()) {\n                    if (ent.isPlayer && ent.isPlayer()) {\n                        if (cell.hasPropType('exploration')) {\n                            this._processExploreElem((ent as SentientActor), cell);\n                        }\n                    }\n                    this._checkEntrapment(ent, cell);\n                }\n\n                const baseElem = cell.getBaseElem();\n                if (baseElem.has('Snowy')) {\n                    const baseType = baseElem.getType();\n                    if (snowTracksMap[baseType]) {\n                        cell.setBaseElem(snowTracksMap[baseType]);\n                    }\n                }\n            }\n            else {\n                this._moveError(ent);\n            }\n        }\n        else {\n            RG.debug(this, 'Cell wasn\\'t free at ' + x + ', ' + y);\n        }\n        ent.remove(movComp);\n    }\n\n    /* Checks if cell type has changed, and if some penalties/bonuses must be\n     * applied to the moved entity. */\n    public checkForStatsMods(ent, prevCell, newCell): void {\n        let [prevType, newType] = [prevCell.getBaseElem().getType(),\n            newCell.getBaseElem().getType()\n        ];\n        if (elemTypeMap[prevType]) {\n            prevType = elemTypeMap[prevType];\n        }\n        if (elemTypeMap[newType]) {\n            newType = elemTypeMap[newType];\n        }\n\n        // No cell type change, no need to check the modifiers\n        if (prevType === newType) {return;}\n\n        // Add bonus/penalty upon entering a new cell type\n        if (this._bonuses.hasOwnProperty(newType)) {\n            const bonuses = this._bonuses[newType];\n\n            // Check here if we can ignore the bonus/penalty for this entity\n            let applyBonus = true;\n            if (bonuses.dontApplyTo) {\n                bonuses.dontApplyTo.forEach(dontApplyComp => {\n                    if (ent.has(dontApplyComp)) {\n                        applyBonus = false;\n                    }\n                });\n            }\n\n            if (applyBonus) {\n                bonuses.mods.forEach(mod => {\n                    if (Number.isInteger(mod.value)) {\n                        const targetComp = Component.create(mod.targetComp);\n                        targetComp[mod.targetFunc](mod.value);\n                        targetComp.setTag(newType);\n                        ent.add(targetComp);\n                    }\n                    else {\n                        const srcComp = ent.get(mod.srcComp);\n                        if (srcComp) {\n                            let bonus = srcComp[mod.srcFunc]();\n                            bonus = Math.round(mod.value * bonus);\n                            const targetComp = Component.create(mod.targetComp);\n                            targetComp[mod.targetFunc](bonus);\n                            targetComp.setTag(newType);\n                            ent.add(targetComp);\n                        }\n                    }\n\n                });\n            }\n        }\n\n        // Remove the bonus/penalty here because cell type was left\n        if (this._bonuses.hasOwnProperty(prevType)) {\n            const statsList = ent.getList('StatsMods');\n            const combatList = ent.getList('CombatMods');\n            // TODO add a list of comps to check to this._bonuses\n            statsList.forEach(mod => {\n                if (mod.getTag() === prevType) {\n                    ent.remove(mod);\n                }\n            });\n            combatList.forEach(mod => {\n                if (mod.getTag() === prevType) {\n                    ent.remove(mod);\n                }\n            });\n        }\n    }\n\n    /* Checks movements like climbing. */\n    private _checkSpecialMovement(ent: SentientActor, cell: Cell): boolean {\n        const elemType = cell.getBaseElem().getType();\n        if (this.climbRe.test(elemType) && ent.has('Climber')) {\n            const msg = `${ent.getName()} climbs the rocky terrain`;\n            RG.gameMsg({cell, msg});\n            return true;\n        }\n        return false;\n    }\n\n    /* When player enters exploration element cell, function processes this. At\n    *  the moment, this gives only exp to player. */\n    private _processExploreElem(ent: SentientActor, cell: Cell): void {\n        const level: Level = ent.getLevel();\n        const [x, y] = [cell.getX(), cell.getY()];\n        const expElemU = cell.getPropType('exploration')[0] as unknown;\n        const expElem = expElemU as ElementExploration;\n\n        if (level.removeElement(expElem, x, y)) {\n            const givenExp = expElem.getExp();\n            const expPoints = new Component.ExpPoints(givenExp);\n            ent.add(expPoints);\n            addSkillsExp(ent, 'Exploration', 1);\n\n            if (expElem.hasData()) {\n                const expData = expElem.getData();\n                if (expData.zoneType) {\n                    ent.get('GameInfo').addZoneType(expData.zoneType);\n                }\n            }\n\n            // Add level parent ID to the info list\n            const levelParent = level.getParent();\n            if (levelParent) {\n                ent.get('GameInfo').addZone(levelParent.getID());\n            }\n\n            let msg = expElem.getMsg('onEnter');\n            if (!msg || msg.length === 0) {\n                msg = `${ent.getName()} has explored zone thoroughly.`;\n            }\n            RG.gameInfo({cell, msg});\n            if (ent.isPlayer()) {\n                const brain: unknown = ent.getBrain();\n                const brainPlayer = brain as BrainPlayer;\n                brainPlayer.addMark();\n            }\n        }\n    }\n\n    /* Checks if entity gets entrapped into the cell. */\n    private _checkEntrapment(ent, cell): void {\n        // Need to re-check this, if exploreElem was removed, very subtle\n        const elems = cell.getElements();\n        if (!elems) {return;}\n\n        elems.forEach(elem => {\n            if (elem.has('Entrapping')) {\n                if (!ent.has('Entrapped')) {\n                    const diff = elem.get('Entrapping').getDifficulty();\n                    const str = ent.getStrength();\n                    const agi = ent.getAgility();\n                    // TODO use Avoid traps skill also\n                    const avoidProb = (str + agi) / (str + agi + diff);\n                    if (!RG.isSuccess(avoidProb)) {\n                        // TODO check for flying and other options\n                        ent.add(new Component.Entrapped());\n                        let msg = `${ent.getName()} becomes trapped`;\n                        msg += ` by ${elem.getName()}!`;\n                        RG.gameMsg({cell, msg});\n                    }\n                    else {\n                        let msg = `${ent.getName()} avoids getting trapped`;\n                        msg += ` by ${elem.getName()}!`;\n                        RG.gameMsg({cell, msg});\n                    }\n                }\n            }\n        });\n    }\n\n    /* Reports an error if an entity could not be removed. */\n    private _moveError(ent): void {\n        const [xOld, yOld] = ent.getXY();\n        const level = ent.getLevel();\n        const map = level.getMap();\n        const coord = xOld + ', ' + yOld;\n        RG.diag('\\n\\nSystem.Movement list of actors:');\n        RG.printObjList(level.getActors(),\n            ['getID', 'getName', 'getX', 'getY']);\n        this._diagnoseRemovePropError(xOld, yOld, map, ent);\n        RG.err('MovementSystem', 'moveActorTo',\n            'Couldn\\'t remove ent |' + ent.getName() + '| @ ' + coord);\n    }\n\n\n    /* If removal of moved entity fails, tries to diagnose the error. */\n    private _diagnoseRemovePropError(xTry, yTry, map, ent): void {\n        const propType = ent.getPropType();\n        let xFound = -1;\n        let yFound = -1;\n        for (let x = 0; x < map.cols; x++) {\n            for (let y = 0; y < map.rows; y++) {\n                if (map.removeProp(x, y, propType, ent)) {\n                    xFound = x;\n                    yFound = y;\n                }\n            }\n        }\n\n        const cell = map.getCell(xTry, yTry);\n        RG.diag(`Cell at ${xTry},${yTry}:`);\n        RG.diag(cell);\n\n        const entCell = ent.getCell();\n        RG.diag('Cell of the entity:');\n        RG.diag(entCell);\n\n        RG.diag('System.Movement: diagnoseRemovePropError:');\n        const name = ent.getName();\n        if (xFound >= 0 && yFound >= 0) {\n            const xy = `${xFound},${yFound} instead of ${xTry},${yTry}.`;\n            const msg = `\\tEnt |${name}| found from |${xy}|`;\n            RG.diag(msg);\n        }\n        else {\n            const msg = `\\tNo ent |${name}| found on entire map.`;\n            RG.diag(msg);\n        }\n\n        // Last resort, try find.\n        RG.diag('map.Find list of objects: ');\n        const objects = map.findObj(obj => {\n            return obj.getName && obj.getName().match(/keeper/);\n        });\n        RG.diag(objects);\n\n    }\n\n}\n\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Item from '../item';\nimport * as Component from '../component';\nimport {ElementShop} from '../element';\nimport {SentientActor} from '../actor';\n\nconst {addSkillsExp} = SystemBase;\n\ninterface TransArgs {\n    buyer: SentientActor;\n    seller: SentientActor;\n    item: Item.ItemBase;\n    shop: ElementShop;\n    count?: number;\n    callback?: (obj: any) => void;\n}\n\n/* Processes entities with transaction-related components.*/\nexport class SystemShop extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.SHOP, compTypes, pool);\n    }\n\n    public updateEntity(ent): void {\n        const trans = ent.get('Transaction');\n        const args: TransArgs = trans.getArgs();\n        const {buyer} = args;\n        this._checkTransArgsOK(ent, args);\n        if (buyer.getID() === ent.getID()) {\n            this.buyItem(args);\n        }\n        else {\n            this.sellItem(args);\n        }\n        ent.remove(trans);\n    }\n\n    public _checkTransArgsOK(ent, args: TransArgs): void {\n        const {item, buyer, shop, seller} = args;\n        let msg = '';\n        if (!item) {\n            msg += 'Item is null/undef. ';\n        }\n        if (!buyer) {\n            msg += 'Buyer is null/undef. ';\n        }\n        if (!seller) {\n            msg += 'Seller is null/undef. ';\n        }\n        if (!shop) {\n            msg += 'Shop (element) is null/undef. ';\n        }\n        if (msg !== '') {\n            msg += 'Entity: ' + ent.getName();\n            RG.err('System.Shop', '_checkTransArgsOK', msg);\n        }\n    }\n\n\n    public buyItem(args: TransArgs): void {\n        const {item, buyer, shop, seller} = args;\n        const buyerCell = buyer.getCell();\n        const value = item.getValue() * shop.getCostFactorSell();\n        const goldWeight = RG.valueToGoldWeight(value);\n        const nCoins = RG.getGoldInCoins(goldWeight);\n\n        if (RG.hasEnoughGold(buyer, goldWeight)) {\n            const coins = new Item.GoldCoin(RG.GOLD_COIN_NAME);\n            const nCoinsRemoved = RG.removeNCoins(buyer, nCoins);\n            coins.setCount(nCoinsRemoved);\n\n            if (!buyer.getInvEq().canCarryItem(item)) {\n                buyer.getInvEq().addItem(coins); // Add coins back\n                RG.gameMsg(buyer.getName() + ' cannot carry more weight');\n                return;\n            }\n\n            seller.getInvEq().addItem(coins);\n            const level = seller.getLevel();\n            if (level.removeItem(item, shop.getX(), shop.getY())) {\n                buyer.getInvEq().addItem(item);\n                item.remove('Unpaid');\n                RG.gameMsg({cell: buyerCell, msg: buyer.getName() +\n                    ' bought ' + item.getName() + ' for ' + nCoins + ' coins.'});\n                addSkillsExp(seller, 'Trading', 1);\n            }\n            else {\n                RG.err('System.Shop', 'buyItem',\n                   'Could not remove item from level');\n            }\n        }\n        else {\n            RG.gameMsg({cell: buyerCell, msg: buyer.getName() +\n                ' doesn\\'t have enough money to buy ' + item.getName() + ' for '\n                + nCoins + ' coins.'});\n        }\n    }\n\n    public sellItem(args: TransArgs): void {\n        const {item, buyer, seller, shop} = args;\n        if (!seller) {\n            RG.err('System.Shop', 'sellItem',\n                'Seller is null or undefined.');\n        }\n\n        if (!this.willingToBuyItem(item, buyer)) {\n            const itemName = item.getName();\n            const msg = `${buyer.getName()} is not interested in ${item.getName()}.`;\n            RG.gameMsg({cell: seller.getCell(), msg});\n            if (args.callback) {\n                args.callback({msg, result: false});\n            }\n            return;\n        }\n\n        const count = args.count || 1;\n        const sellerCell = seller.getCell();\n        const value = count * item.getValue() * shop.getCostFactorBuy();\n        const goldWeight = RG.valueToGoldWeight(value);\n        const nCoins = RG.getGoldInCoins(goldWeight);\n\n        if (RG.hasEnoughGold(buyer, goldWeight)) {\n            if (seller.getInvEq().dropNItems(item, count)) {\n                const coins = new Item.GoldCoin(RG.GOLD_COIN_NAME);\n                const nCoinsRemoved = RG.removeNCoins(buyer, nCoins);\n                coins.setCount(nCoinsRemoved);\n                seller.getInvEq().addItem(coins);\n\n                // New item is found at the bottom\n                const cellItems = seller.getCell().getItems();\n                const bottomItem = cellItems[cellItems.length - 1];\n                bottomItem.add(new Component.Unpaid());\n\n                const itemName = bottomItem.getName();\n                RG.gameMsg({cell: sellerCell, msg: seller.getName() +\n                    ' sold ' + itemName + ' for ' + nCoins + ' coins.'});\n                if (args.callback) {\n                    const msg = `${item.getName()} was sold.`;\n                    args.callback({msg, result: true});\n                }\n                addSkillsExp(seller, 'Trading', 1);\n            }\n        }\n        else {\n            const name = buyer.getName();\n            RG.gameMsg({cell: buyer.getCell(),\n                msg: 'Buyer ' + name +\n                ' doesn\\'t have enough gold to buy it.'});\n            if (args.callback) {\n                const msg = `Cannot sell ${item.getName()}.`;\n                args.callback({msg, result: false});\n            }\n        }\n    }\n\n    public willingToBuyItem(item, buyer): boolean {\n        if (item.getName() === RG.GOLD_COIN_NAME) {\n            return false;\n        }\n        return true;\n    }\n\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\n\n/* System which handles the skill advancement. */\nexport class SystemSkills extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.SKILLS, compTypes, pool);\n    }\n\n    public updateEntity(ent) {\n        const comps = ent.getList('SkillsExp');\n        const entSkills = ent.get('Skills');\n        const cell = ent.getCell();\n\n        comps.forEach(comp => {\n            const skillName = comp.getSkill();\n            if (!entSkills.hasSkill(skillName)) {\n                entSkills.addSkill(skillName);\n                RG.gameSuccess({cell,\n                    msg: `${ent.getName()} learns a skill ${skillName}`});\n            }\n            const points = comp.getPoints();\n\n            entSkills.addPoints(skillName, points);\n\n            const currPoints = entSkills.getPoints(skillName);\n            const currLevel = entSkills.getLevel(skillName);\n\n            // TODO make a proper function to check the skill threshold\n            if (currPoints >= (10 * currLevel)) {\n                const name = ent.getName();\n                entSkills.setLevel(skillName, currLevel + 1);\n                entSkills.resetPoints(skillName);\n                RG.gameSuccess({cell,\n                    msg: `${name} advances a skill ${skillName}`});\n\n                const expPts = new Component.ExpPoints(10 * currLevel);\n                ent.add(expPts);\n                RG.gameSuccess({cell,\n                    msg: `${name} gains experience from skill ${skillName}`});\n            }\n\n            ent.remove(comp);\n        });\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\nimport {Path} from '../path';\n\nconst {addSkillsExp} = SystemBase;\n\n/* System which processes the spell casting components. This system checks if\n * the spell casting succeeds and then handles PP reduction, but it does not\n * execute the effects of the spell.*/\nexport class SystemSpellCast extends SystemBase {\n\n    private _drainerName: string;\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.SPELL_CAST, compTypes, pool);\n        this.compTypesAny = true;\n    }\n\n    public updateEntity(ent) {\n        const name = ent.getName();\n        const cell = ent.getCell();\n\n        // TODO add checks for impairment, counterspells etc\n\n        if (ent.has('SpellPower') && ent.has('SpellCast')) {\n            const spellcast = ent.get('SpellCast');\n            const ppComp = ent.get('SpellPower');\n            const spell = spellcast.getSpell();\n            if (spell.getCastingPower() <= ppComp.getPP()) {\n                const drainers = Object.values(this.entities).filter(e => (\n                    e.has('PowerDrain')\n                ));\n\n                const args = spellcast.getArgs();\n                ppComp.decrPP(spell.getCastingPower());\n\n                if (drainers.length === 0) {\n                    spell.cast(args);\n                    addSkillsExp(ent, 'SpellCasting', 1);\n                }\n                else if (this._checkPowerDrain(spell, args, drainers)) {\n                    const sName = spell.getName();\n                    let msg = `Spell ${sName} was canceled by power drain of`;\n                    msg += ` ${this._drainerName}`; // set in checkPowerDrain()\n                    RG.gameMsg({cell, msg});\n                }\n                else {\n                    // Spell drain check succeeded, can cast\n                    spell.cast(args);\n                    addSkillsExp(ent, 'SpellCasting', 1);\n                }\n            }\n            else {\n                const msg = `${name} has no enough power to cast spell`;\n                RG.gameMsg({cell, msg});\n            }\n            ent.remove('SpellCast');\n        }\n    }\n\n    /* Checks if any power drainer managers to cancel the spell. */\n    public _checkPowerDrain(spell, args, drainers) {\n        let isDrained = false;\n        const srcX = args.src.getX();\n        const srcY = args.src.getY();\n        this._drainerName = '';\n        drainers.forEach(ent => {\n            if (ent.getLevel().getID() === args.src.getLevel().getID()) {\n                const drainX = ent.getX();\n                const drainY = ent.getY();\n                const dist = Path.shortestDist(srcX, srcY, drainX, drainY);\n                if (ent.getID() !== args.src.getID()) {\n                    if (dist <= ent.get('PowerDrain').drainDist) {\n                        ent.remove('PowerDrain');\n                        isDrained = true;\n                        this._drainerName = ent.getName();\n\n                        if (ent.has('SpellPower')) {\n                            const castPower = spell.getCastingPower();\n                            ent.get('SpellPower').addPP(castPower);\n                        }\n                        return; // from forEach loop\n                    }\n                }\n            }\n        });\n        return isDrained;\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\nimport {ObjectShell} from '../objectshellparser';\nimport {Geometry} from '../geometry';\n\nconst {addSkillsExp} = SystemBase;\n\nconst spellEffects = ['SpellRay', 'SpellCell', 'SpellMissile', 'SpellArea',\n    'SpellSelf'];\n\n/* SpellEffect system processes the actual effects of spells, and creates damage\n * dealing components etc. An example if FrostBolt which creates SpellRay\n * component for each cell it's travelling to. */\nexport class SystemSpellEffect extends SystemBase {\n    private _dtable: {[key: string]: (ent, comp) => void};\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.SPELL_EFFECT, compTypes, pool);\n        this.compTypesAny = true; // Process with any relavant Spell comp\n\n        // Defines which function is called to process that particular type of\n        // spell effect component, each accepts (ent, spellComp)\n        this._dtable = {\n            SpellRay: this.processSpellRay.bind(this),\n            SpellCell: this.processSpellCell.bind(this),\n            SpellMissile: this.processSpellMissile.bind(this),\n            SpellArea: this.processSpellArea.bind(this),\n            SpellSelf: this.processSpellSelf.bind(this)\n        };\n\n    }\n\n    /* For each different spell effect, grabs a list of components (if any\n     * exist), then calls the corresponding function in dtable. */\n    public updateEntity(ent) {\n        spellEffects.forEach(effName => {\n            if (ent.has(effName)) {\n                const effCompList = ent.getList(effName);\n                effCompList.forEach(effComp => {\n                    // Call function in dtable matching the effect name\n                    this._dtable[effName](ent, effComp);\n                    ent.remove(effComp); // Don't call in processXXX functions\n                });\n            }\n        });\n    }\n\n    public processSpellRay(ent, ray) {\n        const args = ray.getArgs();\n        const map = ent.getLevel().getMap();\n        const spell = args.spell;\n        const name = spell.getName();\n\n        let [x, y] = args.from;\n        const [dX, dY] = args.dir;\n        let rangeLeft = spell.getRange();\n        let rangeCrossed = 0;\n\n        while (rangeLeft > 0) {\n            x += dX;\n            y += dY;\n            if (map.hasXY(x, y)) {\n                const cell = map.getCell(x, y);\n                if (spell.onCellCallback) {\n                    spell.onCellCallback(cell);\n                }\n\n                if (cell.hasActors()) {\n                    // Deal some damage etc\n                    const actor = cell.getActors()[0];\n                    const actorName = actor.getName();\n                    const stopSpell = actor.has('SpellStop');\n                    if (stopSpell || this.rayHitsActor(actor, rangeLeft)) {\n                        this._addDamageToActor(actor, args);\n\n                        if (stopSpell) {\n                            rangeLeft = 0;\n                            RG.gameMsg({cell,\n                                msg: `${name} is stopped by ${actorName}`});\n                        }\n                        else if (spell.stopOnHit) {\n                            rangeLeft = 0;\n                        }\n\n                        // TODO add some evasion checks\n                        // TODO add onHit callback for spell because\n                        // not all spells cause damage\n                        RG.gameMsg({cell,\n                            msg: `${name} hits ${actorName}`});\n                    }\n                    else {\n                        RG.gameMsg({cell,\n                            msg: `${name} misses ${actorName}`});\n                    }\n                }\n                if (!cell.isSpellPassable()) {\n                    rangeLeft = 0;\n                }\n                else {\n                    ++rangeCrossed;\n                }\n                --rangeLeft;\n            }\n            else {\n                rangeLeft = 0;\n            }\n        }\n        const animArgs = {\n            dir: args.dir,\n            ray: true,\n            from: args.from,\n            range: rangeCrossed,\n            className: RG.getDmgClassName(args.damageType),\n            level: ent.getLevel()\n        };\n        const animComp = new Component.Animation(animArgs);\n        ent.add(animComp);\n    }\n\n    public rayHitsActor(actor, rangeLeft) {\n        if (!actor.has('Health')) {\n            return false;\n        }\n\n        let evasion = actor.get('Stats').getAgility();\n        if (actor.has('Skills')) {\n            evasion += actor.get('Skills').getLevel('Dodge');\n        }\n        evasion -= rangeLeft;\n        if (evasion < 0) {evasion = 0;}\n\n        const hitChance = (100 - evasion) / 100;\n        if (RG.isSuccess(hitChance)) {\n            if (actor.has('RangedEvasion')) {\n                return RG.isSuccess(0.5);\n            }\n            return true;\n        }\n        else {\n            addSkillsExp(actor, 'Dodge', 1);\n            return false;\n        }\n    }\n\n    public processSpellCell(ent, spellComp) {\n        const args = spellComp.getArgs();\n        const map = ent.getLevel().getMap();\n        const spell = args.spell;\n        const name = spell.getName();\n\n        const dX = args.dir[0];\n        const dY = args.dir[1];\n        const x = args.from[0] + dX;\n        const y = args.from[1] + dY;\n\n        if (map.hasXY(x, y)) {\n            const targetCell = map.getCell(x, y);\n\n            if (args.preCallback) {\n                args.preCallback(targetCell);\n            }\n\n            // Callback given for the spell\n            if (args.callback) {\n                args.callback(targetCell);\n            }\n            else if (targetCell.hasActors()) {\n                const actor = targetCell.getActors()[0];\n\n                // Spell targeting specific component, for example stat boost\n                if (args.targetComp) {\n                    const setFunc = args.set;\n                    const getFunc = args.get;\n                    if (actor.has(args.targetComp)) {\n                        const comp = actor.get(args.targetComp);\n                        const actorName = actor.getName();\n                        if (getFunc) {\n                            comp[setFunc](comp[getFunc()] + args.value);\n                        }\n                        else {\n                            comp[setFunc](args.value);\n                        }\n                        RG.gameMsg({cell: targetCell,\n                            msg: `Spell ${name} is cast on ${actorName}`});\n                    }\n                }\n                else if (args.addComp) { // Spell adding comp to entity (ie Stun)\n                    const comp = args.addComp.comp;\n\n                    if (comp) {\n                        if (args.addComp.duration) { // Transient component\n                            const dur = args.addComp.duration;\n                            if (actor.has('Expiration')) {\n                                actor.get('Expiration').addEffect(comp, dur);\n                            }\n                            else {\n                                const expComp = new Component.Expiration();\n                                expComp.addEffect(comp, dur);\n                                actor.add(expComp);\n                            }\n                            actor.add(comp);\n                        }\n                        else { // Permanent component, no duration given\n                            actor.add(comp);\n                        }\n                    }\n                    else {\n                        const json = JSON.stringify(args);\n                        RG.err('SystemSpellEffect', 'processSpellCell',\n                            `args.addComp.comp must be defined. Args: ${json}`);\n                    }\n\n                    const compType = comp.getType();\n                    const msg = `${actor.getName()} seems to have ${compType}`;\n                    RG.gameMsg({cell: actor.getCell(), msg});\n                }\n                else if (args.removeComp) {\n                    args.removeComp.forEach(compName => {\n                        if (actor.has(compName)) {\n                            actor.removeAll(compName);\n                        }\n                    });\n                }\n                else {\n                    // Deal some damage etc\n                    this._addDamageToActor(actor, args);\n                    // TODO add some evasion checks\n                    // TODO add onHit callback for spell because not all spells\n                    // cause damage\n                    RG.gameMsg({cell: targetCell,\n                        msg: `${name} hits ${actor.getName()}`});\n                }\n            }\n\n            if (args.postCallback) {\n                args.postCallback(targetCell);\n            }\n\n            addSingleCellAnim(ent, args, [x, y]);\n        }\n    }\n\n    public processSpellMissile(ent, spellComp) {\n        const args = spellComp.getArgs();\n        const spell = args.spell;\n        const parser = ObjectShell.getParser();\n\n        const ammoName = spell.getAmmoName();\n        if (!ammoName) {\n            RG.err('System.SpellEffect', 'processSpellMissile',\n               `No |ammoName| set for spell ${spell.getName()}`);\n        }\n\n        const spellArrow = parser.createItem(ammoName);\n        const mComp = new Component.Missile(args.src);\n        mComp.setTargetXY(args.to[0], args.to[1]);\n        mComp.destroyItem = true;\n        if (args.hasOwnProperty('destroyItem')) {\n            mComp.destroyItem = args.destroyItem;\n        }\n        mComp.setDamage(args.damage);\n        mComp.setAttack(100);\n        mComp.setRange(spell.getRange());\n\n        // Check if onHit callback given, and pass it to Missile\n        if (args.onHit && !spellComp.onHit) {\n            mComp.onHit = args.onHit;\n        }\n        else if (spellComp.onHit && !args.onHit) {\n            mComp.onHit = spellComp.onHit;\n        }\n        else if (spellComp.onHit && args.onHit) {\n            RG.err('SystemSpellEffect', 'processSpellMissile',\n                'onHit given in both SpellMissile and its args');\n        }\n\n        spellArrow.add(mComp);\n    }\n\n    /* Processes area-affecting spell effects. */\n    public processSpellArea(ent, spellComp) {\n        // const spellComp = ent.get('SpellArea');\n        const args = spellComp.getArgs();\n        const spell = args.spell;\n        const range = spell.getRange();\n        const [x0, y0] = [args.src.getX(), args.src.getY()];\n        const map = args.src.getLevel().getMap();\n        const coord = Geometry.getBoxAround(x0, y0, range);\n\n        coord.forEach(xy => {\n            if (map.hasXY(xy[0], xy[1])) {\n                const cell = map.getCell(xy[0], xy[1]);\n                if (cell.hasActors()) {\n                    const actors = cell.getActors();\n                    for (let i = 0; i < actors.length; i++) {\n                        this._addDamageToActor(actors[i], args);\n                        if (spell.onCellCallback) {\n                            spell.onCellCallback(cell);\n                        }\n                        const name = actors[i].getName();\n                        RG.gameMsg({cell: actors[i].getCell(),\n                            msg: `${name} is hit by ${spell.getName()}`});\n                    }\n\n                }\n            }\n        });\n\n        // Create animation\n        const animArgs = {\n            range, cX: x0, cY: y0,\n            className: RG.getDmgClassName(args.damageType),\n            level: ent.getLevel()\n        };\n        const animComp = new Component.Animation(animArgs);\n        ent.add(animComp);\n    }\n\n    /* Used for spell cast on self (or spells not requiring any targets). */\n    public processSpellSelf(ent, spellComp) {\n        const args = spellComp.getArgs();\n        if (typeof args.callback === 'function') {\n            args.callback();\n        }\n        else {\n            let msg = 'args.callback must be a function. ';\n            msg += 'Got args: ' + JSON.stringify(args);\n            RG.err('SystemSpellEffect', 'processSpellSelf', msg);\n        }\n        addSingleCellAnim(ent, args, ent.getXY());\n    }\n\n    public _addDamageToActor(actor, args) {\n        const dmg = new Component.Damage();\n        dmg.setSource(args.src);\n        dmg.setDamageType(args.damageType);\n        dmg.setDamage(args.damage);\n        dmg.setDamageCateg(RG.DMG.MAGIC);\n        dmg.setWeapon(args.spell);\n        actor.add(dmg);\n    }\n}\n\nfunction addSingleCellAnim(ent, args, xy) {\n    let className = RG.getDmgClassName(args.damageType);\n    if (!className) {className = RG.getDmgClassName(RG.DMG.MAGIC);}\n\n    const animArgs = {\n        cell: true,\n        coord: [xy],\n        className,\n        level: ent.getLevel()\n    };\n    const animComp = new Component.Animation(animArgs);\n    ent.add(animComp);\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport * as Component from '../component';\n\n/* System for spirit binding actions. Note: SpiritBind component is added to the\n * gem always. The action performer (binder) and target entity (item/actor) are\n * added to the component. */\nexport class SystemSpiritBind extends SystemBase {\n    constructor(compTypes, pool?) {\n        super(RG.SYS.SPIRIT, compTypes, pool);\n        this.compTypesAny = true;\n    }\n\n    public updateEntity(ent) {\n        if (ent.has('SpiritBind')) {\n            this._doSpiritBind(ent);\n        }\n    }\n\n    /* Called when spirit bind is attempted by a binder. */\n    public _doSpiritBind(ent) {\n        const bindComp = ent.get('SpiritBind');\n        const binder = bindComp.getBinder();\n        const bName = binder.getName();\n        const targetCell = bindComp.getTarget();\n\n        if (!ent.hasSpirit()) {\n            const spirits = targetCell.getPropType('spirit');\n            // TODO add some kind of power checks, binding should not always\n            // succeed ie. weak binder (and gem) vs strong spirit\n            if (spirits.length > 0) {\n                const spirit = spirits[0];\n                spirit.get('Action').disable(); // Trapped spirit cannot act\n                const level = spirit.getLevel();\n                level.removeActor(spirit);\n                ent.setSpirit(spirit);\n\n                const msg = `${spirit.getName()} was bound to gem by ${bName}`;\n                RG.gameMsg({cell: targetCell, msg});\n            }\n            else {\n                const msg = 'There are no spirits to capture there!';\n                RG.gameMsg({cell: targetCell, msg});\n            }\n        }\n        else if (targetCell.hasItems()) {\n            if (binder.has('SpiritItemCrafter')) {\n                const topItem = targetCell.getItems()[0];\n                const iName = topItem.getName();\n                if (!topItem.has('GemBound')) {\n                    const gemBindComp = new Component.GemBound();\n                    const boundGem = binder.getInvEq().removeAndGetItem(ent);\n                    gemBindComp.setGem(boundGem);\n                    topItem.add(gemBindComp);\n\n                    const gemName = ent.getName();\n                    const msg = `${gemName} was bound to ${iName} by ${bName}`;\n                    RG.gameMsg({cell: targetCell, msg});\n                }\n                else {\n                    const msg = `${iName} has already a gem bound to it.`;\n                    RG.gameMsg({cell: targetCell, msg});\n                }\n            }\n            else {\n                const msg = `${bName} cannot bind gems to items.`;\n                RG.gameMsg({cell: targetCell, msg});\n            }\n        }\n\n        ent.remove('SpiritBind');\n\n    }\n}\n","\nimport RG from '../rg';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport {Entity} from '../entity';\nimport * as Component from '../component';\n\nconst POOL = EventPool.getPool();\n\ntype CompEntry = [number, Entity];\n\n/* System which handles time-based effects like poisoning etc. It also handles\n * expiration of effects. This is a special system because its updates are\n * scheduled by the scheduler to guarantee a specific execution interval. */\nexport class SystemTimeEffects extends SystemBase {\n\n    private _dtable: {[key: string]: (ent) => void};\n    private _expiredEffects: CompEntry[];\n\n    constructor(compTypes, pool?) {\n        super(RG.SYS.TIME_EFFECTS, compTypes, pool);\n        this.compTypesAny = true;\n        this._dtable = {};\n        this._expiredEffects = [];\n\n        this._dtable.Poison = this._applyPoison.bind(this);\n        this._dtable.Fading = this._applyFading.bind(this);\n        this._dtable.Heat = this._applyHeat.bind(this);\n        this._dtable.Coldness = this._applyColdness.bind(this);\n        this._dtable.DirectDamage = this._applyDirectDamage.bind(this);\n        this._dtable.RegenEffect = this._applyRegenEffect.bind(this);\n    }\n\n    // Dispatch table used to call a handler function for each component\n\n    public update(): void {\n        for (const e in this.entities) {\n            if (!e) {continue;}\n            const ent = this.entities[e];\n\n            // Process timed effects like poison etc.\n            for (let i = 0; i < this.compTypes.length; i++) {\n                if (this.compTypes[i] !== 'Expiration') {\n                    if (ent.has(this.compTypes[i])) {\n                        // Call dispatch table function\n                        this._dtable[this.compTypes[i]](ent);\n                    }\n                }\n            }\n            // Process expiration effects/duration of Expiration itself\n            if (ent.has('Expiration')) {this._decreaseDuration(ent);}\n        }\n\n        // Remove expired effects (mutates this.entities, so done outside for)\n        // Removes Expiration, as well as comps like Poison/Stun/Disease etc.\n        for (let j = 0; j < this._expiredEffects.length; j++) {\n            const compID = this._expiredEffects[j][0];\n            const entRem = this._expiredEffects[j][1];\n            entRem.remove(compID);\n        }\n        this._expiredEffects = [];\n    }\n\n    /* Decreases the remaining duration in the component by one.*/\n    public _decreaseDuration(ent: Entity): void {\n        const expirComps = ent.getList('Expiration');\n        expirComps.forEach(tEff => {\n            tEff.decrDuration();\n\n            // Remove Expiration only if other components are removed\n            if (!tEff.hasEffects()) {\n                this._expiredEffects.push([tEff.getID(), ent]);\n            }\n        });\n    }\n\n\n    /* Applies the poison effect to the entity.*/\n    public _applyPoison(ent: Entity): void {\n        const poisonList = ent.getList('Poison');\n        poisonList.forEach(poison => {\n\n            if (ent.get('Health').isDead()) {\n                this._expiredEffects.push([poison.getID(), ent]);\n                if (ent.has('Expiration')) {\n                    const te = ent.get('Expiration');\n                    if (te.hasEffect(poison)) {\n                        te.removeEffect(poison);\n                    }\n                }\n            }\n            else if (RG.isSuccess(poison.getProb())) {\n                const poisonDmg = poison.rollDamage();\n                const dmgComp = new Component.Damage(poisonDmg,\n                    RG.DMG.POISON);\n                dmgComp.setSource(poison.getSource());\n                ent.add(dmgComp);\n            }\n        });\n    }\n\n    /* Applies direct damage effect to given entity. */\n    public _applyDirectDamage(ent: Entity): void {\n        const ddList = ent.getList('DirectDamage');\n        ddList.forEach(ddComp => {\n\n            if (ent.get('Health').isDead()) {\n                this._expiredEffects.push([ddComp.getID(), ent]);\n                if (ent.has('Expiration')) {\n                    const te = ent.get('Expiration');\n                    if (te.hasEffect(ddComp)) {\n                        te.removeEffect(ddComp);\n                    }\n                }\n            }\n            else if (RG.isSuccess(ddComp.getProb())) {\n                const ddCompDmg = ddComp.getDamage();\n                const dmgComp = new Component.Damage(ddCompDmg,\n                    ddComp.getDamageType());\n                dmgComp.setDamageCateg(ddComp.getDamageCateg());\n                dmgComp.setSource(ddComp.getSource());\n                ent.add(dmgComp);\n            }\n        });\n    }\n\n    /* Decreases duration in Fading comp, then remove the entity if duration is\n     * 0. */\n    public _applyFading(ent): void {\n        const fadingComp = ent.get('Fading');\n        fadingComp.decrDuration();\n        if (fadingComp.getDuration() <= 0) {\n            if (RG.isActor(ent)) {\n                const cell = ent.getCell();\n                const level = ent.getLevel();\n                if (level.removeActor(ent)) {\n                    POOL.emitEvent(RG.EVT_ACTOR_KILLED, {actor: ent});\n                    const msg = `${ent.getName()} disappears.`;\n                    RG.gameMsg({cell, msg});\n                }\n                else {\n                    const json = JSON.stringify(ent);\n                    RG.err('System.TimeEffects', '_applyFading',\n                        `Could not remove actor from level: ${json}`);\n                }\n            }\n            else {\n                RG.err('System.TimeEffects', '_applyFading',\n                    'Fading not handled for non-actors yet.');\n            }\n            ent.remove(fadingComp);\n        }\n    }\n\n    public _applyHeat(ent): void {\n        if (ent.has('Coldness')) {\n            const cell = ent.getCell();\n            ent.removeAll('Coldness');\n            const msg = `Thanks to heat, ${ent.getName()} stops shivering`;\n            RG.gameMsg({cell, msg});\n        }\n        ent.removeAll('Heat');\n    }\n\n    // TODO\n    public _applyColdness(ent: Entity): void {\n        if (ent.has('BodyTemp')) {\n            const tempComp = ent.get('BodyTemp');\n            tempComp.decr();\n            if (tempComp.isFrozen()) {\n                const dmgComp = new Component.Damage(1, RG.DMG.COLD);\n                ent.add(dmgComp);\n            }\n        }\n    }\n\n    public _applyRegenEffect(ent: Entity): void {\n        const regenEffects = ent.getList('RegenEffect');\n        regenEffects.forEach(effComp => {\n            let shouldRemove = true;\n            if (effComp.getHP() > 0) {\n                const waitHP = effComp.getWaitHP();\n                if (waitHP === 0) {\n                    const health = ent.get('Health');\n                    if (health) {\n                        health.addHP(effComp.getHP());\n                        if (health.getHP() < health.getMaxHP()) {\n                            shouldRemove = false;\n                        }\n                    }\n                    effComp.setWaitHP(effComp.getMaxWaitHP());\n                }\n                else {\n                    effComp.setWaitHP(waitHP - 1);\n                }\n            }\n            if (effComp.getPP() > 0) {\n                const waitPP = effComp.getWaitPP();\n                if (waitPP === 0) {\n                    const power = ent.get('SpellPower');\n                    if (power) {\n                        power.addPP(effComp.getPP());\n                        if (power.getPP() < power.getMaxPP()) {\n                            shouldRemove = false;\n                        }\n                    }\n                    effComp.setWaitPP(effComp.getMaxWaitPP());\n                }\n                else {\n                    effComp.setWaitPP(waitPP - 1);\n                }\n            }\n            if (shouldRemove) {\n                ent.remove(effComp);\n            }\n        });\n    }\n\n\n    /* Used for debug printing.*/\n    public printMatchedType(ent: Entity): void {\n        for (let i = 0; i < this.compTypes.length; i++) {\n            if (ent.has(this.compTypes[i])) {\n                RG.debug(this.compTypes[i], 'Has component');\n            }\n        }\n    }\n\n}\n","\nimport RG from '../rg';\nimport * as Component from '../component';\nimport {SystemBase} from './system.base';\nimport {EventPool} from '../eventpool';\nimport {MapGenerator} from '../map.generator';\nimport {Random} from '../random';\n\nconst RNG = Random.getRNG();\n\n/* Handles WeatherEffect components and has handler functions for\n * different types of weather effects. */\nexport class SystemWeather extends SystemBase {\n\n    private _effTable: {[key: string]: (ent, comp) => void};\n\n    constructor(compTypes, pool?: EventPool) {\n        super(RG.SYS.WEATHER, compTypes, pool);\n\n        this._effTable = {\n            snowStorm: this.handleSnowStorm = this.handleSnowStorm.bind(this),\n            warm: this.handleMeltSnow = this.handleMeltSnow.bind(this)\n        };\n    }\n\n    public updateEntity(ent): void {\n        if (ent.has('WeatherEffect')) {\n            const eff = ent.get('WeatherEffect');\n            const effName = eff.getEffectType();\n            if (this._effTable[effName]) {\n                this._effTable[effName](ent, eff);\n            }\n            ent.removeAll('WeatherEffect');\n        }\n    }\n\n    protected handleSnowStorm(ent, comp): void {\n        const level = ent.getLevel();\n        const map = level.getMap();\n        MapGenerator.addRandomSnow(map, 0.1);\n    }\n\n    /* Melts down the snow located in the level with the entity. */\n    protected handleMeltSnow(ent, comp): void {\n        const ratio = 0.10;\n        const map = ent.getLevel().getMap();\n        const snowCells = map.getFree().filter(c => c.getBaseElem().has('Snowy'));\n        snowCells.forEach(cell => {\n            const meltSnow = RNG.getUniform();\n            if (meltSnow < ratio) {\n                const baseType = cell.getBaseElem().getType();\n                const newElem = MapGenerator.snowMeltMap[baseType];\n                cell.setBaseElem(newElem);\n            }\n        });\n    }\n\n}\n","\nimport {FactoryGame} from '../src/factory.game';\nimport {verifySaveData} from '../src/verify';\n\nimport {CreateGameWorker, GameMessage, MESSAGE_TYPE} from './types';\n\nconst ctx: CreateGameWorker = self as any;\n\nfunction progress(msg) {\n    const gameMsg: GameMessage = {\n        type: MESSAGE_TYPE.PROGRESS,\n        progress: msg\n    };\n    ctx.postMessage(gameMsg);\n}\n\nctx.addEventListener('message', function(e) {\n    try {\n        const gameConf = e.data[0];\n        const gameFactory = new FactoryGame();\n        gameFactory.setCallback('progress', progress);\n        const game = gameFactory.createNewGame(gameConf);\n        const json = game.toJSON();\n        verifySaveData(json);\n\n        const msg: GameMessage = {\n            type: MESSAGE_TYPE.READY,\n            ready: true,\n            data: JSON.stringify(json)\n        };\n        ctx.postMessage(msg);\n    }\n    catch (e) {\n        const errorMsg: GameMessage = {\n            type: MESSAGE_TYPE.ERROR,\n            error: e.message\n        }\n        ctx.postMessage(errorMsg);\n    }\n});\n","\nimport RG from './rg';\n\nimport * as Component from './component';\nimport * as Time from './time';\nimport * as Verify from './verify';\nimport * as World from './world';\nimport {ActorClass} from './actor-class';\nimport {ActorsData} from '../data/actors';\nimport {DebugGame} from '../data/debug-game';\nimport {Disposition} from './disposition';\nimport {Entity} from './entity';\nimport {EventPool} from '../src/eventpool';\nimport {FactoryBase} from './factory';\nimport {FactoryItem} from './factory.items';\nimport {FactoryWorld} from './factory.world';\nimport {Factory} from './factory';\nimport {FromJSON} from './game.fromjson';\nimport {GameMain} from './game';\nimport {Geometry} from './geometry';\nimport {Builder} from './builder';\nimport {OWMap, OWMapConf} from './overworld.map';\nimport {ObjectShell} from './objectshellparser';\nimport {OverWorld, CoordMap} from './overworld';\nimport {Random} from './random';\nimport {TerritoryMap} from '../data/territory-map';\nimport {Territory} from './territory';\nimport {WorldConf} from './world.creator';\nimport {Level} from './level';\n\nimport {IFactoryGameConf} from './interfaces';\n\nconst POOL = EventPool.getPool();\nconst RNG = Random.getRNG();\n\n/* Player stats based on user selection.*/\nconst confPlayerStats = {\n    Weak: {att: 1, def: 1, prot: 1, hp: 15},\n    Medium: {att: 2, def: 4, prot: 2, hp: 25},\n    Strong: {att: 5, def: 6, prot: 3, hp: 40},\n    Inhuman: {att: 10, def: 10, prot: 4, hp: 80}\n};\n\n/* Object for creating the top-level game object. GUI should only use this\n * factory when creating a new game. For restoring a game, see GameSave.\n */\nexport const FactoryGame = function() {\n    FactoryBase.call(this);\n    this._verif = new Verify.Conf('Factory.Game');\n    this._parser = ObjectShell.getParser();\n    this.presetLevels = {};\n    this.callbacks = {};\n};\nRG.extend2(FactoryGame, FactoryBase);\n\n/* Restores a game from JSON representation. */\nFactoryGame.prototype.restoreGame = function(json) {\n    const fromJSON = new FromJSON();\n    const game = new GameMain();\n    return fromJSON.createGame(game, json);\n};\n\n/* Creates the game based on the selection. Main method that you want to\n * call. */\nFactoryGame.prototype.createNewGame = function(conf: IFactoryGameConf) {\n    this._verif.verifyConf('createNewGame', conf,\n        ['sqrPerItem', 'sqrPerActor', 'playMode']);\n\n    const game = new GameMain();\n    if (Number.isInteger(conf.seed)) {\n        const rng = new Random(conf.seed);\n        game.setRNG(rng);\n    }\n    const player = this.createPlayerUnlessLoaded(conf);\n    this.createPlayerRegenEvents(game, player);\n\n    switch (conf.playMode) {\n        case 'Arena':\n            return this.createArenaDebugGame(conf, game, player);\n        case 'Battle':\n            return this.createDebugBattle(conf, game, player);\n        case 'Creator':\n            return this.createWorldWithCreator(conf, game, player);\n        case 'World':\n            return this.createFullWorld(conf, game, player);\n        case 'OverWorld':\n            return this.createOverWorldGame(conf, game, player);\n        case 'Quests':\n            return this.createQuestsDebugGame(conf, game, player);\n        default:\n            return this.createEmptyGame(conf, game, player);\n    }\n};\n\n/* This is used mainly with the level Editor, to play test the created\n * levels with a player. */\nFactoryGame.prototype.createEmptyGame = function(obj, game, player) {\n    // Add given levels to the game\n    if (obj.levels) {\n        obj.levels.forEach(level => {\n            const extras = level.getExtras();\n            game.addLevel(level);\n\n            // If startpoint given, use it\n            if (extras.startPoint) {\n                const [sx, sy] = extras.startPoint;\n                level.addActor(player, sx, sy);\n            }\n        });\n        game.addPlayer(player);\n    }\n    return game;\n};\n\n/* Creates a player actor and starting inventory unless a game has been\n * restored, and obj contains obj.loadedPlayer. */\nFactoryGame.prototype.createPlayerUnlessLoaded = function(obj) {\n    let player = obj.loadedPlayer;\n    if (RG.isNullOrUndef([player])) {\n        this._verif.verifyConf('createPlayerUnlessLoaded', obj,\n            ['playerLevel', 'playerRace', 'playerName']);\n        const expLevel = obj.playerLevel;\n        const pConf = confPlayerStats[expLevel];\n\n        player = this.createPlayer(obj.playerName, {\n            att: pConf.att, def: pConf.def, prot: pConf.prot\n        });\n\n        player.setType(obj.playerRace);\n        player.add(new Component.Health(pConf.hp));\n        this.addActorClass(obj, player);\n        player.add(new Component.Skills());\n        player.add(new Component.GameInfo());\n        player.add(new Component.BodyTemp());\n        player.add(new Component.Abilities());\n    }\n\n    if (!player.has('Hunger')) {\n        const hunger = new Component.Hunger(20000);\n        player.add(hunger);\n    }\n    else {\n        // Notify Hunger system only\n        const hunger = player.get('Hunger');\n        player.remove('Hunger');\n        player.add(hunger);\n    }\n\n    // Add to the CSS class table\n    RG.addCellStyle(RG.TYPE_ACTOR, player.getName(), 'cell-actor-player');\n    if (obj.playerName === 'Emilia') {\n        RG.addCharStyle(RG.TYPE_ACTOR, player.getName(), 'E');\n    }\n    else if (obj.playerName === 'Oliver') {\n        RG.addCharStyle(RG.TYPE_ACTOR, player.getName(), 'O');\n    }\n    return player;\n};\n\n/* Can be used to add player HP/PP regeneration events into the\n * scheduler of the game engine. */\nFactoryGame.prototype.createPlayerRegenEvents = function(game, player) {\n    // Add HP regeneration\n    const regenPlayer = new Time.RegenEvent(player,\n        RG.PLAYER_HP_REGEN_PERIOD * RG.ACTION_DUR);\n    game.addEvent(regenPlayer);\n\n    // Add PP regeneration (if needed)\n    if (player.has('SpellPower')) {\n        const regenPlayerPP = new Time.RegenPPEvent(player,\n            RG.PLAYER_PP_REGEN_PERIOD * RG.ACTION_DUR);\n        game.addEvent(regenPlayerPP);\n    }\n};\n\n/* Adds the actor class to player, and creates starting equipment. */\nFactoryGame.prototype.addActorClass = function(obj, player) {\n    if (!obj.playerClass) {return;}\n    if (ActorClass.hasOwnProperty(obj.playerClass)) {\n        const actorClassComp = new Component.ActorClass();\n        const actorClass = ActorClass.create(obj.playerClass, player);\n        actorClassComp.setClassName(obj.playerClass);\n        actorClassComp.setActorClass(actorClass);\n        player.add(actorClassComp);\n\n        const name = obj.playerClass;\n        const items = ActorClass.getStartingItems(name);\n        const eqs = ActorClass.getEquipment(name);\n\n        // Create starting inventory\n        FactoryItem.addItemsToActor(player, items);\n        FactoryItem.equipItemsToActor(player, eqs);\n\n        actorClass.setStartingStats();\n        actorClass.advanceLevel(); // Advance to level 1\n    }\n    else {\n        RG.err('Factory.Game', 'addActorClass',\n            `${obj.playerClass} not found in ActorClass.`);\n    }\n};\n\nFactoryGame.prototype.setCallback = function(name, cb) {\n    this.callbacks[name] = cb;\n};\n\nFactoryGame.prototype.createOverWorldGame = function(obj, game, player) {\n    const owConf: OWMapConf = FactoryGame.getOwConf(1, obj);\n    const midX = Math.floor(owConf.nLevelsX / 2);\n    const playerX = midX;\n    const playerY = owConf.nLevelsY - 1;\n    owConf.playerX = playerX;\n    owConf.playerY = playerY;\n    owConf.playerRace = obj.playerRace;\n    owConf.createTerritory = true;\n\n    const startTime = new Date().getTime();\n\n    this.progress('Creating Overworld Tile Map...');\n    const overworld = OWMap.createOverWorld(owConf);\n    this.progress('DONE');\n\n    if (!overworld._terrMap) {\n        this.progress('Generating territory for clans/races...');\n        const terrMap = this.createTerritoryMap(overworld, obj.playerRace,\n            playerX, playerY);\n        overworld.setTerrMap(terrMap);\n        this.progress('DONE');\n    }\n\n    this.progress('Creating Overworld Level Map...');\n    const worldAndConf = OverWorld.createOverWorldLevel(\n      overworld, owConf);\n    const [worldLevel, worldConf] = worldAndConf;\n    this.progress('DONE');\n\n    this.progress('Mapping settlements into territory areas..');\n    this.mapZonesToTerritoryMap(overworld.getTerrMap(), worldConf);\n    this.progress('DONE');\n\n    this.progress('Splitting Overworld Level Map into AreaTiles...');\n    const splitLevels = Builder.splitLevel(worldLevel, owConf);\n    this.progress('DONE');\n\n    this.progress('Creating and connectting World.Area tiles...');\n    const worldArea = new World.Area('Ravendark', owConf.nLevelsX,\n        owConf.nLevelsY, 100, 100, splitLevels);\n    worldArea.connectTiles();\n    this.progress('DONE');\n\n    const factWorld = new FactoryWorld();\n    factWorld.setOverWorld(overworld);\n    factWorld.setGlobalConf(obj);\n    game.setGlobalConf(obj);\n    factWorld.setPresetLevels({Realm: splitLevels});\n\n    worldConf.createAllZones = false;\n    this.progress('Creating places and local zones...');\n    const playerLevel = splitLevels[playerX][playerY];\n    this.createPlayerHome(worldConf, player, playerLevel, playerX, playerY);\n    this.createAreaLevelConstraints(worldConf, overworld.getTerrMap());\n    const world = factWorld.createWorld(worldConf);\n    game.addPlace(world);\n    overworld.clearSubLevels();\n    game.setOverWorld(overworld);\n    game.setEnableChunkUnload(true);\n    this.progress('DONE');\n\n    this.progress('Adding player to the game...');\n\n    this.placePlayer(player, playerLevel);\n    POOL.emitEvent(RG.EVT_TILE_CHANGED, {actor: player,\n        target: playerLevel});\n\n    player.setFOVRange(RG.PLAYER_FOV_RANGE);\n    game.addPlayer(player); // Player already placed to level\n    this.progress('DONE');\n\n    const endTime = new Date().getTime();\n    const totalDur = endTime - startTime;\n    this.progress('World generation took ' + totalDur + ' ms.');\n    // RG.Verify.verifyStairsConnections(game, 'Factory.Game');\n    // this.progress('Stairs connections verified');\n    return game;\n};\n\nFactoryGame.prototype.progress = function(msg) {\n    const timeNow = new Date().getTime();\n    let durSec = 0;\n    if (this.timePrev) {\n        durSec = (timeNow - this.timePrev) / 1000;\n    }\n    this.timePrev = timeNow;\n    if (this.callbacks.progress) {\n        this.callbacks.progress(msg);\n    }\n    if (msg === 'DONE') {\n        RG.log(`${this.prevMsg} - Time: ${durSec} sec`);\n    }\n    this.prevMsg = msg;\n};\n\n/* Places player into a free cell surrounded by other free cells. */\nFactoryGame.prototype.placePlayer = function(player, level) {\n    const freeCells = level.getMap().getFree();\n    const freeLUT = {};\n    freeCells.forEach(c => {\n        freeLUT[c.getKeyXY()] = true;\n    });\n\n    let cell = null;\n    let found = false;\n    let watchdog = 1000;\n    const bSize = 2;\n    const minFreeCells = ((2 * bSize + 1) ** 2 - 1);\n\n    while (!found) {\n        cell = RNG.arrayGetRand(freeCells);\n        const [x, y] = cell.getXY();\n        const box = Geometry.getBoxAround(x, y, bSize);\n        if (box.length === minFreeCells) {\n            found = true;\n        }\n        for (let i = 0; i < box.length; i++) {\n            const [cx, cy] = box[i];\n            found = found && freeLUT[cx + ',' + cy];\n        }\n\n        if (--watchdog <= 0) {\n            RG.log('Timeout reached');\n            break;\n        }\n    }\n\n    if (found) {\n        level.addActor(player, cell.getX(), cell.getY());\n    }\n    else {\n        level.addActorToFreeCell(player);\n    }\n};\n\nFactoryGame.prototype.createTerritoryMap = function(\n    ow, playerRace, playerX, playerY) {\n    return TerritoryMap.create(ow, playerRace, [playerX, playerY]);\n};\n\n/* Matches each zone with territory map, and adds some generation\n * constraints.\n */\nFactoryGame.prototype.mapZonesToTerritoryMap = function(terrMap, worldConf) {\n    const uniqueActors = ActorsData.filter(shell => shell.base === 'UniqueBase');\n    const uniqueCreated = {};\n    let uniquesAdded = 0;\n\n    const disposition = this.getDisposition();\n\n    const terrMapXY = terrMap.getMap();\n    const citiesConf = worldConf.area[0].city;\n    citiesConf.forEach(cityConf => {\n        const {owX, owY} = cityConf;\n        const char = terrMapXY[owX][owY];\n        let name = terrMap.getName(char);\n        let constrActor = null;\n\n        if (name) {\n            constrActor = [\n                {op: 'eq', prop: 'type', value: [name]},\n                {op: 'neq', prop: 'base', value: ['WinterBeingBase']}\n            ];\n            if (name === 'winterbeing') {\n                constrActor = {\n                    op: 'eq', prop: 'base', value: ['WinterBeingBase']\n                };\n            }\n\n            // Possibly create the unique actor\n            if (RG.isSuccess(0.07)) {\n                const uniquesThisType = uniqueActors.filter(obj => (\n                    obj.type === name\n                ));\n                if (uniquesThisType.length > 0) {\n                    const randUnique = RNG.arrayGetRand(uniquesThisType);\n                    if (!uniqueCreated.hasOwnProperty(randUnique.name)) {\n                        const actorCreate = {name: randUnique.name, nLevel: 0};\n\n                        let createConf = cityConf.quarter[0].create;\n                        if (!createConf) {createConf = {};}\n                        if (!createConf.actor) {createConf.actor = [];}\n                        createConf.actor.push(actorCreate);\n\n                        uniqueCreated[randUnique.name] = randUnique;\n                        cityConf.quarter[0].create = createConf;\n                        console.log('Added UNIQ', randUnique.name, 'to',\n                            cityConf);\n                        ++uniquesAdded;\n                    }\n                }\n            }\n\n        }\n        else {\n            // Mixed city, obtain values from area tile influence\n            const [aX, aY] = this.getAreaXYFromOWTileXY(owX, owY);\n            const weights = this.getConstrWeightsForAreaXY(aX, aY, terrMap);\n            const types = Object.keys(weights);\n            const hasWinterBeings = weights.hasOwnProperty('winterbeing');\n\n            if (hasWinterBeings) {\n                constrActor = {\n                    op: 'eq', prop: 'base', value: ['WinterBeingBase']\n                };\n            }\n            else if (types.length > 0) {\n                name = RNG.getWeighted(weights);\n                constrActor = [\n                    {op: 'eq', prop: 'type', value: [name]},\n                    {op: 'neq', prop: 'base', value: ['WinterBeingBase']}\n                ];\n            }\n            else if (types.length === 0) {\n                RG.log('factory.game.js', terrMap.mapToString());\n                const owStr = `owX: ${owX}, owY: ${owY}`;\n                RG.err('FactoryGame', 'mapZonesToTerritoryMap',\n                    `No values for AreaTile ${aX},${aY}, ${owStr} found`);\n            }\n        }\n\n        if (!cityConf.constraint) {cityConf.constraint = {};}\n        cityConf.constraint.actor = constrActor;\n        cityConf.constraint.disposition = disposition[name];\n\n        cityConf.quarter.forEach(qConf => {\n            if (!qConf.constraint) {qConf.constraint = {};}\n            qConf.constraint.actor = constrActor;\n            qConf.constraint.disposition = disposition[name];\n            if (cityConf.constraint.cellsAround) {\n                qConf.constraint.cellsAround = cityConf.constraint.cellsAround;\n            }\n        });\n    });\n\n    console.log('Factory.Game uniques added', uniquesAdded);\n};\n\nFactoryGame.prototype.getDisposition = function() {\n    const dispos = new Disposition(RG.ALL_RACES);\n    dispos.randomize();\n    return dispos.getTable();\n};\n\nFactoryGame.prototype.getAreaXYFromOWTileXY = function(owX, owY) {\n    const coordMap = new OverWorld.CoordMap({xMap: 10, yMap: 10});\n    return coordMap.getAreaXYFromOWTileXY(owX, owY);\n};\n\n/* Creates the starting home village for the player. */\nFactoryGame.prototype.createPlayerHome = function(\n    worldConf, player, level, playerX, playerY\n) {\n    let cell = level.getFreeRandCell();\n    while (cell.hasConnection()) {\n        cell = level.getFreeRandCell();\n    }\n\n    const homeConf = {\n        name: 'Home town of ' + player.getName(),\n        x: playerX, y: playerY,\n        levelX: cell.getX(), levelY: cell.getY(),\n        nQuarters: 1,\n        groupType: 'village',\n        friendly: true,\n        constraint: {\n            actor: [\n                {op: 'eq', prop: 'type', value: [player.getType()]},\n                {op: 'neq', prop: 'base', value: ['WinterBeingBase']}\n            ],\n            shop: [\n                {op: '<=', prop: 'value', value: 50}\n            ]\n        },\n        quarter: [{\n            name: 'Square',\n            nLevels: 1,\n            entranceLevel: 0,\n            nShops: 1\n        }]\n    };\n\n    console.log('Hometown located @ ', cell.getX(), cell.getY());\n    worldConf.area[0].city.push(homeConf);\n};\n\nFactoryGame.prototype.createAreaLevelConstraints = function(\n    worldConf, terrMap: Territory\n) {\n    const areaConf = worldConf.area[0];\n    const constraints = {};\n    for (let x = 0; x < areaConf.maxX; x++) {\n        for (let y = 0; y < areaConf.maxY; y++) {\n            const weights = this.getConstrWeightsForAreaXY(x, y, terrMap);\n            const types = Object.keys(weights);\n            types.push('animal');\n            constraints[x + ',' + y] = {\n                actor: {op: 'eq', prop: 'type', value: types}\n            };\n\n            if (weights.hasOwnProperty('winterbeing')) {\n                constraints[x + ',' + y].actor =\n                    {op: 'eq', prop: 'base', value: 'WinterBeingBase'};\n            }\n        }\n    }\n    areaConf.constraint = constraints;\n};\n\n/* Given x,y for AreaTile, finds all rivals occupying at least one ow tile\n * tile that AreaTile, and returns them as array. */\nFactoryGame.prototype.getConstrWeightsForAreaXY = function(aX, aY, terrMap) {\n    const terrMapXY = terrMap.getMap();\n    const coordMap = new CoordMap({xMap: 10, yMap: 10});\n\n    const bbox = coordMap.getOWTileBboxFromAreaTileXY(aX, aY);\n    const cells = Geometry.getCellsInBbox(terrMapXY, bbox);\n    const hist = Geometry.histArrayVals(cells);\n    let types = Object.keys(hist);\n    types = types.filter(type => (type !== '#' && type !== '.'));\n\n    const weights = {};\n    types.forEach(typeChar => {\n        const actualType = terrMap.getName(typeChar);\n        weights[actualType] = hist[typeChar];\n    });\n    // types = types.map(typeChar => terrMap.getName(typeChar));\n    return weights;\n};\n\nFactoryGame.prototype.createWorldWithCreator = function(obj, game, player) {\n    const creator = new WorldConf();\n\n    const conf = {name: 'World', worldSize: 'Small',\n        areaSize: 'Small'\n    };\n\n    obj.world = WorldConf.createWorldConf(conf);\n    return this.createFullWorld(obj, game, player);\n};\n\nFactoryGame.prototype.createFullWorld = function(obj, game, player) {\n    const worldConf = obj.world;\n    this.processPresetLevels(worldConf);\n    if (!worldConf) {\n        RG.err('Factory', 'createFullWorld',\n            'obj.world must exist!');\n        return null;\n    }\n    worldConf.levelSize = obj.levelSize;\n    const fact = new FactoryWorld();\n    fact.setGlobalConf(obj);\n    fact.setPresetLevels(this.presetLevels);\n\n    const world = fact.createWorld(worldConf);\n    const levels = world.getLevels();\n\n    let playerStart = {place: worldConf.name, x: 0, y: 0};\n    if (worldConf.playerStart) {\n        playerStart = worldConf.playerStart;\n    }\n\n    if (levels.length > 0) {\n        game.addPlace(world);\n        game.addPlayer(player, playerStart);\n        return game;\n    }\n    else {\n        RG.err('Factory', 'createFullWorld',\n            'There are no levels in the world!');\n        return null;\n    }\n};\n\n/* Creates all preset levels specified in the world configuration. */\nFactoryGame.prototype.processPresetLevels = function(conf) {\n    this.presetLevels = {};\n    if (conf.hasOwnProperty('presetLevels')) {\n        const keys = Object.keys(conf.presetLevels);\n        keys.forEach(name => {\n            this.presetLevels[name] =\n                this.createPresetLevels(conf.presetLevels[name]);\n            // Replace json with Map.Level\n            conf.presetLevels[name] = this.presetLevels[name];\n        });\n    }\n};\n\nFactoryGame.prototype.createPresetLevels = function(arr) {\n    const fromJSON = new FromJSON();\n    return arr.map(presetItem => {\n        // Return the item itself if it's already Map.Level\n        if (typeof presetItem.level.getID === 'function') {\n            return presetItem;\n        }\n\n        const level = fromJSON.restoreLevel(presetItem.level);\n        // Need to reset level + actors IDs for this game\n        if (level.getID() < RG.LEVEL_ID_ADD) {\n            level.setID(Level.createLevelID());\n        }\n        level.getActors().forEach(actor => {\n            if (actor.getID() < RG.ENTITY_ID_ADD) {\n                actor.setID(Entity.createEntityID());\n            }\n        });\n        level.getItems().forEach(item => {\n            if (item.getID() < RG.ENTITY_ID_ADD) {\n                item.setID(Entity.createEntityID());\n            }\n        });\n\n        // Reset cell explored status, because game-editor sets all cells as\n        // explored for viewing purposes\n        RG.setAllExplored(level, false);\n        return {\n            nLevel: presetItem.nLevel,\n            level\n        };\n    });\n};\n\n/* Can be used to create a short debugging game for testing.*/\nFactoryGame.prototype.createArenaDebugGame = function(obj, game, player) {\n    return new DebugGame(this, this._parser).createArena(obj, game, player);\n};\n\nFactoryGame.prototype.createQuestsDebugGame = function(obj, game, player) {\n    const dbgGame = new DebugGame(this, this._parser);\n    return dbgGame.createQuestsDebug(obj, game, player);\n};\n\nFactoryGame.prototype.createDebugBattle = function(obj, game, player) {\n    const arenaGame = new DebugGame(this, this._parser);\n    return arenaGame.createDebugBattle(obj, game, player);\n};\n\nFactoryGame.prototype.createOneDungeonAndBoss = function(obj, game, player) {\n    const arenaGame = new DebugGame(this, this._parser);\n    return arenaGame.createOneDungeonAndBoss(obj, game, player);\n};\n\n\nFactoryGame.getOwConf = function(mult = 1, obj: any = {}): OWMapConf {\n    const xMult = obj.xMult || 1;\n    const yMult = obj.yMult || 1;\n    const owConf = {\n        yFirst: false,\n        topToBottom: false,\n        // stopOnWall: 'random',\n        stopOnWall: true,\n        // nHWalls: 3,\n        nVWalls: [0.8],\n        owTilesX: xMult * mult * 40,\n        owTilesY: yMult * mult * 40,\n        worldX: xMult * mult * 400,\n        worldY: yMult * mult * 400,\n        nLevelsX: xMult * mult * 4,\n        nLevelsY: yMult * mult * 4,\n        nTilesX: xMult * mult * 4,\n        nTilesY: yMult * mult * 4\n    };\n    return owConf;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","/* Contains code for thief goal. */\n\nimport RG from './rg';\nimport {Goal, GoalStatus} from './goals';\nimport {Random} from './random';\nimport {Cell} from './map.cell';\nimport {Brain} from './brain';\nimport * as Component from './component';\n\ntype ItemBase = import('./item').ItemBase;\n\nconst {\n    GOAL_ACTIVE,\n    GOAL_COMPLETED} = GoalStatus;\nconst RNG = Random.getRNG();\n\n/* With this Goal, an actor can search a house for interesting features,\n * such as items to pick up. */\nexport class GoalSearchHouse extends Goal.Base {\n\n    public floorCells: Cell[];\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalSearchHouse');\n        const cell = actor.getCell();\n        if (cell.hasDoor()) {\n            this.door = cell.getXY();\n        }\n        this.subGoals = [];\n        this.searchTime = RNG.getUniformInt(20, 40);\n    }\n\n    public activate(): void {\n        this.status = GOAL_ACTIVE;\n        const seenCells: Cell[] = this.actor.getBrain().getSeenCells();\n        if (!this.floorCells || this.floorCells.length === 0) {\n            this.floorCells = seenCells.filter(c => (\n                c.getBaseElem().getType() === 'floorhouse'\n            ));\n        }\n\n        let nextGoal = ifItemFoundCreateGoal(this.actor, seenCells);\n        if (!nextGoal && this.floorCells.length > 0) {\n            const cell = RNG.arrayGetRand(this.floorCells);\n            nextGoal = new Goal.FollowPath(this.actor, cell.getXY());\n        }\n\n        if (this.searchTime <= 0) {\n            const actorCell = this.actor.getCell();\n            // Get out of the house\n            if (actorCell.hasDoor()) {\n                // Get out finally\n                const cells = Brain.getCellsAroundActor(this.actor);\n                let chosenCell = null;\n                cells.forEach(cell => {\n                    if (cell.getBaseElem().getType() !== 'floorhouse') {\n                        if (cell.isPassable()) {\n                            chosenCell = cell;\n                            return;\n                        }\n                    }\n                });\n\n                if (chosenCell) {\n                    Goal.moveActorTo(this.actor, chosenCell);\n                    this.status = GOAL_COMPLETED;\n                }\n                else {\n                    RG.warn('Goal.SearcHouse', 'activate',\n                        'Could not move out of the house');\n                }\n            }\n            else {\n                nextGoal = Goal.FollowPath(this.actor, actorCell.getXY());\n            }\n        }\n\n        if (nextGoal) {\n            this.addSubGoal(nextGoal);\n        }\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        --this.searchTime;\n        if (this.hasSubGoals()) {\n            this.status = this.processSubGoals();\n        }\n        else {\n            this.activate();\n            if (this.status !== GOAL_COMPLETED) {\n                this.status = this.processSubGoals();\n            }\n        }\n        return this.status;\n    }\n\n}\n\n/* This goal of thief makes an actor to find items, then sell them to a\n * shopkeeper. */\nexport class GoalThief extends Goal.Base {\n\n    constructor(actor) {\n        super(actor);\n        this.setType('GoalThief');\n        this.subGoals = [];\n        this.shopCooldown = 20;\n        this.doorCooldown = 25;\n        this.visitedDoors = {}; // Stores info about doors seen by thief\n        this.shops = {}; // Stores known shop location\n    }\n\n    public activate(): void {\n        this.status = GOAL_ACTIVE;\n        this.chooseThiefTask();\n    }\n\n    public process(): GoalStatus {\n        this.activateIfInactive();\n        --this.shopCooldown;\n        --this.doorCooldown;\n        if (this.isCompleted()) {\n            return GOAL_COMPLETED;\n        }\n        if (this.hasSubGoals()) {\n            this.status = this.processSubGoals();\n        }\n        else {\n            this.chooseThiefTask();\n            if (this.hasSubGoals()) {\n                this.status = this.processSubGoals();\n            }\n            else { // If we only sold item, go here\n                this.status = GOAL_COMPLETED;\n            }\n        }\n        return this.status;\n    }\n\n    public isInActiveShop() {\n        const cell = this.actor.getCell();\n        if (cell.hasShop()) {\n            const shop = cell.getShop();\n            if (!shop.isAbandoned()) {\n                this.shops[cell.getKeyXY()] = cell;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public tryToSellItem() {\n        const inventory = this.actor.getInvEq().getInventory();\n        const itemToSell: ItemBase = RNG.arrayGetRand(inventory.getItems());\n        const actorCell = this.actor.getCell();\n\n        if (itemToSell) {\n            const shopElem = actorCell.getPropType('shop')[0];\n            // const price = shopElem.getItemPriceForSelling(itemToSell);\n            const trans = new Component.Transaction();\n            trans.setArgs({item: itemToSell, seller: this.actor,\n                shop: shopElem, buyer: shopElem.getShopkeeper(),\n                count: itemToSell.getCount()});\n            this.actor.add(trans);\n        }\n        else {\n            RG.err('Goal.Thief', 'tryToSellItem',\n                `Null item for sale. Inv: ${JSON.stringify(inventory)}`);\n        }\n    }\n\n    public tryToGoToShopCell() {\n        let nextGoal = null;\n        const knownShopCells = Object.values(this.shops);\n        if (knownShopCells.length > 0) {\n            const shopCell = RG.arrayGetRand(knownShopCells);\n            return new Goal.FollowPath(this.actor, shopCell.getXY());\n        }\n        const seenCells = this.actor.getBrain().getSeenCells();\n        for (let i = 0; i < seenCells.length; i++) {\n            const cell = seenCells[i];\n            if (cell.hasShop()) {\n                nextGoal = new Goal.FollowPath(this.actor, cell.getXY());\n            }\n        }\n        if (!nextGoal) {\n            this.shopCooldown = 20;\n        }\n        return nextGoal;\n    }\n\n    public chooseThiefTask() {\n        const inventory = this.actor.getInvEq().getInventory();\n        const hasItems = !inventory.isEmpty();\n        let nextGoal = null;\n        const actorCell = this.actor.getCell();\n\n        if (hasItems && this.isInActiveShop()) {\n            this.tryToSellItem();\n            this.status = GOAL_COMPLETED;\n        }\n        else if (hasItems && this.shopCooldown <= 0) {\n            nextGoal = this.tryToGoToShopCell();\n        }\n        else {\n            const seenCells = this.actor.getBrain().getSeenCells();\n            const elemsCache = {};\n            nextGoal = ifItemFoundCreateGoal(this.actor, seenCells, elemsCache,\n                cell => cell.hasElements());\n\n            if (!nextGoal && !actorCell.hasDoor() && this.doorCooldown <= 0) {\n                // Else if a door is seen, go inside\n                Object.values(elemsCache).forEach((cell: Cell) => {\n                    if (cell.hasDoor()) {\n                        const xy = cell.getXY();\n                        const keyXY = cell.getKeyXY();\n                        if (!this.visitedDoors.hasOwnProperty(keyXY)) {\n                            this.doorCooldown = 25;\n                            nextGoal = new Goal.FollowPath(this.actor, xy);\n                            return;\n                        }\n                    }\n                });\n            }\n            else if (actorCell.hasDoor()) {\n                this.visitedDoors[actorCell.getKeyXY()] = actorCell.getXY();\n                if (this.thiefSeesHouse()) {\n                    nextGoal = new GoalSearchHouse(this.actor);\n                }\n            }\n\n            if (!nextGoal) {\n                // Need to find a house, so skulk around\n                // Goal.moveToRandomDir(this.actor);\n                nextGoal = new Goal.Explore(this.actor, 30);\n                nextGoal.setCallback(this.exploreCallback.bind(this));\n            }\n\n        }\n\n        if (nextGoal) {\n            this.addSubGoal(nextGoal);\n        }\n    }\n\n    /* Callback given to Goal.Explore for each x,y explored. */\n    public exploreCallback(x, y) {\n        const map = this.actor.getLevel().getMap();\n        if (map.hasXY(x, y)) {\n            const cell = map.getCell(x, y);\n            if (cell.hasShop()) {\n                this.shops[cell.getKeyXY()] = cell;\n            }\n        }\n    }\n\n    public thiefSeesHouse() {\n        const seenCells = this.actor.getBrain().getSeenCells();\n        const floorCells = seenCells.filter(c => (\n            c.getBaseElem().getType() === 'floorhouse'\n        ));\n        if (floorCells.length > 0) {return true;}\n        return false;\n    }\n\n}\nGoal.Thief = GoalThief;\n\nfunction ifItemFoundCreateGoal(actor, seenCells, cache?, cacheAcceptFunc?) {\n    let nextGoal = null;\n    for (let i = 0; i < seenCells.length; i++) {\n        const cell = seenCells[i];\n        if (cell.hasItems()) {\n            const item = cell.getItems()[0];\n            if (!item.has('Unpaid')) {\n                nextGoal = new Goal.GetItem(actor, item);\n                break;\n            }\n        }\n\n        // If cache given, try cache cells using cacheAcceptFunc as criteria\n        if (cache) {\n            if (cacheAcceptFunc(seenCells[i])) {\n                cache[cell.getKeyXY()] = cell;\n            }\n        }\n    }\n    return nextGoal;\n}\n","\nimport RG from './rg';\nimport * as Item from './item';\nimport {Equipment} from './equipment';\nimport {SentientActor} from './actor';\n\ntype AmmoOrMissile = Item.Missile | Item.Ammo;\n\n/* Object models inventory items and equipment on actor. This object handles\n * movement of items between inventory and equipment. */\nexport class Inventory {\n\n    public static equipAnyItem(actor: SentientActor, item: Item.ItemBase): void {\n        const inv: Inventory = actor.getInvEq();\n        if (!inv.hasItem(item)) {\n            inv.addItem(item);\n        }\n        inv.equipItem(item);\n    }\n\n\n    public _actor: SentientActor;\n    public _inv: Item.Container;\n    public _eq: Equipment;\n\n    constructor(actor) {\n        this._actor = actor;\n        this._inv = new Item.Container(actor);\n        this._eq = new Equipment(actor);\n    }\n\n    // Wrappers for container methods\n    public addItem(item): void {\n        this._inv.addItem(item);\n    }\n\n    public hasItem(item): boolean {\n        return this._inv.hasItem(item);\n    }\n\n    public removeItem(item): boolean {\n        return this._inv.removeItem(item);\n    }\n\n    public removeNItems(item, n): boolean {\n        return this._inv.removeNItems(item, n);\n    }\n\n    public getRemovedItem() {\n        return this._inv.getRemovedItem();\n    }\n\n    /* For using item inside the container. */\n    public useItem(item, obj): boolean {\n        if (this._inv.hasItem(item)) {\n            if (item.useItem) {\n                item.useItem(obj);\n                return true;\n            }\n        }\n        else {\n            RG.err('Inv.Inventory', 'useItem', 'Not in inventory, cannot use!');\n        }\n        return false;\n    }\n\n    /* Returns true if given item can be carried.*/\n    public canCarryItem(item): boolean {\n        const eqWeight = this._eq.getWeight();\n        const invWeight = this._inv.getWeight();\n        const newWeight = eqWeight + invWeight + item.getWeight();\n        const maxWeight = this._actor.getMaxWeight();\n        if (newWeight > maxWeight) {return false;}\n        return true;\n    }\n\n    /* Drops selected item to the actor's current location.*/\n    public dropItem(item): boolean {\n        if (this._inv.removeItem(item)) {\n            const level = this._actor.getLevel();\n            const droppedItem = this.getRemovedItem();\n            const [x, y] = this._actor.getXY();\n            if (level.addItem(droppedItem, x, y)) {\n                return true;\n            }\n            else {\n                this._inv.addItem(droppedItem);\n            }\n        }\n        return false;\n    }\n\n    public dropNItems(item, n: number): boolean {\n        if (this.removeNItems(item, n)) {\n            const level = this._actor.getLevel();\n            const droppedItem = this.getRemovedItem();\n            const [x, y] = this._actor.getXY();\n            if (level.addItem(droppedItem, x, y)) {\n                return true;\n            }\n            else {\n                this._inv.addItem(droppedItem);\n            }\n        }\n        return false;\n    }\n\n    /* Removes and item and returns it. */\n    public removeAndGetItem(item) {\n        if (this._inv.removeItem(item)) {\n            return this.getRemovedItem();\n        }\n        return null;\n    }\n\n    public getInventory() {\n        return this._inv;\n    }\n\n    public getEquipment() {\n        return this._eq;\n    }\n\n    /* Removes item from inventory and equips it.*/\n    public equipItem(item) {\n        if (this._inv.hasItem(item)) {\n            // If item has count > 2, can't use the same item ref\n            const eqItem = this._getItemToEquip(item);\n            if (RG.isNullOrUndef([eqItem])) {\n                RG.err('Inv.Inventory', 'equipItem',\n                    'equippedItem is null. Should not happen');\n                return false; // For suppressed errors\n            }\n\n            if (this._eq.equipItem(eqItem)) {\n                return true;\n            }\n            else {\n                this._inv.addItem(eqItem); // Failed, add back to inv\n            }\n        }\n        else {\n            RG.err('Inv.Inventory', 'equipItem',\n                'Cannot equip. Not in inventory.');\n        }\n        return false;\n    }\n\n    public _getItemToEquip(item) {\n        const res = this._inv.removeItem(item);\n        if (res) {\n            const rmvItem = this._inv.getRemovedItem();\n            // rmvItem.setID(item.getID());\n            return rmvItem;\n        }\n        return null;\n    }\n\n    /* Equips up to N items of given type. */\n    public equipNItems(item, n) {\n        if (this._inv.hasItem(item)) {\n            const res = this._inv.removeNItems(item, n);\n            if (res) {\n                const removedItem = this._inv.getRemovedItem();\n                if (this._eq.equipItem(removedItem)) {\n                    return true;\n                }\n                else {\n                    this._inv.addItem(removedItem);\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Unequips item and puts it back to inventory.*/\n    public unequipItem(slotType, n, slotNumber) {\n        if (RG.isNullOrUndef([slotType])) {\n            let msg = 'Some params null/undef: ';\n            msg += `type: |${slotType}| n: |${n}| number: |${slotNumber}|`;\n            RG.err('InvInventory', 'unequipItem', msg);\n        }\n        const eqItem = this._eq.getItem(slotType);\n        if (!RG.isNullOrUndef([eqItem])) {\n            if (this._eq.unequipItem(slotType, n, slotNumber)) {\n                const rmvItems = this._eq.getUnequipped(slotType, slotNumber);\n                if (rmvItems !== null) {\n                    this.addItem(rmvItems);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /* Unequips and returns N items. Doesn't add to inv.*/\n    public unequipAndGetItem(slotType, n, slotNumber) {\n        const eqItem = this._eq.getItem(slotType);\n        if (!RG.isNullOrUndef([eqItem])) {\n            if (this._eq.unequipItem(slotType, n)) {\n                return this._eq.getUnequipped(slotType, slotNumber);\n            }\n        }\n        return null;\n    }\n\n    public getWeapon() {\n        const item = this._eq.getItem('hand');\n        if (!RG.isNullOrUndef([item])) {return item;}\n        return null;\n    }\n\n    public getMissileWeapon(): Item.MissileWeapon | null {\n        const item = this._eq.getItem('missileweapon');\n        if (!RG.isNullOrUndef([item])) {\n            const missWeapon: unknown = item;\n            return missWeapon as Item.MissileWeapon;\n        }\n        return null;\n    }\n\n    public getMissile(): AmmoOrMissile | null {\n        const item = this._eq.getItem('missile');\n        if (item) {\n            const missItem: unknown = item;\n            return missItem as AmmoOrMissile;\n        }\n        return null;\n    }\n\n    public getEquipped(slotType: string): Item.ItemBase | Item.ItemBase[] | null {\n        return this._eq.getItem(slotType);\n    }\n\n    /* Used when restoring/creating new actors, and immediately equipping items.\n     * Bypasses some safety checks. */\n    public restoreEquipped(item): boolean {\n        const ok = this._eq.equipItem(item);\n        return ok;\n    }\n}\n","\n// Note: All CmdXXX classes are used from Brain.Player. 'this' is bound to the\n// Brain.Player object by using execute.call(this)\n\nimport RG from './rg';\nimport {Path} from './path';\nimport * as Component from './component/component';\n\ntype BrainPlayer = import('./brain/brain.player').BrainPlayer;\ntype SentientActor = import ('./actor').SentientActor;\ntype ItemAmmo = import('./item').Ammo;\ntype MissileWeapon = import('./item').MissileWeapon;\n\nexport const Cmd: any = {};\n\nexport const ACTION_ALREADY_DONE = () => {};\nexport const ACTION_ZERO_ENERGY = null;\nCmd.ACTION_ALREADY_DONE = ACTION_ALREADY_DONE;\nCmd.ACTION_ZERO_ENERGY = ACTION_ZERO_ENERGY;\n\nexport class CmdBase {\n\n    protected _actor: SentientActor;\n    protected brain: BrainPlayer;\n\n    constructor(brain: BrainPlayer) {\n        this._actor = brain.getActor();\n        this.brain = brain;\n    }\n\n}\n\n/* Executes one attack against target actor/cell. */\nexport class CmdAttack extends CmdBase {\n\n    public execute(obj) {\n      let actor = obj.target;\n      if (actor.hasActors) { // We're dealing with cell\n        if (obj.target.hasActors()) {\n          actor = obj.target.getSentientActors()[0];\n        }\n      }\n      if (actor) {\n        const [pX, pY] = this._actor.getXY();\n        const [tX, tY] = actor.getXY();\n        const dist = Path.shortestDist(pX, pY, tX, tY);\n        const attackRange = RG.getMeleeAttackRange(this._actor);\n        if (dist <= attackRange) {\n            const attackComp = new Component.Attack({target: actor});\n            this._actor.add(attackComp);\n            return ACTION_ALREADY_DONE;\n        }\n        else {\n          return this.brain.cmdNotPossible('Target not within attack range');\n        }\n      }\n      return this.brain.cmdNotPossible('No valid targets for attack');\n    }\n\n}\nCmd.Attack = CmdAttack;\n\nexport class CmdMissile extends CmdBase {\n\n    public execute(obj) {\n        const invEq = this._actor.getInvEq();\n        let fireRate = 1;\n        if (this._actor.has('DoubleShot')) {\n            fireRate = 2;\n        }\n\n        // Fires one missile comp each firerate increment\n        for (let i = 0; i < fireRate; i++) {\n\n            // TODO changes to fire more than 1 missile\n            const missile = invEq.unequipAndGetItem('missile', 1, 0);\n            if (!RG.isNullOrUndef([missile])) {\n\n                // Check for missile weapon for ammunition\n                if (missile.has('Ammo')) {\n                    const missWeapon = invEq.getEquipment()\n                        .getEquipped('missileweapon') as unknown;\n                    if (missWeapon === null) {\n                        const msg = 'No missile weapon equipped.';\n                        return this.brain.cmdNotPossible(msg);\n                    }\n                    else { // Check ammo/weapon compatibility\n                        const ammo = missile as unknown;\n                        const ammoType = (ammo as ItemAmmo).getAmmoType();\n                        const weaponType = (missWeapon as MissileWeapon).getWeaponType();\n                        if (this._actor.has('MixedShot')) {\n                            const re = /bow/;\n                            if (!re.test(ammoType) || !re.test(weaponType)) {\n                                if (ammoType !== weaponType) {\n                                    const msg = 'Ammo/weapon not compatible.';\n                                    return this.brain.cmdNotPossible(msg);\n                                }\n                            }\n                        }\n                        else if (ammoType !== weaponType) {\n                            const msg = 'Ammo/weapon not compatible.';\n                            return this.brain.cmdNotPossible(msg);\n                        }\n                    }\n                }\n\n                if (!RG.isNullOrUndef([obj.target])) {\n                    const [x, y] = obj.target.getXY();\n                    const mComp = new Component.Missile(this._actor);\n                    mComp.setTargetXY(x, y);\n                    mComp.setDamage(RG.getMissileDamage(this._actor, missile));\n                    mComp.setAttack(RG.getMissileAttack(this._actor, missile));\n                    mComp.setRange(RG.getMissileRange(this._actor, missile));\n                    missile.add(mComp);\n\n                    this.brain.energy = RG.energy.MISSILE;\n                }\n                else {\n                    RG.err('Brain.Player', 'handleCommand',\n                        'No x,y given for missile.');\n                }\n            }\n            else {\n                return this.brain.cmdNotPossible('No missile equipped.');\n            }\n        }\n\n        return ACTION_ALREADY_DONE;\n    }\n\n}\nCmd.Missile = CmdMissile;\n\n/* Executed when player uses an item. */\nexport class CmdUseItem extends CmdBase {\n\n    public execute(obj) {\n        if (obj.hasOwnProperty('item')) {\n            const item = obj.item;\n            let result = false;\n            let msg = `You failed to use ${item.getName()}.`;\n            if (typeof item.useItem === 'function') {\n                this.brain.energy = RG.energy.USE;\n                item.useItem({target: obj.target});\n                result = true;\n            }\n\n            if (obj.hasOwnProperty('callback')) {\n                if (result) {\n                    msg = `You used ${item.getName()}!`;\n                }\n                obj.callback({msg, result});\n            }\n            else if (!result) {\n                // return this.brain.cmdNotPossible('You cannot use that item.');\n                const useComp = new Component.UseItem();\n                useComp.setItem(item);\n                useComp.setTarget(obj.target);\n                this._actor.add(useComp);\n            }\n            else {\n              RG.gameMsg(`You used ${item.getName()}!`);\n            }\n        }\n        else {\n            RG.err('Brain.Player', 'handleCommand', 'obj has no item');\n        }\n        return ACTION_ALREADY_DONE;\n    }\n\n}\nCmd.UseItem = CmdUseItem;\n\n/* Command for using an element. */\nexport class CmdUseElement extends CmdBase {\n\n    public execute(obj) {\n        const cell = obj.target;\n        const elems = cell.getElements();\n        const useComp = new Component.UseElement();\n        elems.forEach(elem => {\n            if (elem.onUse) {\n                useComp.setElement(elem);\n            }\n        });\n        this._actor.add(useComp);\n        return ACTION_ALREADY_DONE;\n    }\n}\nCmd.UseElement = CmdUseElement;\n\nexport class CmdDropItem extends CmdBase {\n\n  public execute(obj) {\n      const invEq = this._actor.getInvEq();\n      const actorCell = this._actor.getCell();\n      let result = false;\n      let msg = `Failed to drop ${obj.item.getName()}`;\n      const dropCount = obj.count <= obj.item.getCount() ? obj.count\n        : obj.item.getCount();\n\n      let hasActiveShop = false;\n      if (actorCell.hasShop()) {\n          const shop = actorCell.getShop();\n          hasActiveShop = !shop.isAbandoned();\n      }\n\n      if (hasActiveShop) {\n          const shopElem = actorCell.getPropType('shop')[0];\n          const price = shopElem.getItemPriceForSelling(obj.item, dropCount);\n\n          // this.brain._wantConfirm = true;\n          const confirmCb = () => {\n              // const sellOk = shopElem.sellItem(obj.item, this._actor);\n              const trans = new Component.Transaction();\n              trans.setArgs({item: obj.item, seller: this._actor,\n                  shop: shopElem, callback: obj.callback,\n                  buyer: shopElem.getShopkeeper(), count: dropCount});\n              this._actor.add(trans);\n          };\n          msg = `Press y to sell item for ${price} gold coins.`;\n          this.brain.setWantConfirm(this.brain.energy, confirmCb, msg);\n          if (obj.hasOwnProperty('callback')) {\n              obj.callback({msg, result});\n          }\n      }\n      else if (invEq.dropNItems(obj.item, dropCount)) {\n          result = true;\n          msg = 'Item dropped!';\n      }\n      if (obj.hasOwnProperty('callback')) {\n          obj.callback({msg, result});\n      }\n      return ACTION_ALREADY_DONE;\n  }\n\n}\nCmd.DropItem = CmdDropItem;\n\nexport class CmdEquipItem extends CmdBase {\n\n    public execute(obj) {\n        const eqComp = new Component.Equip();\n        // eqComp.setItem(obj.item);\n        eqComp.setArgs(obj);\n        eqComp.setIsRemove(false);\n        this._actor.add(eqComp);\n        return ACTION_ALREADY_DONE;\n    }\n\n}\nCmd.EquipItem = CmdEquipItem;\n\n/* Executed when an actor unequips an item. */\nexport class CmdUnequipItem extends CmdBase {\n\n    public execute(obj) {\n        const eqComp = new Component.Equip();\n        eqComp.setArgs(obj);\n        eqComp.setIsRemove(true);\n        this._actor.add(eqComp);\n        return ACTION_ALREADY_DONE;\n    }\n\n}\nCmd.UnequipItem = CmdUnequipItem;\n","/* Include file for game objects like actors, items and elements. */\n\nimport Items from './items';\nimport {ActorsData} from './actors';\nimport Elements from './elements';\n\nexport const Objects = {\n    actors: ActorsData,\n    items: Items,\n    elements: Elements\n};\n\n","\n/* eslint comma-dangle: 0 */\nimport RG from '../src/rg';\nimport {Colors} from './colors';\nimport {meleeHitDamage, color} from './shell-utils';\n\nconst scaleAll = 1.0;\n\n/* Function to scale the item values. For fine-tuning the game balance. */\nfunction value(type: string | number, val?): number {\n    let retVal = 0;\n    if (typeof type === 'string') {\n        switch (type) {\n            case 'leather': retVal = 1.0 * val; break;\n            case 'chain': retVal = 1.0 * val; break;\n            case 'steel': retVal = 1.0 * val; break;\n            case 'permaice': retVal = 1.5 * val; break;\n            case 'ruby': retVal = 1.5 * val; break;\n            case 'magic': retVal = 1.5 * val; break;\n            case 'void': retVal = 1.75 * val; break;\n            case 'gem': retVal = 1.0 * val; break;\n            default: retVal = val;\n        }\n    }\n    else if (Number.isInteger(type)) {\n        // If called as ie retVal(100)\n        retVal = type;\n    }\n    return Math.floor(scaleAll * retVal);\n}\n\ninterface AddCompSpec {\n    addComp: string;\n    func?: any[];\n    duration?: number | string;\n}\n\ninterface ColorSpec {\n    fg?: string;\n    bg?: string;\n}\n\ninterface HealUseSpec {\n    hp: number | string;\n}\n\ninterface CureUseSpec {\n    effect: string;\n}\n\ninterface PoisonUseSpec {\n    duration: string;\n    damage: string;\n    prob: string;\n}\n\ninterface AddElementUseSpec {\n    elementName: string;\n    duration?: string;\n}\n\ninterface RemoveElementUseSpec {\n    elementName: string;\n    duration?: string;\n}\n\ninterface UseSpec {\n    heal?: HealUseSpec;\n    cure?: CureUseSpec;\n    poison?: PoisonUseSpec;\n    stun?: any;\n    modifyCompValue?: any;\n    addEntity?: any;\n    removeComp?: any;\n    addComp?: any;\n    modifyStat?: any;\n    addElement?: AddElementUseSpec;\n    removeElement?: RemoveElementUseSpec;\n}\n\ninterface ObjectShell {\n    damageType?: string;\n    ammoType?: string;\n    onEquip?: AddCompSpec | AddCompSpec[];\n    onAttackHit?: AddCompSpec | AddCompSpec[];\n    noRandom?: boolean;\n    base?: string;\n    addComp?: any;\n    attack?: number;\n    color?: ColorSpec;\n    fireRate?: number;\n    char?: string;\n    className?: string;\n    defense?: number;\n    dontCreate?: boolean;\n    material?: string[] | string;\n    weaponType?: string;\n    armourType?: string;\n    damage?: string;\n    name: string;\n    range?: number;\n    protection?: number;\n    energy?: number;\n    use?: string | UseSpec | AddCompSpec;\n    uses?: number;\n    type?: string;\n    value?: number;\n    weight?: number;\n}\n\n//----------------------------\n// ITEM LIST\n//----------------------------\n\nconst Items: ObjectShell[] = [\n    {\n        name: 'Gold coin', className: 'cell-item-gold-coin',\n        char: '$', material: 'gold',\n        type: 'goldcoin', value: value(10), weight: 0.03\n    },\n    //------------------------------------------------------------\n    // MELEE WEAPONS\n    //------------------------------------------------------------\n    {\n        name: 'MeleeWeaponBase', className: 'cell-item-melee-weapon',\n        char: '(',\n        material: ['iron', 'wood'],\n        type: 'weapon',\n        range: 1, attack: 0, defense: 0,\n        dontCreate: true // Base class only\n    },\n    {\n        name: 'Dagger', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '1d4', weaponType: 'dagger',\n        weight: 0.2, value: value(5)\n    },\n    {\n        name: 'Bayonette', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '1d5', weaponType: 'dagger',\n        weight: 0.1, value: value(10)\n        // TODO combine with rifle\n    },\n    {\n        name: 'Short sword', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '1d6', weaponType: 'sword',\n        weight: 0.5, value: value(20)\n    },\n    {\n        name: 'Wooden staff', base: 'MeleeWeaponBase',\n        material: 'wood',\n        damage: '1d6', weaponType: 'staff',\n        defense: 1,\n        weight: 1.0, value: value(30)\n    },\n    {\n        name: 'Whip', base: 'MeleeWeaponBase',\n        material: 'leather',\n        damage: '1d6', range: 2, attack: -1,\n        weight: 0.2, value: value(10)\n    },\n    {\n        name: 'Tomahawk', base: 'MeleeWeaponBase',\n        material: ['wood', 'stone', 'leather'],\n        damage: '1d7', attack: 1, defense: 1,\n        weaponType: 'axe',\n        weight: 0.7, value: value(35)\n    },\n    {\n        name: 'Iron staff', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '1d8', weaponType: 'staff',\n        defense: 2,\n        weight: 1.9, value: value(40)\n    },\n    {\n        name: 'Piolet', base: 'MeleeWeaponBase',\n        damage: '1d8', attack: 1, defense: 1,\n        weaponType: 'axe',\n        weight: 0.7, value: value(50)\n    },\n    {\n        name: 'Pick-axe', base: 'MeleeWeaponBase',\n        damage: '1d8', attack: 1, defense: 2,\n        weaponType: 'axe',\n        weight: 2.3, value: value(50), use: 'digger'\n    },\n    {\n        name: 'Saber', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '2d4 + 1', attack: 2, defense: 1,\n        weaponType: 'sword',\n        weight: 0.6, value: value(30)\n    },\n    {\n        name: 'Mace', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '2d4 + 2', attack: 2, defense: 0,\n        weaponType: 'mace',\n        weight: 0.8, value: value(35)\n    },\n    {\n        name: 'Spear', base: 'MeleeWeaponBase',\n        damage: '1d8', attack: 1, defense: 3,\n        weaponType: 'spear',\n        weight: 1.2, value: value(50)\n    },\n    {\n        name: 'Iron axe', base: 'MeleeWeaponBase',\n        damage: '1d8', attack: 3, defense: 1,\n        weaponType: 'axe',\n        weight: 1.5, value: value(60)\n    },\n    {\n        name: 'Longsword', base: 'MeleeWeaponBase',\n        material: 'steel',\n        damage: '1d8', attack: 2, defense: 2,\n        weaponType: 'sword',\n        weight: 0.8, value: value(75)\n    },\n    {\n        name: 'Morningstar', base: 'MeleeWeaponBase',\n        material: ['wood', 'iron'],\n        damage: '1d9 + 2', attack: 2, defense: 3,\n        weaponType: 'mace',\n        weight: 0.7, value: value(75)\n    },\n    {\n        name: 'Battle axe', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '2d6 + 2', attack: 2, defense: 1,\n        weaponType: 'axe',\n        weight: 2.5, value: value(85)\n    },\n    {\n        name: 'Warhammer', base: 'MeleeWeaponBase',\n        material: 'iron',\n        damage: '2d6 + 5', attack: 3, defense: 1,\n        weaponType: 'hammer',\n        weight: 4.5, value: value(100)\n    },\n    {\n        name: 'Dwarven pick-axe', base: 'MeleeWeaponBase',\n        damage: '1d12', attack: 2, defense: 2,\n        color: Colors.race.dwarven,\n        weaponType: 'axe',\n        weight: 3.5, value: value(120), use: 'digger'\n    },\n    {\n        name: 'Great battle axe', base: 'MeleeWeaponBase',\n        material: 'steel',\n        damage: '2d8 + 4', attack: 3, defense: 0,\n        weaponType: 'axe',\n        weight: 4.5, value: value(130)\n    },\n\n    // MITHRIL WEAPONS\n    {\n        name: 'MithrilWeaponBase', base: 'MeleeWeaponBase',\n        className: 'cell-item-mithril',\n        material: 'mithril', dontCreate: true,\n        attack: 1\n    },\n    {\n        name: 'Mithril dagger', base: 'MithrilWeaponBase',\n        attack: 2,\n        damage: '1d7 + 3', weaponType: 'dagger',\n        weight: 0.15, value: value(50)\n    },\n    {\n        name: 'Mithril short sword', base: 'MithrilWeaponBase',\n        attack: 3,\n        damage: '1d9 + 4', defense: 2, weight: 0.35, value: value(100),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Mithril mace', base: 'MithrilWeaponBase',\n        damage: '1d11 + 5', weaponType: 'mace',\n        attack: 3,\n        defense: 2, weight: 2.5, value: value(150)\n    },\n    {\n        name: 'Mithril staff', base: 'MithrilWeaponBase',\n        damage: '1d12 + 2', weaponType: 'staff',\n        defense: 6, weight: 1.5, value: value(170)\n    },\n    {\n        name: 'Mithril axe', base: 'MithrilWeaponBase',\n        attack: 4,\n        damage: '1d15 + 2', defense: 3,\n        weaponType: 'axe', weight: 1.2, value: value(200)\n    },\n    {\n        name: 'Mithril hammer', base: 'MithrilWeaponBase',\n        attack: 5,\n        damage: '1d15 + 6', defense: 1,\n        weaponType: 'axe', weight: 2.4, value: value(250)\n    },\n    {\n        name: 'Mithril long sword', base: 'MithrilWeaponBase',\n        attack: 5,\n        damage: '1d15 + 4', defense: 4, weight: 0.6, value: value(300),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Mithril spear', base: 'MithrilWeaponBase',\n        attack: 5,\n        damage: '1d12 + 4', defense: 8, weight: 0.9, value: value(350),\n        weaponType: 'spear'\n    },\n\n    // ICE WEAPONS (not easy to hit with, do lots of damage)\n    {\n        name: 'IceWeaponBase', base: 'MeleeWeaponBase',\n        className: 'cell-item-ice',\n        material: 'permaice', dontCreate: true,\n        attack: 1\n    },\n    {\n        name: 'Permaice dagger', base: 'IceWeaponBase',\n        damage: '1d4 + 9', defense: 6, weight: 0.6, value: value(150),\n        weaponType: 'dagger'\n    },\n    {\n        name: 'Permaice short sword', base: 'IceWeaponBase',\n        damage: '2d5 + 6', defense: 6, weight: 1.5, value: value(300),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Permaice mace', base: 'IceWeaponBase',\n        damage: '2d7 + 6', weaponType: 'mace',\n        defense: 6, weight: 2.5, value: value(300)\n    },\n    {\n        name: 'Permaice staff', base: 'IceWeaponBase',\n        damage: '3d5', weaponType: 'staff',\n        defense: 7, weight: 3.8, value: value(300)\n    },\n    {\n        name: 'Permaice axe', base: 'IceWeaponBase',\n        damage: '3d6 + 6', defense: 7,\n        weaponType: 'axe', weight: 4.5, value: value(400)\n    },\n    {\n        name: 'Permaice hammer', base: 'IceWeaponBase',\n        damage: '3d6 + 10', defense: 7,\n        weaponType: 'hammer', weight: 6.5, value: value(440)\n    },\n    {\n        name: 'Permaice long sword', base: 'IceWeaponBase',\n        damage: '4d5 + 6', defense: 8, weight: 3.0, value: value(500),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Permaice spear', base: 'IceWeaponBase',\n        damage: '4d5 + 6', defense: 12, weight: 3.5, value: value(550),\n        weaponType: 'spear'\n    },\n    {\n        name: 'Permaice katana', base: 'IceWeaponBase',\n        damage: '10d3 + 6', defense: 10, weight: 4.0, value: value(750),\n        weaponType: 'sword'\n    },\n\n    // RUBY GLASS WEAPONS\n    {\n        name: 'RubyWeaponBase', base: 'MeleeWeaponBase',\n        className: 'cell-item-ruby-glass',\n        material: 'ruby glass', dontCreate: true\n    },\n    {\n        name: 'Ruby glass dagger', base: 'RubyWeaponBase',\n        damage: '2d5 + 2',\n        attack: 4, defense: 1, weight: 0.1, value: value(110),\n        weaponType: 'dagger'\n    },\n    {\n        name: 'Ruby glass short sword', base: 'RubyWeaponBase',\n        damage: '3d5 + 2',\n        attack: 3, defense: 2, weight: 0.2, value: value(200),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Ruby glass mace', base: 'RubyWeaponBase',\n        damage: '3d6 + 2',\n        attack: 3, defense: 3, weight: 0.3, value: value(250),\n        weaponType: 'mace'\n    },\n    {\n        name: 'Ruby glass hammer', base: 'RubyWeaponBase',\n        damage: '3d6 + 4',\n        attack: 4, defense: 2, weight: 0.6, value: value(250),\n        weaponType: 'hammer'\n    },\n    {\n        name: 'Ruby glass staff', base: 'RubyWeaponBase',\n        damage: '3d5', weaponType: 'staff',\n        attack: 4, defense: 5,\n        weight: 0.4, value: value(300)\n    },\n    {\n        name: 'Ruby glass sword', base: 'RubyWeaponBase',\n        damage: '4d5 + 2',\n        attack: 5, defense: 2, weight: 0.3, value: value(350),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Ruby glass spear', base: 'RubyWeaponBase',\n        damage: '3d5 + 2',\n        attack: 3, defense: 6, weight: 0.4, value: value(400),\n        weaponType: 'spear'\n    },\n    {\n        name: 'Ruby glass battle axe', base: 'RubyWeaponBase',\n        damage: '4d6 + 3',\n        attack: 6, defense: 2, weight: 0.7, value: value(800),\n        weaponType: 'axe'\n    },\n\n    // MAGIC WEAPONS\n    {\n        name: 'RunedWeaponBase', base: 'MeleeWeaponBase',\n        className: 'cell-item-magic',\n        material: 'forium', dontCreate: true\n    },\n    {\n        name: 'Runed dagger', base: 'RunedWeaponBase',\n        damage: '2d5 + 2',\n        attack: 2, defense: 1, weight: 0.2, value: value(100),\n        weaponType: 'dagger'\n    },\n    {\n        name: 'Runed short sword', base: 'RunedWeaponBase',\n        damage: '3d5 + 2',\n        attack: 3, defense: 2, weight: 0.5, value: value(300),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Runed mace', base: 'RunedWeaponBase',\n        damage: '3d6 + 2',\n        attack: 3, defense: 2, weight: 1.0, value: value(340),\n        weaponType: 'mace'\n    },\n    {\n        name: 'Runed axe', base: 'RunedWeaponBase',\n        damage: '4d5 + 2',\n        attack: 4, defense: 2, weight: 1.5, value: value(400),\n        weaponType: 'axe'\n    },\n    {\n        name: 'Runed hammer', base: 'RunedWeaponBase',\n        damage: '4d5 + 4',\n        attack: 5, defense: 1, weight: 2.7, value: value(400),\n        weaponType: 'hammer'\n    },\n    {\n        name: 'Runed staff', base: 'RunedWeaponBase',\n        damage: '4d5', weaponType: 'staff',\n        attack: 2, defense: 9,\n        weight: 2.0, value: value(400)\n    },\n    {\n        name: 'Runed sword', base: 'RunedWeaponBase',\n        damage: '5d5 + 2',\n        attack: 5, defense: 2, weight: 1.0, value: value(500),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Runed spear', base: 'RunedWeaponBase',\n        damage: '4d5 + 4',\n        attack: 4, defense: 8, weight: 1.4, value: value(600),\n        weaponType: 'spear'\n    },\n    {\n        name: 'Runed runesword', base: 'RunedWeaponBase',\n        damage: '3d10 + 2',\n        attack: 5, defense: 5, weight: 0.8, value: value(750),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Wintersbane', base: 'RunedWeaponBase',\n        damage: '3d8 + 4',\n        attack: 6, defense: 3, weight: 1.0, value: value(1000),\n        weaponType: 'sword'\n    },\n\n    // VOID WEAPONS\n    {\n        name: 'VoidWeaponBase', base: 'MeleeWeaponBase',\n        className: 'cell-item-void',\n        material: 'netherium', dontCreate: true,\n        onAttackHit: [meleeHitDamage(2, '1d8 + 1', 'VOID')],\n    },\n    {\n        name: 'Void dagger', base: 'VoidWeaponBase',\n        damage: '2d5 + 1',\n        attack: 2, defense: 1, weight: 0.3, value: value(200),\n        weaponType: 'dagger'\n    },\n    {\n        name: 'Void short sword', base: 'VoidWeaponBase',\n        damage: '3d5 + 1',\n        attack: 3, defense: 2, weight: 0.7, value: value(300),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Void mace', base: 'VoidWeaponBase',\n        damage: '3d6 + 1',\n        attack: 3, defense: 2, weight: 1.4, value: value(390),\n        weaponType: 'mace'\n    },\n    {\n        name: 'Void axe', base: 'VoidWeaponBase',\n        damage: '4d5 + 1',\n        attack: 4, defense: 2, weight: 1.9, value: value(450),\n        weaponType: 'axe'\n    },\n    {\n        name: 'Void staff', base: 'VoidWeaponBase',\n        damage: '3d6', weaponType: 'staff',\n        attack: 2, defense: 9,\n        weight: 2.0, value: value(450)\n    },\n    {\n        name: 'Void longsword', base: 'VoidWeaponBase',\n        damage: '5d5 + 1',\n        attack: 5, defense: 2, weight: 1.4, value: value(550),\n        weaponType: 'sword'\n    },\n    {\n        name: 'Void spear', base: 'VoidWeaponBase',\n        damage: '4d5 + 2',\n        attack: 4, defense: 8, weight: 1.8, value: value(650),\n        weaponType: 'spear'\n    },\n    {\n        name: 'Hammer of Void', base: 'VoidWeaponBase',\n        damage: '5d5 + 4',\n        attack: 8, defense: 8, weight: 3.7, value: value(850),\n        weaponType: 'hammer',\n        onAttackHit: [meleeHitDamage(2, '2d8 + 4', 'VOID')],\n    },\n\n    // ARMOUR\n    {\n        name: 'ArmourBase', type: 'armour', className: 'cell-item-armour',\n        char: '[', dontCreate: true, attack: 0, defense: 0, protection: 0\n    },\n    // ARMOUR MISC\n    {\n        name: 'Robe', base: 'ArmourBase', className: 'cell-item-cloth',\n        weight: 1.0, defense: 1, armourType: 'chest', value: value(15)\n    },\n    {\n        name: 'Spiked boots', base: 'ArmourBase',\n        weight: 0.4, defense: 1, protection: 1, armourType: 'feet',\n        value: value(35)\n    },\n    {\n        name: 'Robe of defense', base: 'ArmourBase',\n        className: 'cell-item-cloth',\n        weight: 0.9, defense: 4, armourType: 'chest', value: value(200)\n    },\n    {\n        name: 'Robe of protection', base: 'ArmourBase',\n        className: 'cell-item-cloth',\n        weight: 0.8, protection: 4, armourType: 'chest', value: value(200)\n    },\n    {\n        name: 'Runed robe', base: 'ArmourBase',\n        className: 'cell-item-cloth',\n        weight: 0.7, defense: 4, protection: 4, armourType: 'chest',\n        value: value(350)\n    },\n    {\n        name: 'Boots of flying', base: 'ArmourBase',\n        weight: 0.4, defense: 1, protection: 1, armourType: 'feet',\n        value: value(35),\n        onEquip: [{addComp: 'Flying'}]\n    },\n    {\n        name: 'Snow shoes', base: 'ArmourBase',\n        weight: 0.4, defense: -1, protection: 0, armourType: 'feet',\n        value: value(75),\n        onEquip: [{addComp: 'SnowWalk'}], noRandom: true\n    },\n    // ARMOUR LEATHER\n    {\n        name: 'LeatherArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'leather', className: 'cell-item-leather'\n    },\n    {\n        name: 'Leather helmet', base: 'LeatherArmourBase',\n        weight: 0.3, defense: 1, armourType: 'head', value: value(15)\n    },\n    {\n        name: 'Leather collar', base: 'LeatherArmourBase',\n        weight: 0.2, protection: 1, armourType: 'neck', value: value(15)\n    },\n    {\n        name: 'Leather boots', base: 'LeatherArmourBase',\n        weight: 0.5, defense: 1, armourType: 'feet', value: value(15)\n    },\n    {\n        name: 'Leather armour', base: 'LeatherArmourBase',\n        weight: 2.0, defense: 2, protection: 2,\n        armourType: 'chest', value: value(30)\n    },\n    {\n        name: 'Leather shield', base: 'LeatherArmourBase',\n        weight: 1.0, defense: 2, attack: -1,\n        armourType: 'shield', value: value(15)\n    },\n\n    // ARMOUR IRON\n    {\n        name: 'ChainArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'iron', className: 'cell-item-iron'\n    },\n    {\n        name: 'Chain helmet', base: 'ChainArmourBase',\n        weight: 0.6, defense: 1, protection: 1,\n        armourType: 'head', value: value(45)\n    },\n    {\n        name: 'Chain collar', base: 'ChainArmourBase',\n        weight: 0.4, protection: 2,\n        armourType: 'neck', value: value(45)\n    },\n    {\n        name: 'Chain boots', base: 'ChainArmourBase',\n        weight: 1.2, defense: 1, protection: 1,\n        armourType: 'feet', value: value(45)\n    },\n    {\n        name: 'Chain armour', base: 'ChainArmourBase',\n        weight: 4.0, defense: 1, protection: 3,\n        armourType: 'chest', value: value(90)\n    },\n    {\n        name: 'Chain shield', base: 'ChainArmourBase',\n        weight: 2.0, defense: 3, attack: -2,\n        armourType: 'shield', value: value(40)\n    },\n    // ARMOUR STEEL\n    {\n        name: 'SteelArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'steel', className: 'cell-item-steel'\n    },\n    {\n        name: 'Steel helmet', base: 'SteelArmourBase',\n        weight: 1.1, defense: 1, protection: 2,\n        armourType: 'head', value: value(75)\n    },\n    {\n        name: 'Steel collar', base: 'SteelArmourBase',\n        weight: 0.8, protection: 3,\n        armourType: 'neck', value: value(75)\n    },\n    {\n        name: 'Steel boots', base: 'SteelArmourBase',\n        weight: 2.0, defense: 1, protection: 2,\n        armourType: 'feet', value: value(75)\n    },\n    {\n        name: 'Steel armour', base: 'SteelArmourBase',\n        weight: 8.0, defense: 0, protection: 5,\n        armourType: 'chest', value: value(150)\n    },\n    {\n        name: 'Steel shield', base: 'SteelArmourBase',\n        weight: 3.0, defense: 4, attack: -2,\n        armourType: 'shield', value: value(80)\n    },\n\n    // ARMOUR MITHRIL\n    {\n        name: 'MithrilArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'mithril', className: 'cell-item-mithril'\n    },\n    {\n        name: 'Mithril helmet', base: 'MithrilArmourBase',\n        weight: 0.8, defense: 1, protection: 2,\n        armourType: 'head', value: value(120)\n    },\n    {\n        name: 'Mithril collar', base: 'MithrilArmourBase',\n        weight: 0.6, protection: 3,\n        armourType: 'neck', value: value(110)\n    },\n    {\n        name: 'Mithril boots', base: 'MithrilArmourBase',\n        weight: 1.6, defense: 1, protection: 2,\n        armourType: 'feet', value: value(120)\n    },\n    {\n        name: 'Mithril armour', base: 'MithrilArmourBase',\n        weight: 6.0, defense: 0, protection: 7,\n        armourType: 'chest', value: value(200)\n    },\n    {\n        name: 'Mithril shield', base: 'MithrilArmourBase',\n        weight: 2.2, defense: 5, attack: -1,\n        armourType: 'shield', value: value(120)\n    },\n\n    // ARMOUR ICE (protective but heavy)\n    {\n        name: 'IceArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'permaice', className: 'cell-item-ice'\n    },\n    {\n        name: 'Permaice helmet', base: 'IceArmourBase',\n        weight: 1.8, defense: 0, protection: 4,\n        armourType: 'head', value: value(200)\n    },\n    {\n        name: 'Permaice collar', base: 'IceArmourBase',\n        weight: 1.8, defense: 0, protection: 4,\n        armourType: 'neck', value: value(200)\n    },\n    {\n        name: 'Permaice boots', base: 'IceArmourBase',\n        weight: 3.6, defense: 0, protection: 3,\n        armourType: 'feet', value: value(200)\n    },\n    {\n        name: 'Permaice armour', base: 'IceArmourBase',\n        weight: 12.0, defense: 0, protection: 12,\n        armourType: 'chest', value: value(400)\n    },\n    {\n        name: 'Permaice shield', base: 'IceArmourBase',\n        weight: 6.0, defense: 4, attack: -3, protection: 2,\n        armourType: 'shield', value: value(120)\n    },\n\n    // ARMOUR RUBY GLASS (light, flexible)\n    {\n        name: 'RubyArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'ruby glass', className: 'cell-item-ruby-glass'\n    },\n    {\n        name: 'Ruby glass helmet', base: 'RubyArmourBase',\n        weight: 0.1, defense: 2, protection: 2,\n        armourType: 'head', value: value('ruby', 100)\n    },\n    {\n        name: 'Ruby glass collar', base: 'RubyArmourBase',\n        weight: 0.1, defense: 2, protection: 2,\n        armourType: 'neck', value: value('ruby', 100)\n    },\n    {\n        name: 'Ruby glass boots', base: 'RubyArmourBase',\n        weight: 0.2, defense: 3, protection: 2,\n        armourType: 'feet', value: value('ruby', 200)\n    },\n    {\n        name: 'Ruby glass armour', base: 'RubyArmourBase',\n        weight: 1.0, defense: 6, protection: 6,\n        armourType: 'chest', value: value('ruby', 500)\n    },\n    {\n        name: 'Ruby glass shield', base: 'RubyArmourBase',\n        weight: 0.4, defense: 5,\n        armourType: 'shield', value: value('ruby', 250)\n    },\n\n    // ARMOUR MAGIC (excellent D/P, very well rounded)\n    {\n        name: 'RunedArmourBase', base: 'ArmourBase', dontCreate: true,\n        material: 'forium', className: 'cell-item-magic'\n    },\n    {\n        name: 'Runed helmet', base: 'RunedArmourBase',\n        weight: 0.6, defense: 3, protection: 4,\n        armourType: 'head', value: value('magic', 200)\n    },\n    {\n        name: 'Runed collar', base: 'RunedArmourBase',\n        weight: 0.4, defense: 3, protection: 2,\n        armourType: 'neck', value: value('magic', 200)\n    },\n    {\n        name: 'Runed boots', base: 'RunedArmourBase',\n        weight: 1.2, defense: 3, protection: 2,\n        armourType: 'feet', value: value('magic', 200)\n    },\n    {\n        name: 'Runed armour', base: 'RunedArmourBase',\n        weight: 4.0, defense: 10, protection: 7,\n        armourType: 'chest', value: value('magic', 500)\n    },\n    {\n        name: 'Runed shield', base: 'RunedArmourBase',\n        weight: 2.0, defense: 5, attack: -2,\n        armourType: 'shield', value: value('magic', 200)\n    },\n\n    // MISSILES\n    {\n        name: 'MissileBase', className: 'cell-item-missile', char: '/',\n        type: 'missile', dontCreate: true,\n        attack: 1, damage: '1d1', range: 2, weight: 0.1\n    },\n    {\n        name: 'Rock', base: 'MissileBase', className: 'cell-item-rock',\n        char: '*', damage: '1d4', range: 5, value: value(10), weight: 0.2\n    },\n    {\n        name: 'Large rock', base: 'MissileBase', className: 'cell-item-rock',\n        char: '*', damage: '2d4 + 2', range: 2, value: value(20), weight: 1.0\n    },\n    {\n        name: 'Huge rock', base: 'MissileBase', className: 'cell-item-rock',\n        char: '*', damage: '5d4 + 2', range: 1, value: value(40), weight: 20.0\n    },\n    {\n        name: 'Shuriken', base: 'MissileBase', className: 'cell-item-iron',\n        char: '*', damage: '1d6', range: 3, value: value(20),\n        weaponType: 'shuriken'\n    },\n    {\n        name: 'Iron dart', base: 'MissileBase', className: 'cell-item-iron',\n        damage: '1d6 + 1', range: 4, value: value(40), weaponType: 'dart'\n    },\n    {\n        name: 'Steel dart', base: 'MissileBase', className: 'cell-item-steel',\n        damage: '1d6 + 3', range: 4, value: value(50), weaponType: 'dart'\n    },\n    {\n        name: 'Throwing spear', base: 'MissileBase',\n        className: 'cell-item-iron',\n        attack: 2, damage: '1d7 + 1', range: 3, value: value(55), weight: 0.4,\n        weaponType: 'spear'\n    },\n    {\n        name: 'Throwing axe', base: 'MissileBase', className: 'cell-item-iron',\n        attack: 2, damage: '1d8 + 1', range: 3, value: value(60), weight: 0.3,\n        weaponType: 'axe'\n    },\n    {\n        name: 'Ruby glass throwing knife', base: 'MissileBase',\n        className: 'cell-item-ruby-glass',\n        attack: 3, damage: '1d10', range: 5, value: value(80), weight: 0.1,\n        weaponType: 'dagger', material: 'ruby glass'\n    },\n    {\n        name: 'Runed Shuriken', base: 'MissileBase',\n        attack: 3, className: 'cell-item-magic', char: '*', material: 'forium',\n        damage: '3d4 + 2', range: 5, value: value(100), weight: 0.1,\n        weaponType: 'shuriken'\n    },\n    {\n        name: 'Throwing axe of death', base: 'MissileBase',\n        className: 'cell-item-magic',\n        attack: 5, damage: '2d10 + 3', range: 3, value: value(200), weight: 0.5,\n        addComp: 'Indestructible', weaponType: 'axe'\n    },\n\n    // MISSILE WEAPONS\n    {\n        name: 'MissileWeaponBase', dontCreate: true,\n        type: 'missileweapon', fireRate: 1,\n        className: 'cell-item-missileweapon',\n        attack: 0, defense: 0, char: '{'\n    },\n    {\n        name: 'Wooden bow', base: 'MissileWeaponBase',\n        className: 'cell-item-wooden',\n        attack: 1, range: 4, value: value(75),\n        weaponType: 'bow', weight: 1.0\n    },\n    {\n        name: 'Wooden crossbow', base: 'MissileWeaponBase',\n        className: 'cell-item-wooden',\n        attack: 3, range: 6, value: value(150),\n        weaponType: 'crossbow', weight: 2.0\n    },\n    {\n        name: 'Iron bow', base: 'MissileWeaponBase',\n        className: 'cell-item-iron',\n        attack: 1, range: 5, value: value(110),\n        weaponType: 'bow', weight: 1.5\n    },\n    {\n        name: 'Steel bow', base: 'MissileWeaponBase',\n        className: 'cell-item-steel',\n        attack: 2, range: 5, value: value(150),\n        weaponType: 'bow', weight: 2.0\n    },\n    {\n        name: 'Steel crossbow', base: 'MissileWeaponBase',\n        className: 'cell-item-steel',\n        attack: 4, range: 7, value: value(250),\n        weaponType: 'crossbow', weight: 3.0\n    },\n    {\n        name: 'Ruby glass bow', base: 'MissileWeaponBase',\n        className: 'cell-item-ruby-glass',\n        attack: 6, range: 6, value: value('ruby', 300),\n        weaponType: 'bow', weight: 0.3\n    },\n    {\n        name: 'Double crossbow', base: 'MissileWeaponBase',\n        className: 'cell-item-steel',\n        attack: 0, range: 5, value: value(400), fireRate: 2,\n        weaponType: 'crossbow', weight: 4.0\n    },\n    {\n        name: 'Bow of Defense', base: 'MissileWeaponBase',\n        className: 'cell-item-magic',\n        attack: 1, range: 4, defense: 6, value: value('magic', 500),\n        weaponType: 'bow', weight: 1.0\n    },\n    {\n        name: 'Rifle', base: 'MissileWeaponBase',\n        className: 'cell-item-steel',\n        attack: 4, range: 7, value: value(350),\n        weaponType: 'rifle', weight: 4.5\n    },\n    {\n        name: 'Dwarven rifle', base: 'MissileWeaponBase',\n        className: 'cell-item-steel',\n        attack: 4, range: 8, damage: '1d6', value: value(500),\n        weaponType: 'rifle', weight: 5.5\n    },\n\n    // AMMO\n    {\n        name: 'Wooden arrow', base: 'MissileBase',\n        className: 'cell-item-wooden',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'bow',\n        attack: 0, damage: '1d6', value: value(10)\n    },\n    {\n        name: 'Wooden bolt', base: 'MissileBase',\n        className: 'cell-item-wooden',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'crossbow',\n        attack: 1, damage: '1d8', value: value(15)\n    },\n    {\n        name: 'Steel arrow', base: 'MissileBase',\n        className: 'cell-item-steel',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'bow',\n        attack: 0, damage: '1d6 + 2', value: value('steel', 20)\n    },\n    {\n        name: 'Steel bolt', base: 'MissileBase',\n        className: 'cell-item-steel',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'crossbow',\n        attack: 1, damage: '1d8', value: value('steel', 25)\n    },\n    {\n        name: 'Stone bullet', base: 'MissileBase',\n        className: 'cell-item-rock',\n        type: 'ammo', range: 1, weight: 0.10, ammoType: 'rifle',\n        attack: -1, damage: '2d4', value: value(30)\n    },\n    {\n        name: 'Arrow of targeting', base: 'MissileBase',\n        className: 'cell-item-steel',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'bow',\n        attack: 10, damage: '1d6 + 3', value: value('steel', 40)\n    },\n    {\n        name: 'Runed arrow', base: 'MissileBase',\n        className: 'cell-item-magic',\n        type: 'ammo', range: 1, weight: 0.2, ammoType: 'bow',\n        attack: 4, damage: '2d7', value: value('magic', 50)\n    },\n    {\n        name: 'Ruby glass bolt', base: 'MissileBase',\n        className: 'cell-item-ruby-glass',\n        type: 'ammo', range: 2, weight: 0.05, ammoType: 'crossbow',\n        attack: 3, damage: '2d8', value: value('ruby', 60)\n    },\n    {\n        name: 'Steel bullet', base: 'MissileBase',\n        className: 'cell-item-steel',\n        type: 'ammo', range: 1, weight: 0.05, ammoType: 'rifle',\n        attack: 1, damage: '3d4', value: value(50)\n    },\n    {\n        name: 'Void bolt', base: 'MissileBase',\n        className: 'cell-item-void',\n        type: 'ammo', range: 1, weight: 0.1, ammoType: 'crossbow',\n        attack: 5, damage: '4d4 + 4', value: value(100),\n\n    },\n\n    // POTIONS\n    // Note: Each potion should define useItem method. See examples below.\n    {\n        name: 'PotionBase', className: 'cell-item-potion', char: '!',\n        type: 'potion', dontCreate: true, weight: 0.1,\n        addComp: 'OneShot' // Item is destroyed after use\n    },\n    {\n        name: 'Healing potion', base: 'PotionBase',\n        use: {heal: {hp: '3d4'}}, value: value(10)\n    },\n    {\n        name: 'Potion of venom', base: 'PotionBase',\n        use: {poison: {duration: '4d4 + 5', damage: '1d6', prob: '0.1'}},\n        value: value(30)\n    },\n    {\n        name: 'Potion of stunning', base: 'PotionBase',\n        use: {stun: {duration: '2d4 + 1'}},\n        value: value(50)\n    },\n    {\n        name: 'Potion of power', base: 'PotionBase',\n        use: {modifyCompValue: {name: 'SpellPower', set: 'setPP',\n            get: 'getPP', value: '1d10 + 2'}\n        }, value: value(50)\n    },\n    {\n        name: 'Potion of nourishment', base: 'PotionBase',\n        use: {modifyCompValue: {name: 'Hunger', set: 'setEnergy',\n            get: 'getEnergy', value: '10000'}\n        }, value: value(50)\n    },\n    {\n        name: 'Potion of cure poison', base: 'PotionBase',\n        use: {cure: {effect: 'poison'}}, value: value(80)\n    },\n    {\n        name: 'Potion of eagle', base: 'PotionBase',\n        use: {addComp: {name: 'Flying', duration: '10d10 + 10'}},\n        value: value(80)\n    },\n    {\n        name: 'Potion of paralysis', base: 'PotionBase',\n        use: {addComp: {name: 'Paralysis', duration: '2d5'}},\n        value: value(80)\n    },\n    {\n        name: 'Potion of frost poison', base: 'PotionBase',\n        use: {poison: {duration: '5d20', damage: '1d6 + 1', prob: '0.2'}},\n        value: value(100)\n    },\n    {\n        name: 'Healing elixir', base: 'PotionBase',\n        use: {heal: {hp: '10d5'}}, value: value(100)\n    },\n    {\n        name: 'Potion of spirit form', base: 'PotionBase',\n        use: {addComp: {name: 'Ethereal', duration: '2d10'}},\n        value: value(100)\n    },\n    {\n        name: 'Potion of mana', base: 'PotionBase',\n        use: {modifyCompValue: {name: 'SpellPower', set: 'setPP',\n            get: 'getPP', value: '6d5 + 5'}\n        }, value: value(150)\n    },\n    {\n        name: 'Potion of quickness', base: 'PotionBase',\n        use: {modifyStat: {value: 2, statName: 'speed'}},\n        value: value(150)\n    },\n    {\n        name: 'Potion of willpower', base: 'PotionBase',\n        use: {modifyStat: {value: 1, statName: 'willpower'}},\n        value: value(200)\n    },\n    {\n        name: 'Potion of strength', base: 'PotionBase',\n        use: {modifyStat: {value: 1, statName: 'strength'}},\n        value: value(200)\n    },\n    {\n        name: 'Potion of agility', base: 'PotionBase',\n        use: {modifyStat: {value: 1, statName: 'agility'}},\n        value: value(200)\n    },\n    {\n        name: 'Potion of accuracy', base: 'PotionBase',\n        use: {modifyStat: {value: 1, statName: 'accuracy'}},\n        value: value(200)\n    },\n    {\n        name: 'Potion of magic', base: 'PotionBase',\n        use: {modifyStat: {value: 1, statName: 'magic'}},\n        value: value(200)\n    },\n    // FOOD\n    // Note: Food has energy X kcal/100g * 10. Food items can have weight,\n    // but if they don't, weight is then generated randomly. Value is also per\n    // 100g. Energy should be generally between 0 - 9000\n    {\n        name: 'FoodBase', className: 'cell-item-food', char: '%',\n        weight: 0.1, type: 'food', dontCreate: true,\n        addComp: 'OneShot' // Item is destroyed after use\n    },\n    {\n        name: 'Carrots', base: 'FoodBase', energy: 500, value: value(10)\n    },\n    {\n        name: 'Cabbage', base: 'FoodBase', energy: 700, value: value(10),\n        color: color('green', 'black')\n    },\n    {\n        name: 'Berries', base: 'FoodBase', energy: 1700, value: value(30),\n        color: color('white', 'blue')\n    },\n    {\n        name: 'Potatoes', base: 'FoodBase', energy: 1200, value: value(20)\n    },\n    {\n        name: 'Dried meat', base: 'FoodBase', energy: 1300, value: value(20)\n    },\n    {\n        name: 'Corn', base: 'FoodBase', energy: 1600, value: value(30)\n    },\n    {\n        name: 'Chunk of meat', base: 'FoodBase', energy: 1000, value: value(20),\n        weight: 0.4, color: color('white', 'red')\n    },\n    {\n        name: 'Rye bread', base: 'FoodBase', energy: 2000, value: value(30)\n    },\n    {\n        name: 'Oats', base: 'FoodBase', energy: 2800, value: value(30)\n    },\n    {\n        name: 'Ration', base: 'FoodBase', energy: 2000, value: value(40),\n        weight: 1.0\n    },\n    {\n        name: 'Dried fruit', base: 'FoodBase', energy: 3500, value: value(50)\n    },\n    {\n        name: 'Ghost pepper', base: 'FoodBase', energy: 100, value: value(50),\n        use: {stun: {duration: '3d3'}}\n    },\n    {\n      name: 'Whale fat', base: 'FoodBase', energy: 8000, value: value(100)\n    },\n\n    // TOOLS\n    // Note: Each tool should have useItem method.\n    {\n        name: 'tool', type: 'tool', uses: 10, className: 'cell-item-tool',\n        char: ']', dontCreate: true\n    },\n    {\n        name: 'shovel', base: 'tool',\n        use: {addElement: {\n            elementName: 'Hole', numAllowed: 1,\n            successMsg: 'You dig a hole to the ground',\n            failureMsg: 'You fail to dig a hole there',\n        }}\n    },\n    {\n        name: 'machete', base: 'tool', char: '(',\n        use: {removeElement: {\n            elementName: 'web',\n            successMsg: 'You remove the webs using machete',\n            failureMsg: 'You do not manage to remove any webs',\n        }}\n    },\n    {\n        name: 'trapmaking kit', base: 'tool'\n    },\n    {\n        name: 'firemaking kit', base: 'tool',\n        use: {addEntity: {entityName: 'Fire', duration: 20}}\n    },\n    {\n        name: 'repair tool kit', base: 'tool',\n        use: {removeComp: {name: 'Broken'}}, noRandom: true\n    },\n    {\n        name: 'rope', base: 'tool'\n    },\n    {\n        name: 'piece of wood', base: 'tool',\n        className: 'cell-item-wooden',\n    },\n\n    // SPIRIT GEMS\n    {\n        name: 'SpiritGemBase', className: 'cell-item-spiritgem', char: '*',\n        weight: 0.1, type: 'spiritgem', dontCreate: true\n    },\n    {\n        name: 'Lesser spirit gem', base: 'SpiritGemBase',\n        value: value('gem', 30), weight: 4.0\n    },\n    {\n        name: 'Ordinary spirit gem', base: 'SpiritGemBase',\n        value: value('gem', 60), weight: 2.5\n    },\n    {\n        name: 'Greater spirit gem', base: 'SpiritGemBase',\n        value: value('gem', 100), weight: 1.5\n    },\n    {\n        name: 'Mystical spirit gem', base: 'SpiritGemBase',\n        value: value('gem', 300), weight: 0.5\n    },\n    {\n        name: 'Mythic spirit gem', base: 'SpiritGemBase',\n        value: value('gem', 500), weight: 0.2\n    },\n\n    // RUNESTONES\n    {\n        name: 'RuneBase', dontCreate: true,\n        type: 'rune', char: '*',\n        className: 'cell-item-rune', weight: 1.0\n    },\n    {\n        name: 'rune of healing', base: 'RuneBase',\n        use: {heal: {hp: '4d4'}}, value: value('rune', 100)\n    },\n    {\n        name: 'rune of protection', base: 'RuneBase',\n        use: {addComp: {\n            name: 'CombatMods', duration: '10d5 + 10',\n            setters: {setProtection: '2d5'}\n        }},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of defense', base: 'RuneBase',\n        use: {addComp: {\n            name: 'CombatMods', duration: '10d5 + 10',\n            setters: {setProtection: '2d5'}\n        }},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of attack', base: 'RuneBase',\n        use: {addComp: {\n            name: 'CombatMods', duration: '10d5 + 10',\n            setters: {setAttack: '2d5'}\n        }},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of webs', base: 'RuneBase',\n        use: {addElement: {elementName: 'Web', numAllowed: 1}},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of cold', base: 'RuneBase',\n        use: {addComp: {\n            name: 'Coldness', duration: '100d5 + 50'\n        }},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of fire', base: 'RuneBase',\n        use: {addEntity: {entityName: 'Fire', duration: 50}},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of force', base: 'RuneBase',\n        use: {addEntity: {entityName: 'Forcefield'}},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of skies', base: 'RuneBase',\n        use: {addComp: {name: 'Flying', duration: '5d10 + 5'}},\n        value: value('rune', 100)\n    },\n    {\n        name: 'rune of ice flames', base: 'RuneBase',\n        use: {addEntity: {entityName: 'Ice flame', duration: 100}},\n        value: value('rune', 150)\n    },\n    {\n        name: 'rune of tunneling', base: 'RuneBase',\n        use: 'digger',\n        value: value('rune', 150)\n    },\n    {\n        name: 'rune of traps', base: 'RuneBase',\n        use: {addElement: {elementName: 'Hole', numAllowed: 1}},\n        value: value('rune', 150)\n    },\n    {\n        name: 'rune of poison clouds', base: 'RuneBase',\n        use: {addEntity: {entityName: 'Poison gas', duration: 30}},\n        value: value('rune', 150)\n    },\n    {\n        name: 'rune of venom', base: 'RuneBase',\n        use: {poison: {duration: '4d6 + 5', damage: '1d8 + 2', prob: '0.2'}},\n        value: value('rune', 150)\n    },\n    {\n        name: 'rune of control', base: 'RuneBase',\n        use: {addComp: {name: 'MindControl', duration: '1d4 + 2'}},\n        value: value('rune', 250)\n    },\n\n    // MINERALS\n    {\n        name: 'MineralBase', dontCreate: true,\n        type: 'mineral', char: ']'\n    },\n    {\n        name: 'iron ore', base: 'MineralBase',\n        weight: 0.3, value: value('mineral', 20),\n        className: 'cell-item-iron'\n    },\n    {\n        name: 'ruby glass ore', base: 'MineralBase',\n        weight: 0.1, value: value('mineral', 100),\n        className: 'cell-item-ruby-glass'\n    },\n    {\n        name: 'emerald', base: 'MineralBase',\n        weight: 0.15, value: value('mineral', 150),\n        char: '*', color: {fg: 'Green', bg: 'Black'}\n    },\n    {\n        name: 'permaice ore', base: 'MineralBase',\n        weight: 0.4, value: value('mineral', 100),\n        className: 'cell-item-ice'\n    },\n    {\n        name: 'sapphire', base: 'MineralBase',\n        weight: 0.15, value: value('mineral', 150),\n        char: '*', color: {fg: 'Blue', bg: 'White'}\n    },\n    {\n        name: 'forium ore', base: 'MineralBase',\n        weight: 0.2, value: value('mineral', 150),\n        className: 'cell-item-magic'\n    },\n    {\n        name: 'netherium ore', base: 'MineralBase',\n        weight: 0.3, value: value('mineral', 200),\n        className: 'cell-item-void'\n    },\n    {\n        name: 'ruby', base: 'MineralBase',\n        weight: 0.2, value: value('mineral', 250),\n        char: '*', className: 'cell-item-ruby-glass'\n    },\n    {\n        name: 'ice diamond', base: 'MineralBase',\n        weight: 0.3, value: value('mineral', 400),\n        char: '*', className: 'cell-item-ice'\n    },\n\n\n    // SPECIAL ITEMS (not generated procedurally)\n    {\n        name: 'MagicalArrowBase', noRandom: true,\n        type: 'ammo', char: '/', addComp: 'Magical'\n    },\n    {\n        name: 'Ice arrow', base: 'MagicalArrowBase',\n        className: 'cell-item-ice'\n    },\n    {\n        name: 'Lightning arrow', base: 'MagicalArrowBase',\n        className: 'cell-item-lightning'\n    },\n    {\n        name: 'Energy arrow', base: 'MagicalArrowBase',\n        className: 'cell-item-energy'\n    },\n    {\n        name: 'Poison arrow', base: 'MagicalArrowBase',\n        className: 'cell-item-poison'\n    },\n    {\n        name: 'Arrow of webs', base: 'MagicalArrowBase',\n        className: 'cell-item-energy'\n    }\n\n    // ARTIFACT ITEMS\n];\n\n// Maps the weapon type to damage type. Default is RG.DMG.BLUNT, unless\n// specified otherwise here\nconst dmgTypes = {\n    sword: RG.DMG.SLASH,\n    spear: RG.DMG.PIERCE,\n    dagger: RG.DMG.SLASH,\n    axe: RG.DMG.SLASH,\n\n    dart: RG.DMG.PIERCE,\n    shuriken: RG.DMG.SLASH,\n\n    bow: RG.DMG.PIERCE,\n    crossbow: RG.DMG.PIERCE,\n    rifle: RG.DMG.PIERCE\n};\n\n/* Set damage types for weapons. */\nItems.forEach((item: ObjectShell) => {\n    if (item.weaponType) {\n        if (dmgTypes.hasOwnProperty(item.weaponType)) {\n            item.damageType = dmgTypes[item.weaponType];\n        }\n    }\n    else if (item.ammoType) {\n        if (dmgTypes.hasOwnProperty(item.ammoType)) {\n            item.damageType = dmgTypes[item.ammoType];\n        }\n    }\n});\n\n\nexport default Items;\n","/* This file contains color variables which can be used in\n * actors, elements and items.\n */\n\nexport const Colors: any = {};\n\n// Colors.race must be defined as objects {fg: <color1>, bg: <color2>}.\n// See scss/_colors.scss for list of allowed colors\nColors.race = {};\nColors.race.animal = {bg: 'Brown'};\nColors.race.avianfolk = {bg: 'GreenYellow'};\nColors.race.bearfolk = {bg: 'GreenYellow'};\nColors.race.catfolk = {bg: 'GreenYellow'};\nColors.race.dark = {bg: 'Brown'};\nColors.race.dogfolk = {bg: 'GreenYellow'};\nColors.race.dwarven = {fg: 'White', bg: 'Brown'};\nColors.race.goblin = {bg: 'GreenYellow'};\nColors.race.human = {bg: 'Brown'};\nColors.race.hyrkhian = {bg: 'Brown'};\nColors.race.hyrm = {bg: 'Brown'};\nColors.race.spirit = {bg: 'White'};\nColors.race.undead = {bg: 'Black'};\nColors.race.wildling = {bg: 'Brown'};\nColors.race.wolfclan = {bg: 'Brown'};\n\n// Role colors must be defined as strings, and given to items/actors as\n// colorfg: Colors.role.archer, for example\nColors.role = {};\nColors.role.archer = 'Yellow';\nColors.role.berserker = 'Pink';\nColors.role.commander = 'Yellow';\nColors.role.elite = 'Cyan';\nColors.role.fighter = 'Blue';\nColors.role.king = 'Red';\nColors.role.mage = 'Purple';\nColors.role.slinger = 'Purple';\n","/* File contains elements used in the game. */\n\n/* eslint comma-dangle: 0 */\n// const RG = require('../src/rg');\n\nconst Elements = [\n    {\n        name: 'bed', className: 'cell-element-bed',\n        char: '=',\n        msg: {\n            onEnter: 'There is a bed here for resting'\n        },\n        addComp: ['Indoor']\n    },\n    {\n        name: 'bridge', className: 'cell-element-bridge',\n        char: '=',\n        msg: {\n            onEnter: 'You are standing on a bridge.'\n        }\n    },\n    {\n        name: 'chasm', className: 'cell-element-chasm',\n        char: '~', addComp: ['Impassable']\n    },\n    {\n        name: 'grass', className: 'cell-element-grass',\n        char: '\"',\n        msg: {\n            onEnter: 'You see some grass.'\n        }\n    },\n    {\n        name: 'snowy grass', className: 'cell-element-snowy-grass',\n        char: '\"', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'You see some snow-covered grass.'\n        }\n    },\n    {\n        name: 'highrock', className: 'cell-element-highrock',\n        char: '^', addComp: ['Impassable', 'Opaque']\n    },\n    {\n        name: 'floor', className: 'cell-element-floor',\n        char: '.'\n    },\n    {\n        name: 'floorcastle', className: 'cell-element-floor-castle',\n        char: '.',\n        addComp: ['Indoor']\n    },\n    {\n        name: 'floorcave', className: 'cell-element-floor-cave',\n        char: '.',\n        addComp: ['Indoor']\n    },\n    {\n        name: 'floorcrypt', className: 'cell-element-floor-crypt',\n        char: '.',\n        addComp: ['Indoor']\n    },\n    {\n        name: 'floorhouse', className: 'cell-element-floor-house',\n        char: '.',\n        addComp: ['Indoor']\n    },\n    {\n        name: 'floorwooden', className: 'cell-element-floor-wooden',\n        char: '.',\n        addComp: ['Indoor']\n    },\n    {\n        name: 'fort', className: 'cell-element-fort',\n        char: '#', addComp: ['Impassable']\n    },\n    {\n        name: 'lava', className: 'cell-element-lava',\n        char: '~', addComp: ['Impassable']\n    },\n    {\n        name: 'path', className: 'cell-element-path',\n        char: '.',\n    },\n    {\n        name: 'road', className: 'cell-element-road',\n        char: '.',\n        msg: {\n            onEnter: 'You tread lightly on the road.'\n        }\n    },\n    {\n        name: 'sky', className: 'cell-element-sky',\n        char: '~', addComp: ['Impassable']\n    },\n    {\n        name: 'light snow', className: 'cell-element-light-snow',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'A thin layer of snow is on the ground'\n        }\n    },\n    {\n        name: 'light snow with tracks',\n        className: 'cell-element-light-snow-tracks',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'Someone has traversed this thin crust of snow'\n        }\n    },\n    {\n        name: 'snow', className: 'cell-element-snow',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'Ground is covered with snow.'\n        }\n    },\n    {\n        name: 'snow with tracks', className: 'cell-element-snow-tracks',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'Someone has left their tracks on snow'\n        }\n    },\n    {\n        name: 'deep snow', className: 'cell-element-deep-snow',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'Snow is deep and difficult to traverse here'\n        }\n    },\n    {\n        name: 'deep snow with tracks',\n        className: 'cell-element-deep-snow-tracks',\n        char: '.', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'Snow is deep, but there are some tracks here'\n        }\n    },\n    {\n        name: 'stone', className: 'cell-element-stone',\n        char: '^'\n    },\n    {\n        name: 'tree', className: 'cell-element-tree',\n        char: 'T', addComp: ['Opaque'],\n        msg: {\n            onEnter: 'There is a tree here.'\n        }\n    },\n    {\n        name: 'snow-covered tree', className: 'cell-element-snow-tree',\n        char: 'T', addComp: ['Opaque', 'Snowy'],\n        msg: {\n            onEnter: 'There is a snow-covered tree here.'\n        }\n    },\n    {\n        name: 'water', className: 'cell-element-water',\n        char: '~',\n        msg: {\n            onEnter: 'Water slows you down'\n        }\n        // addComp: {name: 'Terrain', setters: {setDifficulty: 5}}\n    },\n    {\n        name: 'frozen water', className: 'cell-element-frozen-water',\n        char: '~', addComp: ['Snowy'],\n        msg: {\n            onEnter: 'There is some ice here'\n        }\n        // addComp: {name: 'Terrain', setters: {setDifficulty: 5}}\n    },\n    {\n        name: 'closed window', className: 'cell-element-window',\n        char: '+', addComp: ['Impassable']\n    },\n\n    //---------------------------------------------------------\n    // Presentational-only elements, only rendering info stored\n    // NOTE: Adding anything else here than char/className will\n    //       NOT affect these elements\n    //---------------------------------------------------------\n    {\n        dontCreate: true, name: 'web',\n        char: '|', className: 'cell-element-web'\n    },\n    {\n        dontCreate: true, name: 'slime',\n        char: '|', className: 'cell-element-slime'\n    },\n    {\n        dontCreate: true, name: 'hole',\n        char: '^', className: 'cell-element-hole'\n    },\n    {\n        dontCreate: true, name: 'mountain',\n        char: '^', className: 'cell-element-mountain'\n    },\n    {\n        dontCreate: true, name: 'town',\n        char: 'o', className: 'cell-element-town'\n    },\n    {\n        dontCreate: true, name: 'battle',\n        char: 'X', className: 'cell-element-battle'\n    },\n    {\n        dontCreate: true, name: 'cityfort',\n        char: 'o', className: 'cell-element-fort'\n    },\n    {\n        dontCreate: true, name: 'wallcastle',\n        char: '#', className: 'cell-element-castle'\n    }\n\n];\n\nexport default Elements;\n","/* eslint comma-dangle: 0 */\n\nimport RG from '../src/rg';\nimport {Dice} from '../src/dice';\nimport * as Component from '../src/component';\n\ninterface TargetObj {\n    target: any;\n}\n\ninterface Setters {\n    [key: string]: any;\n}\n\ninterface EffArgs {\n    all?: boolean;\n    duration?: number | string;\n    effectType: string;\n    name?: string;\n    entityName?: string;\n    target: TargetObj;\n    targetType: string[];\n    setters?: Setters;\n}\n\nconst entities = ['actors', 'items', 'elements'];\n\nconst getTargetActor = (obj) => {\n    if (!obj) {\n        const msg = 'Possibly missing args for useItem().';\n        RG.err('effects.js', 'getTargetActor',\n            `Given object was null/undefined. ${msg}`);\n    }\n    if (obj.hasOwnProperty('target')) {\n        const cell = obj.target;\n        if (cell.hasActors()) {\n            return cell.getProp('actors')[0];\n        }\n    }\n    return null;\n};\n\nconst createUseItemComp = (item, target, effArgs?: EffArgs) => {\n    const useItem = new Component.UseItem();\n    useItem.setTarget(target);\n    useItem.setItem(item);\n    if (effArgs) {\n        useItem.setEffect(effArgs);\n    }\n    const useType = RG.getItemUseType(item, target);\n    useItem.setUseType(useType);\n    item.getTopOwner().add(useItem);\n};\n\nconst getDuration = function(durStr: string): number {\n    const arr = Dice.parseDieSpec(durStr);\n    const durDie = new Dice(arr[0], arr[1], arr[2]);\n    const duration = durDie.roll();\n    return duration;\n};\n\nexport const Effects = {\n\n    // Effects can be used in items freely.\n    // Each obj arg will have {target:cell}\n    // In use-function, 'this' bound to the used item\n    // Item user is generally item owner: const user = this.getOwner();\n\n    // Each effect entry looks like the following\n    // { name: \"effectName\",\n    //   func: function(obj) {...}, // 'this' bound to the used item\n    //   requires: required args inside item, these can be used inside functions\n    //      using this.useArgs.argName.\n\n    // Example:\n    // Given EFFECT:\n    // {name: \"heal\", func: function(obj) {..}, requires: \"hp\"}\n    // The item must be specified in the following way:\n    // {\n    //  name: \"Healing potion\",\n    //  use: {heal: {hp: \"2d4+8\"}}\n    // }\n\n\n    effects: [\n\n        // Generic use function added to all items with use effects\n        // Calls each use-function implementation\n        {\n            name: 'use',\n            func(obj) {\n                if (this.getCharges) {\n                    if (this.getCharges() === 0) {\n                        const name = this.getName();\n                        RG.gameMsg(`${name} does not have any charges left`);\n                        return false;\n                    }\n                }\n                for (let i = 0; i < this.useFuncs.length; i++) {\n                    if (this.useFuncs[i].call(this, obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n        },\n\n        // Adds an effect (via Component) for specified duration\n        // Example: {addComp: {name: \"Ethereal\", duration: \"3d3\"}}\n        // In fact, addComp: {name: \"Stun\", duration: \"1d6\"} is identical to\n        // 'stun' effect.\n        //\n        // To create temporary boosts, you can use the following:\n        // use: {addComp:\n        //    {name: 'CombatMods', setters: {setDefense: 5}, duration: '2d4'}\n        // }\n        {\n            name: 'addComp',\n            requires: ['name', 'duration'],\n            optional: ['setters'],\n            func(obj) {\n                const effArgs: EffArgs = {\n                    duration: this.useArgs.duration,\n                    effectType: 'AddComp',\n                    name: this.useArgs.name,\n                    target: obj,\n                    targetType: ['actors', 'items']\n                };\n                if (this.useArgs.setters) {\n                    effArgs.setters = this.useArgs.setters;\n                }\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            },\n        },\n\n        // Removes a component from an entity.\n        // Optionally all: true can be given to remove all comps\n        {\n            name: 'removeComp',\n            requires: ['name'],\n            optional: ['all'],\n            func(obj) {\n                const effArgs: EffArgs = {\n                    all: this.useArgs.all,\n                    effectType: 'RemoveComp',\n                    name: this.useArgs.name,\n                    target: obj,\n                    targetType: entities\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            },\n        },\n\n        // Modifies specified component value.\n        // Given use: {modifyCompValue: {name: 'Health', set: 'setHP', get:\n        // 'getHP', value: -1}},\n        // one can be subtracted from hp of Health component.\n        {\n            name: 'modifyCompValue',\n            requires: ['name', 'set', 'get', 'value'],\n            optional: ['op'],\n            func(obj) {\n                const effArgs = {\n                    target: obj,\n                    targetType: entities,\n                    name: this.useArgs.name,\n                    set: this.useArgs.set, get: this.useArgs.get,\n                    value: this.useArgs.value,\n                    effectType: 'ModifyCompValue'\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            },\n\n        },\n\n        // Cures an effect specified in use: {cure: {effect: Poison}}\n        {\n            name: 'cure',\n            requires: ['effect'],\n            func(obj) {\n                const actor = getTargetActor(obj);\n                if (actor) {\n                    const effectName = this.useArgs.effect.capitalize();\n                    if (actor.has(effectName)) {\n                        // const rmvComp = actor.get(effectName);\n                        actor.remove(effectName);\n                        RG.gameMsg(actor.getName()\n                            + ' seems to be cured of ' + effectName);\n                    }\n                    else {\n                        RG.gameMsg(this.getName() + ' was wasted');\n                    }\n                    createUseItemComp(this, actor);\n                    return true;\n                }\n                return false;\n            },\n\n        },\n\n        // Digger effect can be used to dig into stones and rocks\n        {\n            name: 'digger',\n            func(obj) {\n                const name = this.getTopOwner().getName();\n                const msg = `${name} digs through stone with ${this.getName()}`;\n                const effArgs = {\n                    // name: this.useArgs.name,\n                    effectType: 'ChangeElement',\n                    fromType: 'wall',\n                    target: obj,\n                    startMsg: msg,\n                    targetType: ['elements']\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            },\n        },\n\n        // Healing effect restores hit points to the target\n        {\n            name: 'heal',\n            requires: ['hp'],\n            func(obj) {\n                const actor = getTargetActor(obj);\n                if (actor) {\n                    const die = Dice.create(this.useArgs.hp);\n                    const pt = die.roll();\n                    if (actor.has('Health')) {\n                        actor.get('Health').addHP(pt);\n                        createUseItemComp(this, actor);\n                        RG.gameMsg(actor.getName() +\n                            ' drinks ' + this.getName());\n                        return true;\n                    }\n                }\n                else {\n                    RG.gameWarn(\n                        'Cannot see anyone there for using the potion.');\n                }\n                return false;\n            },\n        }, // heal\n\n        // Poison effect which deals damage for a period of time bypassing any\n        // protection\n        {\n            name: 'poison',\n            requires: ['duration', 'damage', 'prob'],\n            func(obj) {\n                const arr = Dice.parseDieSpec(this.useArgs.damage);\n                const dmgDie = new Dice(arr[0], arr[1], arr[2]);\n                const effArgs = {\n                    target: obj,\n                    targetType: ['actors', 'items'],\n                    name: 'Poison',\n                    duration: this.useArgs.duration,\n                    effectType: 'AddComp',\n                    setters: {\n                        setDamageDie: dmgDie,\n                        setProb: this.useArgs.prob,\n                        setSource: this.getTopOwner()\n                    }\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            },\n        }, // poison\n\n        // Stun effect\n        {\n            name: 'stun',\n            requires: ['duration'],\n            func(obj) {\n                const actor = getTargetActor(obj);\n                if (actor) {\n                    const stunDur = getDuration(this.useArgs.duration);\n                    const stunComp = new Component.Stun();\n                    const expiration = new Component.Expiration();\n                    expiration.addEffect(stunComp, stunDur);\n\n                    const itemOwner = this.getTopOwner();\n                    stunComp.setSource(itemOwner);\n\n                    actor.add(stunComp);\n                    actor.add(expiration);\n                    createUseItemComp(this, actor);\n                    RG.gameMsg(actor.getName() +\n                        ' is stunned by ' + this.getName());\n                    return true;\n                }\n                return false;\n            }\n        }, // stun\n\n        // Modifies of the actor stats with given value\n        {\n            name: 'modifyStat',\n            requires: ['statName', 'value'],\n            func(obj) {\n                const effArgs = {\n                    target: obj,\n                    targetType: ['actors'],\n                    name: 'Stats',\n                    set: 'set' + this.useArgs.statName.capitalize(),\n                    get: 'get' + this.useArgs.statName.capitalize(),\n                    value: this.useArgs.value,\n                    effectType: 'ModifyCompValue'\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            }\n        },\n\n        // Adds an entity into a cell. Use this only if entity is specified\n        // using object shells in data/items.ts, data/actors.ts or\n        // data/elements.ts. If you want to use your own constructor for an\n        // element, then use 'addElement'\n        {\n            name: 'addEntity',\n            requires: ['entityName'],\n            optional: ['duration'],\n            func(obj) {\n                const effArgs = {\n                    target: obj,\n                    targetType: ['cell'],\n                    entityName: this.useArgs.entityName,\n                    effectType: 'AddEntity',\n                    duration: this.useArgs.duration\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            }\n        },\n\n        // Adds an element into a cell. numAllowed indicates how many of these\n        // elements can be piled up into a cell\n        {\n            name: 'addElement',\n            requires: ['elementName'],\n            optional: ['duration', 'numAllowed'],\n            func(obj) {\n                const effArgs = {\n                    target: obj,\n                    targetType: ['cell'],\n                    elementName: this.useArgs.elementName,\n                    effectType: 'AddElement',\n                    duration: this.useArgs.duration,\n                    numAllowed: this.useArgs.numAllowed || 1,\n                    successMsg: this.useArgs.successMsg,\n                    failureMsg: this.useArgs.failureMsg,\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            }\n        },\n\n        // Removes an element from a cell. Notice that there is no support for\n        // temporal removal (too tricky to implement for now)\n        {\n            name: 'removeElement',\n            requires: ['elementName'],\n            optional: ['successMsg', 'failureMsg'],\n            func(obj) {\n                const effArgs = {\n                    target: obj,\n                    targetType: ['cell'],\n                    elementName: this.useArgs.elementName,\n                    effectType: 'RemoveElement',\n                    successMsg: this.useArgs.successMsg,\n                    failureMsg: this.useArgs.failureMsg,\n                };\n                createUseItemComp(this, obj, effArgs);\n                return true;\n            }\n        },\n\n    ],\n\n};\n","/* Contains an actor generator. Generates 'object shells' which are then used\n * for the procedural generation. */\n\nimport RG from '../src/rg';\nimport {Random} from '../src/random';\nimport {mixNewShell} from './shell-utils';\nimport {BypassComp, resistance} from './actors';\n\nexport const ActorGen: any = {};\n\nconst RNG = new Random();\n\n// Mods that can be applied to actors\nconst mods = {\n    size: {\n        tiny: [{strength: -2, speed: 15}],\n        small: [{strength: -1, speed: 10}],\n        normal: [],\n        big: [{accuracy: -1, strength: 2}],\n        huge: [{accuracy: -2, strength: 4, speed: -10}]\n    },\n\n    disposition: {\n        friendly: [],\n        neutral: [],\n        hostile: []\n    }\n\n};\n\nconst randWeights = {\n    size: {\n        tiny: 1,\n        small: 2,\n        normal: 5,\n        big: 2,\n        huge: 1\n    },\n\n};\n\nexport interface IShell {\n    [key: string]: any;\n}\n\nexport interface StringMap<T> {\n    [key: string]: T;\n}\n\ninterface ShellProps {\n    races: StringMap<IShell>;\n    ranks: StringMap<IShell>;\n    roleBases: StringMap<IShell>;\n    roles: StringMap<StringMap<IShell> >;\n}\n\nconst shellProps: ShellProps = {\n    races: {},\n    ranks: {},\n    roles: {},\n    roleBases: {}\n};\n\nconst baseShell: IShell = {\n    range: 1, danger: 1, speed: 100, brain: 'GoalOriented',\n    damage: '1d6', attack: 1, defense: 1, hp: 5,\n    protection: 0,\n    enemies: RG.ACTOR_RACES,\n    accuracy: 5, agility: 5, strength: 5, magic: 5, perception: 5,\n    willpower: 5\n};\n\n\nshellProps.races = {\n    arborean: {\n        strength: 3, willpower: 5,\n        type: 'arborean', prefix: 'arborean', char: 'a', colorbg: 'white'\n    },\n    elf: {\n        strength: -1, agility: 4, accuracy: 4, magic: 3,\n        type: 'elf', prefix: 'elven', char: 'e', colorbg: 'green'\n    },\n    fae: {\n        type: 'fae', prefix: 'fae', char: 'f', colorbg: 'purple',\n        speed: 10,\n        strength: -2, magic: 3, addComp: ['Flying']\n    },\n    gnome: {\n        strength: -1, magic: 3, perception: 5,\n        type: 'gnome', prefix: 'gnomish', char: 'n', colorbg: 'beige'\n    },\n    ogre: {\n        strength: 4, magic: -3, willpower: -3,\n        type: 'ogre', prefix: 'ogre', char: 'O', colorbg: 'darkseagreen'\n    },\n    orc: {\n        strength: 2, magic: -2, willpower: -2,\n        type: 'orc', prefix: 'orc', char: 'o', colorg: 'darkseagreen'\n    },\n    ratling: {\n        agility: 2, perception: 4,\n        type: 'ratling', prefix: 'ratling', char: 'r', colorbg: 'grey'\n    },\n    vachefolk: {\n        strength: 2,\n        type: 'vachefolk', prefix: 'vachefolk', char: 'v', colorbg: 'brown'\n    },\n    valkyr: {\n        strength: 3,\n        type: 'valkyr', prefix: 'valkyr', char: 'V', colorbg: 'darkblue',\n        addComp: [resistance('ICE', 'MEDIUM')]\n\n    },\n};\n\nconst raceNames = Object.keys(shellProps.races);\n\n/* One rank is chosen for each actor. This has a big impact on HP. */\nshellProps.ranks = {\n    commoner: {\n        danger: 1, hp: 5\n    },\n    adventurer: {\n        danger: 2, hp: 10\n    },\n    sergeant: {\n        danger: 3,\n        strength: 1, hp: 15\n    },\n    commander: {\n        danger: 5,\n        strength: 5, hp: 20,\n        equip: ['Great battle axe', 'Steel armour', 'Steel helmet'],\n    },\n    steward: {\n        danger: 5, hp: 20\n    },\n    lord: {\n        danger: 5,\n        strength: 7, hp: 20,\n    },\n    warlord: {\n        danger: 7, hp: 25\n    },\n    captain: {\n        danger: 7, hp: 25,\n        strength: 7, agility: 3, accuracy: 3\n    },\n    prince: {\n        danger: 5, hp: 20\n    },\n    princess: {\n        danger: 5, agility: 5, magic: 5, hp: 20\n    },\n    queen: {\n        colorfg: 'yellow',\n        danger: 10, hp: 30,\n        addComp: ['FirstStrike'],\n    },\n    king: {\n        colorfg: 'red',\n        strength: 7, attack: 7, defense: 7,\n        danger: 12, hp: 40,\n    },\n    emperor: {\n        colorfg: 'purple',\n        danger: 15,\n        strength: 10, attack: 10, defense: 10,\n        hp: 50,\n        addComp: [BypassComp(0.15)]\n    },\n    empress: {\n        colorfg: 'palevioletred',\n        danger: 17,\n        accuracy: 10, agility: 10, attack: 10, defense: 10,\n        hp: 45,\n        addComp: [BypassComp(0.25), 'Charm']\n    },\n    overlord: {\n        danger: 10, hp: 35,\n        addComp: [BypassComp(0.10)]\n    },\n};\nconst rankNames = Object.keys(shellProps.ranks);\n\nshellProps.roleBases = {\n    melee: {\n        attack: 2, defense: 2, protection: 2, danger: 1\n    },\n    magic: {\n        magic: 3, willpower: 2, danger: 2,\n        brain: 'SpellCaster', maxPP: 10, PP: 10,\n        addComp: ['RegenEffect']\n    },\n    ranged: {\n        accuracy: 3, agility: 1, danger: 2,\n        addComp: [{\n            random: [\n                'EagleEye', 'StrongShot', 'ThroughShot', 'LongRangeShot',\n                'RangedEvasion', 'CriticalShot'\n            ]\n        }]\n    },\n    stealth: {\n        defense: 2,\n        agility: 3, perception: 2, danger: 1\n    }\n};\n\n/* Contains a list specific roles for each role base type. */\nshellProps.roles = {\n\n    melee: {\n        axeman: {\n            danger: 2, hp: 10\n        },\n        brave: {\n            danger: 2, hp: 7,\n            strength: 2\n        },\n        duelist: {\n            danger: 3, hp: 13,\n            agility: 3, strength: 2\n        },\n        elite: {\n            danger: 5, hp: 23,\n            strength: 4,\n            addComp: ['CounterAttack']\n        },\n        fighter: {\n            danger: 2, hp: 12,\n            agility: 1, strength: 1,\n        },\n        footman: {\n            danger: 1,\n            equip: ['Longsword']\n        },\n        knight: {\n            danger: 4, hp: 15,\n            strength: 4,\n        },\n        phalanx: {\n            danger: 1, hp: 10,\n            defense: 4,\n            equip: ['Spear']\n        },\n        scourger: {\n            danger: 4, hp: 20,\n            attack: 4, defense: 4, strength: 6,\n        },\n        judicator: {\n            danger: 5, hp: 30,\n            attack: 5, defense: 5, strength: 7,\n            addComp: ['FirstStrike']\n        },\n        skirmisher: {\n            danger: 3, hp: 15,\n            attack: 3, defense: 3\n        },\n        hunter: {\n            danger: 2, hp: 10,\n            attack: 3, defense: 3\n        },\n        warrior: {\n            danger: 2, hp: 10,\n            attack: 3, defense: 3\n        }\n    },\n\n    magic: {\n        adept: {\n            danger: 1, pp: 3, maxPP: 3, hp: 5,\n            spells: ['EnergyArrow']\n        },\n        archmage: {\n            danger: 15, pp: 40, maxPP: 40, hp: 30,\n            spells: [\n                'PowerDrain',\n                {random: ['WaterBolt', 'SlimeBolt', 'FrostBolt']},\n                {random: ['Heal', 'MagicArmor', 'Charm']},\n                {random: ['IceArrow', 'PoisonArrow', 'ArrowOfWebs']},\n            ]\n        },\n        bard: {\n            danger: 3,\n            magic: 5, pp: 7, maxPP: 7, hp: 7,\n            spells: ['SummonAnimal'],\n        },\n        cleric: {\n            danger: 1, magic: 2, willpower: 3,\n            pp: 7, maxPP: 7,\n            spells: ['Heal']\n        },\n        healer: {\n            danger: 1,\n            magic: 2, pp: 7, maxPP: 7,\n            spells: ['Heal']\n        },\n        /* herbalist: {\n        },*/\n        mage: {\n            danger: 5, magic: 5, willpower: 5, hp: 13,\n            spells: [{random: ['RingOfFire', 'RingOfFrost']}]\n        },\n        telepath: {\n            danger: 4, pp: 12, maxPP: 12, hp: 12,\n            magic: 4, willpower: 4,\n            spells: ['SummonFlyingEyes', 'Telepathy']\n        },\n        necromancer: {\n            danger: 5, pp: 10, maxPP: 10, hp: 15,\n            spells: ['AnimateDead']\n        },\n        runemage: {\n            danger: 3, pp: 15, maxPP: 15, hp: 15,\n            spells: ['StunningTouch'],\n        },\n        shaman: {\n            danger: 3, pp: 15, maxPP: 15, hp: 10,\n            spells: ['IcyPrison']\n        },\n        summoner: {\n            danger: 7, pp: 15, maxPP: 15, hp: 15,\n            spells: [{random: ['SummonKin', 'SummonAirElemental']}]\n        },\n        wizard: {\n            danger: 10, maxPP: 30, pp: 30, hp: 15,\n            magic: 7, willpower: 7,\n            spells: [\n                {random: ['CrossBolt', 'FrostBolt', 'LightningBolt']},\n                {random: ['Heal', 'MagicArmor', 'Paralysis']}\n            ]\n        },\n    },\n\n    ranged: {\n        arbalist: {\n            danger: 3, hp: 10,\n            equip: ['Wooden crossbow', {name: 'Wooden bolt', count: 10}]\n       },\n        archer: {\n            danger: 3, hp: 5,\n              equip: [\n                  'Wooden bow', {name: 'Wooden arrow', count: 10},\n                  'Steel bow', {name: 'Steel arrow', count: 15}\n              ]\n        },\n        bolter: {\n            danger: 4, hp: 5,\n            equip: ['Steel crossbow', {name: 'Steel bolt', count: 7}]\n        },\n        rifleman: {\n            danger: 6, hp: 15,\n            equip: ['Rifle', {name: 'Steel bullet', count: 7}]\n        },\n        darter: {\n            danger: 2, hp: 5,\n            equip: [{name: 'Iron dart', count: 9}]\n        },\n        thrower: {\n            danger: 1,\n            equip: [{name: 'Throwing axe', count: 7}]\n        },\n        catapulter: {\n            danger: 2, hp: 15,\n            strength: 5, speed: -5,\n            equip: [{name: 'Large rock', count: 4}]\n        },\n        sharpshooter: {\n            danger: 8, hp: 20,\n            accuracy: 5, agility: 5,\n            equip: ['Rifle', {name: 'Steel bullet', count: 10}],\n            fovrange: 7,\n        },\n        slinger: {\n            danger: 1, hp: 3,\n            equip: [{name: 'Rock', count: 10}]\n        }\n    },\n\n    stealth: {\n        assassin: {\n            danger: 3,\n            addComp: [resistance('POISON', 'MEDIUM')],\n        },\n        acrobat: {\n            danger: 2,\n            brain: 'Thief', speed: 20\n        },\n        rogue: {\n        },\n        scout: {\n            danger: 2, speed: 10, fovrange: 7\n        },\n        thief: {\n            danger: 2,\n            brain: 'Thief'\n        }\n    },\n};\nconst roleTypes: string[] = Object.keys(shellProps.roles);\n\n/* Generates a random actor shell using the following formula:\n * 1. Pick a race from shellProps.races\n * 2. Pick a rank from shellProps.ranks\n * 3. Pick up to 2 roles:\n *   - Choose base type for role from shellProps.roleBases\n *   - Choose actual role from shellProps.roles\n * 4. Generate the full actor based based on 1. - 3.\n * 5. Combine object data from 1. - 3. and return the result.\n */\nActorGen.genRandShell = function(): IShell {\n    const numRoles = RNG.getUniformInt(1, 2);\n    const raceName = RNG.arrayGetRand(raceNames);\n    const raceShell: IShell = shellProps.races[raceName];\n\n    const rankName = RNG.arrayGetRand(rankNames);\n    const rankShell: IShell = shellProps.ranks[rankName];\n\n    // Get the role types to be used (ie stealth/melee/magic)\n    const rTypes: string[] = RNG.getUniqueItems(roleTypes, numRoles);\n\n    const roleBaseShells = rTypes.map(r => shellProps.roleBases[r]);\n\n    // Then find shells for these roles\n    let fullRoleName = '';\n    const roleNames = [];\n    const usedRoleShells: IShell[] = rTypes.map((r: string) => {\n        const roleShells: StringMap<IShell> = shellProps.roles[r];\n        const roleName = RNG.arrayGetRand(Object.keys(roleShells));\n        fullRoleName += ' ' + roleName;\n        roleNames.push(roleName);\n        return roleShells[roleName];\n    });\n\n    const allShells = [baseShell, raceShell, rankShell]\n        .concat(roleBaseShells)\n        .concat(usedRoleShells);\n    const newShell = mixNewShell(allShells);\n    if (rankName !== 'commoner') {\n        newShell.name = raceShell.prefix + fullRoleName + ' ' + rankName;\n    }\n    else {\n        newShell.name = raceShell.prefix + fullRoleName;\n    }\n    newShell.roleTypes = rTypes;\n    newShell.roles = roleNames;\n    return newShell;\n};\n\n/* Generates the given number of actor shells from data in shellProps. */\nActorGen.genActors = function(nActors: number): IShell[] {\n    const result = [];\n    for (let i = 0; i < nActors; i++) {\n        result.push(ActorGen.genRandShell());\n    }\n    return result;\n};\n\n","/* Contains code for generating different types of houses. This builds on\n * top of houses tiles that use Template.templ.\n */\n\nimport RG from './rg';\nimport {TemplateLevel} from './template.level';\nimport {Houses5x5} from '../data/tiles.houses';\nimport {Random} from './random';\nimport {TCoord, BBox} from './interfaces';\nimport {Geometry} from './geometry';\n\nconst RNG = Random.getRNG();\n\nconst WALL = '#';\nconst FLOOR = ':';\nconst DOOR = '+';\n\nexport class House {\n\n    public coord: {[key: string]: TCoord[]};\n    public map: any[][];\n    public x: number;\n    public y: number;\n    public cX: number;\n    public cY: number;\n    public w: number;\n    public numFloor: number;\n    public h: number;\n    public door: TCoord;\n    public floor: TCoord[];\n    public walls: TCoord[];\n\n    constructor(map) {\n        this.coord = {};\n        this.map = RG.copy2D(map);\n        this.trimEmpty();\n        this.x = 0;\n        this.y = 0;\n        // Note that w,h take into account also empty space\n        this.w = map.length;\n        this.h = map[0].length;\n\n        let totalX = 0;\n        let totalY = 0;\n        RG.forEach2D(map, (x, y, val) => {\n            if (!this.coord[val]) {this.coord[val] = [];}\n            this.coord[val].push([x, y]);\n            if (val === FLOOR) {\n                totalX += x;\n                totalY += y;\n            }\n            else if (val === DOOR) {\n                this.door = [x, y];\n            }\n        });\n\n        this.floor = this.coord[FLOOR];\n        this.walls = this.coord[WALL];\n\n        const numFloor = Object.values(this.coord[WALL]).length;\n        this.cX = Math.round(totalX / numFloor);\n        this.cY = Math.round(totalY / numFloor);\n        this.numFloor = numFloor;\n    }\n\n    public getCenter(): TCoord {\n        return [this.cX, this.cY];\n    }\n\n    /* Returns the bounding box taken by this house. */\n    public getBbox(): BBox {\n        return {\n            ulx: this.x, uly: this.y,\n            lrx: this.x + this.w - 1,\n            lry: this.y + this.h - 1\n        };\n    }\n\n    /* Remove empty rows from the house map. */\n    public trimEmpty(): void {\n\n    }\n\n    /* Adjusts the house coordinates based on new x,y of the house. */\n    public adjustCoord(x: number, y: number): void {\n        const dX = x - this.x;\n        const dY = y - this.y;\n        // this.x = x;\n        // this.y = y;\n        this.moveHouse(dX, dY);\n    }\n\n    /* Same as adjustCoord() but args must be difference in x,y, not a\n     * new absolute location. */\n    public moveHouse(dX: number, dY: number): void {\n        this.x += dX;\n        this.y += dY;\n        Object.keys(this.coord).forEach(key => {\n            const coord = this.coord[key];\n            coord.forEach(xy => {\n                xy[0] += dX;\n                xy[1] += dY;\n            });\n        });\n        this.cX += dX;\n        this.cY += dY;\n        this.door = [this.door[0] + dX, this.door[1] + dY];\n    }\n\n    /* Tries to add given number of windows to the house. Returns the number\n     * of windows actually added. */\n    public addWindows(nWindows: number): number {\n        this.coord.windows = [];\n        const walls = this.coord[WALL].slice();\n        let nCreated = 0;\n        RNG.shuffle(walls);\n        const wallLut: any = {};\n        walls.forEach(xy => {\n            wallLut[xy[0] + ',' + xy[1]] = true;\n        });\n        this.coord[DOOR].forEach(xy => {\n            wallLut[xy[0] + ',' + xy[1]] = false;\n        });\n\n        for (let i = 0; i < walls.length; i++) {\n            if (nCreated === nWindows) {break;} // We're already done\n            const xy = walls[i];\n            const nFound = [];\n            const box: TCoord[] = Geometry.getBoxAround(xy[0], xy[1], 1);\n            box.forEach((nXY: TCoord) => {\n                if (wallLut[nXY[0] + ',' + nXY[1]]) {\n                    nFound.push(nXY);\n                }\n            });\n\n            // If there are exactly 2 walls adjacent, add a window\n            if (nFound.length === 2 && ((nCreated < nWindows) || nWindows === -1)) {\n                if (this.windowPosOk(xy, nFound)) {\n                    this.coord.windows.push(xy);\n                    wallLut[xy[0] + ',' + xy[1]] = false;\n                    ++nCreated;\n                }\n            }\n        }\n\n        this.coord.windows.forEach(xy => {\n            const index = this.walls.findIndex(sXY => (\n                sXY[0] === xy[0] && sXY[1] === xy[1]\n            ));\n            this.walls.splice(index, 1);\n        });\n        return nCreated;\n    }\n\n    /* Returns true if window position is OK for the wall. */\n    public windowPosOk(xy: TCoord, coord: TCoord[]): boolean {\n        const [x, y] = xy;\n        const [x1, y1] = coord[0];\n        const [x2, y2] = coord[1];\n        if (x === x1) {\n            return Math.abs(y1 - y2) === 2;\n        }\n        else if (y === y1) {\n            return Math.abs(x1 - x2) === 2;\n        }\n        return false;\n    }\n}\n\nexport class HouseGenerator {\n    public baseSizeX: number;\n    public baseSizeY: number;\n\n    constructor() {\n        // For a 5x5 house tiles\n        this.baseSizeX = 2 + 1;\n        this.baseSizeY = 2 + 1;\n    }\n\n    public createHouse(conf): House {\n        const {cols, rows} = conf;\n        const {fullHouse} = conf;\n        const params = this.getGenParams(cols, rows);\n        const {genParamsX, genParamsY} = params;\n        let {tilesX, tilesY} = params;\n\n        if (!Number.isInteger(tilesX) || !Number.isInteger(tilesY)) {\n            // Could not solve good value for tile sizes\n            if (tilesX > 1) {tilesX = Math.floor(tilesX);}\n            else {return null;}\n\n            if (tilesY > 1) {tilesY = Math.floor(tilesY);}\n            else {return null;}\n        }\n\n        const templ = new TemplateLevel(tilesX, tilesY);\n\n        templ.setFiller(Houses5x5.tiles.filler);\n        templ.setTemplates(Houses5x5.templates.all);\n\n        templ.setGenParams({x: genParamsX, y: genParamsY});\n\n        templ.roomCount = -1; // Any number of tiles OK\n        if (fullHouse) {\n            templ.roomCount = tilesX * tilesY;\n            templ.roomCount -= 1; // Entrance\n        }\n        templ.setStartRoomFunc(Houses5x5.startRoomFunc);\n        templ.create();\n\n        // RG.printMap(templ.map);\n        const createdHouse = new House(templ.map);\n        if (conf.addWindows) {\n            const nWindows = tilesX * tilesY;\n            createdHouse.addWindows(RNG.getUniformInt(1, nWindows));\n        }\n\n        return createdHouse;\n    }\n\n    /* Returns the params needed to generate the house, such as number of\n     * tiles and generator params. */\n    public getGenParams(cols, rows) {\n        const sizeX = this.baseSizeX;\n        const sizeY = this.baseSizeY;\n        let x0 = RNG.getUniformInt(1, 3);\n        let x2 = RNG.getUniformInt(1, 3);\n\n        let currSizeX = sizeX + x0 + x2;\n        let watchdogX = RG.WATCHDOG;\n        while (cols % currSizeX !== 0) {\n            x0 = RNG.getUniformInt(1, 3);\n            x2 = RNG.getUniformInt(1, 3);\n            currSizeX = sizeX + x0 + x2;\n            if (--watchdogX === 0) {break;}\n        }\n        const tilesX = cols / currSizeX;\n        const genParamsX = [x0, 1, x2];\n\n        let y0 = RNG.getUniformInt(1, 3);\n        let y2 = RNG.getUniformInt(1, 3);\n        let currSizeY = sizeY + y0 + y2;\n        let watchdogY = RG.WATCHDOG;\n        while (rows % currSizeY !== 0) {\n            y0 = RNG.getUniformInt(1, 3);\n            y2 = RNG.getUniformInt(1, 3);\n            currSizeY = sizeY + y0 + y2;\n            if (--watchdogY === 0) {break;}\n        }\n        const tilesY = rows / currSizeY;\n        const genParamsY = [y0, 1, y2];\n\n        return {\n            tilesX, tilesY, genParamsX, genParamsY\n        };\n    }\n}\n","/* This file contains tiles for creating different types/shapes of houses.\n * Although they could be used to construct full-sized levels, the focus\n * is on narrow spaces and houses.\n * */\n\nimport RG from '../src/rg';\nimport {Template, ElemTemplate} from '../src/template';\nimport {Random, RandWeights} from '../src/random';\n\ninterface HouseData {\n    tiles: {[key: string]: string[]};\n    templates: {[key: string]: ElemTemplate[]};\n    Models: {[key: string]: string[]};\n}\n\nexport const Houses5x5: any = {tiles: {}, templates: {}, Models: {}};\nconst RNG = Random.getRNG();\n\nHouses5x5.tiles.start1x1 = [\n`\nname:start1x1_A\nA=#\nB=#\nC=#\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n##+##`,\n\n`\nname:start1x1_B\nA=#\nB=#\nC=#\nD=#\nE=#\nF=#\n\n.ABC.\nD#:##\nE:::#\nF:::#\n##+##`,\n\n`\nname:start1x1_C\nA=#\nB=#\nC=#\nD=#\nE=#\nF=#\n\n.ABC.\nD#:#.\nE::##\nF:::#\n##+##`,\n\n`\nname:start1x1_D\nA=.\nB=.\nC=.\nD=#\nE=#\nF=#\n\n.ABC.\nD###.\nE::##\nF:::#\n##+##`\n\n];\n\n\nHouses5x5.tiles.start1xN = [\n`\ndir:N\nstartY:max\nstartX:first\nname:start1xN_A\nA=:\nB=:\nC=:\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n##+##`,\n\n`\ndir:N\nstartY:max\nstartX:first\nname:start1xN_B\nA=:\nB=:\nC=:\nD=#\nE=#\nF=#\n\n#ABC#\nD#:##\nE:::#\nF:::#\n##+##`,\n\n`\ndir:N\nstartY:max\nstartX:first\nname:start1xN_C\nA=:\nB=:\nC=:\nD=#\nE=#\nF=.\n\n#ABC#\nD:::#\nE#:##\nF#:#.\n.#+#.`,\n\n`\ndir:N\nstartY:max\nstartX:first\nname:start1xD_C\nA=#\nB=:\nC=#\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n##+##`\n\n];\n\nHouses5x5.tiles.start2xN = [\n`\ndir:NE\nstartX:first\nstartY:max\nname:start2xN_A\nA=:\nB=:\nC=:\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE::::\nF:::#\n##+##`,\n\n`\ndir:NW\nstartX:max\nstartY:max\nname:start2xN_B\nA=#\nB=:\nC=#\nD=#\nE=:\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n##+##`\n];\n\nHouses5x5.tiles.start2xN = Houses5x5.tiles.start2xN.concat(\n    Houses5x5.tiles.start1xN);\n\n// Good starting rooms for houses\nHouses5x5.tiles.start = [\n`\ndir:NEW\nname:entrance2\nA=:\nB=:\nC=:\nD=#\nE=:\nF=#\n\n#ABC#\nD:::#\nE::::\nF:::#\n##+##`,\n\n`\ndir:NW\nname:entrance3\nA=#\nB=:\nC=#\nD=#\nE=:\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n##+##`\n];\n\nHouses5x5.tiles.corners = [\n`\ndir:SE\nname:corner1\nA=#\nB=#\nC=#\nD=#\nE=#\nF=#\n\n#ABC#\nD::::\nE::::\nF:::#\n#::##`,\n\n`\ndir:SEW\nname:corner2\nA=#\nB=#\nC=#\nD=:\nE=:\nF=#\n\n#ABC#\nD::::\nE::::\nF:::#\n##:##`,\n\n`\ndir:SE\nname:corner3\nA=.\nB=.\nC=.\nD=#\nE=#\nF=#\n\n.ABC#\nD####\nE::::\nF:::#\n##:##`,\n\n`\ndir:NSEW\nname:corner4\nA=:\nB=:\nC=:\nD=:\nE=:\nF=:\n\n#ABC#\nD::::\nE::::\nF::::\n#:::#`\n\n];\n\nHouses5x5.tiles.body = [\n\n`\ndir:NS\nname:corridor\nA=:\nB=:\nC=:\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n#:::#`,\n\n`\ndir:NSEW\nname:body1\nA=:\nB=:\nC=:\nD=:\nE=:\nF=:\n\n#ABC#\nD::::\nE:#::\nF::::\n#:::#`,\n\n`\ndir:NSEW\nname:body_cross\nA=:\nB=:\nC=:\nD=:\nE=:\nF=:\n\n#ABC#\nD:#::\nE###:\nF:#::\n#:::#`\n\n];\n\nHouses5x5.tiles.terms = [\n`\ndir:S\nname:term3x1\nA=.\nB=.\nC=.\nD=.\nE=.\nF=#\n\n.ABC.\nD....\nE....\nF####\n#:::#`,\n\n`\ndir:S\nname:term3x2\nA=.\nB=.\nC=.\nD=.\nE=#\nF=#\n\n.ABC.\nD....\nE####\nF:::#\n#:::#`,\n\n`\ndir:S\nname:term3x3\nA=.\nB=.\nC=.\nD=#\nE=#\nF=#\n\n.ABC.\nD####\nE:::#\nF:::#\n#:::#`,\n\n`\ndir:S\nname:term3x4\nA=#\nB=#\nC=#\nD=#\nE=#\nF=#\n\n#ABC#\nD:::#\nE:::#\nF:::#\n#:::#`\n\n];\n\n/* Used to free up the entrance.*/\nHouses5x5.tiles.blocker = `\nname:BLOCKER\nA=.\nB=.\nC=.\nD=.\nE=.\nF=.\n\n.ABC.\nD....\nE....\nF....\n.....`;\n\nHouses5x5.tiles.filler = `\nname:FILLER\nA=.\nB=.\nC=.\nD=.\nE=.\nF=.\n\n.ABC.\nD....\nE....\nF....\n.....`;\n\n/* Must be passed to Template.Level using setStartRoomFunc(), to ensure\n * that entrance tile is placed in sane way. */\nHouses5x5.startRoomFunc = function() {\n    if (this.tilesX === 1 && this.tilesY === 1) {\n        return {x: 0, y: 0,\n            room: RNG.arrayGetRand(Houses5x5.templates.start1x1)\n        };\n    }\n    else if (this.tilesX === 1) {\n        const usableTempl: ElemTemplate[] =\n            Houses5x5.templates.start1xN.filter(tpl => (\n                !(/(R90|R270)/i).test(tpl.getProp('name'))\n            ));\n        const templ = RNG.arrayGetRand(usableTempl);\n        let y = this.tilesY - 1;\n        if (/R180/i.test(templ.getProp('name'))) {y = 0;}\n        return {x: 0, y, room: templ};\n    }\n    else if (this.tilesY === 1) {\n        const usableTempl: ElemTemplate[] =\n            Houses5x5.templates.start1xN.filter(tpl => (\n                (/(R90|R270)/i).test(tpl.getProp('name'))\n            ));\n        const templ = RNG.arrayGetRand(usableTempl);\n        let x = 0;\n        if (/R270/i.test(templ.getProp('name'))) {x = this.tilesX - 1;}\n        return {x, y: 0, room: templ};\n    }\n    else if (this.tilesX === 2 || this.tilesY === 2) {\n        const usableTempl: ElemTemplate[] = Houses5x5.templates.start2xN;\n        const templ = RNG.arrayGetRand(usableTempl);\n        let x = 0;\n        let y = 0;\n        if (templ.getProp('startX') === 'max') {\n            x = this.tilesX - 1;\n        }\n        if (templ.getProp('startY') === 'max') {\n            y = this.tilesY - 1;\n        }\n        return {x, y, room: templ};\n    }\n    const midX = Math.floor(this.tilesX / 2);\n    const midY = Math.floor(this.tilesY / 2);\n    const tile = RNG.arrayGetRand(Houses5x5.tiles.start);\n\n    const blocker = Template.createTemplate(Houses5x5.tiles.blocker);\n    for (let y = midY; y < this.tilesY; y++) {\n        this.addRoom(blocker, midX, y);\n    }\n\n    const templRoom = Template.createTemplate(tile);\n    return {\n        x: midX, y: midY, room: templRoom\n    };\n};\n\nHouses5x5.Models.default = []\n    .concat(Houses5x5.tiles.terms)\n    .concat(Houses5x5.tiles.body)\n    .concat(Houses5x5.tiles.corners);\nHouses5x5.tiles.all = Houses5x5.Models.default;\n\nconst startNames = ['all', 'start1x1', 'start1xN', 'start2xN'];\nstartNames.forEach(name => {\n    Houses5x5.templates[name] = Houses5x5.tiles[name].map(tile => (\n        Template.createTemplate(tile)\n    ));\n\n    const transformed = Template.transformList(Houses5x5.templates[name]);\n    Houses5x5.templates[name] = Houses5x5.templates[name].concat(transformed);\n});\n\n// Transform also properties startX,startY\nHouses5x5.templates.start2xN.forEach(templ => {\n    const name = templ.getProp('name');\n    if (/_flip/.test(name)) {\n        flipPropsVer(templ);\n    }\n    if (/R90/i.test(name)) {\n        rotatePropsR90(templ);\n    }\n    else if (/R180/i.test(name)) {\n        rotatePropsR90(templ);\n        rotatePropsR90(templ);\n    }\n    else if (/R270/i.test(name)) {\n        rotatePropsR90(templ);\n        rotatePropsR90(templ);\n        rotatePropsR90(templ);\n    }\n});\n\nfunction rotatePropsR90(templ) {\n    const startX = templ.getProp('startX');\n    const startY = templ.getProp('startY');\n    if (!RG.isNullOrUndef([startX])) {\n        templ.setProp('startY', startX);\n    }\n    if (startY === 'max') {\n        templ.setProp('startX', 'first');\n    }\n    else if (startY === 'first') {\n        templ.setProp('startX', 'max');\n    }\n}\n\nfunction flipPropsVer(templ) {\n    const startX = templ.getProp('startX');\n    if (startX === 'max') {\n        templ.setProp('startX', 'first');\n    }\n    else if (startX === 'first') {\n        templ.setProp('startX', 'max');\n    }\n}\n","\n/* This code has been ported to JavaScript from:\n * http://www.roguebasin.com/index.php?title=CreatingAForest\n * Thanks to the original creator of the algorithm! The original comments have\n * been mostly preserved in drawForest() function.\n */\n\nimport ROT from './rot';\nimport '../client/src/utils';\n\nexport const MapForest = function(width, height, options?) {\n    ROT.Map.call(this, width, height);\n\n    this._options = {\n        nForests: 5,\n        forestSize: 100,\n        factor: 6, // Lower factor means more trees\n        rng: ROT.RNG\n    };\n\n    // Grab only relevant options\n    for (const p in options) {\n        if (this._options.hasOwnProperty(p)) {\n            this._options[p] = options[p];\n        }\n    }\n\n};\nMapForest.extend(ROT.Map);\n\n/* To create the forest, call this method with your callback.\n * Signature of the\n * callback should be cb(x, y, val), where val === 1 means a tree in location\n * x,y. */\nMapForest.prototype.create = function(callback) {\n    const rng = this._options.rng;\n    this.map = this._fillMap(0);\n\n    // Draw a number of 'subforests' based on the options\n    for (let i = 0; i < this._options.nForests; i++) {\n        const x = rng.getUniformInt(0, this._width - 1);\n        const y = rng.getUniformInt(0, this._height - 1);\n        this.drawForest(x, y, this._options.forestSize);\n    }\n\n    if (callback) {\n        for (let y = 0; y < this._height; y++) {\n            for (let x = 0; x < this._width; x++) {\n                callback(x, y, this.map[x][y]);\n            }\n        }\n    }\n\n};\n\n/* Check we're not drawing outside the map. */\nMapForest.prototype.inBounds = function(i, j) {\n    return (i >= 0 && i < this._width && j >= 0 && j < this._height);\n};\n\n/* Draws a forest around x,y location. */\nMapForest.prototype.drawForest = function(x, y, forestSize) {\n    // this is so that it knows where to generate around or actually originally\n    // intended to be the start of a hall way*/\n    let i = x;\n    let j = y;\n    const rng = this._options.rng;\n\n    // how large it will be, adjust it to adapt it to the size intended\n    // (note: forestSize 40 will not be double size from 20,\n    //  double size is around a 100 because it draws over itself)\n    for (let k = 1; k <= forestSize; k++) {\n\n        // north south east west there at six to not make the forest too big\n        // and have a predictable pattern\n        const n = rng.getUniformInt(0, this._options.factor);\n        const e = rng.getUniformInt(0, this._options.factor);\n        const s = rng.getUniformInt(0, this._options.factor);\n        const w = rng.getUniformInt(0, this._options.factor);\n\n        if (n === 1) { /* if we draw north then... if we dont, skip this*/\n            // this is to ensure that when we restart at the end that we draw from\n            // the same location\n            i = i - 1;\n            if (this.inBounds(i, j)) {\n                this.map[i][j] = 1; /* this makes map at location i , j tree*/\n            }\n        }\n        if (s === 1) { /* do the above but go south*/\n            i = i + 1;\n            if (this.inBounds(i, j)) {\n                this.map[i][j] = 1; /* this makes map at location i , j tree*/\n            }\n        }\n        if (e === 1) { /* again but east*/\n            j = j + 1;\n            if (this.inBounds(i, j)) {\n                this.map[i][j] = 1; /* this makes map at location i , j tree*/\n            }\n        }\n        if (w === 1) { /* and west*/\n            j = j - 1;\n            if (this.inBounds(i, j)) {\n                this.map[i][j] = 1; /* this makes map at location i , j tree*/\n            }\n        }\n    } // for\n};\n","\nimport ROT from './rot';\nimport RG from '../client/src/rg';\nimport {Geometry as Geom} from '../client/src/geometry';\nimport {Path} from '../client/src/path';\nimport '../client/src/utils';\n\nimport dbg = require('debug');\n\nconst debug = dbg('bitn:Map.Miner');\n\ninterface CoordXY {\n    x: number;\n    y: number;\n}\n\ninterface MinerOp {\n    op: string;\n    value: number;\n}\n\nexport interface MapOptions {\n    addMiners?: CoordXY[]; // Extra miners to be added\n    dontDig?: boolean;\n    maxMinersCreated?: number;\n    minerSpawnProb?: number;\n    smooth?: boolean;\n    rng?: any;\n    startX?: number;\n    startY?: number;\n    nSmooth?: number;\n    dirWeights?: {[key: string]: number};\n    maxMinersOp?: MinerOp;\n};\n\n/* Contains code to generate miner-based caves and caverns. This is very\n * different from Cellular automate, and produces different results as well.\n * @class Map.Miner for cavern generation\n * The following options are supported:\n *   @param {object} [options] Options\n *   @param {object[]} [options.addMiners]\n *     List of miners to add to start level generation\n *   @param {object[]|bool|bbox} [options.dontDig]\n *     Coordinates to NOT dig, optionally a bbox {ulx, uly, lrx, lry}\n *   @param {int} [options.maxMinersCreated]\n *   @param {float} [options.minerSpawnProb]\n *   @param {bool} [options.smooth] Runs a smoothing afterwards.\n *   @param {object} [options.rng] RNG that is used.\n *   @param {object} [options.rng] RNG that is used.\n */\nexport const MapMiner = function(width, height, options: MapOptions = {}) {\n    ROT.Map.call(this, width, height, {});\n\n    const divisor = width > height ? height : width;\n    const maxMinersCreated = Math.floor(width * height / divisor);\n    const startX = Math.round(this._width / 2);\n    const startY = Math.round(this._height / 2);\n\n    this._options = {\n        addMiners: [], // Extra miners to be added\n        dontDig: false,\n        maxMinersCreated,\n        minerSpawnProb: 0.07,\n        smooth: true,\n        rng: ROT.RNG,\n        startX,\n        startY,\n        nSmooth: 2,\n        dirWeights: {\n            N: 1, NE: 1, E: 1, SE: 1, S: 1, SW: 1, W: 1, NW: 1\n        }\n    };\n\n    if (!options.dirWeights) {\n        const smaller = width > height ? height : width;\n        Object.keys(this._options.dirWeights).forEach(dir => {\n            if (dir === 'W' || dir === 'E') {\n                this._options.dirWeights[dir] *= width * 6;\n            }\n            else if (dir === 'S' || dir === 'N') {\n                this._options.dirWeights[dir] *= height;\n            }\n            else {\n                this._options.dirWeights[dir] *= smaller;\n            }\n        });\n    }\n\n    // Grab only relevant options\n    for (const p in options) {\n        if (this._options.hasOwnProperty(p)) {\n            this._options[p] = options[p];\n        }\n    }\n\n    // Using this option ie \"maxMinersOp: {op: '*', value: 2}\", you can alter\n    // max number miners created. You can easily scale the default number of\n    // miners with this instead of applying a manual value\n    if (options.maxMinersOp) {\n        let minersCreated = this._options.maxMinersCreated;\n        const {op, value} = options.maxMinersOp;\n        switch (op) {\n            case '+' : minersCreated += value; break;\n            case '-' : minersCreated -= value; break;\n            case '/' : minersCreated /= value; break;\n            case '*' : minersCreated *= value; break;\n            default: console.warn(`Op ${op} illegal`);\n        }\n        // Round to integer if user gave * or /\n        this._options.maxMinersCreated = Math.round(minersCreated);\n    }\n\n    this._hist = {\n        minerDir: {}\n    };\n\n    this._verifyRngFunctions();\n\n};\n// MapMiner.extend(ROT.Map.Cellular);\nMapMiner.extend(ROT.Map);\n\nMapMiner.prototype.dbg = function(msg, ...args) {\n    if (debug.enabled) {\n        console.log(msg, ...args);\n    }\n};\n\nconst DUG = 0;\nconst WALL = 1;\n\nMapMiner.prototype.create = function(callback) {\n    const rng = this._options.rng;\n    this._map = this._fillMap(WALL);\n\n    const maxMiners = this._options.maxMinersCreated;\n    const minerSpawnProb = this._options.minerSpawnProb;\n\n    const startX = this._options.startX;\n    const startY = this._options.startY;\n\n    let activeMiners = [\n        {id: 0, x: startX, y: startY, dirWeights: this._options.dirWeights}\n    ];\n\n    this.minerID = 1;\n\n    // Add extra miners given with addMiners option\n    if (Array.isArray(this._options.addMiners)) {\n        this._options.addMiners.forEach(miner => {\n            if (this.inBounds(miner.x, miner.y)) {\n                const minerCopy = Object.assign({}, miner);\n                minerCopy.id = this.minerID++;\n                if (!minerCopy.dirWeights) {\n                    minerCopy.dirWeights = this._options.dirWeights;\n                }\n                activeMiners.push(minerCopy);\n            }\n            else {\n                console.error(miner, 'out of level mining bounds. Not added');\n            }\n        });\n    }\n\n    activeMiners.forEach(miner => {\n        if (!RG.isNullOrUndef([miner.x, miner.y])) {\n            this._markAsDug(miner.x, miner.y);\n        }\n        else {\n            RG.err('Map.Miner', 'create',\n                `miner.x,y must exist. ${miner}`);\n        }\n    });\n\n    let minersAdded = 0;\n    let minersSpawned = 0;\n    let minersRemoved = 0;\n\n    let minersRemove = [];\n    let minersToAdd = [];\n\n    let watchdog = 0; // Prevent infinite looping\n\n    /* eslint no-loop-func: 0 */\n    while (minersSpawned < maxMiners) {\n\n        if (debug.enabled) {this.printMap();}\n\n        this.dbg('Active miners: ' + activeMiners.length);\n        activeMiners.forEach(miner => {\n            const [x, y] = this._getXYToDig(miner);\n\n            if (this._map[x][y] === DUG && activeMiners.length > 1) {\n                // No undug cells found, remove miner\n                minersRemove.push(miner);\n            }\n            else if (this.inBounds(x, y)) {\n                if (rng.getUniform() <= minerSpawnProb) {\n                    const newMiner = this._tryToAddNew(miner, x, y);\n                    if (newMiner) {\n                        minersToAdd.push(newMiner);\n                        ++minersAdded;\n                    }\n                    ++minersSpawned;\n                }\n                this._markAsDug(x, y, miner);\n                miner.x = x;\n                miner.y = y;\n            }\n            else {\n                minersRemove.push(miner);\n            }\n        });\n\n        // Remove all miners marked for removal, except the last miner\n        minersRemove.forEach(rmMiner => {\n            const index = activeMiners.findIndex(miner => (\n                rmMiner.id === miner.id\n            ));\n            if (activeMiners.length > 1) {\n                const {id, x, y} = rmMiner;\n                this.dbg(`remove miner ${id} at ${x}, ${y}`);\n                ++minersRemoved;\n                activeMiners.splice(index, 1);\n            }\n        });\n\n        activeMiners = activeMiners.concat(minersToAdd);\n        minersToAdd = [];\n        minersRemove = [];\n\n        if (watchdog > (100 * this._width * this._height)) {\n            break;\n        }\n        if (activeMiners.length === 0) {\n            break;\n        }\n        ++watchdog;\n    }\n\n    if (this._options.smooth) {this.smoothWalls(2);}\n\n    // If user added miners, we need to ensure connectivity\n    // this.connect(null, DUG);\n    this.connect();\n    if (callback) {\n        for (let y = 0; y < this._height; y++) {\n            for (let x = 0; x < this._width; x++) {\n                callback(x, y, this._map[x][y]);\n            }\n        }\n    }\n\n    this._hist.minersSpawned = minersSpawned;\n    this._hist.minersAdded = minersAdded;\n    this._hist.minersRemoved = minersRemoved;\n};\n\n/* Tries to add a new miner. */\nMapMiner.prototype._tryToAddNew = function(miner, x, y) {\n    let [newX, newY] = this._getXYToDig({x, y, dirWeights: miner.dirWeights});\n    let newMiner = null;\n    const rng = this._options.rng;\n\n    if (this._map[x][y] === WALL && this.inBounds(newX, newY)) {\n        newMiner = {id: this.minerID++, x: newX, y: newY};\n        if (miner.dugCallback) {\n            newMiner.dugCallback = miner.dugCallback;\n        }\n        this._markAsDug(newX, newY, newMiner);\n        this.dbg(miner, 'spawned new miner:', newMiner);\n    }\n    else { // Handle non-progressing loop here\n        const index = rng.getUniformInt(0, 7);\n        const dir = ROT.DIRS['8'][index];\n        newX += dir[0];\n        newY += dir[1];\n        if (this.inBounds(newX, newY)) {\n            newMiner = {id: this.minerID++, x: newX, y: newY};\n            if (miner.dugCallback) {\n                newMiner.dugCallback = miner.dugCallback;\n            }\n            this._markAsDug(newX, newY, newMiner);\n            this.dbg(miner, '(else) spawned new miner:', newMiner);\n        }\n    }\n\n    // Miner copies its dirWeights to the new miner\n    if (newMiner) {newMiner.dirWeights = miner.dirWeights;}\n\n    return newMiner;\n};\n\nMapMiner.prototype.printMap = function() {\n    for (let y = 0; y < this._height; y++) {\n        let row = '';\n        for (let x = 0; x < this._width; x++) {\n            row += this._map[x][y] === WALL ? '#' : '.';\n        }\n        console.log(row); // do not remove/clean up\n    }\n};\n\n/* Returns the next digging direction for the miner. */\nMapMiner.prototype._getXYToDig = function(miner) {\n    const rng = this._options.rng;\n\n    // Pre-check if any valid (WALL) cells are around\n    const box = Geom.getBoxAround(miner.x, miner.y, 1);\n    const undugXY = box.filter(xy => (\n        this._map[xy[0]][xy[1]] === WALL &&\n        this.inBounds(xy[0], xy[1])\n    ));\n    if (undugXY.length === 0) {\n        this.dbg('No wall cells around ' + miner.x + ', ' + miner.y);\n        return [miner.x, miner.y];\n    }\n\n    this.dbg('UndugXY is now ' + undugXY);\n\n    // Map x,y coord around to vectors, and filter those with given weights in\n    // this._options.dirWeights\n    const undugDirs = undugXY.map(xy => {\n        const dXdY = [xy[0] - miner.x, xy[1] - miner.y];\n        return RG.dXdYToDir(dXdY);\n    });\n    const minerWeights = miner.dirWeights;\n    const dirsLeft = {};\n    undugDirs.forEach(dir => {\n        if (minerWeights[dir]) {\n            dirsLeft[dir] = minerWeights[dir];\n        }\n    });\n\n    // If custom dirWeights given, we may have no legal dir anymore\n    if (Object.keys(dirsLeft).length === 0) {\n        return [miner.x, miner.y];\n    }\n\n    if (debug.enabled) {this.dbg('dirsLeft: ' + JSON.stringify(dirsLeft));}\n\n    let dir = rng.getWeightedValue(dirsLeft);\n    let dXdY = RG.dirTodXdY(dir);\n    let [x, y] = [miner.x + dXdY[0], miner.y + dXdY[1]];\n\n    this.dbg(`dir: ${dir}, COMP: dXdY: ${dXdY}, x,y: ${x},${y}`);\n\n    if (!this._hist.minerDir[dir]) {this._hist.minerDir[dir] = 0;}\n    this._hist.minerDir[dir] += 1;\n\n    // Loop until WALL cell found\n    while (this._map[x][y] === DUG) {\n        delete dirsLeft[dir];\n        if (Object.keys(dirsLeft).length === 0) {break;}\n        dir = rng.getWeightedValue(dirsLeft);\n        dXdY = RG.dirTodXdY(dir);\n        [x, y] = [miner.x + dXdY[0], miner.y + dXdY[1]];\n        this.dbg(`dir: ${dir}, COMP: dXdY: ${dXdY}, x,y: ${x},${y}`);\n\n        if (!this._hist.minerDir[dir]) {this._hist.minerDir[dir] = 0;}\n        this._hist.minerDir[dir] += 1;\n    }\n\n    this.dbg(`Next x,y to dig is ${x},${y}`);\n    return [x, y];\n};\n\n/* Checks that given coord is within bounds or dontDig constaints. */\nMapMiner.prototype.inBounds = function(i, j) {\n    // Takes into account cells given with dontDig\n    if (this._options.dontDig) {\n        if (this._options.dontDig.ulx) {\n            const {ulx, uly, lrx, lry} = this._options.dontDig;\n            if (i >= ulx && i <= lrx) {\n                if (j >= uly && j <= lry) {\n                    return false;\n                }\n            }\n        }\n        else if (this._options.dontDig[i + ',' + j]) {\n            return false;\n        }\n    }\n    return (i >= 1 && i < this._width - 1 && j >= 1 && j < this._height - 1);\n};\n\n/* Ensures connectivity between different miner segments. */\nMapMiner.prototype.connect = function() {\n    const {addMiners} = this._options;\n    let connected = true;\n    const cellsByFill = {};\n    const cellsByFillLUT = {};\n\n    if (addMiners.length > 0) {\n        const coord = addMiners.map(miner => [miner.x, miner.y]);\n        // Add also starting miner\n        coord.push([this._options.startX, this._options.startY]);\n\n        // Do a floodfill from each point. If the same number of cells is filled\n        // from each point, then we have full connectivity. This is faster to do\n        // calculate than you think\n        let nCells = -1;\n        coord.forEach(xy => {\n            const lut = {};\n            const cellsDug = Geom.floodfill2D(this._map, xy, DUG, lut, true);\n            if (cellsDug.length === 0) {\n                const msg = `Floodfill from: ${xy} returned 0 cells`;\n                throw new Error(msg);\n            }\n            const key = xy[0] + ',' + xy[1];\n            cellsByFill[key] = cellsDug;\n            cellsByFillLUT[key] = lut;\n            if (nCells === -1) {\n                nCells = cellsDug.length;\n            }\n            else if (nCells !== cellsDug.length) {\n                connected = false;\n            }\n        });\n    }\n\n    if (!connected) {\n        // Now we need to connect the floodfilled regions\n        this.connectFilledRegions(cellsByFill, cellsByFillLUT);\n    }\n    else {\n        this._regions = [];\n    }\n};\n\n/* Connect N regions together. We don't know if some of them are connected.\n * Assume largest region connected.\n * */\nMapMiner.prototype.connectFilledRegions = function(cellsByFill, cellLUT) {\n    const centers = {};\n    let nLargest = 0;\n    let largestKey = null;\n    const rng = this._options.rng;\n\n    Object.keys(cellsByFill).forEach(key => {\n        const arr = cellsByFill[key];\n        centers[key] = Geom.getMassCenter(arr);\n        if (arr.length > nLargest) {\n            nLargest = arr.length;\n            largestKey = key;\n        }\n    });\n\n    // Using the LUT, check which areas are connected to the largest regions.\n    // Simply check if the start point of largest area is in the LUT obtained\n    // from floodfill of that region\n    const notConnected = [];\n    this._regions = [];\n    this._regions.push([ cellsByFill[largestKey] ]);\n    Object.keys(centers).forEach(key => {\n        if (key !== largestKey) {\n            const lut = cellLUT[key];\n            if (!lut[largestKey]) {\n                notConnected.push(key);\n                this._regions.push([ cellsByFill[key] ]);\n            }\n        }\n    });\n\n    const [cX, cY] = centers[largestKey];\n\n    // Finally connected the regions using A-star, but use a wider 'brush' to\n    // carve the path, looks more natural and wider is more interesting\n    this._paths = [];\n    notConnected.forEach(key => {\n        const [x, y] = centers[key];\n        const path = this._getPath(cX, cY, x, y);\n        path.forEach(pXY => {\n            let width = rng.getUniformInt(1, 3);\n            if (this._options.connWidth) {\n                width = this._options.connWidth;\n            }\n\n            const brush = Geom.getCrossCaveConn(pXY.x, pXY.y, width, true);\n            brush.forEach(brushXY => {\n                const [bX, bY] = brushXY;\n                // Connecting does not obey dontDig constraints, yet\n                if (this.inBounds(bX, bY)) {this._map[bX][bY] = DUG;}\n            });\n        });\n        this._paths.push(path);\n    });\n\n};\n\n/* Returns information about the map. */\nMapMiner.prototype.getMapData = function() {\n    const addMiners = this._options.addMiners;\n    const startPoints = addMiners.map(miner => [miner.x, miner.y]);\n    startPoints.push([this._options.startX, this._options.startY]);\n\n    return {\n        nRegions: 1 + addMiners.length,\n        regions: this._regions,\n        startPoints,\n        paths: this._paths\n    };\n};\n\nMapMiner.prototype._getPath = function(x0, y0, x1, y1) {\n    return Path.getShortestPath(x0, y0, x1, y1);\n};\n\nMapMiner.prototype.smoothWalls = function(nRounds) {\n    for (let i = 0; i < nRounds; i++) {\n        for (let x = 1; x < this._width - 1; x++) {\n            for (let y = 1; y < this._height - 1; y++) {\n                if (this._map[x][y] === WALL) {\n                    const coord = Geom.getCrossAround(x, y, 1);\n                    let numWalls = 0;\n                    coord.forEach(xy => {\n                        if (this.inBounds(xy[0], xy[1])) {\n                            if (this._map[xy[0]][xy[1]]) {\n                                ++numWalls;\n                            }\n                        }\n                    });\n                    if (this.inBounds(x, y)) {\n                        if (numWalls < this._options.nSmooth) {\n                            this._markAsDug(x, y);\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n\n/* Marks the cell as dug, and records largest seen coordinates. */\nMapMiner.prototype._markAsDug = function(x, y, miner) {\n    if (x < this._minX) {this._minX = x;}\n    if (x > this._maxX) {this._maxX = x;}\n    if (y < this._minY) {this._minY = y;}\n    if (y > this._maxY) {this._maxY = y;}\n    this._map[x][y] = DUG;\n    if (this._options.dugCallback) {\n        this._options.dugCallback(x, y, miner);\n    }\n    if (miner && miner.dugCallback) {\n        miner.dugCallback(x, y, miner);\n    }\n};\n\nMapMiner.prototype._verifyRngFunctions = function() {\n    const {rng} = this._options;\n    const funcs = ['getUniform', 'getUniformInt', 'getWeightedValue'];\n    funcs.forEach(func => {\n        if (typeof rng[func] !== 'function') {\n            let msg = `RNG must have functions: ${funcs}.`;\n            msg += 'See ROT.RNG for example (you can use it)';\n            throw new Error(msg);\n        }\n    });\n};\n","\nimport ROT from './rot';\nimport {MapForest} from './map.forest';\n\nconst noiseGradients = [\n    [ 0, -1],\n    [ 1, -1],\n    [ 1, 0],\n    [ 1, 1],\n    [ 0, 1],\n    [-1, 1],\n    [-1, 0],\n    [-1, -1]\n];\n\nexport const MapMountain = function(width, height, options?) {\n    ROT.Map.call(this, width, height);\n\n    this._options = {\n        gradients: noiseGradients,\n        noiseMult: 1,\n        noiseDivider: 20,\n        rng: ROT.RNG\n    };\n\n    if (options) {\n        // Grab only relevant options\n        for (const p in this._options) {\n            if (this._options.hasOwnProperty(p)) {\n                if (options.hasOwnProperty(p)) {\n                    this._options[p] = options[p];\n                }\n            }\n        }\n    }\n\n    this.noise = new ROT.Noise.Simplex();\n};\nMapMountain.extend(ROT.Map);\n\nMapMountain.prototype.create = function(callback) {\n    const map = this._fillMap(0);\n\n    for (let x = 0; x < this._width; x++) {\n        for (let y = 0; y < this._height; y++) {\n            const val = this.noise.get(x / this._options.noiseDivider,\n                y / this._options.noiseDivider) * this._options.noiseMult;\n            map[x][y] = val;\n        }\n    }\n\n    // Service the callback finally\n\tfor (let i = 0; i < this._width; i++) {\n\t\tfor (let j = 0; j < this._height; j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\n};\nMapMountain.gradients = noiseGradients;\n","\nimport ROT from './rot';\nimport '../client/src/utils';\n\n/* Can be used to generate \"mountain walls\". These are thick walls centered or\n * aligned to one of the sides of the level.\n *\n */\nexport const MapWall = function(width, height, options?) {\n    ROT.Map.call(this, width, height);\n\n    this._options = {\n      north: false,\n      south: false,\n      east: true,\n      west: true,\n      alignVertical: 'center',\n      alignHorizontal: 'center',\n      meanWx: 5,\n      meanWy: 5,\n      stdDev: 3,\n      filterW: 3,\n      rng: ROT.RNG\n    };\n\n    if (options) {\n        // Grab only relevant options\n        for (const p in this._options) {\n            if (this._options.hasOwnProperty(p)) {\n                if (options.hasOwnProperty(p)) {\n                    this._options[p] = options[p];\n                }\n            }\n        }\n    }\n\n};\nMapWall.extend(ROT.Map);\n\nMapWall.prototype.create = function(callback) {\n    const map = this._fillMap(0);\n\n    const canConnectNorth = this._options.north;\n    const canConnectSouth = this._options.south;\n    const canConnectEast = this._options.east;\n    const canConnectWest = this._options.west;\n    const {alignVertical, alignHorizontal} = this._options;\n\n    const subX = this._width;\n    const subY = this._height;\n\n    const midX = Math.floor(subX / 2);\n    const midY = Math.floor(subY / 2);\n\n    const MEAN_WX = this._options.meanWx;\n    const MEAN_WY = this._options.meanWy;\n    const STDDEV_W = this._options.stdDev;\n    const filterW = this._options.filterW;\n\n    let width = null;\n\n    let startY = -1;\n    let endY = -1;\n    if (canConnectNorth && canConnectSouth) {\n        startY = 0;\n        endY = subY - 1;\n    }\n    else if (canConnectNorth) {\n        startY = 0;\n        endY = midY - 1;\n    }\n    else if (canConnectSouth) {\n        startY = midY;\n        endY = subY - 1;\n    }\n\n    this._wallNS = [];\n    let widths = this.getWidthMovingAvg(endY + 1, MEAN_WX, STDDEV_W,\n        subX, filterW);\n\n    // Draw line from center to north\n    if (canConnectNorth || canConnectSouth) {\n        for (let y = startY; y <= endY; y++) {\n            width = widths[y - startY];\n            const tile = [];\n            if (width === 1) {width = MEAN_WX;}\n\n            let xStart = midX - (width - 1);\n            let xEnd = midX + (width - 1);\n            // Choose the x-position\n            if (alignHorizontal === 'center') {\n                // Skip\n            }\n            else if (alignHorizontal === 'left') {\n                xStart = 0;\n                xEnd = xStart + (width - 1);\n            }\n            else if (alignHorizontal === 'right') {\n                xStart = this._width - (width - 1);\n                xEnd = this._width - 1;\n            }\n\n            for (let x = xStart; x <= xEnd; x++) {\n                map[x][y] = 1;\n                tile.push([x, y]);\n            }\n            this._wallNS.push(tile);\n        }\n    }\n\n    let startX = -1;\n    let endX = -1;\n    if (canConnectEast && canConnectWest) {\n        startX = 0;\n        endX = subX - 1;\n    }\n    else if (canConnectEast) {\n        startX = midX;\n        endX = subX - 1;\n    }\n    else if (canConnectWest) {\n        startX = 0;\n        endX = midX - 1;\n    }\n\n    this._wallEW = [];\n    widths = this.getWidthMovingAvg(endX + 1, MEAN_WY, STDDEV_W, subY, filterW);\n    if (canConnectEast || canConnectWest) {\n        for (let x = startX; x <= endX; x++) {\n            width = widths[x - startX];\n            const tile = [];\n            if (width === 1) {width = MEAN_WY;}\n\n            let yStart = midY - (width - 1);\n            let yEnd = midY + (width - 1);\n            // Choose the x-position\n            if (alignVertical === 'center') {\n                // Skip\n            }\n            else if (alignVertical === 'top') {\n                yStart = 0;\n                yEnd = yStart + (width - 1);\n            }\n            else if (alignVertical === 'bottom') {\n                yStart = this._height - (width - 1);\n                yEnd = this._height - 1;\n            }\n\n            for (let y = yStart; y <= yEnd; y++) {\n                map[x][y] = 1;\n                tile.push([x, y]);\n            }\n            this._wallEW.push(tile);\n        }\n    }\n\n    // Service the callback finally\n\tfor (let i = 0; i < this._width; i++) {\n\t\tfor (let j = 0; j < this._height; j++) {\n\t\t\tcallback(i, j, map[i][j]);\n\t\t}\n\t}\n\n};\n\n/* Gets the width using moving average algorithm. */\nMapWall.prototype.getWidthMovingAvg = function(\n    nElem, mean, stddev, subSize, filterW\n) {\n    const unfiltered = [];\n    for (let i = 0; i < nElem; i++) {\n        unfiltered.push(this.getWallWidth(mean, stddev, subSize));\n    }\n\n    let filtered = [];\n    for (let i = 0; i < filterW; i++) {\n        filtered.push(unfiltered[i]);\n    }\n\n    // Filter array with algorith\n    for (let i = filterW; i < (nElem - filterW); i++) {\n        const filtVal = getFiltered(unfiltered, i, filterW);\n        filtered.push(filtVal);\n    }\n\n    for (let i = (nElem - filterW); i < nElem; i++) {\n        // Hack for now, find correct solution\n        if (filtered.length < unfiltered.length) {\n            filtered.push(unfiltered[i]);\n        }\n    }\n\n    filtered = filtered.map(value => Math.round(value));\n    return filtered;\n};\n\nMapWall.prototype.getWallWidth = function(mean, stddev, subSize) {\n    const rng = this._options.rng;\n    let width = Math.floor(rng.getNormal(mean, stddev));\n    // width = Math.floor(width + coeff * width);\n\n    if (width > subSize / 2) {\n        width = subSize / 2 - 1;\n    }\n    else if (width < 1) {\n        width = 1;\n    }\n    return width;\n};\n\nfunction getFiltered(arr, i, filterW) {\n    const num = 2 * filterW + 1;\n    let sum = 0;\n    for (let n = i - filterW; n <= i + filterW; n++) {\n        if (n >= 0 && n < arr.length) {\n            sum += arr[n];\n        }\n    }\n    return Math.floor(sum / num);\n}\n","/* This file contains modifications that are applied to specific actors. */\n\nexport interface IActorMods {\n    description?: string;\n    stats: {[key: string]: number};\n    player: {[key: string]: number};\n}\n\nexport const ActorMods: {[key: string]: IActorMods} = {};\n\nActorMods.bearfolk = {\n    description: '',\n    stats: {\n        agility: -2,\n        strength: 3\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.catfolk = {\n    stats: {\n        agility: 3,\n        perception: 2,\n        strength: -2\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.dogfolk = {\n    stats: {\n        agility: 2,\n        perception: 3\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.dwarf = {\n    stats: {\n        agility: -1,\n        strength: 2,\n        willpower: 1\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.goblin = {\n    stats: {\n        accuracy: 1,\n        agility: 2\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.human = {\n    stats: {\n        accuracy: 3,\n        magic: 1,\n        willpower: 1\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.hyrkhian = {\n    stats: {\n        magic: 2,\n        willpower: 2\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.wildling = {\n    stats: {\n        accuracy: 1,\n        agility: 1,\n        perception: 4\n    },\n    player: { // Player only section\n    }\n};\n\nActorMods.wolfclan = {\n    stats: {\n        strength: 1,\n        magic: 2,\n        willpower: 2\n    },\n    player: { // Player only section\n    }\n};\n","/* For debugging various features of the game. Basically everything\n * requiring\n * manual testing is added to the end of create() function.\n */\n\nimport RG from '../src/rg';\nimport * as Component from '../src/component';\nimport * as Element from '../src/element';\nimport * as Item from '../src/item';\nimport * as Time from '../src/time';\nimport {Ability} from '../src/abilities';\nimport {ActorsData} from './actors';\nimport {BrainSpawner} from '../src/brain/brain.virtual';\nimport {Battle, Army} from '../src/game.battle';\nimport {CityGenerator} from '../src/city-generator';\nimport {EquipSlot} from '../src/equipment';\nimport {ItemRandomizer} from '../src/factory.items';\nimport {MapGenerator} from '../src/map.generator';\nimport {Cell} from '../src/map.cell';\nimport {Random} from '../src/random';\nimport {Spell} from '../src/spell';\nimport {Texts} from '../data/texts';\nimport {VirtualActor, WeatherActor} from '../src/actor.virtual';\nimport {ELEM} from '../data/elem-constants';\nimport * as IF from '../src/interfaces';\n\nimport {Quest, QuestPopulate} from '../src/quest';\n\nimport {EventPool} from '../src/eventpool';\nimport {Factory} from '../src/factory';\nimport {FactoryLevel} from '../src/factory.level';\nimport {FactoryWorld} from '../src/factory.world';\nimport {World} from '../src/world';\nimport {WorldCreator} from '../src/world.creator';\nimport {WinCondition} from '../src/win-condition';\nimport {Room} from '../../lib/bsp';\n\nconst POOL = EventPool.getPool();\n\nconst RNG = Random.getRNG();\nconst Stairs = Element.ElementStairs;\n\nexport const DebugGame = function(fact, parser) {\n    this._fact = fact;\n    this._parser = parser;\n};\n\nDebugGame.prototype.createArena = function(obj, game, player) {\n    Room.rng = RNG;\n    const parser = this._parser;\n    const sqrPerItem = obj.sqrPerItem;\n    obj.cols = 100;\n    obj.rows = 100;\n    const [pX, pY] = [50, 50];\n    const level = this.createLastBattle(game, obj);\n    // game.addLevel(level);\n    level.addActor(player, pX, pY);\n\n    const cityQuarter = new World.CityQuarter('Debug quarter');\n    cityQuarter.addLevel(level);\n\n    const extras = level.getExtras();\n    extras.shops.forEach(shop => {\n        cityQuarter.addShop(shop);\n    });\n\n    const city = new World.City('Wrapper city for Debug quarter');\n    city.addQuarter(cityQuarter);\n    city.tileX = 0;\n    city.tileY = 0;\n    const area = new World.Area('Wrapper area', 2, 2, 10, 10);\n    area.addZone('City', city);\n    const world = new World.WorldTop('Wrapper world');\n    world.addArea(area);\n    game.addPlace(world);\n\n    const spirit = this._parser.createActor('Wolf spirit');\n    spirit.get('Stats').setStrength(500);\n    level.addActor(spirit, 2, 1);\n\n    const gem = new Item.SpiritGem('Lesser gem');\n    level.addItem(gem);\n\n    const pickaxe = this._parser.createActualObj('items', 'Pick-axe');\n    level.addItem(pickaxe, 2, 2);\n\n    const poison = this._parser.createActualObj('items',\n        'Potion of frost poison');\n    poison.setCount(5);\n    level.addItem(poison, 2, 2);\n    const curePoison = this._parser.createActualObj('items',\n        'Potion of cure poison');\n    level.addItem(curePoison, 3, 2);\n\n    const rifle = this._parser.createActualObj('items', 'Rifle');\n    const ammo = this._parser.createActualObj('items', 'Steel bullet');\n    ammo.setCount(100);\n    level.addItem(rifle, 1, 1);\n    level.addItem(ammo, 1, 1);\n\n    // Test for shops\n    const keeper = this._parser.createActualObj('actors', 'shopkeeper');\n    const gold = new Item.GoldCoin();\n    gold.setCount(50);\n    keeper.getInvEq().addItem(gold);\n    level.addActor(keeper, 2, 2);\n\n    const numFree = level.getMap().getFree().length;\n    const itemsPerLevel = Math.round(numFree / sqrPerItem);\n\n    const itemConf = {\n        itemsPerLevel,\n        func: (item) => (item.value <= 2500),\n        maxValue: 2500,\n        food: () => true,\n        gold: () => false\n    };\n    this._fact.addNRandItems(level, this._parser, itemConf);\n\n    const cols = level.getMap().cols;\n    const rows = level.getMap().rows;\n\n    const boss = this._parser.createActor('Thabba, Son of Ice');\n    level.addActor(boss, cols - 2, rows - 2);\n\n    const cryomancer = this._parser.createActor('Cryomancer');\n    level.addActor(cryomancer, 1, rows - 2);\n\n    const spiritPot = this._parser.createActualObj(\n        'items', 'Potion of spirit form');\n    player.getInvEq().addItem(spiritPot);\n\n    const potStr = this._parser.createItem('Potion of strength');\n    player.getInvEq().addItem(potStr);\n\n    // BladeMaster components\n    player.add(new Component.Attacker());\n    player.add(new Component.Defender());\n    player.add(new Component.MasterEquipper());\n    player.add(new Component.BiDirStrike());\n    player.add(new Component.BiDirStrike());\n\n    // Marksman components\n    player.add(new Component.ThroughShot());\n\n    const winCond = new WinCondition('Kill a keeper', game.getPool());\n    winCond.addActorKilled(keeper);\n\n    game.addPlayer(player);\n\n    const eq = player.getInvEq().getEquipment();\n    eq.addSlot('spiritgem', new EquipSlot('spiritgem'));\n    const gem1 = this._parser.createItem('Lesser spirit gem');\n    const gem2 = this._parser.createItem('Greater spirit gem');\n    player.getInvEq().addItem(gem1);\n    player.getInvEq().addItem(gem2);\n    player.add(new Component.SpiritItemCrafter());\n\n    const exploreElem = new Element.ElementExploration();\n    exploreElem.setExp(100);\n    level.addElement(exploreElem, 1, 20);\n\n    const trainer = this.createTrainer();\n    level.addActor(trainer, 1, 2);\n\n    const coins = new Item.GoldCoin();\n    coins.setCount(600);\n    player.getInvEq().addItem(coins);\n\n    // if (!player.getBook()) {\n    const spellbook = new Spell.SpellBook(player);\n    player.setBook(spellbook);\n    Spell.addAllSpells(spellbook);\n    player.add(new Component.SpellPower());\n    player.get('SpellPower').setPP(100);\n    // }\n\n    const vActor = new VirtualActor('spawner');\n    const spawnBrain = new BrainSpawner(vActor);\n    spawnBrain.setConstraint({op: 'lt', prop: 'danger', value: 10});\n    vActor.setBrain(spawnBrain);\n    level.addVirtualProp(RG.TYPE_ACTOR, vActor);\n\n    const fire = this._parser.createActor('Fire');\n    const fadingComp = new Component.Fading();\n    fadingComp.setDuration(20);\n    fire.add(fadingComp);\n    level.addActor(fire, 7, 1);\n\n    const thunderbird = this._parser.createActor('thunderbird');\n    level.addActor(thunderbird, 20, 1);\n\n    const firekit = parser.createEntity('firemaking kit');\n    player.getInvEq().addItem(firekit);\n\n    player.get('SpellPower').setPP(100);\n    player.get('SpellPower').setMaxPP(100);\n\n    const itemRand = new ItemRandomizer();\n    const runeProt = parser.createItem('rune of protection');\n    itemRand.adjustItem(runeProt, 100);\n    player.getInvEq().addItem(runeProt);\n\n    const runeDig = parser.createItem('rune of tunneling');\n    itemRand.adjustItem(runeDig, 100);\n    player.getInvEq().addItem(runeDig);\n\n    const runeForce = parser.createItem('rune of force');\n    itemRand.adjustItem(runeForce, 100);\n    player.getInvEq().addItem(runeForce);\n\n    const lever = new Element.ElementLever();\n    level.addElement(lever, 2, 1);\n    for (let i = 0; i < 3; i++) {\n        const leverDoor = new Element.ElementLeverDoor();\n        lever.addTarget(leverDoor);\n        level.addElement(leverDoor, 3 + i, 1);\n    }\n\n    // For testing actor abilities and camouflage\n    const abilities = player.get('Abilities');\n    const camouflage = new Ability.Camouflage();\n    abilities.addAbility(camouflage);\n    const sharpener = new Ability.Sharpener();\n    abilities.addAbility(sharpener);\n\n    this.addGoblinWithLoot(level);\n\n    const runeOfCtrl = parser.createItem('rune of control');\n    itemRand.adjustItem(runeOfCtrl, 250);\n    player.getInvEq().addItem(runeOfCtrl);\n\n    const runeOfVenom = parser.createItem('rune of venom');\n    itemRand.adjustItem(runeOfVenom, 150);\n    player.getInvEq().addItem(runeOfVenom);\n\n    const runeOfPoisonClouds = parser.createItem('rune of poison clouds');\n    itemRand.adjustItem(runeOfPoisonClouds, 150);\n    player.getInvEq().addItem(runeOfPoisonClouds);\n\n    const voidDagger = parser.createItem('Void dagger');\n    player.getInvEq().addItem(voidDagger);\n\n    player.getInvEq().unequipItem('hand', 1, 0);\n    player.getInvEq().equipItem(voidDagger);\n\n    const shovel = parser.createItem('shovel');\n    player.getInvEq().addItem(shovel);\n    const machete = parser.createItem('machete');\n    player.getInvEq().addItem(machete);\n\n    const webRune = parser.createItem('rune of webs');\n    player.getInvEq().addItem(webRune);\n\n    /* const voidElem = parser.createActor('void elemental');\n    level.addActor(voidElem, pX + 1, pY + 1);*/\n\n    const thief = parser.createActor('bearfolk thief');\n    level.addActor(thief, pX + 1, pY + 1);\n\n    player.getInvEq().addItem(parser.createItem('Boots of flying'));\n\n    const regen = new Component.RegenEffect();\n    regen.setPP(2);\n    regen.setWaitPP(0);\n    regen.setMaxWaitPP(0);\n    player.add(regen);\n\n    level.getMap().setBaseElemXY(pX - 1, pY - 1, ELEM.WATER);\n\n    const uniques = ActorsData.filter(item => (\n        item.base === 'UniqueBase'\n    ));\n    uniques.forEach(uniqShell => {\n        const {name} = uniqShell;\n        const uniqueActor = parser.createActor(name);\n        if (uniqueActor) {\n            level.addActorToFreeCell(uniqueActor);\n        }\n        else {\n            RG.warn('DebugGame', 'creating uniques',\n                'Failed to create unique actor: ' + name);\n        }\n    });\n\n    /* const assassin = parser.createActor('dark assassin');\n    level.addActor(assassin, pX + 10, pY + 10);\n    */\n\n    // Add some quests into the city\n    const questPopul = new QuestPopulate();\n    /* const taskList = ['<goto>already_there', '<kill>kill'];\n    const quest = new Quest('Kill an actor', taskList);\n    questPopul.mapQuestToResources(quest, city, null);\n    questPopul.addQuestComponents(city);\n    */\n\n    const newBook = new Item.Book('Book of shadows');\n    newBook.addText('In the land of mordor where shadows lie...');\n    player.getInvEq().addItem(newBook);\n\n    const reportQuestTasks = ['<goto>already_there', '<report>listen',\n        '<goto>already_there', 'report'];\n    const reportQuest = new Quest('Report info to actor', reportQuestTasks);\n    questPopul.mapQuestToResources(reportQuest, city, null);\n    questPopul.addQuestComponents(city);\n\n    const actors = level.getActors();\n\n    const giver = actors.find(actor => actor.has('QuestGiver'));\n    const giverComp = giver.get('QuestGiver');\n    giverComp.setReward({type: 'item', name: 'Ruby glass mace'});\n    level.moveActorTo(giver, pX + 1, pY);\n\n    // Move all quest targets close to player for easier access and make them\n    // slow\n    const qTargets = actors.filter(actor => actor.has('QuestTarget'));\n    qTargets.forEach((target, i) => {\n        level.moveActorTo(target, pX, pY + 1 + i);\n        target.get('Stats').setSpeed(10);\n    });\n\n    // Test the weather system here\n    const weatherComp = new Component.Weather();\n    weatherComp.setWeatherType('snowStorm');\n    level.add(weatherComp);\n    const weatherActor = new WeatherActor('Weather actor');\n    level.addVirtualProp(RG.TYPE_ACTOR, weatherActor);\n\n    // Testing the trap elements such as web\n    const freeCells: Cell[] = level.getMap().getCells(c => c.isFree());\n    for (let i = 0; i < 200; i++) {\n        const cell = RNG.arrayGetRand(freeCells);\n        const [xx, yy] = cell.getXY();\n        level.addElement(new Element.ElementWeb(), xx, yy);\n        if (level.getMap().hasXY(xx + 1, yy + 1)) {\n            level.addElement(new Element.ElementSlime(), xx + 1, yy + 1);\n        }\n    }\n\n    const floorCells: Cell[] = level.getMap().getCells(c => (\n        c.hasPropType('floorhouse')));\n    for (let i = 0; i < 40; i++) {\n        const cell: Cell = RNG.arrayGetRand(floorCells);\n        cell.setBaseElem(ELEM.BED);\n    }\n\n    // Testing of Charm\n    const charmComp = new Component.Charm({level: 10});\n    player.add(charmComp);\n\n    const loreComp = new Component.Lore({});\n    loreComp.addTopic('quests',\n        giver.getName() + ' is looking for someone.');\n    level.add(loreComp);\n\n    const necrowurm = parser.createActor('necrowurm');\n    level.addActor(necrowurm, player.getX() - 1, player.getY());\n\n    return game;\n};\n\n/* Creates a debugging game for checking that quests work as planned. */\nDebugGame.prototype.createQuestsDebug = function(obj, game, player) {\n    const creator = new WorldCreator();\n    const areaConf = {maxX: 2, maxY: 2};\n    const worldConf: IF.WorldConf = {\n        name: 'Quest test world',\n        nAreas: 1,\n        area: [creator.createSingleAreaConf(0, areaConf)]\n    };\n    const factWorld = new FactoryWorld();\n    const world = factWorld.createWorld(worldConf);\n\n    const level = world.getZones('City')[0].getLevels()[0];\n    const pX = Math.floor(level.getMap().cols / 2);\n    const pY = Math.floor(level.getMap().rows / 2);\n    level.addActor(player, pX, pY);\n    game.addPlace(world);\n    game.addPlayer(player);\n    return game;\n};\n\nDebugGame.prototype.createTrainer = function() {\n    const human = this._parser.createActor('fighter');\n    human.setName('Old trainer');\n    const trainComp = new Component.Trainer();\n    trainComp.getChatObj().setTrainer(human);\n    human.add(trainComp);\n    return human;\n};\n\nDebugGame.prototype.addGoblinWithLoot = function(level) {\n    const goblin = this._parser.createActor('goblin');\n    goblin.setName('goblin with loot');\n    const loot = new Component.Loot(new Item.Weapon('sword'));\n    goblin.add(loot);\n\n    /* Should fix this TODO\n    const ssCorner = new RG.Element.Stairs('stairs', level, level);\n    level.addStairs(ssCorner, level.getMap().cols - 2, level.getMap().rows - 2);\n    const ssLoot = new RG.Element.Stairs('stairs', level, level);\n    const lootCompStairs = new Component.Loot(ssLoot);\n    goblin.add(lootCompStairs );\n    ssLoot.connect(ssCorner);\n    */\n    level.addActor(goblin, 2, 10);\n};\n\n\nDebugGame.prototype.createDebugBattle = function(obj, game, player) {\n    const battle = new Battle('Battle of ice kingdoms');\n    const army1 = new Army('Blue army');\n    const army2 = new Army('Red army');\n    this.addActorsToArmy(army1, 10, 'warlord');\n    this.addActorsToArmy(army2, 10, 'Winter demon');\n\n    const factLevel = new FactoryLevel();\n    const battleLevel = factLevel.createLevel('arena', 60, 30);\n    battle.setLevel(battleLevel);\n    battle.addArmy(army1, 1, 1, {});\n    battle.addArmy(army2, 1, 2, {});\n    game.addBattle(battle);\n\n    game.addPlayer(player);\n    return game;\n};\n\nDebugGame.prototype.addActorsToArmy = (army, num, name) => {\n    for (let i = 0; i < num; i++) {\n        const actor = this._parser.createActualObj('actors', name);\n        actor.setFOVRange(10);\n        army.addActor(actor);\n    }\n};\n\nDebugGame.prototype.createOneDungeonAndBoss = function(obj, game, player) {\n    const {cols, rows, nLevels, sqrPerActor, sqrPerItem} = obj;\n    let levelCount = 1;\n    const levels = ['rooms', 'rogue', 'digger'];\n\n    // For storing stairs and levels\n    const allStairsDown = [];\n    const allLevels = [];\n\n    const branch = new World.Branch('StartBranch');\n\n    const itemConstraint = maxValue => item => item.value <= maxValue;\n    // Generate all game levels\n    for (let nl = 0; nl < nLevels; nl++) {\n\n        const nLevelType = RNG.randIndex(levels);\n        let levelType = levels[nLevelType];\n        if (nl === 0) {levelType = 'ruins';}\n        const level = this._fact.createLevel(levelType, cols, rows);\n        branch.addLevel(level);\n\n        const numFree = level.getMap().getFree().length;\n        const actorsPerLevel = Math.round(numFree / sqrPerActor);\n        const itemsPerLevel = Math.round(numFree / sqrPerItem);\n\n        const potion = new Item.Potion('Healing potion');\n        level.addItem(potion);\n        const missile = this._parser.createActualObj('items', 'Shuriken');\n        missile.setCount(20);\n        level.addItem(missile);\n\n        const maxValue = 20 * (nl + 1);\n        const itemConf = {\n            itemsPerLevel, func: itemConstraint(maxValue),\n            maxValue,\n            food: () => true\n        };\n        this._fact.addNRandItems(level, this._parser, itemConf);\n\n        const actorConf = {\n            actorsPerLevel,\n            maxDanger: nl + 1\n        };\n        this._fact.addNRandActors(level, this._parser, actorConf);\n\n        allLevels.push(level);\n    }\n\n    // Create the final boss\n    const lastLevel = allLevels.slice(-1)[0];\n    const bossCell = lastLevel.getFreeRandCell();\n    const summoner = this._fact.createActor('Summoner',\n        {hp: 100, att: 10, def: 10});\n    summoner.setType('summoner');\n    summoner.get('Experience').setExpLevel(10);\n    lastLevel.addActor(summoner, bossCell.getX(), bossCell.getY());\n\n    const townLevel = this.createLastBattle(game, {cols: 80, rows: 60});\n    game.addLevel(townLevel);\n    townLevel.setLevelNumber(levelCount++);\n\n    branch.connectLevels();\n    game.addPlace(branch);\n\n    const finalStairs = new Stairs(true, allLevels[nLevels - 1], townLevel);\n    const stairsLoot = new Component.Loot(finalStairs);\n    summoner.add(stairsLoot);\n    allStairsDown.push(finalStairs);\n\n    const lastStairsDown = allStairsDown.slice(-1)[0];\n    const townStairsUp = new Stairs(false, townLevel, lastLevel);\n    const rStairCell = townLevel.getFreeRandCell();\n    townLevel.addStairs(townStairsUp, rStairCell.getX(), rStairCell.getY());\n    townStairsUp.setTargetStairs(lastStairsDown);\n    lastStairsDown.setTargetStairs(townStairsUp);\n\n    // Create townsfolk for the extra level\n    for (let i = 0; i < 10; i++) {\n        const name = 'Townsman';\n        const human = this._fact.createActor(name, {brain: 'Human'});\n        human.setType('human');\n        const cell = townLevel.getFreeRandCell();\n        townLevel.addActor(human, cell.getX(), cell.getY());\n    }\n\n    // Restore player position or start from beginning\n    if (obj.loadedLevel !== null) {\n        const loadLevel = obj.loadedLevel;\n        if (loadLevel <= nLevels) {\n            allLevels[loadLevel - 1].addActorToFreeCell(player);\n        }\n        else {\n            allLevels[0].addActorToFreeCell(player);\n        }\n    }\n    game.addPlayer(player, {place: 'StartBranch'});\n    return game;\n};\n\nDebugGame.prototype.createLastBattle = function(game, obj) {\n    const levelConf = Factory.cityConfBase({});\n    levelConf.parser = this._parser;\n\n    levelConf.nShops = 5;\n    const shopFunc = item => item.type === RNG.arrayGetRand(RG.SHOP_TYPES);\n    for (let i = 0; i < levelConf.nShops - 1; i++) {\n        levelConf.shopFunc.push(shopFunc);\n    }\n\n    levelConf.actorFunc = actor => actor.type === 'bearfolk';\n    levelConf.hasWall = false;\n\n    const cityGen = new CityGenerator();\n    const level = cityGen.create(obj.cols, obj.rows, levelConf);\n\n    // const level = this._fact.createLevel('town',\n    // obj.cols, obj.rows, levelConf);\n    this._listener = new ActorKillListener(this, game, level);\n\n    this._fact.createHumanArmy(level, this._parser);\n\n    level.setOnFirstEnter(() => {\n        const demonEvent = new Time.OneShotEvent(\n            this._fact.createDemonArmy.bind(this._fact, level, this._parser),\n            100 * 20,\n            'Demon hordes are unleashed from the unsilent abyss!');\n        game.addEvent(demonEvent);\n    });\n\n    level.setOnEnter( () => {\n        this._savedPlayerFOV = game.getPlayer().getFOVRange();\n        game.getPlayer().setFOVRange(20);\n    });\n    level.setOnExit( () => {\n        game.getPlayer().setFOVRange(this._savedPlayerFOV);\n    });\n\n    return level;\n};\n\nconst ActorKillListener = function(parent, game, level) {\n\n    // Needed for adding monsters and events\n    this._game = game;\n    this._level = level;\n\n    this._maxBeasts = 0;\n    this._maxDemons = 0;\n    this._beastsKilled = 0;\n    this._demonsKilled = 0;\n\n    this.hasNotify = true;\n    this.notify = function(evtName, obj) {\n        if (evtName === RG.EVT_ACTOR_CREATED) {\n            if (obj.hasOwnProperty('msg') && obj.msg === 'DemonSpawn') {\n                const actorCreated = obj.actor;\n                if (actorCreated.getName() === 'Winter demon') {\n                    ++this._maxDemons;\n                }\n                if (actorCreated.getName() === 'Blizzard beast') {\n                    ++this._maxBeasts;\n                }\n            }\n        }\n        else if (evtName === RG.EVT_ACTOR_KILLED) {\n            const actor = obj.actor;\n            if (actor.getName() === 'Winter demon') {\n                ++this._demonsKilled;\n                if (this._demonsKilled === this._maxDemons) {\n                    this.allDemonsKilled();\n                }\n                RG.debug(this,\n                    'A winter demon was slain! #' + this._demonsKilled);\n                RG.debug(this, 'Max demons: ' + this._maxDemons);\n            }\n            else if (actor.getName() === 'Blizzard beast') {\n                ++this._beastsKilled;\n                if (this._beastsKilled === this._maxBeasts) {\n                    this.allBeastsKilled();\n                }\n            }\n        }\n    };\n    POOL.listenEvent(RG.EVT_ACTOR_CREATED, this);\n    POOL.listenEvent(RG.EVT_ACTOR_KILLED, this);\n\n    this.addSnow = (lev, ratio) => {\n        const map = lev.getMap();\n        MapGenerator.addRandomSnow(map, ratio);\n    };\n\n    /* Called after all winter demons have been slain.*/\n    this.allDemonsKilled = () => {\n        RG.gameMsg(\n            'Humans have vanquished all demons! But it\\'s not over..');\n        const windsEvent = new Time.OneShotEvent(\n            this.addSnow.bind(this, this._level, 0.2), 20 * 100,\n            'Winds are blowing stronger. You feel it\\'s getting colder'\n        );\n        this._game.addEvent(windsEvent);\n        const stormEvent = new Time.OneShotEvent(\n            () => {}, 35 * 100, Texts.battle.eyeOfStorm);\n        this._game.addEvent(stormEvent);\n        const beastEvent = new Time.OneShotEvent(\n            parent.createBeastArmy.bind(parent, this._level, this._parser),\n            50 * 100,\n            'Winter spread by Blizzard Beasts! Hell seems to freeze.');\n        this._game.addEvent(beastEvent);\n    };\n\n    this.allBeastsKilled = () => {\n        RG.gameMsg(Texts.battle.beastsSlain);\n        // DO a final message of game over\n        // Add random people to celebrate\n        const msgEvent = new Time.OneShotEvent(() => {}, 10 * 100,\n            Texts.battle.enemiesDead);\n        this._game.addEvent(msgEvent);\n        const msgEvent2 = new Time.OneShotEvent(() => {}, 20 * 100,\n            'Battles in the North will continue soon in larger scale...');\n        this._game.addEvent(msgEvent2);\n    };\n}; // const ActorKillListener\n","\nexport const Texts: any = {};\n\nTexts.intro = {};\nTexts.intro.chapter1 = `\nWelcome to the wintry realms!\nWinds are ever-blowing. Blowing off the\nglaciers.\nAre you ready to face the challenges of the\nicy north? Hunger, coldness, ravenous\nbeasts, glacial chasms and forthcoming\neternal winter are waiting for you in the\ndarkness.\n`;\n\nTexts.intro.chapter2 = `\nYou have come a long way from your homelands\nseeking\nthe thrill of the adventure. Now, you must\nfight freezing battles in\nthe north against hordes of winter demons\nand blizzard beasts. Will you bring back the\npeace\nto the grim and frostbitten kingdoms. Or\nwill you\nbring the Winter of Ages upon its lands,\nreigning\nyour kingdom cold for all eternity? Or will\nyou\nperish\nnameless and forgotten on the icy wastes?\n`;\n\n\nTexts.battle = {};\nTexts.battle.eyeOfStorm =\n    'You see an eye of the storm approaching. Brace yourself now..';\n\nTexts.battle.beastsSlain =\n    'All beasts have been slain. The blizzard seems to calm down';\n\nTexts.battle.enemiesDead =\n    'All enemies are dead! You emerge victorious. Congratulations!';\n","\nimport {BaseActor, ACTOR_NO_ACTION} from './actor';\nimport {BrainVirtual} from './brain/brain.virtual';\nimport {BrainWeather} from './brain/brain.weather';\nimport * as Time from './time';\n\n/* Virtual actor can be used to spawn more entities or for AI-like effects\n * inside a level. */\nexport class VirtualActor extends BaseActor {\n\n    constructor(name) { // {{{2\n        super(name);\n        this._brain = new BrainVirtual(this);\n    }\n\n}\n\nexport class WeatherActor extends BaseActor {\n\n    constructor(name: string) { // {{{2\n        super(name);\n        this._brain = new BrainWeather(this);\n    }\n\n}\n","// Copyright 2012 Daniel Connelly.\n// Released under the Simplified (2-clause) BSD License.\n// See http://dhconnelly.com/prettybnf or the LICENSE file for more details.\n\n(function (exports) {\n'use strict';\n\nexports.version = '0.1.2';\nexports.parse = parse;\nexports.stringify = stringify;\nexports.Parser = Parser;\n\n// ---------------------------------------------------------------------------\n\nfunction Parser(input) {\n    var o = (this !== exports) ? this : {};\n    o.input = input;\n    o.pos = 0;\n    o.line = 1;\n    o.linePos = 0;\n}\n\nvar EOF = Parser.EOF = -1;\n\nParser.prototype.error = function (msg) {\n    throw new SyntaxError(msg + ' at ' + this.line + ':' + this.linePos);\n};\n\nParser.prototype.peek = function () {\n    if (this.pos >= this.input.length) return EOF;\n    return this.input[this.pos];\n};\n\nParser.prototype.eat = function (expected) {\n    var ch = this.peek();\n    if (expected !== undefined && expected !== ch) {\n        this.error('Expected ' + expected + ', got' + ch);\n    }\n    if (ch === EOF) return EOF;\n    this.pos++;\n    this.linePos++;\n    return ch;\n};\n\n// <ws> ::= <space> <ws> | <empty>;\n// <space> ::= \" \" | \"\\n\" | \"\\t\";\n// <empty> ::= \"\";\nParser.prototype.ws = function () {\n    var ret = '', ch;\n    while (' \\n\\t'.indexOf(ch = this.peek()) >= 0) {\n        if (ch === '\\n') {\n            this.line++;\n            this.linePos = 0;\n        }\n        ret += this.eat();\n    }\n    return ret;\n};\n\n// <escaped> ::= \"\\\\\\\"\" | \"\\\\n\" | \"\\\\t\" | \"\\\\\\\\\";\nParser.prototype.escaped = function () {\n    this.eat('\\\\');\n    var ch = this.peek();\n    switch (ch) {\n    case 'n':  this.eat(); return '\\n';\n    case 't':  this.eat(); return '\\t';\n    case '\"':  this.eat(); return '\"';\n    case '\\\\': this.eat(); return '\\\\';\n    }\n    this.error('Invalid escape sequence: \\\\' + ch);\n};\n\n// <char> ::= <letter> | <digit> | <delim> | <escaped>;\n// <letter> ::= \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\"\n//            | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\"\n//            | \"w\" | \"x\" | \"y\" | \"z\"\n//            | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\"\n//            | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\"\n//            | \"W\" | \"X\" | \"Y\" | \"Z\";\n// <digit> ::= \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"0\";\n// <delim> ::= \"-\" | \"_\" | \"|\" | \":\" | \"=\" | \";\" | \" \";\nParser.prototype.isChar = function () {\n    var ch = this.peek();\n    return ch !== EOF && ((/[a-zA-Z0-9\\-_|:=; \\/\\(\\)]/).test(ch) || ch === '\\\\');\n};\n\n// <text> ::= <char> <text> | <empty>;\nParser.prototype.text = function () {\n    var ret = '', ch;\n    while (this.isChar()) {\n        if (this.peek() === '\\\\') ret += this.escaped();\n        else ret += this.eat();\n    }\n    return ret;\n};\n\n// <terminal_text> ::= <terminal_char> <terminal_text> | <empty>;\n// <terminal_char> ::= <char> | \"<\" | \">\";\nParser.prototype.terminal_text = function () {\n    var ret = '', ch = this.peek();\n    while (this.isChar() || ch === '<' || ch === '>') {\n        if (ch === '\\\\') ret += this.escaped();\n        else ret += this.eat();\n        ch = this.peek();\n    }\n    return ret;\n};\n\n// <terminal> ::= \"\\\"\" <terminal_text> \"\\\"\";\nParser.prototype.terminal = function () {\n    this.eat('\"');\n    var text = this.terminal_text();\n    this.eat('\"');\n    return { type: 'terminal', text: text };\n};\n\n// <nonterminal> ::= \"<\" <text> \">\";\nParser.prototype.nonterminal = function () {\n    this.eat('<');\n    var text = this.text();\n    this.eat('>');\n    return { type: 'nonterminal', text: text };\n};\n\n// <term> ::= <terminal> | <nonterminal>;\nParser.prototype.term = function () {\n    return (this.peek() === '<') ? this.nonterminal() : this.terminal();\n};\n\n// <expression> ::= <term> <ws> <expression> | <term> <ws>;\nParser.prototype.expression = function () {\n    var terms = [this.term()];\n    this.ws();\n    while ('<\"'.indexOf(this.peek()) >= 0) {\n        terms.push(this.term());\n        this.ws();\n    }\n    return { type: 'expression', terms: terms };\n};\n\n// <expressions> ::= <expression> \"|\" <ws> <expressions> | <expression>;\nParser.prototype.expressions = function () {\n    var expressions = [this.expression()];\n    while (this.peek() === '|') {\n        this.eat('|');\n        this.ws();\n        expressions.push(this.expression());\n    }\n    return expressions;\n};\n\n// <production> ::= <nonterminal> <ws> \"::=\" <ws> <expressions> \";\";\nParser.prototype.production = function () {\n    var lhs = this.nonterminal();\n    this.ws();\n    this.eat(':'); this.eat(':'); this.eat('=');\n    this.ws();\n    var rhs = this.expressions();\n    this.eat(';');\n    return { type: 'production', lhs: lhs, rhs: rhs };\n};\n\n// <grammar> ::= <production> <ws> <grammar> | <production> <ws>;\nParser.prototype.grammar = function () {\n    var productions = [this.production()];\n    this.ws();\n    while (this.peek() === '<') {\n        productions.push(this.production());\n        this.ws();\n    }\n    return { type: 'grammar', productions: productions };\n};\n\n// ---------------------------------------------------------------------------\n\nfunction parse(g) {\n    return new Parser(g).grammar();\n}\n\nfunction escape(text) {\n    return text.replace(/\\\\/g, '\\\\\\\\').\n                replace(/\\\"/g, '\\\\\"').\n                replace(/\\n/g, '\\\\n').\n                replace(/\\t/g, '\\\\t');\n}\n\nfunction stringify(node) {\n    switch (node.type) {\n    case 'terminal':    return '\"' + escape(node.text) + '\"';\n    case 'nonterminal': return '<' + escape(node.text) + '>';\n    case 'expression':  return node.terms.map(stringify).join(' ');\n    case 'production':  return stringify(node.lhs) + ' ::= ' + node.rhs.map(stringify).join(' | ') + ';';\n    case 'grammar':     return node.productions.map(stringify).join('\\n') + '\\n';\n    }\n    throw new Error('Unknown node type: ' + node.type);\n}\n\n}(typeof exports === 'undefined' ? this.prettybnf = {} : exports));\n","/* This grammar/generation rules taken from publication\n    [1] \"A Prototype Quest Generator Based on a\n    Structural Analysis of Quests from Four MMORPGs\"\n    J. Doran and I. Parberry,\n    Proceedings of the Second International Workshop on Procedural Content\n    Generation in Games, pp. 1-8, Bordeaux, France, 2011\n*/\n\n/* Usage: require in another file. parse with BNF parser such as prettybnf. */\nimport {Random} from '../src/random';\n\nconst RNG = Random.getRNG();\nexport const QuestGrammar: any = {};\n\nconst topRule =\n`<QUEST> ::= <Knowledge> | <Comfort> |\n <Reputation> | <Serenity> |\n <Protection> | <Conquest> |\n <Wealth> | <Ability> | <Equipment> | <Strategy>;`;\n\nconst actorMotivationsGrammar =\n`<Knowledge> ::= <Deliver_item_for_study> |\n <Spy> |\n <Interview_NPC> |\n <Use_an_item_in_the_field> ;\n\n<Comfort> ::= <Obtain_luxuries> |\n <Kill_pests>;\n\n<Reputation> ::= <Obtain_rare_items> |\n <Kill_enemies> |\n <Visit_a_dangerous_place>;\n\n<Serenity> ::= <Revenge_Justice> |\n <Capture_Criminal1> |\n <Capture_Criminal2> |\n <Check_on_NPC1> |\n <Check_on_NPC2> |\n <Recover_lost_or_stolen_item> |\n <Rescue_captured_NPC>;\n\n<Protection> ::= <Attack_threatening_entities> |\n <Treat_or_repair_1> |\n <Treat_or_repair_2> |\n <Create_Diversion_1> |\n <Create_Diversion_2> |\n <Assemble_fortification> |\n <Guard_Entity>;\n\n<Conquest> ::= <Attack_enemy> |\n <Steal_stuff>;\n\n<Wealth> ::= <Gather_raw_materials> |\n <Steal_valuables_for_resale> |\n <Make_valuables_for_resale>;\n\n<Ability> ::= <Assemble_tool_for_new_skill> |\n <Obtain_training_materials> |\n <Use_existing_tools> |\n <Practice_combat> |\n <Practice_skill> |\n <Research_a_skill1> |\n <Research_a_skill2>;\n\n<Equipment> ::= <Assemble> |\n    <Deliver_supplies> |\n    <Steal_supplies> |\n    <Trade_for_supplies>;\n\n<Strategy> ::= <Win_a_battle> |\n    <Survive_a_battle>;`;\n\nconst grammar =\n`${topRule}\n\n${actorMotivationsGrammar}\n\n<Deliver_item_for_study> ::= <get> <goto> \"give\";\n<Spy> ::= <spy>;\n<Interview_NPC> ::= <goto> \"<report>listen\" <goto> \"report\";\n<Use_an_item_in_the_field> ::= <get> <goto> \"use\" <goto> \"give\";\n\n<Obtain_luxuries> ::= <get> <goto> \"give\";\n<Kill_pests> ::= <goto> \"damage\" <goto> \"report\";\n\n<Obtain_rare_items> ::= <get> <goto> \"give\";\n<Kill_enemies> ::= <goto> <kill> <goto> \"report\";\n<Visit_a_dangerous_place> ::= <goto> <goto> \"report\";\n\n<Revenge_Justice> ::= <goto> \"damage\";\n<Capture_Criminal1> ::= <get> <goto> \"use\" <goto> \"give\";\n<Capture_Criminal2> ::= <get> <goto> \"use\" \"capture\" <goto> \"give\";\n<Check_on_NPC1> ::= <goto> \"<report>listen\" <goto> \"report\";\n<Check_on_NPC2> ::= <goto> \"take\" <goto> \"give\";\n<Recover_lost_or_stolen_item> ::= <get> <goto> \"give\";\n<Rescue_captured_NPC> ::= <goto> \"damage\" \"escort\" <goto_new_place> \"report\";\n\n<Attack_threatening_entities> ::=<goto> \"damage\" <goto> \"report\";\n<Treat_or_repair_1> ::= <get> <goto> \"use\";\n<Treat_or_repair_2> ::= <goto> \"repair\";\n<Create_Diversion_1> ::= <get> <goto> \"use\";\n<Create_Diversion_2> ::= <goto> \"damage\";\n<Assemble_fortification> ::= <goto> \"repair\";\n<Guard_Entity> ::= <goto> \"defend\";\n\n<Attack_enemy> ::= <goto> \"damage\";\n<Steal_stuff> ::= <goto> <steal> <goto> \"give\";\n\n<Gather_raw_materials> ::= <goto> <get>;\n<Steal_valuables_for_resale> ::= <goto> <steal>;\n<Make_valuables_for_resale> ::= \"repair\";\n\n<Assemble_tool_for_new_skill> ::=\"repair\" \"use\";\n<Obtain_training_materials> ::= <get> \"use\";\n<Use_existing_tools> ::= \"use\";\n<Practice_combat> ::= \"damage\";\n<Practice_skill> ::= \"use\";\n<Research_a_skill1> ::= <get> \"use\";\n<Research_a_skill2> ::= <get> \"experiment\";\n\n<Assemble> ::= \"repair\";\n<Deliver_supplies> ::= <get> <goto> \"give\";\n<Steal_supplies> ::= <steal>;\n<Trade_for_supplies> ::= <goto> \"<get>exchange\";\n\n<Win_a_battle> ::= <goto> \"winbattle\";\n<Survive_a_battle> ::= <goto> \"finishbattle\";\n\n<subquest> ::= <goto> |\n    <goto> <QUEST> \"<subquest>goto\";\n\n<goto> ::= \"<goto>already_there\" | \"<goto>explore\" | <learn> \"<goto>goto\";\n\n<goto_new_place> ::= \"<goto>explore\" | <learn> \"<goto>goto\";\n\n<learn> ::= \"<learn>already_know_it\" |\n    <goto> <subquest> \"listen\" |\n    <goto> <get> \"<learn>read\" |\n    <get> <subquest> \"give\" \"listen\";\n\n<get> ::= \"<get>already_have_it\" |\n    <steal> |\n    <goto> \"<get>gather\" |\n    <goto> <get> <goto> <subquest> \"<get>exchange\";\n\n<steal> ::= <goto> \"<steal>stealth\" \"<steal>take\" |\n    <goto> <kill> \"<steal>take\";\n\n<spy> ::= <goto> \"<spy>spy\" <goto> \"report\";\n<capture> ::= <get> <goto> \"capture\";\n<kill> ::= <goto> \"<kill>kill\";`;\n\n/*\nTerminals:\n<EMPTY>\n\"capture\"\n\"damage\"\n\"defend\"\n\"escort\"\n\"exchange\"\n\"experiment\"\n\"explore\"\n\"gather\"\n\"give\"\n\"goto\"\n\"kill\"\n\"listen\"\n\"read\"\n\"repair\"\n\"report\"\n\"spy\"\n\"stealth\"\n\"take\"\n\"use\"\n*/\n\nconst motiveRe = /<(\\w+)>\\s*::=/;\n\nfunction getMotivations(text) {\n    const res = [];\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const matches = line.match(motiveRe);\n        if (matches && matches.length > 1) {\n            res.push(matches[1]);\n        }\n    });\n    return res;\n}\n\n/* Used to generate randomly different weights. Default values are simply\n*  borrowed from the [1]. */\nconst motiveWeights = {\n    Knowledge: 180,\n    Comfort: 20,\n    Reputation: 70,\n    Serenity: 140,\n    Protection: 180,\n    Conquest: 200,\n    Wealth: 20,\n    Ability: 10,\n    Equipment: 180,\n    Strategy: 40\n};\nQuestGrammar.motiveWeights = motiveWeights;\n\nconst actorMotivations = getMotivations(actorMotivationsGrammar);\n\nQuestGrammar.setWeight = function(motive, weight, clearOthers = false) {\n    if (clearOthers) {\n        // Can be used for debugging if only one type of motive is\n        // being tested\n        Object.keys(motiveWeights).forEach(mot => {\n            motiveWeights[mot] = 0;\n        });\n    }\n    motiveWeights[motive] = weight;\n};\n\nQuestGrammar.getRandMotive = function() {\n    RNG.getWeighted(motiveWeights);\n};\n\nQuestGrammar.grammar = grammar;\nQuestGrammar.actorMotivations = actorMotivations;\n\n","\n/* File contains code for procedural quest generation. */\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:quest-gen');\n\nimport RG from '../rg';\nimport {RandomCyclic} from '../random-cyclic';\nimport {Random} from '../random';\nimport {Placer} from '../placer';\nimport {ObjectShell} from '../objectshellparser';\n\nimport {Names} from '../../data/name-gen';\nimport {EventPool} from '../eventpool';\nimport {BaseActor, SentientActor} from '../actor';\nimport * as Item from '../item';\nimport * as Component from '../component';\nimport {Entity} from '../entity';\nimport {Level} from '../level';\nimport {ElementExploration} from '../element';\n\nimport {QuestData, QuestTargetObj, QuestObjSurrogate} from './quest-data';\nimport {Quest, Task} from './quest-task';\nimport {QuestGen} from './quest-gen';\n\nconst RNG = Random.getRNG();\nconst POOL = EventPool.getPool();\n\ntype ItemBase = Item.ItemBase;\ntype ItemOrNull = ItemBase | null;\ntype ZoneBase = import('../world').ZoneBase;\ntype AreaTile = import('../world').AreaTile;\ntype WorldCity = import('../world').City;\n\nimport {ElementBase} from '../element';\n\n//---------------------------------------------------------------------------\n// OBJECT QUEST-POPULATE\n//---------------------------------------------------------------------------\n\ninterface CleanupItem {\n    location: Level;\n    item?: ItemBase;\n    actor?: SentientActor;\n    element?: ElementBase;\n    tag?: string;\n}\n\ntype Location = Level | ZoneBase;\n\ninterface QuestPopulData {\n    actor: any[];\n    element: any[];\n    escort: any[];\n    item: any[];\n    listen: any[];\n    place: any[];\n    read: any[];\n    reportListen: any[];\n    return: any[];\n    zone: any[];\n}\n\ninterface QuestFlags {\n    alreadyKnowIt: boolean;\n    escort: boolean;\n    listen: boolean;\n    read: boolean;\n    report: boolean;\n}\n\nexport class QuestPopulate {\n\n    public static supportedKeys: Set<string>;\n\n    public pool: EventPool;\n    public currTile: AreaTile;\n    public questList: QuestData[];\n    public conf: {[key: string]: any};\n    public maxTriesPerZone: number;\n    public questTargetCallback: {[key: string]: (target) => void};\n    public checkImplemented: boolean;\n    public IND: number;\n    public debug: boolean;\n    public currTaskType: string;\n    public rng: Random;\n\n    private questData: {[key: string]: any}; // TODO\n    private _cleanup: CleanupItem[]; // TODO\n    private flags: QuestFlags;\n    private currQuest: QuestData | null;\n    // private _data: {[key: string]: any[]};\n    private _data: Map<QuestData, QuestPopulData>;\n    private _questCrossRefs: Map<any, any>;\n    private questGivers: Map<QuestData, SentientActor>;\n    private listOfAllTasks: string[];\n\n    constructor(conf?) {\n        this.resetData();\n        this.questList = [];\n        this.conf = {\n            maxLength: 10,\n            minLength: 1,\n            minQuests: 1,\n            maxQuests: 2,\n            numQuestsPerZone: 1\n        };\n\n        this.maxTriesPerZone = 5;\n\n        this.questTargetCallback = {\n            escort: this.handleEscort = this.handleEscort.bind(this),\n            repair: this.handleRepair = this.handleRepair.bind(this),\n            listen: this.handleListen = this.handleListen.bind(this),\n            reportListen: this.handleListen = this.handleListen.bind(this),\n            report: this.handleReport = this.handleReport.bind(this),\n            subquest: this.handleSubQuest = this.handleSubQuest.bind(this)\n        };\n\n        // Can be turned off for testing. Some quest features must be implemented\n        // outside QuestPopulate, but are not done yet. Thus only the implemented\n        // quests should be generated in the actual game.\n        this.checkImplemented = true;\n        this.IND = 0;\n        this.debug = debug.enabled;\n\n        // Set the RNG if specified for constructor\n        this.rng = RNG;\n        if (conf && conf.rng) {this.rng = conf.rng;}\n\n        this.pool = POOL;\n    }\n\n    public resetData(): void {\n        this.questData = {quests: []};\n        this.questList = [];\n        this._cleanup = [];\n\n        this.flags = {\n            alreadyKnowIt: false,\n            escort: false,\n            listen: false,\n            read: false,\n            report: false\n        };\n        this.listOfAllTasks = [];\n\n        this.currQuest = null;\n\n        // Data which must be stored between different quest items\n        this._data = new Map();\n\n        // Stores the refs between tasks like get-give\n        this._questCrossRefs = new Map();\n        this.questGivers = new Map();\n    }\n\n    public setDebug(val: boolean): void {\n        this.debug = val;\n        debug.enabled = val;\n    }\n\n    public getParentQuestData(): QuestData | null {\n        const currIndex = this.questData.quests.indexOf(this.currQuest);\n        if (currIndex > 0) {\n            return this.questData.quests[currIndex - 1];\n        }\n        return null;\n    }\n\n    public initQuestPopulDataForQuest(questData: QuestData): void {\n        this._data.set(questData, {\n            actor: [],\n            element: [],\n            escort: [],\n            item: [],\n            listen: [],\n            place: [],\n            read: [],\n            reportListen: [],\n            return: [],\n            zone: [],\n        });\n    }\n\n    public addQuestPopulData(key: string, populData): void {\n        if (!this._data.has(this.currQuest)) {\n            this.initQuestPopulDataForQuest(this.currQuest);\n        }\n\n        if (this._data.get(this.currQuest).hasOwnProperty(key)) {\n            this._data.get(this.currQuest)[key].push(populData);\n        }\n        else {\n            const keys = Object.keys(this._data.get(this.currQuest)).join(',');\n            RG.err('QuestPopulate', 'addQuestPopulData',\n               `Key ${key} not present. Choices: ${keys}`);\n        }\n    }\n\n    /* Returns previous item of given type. Type refers to actor/item/place/element.\n     * */\n    public getQuestPopulData(\n        type: string, searchParen: boolean = false\n    ): Entity | Location | null {\n        if (this._data.has(this.currQuest)) {\n            const qData: QuestPopulData = this._data.get(this.currQuest);\n            if (qData.hasOwnProperty(type) && qData[type].length > 0) {\n                const n = qData[type].length;\n                return qData[type][n - 1];\n            }\n            else if (searchParen) {\n                // TODO maybe this should be recursive call to getQuestPopulData()?\n                // now it searches only the immediate parent quest\n                const parentQuest = this.getParentQuestData();\n                if (parentQuest) {\n                    const qDataParent: QuestPopulData = this._data.get(parentQuest);\n                    if (qDataParent.hasOwnProperty(type)) {\n                        const n = qDataParent[type].length;\n                        return qDataParent[type][n - 1];\n                    }\n                }\n\n                RG.err('QuestPopulate', 'getQuestPopulData',\n                   `No data for type ${type}. Searched parent also`);\n            }\n            else {\n                const keys = Object.keys(qData);\n                RG.err('QuestPopulate', 'getQuestPopulData',\n                   `No data for type ${type}. Keys: ${keys}`);\n            }\n        }\n        else {\n            RG.err('QuestPopulate', 'getQuestPopulData',\n               'No data for currQuest exists');\n        }\n        return null;\n    }\n\n    /* Creates quests for given tile x,y in area in world. Returns the number\n     * of quests successfully created. */\n    public createQuests(world, area, x, y): number {\n        const areaTile: AreaTile = area.getTileXY(x, y);\n        const cities: WorldCity[] = areaTile.getZones('City') as WorldCity[];\n        let numCreated = 0;\n        cities.forEach((city: WorldCity) => {\n            numCreated += this.createQuestsForZone(city, areaTile);\n        });\n        return numCreated;\n    }\n\n    /* Creates quests for given zone located in the areaTile. Returns the number\n     * of quests correctly created.\n     */\n    public createQuestsForZone(zone: ZoneBase, areaTile: AreaTile): number {\n        const numQuests = this.conf.numQuestsPerZone || 1;\n        let numCreated = 0;\n        for (let i = 0; i < numQuests; i++) {\n            for (let n = 0; n < this.maxTriesPerZone; n++) {\n                const questGen = new QuestGen();\n                const quest: Quest = questGen.genQuestWithConf(this.conf);\n                this.resetData();\n                if (this.mapQuestToResources(quest, zone, areaTile)) {\n                    this.addQuestComponents(zone);\n                    ++numCreated;\n                    break;\n                }\n            }\n        }\n        return numCreated;\n    }\n\n    /* Tries to map a quest to world resources. Returns false if does not succeed.\n     * Can happen due to missing actors, levels or items etc. Mapping failure\n     * should not be an error. */\n    public mapQuestToResources(quest: Quest, zone: ZoneBase, areaTile: AreaTile): boolean {\n        ++this.IND;\n        this.currTile = areaTile;\n        const newQuest = new QuestData();\n\n        this.dbg('*** New quest started ****');\n        if (quest.isQuest()) {\n            this.dbg('  Quest has ' + quest.numTasks() + ' tasks');\n            this.dbg('  Quest has ' + (quest.numQuests() - 1) + ' sub-quests');\n        }\n\n        // We need to create a quest target to complete a sub-quest, if\n        // currQuest is already defined\n        let returnLocation = null;\n        if (this.currQuest) {\n            const target = {createTarget: 'createSubQuestTarget',\n                subQuest: newQuest, args: []};\n            this.dbg('Adding |subquest| target for current quest');\n            this.currQuest.addTarget('subquest', target);\n            returnLocation = this.currQuest.getCurrentLocation() as Level;\n        }\n\n        // We need to set return location for sub-quest (handled by\n        // <subquest>goto task, but the goto-task will be in the parent quest\n        if (returnLocation) {\n            this.addQuestPopulData('return', returnLocation);\n        }\n\n        this.currQuest = newQuest;\n        this.questData.quests.push(this.currQuest);\n        const level = this.rng.arrayGetRand(zone.getLevels());\n        this.currQuest.addTarget('location', level);\n\n\n        let ok = true;\n        quest.getSteps().forEach(step => {\n            const currLoc = this.currQuest.getCurrentLocation() as Level;\n            if (step.isQuest()) {\n                // Recursive call for sub-quests, check the current\n                // location for the quest\n                const newZone = currLoc.getParentZone();\n                ok = ok && this.mapQuestToResources(step, newZone, areaTile);\n            }\n            else {\n                const currZone = currLoc.getParentZone();\n                ok = ok && this.mapTask(quest, step, currZone, areaTile);\n            }\n        });\n\n        ok = ok && this._checkQuestFlags();\n        if (!ok) {\n            this.cleanUpFailedQuest();\n            --this.IND;\n            return false;\n        }\n        this.dbg('Created quest: ' + this.currQuest.getDescr());\n\n        // Finally, pop a quest from stack and make parent quest\n        // the current one\n        const nQuests = this.questData.quests.length;\n        if (nQuests > 1) {\n            this.questList.unshift(this.questData.quests.pop());\n            const nLast = this.questData.quests.length - 1;\n            this.currQuest = this.questData.quests[nLast];\n        }\n        else {\n            this.questList.unshift(this.currQuest);\n        }\n        --this.IND;\n        return true;\n    }\n\n    /* Used to add cross reference from later quest item to an earlier item. */\n    public pushQuestCrossRef(key, data): void {\n        const taskType = this.currTaskType;\n        if (!key) {\n            RG.err('QuestPopulate', 'pushQuestCrossRef',\n               `${taskType}: Undefined KEY with data ${data}`);\n        }\n        if (!data) {\n            RG.err('QuestPopulate', 'pushQuestCrossRef',\n               `${taskType}: Undefined DATA with key ${key}`);\n        }\n        if (!this._questCrossRefs.has(key)) {\n            this._questCrossRefs.set(key, []);\n        }\n        this._questCrossRefs.get(key).push(data);\n    }\n\n    public popQuestCrossRef(key: object): Entity | null {\n        if (this._questCrossRefs.has(key)) {\n            const arr = this._questCrossRefs.get(key);\n            if (arr.length > 0) {\n                const item = this._questCrossRefs.get(key).pop();\n                if (arr.length === 0) {\n                    this._questCrossRefs.delete(key);\n                }\n                return item;\n            }\n        }\n        return null;\n    }\n\n    /* Maps a single task to resources. Prev. or next step may also affect mapping.\n     * Contains large switch-for mapping different atomic tasks to resources. */\n    public mapTask(quest: Quest, task: Task, zone: ZoneBase, areaTile): boolean {\n        ++this.IND;\n        const taskType = task.getTaskType();\n        let ok = false;\n\n        if (this.checkImplemented && !tasksImplemented.has(taskType)) {\n            console.log(`TaskType |${taskType}| not implemented. Bailing out...`);\n            return false;\n        }\n\n        this.dbg('Processing taskType |' + taskType + '|');\n        this.listOfAllTasks.push(taskType);\n        this.currTaskType = taskType;\n\n        switch (taskType) {\n            case 'capture': {\n                const actorToCapture = this.getActorToCapture();\n                if (actorToCapture) {\n                    this.currQuest.addTarget('capture', actorToCapture);\n                    ok = true;\n                }\n                break;\n            }\n            case 'damage': {\n                const entToDamage = this.getEntityToDamage();\n                if (entToDamage) {\n                    this.currQuest.addTarget('damage', entToDamage);\n                    ok = true;\n                }\n                break;\n            }\n            case 'defend': {\n                // Defend city/place/entity from an assault\n                const entToDefend = this.getEntityToDefend();\n                if (entToDefend) {\n                    this.currQuest.addTarget('defend', entToDefend);\n                    ok = true;\n                }\n                break;\n            }\n            case 'escort': {\n                const actorToEscort = this.getActorToEscort(areaTile);\n                if (actorToEscort) {\n                    this.currQuest.addTarget('escort', actorToEscort);\n                    ok = true;\n                    this.addQuestPopulData('escort', actorToEscort);\n                    // this._data.escort.push(actorToEscort);\n                    this.flags.escort = true;\n                }\n                // Get a rescued NPC to follow you to a place\n                break;\n            }\n            case 'experiment': {\n                const item = this.getQuestPopulData('item');\n                if (item) {\n                    this.currQuest.addTarget('experiment', item);\n                    ok = true;\n                }\n                // TODO decide what this should do\n                break;\n            }\n            case '<get>already_have_it': {\n                // Find a item from player inventory and use it\n                const item = this.getAlreadyOwnedItem();\n                if (item) {\n                    this.currQuest.addTarget('get', item);\n                    ok = true;\n                    this.addQuestPopulData('item', item);\n                }\n                break;\n            }\n            case '<get>gather': {\n                // Create a random item (not to be stolen) to gather TODO\n                const newItem = this.getItemToGather();\n                if (newItem) {\n                    this.currQuest.addTarget('get', newItem);\n                    ok = true;\n                    this.addQuestPopulData('item', newItem);\n                }\n                break;\n            }\n            case '<get>exchange': {\n                // Find a shop in the town, and add an item there\n                const item = this.getItemToExchange();\n                if (item) {\n                    this.currQuest.addTarget('exchange', item);\n                    ok = true;\n                    this.addQuestPopulData('item', item);\n                }\n                break;\n            }\n            case 'give': {\n                // FInd previous item in the quest data, and assign task\n                const level = this.currQuest.getCurrentLocation();\n                const actorToGive = this.getActorForQuests(level.getActors());\n                if (actorToGive) {\n                    this.currQuest.addTarget('give', actorToGive);\n                    ok = true;\n                }\n                // to give it to someone\n                break;\n            }\n            case '<goto>already_there': {\n                // Don't add current location because it's already in the stack\n                ok = true;\n                if (this.flags.escort) {\n                    // There was some glitch, this should not happen\n                    ok = false;\n                }\n                break;\n            }\n            case '<goto>explore': {\n                // Changes the current quest location but also creates\n                // an explore target\n                const newLocation = this.getNewExploreLocation(zone, areaTile);\n                this.currQuest.addTarget('location', newLocation);\n                const exploreTarget = this.getExploreTarget();\n\n                if (exploreTarget) {\n                    this.currQuest.addTarget('explore', exploreTarget);\n                    ok = true;\n                    if (this.flags.read) {\n                        this.flags.read = false;\n                        // Read about this location from previous read target\n                        this.pushQuestCrossRef(this.getQuestPopulData('read'),\n                            newLocation);\n                    }\n                    if (this.flags.escort) {\n                        this.flags.escort = false;\n                        // Prev escort target must be escorted to this location\n                        const escortData = this.getQuestPopulData('escort', true);\n                        this.pushQuestCrossRef(escortData, newLocation);\n                    }\n                }\n                break;\n            }\n            case '<goto>goto': {\n                // TODO handle flags like learn and alreadyKnowIt\n                const newLocation = this.getNewLocation(zone, areaTile);\n                this.currQuest.addTarget('location', newLocation);\n                ok = true;\n                if (this.flags.read) {\n                    this.flags.read = false;\n                    // Read about this location from previous read target\n                    this.pushQuestCrossRef(this.getQuestPopulData('read'),\n                        newLocation);\n                }\n                if (this.flags.listen) {\n                    this.flags.listen = false;\n                    // Hear about this location from previous listen target\n                    this.pushQuestCrossRef(this.getQuestPopulData('listen'),\n                        newLocation);\n                }\n                if (this.flags.escort) {\n                    this.flags.escort = false;\n                    // Prev escort target must be escorted to this location\n                    const escortData = this.getQuestPopulData('escort', true);\n                    this.pushQuestCrossRef(escortData, newLocation);\n                }\n                break;\n            }\n            case '<kill>kill': {\n                const actorToKill = this.getActorToKill();\n                if (actorToKill) {\n                    this.currQuest.addTarget('kill', actorToKill);\n                    ok = true;\n                }\n                break;\n            }\n            case '<learn>already_know_it': {\n                // Set the flag, next quest step must use this\n                this.flags.alreadyKnowIt = true;\n                ok = true;\n                break;\n            }\n            case 'listen': {\n                const actorToListen = this.getActorToListen();\n                if (actorToListen) {\n                    this.currQuest.addTarget('listen', actorToListen);\n                    this.flags.listen = true;\n                    this.addQuestPopulData('listen', actorToListen);\n                    ok = true;\n                }\n                break;\n            }\n            case 'finishbattle': {\n                this.currQuest.addTarget('finishbattle',\n                    {createTarget: 'createBattle', args: [zone, areaTile]});\n                ok = true;\n                break;\n            }\n            case '<learn>read': {\n                const readTarget = this.getReadTarget(zone, areaTile);\n                if (readTarget) {\n                    this.addQuestPopulData('read', readTarget);\n                    // this._data.read.push(readTarget);\n                    this.flags.read = true;\n                    this.currQuest.addTarget('read', readTarget);\n                    ok = true;\n                }\n                break;\n            }\n            case 'repair': {\n                const repairTarget = this.getRepairTarget();\n                if (repairTarget) {\n                    this.currQuest.addTarget('repair', repairTarget);\n                    ok = true;\n                }\n                break;\n            }\n            case '<report>listen': {\n                const actorToListen = this.getActorToListen();\n                if (actorToListen) {\n                    this.currQuest.addTarget('reportListen', actorToListen);\n                    this.flags.report = true;\n                    this.addQuestPopulData('reportListen', actorToListen);\n                    ok = true;\n                }\n\n                break;\n            }\n            case 'report': {\n                const actor = this.getActorForReport();\n                if (actor) {\n                    this.currQuest.addTarget('report', actor);\n                    ok = true;\n                    if (this.flags.report) {\n                        const listenTarget = this.getQuestPopulData('reportListen');\n                        this.pushQuestCrossRef(actor, listenTarget);\n                        this.flags.report = false;\n                    }\n                }\n                break;\n            }\n            case '<spy>spy': {\n                const actor = this.getActorToSpy();\n                if (actor) {\n                    this.currQuest.addTarget('spy', actor);\n                    ok = true;\n                }\n                break;\n            }\n            case '<steal>stealth': {\n                // So far, nothing to do\n                ok = true;\n                break;\n            }\n            case '<subquest>goto': {\n                // Should return to the same location, before the subquest\n                const returnLocation = this.getQuestPopulData('return');\n                if (returnLocation) {\n                    this.currQuest.addTarget('location', returnLocation);\n                    ok = true;\n                    if (this.flags.escort) {\n                        this.flags.escort = false;\n                        // Prev escort target must be escorted to this location\n                        const escortData = this.getQuestPopulData('escort', true);\n                        this.pushQuestCrossRef(escortData, returnLocation);\n                    }\n                }\n                break;\n            }\n            case '<steal>take': {\n                const newItem = this.getItemToSteal();\n                if (newItem) {\n                    // this.currQuest.addTarget('steal', newItem);\n                    this.currQuest.addTarget('get', newItem);\n                    this.addQuestPopulData('item', newItem);\n                    // this._data.item.push(newItem);\n                    ok = true;\n                }\n                break;\n            }\n            case 'take': {\n                const newItem = this.getItemToSteal();\n                if (newItem) {\n                    // this.currQuest.addTarget('take', newItem);\n                    this.currQuest.addTarget('get', newItem);\n                    this.addQuestPopulData('item', newItem);\n                    ok = true;\n                }\n                break;\n            }\n            case 'use': {\n                const useItem = this.getItemToUse();\n                if (useItem) {\n                    this.currQuest.addTarget('use', useItem);\n                    ok = true;\n                }\n                // Do something like lit a fire or build bridge etc\n                break;\n            }\n            case 'winbattle': {\n                this.currQuest.addTarget('winbattle',\n                    {createTarget: 'createBattle', args: [zone, areaTile]});\n                ok = true;\n                // Find a battle outside town/create new one\n                break;\n            }\n            default: {\n                RG.err('QuestPopulate', 'mapTask',\n                    `Task type ${task.taskType} not supported yet`);\n            }\n        }\n\n        if (!ok) {\n            console.warn('QuestPopulate', 'mapTask',\n                `Failed to map ${task.getTaskType()}, ${JSON.stringify(task)}`);\n        }\n        --this.IND;\n        return ok;\n    }\n\n\n    /* Returns an actor from the given array, who is suitable as quest target\n     * or quest giver. */\n    public getActorForQuests(actors: BaseActor[]): BaseActor {\n        let actor = this.rng.arrayGetRand(actors);\n        let numTries = 20;\n        let createNew = false;\n\n        while (!isOkForQuest(actor)) {\n            actor = this.rng.arrayGetRand(actors);\n            if (--numTries === 0) {\n                createNew = true;\n                break;\n            }\n        }\n        if (createNew) {\n            // TODO\n        }\n        return actor;\n    }\n\n    public getActorToKill(): SentientActor {\n        const location = this.currQuest.getCurrentLocation();\n        let actors = location.getActors();\n        actors = actors.filter(a => !a.isPlayer() &&\n            a.hasNone(['QuestGiver', 'QuestTarget'])\n        );\n        // TODO make sure to return something meaningful like boss\n        return this.rng.arrayGetRand(actors) as SentientActor;\n    }\n\n    public getActorForReport(): SentientActor {\n        const location = this.currQuest.getCurrentLocation();\n        const actors = location.getActors();\n        return this.getActorForQuests(actors) as SentientActor;\n    }\n\n    public getActorToSpy(): SentientActor {\n        const location = this.currQuest.getCurrentLocation();\n        const actors = location.getActors();\n        return this.getActorForQuests(actors) as SentientActor;\n    }\n\n    /* Extracts an actor from current location. */\n    public getActorToListen(): SentientActor {\n        const level = this.currQuest.getCurrentLocation();\n        const actorToListen = this.getActorForQuests(level.getActors());\n        return actorToListen as SentientActor;\n    }\n\n    public getActorToEscort(areaTile: AreaTile): SentientActor {\n        const level = this.currQuest.getCurrentLocation();\n        const actorToEscort = this.getActorForQuests(level.getActors());\n        return actorToEscort as SentientActor;\n    }\n\n    public dbg(msg): void {\n        if (this.debug) {\n            const ind = '=='.repeat(this.IND);\n            debug(ind + msg);\n        }\n    }\n\n    /* Returns an item already in player's possession. */\n    public getAlreadyOwnedItem(): ItemOrNull {\n        const location = this.currQuest.getCurrentLocation();\n        // const actors = location.getActors();\n        const player = location.getPlayer() as SentientActor;\n        if (player) {\n            const items = player.getInvEq().getInventory().getItems();\n            return this.rng.arrayGetRand(items);\n        }\n        return null;\n    }\n\n    public getItemToSteal(): ItemOrNull {\n        const location = this.currQuest.getCurrentLocation();\n        const item = new Item.ItemBase(Names.getItemToStealName());\n\n        let ok = Placer.addEntityToCellType(item, location, c => c.hasHouse());\n        if (!ok) {\n            // If no house available, use empty cell\n            ok = Placer.addEntityToCellType(item, location, c => c.isFree());\n        }\n\n        if (!ok) {return null;}\n\n        this._cleanup.push({location, item, tag: 'getItemToSteal'});\n        return item;\n    }\n\n    public getItemToGather(): ItemOrNull {\n        const location = this.currQuest.getCurrentLocation();\n        const item = new Item.ItemBase('Quest item to gather');\n\n        if (!Placer.addEntityToCellType(item, location, c => c.isPassable())) {\n            return null;\n        }\n\n        this._cleanup.push({location, item, tag: 'getItemToGather'});\n        return item;\n    }\n\n    public getReadTarget(zone, areaTile): QuestObjSurrogate {\n        const location = this.currQuest.getCurrentLocation();\n        return {\n            createTarget: 'createBook', args: [location, zone, areaTile]\n        };\n    }\n\n    public getItemToUse(): ItemOrNull {\n        // TODO this cannot create the item directly because if further\n        // resource mapping fails, we need to delete the created item\n        const location = this.currQuest.getCurrentLocation();\n        const items = location.getItems();\n        const useItems = items.filter(item => item.hasOwnProperty('useItem'));\n        if (useItems.length > 0) {\n            return this.rng.arrayGetRand(useItems);\n        }\n\n        const parser = ObjectShell.getParser();\n        const itemToPlace = parser.createRandomItem(item => item.use);\n        if (!Placer.addEntityToCellType(itemToPlace, location, c => c.isPassable())) {\n            return null;\n        }\n        if (itemToPlace) {\n            this._cleanup.push({location, item: itemToPlace, tag: 'getItemToUse'});\n            return itemToPlace;\n        }\n        return null;\n    }\n\n    /* Finds a target to repair. */\n    public getRepairTarget(): Entity | null {\n        const location = this.currQuest.getCurrentLocation();\n        const elems = location.getElements();\n        const elemsToRepair = elems.filter(e => (\n            e.getType() === 'door' ||\n            e.getType() === 'leverdoor' ||\n            e.getType() === 'lever'\n        ));\n        if (elemsToRepair.length > 0) {\n            const elem: unknown = this.rng.arrayGetRand(elemsToRepair);\n            return elem as Entity;\n        }\n        return null;\n    }\n\n    /* Finds an entity to damage. Can be element or actor. */\n    public getEntityToDamage(): Entity | null {\n        const location = this.currQuest.getCurrentLocation();\n        const elems = location.getElements();\n        const doors = elems.filter(elem => elem.getType() === 'door');\n        if (doors) {\n            const chosenDoor: unknown = this.rng.arrayGetRand(doors);\n            return chosenDoor as Entity;\n        }\n\n        const actors = location.getActors();\n        if (actors.length > 0) {\n            return this.rng.arrayGetRand(actors);\n        }\n        return null;\n    }\n\n    public getEntityToDefend(): Entity | null {\n        const location = this.currQuest.getCurrentLocation();\n        const actors = location.getActors();\n        if (actors.length > 0) {\n            return this.rng.arrayGetRand(actors);\n        }\n        return null;\n    }\n\n    public getActorToCapture(): SentientActor {\n        const location = this.currQuest.getCurrentLocation();\n        const actors = location.getActors();\n        return this.getActorForQuests(actors) as SentientActor;\n    }\n\n    public getItemToExchange(): ItemBase | null {\n        const location = this.currQuest.getCurrentLocation();\n        const elems = location.getElements();\n        const shops = elems.filter(elem => elem.getType() === 'shop');\n        this.rng.shuffle(shops);\n\n        while (shops.length > 0) {\n            const cell = shops[0].getCell();\n            if (cell.hasItems()) {\n                const items = cell.getItems();\n                const unpaidItems = items.filter(item => item.has('Unpaid'));\n                if (unpaidItems.length > 0) {\n                    return unpaidItems[0];\n                }\n            }\n            shops.shift();\n        }\n        return null;\n    }\n\n    /* Returns a level from a new zone (which is not 'zone' arg). */\n    public getNewLocation(zone: ZoneBase, areaTile: AreaTile): Level {\n        if (this.flags.alreadyKnowIt) {\n            // TODO should return a location known by player\n            this.flags.alreadyKnowIt = false;\n        }\n\n        let zones: ZoneBase[] = areaTile.getZones();\n        zones = zones.filter(zz => zz.getType() !== 'battlezone');\n\n        let newZone: ZoneBase = this.rng.arrayGetRand(zones);\n        if (zones.length > 1) {\n            while (newZone.getID() === zone.getID()) {\n                newZone = this.rng.arrayGetRand(zones);\n            }\n        }\n\n        this.addQuestPopulData('zone', newZone);\n        return this.rng.arrayGetRand(newZone.getLevels());\n    }\n\n    public getNewExploreLocation(zone, areaTile): Level | null {\n        const dungeons = areaTile.getZones('Dungeon');\n        const mountains = areaTile.getZones('Mountain');\n        const allZones = dungeons.concat(mountains);\n        const randCycle = new RandomCyclic(allZones);\n        if (allZones.length > 0) {\n            let newZone = randCycle.next();\n            let watchdog = 20;\n            while (newZone.getID() === zone.getID()) {\n                newZone = randCycle.next();\n\n                if (--watchdog === 0) {\n                    break;\n                }\n            }\n            this.addQuestPopulData('zone', newZone);\n            return newZone.getLevels()[0];\n        }\n        return null;\n    }\n\n    public getExploreTarget() {\n        const zone = this.getQuestPopulData('zone') as ZoneBase;\n        const levels = zone.getLevels();\n        let exploreElem = null;\n        levels.forEach(level => {\n            if (!exploreElem) {\n                const elems = level.getElements();\n                exploreElem = elems.find(e => e.getType() === 'exploration');\n            }\n        });\n        return exploreElem;\n    }\n\n    public addQuestComponents(zone): void {\n        // Sub-quests must be mapped first, so that quest givers can be obtained\n        // for parent quetsts\n        for (let i = this.questList.length - 1; i >= 0; i--) {\n            const questData: QuestData = this.questList[i];\n            questData.resetIter();\n\n            questData.keys().forEach(key => {\n                if (QuestPopulate.supportedKeys.has(key)) {\n                    let target: QuestTargetObj = questData.next(key);\n                    while (target) {\n                        // Custom create function can be given such as createBattle\n                        // or createBook, which must return the target\n                        if (RG.isEntity(target)) {\n                            this.setAsQuestTarget(key, target as Entity);\n                        }\n                        else if ((target as QuestObjSurrogate).createTarget) {\n                            const {createTarget, args} = target as QuestObjSurrogate;\n                            if (typeof this[createTarget] !== 'function') {\n                                RG.err('QuestPopulate', 'addQuestComponents',\n                                    `${createTarget} not a func in QuestPopulate`);\n                            }\n\n                            const targetObj = this[createTarget](target, ...args);\n                            this.setAsQuestTarget(key, targetObj);\n                            // Replace target with newly create object\n                            if (!questData.replaceTarget(key, target, targetObj)) {\n                                RG.err('QuestPopulate', 'addQuestComponents',\n                                    'Failed to repl obj for ' + createTarget);\n                            }\n                        }\n                        else {\n                            // this.setAsQuestTarget(key, target);\n                        }\n                        target = questData.next(key);\n                    }\n                }\n                else {\n                    RG.err('QuestPopulate', 'addQuestComponents',\n                        `Unsupported key |${key}| found`);\n                }\n            });\n\n            // Grab random actor and make it the quest giver\n            const level: Level = this.rng.arrayGetRand(zone.getLevels());\n            const questGiver = this.getActorForQuests(level.getActors());\n            const giverComp = new Component.QuestGiver(questData.getDescr());\n            this.addTargetsToGiver(giverComp, questData);\n\n            questGiver.add(giverComp);\n            this.addUniqueName(questGiver);\n\n            level.get('Lore').addTopic('quests',\n               questGiver.getName() + ' could have some work for you');\n\n            // TODO fix typings\n            const giver = questGiver as unknown;\n            this.questGivers.set(questData, giver as SentientActor);\n        }\n\n    }\n\n    public addTargetsToGiver(giverComp, questData): void {\n        const questID = giverComp.getQuestID();\n        this.dbg('addTargetsToGiver now, ID ' + questID);\n\n        ++this.IND;\n        const pathTargets = questData.getPathTargets();\n        pathTargets.forEach(questTarget => {\n            this._checkTargetValidity(questTarget);\n            const targetComp = questTarget.get('QuestTarget');\n            if (targetComp) {\n                const [target, targetType] = [targetComp.getTarget(),\n                    targetComp.getTargetType()];\n                giverComp.addTarget(targetType, target);\n                targetComp.setQuestID(questID);\n            }\n            else {\n                const json = JSON.stringify(questTarget);\n                RG.err('QuestPopulate', 'addTargetsToGiver',\n                    `No QuestTarget found from target ${json}`);\n            }\n        });\n        --this.IND;\n    }\n\n    public _checkTargetValidity(target: Entity): void {\n        if (!RG.isEntity(target)) {\n            const msg = 'Non-Entity given: ' + JSON.stringify(target);\n            RG.err('QuestPopulate', '_checkTargetValidity', msg);\n        }\n    }\n\n    public setAsQuestTarget(key: string, target: Entity): void {\n        if (!target) {\n            const msg = `Null/undef target with key |${key}|`;\n            RG.err('QuestPopulate', 'setAsQuestTarget', msg);\n        }\n\n        if (typeof target.getID !== 'function') {\n            let msg = `questTarget without getID() given with key ${key}:`;\n            msg += ` ${JSON.stringify(target)}`;\n            RG.err('QuestPopulate', 'setAsQuestTarget', msg);\n        }\n\n        const qTarget = Component.create('QuestTarget');\n        qTarget.setTargetType(key);\n        qTarget.setTarget(target);\n        qTarget.setTargetID(target.getID());\n        target.add(qTarget);\n        if (RG.isActor(target) || RG.isItem(target)) {\n            this.addUniqueName(target);\n        }\n\n        if (this.questTargetCallback[key]) {\n            this.questTargetCallback[key](target);\n        }\n    }\n\n    /* Adds a location refence to an escorted target. This location\n     * is known only after escort target is selected, so we need to\n     * use crossrefs. */\n    public handleEscort(target): void {\n        const escortLocation = this.popQuestCrossRef(target);\n        if (escortLocation) {\n            const qEscort = Component.create('QuestEscortTarget');\n            qEscort.setEscortTo(escortLocation);\n            target.add(qEscort);\n        }\n        else {\n            this.dumpInternalData('handleEscort');\n            this.errorQuestHandle(target, 'handleEscort');\n        }\n    }\n\n\n    public handleRepair(target): void {\n        target.add(Component.create('Broken'));\n    }\n\n    /* Adds some info to listen to for the target actor. */\n    public handleListen(target): void {\n        const questInfo = Component.create('QuestInfo');\n        questInfo.setQuestion('Can you tell me something to report?');\n        questInfo.setInfo('Generate something to report');\n        // TODO add some quest-specific info\n        questInfo.setGivenBy(target.getID());\n        target.add(questInfo);\n    }\n\n    public handleReport(target): void {\n        const questReport = Component.create('QuestReport');\n        const listenTarget = this.popQuestCrossRef(target);\n        if (listenTarget) {\n            questReport.setExpectInfoFrom(listenTarget.getID());\n        }\n        target.add(questReport);\n    }\n\n    public handleSubQuest(target): void {\n        const qTarget = target.get('QuestTarget');\n        const giverComp = target.get('QuestGiver');\n        if (qTarget && giverComp) {\n            qTarget.setSubQuestID(giverComp.getQuestID());\n        }\n        else {\n            const json = JSON.stringify(target);\n            RG.err('QuestPopulate', 'handleSubQuest',\n                'Target must have QuestTarget + Giver comps: ' + json);\n        }\n    }\n\n    /* Adds a unique name to the given target entity (uses Named comp). */\n    public addUniqueName(target): void {\n        if (!target.has('Named')) {\n            const namedComp = Component.create('Named');\n            if (target.getName) {\n                namedComp.setName(target.getName());\n            }\n            target.add(namedComp);\n        }\n        const named = target.get('Named');\n        if (RG.isActor(target)) {\n            named.setUniqueName(Names.getActorName());\n        }\n        else if (RG.isItem(target)) {\n            // TODO add proper random name generation\n            const itemName = 'Quest item ' + this.rng.getUniformInt(0, 1000000);\n            console.log('addUniqueName rand item name ' + itemName);\n            named.setUniqueName(itemName);\n        }\n    }\n\n    public createBattle(target, zone, areaTile): Level | null {\n        const battleZones: ZoneBase[] = areaTile.getZones('BattleZone');\n        if (battleZones.length > 0) {\n            const battleZone = this.rng.arrayGetRand(battleZones);\n            // BattleZone has only 1 level at the moment\n            const level = battleZone.getLevels()[0];\n            return level;\n        }\n        else {\n            const eventArgs: any = { // TODO fix typings\n                areaTile, zone\n            };\n            this.pool.emitEvent(RG.EVT_CREATE_BATTLE, eventArgs);\n            if (eventArgs.response) {\n                console.log('createBattle return eventArgs.response.level');\n                const {battle} = eventArgs.response;\n                if (battle) {\n                    return battle.getLevel();\n                }\n            }\n            else {\n                RG.err('QuestPopulate', 'createBattle',\n                    'No response in eventArgs for EVT_CREATE_BATTLE');\n            }\n        }\n        return null;\n    }\n\n    public createBook(target: QuestTargetObj, level: Level): Item.Book | null {\n        const book = new Item.Book(Names.getBookName());\n        const location = this.popQuestCrossRef(target);\n        if (location) {\n            level.addItem(book);\n            // TODO setText() some info about the location etc\n            const placeName = RG.formatLocationName(location);\n            const bookText = ['Quest hint where to go:'];\n            bookText.push('You should go to place called ' + placeName);\n            book.setText(bookText);\n            book.addMetaData('place', {levelID: location.getID(), name: placeName});\n            return book;\n        }\n        else {\n            const crossRefs = JSON.stringify(this._questCrossRefs);\n            RG.err('QuestPopulate', 'createBook',\n                `No cross-refs set for book. refs: ${crossRefs}`);\n        }\n        return null;\n    }\n\n    public createSubQuestTarget(target): SentientActor {\n        const {subQuest} = target;\n        const giver = this.questGivers.get(subQuest);\n        return giver;\n    }\n\n    /* Checks that any flag set has been unset, and corresponding crossrefs\n     * have been set. If not, this can create problems when adding quest\n     * components. */\n    protected _checkQuestFlags(): boolean {\n        let allAreFalse = true;\n        Object.keys(this.flags).forEach(flagName => {\n            if (this.flags[flagName] !== false) {\n                allAreFalse = false;\n                console.log('Flag ', flagName, 'still true!');\n            }\n        });\n        return allAreFalse;\n    }\n\n    /* Cleans up already created resources which would've been part of quest.\n     * Quest gen failed for some reason, so we'll clean up the resources. */\n    protected cleanUpFailedQuest(): void {\n        let numCleaned = 0;\n        this._cleanup.forEach((cleanupObj: CleanupItem) => {\n            const {location} = cleanupObj;\n            let ok = false;\n            let questObj = null;\n            if (cleanupObj.item) {\n                const [x, y] = cleanupObj.item.getXY();\n                questObj = cleanupObj.item;\n                try {\n                    ok = location.removeItem(cleanupObj.item, x, y);\n                }\n                catch (e) {\n                    const {tag} = cleanupObj;\n                    const name = cleanupObj.item.getName();\n                    const itemList = location.getItems().map(i => i.toString());\n                    let msg = `Failed to cleanup item ${name} @ ${x},${y}`;\n                    if (tag) {msg += '\\nTag specified: |' + tag + '|';}\n                    msg += '\\n' + e.message;\n                    msg += '\\nItems at loc: ' + itemList;\n                    RG.err('QuestPopulate', 'cleanUpFailedQuest', msg);\n                }\n            }\n            else if (cleanupObj.actor) {\n                const [x, y] = cleanupObj.actor.getXY();\n                ok = location.removeActor(cleanupObj.actor);\n                questObj = cleanupObj.actor;\n            }\n            else if (cleanupObj.element) {\n                const [x, y] = cleanupObj.element.getXY();\n                ok = location.removeElement(cleanupObj.element, x, y);\n                questObj = cleanupObj.element;\n            }\n            if (ok) {\n                ++numCleaned;\n            }\n        });\n        if (numCleaned !== this._cleanup.length) {\n            RG.warn('QuestPopulate', 'cleanUpFailedQuest',\n                'Did not remove all quest items for failed quest');\n        }\n        // Clear the list to prevent double cleanup\n        this._cleanup = [];\n    }\n\n    protected errorQuestHandle(target, funcName): void {\n        let msg = 'Failed to get location for escort: ';\n        msg +=  '\\n\\ttarget: ' + target.getName();\n        msg +=  '\\n\\tcrossRefs: ' + JSON.stringify(Object.values(\n            this._questCrossRefs.entries()));\n        RG.err('QuestPopulate', funcName, msg);\n    }\n\n    /* Used for debugging to show various pieces of internal data. */\n    protected dumpInternalData(tag): void {\n        if (typeof window !== 'undefined') {\n            (window as any).QUEST_GEN = this;\n        }\n    }\n}\n\nconst tasksImplemented = new Set([\n    'damage',\n    'escort',\n    '<get>gather', 'give',\n    '<kill>kill',\n    '<goto>already_there', '<goto>explore', '<goto>goto',\n    '<learn>already_know_it', '<learn>read',\n    'listen', '<report>listen', 'report',\n    '<steal>stealth', '<steal>take', 'take',\n    '<subquest>goto',\n    'finishbattle', 'winbattle'\n]);\n\n/* Returns true if given actor can be used as quest target/giver. */\nfunction isOkForQuest(actor: BaseActor): boolean {\n    return actor.has('Corporeal') &&\n        (RG.ALL_RACES.indexOf(actor.getType()) >= 0) &&\n    !(\n        actor.isPlayer() || actor.has('QuestTarget')\n        || actor.has('QuestGiver')\n    );\n}\n\n//---------------------------------------------------------------------------\n// ADDING QUEST-RELATED COMPONENTS (last stage)\n// - should be done only if mapping of quest to resources succeeds\n//---------------------------------------------------------------------------\n\nQuestPopulate.supportedKeys = new Set([\n    'defend', 'capture', 'explore',\n    'kill', 'location', 'listen', 'give', 'report', 'reportListen',\n    'get', 'steal', 'use',\n    'repair', 'damage', 'winbattle', 'finishbattle', 'escort', 'spy',\n    'exchange', 'read', 'experiment', 'subquest'\n]);\n\n/*\nfunction isEntity(obj: any): obj is Entity {\n    if ((obj as Entity).comps && (obj as Entity).compsByType && (obj as Entity).add && (obj as Entity).get) {\n        return true;\n    }\n    return false;\n}\n*/\n","\nimport RG from './rg';\nimport {Random} from './random';\n\nconst RNG = Random.getRNG();\n\ntype DATA = any;\n\n/* Given an array, cycles through all of its values in random order, but is\n * guaranteed to eventually return each value. */\nexport class RandomCyclic {\n\n    public arr: DATA[];\n    public length: number;\n    public indicesLeft: number[];\n    public _prevValue: DATA;\n    public _currValue: DATA;\n\n    constructor(arr) {\n        if (!arr || arr.length === 0) {\n            RG.err('RandomCyclic', 'new',\n                'array with length > 0 must be given');\n        }\n        this.arr = arr;\n        this.reset();\n        this.length = arr.length;\n    }\n\n    reset(): void {\n        this.indicesLeft = [];\n        this.arr.forEach((item, index) => {\n            this.indicesLeft.push(index);\n        });\n        this._prevValue = null;\n        this._currValue = null;\n    }\n\n    prev(): DATA {\n        return this._prevValue;\n    }\n\n    next(): DATA {\n        if (this.indicesLeft.length === 0) {\n            this.reset();\n        }\n        const index = RNG.arrayGetRand(this.indicesLeft);\n        // Remove just found index from indicesLeft\n        this.indicesLeft = this.indicesLeft.filter(val => val !== index);\n\n        this._prevValue = this._currValue;\n        this._currValue = this.arr[index];\n        return this._currValue;\n    }\n}\n","\nimport {AbandonedFort} from './abandoned-fort';\nimport {BlackTower} from './black-tower';\nimport {Capital} from './capital';\nimport {DwarvenCity} from './dwarven-city';\nimport {Level} from '../src/level';\n\nimport RG from '../src/rg';\n\ntype LevelArgs = [number, number, any];\n\ninterface LevelObj {\n    nLevel: number;\n    level: Level;\n}\n\n/* Factory for creating levels by specifying their name. */\nexport class LevelFactory {\n\n    public static levels: {[key: string]: (...args: any[]) => Level | LevelObj[]};\n\n    public fact: any;\n    public createFunc: {[key: string]: (...args: any[]) => Level | LevelObj[]};\n\n    constructor(fact) {\n        this.fact = fact;\n        this.createFunc = {};\n    }\n\n    public addFunction(name: string, createFunc): void {\n        this.createFunc[name] = createFunc;\n    }\n\n    public create(name, args: LevelArgs): Level | LevelObj[] {\n        // Check if this is a default level\n        if (LevelFactory.levels.hasOwnProperty(name)) {\n            return LevelFactory.levels[name](...args);\n        }\n        else if (this.createFunc.hasOwnProperty(name)) {\n            return this.createFunc[name](...args);\n        }\n        else if (this.fact) {\n            return this.fact.createLevel(name, ...args);\n        }\n        else {\n            RG.err('LevelFactory', 'create',\n                'No factory/factory function given. Name: ' + name);\n        }\n        return null;\n    }\n\n}\n\nLevelFactory.levels = {\n    Capital: (...args) => new Capital(...args as LevelArgs).getLevel(),\n    DwarvenCity: (...args) => new DwarvenCity(...args as LevelArgs).getLevel(),\n    AbandonedFort: (...args) => new AbandonedFort(...args as LevelArgs).getLevel(),\n    BlackTower: (...args) => new BlackTower(...args as LevelArgs).getLevels()\n};\n","/* Contains code to generate the abandoned fort. */\n\nimport RG from '../src/rg';\nimport {FactoryBase} from '../src/factory';\nimport {FactoryItem} from '../src/factory.items';\nimport {FactoryLevel} from '../src/factory.level';\nimport {ObjectShell} from '../src/objectshellparser';\nimport {Path} from '../src/path';\nimport {Builder} from '../src/builder';\nimport {Level} from '../src/level';\nimport * as Element from '../src/element';\nimport {Castle} from '../data/tiles.castle';\nimport {MapGenerator} from '../src/map.generator';\nimport {Geometry} from '../src/geometry';\n\nconst TILE_SIZE = 7;\n\nexport const abandonedFortConf = {\n    outerColsRatio: 0.4,\n    outerRowsRatio: 0.4,\n    outerStartXRatio: 0.4,\n    mountainWallRatio: 0.3,\n    castleRowsRatio: 0.6,\n    castleColsRatio: 0.6\n};\n\nexport class AbandonedFort {\n\n  public level: Level;\n\n  constructor(cols, rows, conf) {\n    if (!conf) {\n        conf = abandonedFortConf;\n    }\n    const outerColsRatio = conf.outerColsRatio || 0.4;\n    const outerRowsRatio = conf.outerRowsRatio || 0.4;\n    const outerStartXRatio = conf.outerStartXRatio || 0.4;\n    const mountainWallRatio = conf.mountainWallRatio || 0.3;\n\n    const mainWallOpts = {\n      meanWx: Math.floor(mountainWallRatio * cols),\n      stdDev: 10,\n      filterW: 7,\n      north: true, south: true, east: false, west: false,\n      alignHorizontal: 'right'\n    };\n\n    const mountConf = {\n        nRoadTurns: 0, snowRatio: 0.3\n    };\n    const mainLevel = this.createLevel('mountain', cols, rows, mountConf);\n    const mainMap = mainLevel.getMap();\n\n    const mapGen = new MapGenerator();\n    const outerWallConf = {\n        startRoomFunc: Castle.startRoomFuncWest\n    };\n    const outerCols = Math.round(outerColsRatio * cols);\n    const outerRows = Math.round(outerRowsRatio * rows);\n    const outerWall = mapGen.createCastleWall(outerCols, outerRows,\n        outerWallConf);\n\n    const outerX = Math.round(outerStartXRatio * cols);\n    const outerY = Math.round(rows / 2 - outerWall.map.rows / 2);\n    Geometry.mergeMapBaseElems(mainMap, outerWall.map, outerX, outerY);\n\n    const wallCols = Math.floor(cols / 2);\n    const mountWall = this.createLevel('wall', wallCols, rows,\n      mainWallOpts);\n    const wallX = cols - mountWall.getMap().cols;\n    const wallY = 0;\n    MapGenerator.addRandomSnow(mountWall.getMap(), 0.3);\n    Geometry.mergeLevels(mainLevel, mountWall, wallX, wallY);\n\n    const castle = this.getCastleLevel(rows, cols, conf);\n    const castleX = cols - castle.getMap().cols;\n    const castleY = Math.round((rows - castle.getMap().rows) / 2);\n    Geometry.mergeLevels(mainLevel, castle, castleX, castleY);\n\n    // Add stairs for entrance and exit\n    const midY = Math.floor(rows / 2);\n    const stairsWest = new Element.ElementStairs('stairsUp', mainLevel);\n    mainLevel.addStairs(stairsWest, 0, midY);\n\n    // Exit stairs are added to right-most coordinates\n    const castleRows = castle.getMap().rows;\n    const castleCols = castle.getMap().cols;\n\n    let y0 = castleY;\n    let y1 = castleY + (castleRows - 1);\n    // Offset by castle corridor\n    y0 += TILE_SIZE;\n    y1 -= TILE_SIZE;\n\n    const eastCell = mainMap.getFirstFreeFromRight(y0, y1);\n    const [sX, sY] = [eastCell.getX(), eastCell.getY()];\n    const stairsEast = new Element.ElementStairs('stairsDown', mainLevel);\n    mainLevel.addStairs(stairsEast, sX, sY);\n\n    const castleBbox = {ulx: castleX, uly: castleY,\n        lrx: castleX + castleCols - 1, lry: castleY + castleRows - 1\n    };\n\n    const parser = ObjectShell.getParser();\n    const itemFact = new FactoryItem();\n\n    // Add items to free cells inside the castle\n    const castleFreeCells = mainMap.getFreeInBbox(castleBbox);\n    const itemConf = {\n        itemsPerLevel: 50, nLevel: 0,\n        func: item => item.value >= 100 && item.value <= 200,\n        maxValue: 500\n    };\n    itemFact.addItemsToCells(mainLevel, parser, castleFreeCells, itemConf);\n\n    const fortActors = {'Mighty raven': true, 'Winter demon': true,\n        Cryomancer: true, 'Ice djinn': true, Stormrider: true,\n        'Snow leopard': true};\n    const actorConf = {\n        actorsPerLevel: 500,\n        func: actor => fortActors.hasOwnProperty(actor.name),\n        maxDanger: 10\n    };\n\n    const fact = new FactoryBase();\n    fact.addNRandActors(mainLevel, parser, actorConf);\n\n    this.createPathToFort(mainLevel, castleX);\n\n    this.level = mainLevel;\n  }\n\n  getCastleLevel(rows, cols, conf) {\n    const castleRowsRatio = conf.castleRowsRatio || 0.6;\n    const castleColsRatio = conf.castleColsRatio || 0.6;\n    const castleRows = Math.floor(castleRowsRatio * rows);\n    const castleCols = Math.floor(castleColsRatio * cols);\n    const castleOpts = {\n      tilesX: Math.round(castleCols / 7),\n      tilesY: Math.round(castleRows / 7),\n      roomCount: 200,\n      startRoomFunc: Castle.startRoomFuncWest\n    };\n\n    const castle = this.createLevel('castle', castleCols,\n      castleRows, castleOpts);\n    return castle;\n\n  }\n\n  createLevel(name: string, cols, rows, conf: any): Level {\n      return new FactoryLevel().createLevel(name, cols, rows, conf);\n  }\n\n\n  createPathToFort(level, castleX) {\n    const map = level.getMap();\n    const x0 = 0;\n    const x1 = castleX + 1;\n    const y0 = Math.floor(map.rows / 2);\n    const y1 = Math.floor(map.rows / 2);\n    this.createVariedPath(map, {x0, x1, y0, y1});\n  }\n\n  createVariedPath(map, confObj) {\n      const {x0, y0, x1, y1} = confObj;\n      const dx = 20;\n      let coord = [];\n      for (let x = x0; x < x1; x += dx) {\n        let xEnd = x + dx;\n        if (xEnd > x1) {xEnd = x1;}\n        const segCoord = Path.getMinWeightPath(map, x, y0, xEnd, y1);\n        coord = coord.concat(segCoord);\n      }\n      Builder.addPathToMap(map, coord);\n  }\n\n  getLevel() {\n    return this.level;\n  }\n\n}\n","\n/* Contains the code for final Black tower. */\n\nimport RG from '../src/rg';\nimport {Vault} from './tiles.vault';\nimport {CastleGenerator} from '../src/castle-generator';\nimport {FactoryZone} from '../src/factory.zone';\nimport {Geometry} from '../src/geometry';\nimport {FactoryLevel} from '../src/factory.level';\n\nconst tileSize = 9;\n\nexport class BlackTower {\n\n    public nLevels: number;\n    public cols: number;\n    public rows: number;\n    public tilesX: number;\n    public tilesY: number;\n    public conf: {[key: string]: any};\n\n    constructor(cols, rows, conf: any = {}) {\n        this.nLevels = conf.nLevels || 5;\n        this.cols = cols || 100;\n        this.rows = rows || 50;\n        this.tilesX = Math.round(this.cols / tileSize);\n        this.tilesY = Math.round(this.rows / tileSize);\n        /* if (this.tilesX % 2 === 0) {++this.tilesX;}\n        if (this.tilesY % 2 === 0) {++this.tilesY;}*/\n        this.conf = conf;\n    }\n\n    getLevels() {\n        const castleGen = new CastleGenerator();\n        const castleConf: any = { // TODO fix typings\n            wallType: 'wallice',\n            // floorType: 'floorice',\n            genParams: [2, 2, 2, 2],\n            nGates: 2,\n            roomCount: -1,\n            tilesX: this.tilesX,\n            tilesY: this.tilesY\n        };\n        const levels = [\n            castleGen.createLevel(this.cols, this.rows, castleConf)\n        ];\n        delete castleConf.nGates;\n\n        for (let i = 0; i < this.nLevels - 2; i++) {\n            levels.push(\n                castleGen.createLevel(this.cols, this.rows, castleConf)\n            );\n        }\n\n        // Last level has a huge vault in the center point\n        const [midXTile, midYTile] = [\n            Math.round(this.tilesX / 2),\n            Math.round(this.tilesY / 2)\n        ];\n        castleConf.callbacks = {};\n        const afterInitCb = level => {\n            Vault.templates.all.forEach(templ => {level.addTemplate(templ);});\n            Vault.func.createHugeVault(midXTile - 1, midYTile - 2, level,\n                'vault_center1', 'entrance_n');\n        };\n        castleConf.callbacks.afterInit = afterInitCb;\n        const lastLevel = castleGen.createLevel(this.cols, this.rows,\n            castleConf);\n        levels.push(lastLevel);\n\n        this.generateYard(levels);\n        this.addProps(levels);\n\n        levels.forEach((level, i) => {\n            castleGen.removeMarkers(level, {\n                markersPreserved: false,\n                shouldRemoveMarkers: true\n            });\n\n            const maxDanger = this.getDanger(i) + 5;\n            const populConf = {\n                maxDanger,\n                actorFunc: actor => actor.base === 'WinterBeingBase'\n            };\n            castleGen.populateStoreRooms(level, populConf);\n        });\n\n        return levels.map((level, i) => ({nLevel: i, level}));\n    }\n\n    getDanger(nLevel) {\n        return 7 + 3 * nLevel; // arbitraty, to tune\n    }\n\n    /* Adds properties like actors and items into levels. */\n    addProps(levels) {\n        const factZone = new FactoryZone();\n        levels.forEach((level, i) => {\n            const maxDanger = this.getDanger(i);\n            const conf = {\n                nLevel: i,\n                minValue: 50 + 10 * i,\n                maxValue: 65 + 20 * (i + 1),\n                sqrPerItem: 200,\n                sqrPerActor: 40 - 2 * i,\n                maxDanger,\n                actor: actor => actor.base === 'WinterBeingBase'\n            };\n            factZone.addItemsAndActors(level, conf);\n\n            // Level up each actor to at least maxDanger level\n            const actors = level.getActors();\n            actors.forEach(actor => {\n                const exp = actor.get('Experience');\n                if (exp) {\n                    const danger = exp.getDanger();\n                    const levelGap = maxDanger - danger;\n                    const currLevel = exp.getExpLevel();\n                    const newLevel = currLevel + levelGap;\n                    if (newLevel > currLevel) {\n                        RG.levelUpActor(actor, newLevel);\n                    }\n                }\n            });\n        });\n    }\n\n    /* Generate the outside yard for the first level. */\n    generateYard(levels): void {\n        const level0 = levels[0];\n        const scaleYard = 1.4;\n\n        const [cols, rows] = level0.getColsRows();\n        const yardRows = Math.round(rows * scaleYard);\n        const yardCols = Math.round(cols * scaleYard);\n        const factLevel = new FactoryLevel();\n        const yardLevel = factLevel.createLevel('arctic', yardCols, yardRows);\n\n        const startX = Math.round((yardCols - cols) / 2);\n        const startY = Math.round((yardRows - rows) / 2);\n        Geometry.mergeLevels(yardLevel, level0, startX, startY);\n        yardLevel.getExtras().connectEdges = true;\n\n        levels[0] = yardLevel;\n    }\n\n}\n","/* Code to create a surroundings for a level. This is useful for example\n * if city is close to water or mountain, and those features must\n * be added around the city. */\nimport RG from './rg';\nimport {Geometry} from './geometry';\nimport {Random} from './random';\nimport {Level} from './level';\nimport {MapGenerator} from './map.generator';\nimport {ELEM} from '../data/elem-constants';\n\nconst RNG = Random.getRNG();\n\nexport class LevelSurroundings {\n    /* Surrounds the given level with features based on different params:\n     * conf: {\n     *     surroundX,surroundY: <size of the padding>\n     *     cellsAround: {N: 'water', S: 'wallmount', E: 'snow' ...}\n     * }\n     */\n    surround(level, conf) {\n        if (conf.cellsAround) {\n            return this.surroundWithCellsAround(level, conf);\n        }\n        const json = JSON.stringify(conf);\n        RG.err('LevelSurroundings', 'surround',\n            `No conf given for surround. Got: ${json}`);\n        return null;\n    }\n\n    surroundWithCellsAround(level, conf) {\n        const xSize = 2 * conf.surroundX || 2 * 10;\n        const ySize = 2 * conf.surroundY || 2 * 10;\n\n        const {cols, rows} = level.getMap();\n        const colsArea = cols + xSize;\n        const rowsArea = rows + ySize;\n        const {cellsAround} = conf;\n\n        const wallConf: any = {};\n        if (cellsAround.N === 'wallmount') {\n            wallConf.alignVertical = 'top';\n        }\n        else if (cellsAround.S === 'wallmount') {\n            wallConf.alignVertical = 'bottom';\n        }\n\n        if (cellsAround.E === 'wallmount') {\n            wallConf.alignHorizontal = 'left';\n            wallConf.north = true;\n            wallConf.south = true;\n        }\n        else if (cellsAround.W === 'wallmount') {\n            wallConf.alignHorizontal = 'right';\n            wallConf.north = true;\n            wallConf.south = true;\n        }\n        wallConf.meanWx = RNG.getUniformInt(5, xSize);\n        wallConf.meanWy = RNG.getUniformInt(5, ySize);\n        wallConf.wallElem = ELEM.WALL_MOUNT;\n\n        const mapgen = new MapGenerator();\n        // mapgen.setGen('empty', colsArea, rowsArea);\n        const mapObj = mapgen.createWall(colsArea, rowsArea, wallConf);\n        const mountLevel = new Level();\n        mountLevel.setMap(mapObj.map);\n\n        Object.keys(cellsAround).forEach(dir => {\n            if (cellsAround[dir] === 'water') {\n                const lakeConf = {\n                    ratio: 0.6, skipTypes: {wallmount: true},\n                    forestSize: 300, nForests: 10\n                };\n                const bbox = Geometry.dirToBbox(colsArea, rowsArea, dir);\n                mapgen.addLakes(mountLevel.getMap(), lakeConf, bbox);\n            }\n        });\n\n        Geometry.mergeLevels(mountLevel, level, xSize / 2, ySize / 2);\n        return mountLevel;\n\n    }\n}\n","\n/* Contains code for generating mountain levels. There are two mains levels to\n * generate:\n *   1. The climb part or Mountain\n *   2. The summit part\n */\nimport RG from './rg';\nimport {MapGenerator} from './map.generator';\nimport {Level} from './level';\nimport {Geometry} from './geometry';\nimport {Path} from './path';\nimport {DungeonPopulate} from './dungeon-populate';\nimport {Random} from './random';\nimport {ELEM} from '../data/elem-constants';\n\nconst RNG = Random.getRNG();\n\n/*\nconst PROB = {\n    actorGroup: 0.2\n};\n\nconst preferredActorTypes = [\n    'avian', 'animal', 'goblin', 'dwarf', 'wildling'\n];\n*/\n\nexport class MountainGenerator {\n\n    public static options: {[key: string]: any}; // TODO fix typings\n\n    static getSummitOptions() {\n        return MountainGenerator.options.summit;\n    }\n\n    static getFaceOptions() {\n        const mapOpts = MapGenerator.getOptions('mountain');\n        const opts = Object.assign({}, mapOpts, MountainGenerator.options.face);\n        // Usually overridden by top-level conf\n        opts.maxDanger = 5;\n        opts.maxValue = 100;\n        return opts;\n    }\n\n    createFace(cols, rows, conf) {\n        const mapgen = new MapGenerator();\n        const level = new Level();\n        mapgen.setGen('mountain', cols, rows);\n        conf.nRoadTurns = 0;\n        const mapObj = mapgen.createMountain(cols, rows, conf);\n        // const {paths} = mapObj;\n        level.setMap(mapObj.map);\n\n        this.createCrux(level, conf);\n        // level.setExtras({paths});\n        // this.createExtraFeats(level, conf);\n        return level;\n    }\n\n    createSummit(cols, rows, conf) {\n        const mapgen = new MapGenerator();\n        const level = new Level();\n        mapgen.setGen('mountain', cols, rows);\n        const mapObj = mapgen.createSummit(cols, rows, conf);\n        level.setMap(mapObj.map);\n        level.setExtras({});\n        return level;\n    }\n\n    /* Creates the most difficult part of the level. */\n    createCrux(level, conf) {\n        const map = level.getMap();\n        const cols = map.cols;\n        const wallRows = Math.round(map.rows / 6);\n        const wallConf = {\n            wallElem: ELEM.HIGH_ROCK,\n            meanWy: Math.round(wallRows / 2.5)\n        };\n\n        const mapgen = new MapGenerator();\n        mapgen.setGen('wall', cols, wallRows);\n        const wallMapObj = mapgen.createWall(cols, wallRows, wallConf);\n\n        const wallMap = wallMapObj.map;\n\n        // Carve a path through the wall\n        const xTop = RNG.getUniformInt(0, cols - 1);\n        const xBottom = RNG.getUniformInt(0, cols - 1);\n        const carvedXY = this.carvePath(wallMap, xTop, 0, xBottom, wallRows - 1);\n\n        const wallStartY = Math.round(map.rows / 5);\n        const mergeCb = (c1, c2) => {\n            // const baseElem1 = c1.getBaseElem();\n            const baseElem2 = c2.getBaseElem();\n            return !(/(floor)/).test(baseElem2.getType());\n        };\n        Geometry.mergeMaps(map, wallMap, 0, wallStartY, mergeCb);\n\n        // Create a path which goes through the level\n        /* const bbox = {bbox: {\n            ulx: 0, uly: wallStartY, lrx: cols - 1, lry: wallStartY + wallRows - 1\n        }};*/\n        const pathConf = {\n            // exclude: bbox,\n            startX: 0,\n            startY: 0, maxY: wallStartY,\n            yPerTurn: Math.round(wallStartY / 4),\n            endX: xTop\n        };\n        let paths = mapgen.createMountainPath(map, pathConf);\n\n        pathConf.startY = wallStartY + wallRows;\n        pathConf.maxY = map.rows - 1;\n        pathConf.startX = xBottom;\n        pathConf.yPerTurn = 0;\n        paths = paths.concat(mapgen.createMountainPath(map, pathConf));\n\n        level.addExtras('paths', paths);\n        // Add some guardians to the crux points, offset Y-coord first\n        carvedXY.forEach(xyCoord => {\n            xyCoord[1] += wallStartY;\n        });\n\n        const nGuardians = 3;\n        const dungPopul = new DungeonPopulate(conf);\n        for (let i = 0; i < nGuardians; i++) {\n            const guardPoint = RNG.arrayGetRand(carvedXY);\n            dungPopul.addPointGuardian(level, guardPoint, conf.maxDanger);\n        }\n    }\n\n    /* Adds extra features such as actor groups or buildings etc. into the\n     * level. */\n    /* MountainGenerator.prototype.createExtraFeats = function(level, conf) {\n        const groupProb = RNG.getUniform();\n        if (groupProb <= PROB.actorGroup) {\n            const dungPopul = new DungeonPopulate(conf);\n\n        }\n    };*/\n\n    /* Carves a path between x0,y0 and x1,y1 using a shortest distance. */\n    carvePath(map, x0, y0, x1, y1) {\n        const result = [];\n        const path = Path.getShortestPath(x0, y0, x1, y1);\n        path.forEach(xy => {\n            const brush = Geometry.getCrossAround(xy.x, xy.y, 2, true);\n            brush.forEach(xy => {\n                const [x, y] = xy;\n                if (map.hasXY(x, y)) {\n                    result.push(xy);\n                    map.setBaseElemXY(x, y, ELEM.STONE);\n                }\n            });\n        });\n        return result;\n    }\n}\n\nMountainGenerator.options = {};\n\nMountainGenerator.options.face = {\n\n};\n\nMountainGenerator.options.summit = {\n    ratio: 0.3\n};\n","/* Contains the code to generate the capital city. */\n\nimport RG from '../src/rg';\nimport {Placer} from '../src/placer';\nimport {Path} from '../src/path';\nimport {Builder} from '../src/builder';\n\nimport {ObjectShell} from '../src/objectshellparser';\nimport * as Element from '../src/element';\nimport {Level} from '../src/level';\nimport {FactoryLevel} from '../src/factory.level';\nimport {Geometry} from '../src/geometry';\nimport {CityGenerator} from '../src/city-generator';\nimport {ELEM} from './elem-constants';\n\ntype Stairs = Element.ElementStairs;\n\n/* Class to create the capital city of the game. */\nexport class Capital {\n\n    public level: Level;\n\n    constructor(cols: number, rows: number, conf: any = {}) { // TODO add typings\n        if (RG.isNullOrUndef([cols, rows])) {\n            RG.err('Capital', 'constructor',\n                   'Use new Capital(cols, rows, conf?)');\n        }\n\n        // Generate the main level with mountain wall\n        const wallOpts: any = { // TODO fix typings\n            meanWy: Math.floor(0.9 * rows / 2),\n            stdDev: 10,\n            filterW: 7\n        };\n        if (conf.transpose) {\n            wallOpts.north = true;\n            wallOpts.south = true;\n            wallOpts.east = false;\n            wallOpts.west = false;\n            wallOpts.meanWx = Math.floor(0.9 * cols / 2);\n        }\n        const factLevel = new FactoryLevel();\n        const mainLevel = factLevel.createLevel('wall', cols, rows, wallOpts);\n        const mainMap = mainLevel.getMap();\n\n        // Not exact position, but give proportions for sub-levels\n        const subLevelPos = [0.03, 0.20, 0.75, 0.95];\n        const widths = [0.5, 0.80, 0.6];\n\n        const parser = ObjectShell.getParser();\n        const actorFunc = actor => actor.name === 'Hyrkhian townsfolk';\n        const levelConf: any = [ // TODO fix typings\n            {actorFunc, nShops: 2, parser, nGates: 2, hasWall: true},\n            {actorFunc, nShops: 5, parser, nGates: 2, hasWall: true},\n            {actorFunc, nShops: 2, parser, nGates: 2, hasWall: true}\n        ];\n\n        // Create subLevels for each interval in subLevelPos array\n        const subLevels = [];\n        for (let i = 0; i < subLevelPos.length - 1; i++) {\n            const y0 = Math.floor(rows * subLevelPos[i]);\n            const y1 = Math.floor(rows * subLevelPos[i + 1]);\n            let levelRows = y1 - y0;\n            let levelCols = Math.floor(widths[i] * cols);\n\n            if (conf.transpose) {\n                const x0 = Math.floor(cols * subLevelPos[i]);\n                const x1 = Math.floor(cols * subLevelPos[i + 1]);\n                levelCols = x1 - x0;\n                levelRows = Math.floor(widths[i] * rows);\n            }\n\n            levelConf[i].nHouses = Math.floor(levelCols * levelRows / 500);\n            levelConf[i].floorType = 'cave';\n            levelConf[i].wallType = 'castle';\n            levelConf[i].addWindows = true;\n            const cityGen = new CityGenerator();\n\n            const level = cityGen.create(levelCols, levelRows, levelConf[i]);\n            subLevels.push(level);\n        }\n\n        // Calculate position and tile sub-levels into main level\n        const y0Main = Math.floor(subLevelPos[0] * cols);\n        const tileConf: any = {x: 0, y: y0Main, centerX: true}; // TODO fix typings\n        if (conf.transpose) {\n            tileConf.centerY = true;\n            tileConf.centerX = false;\n            tileConf.y = 0;\n            tileConf.x = Math.floor(subLevelPos[0] * rows);\n        }\n        Geometry.tileLevels(mainLevel, subLevels, tileConf);\n\n        // Add entrance stairs and create path through the level\n        if (conf.transpose) {\n            const midY = Math.floor(rows / 2);\n            const stairsWest = new Element.ElementStairs('stairsUp', mainLevel);\n            mainLevel.addStairs(stairsWest, 0, midY);\n            const stairsEast = new Element.ElementStairs('stairsUp', mainLevel);\n            mainLevel.addStairs(stairsEast, cols - 1, midY);\n\n            const path = Path.getMinWeightPath(mainMap, 0, midY, cols - 1, midY);\n            Builder.addPathToMap(mainMap, path);\n        }\n        else {\n            const midX = Math.floor(cols / 2);\n            const stairsNorth = new Element.ElementStairs('stairsUp', mainLevel);\n            mainLevel.addStairs(stairsNorth, midX, 0);\n            const stairsSouth = new Element.ElementStairs('stairsUp', mainLevel);\n            mainLevel.addStairs(stairsSouth, midX, rows - 1);\n\n            const path = Path.getMinWeightPath(mainMap, midX, 0, midX, rows - 1,\n                                               Path.getShortestPassablePathWithDoors);\n            Builder.addPathToMap(mainMap, path);\n        }\n\n        // Create the actors and items for this level\n        const actorConf = {\n            footman: 100,\n            archer: 50,\n            elite: 25,\n            commander: 5\n        };\n        const actors = [];\n        Object.keys(actorConf).forEach(key => {\n            const name = `Hyrkhian ${key}`;\n            const num = actorConf[key];\n            for (let i = 0; i < num; i++) {\n                const actor = parser.createActor(name);\n                actors.push(actor);\n            }\n        });\n\n        const nTrainers = 3;\n        for (let i = 0; i < nTrainers; i++) {\n            const trainer = parser.createActor('trainer');\n            actors.push(trainer);\n        }\n\n        Placer.addPropsToFreeCells(mainLevel, actors, RG.TYPE_ACTOR);\n\n        const items = [parser.createItem('Longsword')];\n        Placer.addPropsToFreeCells(mainLevel, items, RG.TYPE_ITEM);\n\n        this.level = mainLevel;\n    }\n\n    public setConfig(): void {\n\n    }\n\n    public getLevel(): Level {\n        return this.level;\n    }\n\n}\n","\nimport RG from '../src/rg';\nimport {FactoryLevel} from '../src/factory.level';\nimport {Castle} from '../data/tiles.castle';\nimport {Placer} from '../src/placer';\nimport {Level} from '../src/level';\nimport {ElementStairs} from '../src/element';\nimport {MapGenerator} from '../src/map.generator';\nimport {Geometry} from '../src/geometry';\nimport {ELEM} from './elem-constants';\nimport {ObjectShell} from '../src/objectshellparser';\nimport {LevelUtils} from '../src/level-utils';\n\nconst dwarvenCityConf = {\n  outerColsRatio: 0.45,\n  outerRowsRatio: 0.4,\n  outerStartXRatio: 0.3,\n  cols: 300, rows: 250\n};\nexport {dwarvenCityConf};\n\nconst TILE_SIZE = 7;\n\n/* Creates the level for the dwarven city. Uses mainly Castle tiles and mountain\n * walls to create the level.\n */\nexport class DwarvenCity {\n\n    public level: Level;\n\n    constructor(cols, rows, conf = dwarvenCityConf) {\n      const wallOpts = {\n        meanWy: Math.floor(0.85 * rows / 2),\n        stdDev: 10,\n        filterW: 7\n      };\n\n      const factLevel = new FactoryLevel();\n      const mainLevel = factLevel.createLevel('wall', cols, rows, wallOpts);\n\n      // Entrance level (southern fortress)\n      const outerColsRatio = conf.outerColsRatio || 0.35;\n      const outerRowsRatio = conf.outerRowsRatio || 0.35;\n      let outerCols = Math.round(outerColsRatio * cols);\n      let outerRows = Math.round(outerRowsRatio * rows);\n      outerCols = this.adjustToTileSize(outerCols);\n      outerRows = this.adjustToTileSize(outerRows);\n\n      const entrFortLevel = this.createEntryFortLevel(outerCols, outerRows);\n\n      // Main level (northern fortress)\n      const mainCols = outerCols + 2 * 7;\n      const mainRows = outerRows + 2 * 7;\n      const mainFortLevel = this.createMainFortLevel(mainCols, mainRows);\n\n      const fortStartY = 10;\n      const fortEndY = mainRows + outerRows;\n      const fortStartX = Math.ceil((cols - mainFortLevel.getMap().cols) / 2);\n      const fortEndX = cols - fortStartX;\n\n      // Empty level to ensure city can be accessed\n      const passageLevel = factLevel.createLevel('empty', 14, 50);\n\n      // Tile all levels together into mainLevel\n      const tileConf = {\n        centerY: false, centerX: true,\n        y: fortStartY, x: 0\n      };\n\n      const tiledLevels = [mainFortLevel, entrFortLevel, passageLevel];\n\n      Geometry.tileLevels(mainLevel, tiledLevels, tileConf);\n\n      // Bounding box for fort levels\n      const bbox = {\n          ulx: fortStartX, uly: fortStartY,\n          lrx: fortEndX, lry: fortEndY\n      };\n      this.addItemsAndActors(mainLevel, bbox);\n\n      this.addStairsToLevel(cols, rows, mainLevel);\n\n      this.level = mainLevel;\n    }\n\n    public adjustToTileSize(number) {\n      while (number % TILE_SIZE !== 0) {\n        ++number;\n      }\n      if (number % (2 * TILE_SIZE) === 0) {\n        number += TILE_SIZE;\n      }\n      return number;\n    }\n\n    /* Returns the main fort level with created side-castles. Dimensions of the\n     * main fort must be given. */\n    public createMainFortLevel(cols, rows): Level {\n      const fortConf = {\n          startRoomFunc: Castle.startFuncFourGates\n      };\n      const mapGen = new MapGenerator();\n\n      const mainFort = mapGen.createCastleWall(cols, rows, fortConf);\n\n      const castleCols = cols - 6 * 7;\n      const castleRows = rows - 4 * 7;\n      const innerCastle = mapGen.createCastle(castleCols, castleRows,\n        {roomCount: -1, nGates: 2});\n      const castleLevel = new Level();\n      castleLevel.setMap(innerCastle.map);\n      Geometry.mergeMapBaseElems(mainFort.map,\n          innerCastle.map, 3 * 7, 2 * 7);\n\n      const mainFortLevel = new Level();\n      mainFortLevel.setMap(mainFort.map);\n\n      const mainFortWest = mapGen.createCastle(7 * 7, 5 * 7,\n          {startRoomFunc: Castle.startRoomFuncEast,\n            roomCount: -1, genParams: [1, 1, 1, 1]}\n      );\n      const mainFortEast = mapGen.createCastle(7 * 7, 5 * 7,\n          {startRoomFunc: Castle.startRoomFuncWest,\n            roomCount: -1, genParams: [1, 1, 1, 1]}\n      );\n\n      const mainFortWestLevel = new Level();\n      mainFortWestLevel.setMap(mainFortWest.map);\n      const mainFortEastLevel = new Level();\n      mainFortEastLevel.setMap(mainFortEast.map);\n\n      const mainFortLevels = [mainFortWestLevel, mainFortLevel,\n        mainFortEastLevel];\n\n      const wrapConf = {centerY: true, baseElem: ELEM.WALL};\n      return LevelUtils.wrapAsLevel(mainFortLevels, wrapConf);\n    }\n\n    /* Returns the first entrance fort. */\n    public createEntryFortLevel(cols, rows): Level {\n      const mapGen = new MapGenerator();\n      const outerFortConf = {\n          startRoomFunc: Castle.startFuncFourGates\n      };\n\n      const outerFort = mapGen.createCastleWall(cols, rows,\n        outerFortConf);\n\n      const castleCols = cols - 6 * 7;\n      const castleRows = rows - 6 * 7;\n      const innerCastle = mapGen.createCastle(castleCols, castleRows,\n        {nGates: 2, roomCount: -1});\n      const castleLevel = new Level();\n      castleLevel.setMap(innerCastle.map);\n      Geometry.mergeMapBaseElems(outerFort.map, innerCastle.map,\n          3 * 7, 3 * 7);\n\n      const smallFortWest = mapGen.createCastleWall(3 * 7, 3 * 7,\n        {startRoomFunc: Castle.startRoomFuncEast}\n      );\n      const smallFortEast = mapGen.createCastleWall(3 * 7, 3 * 7,\n        {startRoomFunc: Castle.startRoomFuncWest}\n      );\n\n      const entryFortLevel = new Level();\n      entryFortLevel.setMap(outerFort.map);\n\n      const fortWestLevel = new Level();\n      fortWestLevel.setMap(smallFortWest.map);\n      const fortEastLevel = new Level();\n      fortEastLevel.setMap(smallFortEast.map);\n\n      const subLevels = [fortWestLevel, entryFortLevel, fortEastLevel];\n      const wrapConf = {centerY: true, baseElem: ELEM.WALL};\n      return LevelUtils.wrapAsLevel(subLevels, wrapConf);\n\n    }\n\n    /* Adds actors and items into the level using bbox as constraint.\n     * This guarantees that everything's placed inside the fort. */\n    public addItemsAndActors(level, bbox): void {\n      const parser = ObjectShell.getParser();\n      const freeCells = level.getMap().getFreeInBbox(bbox);\n\n      const actorConf = {\n          fighter: 200, axeman: 100,\n          elite: 50, rifleman: 50,\n          commander: 20\n      };\n      const actors = [];\n      Object.keys(actorConf).forEach(key => {\n        const name = `dwarven ${key}`;\n        const num = actorConf[key];\n        for (let i = 0; i < num; i++) {\n            const actor = parser.createActor(name);\n            actors.push(actor);\n        }\n      });\n      Placer.addPropsToCells(level, freeCells, actors, RG.TYPE_ACTOR);\n\n      // Add items, avoid placing anything to \"hallways\" of castles\n    }\n\n    public getLevel(): Level {\n      return this.level;\n    }\n\n    public addStairsToLevel(cols, rows, level): void {\n        const midX = Math.floor(cols / 2);\n        const stairsNorth = new ElementStairs('stairsUp', level);\n        level.addStairs(stairsNorth, midX, 0);\n        const stairsSouth = new ElementStairs('stairsUp', level);\n        level.addStairs(stairsSouth, midX, rows - 1);\n    }\n\n}\n","\nimport {Level} from './level';\nimport {CellMap} from './map';\nimport {ELEM} from '../data/elem-constants';\nimport {Geometry} from './geometry';\n\n/* Contains utility functions to manipulate Level objects. */\nexport const LevelUtils: any = {};\n\n/* Wraps given array of levels into new super level and returns it. */\nLevelUtils.wrapAsLevel = function(levels: Level[], conf): Level {\n  const maxCallback = (acc, curr) => Math.max(acc, curr);\n  const levelCols = levels.map(l => l.getMap().cols);\n  const levelRows = levels.map(l => l.getMap().rows);\n  const level = new Level();\n  let map = null;\n\n  const baseElem = conf.baseElem || ELEM.FLOOR;\n  if (conf.centerY) {\n    const rowsMax = levelRows.reduce(maxCallback);\n    const colsTotal = levelCols.reduce((sum, value) => sum + value, 0);\n    map = new CellMap(colsTotal, rowsMax, baseElem);\n    level.setMap(map);\n    Geometry.tileLevels(level, levels, {centerY: true, x: 0, y: 0});\n  }\n  else if (conf.centerX) {\n    const rowsTotal = levelRows.reduce((sum, value) => sum + value, 0);\n    const colsMax = levelCols.reduce(maxCallback);\n    map = new CellMap(colsMax, rowsTotal, baseElem);\n    level.setMap(map);\n    Geometry.tileLevels(level, levels, {centerX: true, x: 0, y: 0});\n  }\n  return level;\n};\n","\nimport RG from './rg';\nimport ROT from '../../lib/rot';\n\nimport {LevelGenerator} from './level-generator';\nimport {CellMap} from './map';\nimport {Level} from './level';\nimport {Geometry} from './geometry';\nimport {MapGenerator} from './map.generator';\nimport {Path} from './path';\nimport {DungeonPopulate} from './dungeon-populate';\nimport {Random} from './random';\nimport {ELEM} from '../data/elem-constants';\nimport {ObjectShell} from './objectshellparser';\nimport {ElementMarker, ElementDoor} from './element';\n\nconst WALL = 1;\n\nconst RNG = Random.getRNG();\n\nconst shortestPath = Path.getShortestPath;\n// Number of cells allowed to be unreachable\nconst maxUnreachable = 10;\n\nconst SPLASH_THEMES = {\n    chasm: {\n        elem: ELEM.CHASM\n    },\n    water: {\n        elem: ELEM.WATER\n    },\n    forest: {\n        elem: ELEM.TREE\n    },\n    fire: {\n        elem: ELEM.LAVA\n    }\n};\n\nconst DUG_MAX = 0.75;\nconst PROB = {\n    BIG_VAULT: 0.07,\n    BIG_ROOM: 0.2,\n    bigRoomWeights: {\n        cross: 1,\n        corridor: 1,\n        vault: 1,\n        center: 1\n    }\n};\n\n/* Maps a big room to different possible features. The key is matched using\n* regular expression. This means the keys must be uniquely matchable. */\nconst bigRoomType2Feature = {\n    'cross': {\n        special: ['splashes']\n    },\n    'small vault': {},\n    'large vault': {},\n    'large corridor': {\n        special: ['splashes']\n    },\n    'center': {\n    }\n};\n\n/* Data struct for big rooms. */\nconst BigRoom = function(type, room) {\n    this.room = room;\n    this.type = type;\n};\n\n/* This class is used to generate different dungeon levels. */\nexport class DungeonGenerator extends LevelGenerator {\n\n    public static mapOptions: {[key: string]: any}; // TODO fix typings\n\n    /* Returns the default options for dungeon level generation. */\n    public static getOptions(type = 'digger') {\n        const levelOpts = {\n            levelType: type, nBigRooms: 1,\n            bigRoomX: ['cen'], bigRoomY: ['cen'],\n            bigRoomWidth: [10], bigRoomHeight: [10],\n            maxDanger: 5, maxValue: 100,\n            minNumRooms: 3\n        };\n        // Options specific to map gen (ie digger or uniform)\n        const mapOpts = {options: mapOptions[type]};\n        return Object.assign(levelOpts, mapOpts);\n    }\n\n    public addDoors: boolean;\n\n    constructor() {\n        super();\n        this.addDoors = true;\n        this.shouldRemoveMarkers = true;\n    }\n\n    /* Creates the actual Map.Level. User should call this function with desired\n     * size (X * Y) and configuration. */\n    public create(cols: number, rows: number, conf): Level {\n        // Creates the Map.Level with rooms, walls and floor\n        const level = this._createLevel(cols, rows, conf);\n\n        // Add things like water, chasms, bridges\n        this.addSpecialFeatures(level);\n\n        // Determine stairs locations\n        this.addStairsLocations(level);\n\n        // Add critical path (player must pass through this, usually), not entirely\n        // true as there are usually many paths from start to end\n        this.addCriticalPath(level);\n\n        const populate = new DungeonPopulate({theme: ''});\n        // Finally, we could populate the level with items/actors here\n        populate.populateLevel(level);\n\n        // Optional verification of connectivity etc.\n        if (conf.rerunOnFailure || conf.errorOnFailure) {\n            // const fillDiag = true;\n            if (!this.verifyLevel(level, conf)) {\n                this.create(cols, rows, conf);\n            }\n        }\n\n        this.removeMarkers(level, conf);\n        return level;\n    }\n\n    /* Creates the Map.Level with extras (such as rooms) added. */\n    public _createLevel(cols, rows, conf): Level {\n        if (!cols) {\n            cols = RNG.getUniformInt(80, 120);\n        }\n        if (!rows) {\n            rows = RNG.getUniformInt(28, 56);\n        }\n        const minNumRooms = conf.minNumRooms || 3;\n        let mapGen = null;\n        let map = null;\n        const createCb = (x, y, val) => {\n            if (val === WALL) {\n                map.setBaseElemXY(x, y, ELEM.WALL);\n            }\n        };\n\n        // Generate new base map until we have enough rooms\n        let watchdog = 10;\n        while (!mapGen || mapGen.getRooms().length < minNumRooms) {\n            mapGen = this.getMapGen(cols, rows, conf);\n            map = new CellMap(cols, rows);\n            mapGen.create(createCb);\n            if (--watchdog === 0) {\n                break;\n            }\n        }\n\n        const level = new Level();\n        level.setMap(map);\n\n        const extras: any = { // TODO fix typing\n            rooms: mapGen.getRooms(),\n            corridors: mapGen.getCorridors()\n        };\n        if (mapGen.bigRooms) {\n            extras.bigRooms = mapGen.bigRooms;\n        }\n        level.setExtras(extras);\n        return level;\n    }\n\n    public getMapGen(cols, rows, conf) {\n        let levelType = getRandMapType();\n        if (conf.dungeonType && conf.dungeonType !== '') {\n            levelType = conf.dungeonType;\n        }\n\n        const mapOpts = conf.options || mapOptions[levelType];\n        const mapGen = new ROT.Map.Digger(cols, rows, mapOpts);\n        // Here we need to add special rooms etc\n        const bigRooms = this.addBigRooms(mapGen, conf);\n        if (bigRooms.length > 0) {\n            mapGen.bigRooms = bigRooms;\n        }\n        return mapGen;\n    }\n\n    /* Creates 'big' rooms for the map. Rooms can be used a normal room as it is, or\n     * as a container for other special feature like vault. The first big room is\n     * always guaranteed to be connected by the algorith. 2nd room may not be\n     * connected, but this can be checked if necessary.\n     */\n    public addBigRooms(mapGen, conf) {\n        let bigRoomsCreated = [];\n\n        // Generate different options for big rooms:\n        //   1. Left/right big corridor [X]\n        //   2. Center hor/ver corridor [X]\n        //   3. Top/bottom big corridor [X]\n        //   4. Small vault 1/4 of level [X]\n        //   5. Big vault 2/4 of level -> 2 orientations [X]\n        //   6. Cross or H or I or Z\n        //   7. 2 rooms on opposite corners\n        //   8. Big center room (add stairs far away) [X]\n\n        // Customly specified big rooms\n        if (conf.nBigRooms > 0) {\n            bigRoomsCreated = this.addCustomBigRooms(mapGen, conf);\n        }\n\n        const createBigRoom = RNG.getUniform() <= PROB.BIG_ROOM;\n        if (createBigRoom && conf.nBigRooms === 0) {\n            const bigRoomType = this.getBigRoomType();\n\n            if (/center/.test(bigRoomType)) {\n                bigRoomsCreated = this.addBigCenterRoom(mapGen);\n            }\n            if (/large corridor/.test(bigRoomType)) {\n                bigRoomsCreated = this.addLargeCorridorRoom(mapGen);\n            }\n            if (/cross/.test(bigRoomType)) {\n                bigRoomsCreated = this.addLargeCross(mapGen);\n            }\n            if (/vault/.test(bigRoomType)) {\n                bigRoomsCreated = this.addVault(mapGen);\n            }\n        }\n        return bigRoomsCreated;\n    }\n\n    public getBigRoomType() {\n        return RNG.arrayGetRand(Object.keys(bigRoomType2Feature));\n    }\n\n    /* Adds manually specified custom rooms into the level. */\n    public addCustomBigRooms(mapGen, conf) {\n        const [cx, cy] = mapGen.getCenterXY();\n        const [cols, rows] = [mapGen.getCols(), mapGen.getRows()];\n        const nBigRooms = conf.nBigRooms || 0;\n        const bigRoomsCreated = [];\n        for (let i = 0; i < nBigRooms; i++) {\n            let width = Math.floor(cols / 4);\n            if (conf.bigRoomWidth) {\n                if (conf.bigRoomWidth[i]) {\n                    width = conf.bigRoomWidth[i];\n                }\n            }\n\n            let height = Math.floor(rows / 4);\n            if (conf.bigRoomHeight) {\n                if (conf.bigRoomHeight[i]) {\n                    height = conf.bigRoomHeight[i];\n                }\n            }\n\n            const maxX = cols - 2 - width;\n            let x = RNG.getUniformInt(1, maxX);\n            let xConf = '';\n            if (conf.bigRoomX) {\n                xConf = conf.bigRoomX[i];\n            }\n\n            if (/cen/.test(xConf)) {\n                x = cx - Math.floor(width / 2);\n            }\n\n            const maxY = rows - 2 - height;\n            let y = RNG.getUniformInt(1, maxY);\n            let yConf = '';\n            if (conf.bigRoomY) {\n                yConf = conf.bigRoomY[i];\n            }\n            if (/cen/.test(yConf)) {\n                y = cy - Math.floor(height / 2);\n            }\n\n            const x2 = x + (width - 1);\n            const y2 = y + (height - 1);\n            const room = new ROT.Map.Feature.Room(x, y, x2, y2);\n            mapGen._options.dugPercentage += 0.1;\n            // mapGen._options.roomDugPercentage = 0.1;\n            mapGen.addRoom(room);\n            bigRoomsCreated.push(new BigRoom('custom', room));\n        }\n        return bigRoomsCreated;\n    }\n\n    /* Adds a big room aligned to the center of the level. */\n    public addBigCenterRoom(mapGen) {\n        const [cols, rows] = [mapGen.getCols(), mapGen.getRows()];\n        const [cx, cy] = mapGen.getCenterXY();\n\n        const yDiv = RNG.getUniformInt(2, 5);\n        const xDiv = RNG.getUniformInt(2, 6);\n        const roomWidth = [Math.floor(cols / (xDiv + 1 )),\n            Math.floor(cols / xDiv)];\n        const roomHeight = [Math.floor(rows / yDiv), Math.floor(rows / yDiv)];\n\n        const opts = {roomWidth, roomHeight};\n        const room = ROT.Map.Feature.Room.createCenter(cx, cy, opts);\n        mapGen._options.dugPercentage += 0.2;\n        mapGen.addRoom(room);\n        return [new BigRoom('center', room)];\n    }\n\n    public addLargeCorridorRoom(mapGen) {\n        const [cols, rows] = [mapGen.getCols(), mapGen.getRows()];\n        const cardinalDir = RNG.getCardinalDirLetter();\n        const roomName = 'large corridor ' + cardinalDir;\n\n        // Large east side corridor\n        let room = null;\n        if (cardinalDir === 'E') {\n            const xDiv = RNG.getUniformInt(2, 6);\n            const width = Math.floor(cols / xDiv);\n            room = new ROT.Map.Feature.Room(1, 1, width, rows - 2);\n        }\n\n        // Large west side corridor\n        if (cardinalDir === 'W') {\n            const xDiv = RNG.getUniformInt(2, 6);\n            const width = Math.floor(cols / xDiv);\n            const x0 = cols - 2 - width;\n            room = new ROT.Map.Feature.Room(x0, 1, cols - 2, rows - 2);\n        }\n\n        // Large north side corridor\n        if (cardinalDir === 'N') {\n            const yDiv = RNG.getUniformInt(2, 5);\n            const height = Math.floor(rows / yDiv);\n            room = new ROT.Map.Feature.Room(1, 1, cols - 2, height);\n        }\n\n        // Large south side corridor\n        if (cardinalDir === 'S') {\n            const yDiv = RNG.getUniformInt(2, 5);\n            const height = Math.floor(rows / yDiv);\n            const y0 = rows - 2 - height;\n            room = new ROT.Map.Feature.Room(1, y0, cols - 2, rows - 2);\n        }\n\n        if (!room) {\n            RG.err('DungeonGenerator', 'addLargeCorridorRoom',\n                'room null something went wrong');\n        }\n\n        mapGen._options.dugPercentage += 0.20;\n        mapGen.addRoom(room);\n        return [new BigRoom(roomName, room)];\n    }\n\n    public addLargeCross(mapGen) {\n        const [cols, rows] = [mapGen.getCols(), mapGen.getRows()];\n        const [cx, cy] = mapGen.getCenterXY();\n\n        const div = RNG.getUniformInt(3, 8);\n        const width = Math.floor(cols / div);\n        const height = Math.floor(rows / div);\n        const horOpts = {\n            roomWidth: [cols - 2, cols - 2], roomHeight: [height, height]\n        };\n        const verOpts = {\n            roomHeight: [rows - 2, rows - 2], roomWidth: [width, width]\n        };\n        const roomHor = ROT.Map.Feature.Room.createCenter(cx, cy, horOpts);\n        const roomVer = ROT.Map.Feature.Room.createCenter(cx, cy, verOpts);\n        mapGen.addRoom(roomHor);\n        mapGen.addRoom(roomVer);\n\n        const areaHor = roomHor.getAreaSize();\n        const areaVer = roomVer.getAreaSize();\n        const dug = (areaHor + areaVer) / (cols * rows);\n\n        mapGen._options.dugPercentage += 1.6 * dug;\n        if (mapGen._options.dugPercentage >= DUG_MAX) {\n            mapGen._options.dugPercentage = DUG_MAX;\n        }\n\n        return [\n            new BigRoom('crossHor', roomHor),\n            new BigRoom('crossVer', roomVer)\n        ];\n    }\n\n    public addVault(mapGen) {\n        // Small vault 1/4 of level\n        // Big vault 1/2 of level\n        const [cols, rows] = [mapGen.getCols(), mapGen.getRows()];\n        const big = RNG.getUniform() <= PROB.BIG_VAULT;\n        let width = Math.floor(cols / 2);\n        let height = Math.floor(rows / 2);\n        let corners = ['NE', 'NW', 'SW', 'SE'];\n        let type = 'small vault';\n        if (big) {\n            if (RNG.getUniform() <= 0.5) {\n                corners = ['NE', 'NW'];\n                width = Math.floor(cols / 2);\n                height = rows - 2;\n            }\n            else {\n                corners = ['NW', 'SW'];\n                width = cols - 2;\n                height = Math.floor(rows / 2);\n            }\n            mapGen._options.dugPercentage += 0.25;\n            type = 'large vault';\n        }\n        const [x0, y0] = this.getRandCorner(width, height, cols, rows, corners);\n        const x1 = x0 + width - 1;\n        const y1 = y0 + height - 1;\n        const room = new ROT.Map.Feature.Room(x0, y0, x1, y1);\n        mapGen._options.dugPercentage += 0.20;\n        mapGen.addRoom(room);\n        return [new BigRoom(type, room)];\n    }\n\n    /* Returns a random corner for a feature. */\n    public getRandCorner(w, h, cols, rows, corners) {\n        const corner = RNG.arrayGetRand(corners);\n        let [x, y] = [1, 1];\n        switch (corner) {\n            case 'NW': x = 1; y = 1; break;\n            case 'NE': x = cols - 2 - w; y = 1; break;\n            case 'SW': x = 1; y = rows - 2 - h; break;\n            case 'SE': x = cols - 2 - w; y = rows - 2 - h; break;\n            default: break;\n        }\n        return [x, y];\n    }\n\n    /* Function adds features like chasms, bridges, rivers etc. */\n    public addSpecialFeatures(level) {\n        const extras = level.getExtras();\n        const map = level.getMap();\n\n        // Adds a random special feature to the big room\n        if (extras.bigRooms) {\n            const room = extras.bigRooms[0];\n            let features: any = {}; // TODO fix typings\n            Object.keys(bigRoomType2Feature).forEach(key => {\n                if (new RegExp(key).test(room.type)) {\n                    features = bigRoomType2Feature[key];\n                }\n            });\n\n            if (features.special) {\n                const randSpecial = RNG.arrayGetRand(features.special);\n                this.addBigRoomSpecialFeat(level, randSpecial, extras.bigRooms);\n            }\n        }\n\n        /*\n        if (extras.corridors) {\n            extras.corridors.forEach((corr, i) => {\n                const index = i % 10;\n                corr.create((x, y) => {\n                    const marker = new RG.Element.Marker(index);\n                    marker.setTag('corridor');\n                    // level.addElement(marker, x, y);\n                });\n            });\n        }\n        */\n\n        if (extras.rooms) {\n            const fireRoom = RNG.arrayGetRand(extras.rooms);\n            const terms = [];\n            this.addFireToRoom(level, fireRoom);\n\n            extras.rooms.forEach((room, id) => {\n                room.setID(id); // Add ID to identify rooms\n                let numDoors = 0;\n                const bbox = room.getOuterBbox();\n                const coord = Geometry.getBorderForBbox(bbox);\n                coord.forEach(xy => {\n                    if (!map.has(xy, 'floor')) {\n                        const marker = new ElementMarker('w');\n                        marker.setTag('room wall');\n                        level.addElement(marker, xy[0], xy[1]);\n                    }\n                    else {\n                        /* const marker = new RG.Element.Marker('D');\n                        marker.setTag('room door');\n                        level.addElement(marker, xy[0], xy[1]);*/\n                        ++numDoors;\n                    }\n                });\n\n                this.addDoorsForRoom(level, room);\n\n                if (numDoors === 1) {\n                    terms.push(room);\n                }\n            });\n\n            terms.forEach(room => {\n                const bbox = room.getInnerBbox();\n                const coord = Geometry.getCoordBbox(bbox);\n                coord.forEach(xy => {\n                    const marker = new ElementMarker('t');\n                    marker.setTag('term');\n                    level.addElement(marker, xy[0], xy[1]);\n                });\n            });\n\n            extras.terms = terms;\n        }\n    }\n\n    /* Adds a special feature to a big room. This can be obstructions or some\n     * structures like temples etc. */\n    public addBigRoomSpecialFeat(level, randSpecial, bigRooms) {\n        bigRooms.forEach(bigRoom => {\n            const room = bigRoom.room; // Unwrap Feature.Room from BigRoom\n            if (!room) {\n                RG.err('DungeonGenerator', 'addBigRoomSpecialFeat',\n                    'room is null for ' + JSON.stringify(bigRoom));\n            }\n            switch (randSpecial) {\n                case 'splashes': {\n                    this.addElemSplashes(level, room); break;\n                }\n                default: break;\n            }\n        });\n    }\n\n    /* Adds door elements for the given room. */\n    public addDoorsForRoom(level, room) {\n        if (this.addDoors) {\n            room.getDoors((x, y) => {\n                const cell = level.getMap().getCell(x, y);\n                if (!cell.hasDoor()) {\n                    const door = new ElementDoor(true);\n                    level.addElement(door, x, y);\n                }\n            });\n        }\n    }\n\n    /* Different options for splashes:\n     * 1. water - amphibious\n     * 2. chasms - flying\n     * 3. forest - animals\n     * Make sure  this is same for all rooms.\n     */\n    public addElemSplashes(level, room) {\n        const themeName = RNG.arrayGetRand(Object.keys(SPLASH_THEMES));\n        const theme = SPLASH_THEMES[themeName];\n        const elem = theme.elem;\n        level.getExtras().theme = theme;\n\n        const x0 = room.getLeft() + 1;\n        const y0 = room.getTop() + 1;\n        const fCols = room.getWidth();\n        const fRows = room.getHeight();\n        const {map} = MapGenerator.createSplashes(fCols, fRows,\n            {nForests: 10, elem});\n        Geometry.mergeMapBaseElems(level.getMap(), map, x0, y0);\n    }\n\n    /* Decorates the room corners with fire. */\n    public addFireToRoom(level, room) {\n        const parser = ObjectShell.getParser();\n        const corners = Object.values(room.getCorners());\n        corners.forEach(xy => {\n            const fire = parser.createActor('Fire');\n            level.addActor(fire, xy[0], xy[1]);\n        });\n    }\n\n    public addStairsLocations(level) {\n        // Default is to find rooms that are far away from each other\n        const extras = level.getExtras();\n        let watchdog = RG.WATCHDOG;\n        if (extras.rooms) {\n\n            // 1. Find 2 different rooms with maximum center distance\n            let [room1, room2] = RNG.getUniqueItems(extras.rooms, 2);\n            let chosenRoom1 = null;\n            let chosenRoom2 = null;\n            let dist = 0;\n            let largestDist = 0;\n            const minRoomDistance = Math.floor(level.getMap().cols / 2)\n                + Math.floor(level.getMap().rows / 2);\n\n            while (dist < minRoomDistance) {\n                [room1, room2] = RNG.getUniqueItems(extras.rooms, 2);\n                dist = getRoomDist(level, room1, room2);\n                if (dist > largestDist) {\n                    largestDist = dist;\n                    chosenRoom1 = room1;\n                    chosenRoom2 = room2;\n                }\n                if (--watchdog === 0) {break;}\n            }\n            room1 = chosenRoom1;\n            room2 = chosenRoom2;\n\n            const [cx1, cy1] = room1.getCenter();\n            const [cx2, cy2] = room2.getCenter();\n\n            // Store the points to extras\n            extras.startPoint = [cx2, cy2];\n            extras.endPoint = [cx1, cy1];\n\n            const {startPoint, endPoint} = extras;\n            this.addStartAndEndPoint(level, startPoint, endPoint);\n\n            // Place markers to later identify the points from the level\n            room1.addStairs(cx1, cy1, true);\n            room2.addStairs(cx2, cy2, false);\n\n        }\n        else {\n            // Resort to random placement, no worthwhile rooms, although this\n            // raises the question if the whole level should be discarded\n            const msg = 'rooms must be set as level extras';\n            RG.err('DungeonGenerator', 'addStairsLocations',\n                'Not enough rooms to add stairs. ' + msg);\n        }\n    }\n\n    /* Adds a critical path to the level. The path is denoted with markers 'critical\n     * path' to retrieve it later. */\n    public addCriticalPath(level) {\n        const extras = level.getExtras();\n        const [cx2, cy2] = extras.startPoint;\n        const [cx1, cy1] = extras.endPoint;\n\n        const map = level.getMap();\n        const pathFunc = (x, y) => {\n            return map.isPassable(x, y) || map.getCell(x, y).hasDoor();\n        };\n\n        let criticalPath = Path.getShortestPath(cx2, cy2, cx1, cy1, pathFunc);\n        if (criticalPath.length === 0) {\n            const newPathFunc = (x, y) => {\n                return !(/wall/).test(map.getCell(x, y).getBaseElem().getType());\n            };\n            criticalPath = Path.getShortestPath(cx2, cy2, cx1, cy1, newPathFunc);\n            if (criticalPath === 0) {\n                RG.err('DungeonGenerator', 'addCriticalPath',\n                    'No path found between stairs');\n            }\n            else {\n                // Need to traverse, and add bridges/passages on obstacles\n                criticalPath.forEach(xy => {\n                    const {x, y} = xy;\n                    if (!map.isPassable(x, y)) {\n                        map.setBaseElemXY(x, y, ELEM.BRIDGE);\n                    }\n                });\n            }\n        }\n\n        const pathBrokenFunc = (x, y) => {\n            return pathFunc(x, y) &&\n                !map.getCell(x, y).hasMarker('path broken');\n\n        };\n        const minPathLen = 50;\n        let prevPath = criticalPath;\n        while (criticalPath.length < minPathLen) {\n\n            // Break the existing path\n            const pathBroken = this._breakPath(level, criticalPath);\n            if (!pathBroken) {\n                // Could not break, might be in a big room\n                break;\n            }\n\n            // Break OK, find the next path which is shortest\n            criticalPath = shortestPath(cx2, cy2, cx1, cy1, pathBrokenFunc);\n            if (criticalPath.length === 0) {\n                this.restorePath(level, prevPath);\n                criticalPath = prevPath;\n                break;\n            }\n            else {\n                prevPath = criticalPath;\n            }\n        }\n\n        // For each path broken marker, we need to add walls to physicall break\n        // that path\n        this._addWallsToBrokenPath(level);\n\n        criticalPath.forEach(xy => {\n            const critPathElem = new ElementMarker('*');\n            critPathElem.setTag('critical_path');\n            level.addElement(critPathElem, xy.x, xy.y);\n        });\n\n        extras.criticalPath = criticalPath;\n    }\n\n    /* This breaks the path with a wall and by placing a 'path broken' marker to\n     * locate the element later. */\n    public _breakPath(level, path) {\n        for (let i = 0; i < path.length; i++) {\n            const {x, y} = path[i];\n            const cell = level.getMap().getCell(x, y);\n            if (cell.hasDoor()) {\n                const marker = new ElementMarker('X');\n                marker.setTag('path broken');\n                level.addElement(marker, x, y);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public _addWallsToBrokenPath(level) {\n        const markers = level.getElements().filter(\n            e => e.getType() === 'marker' && e.getTag() === 'path broken'\n        );\n        markers.forEach(marker => {\n            const [x, y] = marker.getXY();\n            level.getMap().setBaseElemXY(x, y, ELEM.WALL);\n        });\n    }\n\n    /* Restores previous broken path in case no sufficiently long new path is found.\n     * */\n    public restorePath(level, path) {\n        for (let i = 0; i < path.length; i++) {\n            const {x, y} = path[i];\n            const cell = level.getMap().getCell(x, y);\n            if (cell.hasMarker('path broken')) {\n                const elements = level.getElements();\n                const thisXY = elements.filter(e => e.isAtXY(x, y));\n                thisXY.forEach(elem => {\n                    if (elem.getType() === 'marker') {\n                        if (elem.getTag() === 'path broken') {\n                            level.removeElement(elem, x, y);\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    /* Right now, use a floodfill to check the connectivity. Returns true if the\n     * level is rejected. If conf.errorOnFailure is set, throws error immediately.\n     * */\n    public verifyLevel(level, conf) {\n        const map = level.getMap();\n        const fillFilter = c => c.isPassable() || c.hasDoor();\n        const floorCells = map.getCells(fillFilter);\n        const cell = floorCells[0];\n        const floorCellsFilled = Geometry.floodfill(map, cell, fillFilter);\n\n        const numTotal = floorCells.length;\n        const numFilled = floorCellsFilled.length;\n\n        if (numFilled !== numTotal) {\n            const diff = numTotal - numFilled;\n            if (diff > maxUnreachable) {\n                if (conf.errorOnFailure) {\n                    level.debugPrintInASCII(); // DON'T REMOVE\n                    const msg = `Max: ${maxUnreachable}, got: ${diff}`;\n                    RG.err('DungeonGenerator', 'verifyLevel',\n                        'floodfill cannot reach all cells! ' + msg);\n                }\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n/* Contain the default options for various level types. */\nDungeonGenerator.mapOptions = {\n    digger: {\n        roomWidth: [3, 9],\n        roomHeight: [3, 5],\n        corridorLength: [3, 10],\n        dugPercentage: 0.2\n    },\n    uniform: {\n        roomWidth: [3, 9],\n        roomHeight: [3, 5],\n        roomDugPercentage: 0.1\n    }\n};\nconst mapOptions = DungeonGenerator.mapOptions;\n\n/* Returns random supported level type. */\nconst getRandMapType = () => {\n    return RNG.arrayGetRand(['uniform', 'digger']);\n};\n\nfunction getRoomDist(level: Level, r1, r2): number {\n    const map = level.getMap();\n    const [cx1, cy1] = r1.getCenter();\n    const [cx2, cy2] = r2.getCenter();\n    const path = Path.getShortestPassablePathWithDoors(map, cx1, cy1, cx2, cy2);\n    return path.length;\n}\n\n","\n/* Contains code to generate various types of caverns in the game.\n */\n\nimport RG from './rg';\nimport {MapGenerator} from './map.generator';\nimport {CellMap} from './map';\nimport {Level, LevelExtras} from './level';\n// const Random = require('./random');\nimport {DungeonPopulate} from './dungeon-populate';\nimport {LevelGenerator} from './level-generator';\nimport {Path} from './path';\nimport {Geometry} from './geometry';\nimport {Random} from './random';\nimport {ELEM} from '../data/elem-constants';\nimport * as Element from './element';\nimport {TCoord} from './interfaces';\n\ntype Cell = import('./map.cell').Cell;\n\nconst RNG = Random.getRNG();\n\nconst ElementMarker = Element.ElementMarker;\n\ninterface FreeCellMap {\n    [key: string]: Cell;\n}\n\nexport interface Miner {\n    x: number;\n    y: number;\n    dirWeights: {[key: string]: number};\n    dugCallback?: (x, y, miner) => void;\n}\n\nexport interface MinersMap {\n    [key: string]: Miner;\n}\n\n\ninterface MapOpts {\n    isCollapsed?: boolean;\n    floorElem?: Element.ElementBase;\n    startX?: number;\n    startY?: number;\n    dirWeights?: {[key: string]: number};\n    addMiners?: Miner[];\n}\n\n\nexport class CaveGenerator extends LevelGenerator {\n    public static getOptions() {\n        return {\n            dungeonType: 'Lair',\n            maxDanger: 5, maxValue: 100,\n            isCollapsed: false\n        };\n    }\n\n    constructor() {\n        super();\n        this.shouldRemoveMarkers = true;\n    }\n\n    /* Main function to call when a cave is created. */\n    public create(cols: number, rows: number, conf): Level {\n        if (RG.isNullOrUndef([cols, rows])) {\n            RG.err('CaveGenerator', 'create',\n                `cols or rows not defined: cols: ${cols} / rows: ${rows}`);\n        }\n        const level = this._createLevel(cols, rows, conf);\n\n        this.addStairsLocations(level);\n\n        this._addSpecialFeatures(level);\n\n        this._addEncounters(level, conf);\n\n        conf.preserveMarkers = false;\n        this.removeMarkers(level, conf);\n        return level;\n    }\n\n    /* Creates the Map.Level object with walls/floor and cave-flavor. */\n    public _createLevel(cols, rows, conf): Level {\n        const mapOpts: MapOpts = this._createMapOptions(cols, rows, conf);\n        const mapgen = new MapGenerator();\n        const level = new Level();\n        mapgen.setGen('cave', cols, rows);\n\n        const mapObj = mapgen.createCave(cols, rows, mapOpts);\n        level.setMap(mapObj.map);\n        this.setLevelExtras(level, mapObj.mapGen);\n        if (mapOpts.isCollapsed) {\n            level.getExtras().isCollapsed = true;\n        }\n        return level;\n    }\n\n    public setLevelExtras(level: Level, mapGen): void {\n        const extras = mapGen.getMapData();\n        // Need to uniquify start points\n        extras.startPoints = RG.uniquifyCoord(extras.startPoints);\n        level.setExtras(extras);\n    }\n\n    /* Creates the options how to generate the level map. This depends on the type\n     * of cave that needs to be generated. */\n    public _createMapOptions(cols, rows, conf): MapOpts {\n        let {dungeonType} = conf;\n        let opts: MapOpts = {};\n        const miners = getMiners(cols, rows);\n\n        dungeonType = dungeonType.capitalize();\n        switch (dungeonType) {\n            case 'Cave': opts = Miners.getRandOpts(cols, rows, 1, 3); break;\n            case 'Grotto': opts = Miners.getRandOpts(cols, rows, 2, 4); break;\n            case 'Lair': {\n                const edgeMiners = Miners.getMinersAndExclude(cols, rows, ['C']);\n                const edgeMiner = RNG.arrayGetRand(edgeMiners);\n                const lairMiners = [edgeMiner, miners.C];\n                opts = Miners.getOptsWithMiners(lairMiners);\n                break;\n            }\n            case 'Cavern': opts = Miners.getRandOpts(cols, rows, 3, 9); break;\n            default: opts = Miners.getRandOpts(cols, rows);\n        }\n\n        let isCollapsed = RNG.getUniform() <= 0.1;\n        if (conf.isCollapsed === false) {\n            isCollapsed = false;\n        }\n        if (isCollapsed || conf.isCollapsed) {\n            opts.floorElem = ELEM.CHASM;\n            opts.isCollapsed = true;\n        }\n\n        return opts;\n    }\n\n    public addStairsLocations(level: Level): void {\n        const extras: LevelExtras = level.getExtras();\n        const {startPoints} = extras;\n        let startPoint = null;\n        let endPoint = null;\n\n        if (startPoints.length > 1) {\n            [startPoint, endPoint] = RNG.getUniqueItems(startPoints, 2);\n        }\n        else {\n            startPoint = startPoints[0];\n            // End point must be determined from the map itself\n            endPoint = this.getEndPointFromMap(level, startPoint);\n        }\n\n        this.addStartAndEndPoint(level, startPoint, endPoint);\n\n        extras.startPoint = startPoint;\n        if (endPoint) {extras.endPoint = endPoint;}\n\n        // Process other points of interest\n        const points = startPoints.slice();\n        extras.points = [];\n        points.splice(points.indexOf(startPoint), 1);\n        points.splice(points.indexOf(endPoint), 1);\n        points.forEach(point => {\n            const [eX, eY] = point;\n            const pointMarker = new ElementMarker('>');\n            pointMarker.setTag('end_point');\n            level.addElement(pointMarker, eX, eY);\n            extras.points.push(point);\n        });\n    }\n\n    /* Adds features like extra obstacles etc. */\n    public _addSpecialFeatures(level: Level): void {\n        if (level.getExtras().isCollapsed) {\n            this._createCollapsedLevel(level);\n        }\n    }\n\n    public getEndPointFromMap(level: Level, startPoint) {\n        const map = level.getMap();\n        const freeCellMap = this.getMapOfNonWallCells(level);\n        return this.getRandomEndPoint(map, startPoint, freeCellMap);\n    }\n\n    public getMapOfNonWallCells(level: Level): FreeCellMap {\n        const map = level.getMap();\n        const nonWallCells = map.getCells(c => (\n            !c.getBaseElem().isWall()\n        ));\n        const freeCellMap: FreeCellMap = {};\n        nonWallCells.forEach(cell => {\n            freeCellMap[cell.getKeyXY()] = cell;\n        });\n        return freeCellMap;\n    }\n\n    public _createCollapsedLevel(level) {\n        const extras = level.getExtras();\n        const map = level.getMap();\n        let {endPoint} = extras;\n        const {startPoint} = extras;\n\n        const freeCellMap = this.getMapOfNonWallCells(level);\n\n        if (!endPoint) { // Define random endpoint\n            endPoint = this.getRandomEndPoint(map, startPoint, freeCellMap);\n        }\n\n        if (startPoint && endPoint) {\n            const path = this.createPath(map, startPoint, endPoint);\n            path.forEach(xy => {\n                delete freeCellMap[xy[0] + ',' + xy[1]];\n            });\n        }\n\n        // Add points used as digger start points\n        const pathPoints = [startPoint, endPoint];\n        if (extras.points) {\n            extras.points.forEach(newPoint => {\n                const otherPoint = RNG.arrayGetRand(pathPoints);\n                const path = this.createPath(map, newPoint, otherPoint);\n                path.forEach(xy => {\n                    delete freeCellMap[xy[0] + ',' + xy[1]];\n                });\n                pathPoints.push(newPoint);\n            });\n        }\n\n        // Add other misc points into the level\n        const numPoints = RNG.getUniformInt(1, 10);\n        for (let i = 0; i < numPoints; i++) {\n            const newPoint = this.getRandomPoint(map, startPoint, freeCellMap);\n\n            if (newPoint) {\n                const otherPoint = RNG.arrayGetRand(pathPoints);\n                const path = this.createPath(map, newPoint, otherPoint);\n                path.forEach(xy => {\n                    delete freeCellMap[xy[0] + ',' + xy[1]];\n                });\n                pathPoints.push(newPoint);\n            }\n        }\n\n        // const nPoints = pathPoints.length;\n    }\n\n    public createPath(map, startPoint, endPoint) {\n        const wallCb = (x, y) => (\n            map.hasXY(x, y) && !map.getBaseElemXY(x, y).getType().match(/wall/)\n        );\n        const [sX, sY] = startPoint;\n        const [eX, eY] = endPoint;\n        const path = Path.getShortestPath(sX, sY, eX, eY, wallCb);\n\n        const result = [];\n\n        path.forEach(xy => {\n            const {x, y} = xy;\n            const coord = Geometry.getCrossAround(x, y, 1, true);\n            coord.forEach(coordXY => {\n                const [cx, cy] = coordXY;\n                const cell = map.getCell(cx, cy);\n                if (cell.getBaseElem().getType() === 'chasm') {\n                    map.setBaseElemXY(cx, cy, ELEM.FLOOR_CAVE);\n                    result.push([cx, cy]);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    public getRandomEndPoint(map, startPoint, freeCellMap: FreeCellMap): TCoord {\n        const wallCb = (x, y) => (\n            map.hasXY(x, y) && !map.getBaseElemXY(x, y).getType().match(/wall/)\n        );\n        const [sX, sY] = startPoint;\n        let endPoint = null;\n\n        const minDist = map.cols > map.rows ? map.rows : map.cols;\n        let currDist = 0;\n        let watchdog = 10;\n\n        const freeCells: Cell[] = Object.values(freeCellMap);\n        let currPath = null;\n\n        while (currDist < minDist) {\n            const endCell = RNG.arrayGetRand(freeCells);\n            const [eX, eY] = endCell.getXY();\n            endPoint = [eX, eY];\n            currPath = Path.getShortestPath(eX, eY, sX, sY, wallCb);\n            currDist = currPath.length;\n            if (watchdog === 0) {break;}\n            --watchdog;\n        }\n\n        // Delete each path cell from list of free cells\n        if (endPoint && currPath) {\n            currPath.forEach(xy => {\n                const key = xy.x + ',' + xy.y;\n                delete freeCellMap[key];\n            });\n        }\n\n        return endPoint;\n    }\n\n    public getRandomPoint(map, startPoint, freeCellMap: FreeCellMap): TCoord {\n        const wallCb = (x, y) => (\n            map.hasXY(x, y) && !map.getBaseElemXY(x, y).getType().match(/wall/)\n        );\n        const [sX, sY] = startPoint;\n        const freeCells: Cell[] = Object.values(freeCellMap);\n\n        const endCell = RNG.arrayGetRand(freeCells);\n        const [eX, eY] = endCell.getXY();\n        const point = [eX, eY] as TCoord;\n        const currPath = Path.getShortestPath(eX, eY, sX, sY, wallCb);\n\n        // Delete each path cell from list of free cells\n        if (point && currPath) {\n            currPath.forEach(xy => {\n                const key = xy.x + ',' + xy.y;\n                delete freeCellMap[key];\n            });\n        }\n\n        return point;\n    }\n\n    public _addEncounters(level, conf) {\n        const {dungeonType} = conf;\n        if (dungeonType === 'Lair') {\n            this._addLairBoss(level, conf);\n        }\n\n        this.populatePoints(level, conf);\n    }\n\n    public _addLairBoss(level, conf) {\n        const {maxDanger, maxValue} = conf;\n        const endPoint = level.getExtras().endPoint;\n        if (endPoint) {\n            const populate = new DungeonPopulate({});\n            if (level.getExtras().isCollapsed) {\n                populate.setActorFunc(actor => actor.flying);\n            }\n            populate.addPointGuardian(level, endPoint, maxDanger + 4);\n            populate.addMainLoot(level, endPoint, maxValue);\n        }\n        else {\n            const json = JSON.stringify(level.getExtras());\n            RG.err('CaveGenerator', '_addLairBoss',\n                'No endPoint in extras: ' + json);\n        }\n    }\n\n    /* Processes points of interest other than start/end points. */\n    public populatePoints(level, conf) {\n        const extras = level.getExtras();\n        const {points} = extras;\n        const populate = new DungeonPopulate({});\n        points.forEach(point => {\n            populate.populatePoint(level, point, conf);\n        });\n    }\n}\n\nexport const Miners: any = {};\n\n/* Returns an object containing the base miners for different directions. */\nfunction getMiners(cols, rows, border = 1): MinersMap {\n    const midX = Math.round(cols / 2);\n    const midY = Math.round(rows / 2);\n\n    // Need -2 to preserve wall border of level\n    const endX = cols - 1 - border;\n    const endY = rows - 1 - border;\n\n    const cbTerminateSouth = (x, y, miner) => {\n        if (y === endY) {\n            miner.dirWeights = {};\n        }\n    };\n    const cbTerminateNorth = (x, y, miner) => {\n        if (y === 1) {\n            miner.dirWeights = {};\n        }\n    };\n\n    const miners = {\n        N: {x: midX, y: 1, dirWeights: {E: 1, W: 1, S: 5, SE: 5, SW: 5},\n            dugCallback: cbTerminateSouth\n        },\n        S: {x: midX, y: endY, dirWeights: {E: 1, W: 1, N: 5, NE: 5, NW: 5},\n            dugCallback: cbTerminateNorth\n        },\n        E: {x: endX, y: midY, dirWeights: {N: 1, S: 1, NW: 5, W: 5, SW: 5}},\n        W: {x: 1, y: midY, dirWeights: {N: 1, S: 1, NE: 5, E: 5, SE: 5}},\n        NE: {x: endX, y: 1, dirWeights: {NW: 1, W: 10, SW: 5, S: 10}},\n        NW: {x: 1, y: 1, dirWeights: {NE: 1, E: 10, SE: 5, S: 10}},\n        SE: {x: endX, y: endY, dirWeights: {SW: 1, W: 10, NW: 5, N: 10}},\n        SW: {x: 1, y: endY, dirWeights: {SE: 1, E: 10, NE: 5, N: 10}},\n        C: { // Central miner, all equal weights\n            x: midX, y: midY,\n            dirWeights: {N: 1, S: 1, E: 2, W: 2, NE: 1, SE: 1, NW: 1, SW: 1}\n        }\n    };\n    return miners;\n}\nMiners.getMiners = getMiners;\n\nfunction getMinersAndExclude(cols, rows, excluded) {\n    const miners = getMiners(cols, rows);\n    excluded.forEach(key => {delete miners[key];});\n    return Object.values(miners);\n}\nMiners.getMinersAndExclude = getMinersAndExclude;\n\nfunction getOptsWithMiners(miners): MapOpts {\n    const firstMiner = miners[0];\n    const opts: MapOpts = {\n        startX: firstMiner.x, startY: firstMiner.y,\n        dirWeights: firstMiner.dirWeights\n    };\n    const addMiners = [];\n    for (let i = 1; i < miners.length; i++) {\n        addMiners.push(miners[i]);\n    }\n    opts.addMiners = addMiners;\n    return opts;\n}\nMiners.getOptsWithMiners = getOptsWithMiners;\n\n/* Returns map options with random number of miners. */\nfunction getRandOpts(cols, rows, min = 1, max = 9) {\n    const miners = getMiners(cols, rows);\n    const minerValues = Object.values(miners);\n\n    const nMiners = RNG.getUniformInt(min, max);\n    const randMiners = [];\n    for (let i = 0; i < nMiners; i++) {\n        const randMiner = RNG.arrayGetRand(minerValues);\n        randMiners.push(randMiner);\n    }\n    return getOptsWithMiners(randMiners);\n}\nMiners.getRandOpts = getRandOpts;\n\n/* Returns options with miners placed on corners. */\nfunction getMinersCorners(cols, rows, miners) {\n    if (!miners) {\n        miners = getMiners(cols, rows);\n    }\n    const minersCorners = {\n        cols, rows,\n        // maxMinersCreated: 100,\n        dirWeights: miners.NW.dirWeights,\n        addMiners: [\n            miners.SW,\n            miners.NE,\n            miners.SE\n        ],\n        startX: miners.NW.x, startY: miners.NW.y\n    };\n    return minersCorners;\n}\nMiners.getMinersCorners = getMinersCorners;\n\n/* Returns options containing miners in each cardinal direction NSEW. */\nfunction getMinersNSEW(cols, rows, miners) {\n    if (!miners) {\n        miners = getMiners(cols, rows);\n    }\n    const minersNSEW = {\n        cols: 100, rows: 100,\n        maxMinersCreated: 100,\n\n        startX: miners.N.x, startY: miners.N.y,\n        dirWeights: miners.N.dirWeights,\n\n        addMiners: [\n            miners.S,\n            miners.E,\n            miners.W\n        ]\n    };\n    return minersNSEW;\n}\nMiners.getMinersNSEW = getMinersNSEW;\n","\nimport RG from './rg';\nimport {LevelGenerator} from './level-generator';\nimport {MapGenerator} from './map.generator';\nimport {Level} from './level';\n\nexport interface CryptOpts {\n    preserveMarkers: boolean;\n    tilesX: number;\n    tilesY: number;\n    genParams: [number, number, number, number];\n    roomCount: number;\n    maxValue: number;\n    maxDanger: number;\n}\n\ntype PartialCryptOpts = Partial<CryptOpts>;\n\n/* Class for generating crypt levels. */\nexport class CryptGenerator extends LevelGenerator {\n\n    public static getOptions(): CryptOpts {\n        return {\n            preserveMarkers: true,\n            tilesX: 12, tilesY: 7,\n            genParams: [2, 2, 2, 2],\n            roomCount: 40,\n            maxDanger: 1, maxValue: 50\n        };\n    }\n\n    constructor() {\n        super();\n        this.shouldRemoveMarkers = true;\n    }\n\n\n    public create(cols, rows, conf: PartialCryptOpts): Level {\n        return this.createLevel(cols, rows, conf);\n    }\n\n    public createLevel(\n        cols: number, rows: number, conf: PartialCryptOpts\n    ): Level {\n        const mapgen = new MapGenerator();\n        const level = new Level();\n        mapgen.setGen('crypt', cols, rows);\n        // TODO adjust crypt size based on cols/rows\n        const mapObj = mapgen.createCryptNew(cols, rows, conf);\n        level.setMap(mapObj.map);\n        return level;\n    }\n\n}\n","\nimport RG from './rg';\nimport * as Verify from './verify';\nimport {ElementExploration} from './element';\nimport {Random} from './random';\nimport {ObjectShell} from './objectshellparser';\nimport {Brain} from './brain';\n\nconst RNG = Random.getRNG();\n\n/* Used to add details like bosses and distinct room features into dungeon\n * levels. */\nexport const DungeonFeatures = function(zoneType) {\n    this._verif = new Verify.Conf('DungeonFeatures');\n    this._zoneType = zoneType;\n\n    /* Adds special features to the last level of the zone. */\n    this.addLastLevelFeatures = function(nLevel, level, conf) {\n        this._verif.verifyConf('addLastLevelFeatures', conf,\n            ['maxDanger', 'maxValue']);\n        const exploreElem = new ElementExploration();\n        const expPoints = 10 * (nLevel + 1) * conf.maxDanger;\n        if (!Number.isInteger(expPoints)) {\n            RG.err('DungeonFeatures', 'addLastLevelFeatures',\n                `expPoints NaN. nLevel: ${nLevel}, dang: ${conf.maxDanger}`);\n        }\n        exploreElem.setExp(expPoints);\n        exploreElem.setData({zoneType: this._zoneType});\n\n        const parent = level.getParent();\n        if (parent && parent.getName) {\n            exploreElem.addData('zoneName', parent.getName());\n        }\n\n        const extras = level.getExtras();\n        if (extras && extras.endPoint) {\n            const [eX, eY] = extras.endPoint;\n            level.addElement(exploreElem, eX, eY);\n        }\n        else {\n            level.addElement(exploreElem);\n        }\n\n        const bossActor = this.generateBoss(nLevel, level, conf);\n\n        if (bossActor) {\n            this.addMinions(bossActor, nLevel, level, conf);\n        }\n        else {\n            let msg = `Failed to created boss. nLevel: ${nLevel}`;\n            msg += ` Level parent: ${level.getParent()}`;\n            RG.debug({}, msg);\n        }\n\n    };\n\n    /* TODO Move to object which is related to actors. */\n    this.generateBoss = (nLevel, level, conf) => {\n        this._verif.verifyConf('generateBoss', conf,\n            ['maxDanger', 'maxValue']);\n        const parser = ObjectShell.getParser();\n        const bossDanger = conf.maxDanger + 2;\n        const bossActor = parser.createRandomActor(\n            {func: actor => (\n                actor.danger <= bossDanger && actor.danger >= conf.maxDanger\n            )}\n        );\n        if (bossActor) {\n            level.addActorToFreeCell(bossActor);\n            const prizeValue = conf.maxValue * 2;\n            const prizeItem = parser.createRandomItem(\n                {func: item => item.value <= prizeValue}\n            );\n            if (prizeItem) {\n                bossActor.getInvEq().addItem(prizeItem);\n            }\n            else {\n                const msg = `Value: ${prizeValue}`;\n                RG.err('DungeonFeatures', 'generateBoss',\n                    'Failed to create prize item: ' + msg);\n            }\n\n        }\n        return bossActor;\n    };\n\n    /* TODO Move to object which is related to actors. */\n    this.addMinions = (boss, nLevel, level, conf) => {\n        const parser = ObjectShell.getParser();\n        const bossType = boss.getType();\n        const isSwarm = RNG.getUniform() <= 0.5;\n        let numMinions = nLevel + 1;\n        let dangerMinion = conf.maxDanger;\n        if (isSwarm) {\n            numMinions *= 2;\n            dangerMinion -= 1;\n        }\n        const dist = Math.round(Math.sqrt(numMinions)) + 1;\n        const cells = Brain.getBoxOfFreeCellsAround(boss, dist);\n        RNG.shuffle(cells);\n\n        const minionFunc = actor => (\n            actor.danger <= dangerMinion && actor.type === bossType\n        );\n\n        while (cells.length > 0 && numMinions > 0) {\n            const currCell = cells.pop();\n            --numMinions;\n            const minion = parser.createRandomActor({func: minionFunc});\n            if (minion) {\n                const [x, y] = [currCell.getX(), currCell.getY()];\n                level.addActor(minion, x, y);\n            }\n        }\n\n    };\n\n};\n\n","import RG from './rg';\nimport {EventPool} from './eventpool';\n\n/* Describes a condition when the player has won the game. 1st version pretty\n * much checks if given actor is killed. */\nexport class WinCondition {\n    public hasNotify: boolean;\n\n    private _name: string;\n    private description: string; // Shown when condition filled\n\n    private _condIncomplete: {[key: string]: any[]};\n    private _condFilled: {[key: string]: boolean};\n    private pool: EventPool;\n    private _isTrue: boolean;\n    private _notifyCallbacks: {[key: string]: (any) => void};\n\n    constructor(name, pool: EventPool) {\n        this._name = name;\n        this.description = ''; // Shown when condition filled\n\n        this._condIncomplete = {};\n        this._condFilled = {};\n        this.pool = pool;\n        this._isTrue = false;\n        this.hasNotify = true;\n        this._notifyCallbacks = {\n            [RG.EVT_ACTOR_KILLED]: this.actorKilledCallback.bind(this)\n        };\n    }\n\n    public getName(): string {\n        return this._name;\n    }\n\n    public setPool(pool: EventPool): void {\n        if (pool !== this.pool) {\n            if (this.pool.isListener(this)) {\n                this.pool.removeListener(this);\n            }\n        }\n        this.pool = pool;\n    }\n\n    public isTrue() {return this._isTrue;}\n\n    public addNotifyCallback(type, func) {\n        this._notifyCallbacks[type] = func;\n    }\n\n    public notify(evtName, args) {\n        if (this._notifyCallbacks.hasOwnProperty(evtName)) {\n            this._notifyCallbacks[evtName](args);\n        }\n\n        if (!this._isTrue) {\n            if (Object.keys(this._condIncomplete).length === 0) {\n                this._isTrue = true;\n                this.onTrue();\n            }\n        }\n    }\n\n    /* Add an event to listen to for win condition. */\n    public _addEvent(type) {\n        this.pool.listenEvent(type, this);\n    }\n\n    public addActorKilled(actor) {\n        this._addEvent(RG.EVT_ACTOR_KILLED);\n        this._condIncomplete[RG.EVT_ACTOR_KILLED] = [actor.getID()];\n    }\n\n    /* Customisable callback fired on condition being true. */\n    public onTrue() {\n        let msg = `Condition: ${this._name}, Description: ${this.description}.`;\n        msg += 'Congratulations. You have won!';\n        RG.gameSuccess(msg);\n        this.pool.emitEvent(RG.EVT_WIN_COND_TRUE, {name: this._name});\n    }\n\n    // Some default callbacks (if not overwritten)\n    public actorKilledCallback(args) {\n        const actor = args.actor;\n        const actors = this._condIncomplete[RG.EVT_ACTOR_KILLED];\n        if (actors) {\n            const index = actors.indexOf(actor.getID());\n            if (index >= 0) {\n                actors.splice(index, 1);\n                if (actors.length === 0) {\n                    delete this._condIncomplete[RG.EVT_ACTOR_KILLED];\n                }\n            }\n        }\n    }\n\n}\n","/* Used to generate/store disposition of different clans/races. */\n\nimport RG from './rg';\nimport {Random} from './random';\nconst RNG = Random.getRNG();\n\nexport const Disposition = function(rivals, conf?) {\n    this.rivals = rivals;\n    this.conf = Object.assign({\n    }, conf);\n\n    // Weights used for randomisation\n    this.weights = {\n        default: {\n            ally: 20,\n            neutral: 50,\n            enemy: 30\n        }\n    };\n};\n\nDisposition.prototype.setWeights = function(weights) {\n    this.weights = weights;\n};\n\nDisposition.prototype.addWeight = function(rival, weights) {\n    this.weights[rival] = weights;\n};\n\nDisposition.prototype.getTable = function() {\n    return this.dispTable;\n};\n\nDisposition.prototype._initTable = function() {\n    this.dispTable = {};\n    this.rivals.forEach(rival1 => {\n        this.dispTable[rival1] = {};\n    });\n};\n\nDisposition.prototype.randomize = function() {\n    this._initTable();\n    this.rivals.forEach(rival1 => {\n        this.rivals.forEach(rival2 => {\n            if (!this.pairDone(rival1, rival2)) {\n                const weights = this.getWeights(rival1, rival2);\n                const disposition = RNG.getWeighted(weights);\n                this.dispTable[rival1][rival2] = disposition;\n                this.dispTable[rival2][rival1] = disposition;\n            }\n        });\n    });\n};\n\n/* Returns the weights for given pair. */\nDisposition.prototype.getWeights = function(r1, r2) {\n    // TODO smart merging of weights if given\n    if (this.weights.hasOwnProperty(r1)) {\n        return this.weights[r1];\n    }\n    else if (this.weights.hasOwnProperty(r2)) {\n        return this.weights[r2];\n    }\n    return this.weights.default;\n};\n\nDisposition.prototype.pairDone = function(r1, r2) {\n    if (r1 === r2) {return true;} // No self-computation\n    if (this.dispTable[r1][r2]) {\n        if (!this.dispTable[r2][r1]) {\n            RG.err('Disposition', 'pairDone',\n                'Something went wrong. No [r2][r1] but [r1][r2] exists');\n        }\n        return true;\n    }\n    return false;\n};\n\n/* Convert into human-readable format. */\nDisposition.prototype.toString = function() {\n};\n","\n/* This file contains code to generate the configuration for different types of\n * levels. Used in the overworld generation in overworld.js after the overworld\n * Map.Level has been created. */\n\nimport RG from '../src/rg';\nimport {Names} from './name-gen';\nimport {WorldConf} from '../src/world.creator';\nimport * as IF from '../src/interfaces';\n\nexport const LevelGen: any = {};\n\nconst getNumLevels = function(name) {\n    switch (name) {\n        case 'Cave': return 1;\n        case 'Crypt': return 2;\n        case 'Dungeon': return 3;\n        case 'Labyrinth': return 1;\n        default: return 3;\n    }\n};\n\nconst getDungeonSizeXY = function(name) {\n    const mediumSize = [RG.LEVEL_MEDIUM_X, RG.LEVEL_MEDIUM_Y];\n    switch (name) {\n        case 'Cave': return [80, 50];\n        case 'Cavern': return [200, 200];\n        case 'Grotto': return [120, 60];\n        case 'Lair': return [200, 150];\n\n        case 'Cells': return [100, 50];\n        case 'Dungeon': return [100, 50];\n\n        case 'Labyrinth': return [100, 100];\n\n        case 'Crypt': return mediumSize;\n        case 'Tombs': return [100, 100];\n        case 'Catacombs': return [RG.LEVEL_HUGE_X, RG.LEVEL_HUGE_Y];\n\n        default: return mediumSize;\n    }\n\n};\n\n/* Returns generation constraints based on the level name. */\nconst getConstraint = function(name): IF.ConstraintMap {\n    switch (name) {\n        case 'Cave': return {\n            actor: {\n              op: 'eq', prop: 'type',\n              value: ['animal', 'goblin', 'beast']\n            }\n        };\n        case 'Crypt': return {\n            actor: {op: 'eq', prop: 'type', value: 'undead'}\n        };\n        default: return null;\n    }\n};\n\nconst getDungeonType = function(name) {\n    switch (name) {\n        case 'Grotto': return 'Cave';\n        case 'Cavern': return 'Cave';\n        case 'Lair': return 'Cave';\n        case 'Catacombs': return 'Crypt';\n        case 'Tombs': return 'Crypt';\n        case 'Cells': return 'Dungeon';\n        default: return name;\n    }\n};\n\nconst getMountainSizeXY = function(name) {\n    switch (name) {\n        default: return [80, 240];\n    }\n};\n\n//---------------------------------------------------------------------------\n// DUNGEON GENERATION\n//---------------------------------------------------------------------------\n\nLevelGen.getDungeonConf = (dungeonName): IF.DungeonConf =>  {\n    let dungeonType = getDungeonType(dungeonName);\n    const nLevels = getNumLevels(dungeonType);\n    const constraint = getConstraint(dungeonType);\n    const [dungeonX, dungeonY] = getDungeonSizeXY(dungeonName);\n\n    dungeonType = dungeonType.toLowerCase();\n    const obj: IF.DungeonConf = {\n        name: dungeonName,\n        dungeonX, dungeonY, dungeonType,\n        nBranches: 1, // TODO multi-branch dungeons\n        branch: [\n            {name: dungeonName, nLevels, entranceLevel: 0}\n        ]\n    };\n\n    if (constraint) {\n        obj.constraint = constraint;\n    }\n\n    return obj;\n};\n\n//---------------------------------------------------------------------------\n// MOUNTAIN GENERATION\n//---------------------------------------------------------------------------\n\nLevelGen.getMountainConf = mountainName => {\n    const nLevels = 1;\n    const [x, y] = getMountainSizeXY(mountainName);\n    const conf = {\n        name: mountainName,\n        nFaces: nLevels,\n        face: [\n            {name: mountainName, nLevels, entranceLevel: 0, x, y}\n        ],\n        nSummits: 1,\n        summit: [\n            {name: 'Summit', nLevels: 1, cols: 80, rows: 50}\n        ],\n        connectLevels: [\n            [mountainName, 'Summit', 0, 0]\n        ]\n    };\n    return conf;\n};\n\n//---------------------------------------------------------------------------\n// CITY GENERATION\n//---------------------------------------------------------------------------\n\nconst getNumQuarters = (cityType) => {\n    switch (cityType) {\n        case 'Hamlet': return 1;\n        case 'Village': return 1;\n        case 'Town': return 2;\n        case 'Fort': return 1;\n        case 'Stronghold': return RG.RAND.getUniformInt(2, 4);\n        case 'Capital': return RG.RAND.getUniformInt(3, 5);\n        default: return 1;\n    }\n};\n\nconst getRandomShopType = () => RG.RAND.arrayGetRand(RG.SHOP_TYPES);\n\n/* Adds shop generation constraints for the quarter. */\nconst addShopConstraints = (qConf, conf) => {\n    const maxValue = conf.maxValue || 100;\n    const shopTypeConf = conf.shopType || 'random';\n    const qName = conf.name;\n\n    if (qName === 'Market' || qName === 'Bazaar') {\n        const nShops = RG.RAND.getUniformInt(1, 3);\n        qConf.nShops = nShops;\n        qConf.constraint.shop = [];\n        for (let i = 0; i < nShops; i++) {\n            let shopType = getRandomShopType();\n\n            // Optionally allow first shopType to be given\n            if (shopTypeConf !== 'random' && i === 0) {\n                shopType = shopTypeConf;\n            }\n            const shopConstr = [\n                {op: 'eq', prop: 'type', value: shopType},\n                {op: 'lte', prop: 'value', value: maxValue}\n            ];\n            qConf.constraint.shop.push(shopConstr);\n        }\n    }\n    else {\n        qConf.nShops = 1;\n    }\n};\n\n/* Returns the configuration for city quarters. */\nconst getQuarterConf = (nQuarters, conf) => {\n    const quarters = [];\n    for (let i = 0; i < nQuarters; i++) {\n        const qName = Names.getGenericPlaceName('quarter');\n        const qConf: IF.QuarterConf = {\n            name: qName,\n            nLevels: 1,\n            constraint: {}\n        };\n        if (i === 0) {\n            qConf.entranceLevel = 0;\n        }\n\n        addShopConstraints(qConf, conf);\n        // TODO add any other special features based on the type\n        quarters.push(qConf);\n    }\n    return quarters;\n};\n\nLevelGen.getCityConf = (cityName, conf) => {\n    let cityType = Names.getGenericPlaceName('city');\n    if (conf.type === 'fort') {\n        cityType = 'Fort';\n    }\n    else if (conf.capital) {\n        cityType = 'Capital';\n    }\n    else if (conf.type === 'stronghold') {\n        cityType = 'Stronghold';\n    }\n    else if (conf.type === 'village') {\n        cityType = Names.getVillageType();\n    }\n    const nQuarters = getNumQuarters(cityType);\n    const quarters = getQuarterConf(nQuarters, conf);\n    const connect = WorldConf.createQuarterConnections(quarters);\n    const obj: IF.CityConf = {\n        name: cityName,\n        nQuarters,\n        quarter: quarters\n    };\n\n    if (connect) {obj.connectLevels = connect;}\n    return obj;\n};\n","\nimport RG from './rg';\nimport {ConfStack} from './conf-stack';\nimport {Factory} from './factory';\nimport {FactoryWorld} from './factory.world';\nimport {Entity} from './entity';\nimport {Level} from './level';\nimport * as Verify from './verify';\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:WorldFromJSON');\nimport * as World from './world';\n\n/* This class converts a serialized world back to World.Top object. It supports\n * unloaded AreaTiles, and does not create them as objects when\n * tilesLoaded[x][y] is false for that tile.\n *\n * This class resembles Factory.World (it's a partial copy-paste), but there\n * are intricacies when\n * restoring an existing game, which have been added. Do NOT try to refactor\n * these into single class!\n */\nexport class WorldFromJSON {\n\n    public id2level: {[key: string]: Level};\n    public id2entity: {[key: string]: Entity};\n    private _conf: any; // TODO ConfStack;\n    public _verif: any; // TODO VerifyConf;\n    public worldElemByID: {[key: string]: any}; // TODO fix typings\n    public createAllZones: boolean;\n    private _IND: 0;\n    private fact: any; // TODO FactoryWorld;\n\n    constructor(id2level, id2entity) {\n        this.id2level = id2level;\n        this.id2entity = id2entity;\n        this._conf = new ConfStack();\n        this._verif = new Verify.Conf('WorldFromJSON');\n        this.worldElemByID = {}; // Stores world elements by ID\n        this.createAllZones = true;\n        this._IND = 0; // Used for indenting debug messages\n    }\n\n    createPlace(placeJSON) {\n        switch (placeJSON.type) {\n            case 'world': return this.createWorld(placeJSON);\n            case 'quarter': {\n                const fact = new RG.Factory.World();\n                fact.setId2Level(this.id2level);\n                return fact.createCityQuarter(placeJSON);\n            }\n            default: RG.err('WorldFromJSON', 'createPlace',\n                `No place ${placeJSON.type} implemented yet`);\n        }\n        return null;\n    }\n\n    /* Main function to call with a serialized JSON of WorldTop. */\n    createWorld(placeJSON) {\n        let world = null;\n        if (placeJSON.conf) {\n            this.dbg('Creating a restored world now');\n            world = this.createRestoredWorld(placeJSON);\n        }\n        else {\n            RG.err('WorldFromJSON', 'Should not be called at all.', 'ERROR');\n            // TODO branch will be removed completely after verification\n            this.dbg('Creating world using Factory.World fully');\n            const fact = new FactoryWorld();\n            fact.setId2Level(this.id2level);\n            world = fact.createWorld(placeJSON);\n        }\n        return world;\n    }\n\n    /* Given a serialized WorldTop in JSON, returns the created\n     * WorldTop object. */\n    createRestoredWorld(worldJSON) {\n        if (!worldJSON.conf) {\n            RG.err('WorldFromJSON', 'createRestoredWorld',\n                'No worldJSON.conf. Does not look like restored world.');\n        }\n        const world = this.createWorldFromJSON(worldJSON);\n\n        // Need to restore configurations here\n        world.setConf(worldJSON.conf);\n\n        const areas = world.getAreas();\n        if (areas.length > 0) {\n            const keys = `${Object.keys(worldJSON.conf)}`;\n            if (!worldJSON.conf.hasOwnProperty('area')) {\n                RG.err('WorldFromJSON', 'createRestoredWorld',\n                    `No prop 'area' in ${worldJSON.conf}. Props ${keys}`);\n            }\n        }\n\n        areas.forEach((area, i) => {\n            area.setConf(worldJSON.conf.area[i]);\n        });\n        return world;\n    }\n\n    pushScope(json) {\n        this._conf.pushScope(json);\n        this.fact.pushScope(json);\n        ++this._IND;\n    }\n\n    popScope(json) {\n        this._conf.popScope(json);\n        this.fact.popScope(json);\n        --this._IND;\n    }\n\n    getHierName() {return this._conf.getScope().join('.');}\n\n    createWorldFromJSON(worldJSON) {\n        const fact = new FactoryWorld();\n        fact.setId2Level(this.id2level);\n        fact.id2entity = this.id2entity;\n        this.fact = fact;\n\n        this.verify('createWorld', worldJSON, ['name', 'nAreas']);\n        if (worldJSON.hasOwnProperty('createAllZones')) {\n            this.createAllZones = worldJSON.createAllZones;\n            this.dbg('createAllZones set to ' + this.createAllZones);\n            fact.createAllZones = this.createAllZones;\n        }\n        this.pushScope(worldJSON);\n        const world = new World.WorldTop(worldJSON.name);\n        world.setConf(worldJSON);\n        for (let i = 0; i < worldJSON.nAreas; i++) {\n            const areaJSON = worldJSON.area[i];\n            if (debug.enabled) {\n                this.printKeys('areaJSON keys', areaJSON);\n            }\n            const area = this.restoreAreaFromJSON(areaJSON);\n\n            if (areaJSON.zonesCreated) { // Only during restore game\n                this.restoreCreatedZones(world, area);\n            }\n\n            world.addArea(area);\n            this.addWorldID(areaJSON, area);\n        }\n        this.popScope(worldJSON);\n        this.addWorldID(worldJSON, world);\n        return world;\n    }\n\n    /* Restores WorldArea from JSON. */\n    restoreAreaFromJSON(areaJSON) {\n        this.verify('restoreAreaFromJSON', areaJSON,\n            ['name', 'maxX', 'maxY']);\n        this.pushScope(areaJSON);\n\n        const areaLevels = this.getAreaLevels(areaJSON);\n\n        const {name, maxX, maxY, cols, rows} = areaJSON;\n        const area = new World.Area(name, maxX, maxY, cols, rows,\n            areaLevels);\n        area.setConf(areaJSON);\n        area.setHierName(this.getHierName());\n\n        // Restore zone state variables\n        area.tilesLoaded = areaJSON.tilesLoaded;\n        area.zonesCreated = areaJSON.zonesCreated;\n\n        this.setTileJSONForUnloadedTiles(area, areaJSON);\n\n        // When player enters a given area tile, create zones for that tile\n        if (this.createAllZones) {\n        // >>>>>>>>>>>>>>>>>> Factory.World START\n            this.fact._createAllZones(area, areaJSON);\n        // >>>>>>>>>>>>>>>>>> Factory.World END\n            area.markAllZonesCreated();\n        }\n        else {\n            this.dbg('Skipping the zone creating due to createZones=false');\n        }\n        this.popScope(areaJSON);\n        return area;\n    }\n\n    restoreCreatedZones(world, area) {\n        Object.keys(area.zonesCreated).forEach(xy => {\n            const [xStr, yStr] = xy.split(',');\n            const [x, y] = [parseInt(xStr, 10), parseInt(yStr, 10)];\n            if (area.zonesCreated[xy] && area.tilesLoaded[x][y]) {\n                this.dbg(`\\tRestoring created zones for tile ${x},${y}`);\n                this.restoreZonesForTile(world, area, x, y);\n            }\n        });\n    }\n\n    restoreZonesForTile(world, area, x, y) {\n        const worldConf = world.getConf();\n        this.pushScope(worldConf);\n        const areaConf = area.getConf();\n        this.pushScope(areaConf);\n\n        // >>>>>>>>>>>>>>>>>>>>>> Factory.World START\n        this.fact._createAllZones(area, areaConf, x, y);\n        // >>>>>>>>>>>>>>>>>>>>>> Factory.World END\n\n        // Cleanup the scope & conf stacks\n        this.popScope(areaConf);\n        this.popScope(worldConf);\n    }\n\n    /* Used when creating area from existing levels. Uses id2level lookup table\n     * to construct 2-d array of levels.*/\n    getAreaLevels(areaJSON) {\n        this.verify('getAreaLevels', areaJSON, ['tilesLoaded']);\n        ++this._IND;\n        const levels = [];\n        if (areaJSON.tiles) {\n            areaJSON.tiles.forEach((tileCol, x) => {\n                const levelCol = [];\n                tileCol.forEach((tile, y) => {\n                    if (areaJSON.tilesLoaded[x][y]) {\n                        this.dbg(`Tile ${x},${y} is loaded`);\n                        const level = this.id2level[tile.level];\n                        if (level) {\n                            levelCol.push(level);\n                        }\n                        else {\n                            RG.err('WorldFromJSON', 'getAreaLevels',\n                                `No level ID ${tile.level} in id2level`);\n                        }\n                    }\n                    else {\n                        this.dbg(`Will NOT load Tile ${x},${y}`);\n                        levelCol.push(RG.LEVEL_NOT_LOADED);\n                    }\n                });\n                levels.push(levelCol);\n            });\n        }\n        else {\n            RG.err('WorldFromJSON', 'getAreaLevels',\n                'areaJSON.tiles cannot be null/undefined');\n        }\n        --this._IND;\n        return levels;\n    }\n\n    setTileJSONForUnloadedTiles(area, areaJSON) {\n        const tiles = area.getTiles();\n        tiles.forEach((tileCol, x) => {\n            tileCol.forEach((tile, y) => {\n                if (tiles[x][y] === RG.TILE_NOT_LOADED) {\n                    tiles[x][y] = areaJSON.tiles[x][y];\n                }\n            });\n        });\n    }\n\n    /* Adds a world ID to given world element. */\n    addWorldID(conf, worldElem) {\n        if (!RG.isNullOrUndef([conf.id])) {\n            worldElem.setID(conf.id);\n        }\n        this.worldElemByID[worldElem.getID()] = worldElem;\n    }\n\n    /* For printing debug messages. */\n    dbg(msg) {\n        if (debug.enabled) {\n            const ind = ' '.repeat(this._IND);\n            RG.diag(ind + 'WorldFromJSON: ' + msg);\n        }\n    }\n\n    /* Verifies that given config is OK. */\n    verify(funcName, conf, list) {\n        this._verif.verifyConf(funcName, conf, list);\n    }\n\n    printKeys(msg, obj) {\n        RG.diag(msg);\n        RG.diag(Object.keys(obj));\n    }\n\n}\n","/* Season manager handles scheduling of 4 seasons and\n * also manages internal game time/calender + time of day.\n */\n\nimport RG from './rg';\nimport {Random} from './random';\nimport {TCoord} from './interfaces';\nimport {EventPool} from './eventpool';\n\nconst RNG = Random.getRNG();\n\nexport interface SeasonEntry {\n    dur: number;\n    temp: [number, number]; // Min/max temperature\n    weather: string[];\n    index: number; // Determines order of season in 'seasonal wheel'\n}\n\n// Default weathers on any season are sunny, cloudy\n//\nconst defaultWeather = ['sunny', 'cloudy'];\nconst specialThr = 0.1;\nconst sameWeatherProb = 0.5;\nconst daysInMonth = 32;\n\nexport const seasonConfig: {[key: string]: SeasonEntry} = {\n    AUTUMN: {dur: 2.0, temp: [0, 15], weather: [], index: 0},\n    AUTUMN_WINTER: {\n        dur: 1.0, temp: [-10, 10], weather: ['snowFall', 'coldRain'], index: 1\n    },\n    WINTER: {\n        dur: 4.0, temp: [-35, 3], weather: ['snowFall', 'snowStorm', 'hailStorm'],\n        index: 2\n    },\n    WINTER_SPRING: {dur: 1.0, temp: [-10, 10], weather: ['snowFall'], index: 3},\n    SPRING: {dur: 1.0, temp: [7, 15], weather: [], index: 4},\n    SPRING_SUMMER: {dur: 1.0, temp: [10, 20], weather: [], index: 5},\n    SUMMER: {dur: 1.0, temp: [15, 25], weather: [], index: 6},\n    SUMMER_AUTUMN: {dur: 1.0, temp: [10, 20], weather: ['rain'], index: 7},\n};\n\n/* Stores possible weathers for each biome. */\nexport const biomePossibleSeasons: {[key: string]: string[]} = {\n    arctic: ['WINTER'],\n    alpine: ['WINTER', 'WINTER_SPRING'],\n    tundra: ['AUTUMN_WINTER', 'WINTER', 'WINTER_SPRING'],\n    taiga: ['all'],\n    forest: ['all'],\n    grassland: ['all']\n};\n\n/* Returns a \"distance\" between two seasons */\nexport function getSeasonDist(s1, s2): number {\n    const i1 = seasonConfig[s1].index;\n    const i2 = seasonConfig[s2].index;\n    return Math.abs(i1 - i2);\n}\n\ninterface StringMap {\n    [key: string]: string;\n}\n\nexport class SeasonManager {\n\n    public static fromJSON: (json: any) => SeasonManager;\n\n    public _currSeason: string;\n    public _currWeather: string;\n    public _monthLeft: number;\n    public _seasonLeft: number;\n\n    public _seasonChanged: boolean;\n    public _weatherChanged: boolean;\n    public _monthChanged: boolean;\n    public _yearChanged: boolean;\n    public pool: EventPool;\n\n    public _owPos: TCoord;\n\n    public _biomeMap: StringMap;\n\n    constructor(pool?: EventPool) {\n        this._currSeason = RG.SEASON.AUTUMN;\n        this._monthLeft = daysInMonth;\n        this._seasonLeft = seasonConfig[this._currSeason].dur;\n        this._currWeather = 'sunny';\n\n        this._seasonChanged = false;\n        this._weatherChanged = false;\n        this._monthChanged = false;\n        this._yearChanged = false;\n        this.pool = pool;\n    }\n\n    /* Sets the player position in overworld map to find the correct biomes etc. */\n    public setOwPos(xy: TCoord): void {\n        this._owPos = xy;\n    }\n\n    public setBiomeMap(biomeMap: StringMap): void {\n        this._biomeMap = biomeMap;\n    }\n\n    public seasonChanged(): boolean {\n        return this._seasonChanged;\n    }\n\n    public monthChanged(): boolean {\n        return this._monthChanged;\n    }\n\n    public yearChanged(): boolean {\n        return this._yearChanged;\n    }\n\n    public weatherChanged(): boolean {\n        return this._weatherChanged;\n    }\n\n    /* Updates season progress. */\n    public update(): void {\n        --this._monthLeft;\n        this._seasonChanged = false;\n        this._monthChanged = false;\n        this._yearChanged = false;\n\n        if (this._monthLeft === 0) {\n            this._seasonLeft -= 1;\n            this._monthLeft = daysInMonth;\n            this._monthChanged = true;\n        }\n\n        if (this._seasonLeft <= 0) {\n            this.nextSeason();\n            this._seasonChanged = true;\n            this._checkMsgEmits();\n        }\n    }\n\n    public nextSeason(): void {\n        const seasons = Object.keys(seasonConfig);\n        const currIndex= seasons.indexOf(this._currSeason);\n        let nextIndex = currIndex + 1;\n        if (nextIndex >= seasons.length) {\n            nextIndex = 0;\n            this._yearChanged = true;\n            this.pool.emitEvent(RG.EVT_YEAR_CHANGED, {\n                prevSeason: this._currSeason,\n                nextSeason: seasons[nextIndex]\n            });\n        }\n        this.pool.emitEvent(RG.EVT_SEASON_CHANGED, {\n            prevSeason: this._currSeason,\n            nextSeason: seasons[nextIndex]\n        });\n        this._currSeason = seasons[nextIndex];\n        // TODO emit event SEASON_CHANGED\n    }\n\n    /* Returns the current weather. */\n    public getWeather(): string {\n        return this._currWeather;\n    }\n\n    /* Changes the weather (possibly), and returns the new (or old) weather. */\n    public changeWeather(): string {\n        this._weatherChanged = false;\n        if (RG.isSuccess(sameWeatherProb)) {\n            return this._currWeather;\n        }\n\n        const seasonModified = this.getSeasonModified();\n\n        let weather = this._currWeather;\n        if (RG.isSuccess(specialThr)) {\n            const specialWeathers = seasonConfig[seasonModified].weather;\n            if (specialWeathers.length > 0) {\n                weather = RNG.arrayGetRand(specialWeathers);\n            }\n        }\n        else {\n            weather = RNG.arrayGetRand(defaultWeather);\n        }\n        if (weather !== this._currWeather) {\n            this._weatherChanged = true;\n        }\n\n        this.pool.emitEvent(RG.EVT_WEATHER_CHANGED, {\n            prevWeather: this._currWeather,\n            nextWeather: weather\n        });\n        this._currWeather = weather;\n        return this._currWeather;\n    }\n\n    /* Updates all seasons. */\n    public getSeason(): string {\n        return this._currSeason;\n    }\n\n    public getSeasonModified(): string {\n        if (!this._biomeMap) {return this._currSeason;}\n        if (!this._owPos) {return this._currSeason;}\n\n        const key = this._owPos[0] + ',' + this._owPos[1];\n        const currBiome = this._biomeMap[key];\n        const possibleSeason = biomePossibleSeasons[currBiome];\n\n        if (possibleSeason[0] === 'all') {return this._currSeason;}\n        else {\n            const index = possibleSeason.indexOf(this._currSeason);\n            if (index >= 0) {return this._currSeason;}\n            // TODO Compute distance between actual season and one from the list\n            return possibleSeason[0];\n        }\n    }\n\n    public setPool(pool?: EventPool): void {\n        this.pool = pool;\n    }\n\n    public toJSON(): any {\n        return {\n            currSeason: this._currSeason,\n            currWeather: this._currWeather,\n            monthLeft: this._monthLeft,\n            seasonLeft: this._seasonLeft,\n\n            seasonChanged: this._seasonChanged,\n            weatherChanged: this._weatherChanged,\n            monthChanged: this._monthChanged,\n            yearChanged: this._yearChanged,\n            owPos: this._owPos,\n            biomeMap: this._biomeMap\n        };\n    }\n\n    protected _checkMsgEmits(): void {\n        if (this.seasonChanged()) {\n            if (this._currSeason === RG.SEASON.AUTUMN_WINTER) {\n                RG.gameMsg('Winter is approaching quickly!');\n            }\n            else if (this._currSeason === RG.SEASON.WINTER) {\n                RG.gameMsg('The call of Winter has arrived!');\n            }\n        }\n    }\n\n}\n\nSeasonManager.fromJSON = function(json: any): SeasonManager {\n    const seasonMan = new SeasonManager();\n    seasonMan._currSeason = json.currSeason;\n    seasonMan._currWeather = json.currWeather;\n    seasonMan._monthLeft = json.monthLeft;\n    seasonMan._seasonLeft = json.seasonLeft;\n    seasonMan._seasonChanged = json.seasonChanged;\n    seasonMan._weatherChanged = json.weatherChanged;\n    seasonMan._monthChanged = json.monthChanged;\n    seasonMan._yearChanged = json.yearChanged;\n    seasonMan._owPos = json.owPos;\n    seasonMan._biomeMap = json.biomeMap;\n    return seasonMan;\n};\n","/* Manages time of day. */\nimport RG from './rg';\nimport {EventPool} from './eventpool';\n\nconst phasesOfDay = {\n    DAWN: {dur: 1.0, visibility: -1},\n    MORNING: {dur: 3.0},\n    NOON: {dur: 3.0},\n    AFTERNOON: {dur: 3.0},\n    EVENING: {dur: 3.0, visibility: -1},\n    DUSK: {dur: 1.0, visibility: -2},\n    NIGHT: {dur: 7.0, visibility: -3},\n};\n\nexport class DayManager {\n\n    public static fromJSON: (json: any) => DayManager;\n\n    public _currPhase: string;\n    public _currPhaseLeft: number;\n    public _updateRate: number;\n    public _dayChanged: boolean;\n    public _phaseChanged: boolean;\n    public pool: EventPool;\n\n    constructor(pool?: EventPool) {\n        this._currPhase = RG.DAY.MORNING;\n        this._currPhaseLeft = phasesOfDay[this._currPhase].dur;\n        this._updateRate = 0.05;\n        this._dayChanged = false;\n        this._phaseChanged = false;\n        this.pool = pool;\n    }\n\n    public setUpdateRate(rate: number): void {\n        this._updateRate = rate;\n    }\n\n    public update(): void {\n        this._dayChanged = false;\n        this._phaseChanged = false;\n        this._currPhaseLeft -= this._updateRate;\n        if (this._currPhaseLeft <= 0) {\n            this.nextPhase();\n            this._phaseChanged = true;\n        }\n    }\n\n    /* Returns true if last update() changed the day. */\n    public dayChanged(): boolean {\n        return this._dayChanged;\n    }\n\n    /* Returns true if last update() changed phase of the day. */\n    public phaseChanged(): boolean {\n        return this._phaseChanged;\n    }\n\n    public getCurrPhase(): string {\n        return this._currPhase;\n    }\n\n    public nextPhase(): void {\n        const phases = Object.keys(phasesOfDay);\n        const currIndex= phases.indexOf(this._currPhase);\n        let nextIndex = currIndex + 1;\n        if (nextIndex >= phases.length) {\n            nextIndex = 0;\n            this.pool.emitEvent(RG.EVT_DAY_CHANGED, {\n                prevPhase: this._currPhase,\n                nextPhase: phases[nextIndex]\n            });\n            this._dayChanged = true;\n        }\n        this.pool.emitEvent(RG.EVT_DAY_PHASE_CHANGED, {\n            prevPhase: this._currPhase,\n            nextPhase: phases[nextIndex]\n        });\n        this._currPhase = phases[nextIndex];\n        this._currPhaseLeft = phasesOfDay[this._currPhase].dur;\n    }\n\n    public toJSON(): any {\n        return {\n            currPhase: this._currPhase,\n            currPhaseLeft: this._currPhaseLeft,\n            updateRate: this._updateRate,\n            dayChanged: this._dayChanged,\n            phaseChanged: this._phaseChanged\n        };\n    }\n\n    public setPool(pool: EventPool): void {\n        this.pool = pool;\n    }\n\n}\n\nDayManager.fromJSON = function(json: any): DayManager {\n    const dayMan = new DayManager();\n    dayMan._currPhase = json.currPhase;\n    dayMan._currPhaseLeft = json.currPhaseLef;\n    dayMan._updateRate = json.updateRate;\n    dayMan._dayChanged = json.dayChanged;\n    dayMan._phaseChanged = json.phaseChanged;\n    return dayMan;\n}\n\n","\nimport RG from './rg';\nimport {Entity} from './entity';\nimport {ChunkManager} from './chunk-manager';\nimport {EventPool} from './eventpool';\nimport {Engine} from './engine';\nimport {GameMaster} from './game.master';\nimport {GameObject} from './game-object';\nimport {FactoryWorld} from './factory.world';\nimport {Random} from './random';\nimport {Geometry} from './geometry';\nimport {WorldSimulation} from './world.simulation';\nimport * as Component from './component';\nimport * as World from './world';\nimport {Dice} from './dice';\n\ntype Level = import('./level').Level;\n\nconst POOL = EventPool.getPool();\n\nexport const Game: any = {};\n\nexport interface PlaceObj {\n    place: string;\n    x: number;\n    y: number;\n}\n\nexport interface IPlace {\n    getLevels(): Level[];\n    getName(): string;\n}\n\n/* Top-level main object for the game.  */\nexport const GameMain = function() {\n    this._players = []; // List of players\n    this._places = {}; // List of all places\n    this._shownLevel = null; // One per game only\n    this._gameOver = false;\n    this.actorsKilled = {};\n\n    this._enableChunkUnload = false;\n    this._chunkManager = null;\n    this._eventPool = POOL;\n    POOL.removeAll();\n    // this._eventPool = new EventPool();\n    // POOL = this._eventPool;\n\n    this.currPlaceIndex = 0; // Add support for more worlds\n\n    this._rng = new Random();\n    this._engine = new Engine(this._eventPool);\n    this._master = new GameMaster(this, this._eventPool);\n\n    this._worldSim = new WorldSimulation(this._eventPool);\n    this._engine.addRegularUpdate(this._worldSim);\n\n    this.globalConf = {};\n\n    // } end of constructor\n\n    this.setGlobalConf = (conf) => {this.globalConf = conf;};\n    this.getGlobalConf = () => this.globalConf;\n\n    this.shownLevel = () => this._shownLevel;\n    this.setShownLevel = (level) => {this._shownLevel = level;};\n\n    this.getPool = () => this._eventPool;\n\n    // GUI commands needed for some functions\n    this.setGUICallbacks = (isGUICmd, doGUICmd: (code) => void) => {\n        this._engine.isGUICommand = isGUICmd;\n        this._engine.doGUICommand = doGUICmd;\n        const player = this.getPlayer();\n        if (player) {\n            player.getBrain().addGUICallback('GOTO', doGUICmd);\n        }\n    };\n\n    this.setRNG = (rng) => {\n        this._rng = rng;\n        Random.setRNG(this._rng);\n    };\n\n    this.playerCommandCallback = (actor) => {\n        this.visibleCells = actor.getBrain().getSeenCells();\n        this._engine.setVisibleArea(this.shownLevel(), this.visibleCells);\n    };\n    this._engine.playerCommandCallback = this.playerCommandCallback.bind(this);\n\n    this.isGameOver = () => this._gameOver;\n    // Re-assign the default Engine '() => false' function\n    this._engine.isGameOver = this.isGameOver;\n\n    this.getLevels = (): Level[] => this._engine.getLevels();\n    this.getComponents = (): number[] => this._engine.getComponents();\n    this.getPlaces = () => this._places;\n\n    this.setEnableChunkUnload = (enable = true) => {\n        this._enableChunkUnload = enable;\n        if (enable && this.getArea(0)) {\n            const area = this.getArea(0);\n            this._chunkManager = new ChunkManager(this, area);\n        }\n    };\n\n    /* Returns player(s) of the game.*/\n    this.getPlayer = () => {\n        return this._engine.getPlayer();\n    };\n\n    /* Adds player to the game. By default, it's added to the first level if\n     * player has no level yet.*/\n    this.addPlayer = (player, obj?: PlaceObj) => {\n        let levelOK = false;\n        this._master.setPlayer(player);\n        if (!RG.isNullOrUndef([player.getLevel()])) {\n            levelOK = true;\n        }\n        else if (RG.isNullOrUndef([obj])) {\n            levelOK = _addPlayerToFirstLevel(player, this.getLevels());\n        }\n        else {\n            levelOK = _addPlayerToPlace(player, obj);\n        }\n\n        if (levelOK) {\n            this._engine.nextActor = player;\n            this._engine.setPlayer(player);\n\n            if (this._shownLevel === null) {\n                this._shownLevel = player.getLevel();\n            }\n            this._players.push(player);\n            this._engine.addActiveLevel(player.getLevel());\n            player.getLevel().onEnter();\n            player.getLevel().onFirstEnter();\n        }\n\n        // Used for debugging purposes only\n        if (levelOK && this._gameOver) {\n            this._gameOver = false;\n        }\n\n        return levelOK;\n    };\n\n    /* Debug function for taking over controls of given actor. */\n    this.useAsPlayer = (actorOrID) => {\n        let actor = actorOrID;\n        if (Number.isInteger(actorOrID)) {\n            actor = RG.ent(actorOrID);\n        }\n        if (!actor) {actor = RG.CLICKED_ACTOR;}\n        actor.setIsPlayer(true);\n        actor.add(new Component.Player());\n        this.addPlayer(actor);\n    };\n\n    /* Moves player to specified area tile. This is used for debugging purposes\n     * mainly. Maybe to be used with quick travel. */\n    this.movePlayer = (tileX, tileY, levelX = 0, levelY = 0) => {\n        const player = this.getPlayer();\n        const world: World.WorldTop = this.getCurrentWorld();\n        const area: World.Area = world.getAreas()[0];\n\n        let tile = null;\n        if (this._enableChunkUnload) {\n            if (this._chunkManager.isLoaded(tileX, tileY)) {\n                tile = area.getTileXY(tileX, tileY);\n            }\n            else {\n                this._chunkManager.setPlayerTile(tileX, tileY);\n                tile = area.getTileXY(tileX, tileY);\n            }\n        }\n        else {\n            tile = area.getTileXY(tileX, tileY);\n        }\n\n        const newLevel = tile.getLevel();\n        const currLevel = player.getLevel();\n\n        const [x0, y0] = [player.getX(), player.getY()];\n        if (currLevel.removeActor(player)) {\n            if (newLevel.addActor(player, levelX, levelY)) {\n                POOL.emitEvent(RG.EVT_LEVEL_CHANGED,\n                    {target: newLevel,\n                        src: currLevel, actor: player});\n                POOL.emitEvent(RG.EVT_LEVEL_ENTERED,\n                    {actor: player, target: newLevel});\n\n            }\n            else if (newLevel.addActorToFreeCell(player)) {\n                POOL.emitEvent(RG.EVT_LEVEL_CHANGED,\n                    {target: newLevel,\n                        src: currLevel, actor: player});\n                POOL.emitEvent(RG.EVT_LEVEL_ENTERED,\n                    {actor: player, target: newLevel});\n            }\n            else {\n                currLevel.addActor(player, x0, y0);\n            }\n        }\n        else {\n            console.error('Could not remove player from level');\n        }\n    };\n\n    const _addPlayerToFirstLevel = (player, levels) => {\n        let levelOK = false;\n        if (levels.length > 0) {\n            levelOK = levels[0].addActorToFreeCell(player);\n            if (!levelOK) {\n                RG.err('Game', 'addPlayer', 'Failed to add the player.');\n            }\n            else {\n                this.checkIfTileChanged({actor: player, src: null,\n                    target: levels[0]});\n            }\n        }\n        else {\n            RG.err('Game', 'addPlayer',\n                'No levels exist. Cannot add player.');\n        }\n        return levelOK;\n    };\n\n    /* Adds player to the first found level of given place.\n     * Name of place must be\n     * specified as obj.place */\n    const _addPlayerToPlace = (player, obj) => {\n        if (obj.hasOwnProperty('place')) {\n            const place = obj.place;\n            if (this._places.hasOwnProperty(place)) {\n                if (obj.hasOwnProperty('x') && obj.hasOwnProperty('y')) {\n                    const placeObj = this._places[place];\n                    const area = placeObj.getAreas()[0];\n                    const tile = area.getTileXY(obj.x, obj.y);\n                    const levels = [tile.getLevel()];\n                    return _addPlayerToFirstLevel(player, levels);\n                }\n                else {\n                    const levels = this._places[place].getLevels();\n                    return _addPlayerToFirstLevel(player, levels);\n                }\n            }\n            else {\n                RG.err('GameMain', '_addPlayerToPlace',\n                    'No place |' + place + '| found.');\n            }\n        }\n        else {\n            RG.err('GameMain', '_addPlayerToPlace', 'obj.place must exist.');\n        }\n        return false;\n    };\n\n\n    /* Checks if player moved to a tile (from tile or was added). */\n    this.checkIfTileChanged = (args) => {\n        const {actor, src, target} = args;\n\n        const areaLevels = [target];\n        if (!RG.isNullOrUndef([src])) {\n            areaLevels.push(src);\n        }\n\n        const area = this.getArea(0);\n        if (area && (areaLevels.length === 2) && area.hasTiles(areaLevels)) {\n            POOL.emitEvent(RG.EVT_TILE_CHANGED,\n                {actor, target, src});\n        }\n    };\n\n    this.isTileLevel = (level) => {\n        const area = this.getArea(0);\n        return area.hasTiles([level]);\n    };\n\n    /* Checks if player exited an explored zone. */\n    this.checkIfExploredZoneLeft = (args) => {\n        const {actor, src, target} = args;\n        let emitEvent = false;\n        if (actor.has('GameInfo') && src && target) {\n            const srcParent = src.getParent();\n            if (srcParent) {\n                // Check that player has explored the parent\n                if (srcParent.getID) {\n                    const id = srcParent.getID();\n                    if (actor.get('GameInfo').hasZone(id)) {\n                        emitEvent = this.isTileLevel(target);\n                    }\n                }\n                else {\n                    RG.warn('GameMain', 'checkIfExploredZoneLeft',\n                        'No getID: ' + JSON.stringify(srcParent));\n                }\n            }\n        }\n\n        if (emitEvent) {\n            POOL.emitEvent(RG.EVT_EXPLORED_ZONE_LEFT,\n                {actor, target, src});\n        }\n    };\n\n    this.getMessages = () => this._engine.getMessages();\n    this.clearMessages = () => { this._engine.clearMessages();};\n    this.hasNewMessages = () => this._engine.hasNewMessages();\n\n    /* Adds an actor to scheduler.*/\n    this.addActor = (actor) => {this._engine.addActor(actor);};\n\n    /* Removes an actor from a scheduler.*/\n    this.removeActor = (actor) => {this._engine.removeActor(actor);};\n\n    /* Adds an event to the scheduler.*/\n    this.addEvent = (gameEvent) => {this._engine.addEvent(gameEvent);};\n\n    this.addActiveLevel = (level) => {this._engine.addActiveLevel(level);};\n\n    /* Adds one level to the game.*/\n    this.addLevel = (level) => {\n        if (!this._engine.hasLevel(level)) {\n            this._engine.addLevel(level);\n        }\n        else {\n            this.errorDuplicateLevel('addLevel', level);\n        }\n    };\n\n    /* Adds given level to the game unless it already exists. */\n    this.addLevelUnlessExists = (level) => {\n        if (!this._engine.hasLevel(level)) {\n            this._engine.addLevel(level);\n        }\n    };\n\n    this.removeLevels = (levels) => {\n        this._engine.removeLevels(levels);\n    };\n\n    /* Adds a place (dungeon/area) containing several levels.*/\n    this.addPlace = (place: IPlace): void => {\n        if (typeof place.getLevels === 'function') {\n            const name = place.getName();\n            if (!this._places.hasOwnProperty(name) ) {\n                const levels = place.getLevels();\n                if (levels.length > 0) {\n                    // for (let i = 0; i < levels.length; i++) {\n                    for (const level of levels) {\n                        this.addLevel(level);\n                    }\n                }\n                else {\n                    RG.err('GameMain', 'addPlace',\n                        `Place ${name} has no levels!`);\n                }\n                this._places[name] = place;\n\n                if (this.getArea(0)) {\n                    const area = this.getCurrentWorld().getCurrentArea();\n                    if (this._enableChunkUnload && !this._chunkManager) {\n                        this._chunkManager = new ChunkManager(this, area);\n                    }\n                }\n            }\n            else {\n                RG.err('GameMain', 'addPlace',\n                    'A place |' + name + '| exists.');\n            }\n        }\n        else {\n            RG.err('GameMain', 'addPlace',\n                'Added place must have getLevels()');\n        }\n    };\n\n    this.hasPlaces = () => Object.keys(this._places).length > 0;\n\n    /* Returns the visible map to be rendered by the GUI. */\n    this.getVisibleMap = () => {\n        const player = this.getPlayer();\n        const map = player.getLevel().getMap();\n        return map;\n    };\n\n    this.simulate = (nTurns = 1) => {\n        this._engine.simulateGame(nTurns);\n    };\n\n    this.simulateGame = (nTurns = 1) => {\n        this._engine.simulateGame(nTurns);\n    };\n\n    /* Must be called to advance the game by one player action. Non-player\n     * actions are executed after the player action.*/\n    this.update = (obj) => {this._engine.update(obj);};\n\n    this.getArea = (index: number) => {\n        const world = this.getCurrentWorld();\n        if (world && typeof world.getAreas === 'function') {\n            return world.getAreas()[index];\n        }\n        return null;\n    };\n\n    /* Used by the event pool. Game receives notifications about different\n     * game events from child components. */\n    this.hasNotify = true;\n    this.notify = (evtName, args) => {\n        if (evtName === RG.EVT_ACTOR_KILLED) {\n            this.actorsKilled[args.actor.getID()] = true;\n            if (args.actor.isPlayer()) {\n                const {actor} = args;\n                const index = this._players.indexOf(actor);\n                if (index >= 0) {\n                    if (this._players.length === 1) {\n                        this._gameOver = true;\n                        console.log('PLAYER DIED!!');\n                        RG.gameMsg('GAME OVER!');\n                    }\n                    this._players.splice(index, 1);\n                }\n            }\n        }\n        else if (evtName === RG.EVT_LEVEL_CHANGED) {\n            const {actor} = args;\n            if (actor.isPlayer()) {\n                this._shownLevel = actor.getLevel();\n\n                this._worldSim.setLevel(this._shownLevel);\n                if (this._overworld) {\n                    this._worldSim.setOwPos(this.getPlayerOwPos());\n                }\n\n                this.checkIfTileChanged(args);\n                this.checkIfExploredZoneLeft(args);\n            }\n        }\n        else if (evtName === RG.EVT_TILE_CHANGED) {\n            const {actor, target} = args;\n            if (actor.isPlayer()) {\n                const levelID = target.getID();\n\n                const world = this.getCurrentWorld();\n                if (world && world.getAreas) {\n                    const area = world.getAreas()[0];\n                    const [x, y] = area.findTileXYById(levelID);\n                    const fact = new FactoryWorld();\n                    fact.setGlobalConf(this.getGlobalConf());\n\n                    let oldX = null;\n                    let oldY = null;\n                    if (args.src) {\n                        const xy = area.findTileXYById(args.src.getID());\n                        if (xy) {\n                            [oldX, oldY] = xy;\n                        }\n                    }\n                    if (this._enableChunkUnload) {\n                        this._chunkManager.setPlayerTile(x, y, oldX, oldY);\n                    }\n\n                    fact.createZonesForTile(world, area, x, y);\n                    const levels = world.getLevels();\n                    levels.forEach((l) => {this.addLevelUnlessExists(l);});\n                }\n            }\n        }\n    };\n    this._eventPool.listenEvent(RG.EVT_ACTOR_KILLED, this);\n    this._eventPool.listenEvent(RG.EVT_LEVEL_CHANGED, this);\n    this._eventPool.listenEvent(RG.EVT_TILE_CHANGED, this);\n\n    /* Adds one battle to the game. If active = true, battle level is activated\n     * and battle started immediately. */\n    this.addBattle = (battle, id = -1, active = false): void => {\n        const level = battle.getLevel();\n        this.addLevel(level);\n        if (active) {\n            this._engine.addActiveLevel(level);\n        }\n        if (this.hasPlaces() && id > -1) {\n            this._addBattleZoneToArea(battle, id);\n        }\n    };\n\n    /* Creates a new zone and adds it into area. */\n    this._addBattleZoneToArea = (battle, parentID) => {\n        const level = battle.getLevel();\n        const zoneName = 'Zone of ' + battle.getName();\n        const battleZone = new World.BattleZone(zoneName);\n        battleZone.addLevel(level);\n\n        const world = this.getCurrentWorld();\n        const area = world.getAreas()[0];\n        const xy = area.findTileXYById(parentID);\n        if (xy) {\n            battleZone.setTileXY(xy[0], xy[1]);\n            area.addZone('BattleZone', battleZone);\n        }\n        else {\n            RG.err('GameMain', '_addBattleZoneToArea',\n            `ID ${parentID} not found in area.`);\n        }\n    };\n\n    this.getChunkManager = () => this._chunkManager;\n\n    this.getGameMaster = () => this._master;\n    this.setGameMaster = (master) => {\n        this._master = master;\n        this._master.setPlayer(this.getPlayer());\n        const world = Object.values(this._places)[0];\n        this._master.setWorld(world);\n        this._master.setGame(this);\n    };\n\n    this.getOverWorld = () => this._overworld;\n    this.setOverWorld = (ow) => {\n      this._overworld = ow;\n      this._worldSim.setOverWorld(ow);\n    };\n\n    this.setWorldSim = (ws: WorldSimulation) => {\n        ws.setPool(this._eventPool);\n        this._worldSim = ws;\n    };\n\n    /* Serializes the game object into JSON. */\n    this.toJSON = () => {\n        const obj: any = { // TODO fix typings\n            engine: {},\n            gameMaster: this._master.toJSON(),\n            gameObjectID: GameObject.ID,\n            lastComponentID: Component.getIDCount(),\n            globalConf: this.globalConf,\n            rng: this._rng.toJSON(),\n            diceRng: Dice.RNG.toJSON(),\n            charStyles: RG.charStyles,\n            cellStyles: RG.cellStyles,\n            actorsKilled: this.actorsKilled,\n            enableChunkUnload: this._enableChunkUnload\n        };\n\n        if (!this.hasPlaces()) {\n            // Serialize levels directly if there's no world hierarchy\n            const levels = [];\n            const _levels = this._engine.getLevels();\n            _levels.forEach((level) => {\n                levels.push(level.toJSON());\n            });\n            obj.levels = levels;\n            obj.places = {};\n        }\n        else {\n            const places = { };\n            Object.keys(this._places).forEach((name) => {\n                const place = this._places[name];\n                places[name] = place.toJSON();\n            });\n            obj.places = places;\n        }\n\n        const player = this.getPlayer();\n        if (player) {\n            obj.player = player.toJSON();\n        }\n        if (this._overworld) {\n            obj.overworld = this._overworld.toJSON();\n        }\n        if (this._chunkManager) {\n            obj.chunkManager = this._chunkManager.toJSON();\n        }\n        if (this._worldSim) {\n            obj.worldSim = this._worldSim.toJSON();\n        }\n\n        return obj;\n    };\n\n    /* Returns true if the menu is shown instead of the level. */\n    this.isMenuShown = () => {\n        const player = this.getPlayer();\n        if (player) {\n            return player.getBrain().isMenuShown();\n        }\n        return false;\n    };\n\n    /* Returns the current menu object. */\n    this.getMenu = () => {\n        const player = this.getPlayer();\n        if (player) {\n            return player.getBrain().getMenu();\n        }\n        return null;\n    };\n\n    /* Sets the function to be called for animations. */\n    this.setAnimationCallback = (cb) => {\n        if (typeof cb === 'function') {\n            this._engine.animationCallback = cb;\n        }\n        else {\n            RG.warn('GameMain', 'setAnimationCallback',\n                'Callback must be a function.');\n        }\n    };\n\n    /* Returns true if engine has animation to play. */\n    this.hasAnimation = () => this._engine.hasAnimation();\n    this.finishAnimation = () => this._engine.finishAnimation();\n\n    /* Gets the next animation frame. */\n    this.getAnimationFrame = () => this._engine.animation.nextFrame();\n\n    this.enableAnimations = () => {this._engine.enableAnimations();};\n    this.disableAnimations = () => {this._engine.disableAnimations();};\n\n    /* Returns the player tile position in overworld map. */\n    this.getPlayerOwPos = () => {\n        const player = this.getPlayer();\n        if (!this._overworld || !player) {\n            return [];\n        }\n\n        const overworld = this._overworld;\n        const world = this.getCurrentWorld();\n        const area = world.getAreas()[0];\n        let xy = area.findTileXYById(player.getLevel().getID());\n\n        if (!xy) {\n          xy = this.tryToGetTileXY();\n          if (!xy) {return null;}\n        }\n\n        const {xMap, yMap} = overworld.coordMap;\n\n        const coordX = xy[0] * 100 + player.getX();\n        const coordY = xy[1] * 100 + player.getY();\n\n        const pX = Math.floor(coordX / xMap);\n        const pY = Math.floor(coordY / yMap);\n        return [pX, pY];\n    };\n\n    /* When player is inside a zone, tries to find the area tile location by\n     * traversing the world hierarchy. */\n    this.tryToGetTileXY = () => {\n      const level = this.getPlayer().getLevel();\n      let parent = level.getParent();\n      while (parent) {\n        if (parent.getParent) {\n          parent = parent.getParent();\n        }\n        else {\n          parent = null;\n        }\n\n        if (parent && parent.getTileXY) {\n          return parent.getTileXY();\n        }\n      }\n      return null;\n    };\n\n    this.setOverWorldExplored = (xy) => {\n        const box = Geometry.getBoxAround(xy[0], xy[1], 1, true);\n        box.forEach((coord) => {\n            this._overworld.setExplored(coord);\n        });\n    };\n\n    /* Returns the current world where the player is .*/\n    this.getCurrentWorld = () => {\n        const places = Object.values(this.getPlaces());\n        if (places.length > this.currPlaceIndex) {\n            return places[this.currPlaceIndex];\n        }\n        return null;\n    };\n\n    /* Generic find function for debugging. */\n    this.find = (filter, levelId = -1, filterFunc = 'find') => {\n        const levels = this._engine.getLevels();\n        if (levelId === -1) {\n            const level = this.getPlayer().getLevel();\n            return level.getActors()[filterFunc](filter);\n        }\n        else if (Number.isInteger(levelId)) {\n            const level = levels.find((l) => l.getID() === levelId);\n            if (level) {\n                return level.getActors()[filterFunc](filter);\n            }\n        }\n        else { // Search all levels (slow)\n            // for (let i = 0; i < levels.length; i++) {\n            for (const level of levels) {\n                const found = level.getActors()[filterFunc](filter);\n                if (found) {return found;}\n            }\n        }\n        return null;\n    };\n\n    this.errorDuplicateLevel = (funcName, level) => {\n        const parent = level.getParent();\n        const json = level.toJSON();\n        delete json.elements;\n        delete json.map.cells;\n        let msg = '';\n        if (parent) {\n            const name = RG.formatLocationName(level);\n            msg = `Parent: ${name}| `;\n        }\n        msg += 'Duplicate level ID ' + level.getID();\n        msg += ' JSON: ' + JSON.stringify(json, null, 1);\n\n        RG.err('GameMain', funcName, msg);\n    };\n\n    this.entityPrint = () => {\n        RG.diag(Entity.num);\n    };\n\n}; // }}} GameMain\n","\nimport RG from './rg';\nimport {FromJSON} from './game.fromjson';\nimport {ElementStairs} from './element';\nimport {TCoord} from './interfaces';\nimport {Level} from './level';\nimport * as World from './world';\n\ntype Stairs = ElementStairs;\ntype AreaTileObj = World.AreaTileObj;\ntype IAreaTileJSON = World.IAreaTileJSON;\n\nimport dbg = require('debug');\nconst debug = dbg('bitn:ChunkManager');\n\nconst LOAD = Object.freeze(\n    {EMPTY: 'EMPTY', LOADED: 'LOADED', JSON: 'JSON', ON_DISK: 'ON_DISK',\n        LOADED2JSON: 'LOADED2JSON'});\nconst CREATE = Object.freeze(\n    {EMPTY: 'EMPTY', CREATED: 'CREATED', POPULATED: 'POPULATED'});\n\nfunction printTileConnections(msg, tileToConnect, id = -1) {\n    RG.diag(msg);\n    if (typeof tileToConnect.getLevel === 'function') {\n        if (tileToConnect.getLevel().getID() === id || id === -1) {\n            const conns0 = tileToConnect.getLevel().getConnections();\n            conns0.forEach(c => {\n                const targetLevel = c.getTargetLevel();\n                if (Number.isInteger(targetLevel)) {\n                    console.log(`\\tTarget ID ${targetLevel} found`);\n                }\n                else {\n                    console.log(`\\tLevel ${targetLevel.getID()} found`);\n                }\n            });\n        }\n    }\n    else {\n        console.log('Skipping printTileConnections due to json input');\n    }\n}\n\ninterface ChunkState {\n    loadState: string;\n}\n\n/* Chunk manager handles loading/saving of world chunks (World.AreaTiles)\n * from/to memory/disk. It also keeps track of the state of each chunk.\n * */\nexport class ChunkManager {\n    public sizeX: number;\n    public sizeY: number;\n    public loadDistX: number;\n    public loadDistY: number;\n    public onDiskDistX: number;\n    public onDiskDistY: number;\n    public area: World.Area;\n    public game: any;\n    public state: ChunkState[][];\n\n    constructor(game, area) {\n        const [sizeX, sizeY] = [area.getSizeX(), area.getSizeY()];\n        this.sizeX = sizeX;\n        this.sizeY = sizeY;\n        this.area = area;\n        this.game = game;\n        this.state = [];\n\n        for (let x = 0; x < sizeX; x++) {\n            this.state[x] = [];\n            for (let y = 0; y < sizeY; y++) {\n                if (area.isLoaded(x, y)) {\n                    const chunkState = {loadState: LOAD.LOADED};\n                    this.state[x].push(chunkState);\n                }\n                else {\n                    const chunkState = {loadState: LOAD.JSON};\n                    this.state[x].push(chunkState);\n                }\n            }\n        }\n\n        // From how far the levels are loaded\n        this.loadDistX = 1;\n        this.loadDistY = 1;\n\n        this.onDiskDistX = sizeX;\n        this.onDiskDistY = sizeY;\n    }\n\n    /* Must be called when player enters a new tile. Loads/unloads the tiles\n     * based on old & new tile coordinates. */\n    public setPlayerTile(px, py, oldX, oldY): void {\n        const moveDir: string = this.getMoveDir(px, py, oldX, oldY);\n        if (debug.enabled) {\n            debug(`## setPlayerTile START ${oldX},${oldY}->${px},${py}`);\n            this.debugPrint();\n        }\n\n        // Will contain only coordinates of serialized tiles to load\n        const loadedTiles: TCoord[] = [];\n        for (let x = 0; x < this.sizeX; x++) {\n            for (let y = 0; y < this.sizeY; y++) {\n                if (this.inLoadRange(px, py, x, y)) {\n                    if (!this.isLoaded(x, y)) {\n                        loadedTiles.push([x, y]);\n                    }\n                }\n                else if (this.isLoaded(x, y)) {\n                    this.unloadTile(px, py, x, y, moveDir);\n                }\n            }\n        }\n        if (loadedTiles.length > 0) {\n            this.loadTiles(px, py, loadedTiles, moveDir);\n        }\n\n        if (debug.enabled) {\n            debug(`## setPlayerTile END ${oldX},${oldY}->${px},${py}`);\n            this.debugPrint();\n        }\n    }\n\n    public isLoaded(x, y): boolean {\n        return this.state[x][y].loadState === LOAD.LOADED;\n    }\n\n    /* Returns true if given tile (tx,ty) is within load range from\n     * player px,py .*/\n    public inLoadRange(px, py, tx, ty): boolean {\n        for (let x = px - this.loadDistX; x <= px + this.loadDistX; x++) {\n            for (let y = py - this.loadDistY; y <= py + this.loadDistY; y++) {\n                if (tx === x && ty === y) {return true;}\n            }\n        }\n        return false;\n    }\n\n    public loadAllTiles(): void {\n        this.setLoadStateAll(LOAD.LOADED);\n    }\n\n    /* Returns number of tiles in given load state. */\n    public getNumInState(loadState): number {\n        let num = 0;\n        for (let x = 0; x < this.sizeX; x++) {\n            for (let y = 0; y < this.sizeY; y++) {\n                if (this.state[x][y].loadState === loadState) {\n                    ++num;\n                }\n            }\n        }\n        return num;\n    }\n\n    /* Loads the serialized/on-disk tile. */\n    public loadTiles(px, py, loadedTilesXY: TCoord[], moveDir: string): void {\n        const areaTiles: AreaTileObj[][] = this.area.getTiles();\n        debug('loadTiles: ' + JSON.stringify(loadedTilesXY));\n        const areaTileToLoadNow: IAreaTileJSON[] = loadedTilesXY.map(\n            xy => (areaTiles[xy[0]][xy[1]] as IAreaTileJSON)\n        );\n\n        this.createTiles(areaTileToLoadNow);\n\n        loadedTilesXY.forEach(xy => {\n            debug(`ChunkManager load now tile ${xy}`);\n            const [tx, ty] = xy;\n            this.state[tx][ty].loadState = LOAD.LOADED;\n            this.area.setLoaded(tx, ty);\n\n            if (moveDir === '') {\n                debug(`Rm adjacent conns to ${tx},${ty}`);\n                this.removeAdjacentConnections(areaTiles, px, py, tx, ty);\n            }\n\n            // This is correct TODO remove\n            if (xy[0] === 0 && xy[1] === 2) {\n                const tiles = this.area.getTiles();\n            }\n        });\n\n    }\n\n    // The only case where this is used is when player enters the game, or\n    // moves via debugging functions such as Game.movePlayer()\n    public removeAdjacentConnections(areaTiles, px, py, tx, ty) {\n        // 1. If cell to north not in range, unload north conns\n        if (!this.inLoadRange(px, py, tx, ty - 1)) {\n            if ((ty - 1) >= 0) {\n                debug(`Rm NORTH conns from ${tx},${ty}`);\n                this.removeConnections('NORTH', areaTiles[tx][ty]);\n            }\n        }\n\n        // 2. If cell to south not in range, unload south conns\n        if (!this.inLoadRange(px, py, tx, ty + 1)) {\n            if ((ty + 1) < this.area.getSizeY()) {\n                debug(`Rm SOUTH conns from ${tx},${ty}`);\n                this.removeConnections('SOUTH', areaTiles[tx][ty]);\n            }\n        }\n\n        // 3. If cell to east not in range, unload east conns\n        if (!this.inLoadRange(px, py, tx + 1, ty)) {\n            if ((tx + 1) < this.area.getSizeX()) {\n                debug(`Rm EAST conns from ${tx},${ty}`);\n                this.removeConnections('EAST', areaTiles[tx][ty]);\n            }\n        }\n\n        // 4. If cell to west not in range, unload west conns\n        if (!this.inLoadRange(px, py, tx - 1, ty)) {\n            if ((tx - 1) >= 0) {\n                debug(`Rm WEST conns from ${tx},${ty}`);\n                this.removeConnections('WEST', areaTiles[tx][ty]);\n            }\n        }\n    }\n\n    /* Unloads the tile from memory. */\n    public unloadTile(px, py, tx, ty, moveDir): void {\n        debug(`Unloading tile ${tx},${ty}`);\n        const areaTiles = this.area.getTiles();\n        this.state[tx][ty].loadState = LOAD.LOADED2JSON;\n        this.area.setUnloaded(tx, ty);\n\n        const levels = areaTiles[tx][ty].getLevels();\n        this.game.removeLevels(levels);\n\n        // Unload battles associated with this tile\n        const battleLevel = areaTiles[tx][ty].getLevel();\n        debug(`\\tUnloading battles @ ${tx},${ty}, id: ${battleLevel.getID()}`);\n        const gameMaster = this.game.getGameMaster();\n        gameMaster.unloadBattles(battleLevel);\n\n        if (debug.enabled) {\n            const lStr = areaTiles[tx][ty].getLevels().map(l => l.getID());\n            debug(`\\t-- Unloading levels ${lStr}`);\n        }\n\n        areaTiles[tx][ty].removeListeners();\n        areaTiles[tx][ty] = areaTiles[tx][ty].toJSON();\n\n        // Need to replace connections on adjacent tiles\n        if (moveDir === 'WEST') {\n            const newX = tx - 1;\n            debug(`Removing connections from tile ${tx - 1},${ty}`);\n            if (newX < this.area.getSizeX()) {\n                this.removeConnections('EAST', areaTiles[tx - 1][ty]);\n            }\n        }\n        else if (moveDir === 'EAST') {\n            const newX = tx + 1;\n            debug(`Removing connections from tile ${tx + 1},${ty}`);\n            if (newX < this.area.getSizeX()) {\n                this.removeConnections('WEST', areaTiles[tx + 1][ty]);\n            }\n        }\n        else if (moveDir === 'NORTH') {\n            const newY = ty - 1;\n            debug(`Removing connections from tile ${tx},${ty - 1}`);\n            if (newY >= 0) {\n                this.removeConnections('SOUTH', areaTiles[tx][ty - 1]);\n            }\n        }\n        else if (moveDir === 'SOUTH') {\n            const newY = ty + 1;\n            debug(`Removing connections from tile ${tx},${ty + 1}`);\n            if (newY < this.area.getSizeY()) {\n                this.removeConnections('NORTH', areaTiles[tx][ty + 1]);\n            }\n        }\n        else { // Usually starting position, player just appears\n\n            // 1. If cell to north is loaded, rm its south conns\n            if (this.inLoadRange(px, py, tx, ty - 1)) {\n                if ((ty - 1) >= 0) {\n                    if (this.isLoaded(tx, ty - 1)) {\n                        debug(`Rm SOUTH conns from ${tx},${ty - 1}`);\n                        this.removeConnections('SOUTH', areaTiles[tx][ty - 1]);\n                    }\n                }\n            }\n\n            // 2. If cell to south is loaded, rm its north conns\n            if (this.inLoadRange(px, py, tx, ty + 1)) {\n                if ((ty + 1) < this.area.getSizeY()) {\n                    if (this.isLoaded(tx, ty + 1)) {\n                        debug(`Rm NORTH conns from ${tx},${ty + 1}`);\n                        this.removeConnections('NORTH', areaTiles[tx][ty + 1]);\n                    }\n                }\n            }\n\n            // 3. If cell to east is loaded, rm its west conns\n            if (this.inLoadRange(px, py, tx + 1, ty)) {\n                if ((tx + 1) < this.area.getSizeX()) {\n                    if (this.isLoaded(tx + 1, ty)) {\n                        debug(`Rm WEST conns from ${tx + 1},${ty}`);\n                        this.removeConnections('WEST', areaTiles[tx + 1][ty]);\n                    }\n                }\n            }\n\n            // 4. If cell to west is loaded, rm its east conns\n            if (this.inLoadRange(px, py, tx - 1, ty)) {\n                if ((tx - 1) >= 0) {\n                    if (this.isLoaded(tx - 1, ty)) {\n                        debug(`Rm EAST conns from ${tx - 1},${ty}`);\n                        this.removeConnections('EAST', areaTiles[tx - 1][ty]);\n                    }\n                }\n            }\n\n        }\n        this.state[tx][ty].loadState = LOAD.JSON;\n    }\n\n    public getLoadState(x, y): string {\n        return this.state[x][y].loadState;\n    }\n\n    public toJSON() {\n        return {\n            state: this.state\n        };\n    }\n\n    public setLoadStateAll(state) {\n        this.state.forEach((col, x) => {\n            col.forEach((tile, y) => {\n                this.state[x][y].loadState = state;\n            });\n        });\n    }\n\n    public createTiles(tilesJSON: IAreaTileJSON[]): void {\n        const nTiles = tilesJSON.length;\n        debug(`Creating ${nTiles} AreaTiles with FromJSON`);\n        const fromJSON = new FromJSON();\n        fromJSON.setChunkMode(true);\n        fromJSON.createTiles(this.game, tilesJSON);\n    }\n\n    public addConnections(dir, tileToConnect, newTile): void {\n        const oppositeDir = this.getOpposite(dir);\n        const addedConns: Stairs[] = this.getReplacedConnections(dir, tileToConnect);\n        const newConns: Stairs[] = this.getReplacedConnections(oppositeDir, newTile);\n        const fromJSON = new FromJSON();\n        const conns: Stairs[] = addedConns.concat(newConns);\n        const levels = [tileToConnect.getLevel(), newTile.getLevel()];\n        fromJSON.connectTileLevels(levels, conns);\n    }\n\n    public removeConnections(dir, tile): void {\n        const replacedConns: Stairs[] = this.getReplacedConnections(dir, tile);\n        replacedConns.forEach(conn => {\n            const targetConn = conn.getTargetStairs() as Stairs;\n            const targetLevel = conn.getTargetLevel();\n\n            if (targetLevel instanceof Level) {\n                const connObj = {\n                    targetLevel: targetLevel.getID(),\n                    targetStairs: {\n                      x: targetConn.getX(),\n                      y: targetConn.getY()\n                    }\n                };\n                conn.setConnObj(connObj);\n            }\n        });\n    }\n\n    public getReplacedConnections(dir, tile): Stairs[] {\n        const level = tile.getLevel();\n        const conns = level.getConnections();\n        if (conns.length === 0) {\n            RG.err('ChunkManager', 'getReplacedConnections',\n                'No connections found.');\n        }\n        let replacedConns = [];\n        if (dir === 'SOUTH') {\n            replacedConns = conns.filter(conn => conn.getY() === tile.rows - 1);\n        }\n        else if (dir === 'NORTH') {\n            replacedConns = conns.filter(conn => conn.getY() === 0);\n        }\n        else if (dir === 'EAST') {\n            replacedConns = conns.filter(conn => conn.getX() === tile.cols - 1);\n        }\n        else if (dir === 'WEST') {\n            replacedConns = conns.filter(conn => conn.getX() === 0);\n        }\n        return replacedConns;\n    }\n\n    public getOpposite(dir) {\n        switch (dir) {\n            case 'NORTH': return 'SOUTH';\n            case 'SOUTH': return 'NORTH';\n            case 'EAST': return 'WEST';\n            case 'WEST': return 'EAST';\n            default: RG.err('ChunkManager', 'getOpposite',\n                `Illegal dir ${dir} given.`);\n        }\n        return '';\n    }\n\n    /* Returns the player movement direction. */\n    public getMoveDir(px, py, oldX, oldY): string {\n        let [dx, dy] = [0, 0];\n        let moveDir = '';\n        if (!RG.isNullOrUndef([oldX, oldY])) {\n            dx = px - oldX;\n            dy = py - oldY;\n            if (dx !== 0 && dy !== 0) {\n                const msg = `MOVE: ${oldX},${oldY} -> ${px},${py}`;\n                RG.err('ChunkManager', 'getMoveDir',\n                    `Diagonal move not supported: ${msg}`);\n            }\n            if (dx > 0) {moveDir = 'EAST';}\n            else if (dx < 0) {moveDir = 'WEST';}\n            if (dy > 0) {moveDir = 'SOUTH';}\n            else if (dy < 0) {moveDir = 'NORTH';}\n        }\n        return moveDir;\n    }\n\n    /* Prints the state in concise format. */\n    public debugPrint(): void {\n        let result = '';\n        for (let y = 0; y < this.sizeY; y++) {\n            for (let x = 0; x < this.sizeX; x++) {\n                result += ' ' + this.stateToChar(this.state[x][y]);\n            }\n            result += ` - ${y} \\n`;\n        }\n        result += '\\n\\tNum loaded: ' + this.getNumInState(LOAD.LOADED);\n        result += '\\n\\tNum serialized: ' + this.getNumInState(LOAD.JSON);\n        result += '\\n\\tNum on disk: ' + this.getNumInState(LOAD.ON_DISK);\n        result += '\\n';\n\n        for (let y = 0; y < this.area.getSizeY(); y++) {\n            for (let x = 0; x < this.area.getSizeX(); x++) {\n                const isCreated = this.area.zonesCreated[x + ',' + y];\n                const val = isCreated ? ' X ' : ' - ';\n                result += `${x},${y}: ` + val + '|';\n            }\n            result += '\\n';\n        }\n        RG.diag(result);\n    }\n\n    /* Converts current state into a single char. */\n    public stateToChar(state: ChunkState): string {\n        switch (state.loadState) {\n            case LOAD.LOADED: return 'L';\n            case LOAD.JSON: return 'J';\n            case LOAD.ON_DISK: return 'D';\n            case LOAD.EMPTY: return 'E';\n            case LOAD.LOADED2JSON: return '*';\n            default: return '';\n        }\n    }\n}\n\nexport const Chunk: any = {};\nChunk.printTileConnections = printTileConnections;\nChunk.LOAD = LOAD;\nChunk.CREATE = CREATE;\nChunk.ChunkManager = ChunkManager;\n","\nimport RG from './rg';\nimport * as Time from './time';\nimport {SystemManager} from './system/system.manager';\nimport * as System from './system';\nimport {EventPool} from './eventpool';\nimport {Animation} from './animation';\nimport {Level} from './level';\nimport {Cell} from './map.cell';\nimport {BaseActor, SentientActor} from './actor';\nimport {MessageHandler} from './message-handler';\nimport {IMessage} from './interfaces';\n\ntype BrainPlayer = import('./brain/brain.player').BrainPlayer;\ntype Entity = import('./entity').Entity;\n\nexport interface Action {\n    doAction: () => void;\n}\n\nexport interface Actor {\n    nextAction: (any?) => Action;\n    isPlayer: () => boolean;\n}\n\ninterface EngineCache {\n    visibleCoord: {[key: string]: boolean};\n    visibleValid: boolean;\n}\n\nexport interface UpdateObj {\n    update(): void;\n}\n\ntype SystemAnimation = System.SystemAnimation;\n\n/* Game engine which handles turn scheduling, systems updates and in-game\n * messaging between objects. */\nexport class Engine {\n    public isGUICommand: (code: number) => boolean;\n    public doGUICommand: (code: number) => void;\n\n    public nextActor: Actor; // TODO add typings\n    public animation: Animation;\n    public animationCallback: (anim: Animation) => void;\n\n    public _levelMap: {[key: number]: Level};\n    public _activeLevels: number[]; // Only these levels are simulated\n    public _scheduler: any; // TODO = new Time.Scheduler();\n    public _msg: MessageHandler;\n    public _eventPool: EventPool;\n\n    public visibleCells: Cell[];\n\n    public _cache: EngineCache;\n    public sysMan: SystemManager;\n\n    public hasNotify: boolean;\n\n    public visibleLevelID: number;\n    public currPlayer: SentientActor;\n    public playerCommandCallback: (player: SentientActor) => void;\n\n    constructor(eventPool: EventPool) {\n\n        // Ignore GUI commands by default\n        this.isGUICommand = () => false;\n        this.doGUICommand = null;\n\n        this.nextActor = null;\n        this.animation = null;\n        this.animationCallback = null;\n\n        this._levelMap = {}; // All levels, ID -> level\n        this._activeLevels = []; // Only these levels are simulated\n        this._scheduler = new Time.Scheduler();\n        this._msg = new MessageHandler(eventPool);\n        this._eventPool = eventPool;\n\n        this.visibleCells = [];\n\n        this._cache = {\n            visibleCoord: {},\n            visibleValid: false\n        };\n\n        this.sysMan = new SystemManager(this, eventPool);\n\n        this.hasNotify = true;\n        this._eventPool.listenEvent(RG.EVT_DESTROY_ITEM, this);\n        this._eventPool.listenEvent(RG.EVT_ACT_COMP_ADDED, this);\n        this._eventPool.listenEvent(RG.EVT_ACT_COMP_REMOVED, this);\n        this._eventPool.listenEvent(RG.EVT_ACT_COMP_ENABLED, this);\n        this._eventPool.listenEvent(RG.EVT_ACT_COMP_DISABLED, this);\n        this._eventPool.listenEvent(RG.EVT_LEVEL_PROP_ADDED, this);\n        this._eventPool.listenEvent(RG.EVT_LEVEL_CHANGED, this);\n        this._eventPool.listenEvent(RG.EVT_ANIMATION, this);\n    }\n\n    public getMessages(): IMessage[] {\n        return this._msg.getMessages();\n    }\n\n    public hasNewMessages(): boolean {\n        return this._msg.hasNew();\n    }\n\n    public clearMessages(): void {this._msg.clear();}\n\n    /* Returns true if the menu is shown instead of the level. */\n    public isMenuShown(): boolean {\n        if (this.nextActor.isPlayer()) {\n            const actor = this.nextActor as SentientActor;\n            const brain = actor.getBrain() as BrainPlayer;\n            return brain.isMenuShown();\n        }\n        return false;\n    }\n\n\n    public getPlayer(): SentientActor {\n        return this.currPlayer;\n    }\n\n    public setPlayer(player: SentientActor): void {\n        this.currPlayer = player;\n    }\n\n    //--------------------------------------------------------------\n    // MANAGING ACTIVE LEVELS\n    //--------------------------------------------------------------\n\n    public numActiveLevels(): number {\n        return this._activeLevels.length;\n    }\n\n    public hasLevel(level: Level): boolean {\n        return this._levelMap.hasOwnProperty(level.getID());\n    }\n\n    /* Returns active levels within the engine. */\n    public getLevels(): Level[] {\n        return Object.values(this._levelMap);\n    }\n\n    // Not a useless function, re-assigned in Game.Main, but needed\n    // here for testing Engine without Game.Main\n    public isGameOver(): boolean {\n        return false;\n    }\n\n    public isActiveLevel(level): boolean {\n        const index = this._activeLevels.indexOf(level.getID());\n        return index >= 0;\n    }\n\n    //--------------------------------------------------------------\n    // EVENT LISTENING\n    //--------------------------------------------------------------\n\n\n    public hasAnimation(): boolean {\n        return this.animation !== null &&\n            this.animation.hasFrames();\n    }\n\n    public finishAnimation(): void {\n        this.animation = null;\n    }\n\n    public setVisibleArea(level: Level, cells: Cell[]): void {\n        this.visibleLevelID = level.getID();\n        this.visibleCells = cells;\n        this._cache.visibleCoord = {};\n        this._cache.visibleValid = false;\n    }\n\n    /* Returns true if player can see the given animation. In general, true\n     * whenever animation contains at least one cell visible to the player. */\n    public canPlayerSeeAnimation(animation): boolean {\n        if (animation.levelID === this.visibleLevelID) {\n\n            // Build the cache if not valid\n            if (!this._cache.visibleValid) {\n                this.visibleCells.forEach((cell: Cell) => {\n                    this._cache.visibleCoord[cell.getKeyXY()] = true;\n                });\n                this._cache.visibleValid = true;\n            }\n\n            // Check overlap between cached coord and coord in animation\n            return animation.hasCoord(this._cache.visibleCoord);\n        }\n        return false;\n    }\n\n    public enableAnimations(): void {\n        const sysAnim = this.sysMan.get('Animation') as SystemAnimation;\n        sysAnim.enableAnimations();\n    }\n\n    public disableAnimations(): void {\n        const sysAnim = this.sysMan.get('Animation') as SystemAnimation;\n        sysAnim.disableAnimations();\n    }\n\n    /* Adds a TimeSystem into the engine. Each system can be updated with given\n     * intervals instead of every turn or loop.*/\n    public addTimeSystem(name, obj): void {\n        // Must schedule the system to activate it\n        const updateEvent = new Time.GameEvent(100,\n            obj.update.bind(obj), true, 0);\n        this.addEvent(updateEvent);\n    }\n\n    /* Can schedule any object to be updated on certain periodic interval. */\n    public addRegularUpdate(obj: UpdateObj, interval = 100): void {\n        // Must schedule the system to activate it\n        const updateEvent = new Time.GameEvent(interval,\n            obj.update.bind(obj), true, 0);\n        this.addEvent(updateEvent);\n    }\n\n    /* Returns all component IDs (within entities) inside the engine. */\n    public getComponents(): number[] {\n        const entities = this.getEntities();\n        let components = [];\n        entities.forEach(ent => {\n            const ids = Object.keys(ent.getComponents());\n            components = components.concat(ids.map(id => parseInt(id, 10)));\n        });\n        return components;\n    }\n\n    /* Returns all entities in the engine excluding Levels. */\n    public getEntities(): Entity[] {\n        const levels: Level[] = this.getLevels();\n        let entities = [];\n        levels.forEach(level => {\n            entities = entities.concat(level.getActors());\n            entities = entities.concat(level.getItems());\n            entities = entities.concat(level.getElements());\n        });\n        return entities;\n    }\n\n    /* Updates the loop by executing one player command, then looping until\n     * next player command.*/\n    public updateGameLoop(obj): void {\n        this.playerCommand(obj);\n        this.currPlayer = this.nextActor as SentientActor;\n        this.nextActor = this.getNextActor();\n\n        // Loop systems once per player action\n        this.sysMan.updateLoopSystems();\n\n        // Next/act until player found, then go back waiting for key...\n        while (!this.nextActor.isPlayer() && !this.isGameOver()) {\n            const action = this.nextActor.nextAction();\n            this.doAction(action);\n\n            this.sysMan.updateSystems(); // All systems for each actor\n\n            this.nextActor = this.getNextActor();\n            if (RG.isNullOrUndef([this.nextActor])) {\n                RG.err('Game.Engine', 'updateGameLoop',\n                    'Game loop out of events! Fatal!');\n                break; // if errors suppressed (testing), breaks the loop\n            }\n        }\n        if (!this.isGameOver()) {\n            this.setPlayer(this.nextActor as SentientActor);\n        }\n\n    }\n\n    public updateLoopSystems() {\n        this.sysMan.updateLoopSystems();\n    }\n\n    public playerCommand(obj) {\n        if (this.nextActor.isPlayer() === false) {\n            let msg = '';\n            if (this.nextActor.hasOwnProperty('isEvent')) {\n                msg = 'Expected player, got an event: ';\n            }\n            else {\n                const actor = this.nextActor as BaseActor;\n                msg = 'Expected player, got: ' + actor.getName();\n            }\n            msg += '\\n' + JSON.stringify(this.nextActor);\n            RG.err('Engine', 'playerCommand', msg);\n        }\n        const action = this.nextActor.nextAction(obj);\n        this.doAction(action);\n        this.sysMan.updateSystems();\n        this.playerCommandCallback(this.nextActor as SentientActor);\n    }\n\n    /* Simulates the game without a player.*/\n    public simulateGame(nTurns = 1) {\n        for (let i = 0; i < nTurns; i++) {\n            this.nextActor = this.getNextActor();\n\n            if (!this.nextActor.isPlayer()) {\n                const action = this.nextActor.nextAction();\n                this.doAction(action);\n                this.sysMan.updateSystems();\n            }\n            else {\n                RG.err('Engine', 'simulateGame',\n                    'Doesn\\'t work with player.');\n            }\n        }\n    }\n\n    /* Adds one level to the engine. Throws an error if level has already been\n     * added. */\n    public addLevel(level) {\n        const id = level.getID();\n        if (!this._levelMap.hasOwnProperty(id)) {\n            this._levelMap[level.getID()] = level;\n        }\n        else {\n            RG.err('Game.Engine', 'addLevel',\n                'Level ID ' + id + ' already exists!');\n        }\n    }\n\n    /* Removes the given levels from the engine. Throws error if that level\n     * has not been added to engine. */\n    public removeLevels(levels) {\n        levels.forEach(level => {\n            const id = level.getID();\n            if (this._levelMap.hasOwnProperty(id)) {\n                const index = this._activeLevels.indexOf(id);\n                if (index >= 0) {\n                    this._activeLevels.splice(index, 1);\n\n                    const removedLevel = this._levelMap[id];\n                    if (removedLevel) {\n                        const rmvActors = removedLevel.getActors();\n                        for (let i = 0; i < rmvActors.length; i++) {\n                            rmvActors[i].get('Action').disable();\n                        }\n                    }\n                }\n                delete this._levelMap[id];\n            }\n            else {\n                RG.err('Game.Engine', 'removeLevels',\n                    `No level with ID ${id}`);\n            }\n        });\n    }\n\n    /* Adds an active level. Only these levels are simulated.*/\n    public addActiveLevel(level) {\n        const levelID = level.getID();\n        const index = this._activeLevels.indexOf(levelID);\n\n        // Check if a level must be removed\n        if (this._activeLevels.length === (RG.MAX_ACTIVE_LEVELS)) {\n            if (index === -1) { // No room for new level, pop one\n                const removedLevelID = this._activeLevels.pop();\n                const removedLevel = this._levelMap[removedLevelID];\n                if (removedLevel) {\n                    const rmvActors = removedLevel.getActors();\n                    for (let i = 0; i < rmvActors.length; i++) {\n                        const actionComp = rmvActors[i].get('Action');\n                        if (actionComp) {\n                            actionComp.disable();\n                        }\n                    }\n                    RG.debug(this, 'Removed active level to make space...');\n                }\n                else {\n                    const levelIDs = Object.keys(this._levelMap).join(', ');\n                    RG.err('Game.Engine', 'addActiveLevel',\n                        `Failed to remove level ID ${removedLevelID}.\n                        IDs: ${levelIDs}`);\n                }\n            }\n            else { // Level already in actives, move to the front only\n                this._activeLevels.splice(index, 1);\n                this._activeLevels.unshift(levelID);\n                RG.debug(this, 'Moved level to the front of active levels.');\n            }\n        }\n\n        // This is a new level, enable all actors by enabling Action comp\n        if (index === -1) {\n            this._activeLevels.unshift(levelID);\n            const actActors = level.getActors();\n            for (let j = 0; j < actActors.length; j++) {\n                const actionComp = actActors[j].get('Action');\n                if (actionComp) {\n                    actionComp.enable();\n                }\n            }\n        }\n    }\n\n    public notify(evtName, args) {\n        if (evtName === RG.EVT_DESTROY_ITEM) {\n            const item = args.item;\n\n            // chaining due to inventory container\n            const owner = item.getOwner().getOwner();\n            if (!owner.getInvEq().removeItem(item)) {\n                RG.err('Game.Engine', 'notify - DESTROY_ITEM',\n                    'Failed to remove item from inventory.');\n            }\n        }\n        else if (evtName === RG.EVT_ACT_COMP_ADDED) {\n            if (args.hasOwnProperty('actor')) {\n                this.addActor(args.actor);\n            }\n            else {\n                RG.err('Game.Engine', 'notify - ACT_COMP_ADDED',\n                    'No actor specified for the event.');\n            }\n        }\n        else if (evtName === RG.EVT_ACT_COMP_REMOVED) {\n            if (args.hasOwnProperty('actor')) {\n                this.removeActor(args.actor);\n            }\n            else {\n                RG.err('Game.Engine', 'notify - ACT_COMP_REMOVED',\n                    'No actor specified for the event.');\n            }\n        }\n        else if (evtName === RG.EVT_ACT_COMP_ENABLED) {\n            if (args.hasOwnProperty('actor')) {\n                this.addActor(args.actor);\n            }\n            else {\n                RG.err('Game.Engine', 'notify - ACT_COMP_ENABLED',\n                    'No actor specified for the event.');\n            }\n        }\n        else if (evtName === RG.EVT_ACT_COMP_DISABLED) {\n            if (args.hasOwnProperty('actor')) {\n                this.removeActor(args.actor);\n            }\n            else {\n                RG.err('Game', 'notify - ACT_COMP_DISABLED',\n                    'No actor specified for the event.');\n            }\n        }\n        else if (evtName === RG.EVT_LEVEL_PROP_ADDED) {\n            if (args.propType === 'actors') {\n                if (this.isActiveLevel(args.level)) {\n                    // args.obj is actor\n                    args.obj.get('Action').enable();\n                }\n            }\n        }\n        else if (evtName === RG.EVT_LEVEL_CHANGED) {\n            const actor = args.actor;\n            if (actor.isPlayer()) {\n                this.addActiveLevel(actor.getLevel());\n                args.src.onExit();\n                args.src.onFirstExit();\n                args.target.onEnter();\n                args.target.onFirstEnter();\n            }\n        }\n        else if (evtName === RG.EVT_ANIMATION) {\n            if (this.canPlayerSeeAnimation(args.animation)) {\n                if (this.animationCallback) {\n                    if (this.animation) {\n                        this.animation.combine(args.animation);\n                    }\n                    else {\n                        this.animation = args.animation;\n                    }\n                    this.animationCallback(this.animation);\n                }\n            }\n        }\n    }\n\n    /* Main update command. Call this either with cmd to perform, or object\n     * containing the pressed keycode. */\n    public update(obj) {\n        if (!this.isGameOver()) {\n            this.clearMessages();\n\n            if (this.nextActor !== null) {\n                if (obj.hasOwnProperty('code')) {\n                    const code = obj.code;\n                    if (!this.isMenuShown() && this.isGUICommand(code)) {\n                        this.doGUICommand(code);\n                        this.playerCommandCallback(this.nextActor as SentientActor);\n                    }\n                    else {\n                        this.updateGameLoop({code});\n                    }\n                }\n                else {\n                    this.updateGameLoop(obj);\n                }\n            }\n\n        }\n        else {\n            this.clearMessages();\n            this._eventPool.emitEvent(RG.EVT_MSG, {msg: 'GAME OVER!'});\n            this.simulateGame(100);\n        }\n    }\n\n    //--------------------------------------------------------------\n    // SCHEDULING/ACTIONS\n    //--------------------------------------------------------------\n\n    /* Returns next actor from the scheduling queue.*/\n    public getNextActor() {\n        return this._scheduler.next();\n    }\n\n    /* Adds an actor to the scheduler. */\n    public addActor(actor) {\n        this._scheduler.add(actor, true, 0);\n    }\n\n    /* Removes an actor from a scheduler.*/\n    public removeActor(actor) {\n        this._scheduler.remove(actor);\n    }\n\n    /* Adds an event to the scheduler.*/\n    public addEvent(gameEvent) {\n        const repeat = gameEvent.getRepeat();\n        const offset = gameEvent.getOffset();\n        this._scheduler.add(gameEvent, repeat, offset);\n    }\n\n    /* Performs one game action.*/\n    public doAction(action) {\n        this._scheduler.setAction(action);\n        action.doAction();\n        if (action.hasOwnProperty('energy')) {\n            if (action.hasOwnProperty('actor')) {\n                const actor = action.actor;\n                if (actor.has('Action')) {\n                    actor.get('Action').addEnergy(action.energy);\n                }\n            }\n        }\n    }\n}\n","/* Handles system creation and updates. */\n\nimport RG from '../rg';\nimport {System, SystemBase} from './index';\nimport {Random} from '../random';\n\ninterface SystemCreate {\n    create: (comps: string[], pool: any) => SystemBase;\n    comps: string[];\n}\n\ntype SystemSpec = string[] | SystemCreate;\n\nexport class SystemManager {\n\n    public static systemOrder: string[];\n    public static systems: {[key: string]: SystemSpec};\n\n    public static addSystemBefore(system, before) {\n        const index = SystemManager.systemOrder.indexOf(before);\n        if (index >= 0) {\n            SystemManager.insertSystemAt(index, system);\n        }\n    }\n\n    public static addSystemAfter(system, after) {\n        const index = SystemManager.systemOrder.indexOf(after);\n        if (index >= 0) {\n            SystemManager.insertSystemAt(index + 1, system);\n        }\n    }\n\n    public static removeSystem(system) {\n        delete SystemManager.systems[system];\n        const index = SystemManager.systemOrder.indexOf(system);\n        if (index >= 0) {\n            SystemManager.systemOrder.splice(index, 1);\n        }\n    }\n\n    public static insertSystemAt(index, system) {\n        SystemManager.systemOrder.splice(index, 0, system.name);\n        if (typeof system.create === 'function') {\n            if (system.name) {\n                SystemManager.systems[system.name] = system;\n            }\n            else {\n                RG.err('SystemManager', 'insertSystemAt',\n                    'No system.name given');\n            }\n        }\n        else {\n            RG.err('SystemManager', 'insertSystemAt',\n                'Object must specify system.create');\n        }\n    }\n    public loopSystemOrder: string[];\n\n    private _engine: any; // TODO fix typings\n    private systemOrder: string[];\n    private systems: {[key: string]: SystemBase};\n    private loopSystems: {[key: string]: SystemBase};\n    private timeSystems: {[key: string]: SystemBase};\n\n    constructor(engine, pool) {\n        this._engine = engine;\n\n        // These systems updated after each actor action. The Order is important,\n        // for example:\n        // - Disability must block most of other actions taking place\n        // - Damage must be processed after all damaging effects (attacks/spells..)\n        // - Exp points granted after exp giving actions are processed\n        // - Animations should be seen before actors are killed.\n        this.systemOrder = SystemManager.systemOrder;\n\n        const allSys = {};\n        Object.keys(SystemManager.systems).forEach(name => {\n            const comps = SystemManager.systems[name];\n            if ((comps as SystemCreate).create) {\n                const createConf = comps as SystemCreate;\n                allSys[name] = createConf.create(createConf.comps, pool);\n            }\n            else if (Array.isArray(comps)) {\n                if (System[name]) {\n                    allSys[name] = new System[name](comps, pool);\n                }\n                else {\n                    RG.err('SystemManager', 'new',\n                        `System[${name}] not found for new`);\n                }\n            }\n        });\n        this.systems = allSys;\n\n        // Systems updated once each game loop (once for each player action)\n        this.loopSystemOrder = ['Hunger'];\n        this.loopSystems = {};\n        this.loopSystems.Hunger = new System.Hunger(['Action', 'Hunger'], pool);\n\n        // Time-based systems are added to the scheduler directly\n        this.timeSystems = {};\n\n        const effects = new System.TimeEffects(\n            ['Expiration', 'Poison', 'Fading', 'Heat', 'Coldness', 'DirectDamage',\n                'RegenEffect'], pool\n        );\n\n        this.timeSystems.TimeEffects = effects;\n        this._engine.addTimeSystem('TimeEffects', effects);\n    }\n\n    public get(type: string): SystemBase {\n        if (this.systems.hasOwnProperty(type)) {\n            return this.systems[type];\n\n        }\n        return null;\n    }\n\n    public updateSystems() {\n        for (let i = 0; i < this.systemOrder.length; i++) {\n            const sysName = this.systemOrder[i];\n            this.systems[sysName].update();\n        }\n    }\n\n    public updateLoopSystems() {\n        for (let i = 0; i < this.loopSystemOrder.length; i++) {\n            const sysName = this.loopSystemOrder[i];\n            this.loopSystems[sysName].update();\n        }\n    }\n\n    /* Sets the RNG for all systems. */\n    public setRNG(rng: Random): void {\n        Object.values(this.systems).forEach(system => {\n            system.setRNG(rng);\n        });\n    }\n}\n\nSystemManager.systemOrder = [\n    'AreaEffects', 'Disability', 'SpiritBind', 'BaseAction',\n    'Equip', 'Attack', 'Chat', 'Shop', 'SpellCast', 'SpellEffect',\n    'Missile', 'Movement', 'Effects', 'Animation', 'Damage', 'Battle',\n    'Skills', 'Quest', 'ExpPoints', 'Communication', 'Events',\n    'Weather'\n];\n\n\n/* Defines which systems are created by the SystemManager. There are two ways\n * to add an entry:\n * 1) System object name in System, ie SystemDamage + list of components\n * 2) System name: {create: <factory func>, comps: ['Comp1'], ['Comp2']}\n *    in which factory func must return a System object.\n */\nSystemManager.systems = {\n    Disability: ['Stun', 'Entrapped', 'Paralysis'],\n    SpiritBind: ['SpiritBind'],\n    BaseAction: ['Pickup', 'UseStairs', 'OpenDoor', 'UseItem', 'UseElement',\n        'Jump', 'Read', 'Rest', 'Give'],\n    Chat: ['Chat'],\n    Shop: ['Transaction'],\n    Attack: ['Attack'],\n    Missile: ['Missile'],\n    Movement: ['Movement'],\n    Damage: ['Damage', 'Health'],\n    Battle: ['BattleOver', 'BattleOrder'],\n    Skills: ['SkillsExp'],\n    Events: ['Event'],\n    AreaEffects: ['Flame'],\n    Equip: ['Equip'],\n    SpellCast: ['SpellCast', 'PowerDrain'],\n    SpellEffect: ['SpellRay', 'SpellCell', 'SpellMissile', 'SpellArea',\n        'SpellSelf'],\n    Effects: ['Effects'],\n    Animation: ['Animation'],\n    ExpPoints: ['ExpPoints', 'Experience'],\n    Communication: ['Communication'],\n    Quest: ['GiveQuest', 'QuestCompleted', 'QuestTargetEvent'],\n    Weather: ['WeatherEffect']\n};\n","\nimport RG from '../rg';\nimport {Path} from '../path';\nimport {Geometry} from '../geometry';\n\nexport const System: any = {};\n\nimport {SystemBase} from './system.base';\nexport {SystemBase} from './system.base';\nSystem.Base = SystemBase;\n\nimport {SystemAnimation} from './system.animation';\nexport {SystemAnimation} from './system.animation';\nSystem.Animation = SystemAnimation;\n\nimport {SystemAreaEffects} from './system.area-effects';\nexport {SystemAreaEffects} from './system.area-effects';\nSystem.AreaEffects = SystemAreaEffects;\n\nimport {SystemAttack} from './system.attack';\nexport {SystemAttack} from './system.attack';\nSystem.Attack = SystemAttack;\n\nimport {SystemBaseAction} from './system.base-action';\nexport {SystemBaseAction} from './system.base-action';\nSystem.BaseAction = SystemBaseAction;\n\nimport {SystemBattle} from './system.battle';\nexport {SystemBattle} from './system.battle';\nSystem.Battle = SystemBattle;\n\nimport {SystemChat} from './system.chat';\nexport {SystemChat} from './system.chat';\nSystem.Chat = SystemChat;\n\nimport {SystemCommunication} from './system.communication';\nexport {SystemCommunication} from './system.communication';\nSystem.Communication = SystemCommunication;\n\nimport {SystemDamage} from './system.damage';\nexport {SystemDamage} from './system.damage';\nSystem.Damage = SystemDamage;\n\nimport {SystemDisability} from './system.disability';\nexport {SystemDisability} from './system.disability';\nSystem.Disability = SystemDisability;\n\nimport {SystemEffects} from './system.effects';\nexport {SystemEffects} from './system.effects';\nSystem.Effects = SystemEffects;\n\nimport {SystemEquip} from './system.equip';\nexport {SystemEquip} from './system.equip';\nSystem.Equip = SystemEquip;\n\nimport {SystemEvents} from './system.events';\nexport {SystemEvents} from './system.events';\nSystem.Events = SystemEvents;\n\nimport {SystemExpPoints} from './system.exp-points';\nexport {SystemExpPoints} from './system.exp-points';\nSystem.ExpPoints = SystemExpPoints;\n\nimport {SystemHunger} from './system.hunger';\nexport {SystemHunger} from './system.hunger';\nSystem.Hunger = SystemHunger;\n\nimport {SystemMissile} from './system.missile';\nexport {SystemMissile} from './system.missile';\nSystem.Missile = SystemMissile;\n\nimport {SystemMovement} from './system.movement';\nexport {SystemMovement} from './system.movement';\nSystem.Movement = SystemMovement;\n\nimport {SystemQuest} from './system.quest';\nexport {SystemQuest} from './system.quest';\nSystem.Quest = SystemQuest;\n\nimport {SystemShop} from './system.shop';\nexport {SystemShop} from './system.shop';\nSystem.Shop = SystemShop;\n\nimport {SystemSkills} from './system.skills';\nexport {SystemSkills} from './system.skills';\nSystem.Skills = SystemSkills;\n\nimport {SystemSpellCast} from './system.spell-cast';\nexport {SystemSpellCast} from './system.spell-cast';\nSystem.SpellCast = SystemSpellCast;\n\nimport {SystemSpellEffect} from './system.spell-effect';\nexport {SystemSpellEffect} from './system.spell-effect';\nSystem.SpellEffect = SystemSpellEffect;\n\nimport {SystemSpiritBind} from './system.spirit-bind';\nexport {SystemSpiritBind} from './system.spirit-bind';\nSystem.SpiritBind = SystemSpiritBind;\n\nimport {SystemTimeEffects} from './system.time-effects';\nexport {SystemTimeEffects} from './system.time-effects';\nSystem.TimeEffects = SystemTimeEffects;\n\nimport {SystemWeather} from './system.weather';\nexport {SystemWeather} from './system.weather';\nSystem.Weather = SystemWeather;\n\n/* Defines a new system declaration. Can be used in plugins to define new\n * systems easily without boilerplate code. */\nSystem.defineSystem = function(sysName: string): any {\n    const nameCaps = sysName.toUpperCase();\n    RG.SYS[nameCaps] = Symbol();\n\n    const SystemDecl = class extends SystemBase {\n\n        constructor(compTypes, ...argsList) {\n            super(RG.SYS[nameCaps], compTypes);\n            if (this._init && typeof this._init === 'function') {\n                this._init(compTypes, ...argsList);\n            }\n        }\n\n        private _init?(compTypes: string[], ...args: any[]): void;\n    };\n\n    System[sysName] = SystemDecl;\n    return SystemDecl;\n};\n\n/* Undefines a system declaration. Can be used as cleanup for defineSystem. */\nSystem.undefineSystem = function(sysName: string): void {\n    const nameCaps = sysName.toUpperCase();\n    delete RG.SYS[nameCaps];\n    delete System[sysName];\n};\n","\nimport RG from './rg';\nimport {Level} from './level';\n\nexport interface FrameEntry {\n    char: string;\n    className: string;\n}\n\nexport interface Frame {\n    [key: string]: FrameEntry;\n}\n\n/* Very simple \"animation\" object handed to the Screen object. slowDown can be\n * used to repeat the frame for addFrame() multiple times.\n *  Each frame should be an object such as\n *  {\n *    '1,1': {char: '-', className: 'css-class'},\n *    '2,2': {char: '-', className: 'css-class'}\n *  }\n * Screen object will always render specified chars to the given locations\n * over normal map cells.\n * */\nexport class Animation {\n\n    public levelID: number;\n    public numFrames: number;\n    public currFrame: number;\n\n    // \"Slows\" down the animation by this factor\n    public slowDown: number;\n\n    public frames: Frame[];\n\n    constructor() {\n        this.levelID = -1;\n        this.numFrames = 0;\n        this.currFrame = 0;\n\n        // \"Slows\" down the animation by this factor\n        this.slowDown = 2;\n\n        this.frames = [];\n    }\n\n    setLevel(level: Level) {\n        this.levelID = level.getID();\n    }\n\n    addFrame(frame: Frame) {\n        for (let i = 0; i < this.slowDown; i++) {\n            ++this.numFrames;\n            this.frames.push(frame);\n        }\n    }\n\n    /* Advances animation to the next frame, and returns the frame */\n    nextFrame(): Frame {\n        const frame = this.frames[this.currFrame++];\n        return frame;\n    }\n\n    hasFrames(): boolean {\n        return this.currFrame < this.frames.length;\n    }\n\n    /* Combines the frames of two animations together. */\n    combine(animation: Animation) {\n        let frameIndex = 0;\n        while (animation.hasFrames()) {\n            const frame = animation.nextFrame();\n            if (frameIndex < this.frames.length) {\n                const frameKeys = Object.keys(frame);\n                for (let i = 0; i < frameKeys.length; i++) {\n                    const xy = frameKeys[i];\n                    this.frames[frameIndex][xy] = frame[xy];\n                }\n            }\n            else {\n                this.frames.push(frame);\n            }\n            ++frameIndex;\n        }\n    }\n\n    /* Returns true if any frame in the animation contains at least one coordinates\n     * from the given list. */\n    hasCoord(coordMap): boolean {\n        const nFrames = this.frames.length;\n        for (let n = 0; n < nFrames; n++) {\n            const frame: Frame = this.frames[n];\n            for (const key in frame) {\n                if (coordMap[key]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","\nimport RG from './rg';\nimport {EventPool} from './eventpool';\nimport {IMessage} from './interfaces';\n\n//---------------------------------------------------------------------------\n// MessageHandler\n//---------------------------------------------------------------------------\n\n/* Handles the game message listening and storing of the messages. */\nexport class MessageHandler { // {{{2\n    protected _lastMsg: IMessage;\n    protected _messages: IMessage[];\n    protected _prevMessages: IMessage[];\n    protected _hasNew: boolean;\n    public hasNotify: boolean;\n\n    constructor(pool: EventPool) {\n        this._lastMsg = null;\n        this._messages = [];\n        this._prevMessages = [];\n        this._hasNew = false;\n        this.hasNotify = true;\n        pool.listenEvent(RG.EVT_MSG, this);\n    }\n\n    public notify(evtName: string, msg: IMessage): void {\n        if (evtName === RG.EVT_MSG) {\n            if (msg.hasOwnProperty('msg')) {\n                const msgObj: IMessage = {msg: msg.msg, style: 'prim', count: 1};\n\n                if (msg.hasOwnProperty('cell')) {\n                    msgObj.cell = msg.cell;\n                }\n\n                if (msg.hasOwnProperty('style')) {\n                    msgObj.style = msg.style;\n                }\n\n                if (this._lastMsg && this._lastMsg.msg === msgObj.msg) {\n                    this._lastMsg.count += 1;\n                }\n                else {\n                    this._lastMsg = msgObj;\n                    this._messages.push(msgObj);\n                }\n                this._hasNew = true;\n            }\n        }\n    }\n\n    public hasNew(): boolean {return this._hasNew;}\n\n    public getMessages(): IMessage[] {\n        this._hasNew = false;\n        if (this._messages.length > 0) {return this._messages;}\n        else if (this._prevMessages.length > 0) {return this._prevMessages;}\n        else {return [];}\n    }\n\n    public clear(): void {\n        if (this._messages.length > 0) {this._prevMessages = this._messages.slice();}\n        this._messages = [];\n    }\n\n}\n\n","\nimport RG from './rg';\n\nimport {FactoryBattle, BattleConf} from './factory.battle';\nimport {OWMap} from './overworld.map';\nimport {OW} from './ow-constants';\nimport {Menu} from './menu';\nimport {Random} from './random';\nimport {Battle, BattleJSON, Army} from './game.battle';\nimport {Level} from './level';\nimport {SentientActor} from './actor';\nimport {GameMain} from './game';\nimport {WorldTop} from './world';\n\nimport {EventPool} from './eventpool';\nimport * as Component from './component';\n\nconst dbg = require('debug');\nconst debug = dbg('bitn:GameMaster');\n\nconst POOL = EventPool.getPool();\nconst RNG = Random.getRNG();\n\ntype BattleObj = Battle | BattleJSON;\n\n/* GameMaster objects reacts to various events caused by player and other\n * actors, and shapes the game world based on them. For example,\n * GameMaster can:\n *   - start battles on the area player entered\n *   - spawn special events and actors\n *   - spawn special items etc.\n */\nexport class GameMaster {\n    public player: SentientActor;\n    public game: any ; // GameMain; TODO fix typings\n    public fact: FactoryBattle;\n    public pool: EventPool;\n    public battles: {[key: number]: BattleObj[]};\n\n    // Key is level ID of the battle level (NOT parent area level)\n    public battlesDone: {[key: number]: boolean};\n\n    public hasNotify: boolean;\n    public world: WorldTop;\n\n    constructor(game, pool = POOL) {\n        this.player = null;\n        this.game = game;\n        this.fact = new FactoryBattle();\n        this.pool = pool;\n\n        // Lookup table for battles by level ID\n        this.battles = {};\n        this.battlesDone = {};\n        this.hasNotify = true;\n\n        this.pool.listenEvent(RG.EVT_LEVEL_CHANGED, this);\n        this.pool.listenEvent(RG.EVT_TILE_CHANGED, this);\n        this.pool.listenEvent(RG.EVT_BATTLE_OVER, this);\n        this.pool.listenEvent(RG.EVT_CREATE_BATTLE, this);\n    }\n\n    setBattles(battles) {\n        this.battles = battles;\n    }\n\n    setPool(pool) {this.pool = pool;}\n    setGame(game) {this.game = game;}\n\n    setPlayer(player) {\n        this.player = player;\n    }\n\n    setWorld(world) {this.world = world;}\n\n    notify(evtName: string, args) {\n        if (evtName === RG.EVT_LEVEL_CHANGED) {\n            debug('EVT_LEVEL_CHANGED');\n            const {actor} = args;\n            if (actor.isPlayer()) {\n                if (!actor.has('InBattle')) {\n                    this.tryToAddPlayerToBattle(args);\n                }\n                else {\n                    this.removePlayerFromBattle(args);\n                }\n            }\n        }\n        else if (evtName === RG.EVT_CREATE_BATTLE) {\n            debug('EVT_CREATE_BATTLE');\n            const {areaTile} = args;\n            if (args.response) {\n                RG.err('GameMaster', 'notify<EVT_CREATE_BATTLE>',\n                    `Args has response already: ${JSON.stringify(args)}`);\n            }\n            const parentLevel = areaTile.getLevel();\n            const battle = this.createBattleIntoAreaTileLevel(parentLevel);\n            if (battle) {\n                args.response = {battle};\n            }\n        }\n        else if (evtName === RG.EVT_TILE_CHANGED) {\n            debug('EVT_TILE_CHANGED');\n            // Should spawn battle etc event\n            if (!this.player) {\n                debug('\\tBut player is NULL for the moment');\n                return;\n            }\n            debug('\\tPlayer not null. Creating battle');\n            const parentLevel = this.player.getLevel();\n            this.createBattleIntoAreaTileLevel(parentLevel);\n        }\n        else if (evtName === RG.EVT_EXPLORED_ZONE_LEFT) {\n            // TODO check for creating a new battle on the map\n            RG.diag('Explored zone left');\n        }\n        else if (evtName === RG.EVT_BATTLE_OVER) {\n            const {battle} = args;\n            debug(`EVT_BATTLE_OVER: ${battle.getName()}`);\n            const id = battle.getLevel().getID();\n\n            debug(`1. battlesDone for ${id}: ${this.battlesDone[id]}`);\n            if (!this.battlesDone[id] && battle) {\n                debug(`2. battlesDone for ${id}: ${this.battlesDone[id]}`);\n                this.battlesDone[id] = true;\n                debug(`3. battlesDone for ${id}: ${this.battlesDone[id]}`);\n                this.addBadgesForActors(battle);\n                this.moveActorsOutOfBattle(battle);\n                const bName = battle.getName();\n                RG.gameMsg(`Battle ${bName} is over!`);\n            }\n            else {\n                const json = JSON.stringify(args);\n                RG.err('Game.Master', 'notify',\n                    `Args ${json} does not contain \"battle\"`);\n            }\n            debug('GameMaster registered battle over');\n            // TODO delete the battle (but keep the level)\n        }\n    };\n\n        /* Returns the bbox for the battle. This is coordinates for the battle\n         * inside the tile level. It corresponds to player's current owPos. */\n    getLevelBbox(ow, area, tileXY, owPos, level) {\n        // Info needed:\n        // local ow pos\n        // one ow pos in level cells\n        const [owSizeX, owSizeY] = [ow.getSizeX(), ow.getSizeY()];\n        const [owX, owY] = owPos;\n        const [areaX, areaY] = [area.getSizeX(), area.getSizeY()];\n        const [cols, rows] = level.getColsRows();\n\n        const owTilesPerAreaTileX = owSizeX / areaX;\n        const owTilesPerAreaTileY = owSizeY / areaY;\n        const oneOwTileInCols = areaX * cols / owSizeX;\n        const oneOwTileInRows = areaY * rows / owSizeY;\n        const localOwX = owX % owTilesPerAreaTileX;\n        const localOwY = owY % owTilesPerAreaTileY;\n\n        return {\n            ulx: localOwX * oneOwTileInCols,\n            uly: localOwY * oneOwTileInRows,\n            lrx: (localOwX + 1) * oneOwTileInCols - 1,\n            lry: (localOwY + 1) * oneOwTileInRows - 1\n        };\n    };\n\n        /* Adds player to the battle level. */\n    tryToAddPlayerToBattle(args) {\n        const {actor, target, src} = args;\n        const srcID = src.getID();\n        if (this.battles.hasOwnProperty(srcID)) {\n            const battle = this.getBattle(srcID);\n            if ((battle as BattleJSON).isJSON) {\n                return; // Cannot join serialized battle anyway\n            }\n            const battleObj = battle as Battle;\n            const battleLevel = battleObj.getLevel();\n\n            if (battleLevel.getID() === target.getID()) {\n                if (this.actorCanEnter(actor, battleObj)) {\n                    // Entered a battle\n                    const comp = new Component.InBattle();\n                    comp.setData({name: battleObj.getName()});\n                    actor.add(comp);\n                    // Get army selection object\n                    const obj = this.getSelArmyObject(actor, battleObj);\n                    actor.getBrain().setSelectionObject(obj);\n                }\n                else if (battleObj.isOver()) {\n                    RG.gameMsg('Looks like the battle is already fought..');\n                }\n                else {\n                    RG.gameMsg('You cannot join the fight anymore, deserter.');\n                }\n            }\n        }\n\n    };\n\n    addBattle(parentId, battle) {\n        this.battles[parentId].push(battle);\n    };\n\n    getBattle(parentId) {\n        const battle = this.battles[parentId][0];\n        return battle;\n    };\n\n    getBattles(parentId) {\n        return this.battles[parentId];\n    };\n\n    /* Returns true if the actor can still enter the battle as an army member.\n     * */\n    actorCanEnter(actor, battle) {\n        if (battle.isOver()) {return false;}\n        if (this.actorDesertedBattle(actor, battle)) {return false;}\n        return true;\n    }\n\n    /* Removes the player from a battle. */\n    removePlayerFromBattle(args) {\n        const {actor, target, src} = args;\n        const areaID = target.getID();\n        const srcID = src.getID();\n        const battle = this.getBattle(areaID) as Battle;\n        const battleLevID = battle.getLevel().getID();\n\n        const inBattleComp = actor.get('InBattle');\n        const battleData = inBattleComp.getData();\n\n        if (srcID !== battleLevID) {\n            const msg = `Level ID mismatch: ${srcID} !== ${battleLevID}`;\n            RG.err('GameMaster', 'removePlayerFromBattle', msg);\n        }\n\n        // Mark player as deserter, TODO add confirm object\n        if (!battle.isOver() && battleData.army) {\n            const badge = new Component.BattleBadge();\n            badge.setData({status: 'Fled', name: battle.getName(),\n                army: battleData.army});\n            actor.add(badge);\n            actor.remove('InBattle');\n            actor.add(new Component.BattleOver());\n        }\n        else if (!battle.isOver() && !battleData.army) {\n            actor.remove('InBattle');\n        }\n    }\n\n    /* Adds BattleBadges after a battle is over. */\n    addBadgesForActors(battle) {\n        const armies = battle.getArmies();\n        armies.forEach(army => {\n            const actors = army.getActors();\n            const ids = actors.map(actor => actor.getID());\n\n            actors.forEach(actor => {\n                if (!this.actorDesertedBattle(actor, battle)) {\n                    const badge = new Component.BattleBadge();\n                    const battleData = {\n                        name: battle.getName(),\n                        army: army.getName(),\n                        allies: ids,\n                        status: army.isDefeated() ? 'Lost' : 'Won'\n                    };\n                    badge.setData(battleData);\n                    actor.add(badge);\n\n                    actor.remove('InBattle');\n                    actor.add(new Component.BattleOver());\n                }\n            });\n        });\n    };\n\n    actorDesertedBattle(actor, battle) {\n        const badgeList = actor.getList('BattleBadge');\n        const badge = badgeList.find(b => (\n            b.getData().name === battle.getName()\n        ));\n        if (badge) {return true;}\n        return false;\n    }\n\n    /* Moves actors out of the battle level into the parent level of the battle\n     * (at the moment this is always Area.Tile level. */\n    moveActorsOutOfBattle(battle) {\n        const level = battle.getLevel();\n        const conns = level.getConnections();\n\n        if (!conns || conns.length === 0) {\n            RG.err('Game.Master', 'moveActorsOutOfBattle',\n                'No exit connnection in level');\n        }\n\n        const exit = conns[0];\n        const targetLevel = exit.getTargetLevel();\n\n        const armies = battle.getArmies();\n        armies.forEach(army => {\n            const actors = army.getActors();\n            actors.forEach(actor => {\n                if (actor.isInLevel(level)) {\n\n                    if (!actor.isPlayer()) {\n                        if (level.removeActor(actor)) {\n                            targetLevel.addActorToFreeCell(actor);\n                        }\n                        else {\n                            const json = JSON.stringify(actor.toJSON());\n                            RG.err('Game.Master', 'moveActorsOutOfBattle',\n                                `level.removeActor failed for actor ${json}`);\n                        }\n\n                    }\n                    else {\n                        const selObj = this.getSelLeaveBattle(actor, level);\n                        actor.getBrain().setSelectionObject(selObj);\n                    }\n                }\n            });\n        });\n\n    }\n\n    /* Returns the selection object for player to select an army. */\n    getSelArmyObject(player, battle: Battle) {\n        const armies = battle.getArmies();\n        const selArmyFunc = selection => {\n            const army = armies[selection];\n            const battleLevel = battle.getLevel();\n            let armyActors = army.getActors();\n            const nActors = armyActors.length;\n\n            const pIndex = RNG.getUniformInt(0, nActors - 1);\n            const replacedActor = armyActors[pIndex];\n            const [pX, pY] = replacedActor.getXY();\n\n            // Remove substituted actor from army/level\n            replacedActor.get('Action').disable();\n            army.removeActor(replacedActor);\n            battleLevel.removeActor(replacedActor);\n\n            armyActors = army.getActors();\n            army.addActor(player);\n\n            player.get('InBattle').updateData({army: army.getName});\n            armyActors.forEach(actor => {\n                actor.addFriend(player);\n            });\n\n            armies.forEach(enemyArmy => {\n                if (enemyArmy !== army) {\n                    const enemies = enemyArmy.getActors();\n                    enemies.forEach(enemy => {\n                        enemy.addEnemy(player);\n                    });\n                }\n            });\n\n            if (!battleLevel.moveActorTo(player, pX, pY)) {\n                RG.err('GameMaster', 'getSelArmyObject',\n                    `Could not move player to ${pX},${pY}`);\n            }\n        };\n\n        const choices = armies.map((army, i) => {\n            return [' Army ' + army.getName(), selArmyFunc.bind(this, i)];\n        });\n        choices.push(['Take no side', Menu.EXIT_MENU]);\n        const menu = new Menu.SelectRequired(choices);\n        menu.addPre('Please select an army to join:');\n        return menu;\n    }\n\n    getSelLeaveBattle(player, level) {\n        const leaveFunc = () => {\n          const exit = level.getConnections()[0];\n          if (!exit.useStairs(player)) {\n            RG.err('GameMaster', 'moveActorsOutOfBattle',\n              'Cannot move player via useStairs');\n          }\n          else {\n            const name = player.getName();\n            RG.gameMsg(`${name} leaves the battlefield`);\n          }\n        };\n        const choices = [\n          ['Leave immediately', leaveFunc],\n          ['Stay behind to scavenge the bodies of the dead.', Menu.EXIT_MENU]\n        ];\n        const menu = new Menu.SelectRequired(choices);\n        menu.addPre('Battle is over! Do you want to leave battle?');\n        return menu;\n    }\n\n    /* Serializes the object into JSON. */\n    toJSON() {\n        const keys = Object.keys(this.battles);\n        const battles = {};\n        keys.forEach(id => {\n            const battlesTile = this.getBattles(id);\n            battlesTile.forEach(battle => {\n                if (battles.hasOwnProperty(id)) {\n                    RG.warn('Game.Master', 'toJSON',\n                        `Battle for ID ${id} exists already`);\n                }\n                else {\n                    battles[id] = [];\n                }\n\n                if (typeof (battle as Battle).toJSON === 'function') {\n                    battles[id].push((battle as Battle).toJSON());\n                }\n                else if ((battle as BattleJSON).name) {\n                    battles[id].push(battle);\n                }\n                else {\n                    RG.err('GameMaster', 'toJSON',\n                        'Does not look like proper battle object.');\n                }\n            });\n        });\n        return {\n            battles,\n            battlesDone: this.battlesDone\n        };\n    }\n\n    /* Used by the ChunkManager to serialize the battle when player move far\n     * enough from the tile. */\n    unloadBattles(tileLevel: Level) {\n        const id = tileLevel.getID();\n        if (this.battles.hasOwnProperty(id)) {\n            const battles = this.getBattles(id);\n            this.battles[id] = [];\n            battles.forEach(battle => {\n                if (typeof (battle as Battle).toJSON === 'function') {\n                    const battleObj = battle as Battle;\n                    if (!battleObj.isOver()) {\n                        // Important, otherwise cannot be GC'd\n                        battleObj.removeListeners();\n                    }\n                    this.battles[id].push(battleObj.toJSON());\n                }\n                else {\n                    RG.err('GameMaster', 'unloadBattle',\n                        `Unload for level ${id} failed`);\n                }\n            });\n        }\n    }\n\n    biomeToLevelType(biome) {\n        switch (biome) {\n            case OW.BIOME.ARCTIC: return 'arctic';\n            case OW.BIOME.TUNDRA: return 'arctic';\n            case OW.BIOME.ALPINE: return 'mountain';\n            case OW.BIOME.TAIGA: return 'forest';\n            default: return 'forest';\n        }\n    }\n\n    getBattleLevels(): Level[] {\n        const levels = [];\n        // TODO fix typings\n        Object.values(this.battles).forEach((battlesPerID) => {\n            battlesPerID.forEach(battle => {\n                if (!(battle as BattleJSON).isJSON) {\n                    levels.push((battle as Battle).getLevel());\n                }\n            });\n        });\n        return levels;\n\n    }\n\n    createBattleIntoAreaTileLevel(parentLevel: Level) {\n        if (!parentLevel) {\n            RG.err('GameMaster', 'createBattleIntoAreaTileLevel',\n                `Parent level is null`);\n        }\n        const parentId = parentLevel.getID();\n\n        const ow = this.game.getOverWorld();\n        let maxDanger = 4;\n        let armySize = 20;\n        const battleConf: BattleConf = {};\n        let levelType = 'forest';\n\n        let bbox = parentLevel.getBbox();\n\n        if (ow) {\n            const world = this.game.getCurrentWorld();\n            const area = world.getAreas()[0];\n            const xy = area.findTileXYById(parentId);\n\n            // TODO use actual starting position\n            const startX = 2;\n            const startY = area.getSizeY() - 1;\n            const dX = Math.abs(startX - xy[0]);\n            const dY = Math.abs(startY - xy[1]);\n            maxDanger += dX + dY;\n            armySize += 20 * dY + 10 * dX;\n\n            const msg = `dx,dy: ${dX},${dY} armySize ${armySize}`;\n            debug(`${msg} , danger: ${maxDanger}`);\n\n            const owPos = this.game.getPlayerOwPos();\n            if (owPos && owPos.length > 1) {\n                const biome = ow.getBiome(owPos[0], owPos[1]);\n                levelType = this.biomeToLevelType(biome);\n                debug('Creating battle on tile ' + xy);\n                bbox = this.getLevelBbox(ow, area, xy, owPos, parentLevel);\n            }\n        }\n        battleConf.maxDanger = maxDanger;\n        battleConf.armySize = armySize;\n        battleConf.levelType = levelType;\n        battleConf.bbox = bbox;\n\n        if (!this.battles.hasOwnProperty(parentId)) {\n            this.battles[parentId] = [];\n            const battle = this.fact.createBattle(parentLevel, battleConf);\n            this.addBattle(parentId, battle);\n            this.game.addBattle(this.getBattle(parentId), parentId);\n            return battle;\n        }\n        return null;\n    }\n}\n","\nimport {Constraints} from './constraints';\n\nimport RG from './rg';\nimport {Factory} from './factory';\nimport {World} from './world';\nimport {Battle, Army} from './game.battle';\nimport {Random} from './random';\nimport {FactoryLevel} from './factory.level';\nimport {ObjectShell} from './objectshellparser';\nimport * as Brain from './brain';\nimport * as Component from './component';\nimport * as GoalsTop from './goals-top';\nimport * as Element from './element';\n\nimport {BBox} from './interfaces';\n\ntype Level = import('./level').Level;\ntype SentientActor = import('./actor').SentientActor;\ntype Stairs = Element.ElementStairs;\nconst ElementStairs = Element.ElementStairs;\n\nconst RNG = Random.getRNG();\n\nconst FACTIONS = ['avianfolk', 'human', 'dwarf', 'dogfolk', 'wolfclan',\n    'goblin', 'catfolk', 'bearfolk', 'wildling', 'undead'];\n\nexport interface BattleConf {\n    cols?: number;\n    rows?: number;\n    name?: string;\n    numRows?: number;\n    numArmies?: number;\n    armySize?: number;\n    armies?: string[];\n    centerX?: boolean;\n    centerY?: boolean;\n    bbox?: BBox;\n    maxDanger?: number;\n    levelType?: string;\n}\n\n/* Factory used for creating battles. */\nexport class FactoryBattle {\n    public minCommDanger: number;\n\n    constructor() {\n        this.minCommDanger = 5;\n    }\n\n    /* Creates one battle into the level. TODO: Decide how to modify difficulty\n     * etc. */\n    public createBattle(parentLevel, conf: BattleConf = {}): Battle {\n        const cols = conf.cols || 80;\n        const rows = conf.rows || 40;\n\n        const id = parentLevel ? parentLevel.getID() : 0;\n        const name = conf.name || 'Battle of level ' + id;\n\n        const battle = new Battle(name);\n        const battleLevel = this.createBattleLevel(cols, rows, conf);\n        battle.setLevel(battleLevel);\n\n        const [fact1, fact2] = this.getFactions(conf);\n\n        let numRows = conf.numRows || 2;\n        const armySize = conf.armySize || 20;\n        const numArmies = conf.numArmies || 2;\n        const facts = conf.armies || [fact1, fact2];\n\n        // Scale army X size to fit into the level\n        let armySizeX = Math.ceil(armySize / numRows);\n        while (armySizeX > cols) {\n            ++numRows;\n            armySizeX = Math.ceil(armySize / numRows);\n        }\n\n        // Generate all armies based on constraints\n        const armies: Army[] = [];\n        for (let i = 0; i < numArmies; i++) {\n            const army = this.createArmy(battle, facts[i], conf);\n\n            // Assign random but legal coords to the army\n            let armyX = RNG.getUniformInt(0, cols - 1);\n            let armyY = RNG.getUniformInt(0, rows - 1);\n            if ((armyX + armySizeX) > (cols - 1)) {\n                armyX = cols - armySizeX;\n            }\n            if ((armyY + numRows) > (rows - 1)) {\n                armyY = rows - 1 - numRows;\n            }\n\n            if (conf.centerX) {\n                armyX = Math.floor(cols / 2);\n                armyX -= Math.floor(armySize / numRows / 2);\n            }\n            if (conf.centerY) {\n                armyY = Math.floor(rows / 2);\n                armyY -= i * (numRows + 2);\n            }\n\n            // Check that the placement is legal\n            if (armyX > (cols - 1) || armyX < 0) {\n                RG.err('FactoryBattle', 'createBattle',\n                    `armyX ${armyX} out of bounds 0-${cols - 1}`);\n            }\n            if (armyY > (rows - 1) || armyY < 0) {\n                RG.err('FactoryBattle', 'createBattle',\n                    `armyY ${armyY} out of bounds 0-${rows - 1}`);\n            }\n\n            const battleConf = {horizontal: true, numRows};\n            battle.addArmy(army, armyX, armyY, battleConf);\n            armies.push(army);\n        }\n\n        this.makeArmiesAsEnemies(armies);\n\n        if (parentLevel) {\n            // Add connecting stairs between battle and area\n            const stairsArea = new ElementStairs('battle', parentLevel);\n            const map = parentLevel.getMap();\n\n            // TODO randomize this position\n            if (conf.bbox) {\n                const {bbox} = conf;\n                let xy = RNG.getRandInBbox(bbox);\n                let cell = map.getCell(xy[0], xy[1]);\n                let watchdog = RG.WATCHDOG;\n                while (cell.hasProps()) {\n                    xy = RNG.getRandInBbox(bbox);\n                    cell = map.getCell(xy[0], xy[1]);\n                    if (--watchdog === 0) {break;}\n                }\n                parentLevel.addStairs(stairsArea, xy[0], xy[1]);\n            }\n            else {\n                parentLevel.addStairs(stairsArea, 4, 4);\n            }\n\n            World.addExitsToEdge(battleLevel);\n\n            const battleExits: Stairs[] = battleLevel.getConnections();\n            stairsArea.connect(battleExits[0]);\n            for (let i = 1; i < battleExits.length; i++) {\n                battleExits[i].setTargetLevel(parentLevel);\n                battleExits[i].setTargetStairs(stairsArea);\n            }\n\n        }\n        return battle;\n    }\n\n    public getFactions(conf): string[] {\n        let fact1 = null;\n        let fact2 = null;\n        if (conf.factions) {\n            [fact1, fact2] = conf.factions;\n        }\n        else {\n            fact1 = RNG.arrayGetRand(FACTIONS);\n            fact2 = RNG.arrayGetRand(FACTIONS);\n            while (fact1 === fact2) {\n                fact2 = RNG.arrayGetRand(FACTIONS);\n            }\n        }\n        return [fact1, fact2];\n    }\n\n    /* Creates an army of specified faction. */\n    public createArmy(battle: Battle, faction: string, conf): Army {\n        const parser = ObjectShell.getParser();\n        const armySize = conf.armySize || 20;\n        const maxDanger = conf.danger || 5;\n\n        const army = new Army(faction);\n        const constr = [\n            {op: 'eq', prop: 'type', value: faction},\n            {op: 'lte', prop: 'danger', value: maxDanger}\n        ];\n        const actorFunc = new Constraints().getConstraints(constr);\n        for (let i = 0; i < armySize - 1; i++) {\n            const actor = parser.createRandomActor({func: actorFunc});\n            if (actor) {\n                const comp = new Component.InBattle();\n                comp.setData({name: battle.getName(),\n                    army: army.getName()});\n                actor.add(comp);\n                army.addActor(actor);\n            }\n        }\n\n        // Create commander for this army\n        const commFunc = actor => (\n            actor.type === faction &&\n            actor.danger >= this.minCommDanger\n        );\n        const commander = parser.createRandomActor({func: commFunc});\n        if (commander) {\n            this.addCommanderAbilities(commander);\n            const comp = new Component.InBattle();\n            comp.setData({name: battle.getName(),\n                army: army.getName()});\n            commander.add(comp);\n            army.addActor(commander);\n        }\n        else {\n            RG.warn('FactoryBattle', 'createArmy',\n                'No commander for army generated');\n        }\n\n        // Army loses if 10% of actors remain, this gives some losing\n        // survivors, makes things more interesting\n        army.setDefeatThreshold(Math.round(0.1 * armySize));\n        return army;\n    }\n\n    public makeArmiesAsEnemies(armies: Army[]): void {\n        // Make army actors into each others enemies\n        armies.forEach(army1 => {\n            armies.forEach(army2 => {\n                if (army1.getName() !== army2.getName()) {\n                    army1.getActors().forEach(a1 => {\n                        army2.getActors().forEach(a2 => {\n                            a1.addEnemy(a2);\n                            a2.addEnemy(a1);\n                        });\n                    });\n                }\n            });\n\n            // Make the actors in army friends\n            army1.getActors().forEach(actor1 => {\n                army1.getActors().forEach(actor2 => {\n                    if (actor1.getID() !== actor2.getID()) {\n                        actor1.addFriend(actor2);\n                        actor2.addFriend(actor1);\n                    }\n                });\n            });\n        });\n    }\n\n    public createBattleLevel(cols, rows, conf): Level {\n        const levelType = conf.levelType || 'forest';\n        const forestConf = RG.getForestConf(cols, rows);\n        const battleLevel = FactoryLevel.createLevel(levelType, cols, rows,\n            forestConf);\n        return battleLevel;\n    }\n\n    public addCommanderAbilities(actor: SentientActor): void {\n        const brain = new Brain.BrainGoalOriented(actor);\n        const topGoal = new GoalsTop.ThinkCommander(actor);\n        actor.setBrain(brain);\n        brain.setGoal(topGoal);\n        actor.add(new Component.Commander());\n        actor.setFOVRange(10);\n    }\n}\n\n"],"sourceRoot":""}
#!/usr/bin/env perl
#===============================================================================
#
#         FILE: exec-js-script.pl
#
#        USAGE: ./exec-js-script.pl
#
#  DESCRIPTION: Script to execute a script in scripts folder N times.
#
#      OPTIONS: ---
#       AUTHOR: Tuomas Poikela (tpoikela), tuomas.sakari.poikela@gmail.com
# ORGANIZATION: BiTN
#      VERSION: 0.1
#      CREATED: 10/26/2018 01:48:47 PM
#===============================================================================

use strict;
use warnings;
use utf8;

use Getopt::Long;
use Pod::Usage;

my %opt;
GetOptions(
    # Standard arguments
    "d|debug"   => \$opt{debug},
    "f=s"       => \$opt{f},
    "help|?"    => \$opt{help},
    "man"       => \$opt{man},
    "o=s"       => \$opt{o},
    "q|quiet"   => \$opt{quiet},
    "v|verbose" => \$opt{verbose},
    "n=i"       => \$opt{n},
    "seed=i"    => \$opt{seed},
    "tag=s"     => \$opt{tag},
);

pod2usage(1) if $opt{help};
pod2usage(-exitval => 0, -verbose => 2) if $opt{man};

my $start = time();
my $res_dir = './results_dir';
mkdir($res_dir) unless -d $res_dir;

my $script = $opt{f};
if (not -e $script) { # Get name with regexp
    $script = get_script_name();
}

my $tag = $opt{tag} || "";

die("No script found with $opt{f}") unless defined $script;

my $n = $opt{n} || 1;
for (my $i = 1; $i <= $n; ++$i) {
    print "Executing script $script ($i/$n).\n";
    my $cmd = "node $script >& $res_dir/script_${tag}_RUN${i}.log";

    my $seed = 0;
    if (defined $opt{seed}) {
        $seed = $opt{seed} + $i - 1;
        $cmd .= " $seed" if defined $opt{seed};
    }

    my $val = system($cmd);
    if ($val != 0) {
        print "Execution $i failed with value $val.\n";
        if (defined $opt{seed}) {
            print "\tUsed seed was $seed.\n";
        }
    }
}

my $end = time();
my $dur = $end - $start;
print "Script took $dur seconds to run.\n";

#-----------------------------------------------------------------------------
# Internal helper functions (autogenerated)
#-----------------------------------------------------------------------------

sub get_script_name {
    my @files = glob('./scripts');
    foreach my $file (@files) {
        return $file if ($file =~ qr/$opt{f}/i);
    }
    return;
}

# For printing debug information
sub _debug {
    my ($msg) = @_;
    print "exec-js-script.pl [DEBUG] $msg\n" if $opt{debug};
}

# For printing out messages if not quiet
sub _msg {
    my ($msg) = @_;
    print "exec-js-script.pl $msg\n" unless $opt{quiet};
}

# For printing error information
sub _error {
    my ($msg) = @_;
    print STDERR "exec-js-script.pl [ERROR]$msg\n";
}

__END__
=head1 NAME

=head1 SYNOPSIS

exec-js-script.pl [options]

  Options:
    -d|debug    Turn on all debugging features.
    -f          Script to execute.
    -help       Print help message.
    -man        Bring up man-pages of the script.
    -n <N>      Run script N times (default: 1)
    -o          Output file.
    -q|quiet    Run script in quiet mode (no std out).
    -tag <S>    Tag added to output files.
    -v|verbose  Run script in verbose mode (more std out).

=head1 OPTIONS

=over 8

=item B<-d|debug>

Turns on all debugging features.

=item B<-f> <filename>

Name of the input file.

=item B<-help>

Prints help message.

=item B<-man>

Shows the man-pages.

=item B<-o> <filename>

Output file name.

=item B<-q|quiet>

Runs script in quiet mode.

=item B<-v|verbose>

Runs script in verbose mode.

=back

=head1 DESCRIPTION

Describe the script here.

=head1 AUTHOR

    Written by Tuomas Poikela, tuomas.sakari.poikela@gmail.com

=cut

#!/usr/bin/env perl

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

if (exists $ENV{SKIP_HOOKS}) {
    print "SKIP_HOOKS found. Skipping pre-push..\n";
    exit 0;
}

my $remote= $ARGV[0];
my $url= $ARGV[1];

print "Got args |@ARGV|\n";

my $test_cmd = "npm run test";

print "remote: $remote, url: $url\n";

my $branch = `git branch`;
print "Branch $branch detected.\n";
my $logfile = 'pre-push-run.log';

print "Running tests as pre-push to hook.\n";
my $error = system("$test_cmd >& $logfile");
if ($error == 0) {
    print "Tests OK. Proceeding to push.\n";
    system("rm $logfile");
}
else {
    die("Tests FAILED. See log $logfile. Run $test_cmd and fix errors.\n");
}
